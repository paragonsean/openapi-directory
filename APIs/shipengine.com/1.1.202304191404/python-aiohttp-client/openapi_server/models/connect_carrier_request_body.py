# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ancillary_service_endorsement import AncillaryServiceEndorsement
from openapi_server.models.connect_access_worldwide_request_body import ConnectAccessWorldwideRequestBody
from openapi_server.models.connect_amazon_buy_shipping_request_body import ConnectAmazonBuyShippingRequestBody
from openapi_server.models.connect_amazon_shipping_uk import ConnectAmazonShippingUk
from openapi_server.models.connect_apc_request_body import ConnectApcRequestBody
from openapi_server.models.connect_asendia_request_body import ConnectAsendiaRequestBody
from openapi_server.models.connect_australia_post_request_body import ConnectAustraliaPostRequestBody
from openapi_server.models.connect_canada_post_request_body import ConnectCanadaPostRequestBody
from openapi_server.models.connect_dhl_ecommerce_request_body import ConnectDhlEcommerceRequestBody
from openapi_server.models.connect_dhl_express_au_request_body import ConnectDhlExpressAuRequestBody
from openapi_server.models.connect_dhl_express_ca_request_body import ConnectDhlExpressCaRequestBody
from openapi_server.models.connect_dhl_express_request_body import ConnectDhlExpressRequestBody
from openapi_server.models.connect_dhl_express_uk_request_body import ConnectDhlExpressUkRequestBody
from openapi_server.models.connect_dpd_request_body import ConnectDpdRequestBody
from openapi_server.models.connect_endicia_request_body import ConnectEndiciaRequestBody
from openapi_server.models.connect_fedex_request_body import ConnectFedexRequestBody
from openapi_server.models.connect_fedex_uk_request_body import ConnectFedexUkRequestBody
from openapi_server.models.connect_firstmile_request_body import ConnectFirstmileRequestBody
from openapi_server.models.connect_imex_request_body import ConnectImexRequestBody
from openapi_server.models.connect_newgistics_request_body import ConnectNewgisticsRequestBody
from openapi_server.models.connect_ontrac_request_body import ConnectOntracRequestBody
from openapi_server.models.connect_purolator_request_body import ConnectPurolatorRequestBody
from openapi_server.models.connect_royal_mail_request_body import ConnectRoyalMailRequestBody
from openapi_server.models.connect_rr_donnelley_request_body import ConnectRrDonnelleyRequestBody
from openapi_server.models.connect_seko_request_body import ConnectSekoRequestBody
from openapi_server.models.connect_sendle_request_body import ConnectSendleRequestBody
from openapi_server.models.connect_stamps_request_body import ConnectStampsRequestBody
from openapi_server.models.connect_ups_request_body import ConnectUpsRequestBody
from openapi_server.models.ups_invoice import UpsInvoice
import re
from openapi_server import util


class ConnectCarrierRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nickname: str=None, password: str=None, username: str=None, email: str=None, merchant_seller_id: str=None, mws_auth_token: str=None, auth_code: str=None, account_number: str=None, ftp_password: str=None, ftp_username: str=None, api_key: str=None, api_secret: str=None, contract_id: str=None, ancillary_endorsement: AncillaryServiceEndorsement=None, client_id: str=None, distribution_center: str=None, pickup_number: str=None, registration_id: str=None, software_name: str=None, sold_to: str=None, country_code: str=None, site_id: str=None, account: str=None, passphrase: str=None, address1: str=None, address2: str=None, agree_to_eula: bool=None, city: str=None, company: str=None, first_name: str=None, last_name: str=None, meter_number: str=None, phone: str=None, postal_code: str=None, state: str=None, mailer_id: int=None, profile_name: str=None, induction_site: str=None, merchant_id: int=None, activation_key: str=None, company_name: str=None, contact_name: str=None, oba_email: str=None, street_line1: str=None, street_line2: str=None, street_line3: str=None, access_key: str=None, sendle_id: str=None, account_country_code: str=None, account_postal_code: str=None, agree_to_technology_agreement: bool=None, invoice: UpsInvoice=None, invoice_amount: float=None, invoice_currency_code: str=None, title: str=None):
        """ConnectCarrierRequestBody - a model defined in OpenAPI

        :param nickname: The nickname of this ConnectCarrierRequestBody.
        :param password: The password of this ConnectCarrierRequestBody.
        :param username: The username of this ConnectCarrierRequestBody.
        :param email: The email of this ConnectCarrierRequestBody.
        :param merchant_seller_id: The merchant_seller_id of this ConnectCarrierRequestBody.
        :param mws_auth_token: The mws_auth_token of this ConnectCarrierRequestBody.
        :param auth_code: The auth_code of this ConnectCarrierRequestBody.
        :param account_number: The account_number of this ConnectCarrierRequestBody.
        :param ftp_password: The ftp_password of this ConnectCarrierRequestBody.
        :param ftp_username: The ftp_username of this ConnectCarrierRequestBody.
        :param api_key: The api_key of this ConnectCarrierRequestBody.
        :param api_secret: The api_secret of this ConnectCarrierRequestBody.
        :param contract_id: The contract_id of this ConnectCarrierRequestBody.
        :param ancillary_endorsement: The ancillary_endorsement of this ConnectCarrierRequestBody.
        :param client_id: The client_id of this ConnectCarrierRequestBody.
        :param distribution_center: The distribution_center of this ConnectCarrierRequestBody.
        :param pickup_number: The pickup_number of this ConnectCarrierRequestBody.
        :param registration_id: The registration_id of this ConnectCarrierRequestBody.
        :param software_name: The software_name of this ConnectCarrierRequestBody.
        :param sold_to: The sold_to of this ConnectCarrierRequestBody.
        :param country_code: The country_code of this ConnectCarrierRequestBody.
        :param site_id: The site_id of this ConnectCarrierRequestBody.
        :param account: The account of this ConnectCarrierRequestBody.
        :param passphrase: The passphrase of this ConnectCarrierRequestBody.
        :param address1: The address1 of this ConnectCarrierRequestBody.
        :param address2: The address2 of this ConnectCarrierRequestBody.
        :param agree_to_eula: The agree_to_eula of this ConnectCarrierRequestBody.
        :param city: The city of this ConnectCarrierRequestBody.
        :param company: The company of this ConnectCarrierRequestBody.
        :param first_name: The first_name of this ConnectCarrierRequestBody.
        :param last_name: The last_name of this ConnectCarrierRequestBody.
        :param meter_number: The meter_number of this ConnectCarrierRequestBody.
        :param phone: The phone of this ConnectCarrierRequestBody.
        :param postal_code: The postal_code of this ConnectCarrierRequestBody.
        :param state: The state of this ConnectCarrierRequestBody.
        :param mailer_id: The mailer_id of this ConnectCarrierRequestBody.
        :param profile_name: The profile_name of this ConnectCarrierRequestBody.
        :param induction_site: The induction_site of this ConnectCarrierRequestBody.
        :param merchant_id: The merchant_id of this ConnectCarrierRequestBody.
        :param activation_key: The activation_key of this ConnectCarrierRequestBody.
        :param company_name: The company_name of this ConnectCarrierRequestBody.
        :param contact_name: The contact_name of this ConnectCarrierRequestBody.
        :param oba_email: The oba_email of this ConnectCarrierRequestBody.
        :param street_line1: The street_line1 of this ConnectCarrierRequestBody.
        :param street_line2: The street_line2 of this ConnectCarrierRequestBody.
        :param street_line3: The street_line3 of this ConnectCarrierRequestBody.
        :param access_key: The access_key of this ConnectCarrierRequestBody.
        :param sendle_id: The sendle_id of this ConnectCarrierRequestBody.
        :param account_country_code: The account_country_code of this ConnectCarrierRequestBody.
        :param account_postal_code: The account_postal_code of this ConnectCarrierRequestBody.
        :param agree_to_technology_agreement: The agree_to_technology_agreement of this ConnectCarrierRequestBody.
        :param invoice: The invoice of this ConnectCarrierRequestBody.
        :param invoice_amount: The invoice_amount of this ConnectCarrierRequestBody.
        :param invoice_currency_code: The invoice_currency_code of this ConnectCarrierRequestBody.
        :param title: The title of this ConnectCarrierRequestBody.
        """
        self.openapi_types = {
            'nickname': str,
            'password': str,
            'username': str,
            'email': str,
            'merchant_seller_id': str,
            'mws_auth_token': str,
            'auth_code': str,
            'account_number': str,
            'ftp_password': str,
            'ftp_username': str,
            'api_key': str,
            'api_secret': str,
            'contract_id': str,
            'ancillary_endorsement': AncillaryServiceEndorsement,
            'client_id': str,
            'distribution_center': str,
            'pickup_number': str,
            'registration_id': str,
            'software_name': str,
            'sold_to': str,
            'country_code': str,
            'site_id': str,
            'account': str,
            'passphrase': str,
            'address1': str,
            'address2': str,
            'agree_to_eula': bool,
            'city': str,
            'company': str,
            'first_name': str,
            'last_name': str,
            'meter_number': str,
            'phone': str,
            'postal_code': str,
            'state': str,
            'mailer_id': int,
            'profile_name': str,
            'induction_site': str,
            'merchant_id': int,
            'activation_key': str,
            'company_name': str,
            'contact_name': str,
            'oba_email': str,
            'street_line1': str,
            'street_line2': str,
            'street_line3': str,
            'access_key': str,
            'sendle_id': str,
            'account_country_code': str,
            'account_postal_code': str,
            'agree_to_technology_agreement': bool,
            'invoice': UpsInvoice,
            'invoice_amount': float,
            'invoice_currency_code': str,
            'title': str
        }

        self.attribute_map = {
            'nickname': 'nickname',
            'password': 'password',
            'username': 'username',
            'email': 'email',
            'merchant_seller_id': 'merchant_seller_id',
            'mws_auth_token': 'mws_auth_token',
            'auth_code': 'auth_code',
            'account_number': 'account_number',
            'ftp_password': 'ftp_password',
            'ftp_username': 'ftp_username',
            'api_key': 'api_key',
            'api_secret': 'api_secret',
            'contract_id': 'contract_id',
            'ancillary_endorsement': 'ancillary_endorsement',
            'client_id': 'client_id',
            'distribution_center': 'distribution_center',
            'pickup_number': 'pickup_number',
            'registration_id': 'registration_id',
            'software_name': 'software_name',
            'sold_to': 'sold_to',
            'country_code': 'country_code',
            'site_id': 'site_id',
            'account': 'account',
            'passphrase': 'passphrase',
            'address1': 'address1',
            'address2': 'address2',
            'agree_to_eula': 'agree_to_eula',
            'city': 'city',
            'company': 'company',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'meter_number': 'meter_number',
            'phone': 'phone',
            'postal_code': 'postal_code',
            'state': 'state',
            'mailer_id': 'mailer_id',
            'profile_name': 'profile_name',
            'induction_site': 'induction_site',
            'merchant_id': 'merchant_id',
            'activation_key': 'activation_key',
            'company_name': 'company_name',
            'contact_name': 'contact_name',
            'oba_email': 'oba_email',
            'street_line1': 'street_line1',
            'street_line2': 'street_line2',
            'street_line3': 'street_line3',
            'access_key': 'access_key',
            'sendle_id': 'sendle_id',
            'account_country_code': 'account_country_code',
            'account_postal_code': 'account_postal_code',
            'agree_to_technology_agreement': 'agree_to_technology_agreement',
            'invoice': 'invoice',
            'invoice_amount': 'invoice_amount',
            'invoice_currency_code': 'invoice_currency_code',
            'title': 'title'
        }

        self._nickname = nickname
        self._password = password
        self._username = username
        self._email = email
        self._merchant_seller_id = merchant_seller_id
        self._mws_auth_token = mws_auth_token
        self._auth_code = auth_code
        self._account_number = account_number
        self._ftp_password = ftp_password
        self._ftp_username = ftp_username
        self._api_key = api_key
        self._api_secret = api_secret
        self._contract_id = contract_id
        self._ancillary_endorsement = ancillary_endorsement
        self._client_id = client_id
        self._distribution_center = distribution_center
        self._pickup_number = pickup_number
        self._registration_id = registration_id
        self._software_name = software_name
        self._sold_to = sold_to
        self._country_code = country_code
        self._site_id = site_id
        self._account = account
        self._passphrase = passphrase
        self._address1 = address1
        self._address2 = address2
        self._agree_to_eula = agree_to_eula
        self._city = city
        self._company = company
        self._first_name = first_name
        self._last_name = last_name
        self._meter_number = meter_number
        self._phone = phone
        self._postal_code = postal_code
        self._state = state
        self._mailer_id = mailer_id
        self._profile_name = profile_name
        self._induction_site = induction_site
        self._merchant_id = merchant_id
        self._activation_key = activation_key
        self._company_name = company_name
        self._contact_name = contact_name
        self._oba_email = oba_email
        self._street_line1 = street_line1
        self._street_line2 = street_line2
        self._street_line3 = street_line3
        self._access_key = access_key
        self._sendle_id = sendle_id
        self._account_country_code = account_country_code
        self._account_postal_code = account_postal_code
        self._agree_to_technology_agreement = agree_to_technology_agreement
        self._invoice = invoice
        self._invoice_amount = invoice_amount
        self._invoice_currency_code = invoice_currency_code
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectCarrierRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_carrier_request_body of this ConnectCarrierRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nickname(self):
        """Gets the nickname of this ConnectCarrierRequestBody.

        Nickname

        :return: The nickname of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectCarrierRequestBody.

        Nickname

        :param nickname: The nickname of this ConnectCarrierRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def password(self):
        """Gets the password of this ConnectCarrierRequestBody.

        Password

        :return: The password of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConnectCarrierRequestBody.

        Password

        :param password: The password of this ConnectCarrierRequestBody.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this ConnectCarrierRequestBody.

        Username

        :return: The username of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConnectCarrierRequestBody.

        Username

        :param username: The username of this ConnectCarrierRequestBody.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")

        self._username = username

    @property
    def email(self):
        """Gets the email of this ConnectCarrierRequestBody.

        The email address

        :return: The email of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ConnectCarrierRequestBody.

        The email address

        :param email: The email of this ConnectCarrierRequestBody.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def merchant_seller_id(self):
        """Gets the merchant_seller_id of this ConnectCarrierRequestBody.


        :return: The merchant_seller_id of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._merchant_seller_id

    @merchant_seller_id.setter
    def merchant_seller_id(self, merchant_seller_id):
        """Sets the merchant_seller_id of this ConnectCarrierRequestBody.


        :param merchant_seller_id: The merchant_seller_id of this ConnectCarrierRequestBody.
        :type merchant_seller_id: str
        """
        if merchant_seller_id is None:
            raise ValueError("Invalid value for `merchant_seller_id`, must not be `None`")
        if merchant_seller_id is not None and len(merchant_seller_id) < 1:
            raise ValueError("Invalid value for `merchant_seller_id`, length must be greater than or equal to `1`")

        self._merchant_seller_id = merchant_seller_id

    @property
    def mws_auth_token(self):
        """Gets the mws_auth_token of this ConnectCarrierRequestBody.


        :return: The mws_auth_token of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._mws_auth_token

    @mws_auth_token.setter
    def mws_auth_token(self, mws_auth_token):
        """Sets the mws_auth_token of this ConnectCarrierRequestBody.


        :param mws_auth_token: The mws_auth_token of this ConnectCarrierRequestBody.
        :type mws_auth_token: str
        """
        if mws_auth_token is None:
            raise ValueError("Invalid value for `mws_auth_token`, must not be `None`")
        if mws_auth_token is not None and len(mws_auth_token) < 1:
            raise ValueError("Invalid value for `mws_auth_token`, length must be greater than or equal to `1`")

        self._mws_auth_token = mws_auth_token

    @property
    def auth_code(self):
        """Gets the auth_code of this ConnectCarrierRequestBody.

        Amazon UK Shipping auth code.

        :return: The auth_code of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this ConnectCarrierRequestBody.

        Amazon UK Shipping auth code.

        :param auth_code: The auth_code of this ConnectCarrierRequestBody.
        :type auth_code: str
        """
        if auth_code is None:
            raise ValueError("Invalid value for `auth_code`, must not be `None`")
        if auth_code is not None and len(auth_code) < 1:
            raise ValueError("Invalid value for `auth_code`, length must be greater than or equal to `1`")

        self._auth_code = auth_code

    @property
    def account_number(self):
        """Gets the account_number of this ConnectCarrierRequestBody.

        Account number

        :return: The account_number of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ConnectCarrierRequestBody.

        Account number

        :param account_number: The account_number of this ConnectCarrierRequestBody.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def ftp_password(self):
        """Gets the ftp_password of this ConnectCarrierRequestBody.

        FTP password

        :return: The ftp_password of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._ftp_password

    @ftp_password.setter
    def ftp_password(self, ftp_password):
        """Sets the ftp_password of this ConnectCarrierRequestBody.

        FTP password

        :param ftp_password: The ftp_password of this ConnectCarrierRequestBody.
        :type ftp_password: str
        """
        if ftp_password is None:
            raise ValueError("Invalid value for `ftp_password`, must not be `None`")
        if ftp_password is not None and len(ftp_password) < 1:
            raise ValueError("Invalid value for `ftp_password`, length must be greater than or equal to `1`")

        self._ftp_password = ftp_password

    @property
    def ftp_username(self):
        """Gets the ftp_username of this ConnectCarrierRequestBody.

        FTP username

        :return: The ftp_username of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._ftp_username

    @ftp_username.setter
    def ftp_username(self, ftp_username):
        """Sets the ftp_username of this ConnectCarrierRequestBody.

        FTP username

        :param ftp_username: The ftp_username of this ConnectCarrierRequestBody.
        :type ftp_username: str
        """
        if ftp_username is None:
            raise ValueError("Invalid value for `ftp_username`, must not be `None`")
        if ftp_username is not None and len(ftp_username) < 1:
            raise ValueError("Invalid value for `ftp_username`, length must be greater than or equal to `1`")

        self._ftp_username = ftp_username

    @property
    def api_key(self):
        """Gets the api_key of this ConnectCarrierRequestBody.

        API key

        :return: The api_key of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ConnectCarrierRequestBody.

        API key

        :param api_key: The api_key of this ConnectCarrierRequestBody.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")
        if api_key is not None and len(api_key) < 1:
            raise ValueError("Invalid value for `api_key`, length must be greater than or equal to `1`")

        self._api_key = api_key

    @property
    def api_secret(self):
        """Gets the api_secret of this ConnectCarrierRequestBody.

        The DHL E-Commerce API secret. This field is optional, but if not set you will not be able to get rates for this account. 

        :return: The api_secret of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._api_secret

    @api_secret.setter
    def api_secret(self, api_secret):
        """Sets the api_secret of this ConnectCarrierRequestBody.

        The DHL E-Commerce API secret. This field is optional, but if not set you will not be able to get rates for this account. 

        :param api_secret: The api_secret of this ConnectCarrierRequestBody.
        :type api_secret: str
        """
        if api_secret is None:
            raise ValueError("Invalid value for `api_secret`, must not be `None`")
        if api_secret is not None and len(api_secret) < 1:
            raise ValueError("Invalid value for `api_secret`, length must be greater than or equal to `1`")

        self._api_secret = api_secret

    @property
    def contract_id(self):
        """Gets the contract_id of this ConnectCarrierRequestBody.

        Canada Post Account Contract ID

        :return: The contract_id of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this ConnectCarrierRequestBody.

        Canada Post Account Contract ID

        :param contract_id: The contract_id of this ConnectCarrierRequestBody.
        :type contract_id: str
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")
        if contract_id is not None and len(contract_id) < 1:
            raise ValueError("Invalid value for `contract_id`, length must be greater than or equal to `1`")

        self._contract_id = contract_id

    @property
    def ancillary_endorsement(self):
        """Gets the ancillary_endorsement of this ConnectCarrierRequestBody.


        :return: The ancillary_endorsement of this ConnectCarrierRequestBody.
        :rtype: AncillaryServiceEndorsement
        """
        return self._ancillary_endorsement

    @ancillary_endorsement.setter
    def ancillary_endorsement(self, ancillary_endorsement):
        """Sets the ancillary_endorsement of this ConnectCarrierRequestBody.


        :param ancillary_endorsement: The ancillary_endorsement of this ConnectCarrierRequestBody.
        :type ancillary_endorsement: AncillaryServiceEndorsement
        """

        self._ancillary_endorsement = ancillary_endorsement

    @property
    def client_id(self):
        """Gets the client_id of this ConnectCarrierRequestBody.

        The client id

        :return: The client_id of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ConnectCarrierRequestBody.

        The client id

        :param client_id: The client_id of this ConnectCarrierRequestBody.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")
        if client_id is not None and len(client_id) < 1:
            raise ValueError("Invalid value for `client_id`, length must be greater than or equal to `1`")

        self._client_id = client_id

    @property
    def distribution_center(self):
        """Gets the distribution_center of this ConnectCarrierRequestBody.

        The distribution center

        :return: The distribution_center of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._distribution_center

    @distribution_center.setter
    def distribution_center(self, distribution_center):
        """Sets the distribution_center of this ConnectCarrierRequestBody.

        The distribution center

        :param distribution_center: The distribution_center of this ConnectCarrierRequestBody.
        :type distribution_center: str
        """
        if distribution_center is None:
            raise ValueError("Invalid value for `distribution_center`, must not be `None`")
        if distribution_center is not None and len(distribution_center) < 1:
            raise ValueError("Invalid value for `distribution_center`, length must be greater than or equal to `1`")

        self._distribution_center = distribution_center

    @property
    def pickup_number(self):
        """Gets the pickup_number of this ConnectCarrierRequestBody.

        The pickup number

        :return: The pickup_number of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._pickup_number

    @pickup_number.setter
    def pickup_number(self, pickup_number):
        """Sets the pickup_number of this ConnectCarrierRequestBody.

        The pickup number

        :param pickup_number: The pickup_number of this ConnectCarrierRequestBody.
        :type pickup_number: str
        """
        if pickup_number is None:
            raise ValueError("Invalid value for `pickup_number`, must not be `None`")
        if pickup_number is not None and len(pickup_number) < 1:
            raise ValueError("Invalid value for `pickup_number`, length must be greater than or equal to `1`")

        self._pickup_number = pickup_number

    @property
    def registration_id(self):
        """Gets the registration_id of this ConnectCarrierRequestBody.


        :return: The registration_id of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this ConnectCarrierRequestBody.


        :param registration_id: The registration_id of this ConnectCarrierRequestBody.
        :type registration_id: str
        """

        self._registration_id = registration_id

    @property
    def software_name(self):
        """Gets the software_name of this ConnectCarrierRequestBody.


        :return: The software_name of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._software_name

    @software_name.setter
    def software_name(self, software_name):
        """Sets the software_name of this ConnectCarrierRequestBody.


        :param software_name: The software_name of this ConnectCarrierRequestBody.
        :type software_name: str
        """

        self._software_name = software_name

    @property
    def sold_to(self):
        """Gets the sold_to of this ConnectCarrierRequestBody.

        Sold To field

        :return: The sold_to of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._sold_to

    @sold_to.setter
    def sold_to(self, sold_to):
        """Sets the sold_to of this ConnectCarrierRequestBody.

        Sold To field

        :param sold_to: The sold_to of this ConnectCarrierRequestBody.
        :type sold_to: str
        """

        self._sold_to = sold_to

    @property
    def country_code(self):
        """Gets the country_code of this ConnectCarrierRequestBody.

        Country code

        :return: The country_code of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ConnectCarrierRequestBody.

        Country code

        :param country_code: The country_code of this ConnectCarrierRequestBody.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")
        if country_code is not None and len(country_code) < 1:
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `1`")

        self._country_code = country_code

    @property
    def site_id(self):
        """Gets the site_id of this ConnectCarrierRequestBody.

        A string that uniquely identifies the site

        :return: The site_id of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this ConnectCarrierRequestBody.

        A string that uniquely identifies the site

        :param site_id: The site_id of this ConnectCarrierRequestBody.
        :type site_id: str
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")
        if site_id is not None and len(site_id) > 25:
            raise ValueError("Invalid value for `site_id`, length must be less than or equal to `25`")
        if site_id is not None and len(site_id) < 1:
            raise ValueError("Invalid value for `site_id`, length must be greater than or equal to `1`")
        if site_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', site_id):
            raise ValueError("Invalid value for `site_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._site_id = site_id

    @property
    def account(self):
        """Gets the account of this ConnectCarrierRequestBody.

        Account

        :return: The account of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ConnectCarrierRequestBody.

        Account

        :param account: The account of this ConnectCarrierRequestBody.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")
        if account is not None and len(account) < 1:
            raise ValueError("Invalid value for `account`, length must be greater than or equal to `1`")

        self._account = account

    @property
    def passphrase(self):
        """Gets the passphrase of this ConnectCarrierRequestBody.

        Passphrase

        :return: The passphrase of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this ConnectCarrierRequestBody.

        Passphrase

        :param passphrase: The passphrase of this ConnectCarrierRequestBody.
        :type passphrase: str
        """
        if passphrase is None:
            raise ValueError("Invalid value for `passphrase`, must not be `None`")
        if passphrase is not None and len(passphrase) < 1:
            raise ValueError("Invalid value for `passphrase`, length must be greater than or equal to `1`")

        self._passphrase = passphrase

    @property
    def address1(self):
        """Gets the address1 of this ConnectCarrierRequestBody.

        Address Line 1

        :return: The address1 of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this ConnectCarrierRequestBody.

        Address Line 1

        :param address1: The address1 of this ConnectCarrierRequestBody.
        :type address1: str
        """
        if address1 is None:
            raise ValueError("Invalid value for `address1`, must not be `None`")
        if address1 is not None and len(address1) < 1:
            raise ValueError("Invalid value for `address1`, length must be greater than or equal to `1`")

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this ConnectCarrierRequestBody.

        Address Line 2

        :return: The address2 of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this ConnectCarrierRequestBody.

        Address Line 2

        :param address2: The address2 of this ConnectCarrierRequestBody.
        :type address2: str
        """
        if address2 is not None and len(address2) < 1:
            raise ValueError("Invalid value for `address2`, length must be greater than or equal to `1`")

        self._address2 = address2

    @property
    def agree_to_eula(self):
        """Gets the agree_to_eula of this ConnectCarrierRequestBody.

        Boolean signaling agreement to the Fedex End User License Agreement

        :return: The agree_to_eula of this ConnectCarrierRequestBody.
        :rtype: bool
        """
        return self._agree_to_eula

    @agree_to_eula.setter
    def agree_to_eula(self, agree_to_eula):
        """Sets the agree_to_eula of this ConnectCarrierRequestBody.

        Boolean signaling agreement to the Fedex End User License Agreement

        :param agree_to_eula: The agree_to_eula of this ConnectCarrierRequestBody.
        :type agree_to_eula: bool
        """
        if agree_to_eula is None:
            raise ValueError("Invalid value for `agree_to_eula`, must not be `None`")

        self._agree_to_eula = agree_to_eula

    @property
    def city(self):
        """Gets the city of this ConnectCarrierRequestBody.

        City

        :return: The city of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ConnectCarrierRequestBody.

        City

        :param city: The city of this ConnectCarrierRequestBody.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and len(city) < 1:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `1`")

        self._city = city

    @property
    def company(self):
        """Gets the company of this ConnectCarrierRequestBody.

        Company

        :return: The company of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ConnectCarrierRequestBody.

        Company

        :param company: The company of this ConnectCarrierRequestBody.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")
        if company is not None and len(company) < 1:
            raise ValueError("Invalid value for `company`, length must be greater than or equal to `1`")

        self._company = company

    @property
    def first_name(self):
        """Gets the first_name of this ConnectCarrierRequestBody.

        First name

        :return: The first_name of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ConnectCarrierRequestBody.

        First name

        :param first_name: The first_name of this ConnectCarrierRequestBody.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ConnectCarrierRequestBody.

        Last name

        :return: The last_name of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ConnectCarrierRequestBody.

        Last name

        :param last_name: The last_name of this ConnectCarrierRequestBody.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def meter_number(self):
        """Gets the meter_number of this ConnectCarrierRequestBody.

        Meter number

        :return: The meter_number of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._meter_number

    @meter_number.setter
    def meter_number(self, meter_number):
        """Sets the meter_number of this ConnectCarrierRequestBody.

        Meter number

        :param meter_number: The meter_number of this ConnectCarrierRequestBody.
        :type meter_number: str
        """
        if meter_number is not None and len(meter_number) < 1:
            raise ValueError("Invalid value for `meter_number`, length must be greater than or equal to `1`")

        self._meter_number = meter_number

    @property
    def phone(self):
        """Gets the phone of this ConnectCarrierRequestBody.

        Phone

        :return: The phone of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ConnectCarrierRequestBody.

        Phone

        :param phone: The phone of this ConnectCarrierRequestBody.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")
        if phone is not None and len(phone) < 1:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `1`")

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this ConnectCarrierRequestBody.

        Postal code

        :return: The postal_code of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ConnectCarrierRequestBody.

        Postal code

        :param postal_code: The postal_code of this ConnectCarrierRequestBody.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")
        if postal_code is not None and len(postal_code) < 1:
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `1`")

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this ConnectCarrierRequestBody.

        State

        :return: The state of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConnectCarrierRequestBody.

        State

        :param state: The state of this ConnectCarrierRequestBody.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")
        if state is not None and len(state) < 1:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")

        self._state = state

    @property
    def mailer_id(self):
        """Gets the mailer_id of this ConnectCarrierRequestBody.

        Mailer id

        :return: The mailer_id of this ConnectCarrierRequestBody.
        :rtype: int
        """
        return self._mailer_id

    @mailer_id.setter
    def mailer_id(self, mailer_id):
        """Sets the mailer_id of this ConnectCarrierRequestBody.

        Mailer id

        :param mailer_id: The mailer_id of this ConnectCarrierRequestBody.
        :type mailer_id: int
        """
        if mailer_id is None:
            raise ValueError("Invalid value for `mailer_id`, must not be `None`")
        if mailer_id is not None and mailer_id < 0:
            raise ValueError("Invalid value for `mailer_id`, must be a value greater than or equal to `0`")

        self._mailer_id = mailer_id

    @property
    def profile_name(self):
        """Gets the profile_name of this ConnectCarrierRequestBody.

        Profile name

        :return: The profile_name of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this ConnectCarrierRequestBody.

        Profile name

        :param profile_name: The profile_name of this ConnectCarrierRequestBody.
        :type profile_name: str
        """
        if profile_name is not None and len(profile_name) < 1:
            raise ValueError("Invalid value for `profile_name`, length must be greater than or equal to `1`")

        self._profile_name = profile_name

    @property
    def induction_site(self):
        """Gets the induction_site of this ConnectCarrierRequestBody.

        Induction site

        :return: The induction_site of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._induction_site

    @induction_site.setter
    def induction_site(self, induction_site):
        """Sets the induction_site of this ConnectCarrierRequestBody.

        Induction site

        :param induction_site: The induction_site of this ConnectCarrierRequestBody.
        :type induction_site: str
        """
        if induction_site is None:
            raise ValueError("Invalid value for `induction_site`, must not be `None`")
        if induction_site is not None and len(induction_site) < 1:
            raise ValueError("Invalid value for `induction_site`, length must be greater than or equal to `1`")

        self._induction_site = induction_site

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ConnectCarrierRequestBody.

        Merchant id

        :return: The merchant_id of this ConnectCarrierRequestBody.
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ConnectCarrierRequestBody.

        Merchant id

        :param merchant_id: The merchant_id of this ConnectCarrierRequestBody.
        :type merchant_id: int
        """
        if merchant_id is not None and merchant_id < 0:
            raise ValueError("Invalid value for `merchant_id`, must be a value greater than or equal to `0`")

        self._merchant_id = merchant_id

    @property
    def activation_key(self):
        """Gets the activation_key of this ConnectCarrierRequestBody.

        Activation key

        :return: The activation_key of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._activation_key

    @activation_key.setter
    def activation_key(self, activation_key):
        """Sets the activation_key of this ConnectCarrierRequestBody.

        Activation key

        :param activation_key: The activation_key of this ConnectCarrierRequestBody.
        :type activation_key: str
        """
        if activation_key is None:
            raise ValueError("Invalid value for `activation_key`, must not be `None`")
        if activation_key is not None and len(activation_key) < 1:
            raise ValueError("Invalid value for `activation_key`, length must be greater than or equal to `1`")

        self._activation_key = activation_key

    @property
    def company_name(self):
        """Gets the company_name of this ConnectCarrierRequestBody.

        Company name

        :return: The company_name of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ConnectCarrierRequestBody.

        Company name

        :param company_name: The company_name of this ConnectCarrierRequestBody.
        :type company_name: str
        """
        if company_name is not None and len(company_name) < 1:
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `1`")

        self._company_name = company_name

    @property
    def contact_name(self):
        """Gets the contact_name of this ConnectCarrierRequestBody.

        Contact name

        :return: The contact_name of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this ConnectCarrierRequestBody.

        Contact name

        :param contact_name: The contact_name of this ConnectCarrierRequestBody.
        :type contact_name: str
        """
        if contact_name is None:
            raise ValueError("Invalid value for `contact_name`, must not be `None`")
        if contact_name is not None and len(contact_name) < 1:
            raise ValueError("Invalid value for `contact_name`, length must be greater than or equal to `1`")

        self._contact_name = contact_name

    @property
    def oba_email(self):
        """Gets the oba_email of this ConnectCarrierRequestBody.

        The oba email address

        :return: The oba_email of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._oba_email

    @oba_email.setter
    def oba_email(self, oba_email):
        """Sets the oba_email of this ConnectCarrierRequestBody.

        The oba email address

        :param oba_email: The oba_email of this ConnectCarrierRequestBody.
        :type oba_email: str
        """
        if oba_email is not None and len(oba_email) < 1:
            raise ValueError("Invalid value for `oba_email`, length must be greater than or equal to `1`")

        self._oba_email = oba_email

    @property
    def street_line1(self):
        """Gets the street_line1 of this ConnectCarrierRequestBody.

        Street line1

        :return: The street_line1 of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._street_line1

    @street_line1.setter
    def street_line1(self, street_line1):
        """Sets the street_line1 of this ConnectCarrierRequestBody.

        Street line1

        :param street_line1: The street_line1 of this ConnectCarrierRequestBody.
        :type street_line1: str
        """
        if street_line1 is not None and len(street_line1) < 1:
            raise ValueError("Invalid value for `street_line1`, length must be greater than or equal to `1`")

        self._street_line1 = street_line1

    @property
    def street_line2(self):
        """Gets the street_line2 of this ConnectCarrierRequestBody.

        Street line2

        :return: The street_line2 of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._street_line2

    @street_line2.setter
    def street_line2(self, street_line2):
        """Sets the street_line2 of this ConnectCarrierRequestBody.

        Street line2

        :param street_line2: The street_line2 of this ConnectCarrierRequestBody.
        :type street_line2: str
        """
        if street_line2 is not None and len(street_line2) < 1:
            raise ValueError("Invalid value for `street_line2`, length must be greater than or equal to `1`")

        self._street_line2 = street_line2

    @property
    def street_line3(self):
        """Gets the street_line3 of this ConnectCarrierRequestBody.

        Street line3

        :return: The street_line3 of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._street_line3

    @street_line3.setter
    def street_line3(self, street_line3):
        """Sets the street_line3 of this ConnectCarrierRequestBody.

        Street line3

        :param street_line3: The street_line3 of this ConnectCarrierRequestBody.
        :type street_line3: str
        """
        if street_line3 is not None and len(street_line3) < 1:
            raise ValueError("Invalid value for `street_line3`, length must be greater than or equal to `1`")

        self._street_line3 = street_line3

    @property
    def access_key(self):
        """Gets the access_key of this ConnectCarrierRequestBody.

        Seko Account Access Key

        :return: The access_key of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this ConnectCarrierRequestBody.

        Seko Account Access Key

        :param access_key: The access_key of this ConnectCarrierRequestBody.
        :type access_key: str
        """
        if access_key is None:
            raise ValueError("Invalid value for `access_key`, must not be `None`")
        if access_key is not None and len(access_key) < 1:
            raise ValueError("Invalid value for `access_key`, length must be greater than or equal to `1`")

        self._access_key = access_key

    @property
    def sendle_id(self):
        """Gets the sendle_id of this ConnectCarrierRequestBody.

        A string that uniquely identifies the sendle

        :return: The sendle_id of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._sendle_id

    @sendle_id.setter
    def sendle_id(self, sendle_id):
        """Sets the sendle_id of this ConnectCarrierRequestBody.

        A string that uniquely identifies the sendle

        :param sendle_id: The sendle_id of this ConnectCarrierRequestBody.
        :type sendle_id: str
        """
        if sendle_id is None:
            raise ValueError("Invalid value for `sendle_id`, must not be `None`")
        if sendle_id is not None and len(sendle_id) > 25:
            raise ValueError("Invalid value for `sendle_id`, length must be less than or equal to `25`")
        if sendle_id is not None and len(sendle_id) < 1:
            raise ValueError("Invalid value for `sendle_id`, length must be greater than or equal to `1`")
        if sendle_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', sendle_id):
            raise ValueError("Invalid value for `sendle_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._sendle_id = sendle_id

    @property
    def account_country_code(self):
        """Gets the account_country_code of this ConnectCarrierRequestBody.

        Account country code

        :return: The account_country_code of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._account_country_code

    @account_country_code.setter
    def account_country_code(self, account_country_code):
        """Sets the account_country_code of this ConnectCarrierRequestBody.

        Account country code

        :param account_country_code: The account_country_code of this ConnectCarrierRequestBody.
        :type account_country_code: str
        """
        if account_country_code is None:
            raise ValueError("Invalid value for `account_country_code`, must not be `None`")
        if account_country_code is not None and len(account_country_code) < 1:
            raise ValueError("Invalid value for `account_country_code`, length must be greater than or equal to `1`")

        self._account_country_code = account_country_code

    @property
    def account_postal_code(self):
        """Gets the account_postal_code of this ConnectCarrierRequestBody.

        Account postal code

        :return: The account_postal_code of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._account_postal_code

    @account_postal_code.setter
    def account_postal_code(self, account_postal_code):
        """Sets the account_postal_code of this ConnectCarrierRequestBody.

        Account postal code

        :param account_postal_code: The account_postal_code of this ConnectCarrierRequestBody.
        :type account_postal_code: str
        """
        if account_postal_code is None:
            raise ValueError("Invalid value for `account_postal_code`, must not be `None`")
        if account_postal_code is not None and len(account_postal_code) < 1:
            raise ValueError("Invalid value for `account_postal_code`, length must be greater than or equal to `1`")

        self._account_postal_code = account_postal_code

    @property
    def agree_to_technology_agreement(self):
        """Gets the agree_to_technology_agreement of this ConnectCarrierRequestBody.

        The Agreement to the [UPS Technology Agreement](https://www.ups.com/assets/resources/media/UTA_with_EUR.pdf)

        :return: The agree_to_technology_agreement of this ConnectCarrierRequestBody.
        :rtype: bool
        """
        return self._agree_to_technology_agreement

    @agree_to_technology_agreement.setter
    def agree_to_technology_agreement(self, agree_to_technology_agreement):
        """Sets the agree_to_technology_agreement of this ConnectCarrierRequestBody.

        The Agreement to the [UPS Technology Agreement](https://www.ups.com/assets/resources/media/UTA_with_EUR.pdf)

        :param agree_to_technology_agreement: The agree_to_technology_agreement of this ConnectCarrierRequestBody.
        :type agree_to_technology_agreement: bool
        """
        if agree_to_technology_agreement is None:
            raise ValueError("Invalid value for `agree_to_technology_agreement`, must not be `None`")

        self._agree_to_technology_agreement = agree_to_technology_agreement

    @property
    def invoice(self):
        """Gets the invoice of this ConnectCarrierRequestBody.

        The UPS invoice

        :return: The invoice of this ConnectCarrierRequestBody.
        :rtype: UpsInvoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this ConnectCarrierRequestBody.

        The UPS invoice

        :param invoice: The invoice of this ConnectCarrierRequestBody.
        :type invoice: UpsInvoice
        """

        self._invoice = invoice

    @property
    def invoice_amount(self):
        """Gets the invoice_amount of this ConnectCarrierRequestBody.

        The invoice amount

        :return: The invoice_amount of this ConnectCarrierRequestBody.
        :rtype: float
        """
        return self._invoice_amount

    @invoice_amount.setter
    def invoice_amount(self, invoice_amount):
        """Sets the invoice_amount of this ConnectCarrierRequestBody.

        The invoice amount

        :param invoice_amount: The invoice_amount of this ConnectCarrierRequestBody.
        :type invoice_amount: float
        """

        self._invoice_amount = invoice_amount

    @property
    def invoice_currency_code(self):
        """Gets the invoice_currency_code of this ConnectCarrierRequestBody.

        The invoice currency code

        :return: The invoice_currency_code of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._invoice_currency_code

    @invoice_currency_code.setter
    def invoice_currency_code(self, invoice_currency_code):
        """Sets the invoice_currency_code of this ConnectCarrierRequestBody.

        The invoice currency code

        :param invoice_currency_code: The invoice_currency_code of this ConnectCarrierRequestBody.
        :type invoice_currency_code: str
        """

        self._invoice_currency_code = invoice_currency_code

    @property
    def title(self):
        """Gets the title of this ConnectCarrierRequestBody.

        Title

        :return: The title of this ConnectCarrierRequestBody.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ConnectCarrierRequestBody.

        Title

        :param title: The title of this ConnectCarrierRequestBody.
        :type title: str
        """
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title
