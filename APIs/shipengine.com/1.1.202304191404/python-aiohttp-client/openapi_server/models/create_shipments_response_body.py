# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_and_validate_shipment import CreateAndValidateShipment
from openapi_server import util


class CreateShipmentsResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_errors: bool=False, shipments: List[CreateAndValidateShipment]=None):
        """CreateShipmentsResponseBody - a model defined in OpenAPI

        :param has_errors: The has_errors of this CreateShipmentsResponseBody.
        :param shipments: The shipments of this CreateShipmentsResponseBody.
        """
        self.openapi_types = {
            'has_errors': bool,
            'shipments': List[CreateAndValidateShipment]
        }

        self.attribute_map = {
            'has_errors': 'has_errors',
            'shipments': 'shipments'
        }

        self._has_errors = has_errors
        self._shipments = shipments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateShipmentsResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_shipments_response_body of this CreateShipmentsResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_errors(self):
        """Gets the has_errors of this CreateShipmentsResponseBody.

        Indicates if errors occured while creating the shipments

        :return: The has_errors of this CreateShipmentsResponseBody.
        :rtype: bool
        """
        return self._has_errors

    @has_errors.setter
    def has_errors(self, has_errors):
        """Sets the has_errors of this CreateShipmentsResponseBody.

        Indicates if errors occured while creating the shipments

        :param has_errors: The has_errors of this CreateShipmentsResponseBody.
        :type has_errors: bool
        """
        if has_errors is None:
            raise ValueError("Invalid value for `has_errors`, must not be `None`")

        self._has_errors = has_errors

    @property
    def shipments(self):
        """Gets the shipments of this CreateShipmentsResponseBody.

        An array of shipments that were created.

        :return: The shipments of this CreateShipmentsResponseBody.
        :rtype: List[CreateAndValidateShipment]
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """Sets the shipments of this CreateShipmentsResponseBody.

        An array of shipments that were created.

        :param shipments: The shipments of this CreateShipmentsResponseBody.
        :type shipments: List[CreateAndValidateShipment]
        """
        if shipments is None:
            raise ValueError("Invalid value for `shipments`, must not be `None`")

        self._shipments = shipments
