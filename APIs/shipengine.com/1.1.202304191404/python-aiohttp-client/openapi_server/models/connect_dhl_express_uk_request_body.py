# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ConnectDhlExpressUkRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, nickname: str=None, password: str=None, site_id: str=None):
        """ConnectDhlExpressUkRequestBody - a model defined in OpenAPI

        :param account_number: The account_number of this ConnectDhlExpressUkRequestBody.
        :param nickname: The nickname of this ConnectDhlExpressUkRequestBody.
        :param password: The password of this ConnectDhlExpressUkRequestBody.
        :param site_id: The site_id of this ConnectDhlExpressUkRequestBody.
        """
        self.openapi_types = {
            'account_number': str,
            'nickname': str,
            'password': str,
            'site_id': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'nickname': 'nickname',
            'password': 'password',
            'site_id': 'site_id'
        }

        self._account_number = account_number
        self._nickname = nickname
        self._password = password
        self._site_id = site_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectDhlExpressUkRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_dhl_express_uk_request_body of this ConnectDhlExpressUkRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this ConnectDhlExpressUkRequestBody.

        Account number

        :return: The account_number of this ConnectDhlExpressUkRequestBody.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ConnectDhlExpressUkRequestBody.

        Account number

        :param account_number: The account_number of this ConnectDhlExpressUkRequestBody.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def nickname(self):
        """Gets the nickname of this ConnectDhlExpressUkRequestBody.

        Nickname

        :return: The nickname of this ConnectDhlExpressUkRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectDhlExpressUkRequestBody.

        Nickname

        :param nickname: The nickname of this ConnectDhlExpressUkRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def password(self):
        """Gets the password of this ConnectDhlExpressUkRequestBody.

        Password

        :return: The password of this ConnectDhlExpressUkRequestBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConnectDhlExpressUkRequestBody.

        Password

        :param password: The password of this ConnectDhlExpressUkRequestBody.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")

        self._password = password

    @property
    def site_id(self):
        """Gets the site_id of this ConnectDhlExpressUkRequestBody.

        A string that uniquely identifies the site

        :return: The site_id of this ConnectDhlExpressUkRequestBody.
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this ConnectDhlExpressUkRequestBody.

        A string that uniquely identifies the site

        :param site_id: The site_id of this ConnectDhlExpressUkRequestBody.
        :type site_id: str
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")
        if site_id is not None and len(site_id) > 25:
            raise ValueError("Invalid value for `site_id`, length must be less than or equal to `25`")
        if site_id is not None and len(site_id) < 1:
            raise ValueError("Invalid value for `site_id`, length must be greater than or equal to `1`")
        if site_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', site_id):
            raise ValueError("Invalid value for `site_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._site_id = site_id
