# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VoidLabelResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved: bool=None, message: str=None):
        """VoidLabelResponseBody - a model defined in OpenAPI

        :param approved: The approved of this VoidLabelResponseBody.
        :param message: The message of this VoidLabelResponseBody.
        """
        self.openapi_types = {
            'approved': bool,
            'message': str
        }

        self.attribute_map = {
            'approved': 'approved',
            'message': 'message'
        }

        self._approved = approved
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VoidLabelResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The void_label_response_body of this VoidLabelResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved(self):
        """Gets the approved of this VoidLabelResponseBody.

        Indicates whether the attempt to void the label was successful

        :return: The approved of this VoidLabelResponseBody.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this VoidLabelResponseBody.

        Indicates whether the attempt to void the label was successful

        :param approved: The approved of this VoidLabelResponseBody.
        :type approved: bool
        """
        if approved is None:
            raise ValueError("Invalid value for `approved`, must not be `None`")

        self._approved = approved

    @property
    def message(self):
        """Gets the message of this VoidLabelResponseBody.


        :return: The message of this VoidLabelResponseBody.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this VoidLabelResponseBody.


        :param message: The message of this VoidLabelResponseBody.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        if message is not None and len(message) < 0:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `0`")

        self._message = message
