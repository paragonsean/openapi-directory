# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabelMessages(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reference1: str=None, reference2: str=None, reference3: str=None):
        """LabelMessages - a model defined in OpenAPI

        :param reference1: The reference1 of this LabelMessages.
        :param reference2: The reference2 of this LabelMessages.
        :param reference3: The reference3 of this LabelMessages.
        """
        self.openapi_types = {
            'reference1': str,
            'reference2': str,
            'reference3': str
        }

        self.attribute_map = {
            'reference1': 'reference1',
            'reference2': 'reference2',
            'reference3': 'reference3'
        }

        self._reference1 = reference1
        self._reference2 = reference2
        self._reference3 = reference3

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelMessages':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The label_messages of this LabelMessages.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reference1(self):
        """Gets the reference1 of this LabelMessages.

        The first line of the custom label message.  Some carriers may prefix this line with something like \"REF\", \"Reference\", \"Trx Ref No.\", etc. 

        :return: The reference1 of this LabelMessages.
        :rtype: str
        """
        return self._reference1

    @reference1.setter
    def reference1(self, reference1):
        """Sets the reference1 of this LabelMessages.

        The first line of the custom label message.  Some carriers may prefix this line with something like \"REF\", \"Reference\", \"Trx Ref No.\", etc. 

        :param reference1: The reference1 of this LabelMessages.
        :type reference1: str
        """
        if reference1 is None:
            raise ValueError("Invalid value for `reference1`, must not be `None`")

        self._reference1 = reference1

    @property
    def reference2(self):
        """Gets the reference2 of this LabelMessages.

        The second line of the custom label message.  Some carriers may prefix this line with something like \"INV\", \"Reference 2\", \"Trx Ref No.\", etc. 

        :return: The reference2 of this LabelMessages.
        :rtype: str
        """
        return self._reference2

    @reference2.setter
    def reference2(self, reference2):
        """Sets the reference2 of this LabelMessages.

        The second line of the custom label message.  Some carriers may prefix this line with something like \"INV\", \"Reference 2\", \"Trx Ref No.\", etc. 

        :param reference2: The reference2 of this LabelMessages.
        :type reference2: str
        """
        if reference2 is None:
            raise ValueError("Invalid value for `reference2`, must not be `None`")

        self._reference2 = reference2

    @property
    def reference3(self):
        """Gets the reference3 of this LabelMessages.

        The third line of the custom label message.  Some carriers may prefix this line with something like \"PO\", \"Reference 3\", etc. 

        :return: The reference3 of this LabelMessages.
        :rtype: str
        """
        return self._reference3

    @reference3.setter
    def reference3(self, reference3):
        """Sets the reference3 of this LabelMessages.

        The third line of the custom label message.  Some carriers may prefix this line with something like \"PO\", \"Reference 3\", etc. 

        :param reference3: The reference3 of this LabelMessages.
        :type reference3: str
        """
        if reference3 is None:
            raise ValueError("Invalid value for `reference3`, must not be `None`")

        self._reference3 = reference3
