# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.contact_details import ContactDetails
from openapi_server.models.error import Error
from openapi_server.models.pickup_window import PickupWindow
from openapi_server.models.pickup_windows import PickupWindows
import re
from openapi_server import util


class SchedulePickupResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancelled_at: datetime=None, carrier_id: str=None, confirmation_number: str=None, contact_details: ContactDetails=None, created_at: datetime=None, label_ids: List[str]=None, pickup_address: Address=None, pickup_id: str=None, pickup_notes: str=None, pickup_window: PickupWindow=None, pickup_windows: List[PickupWindows]=None, warehouse_id: str=None, errors: List[Error]=None, request_id: str=None):
        """SchedulePickupResponseBody - a model defined in OpenAPI

        :param cancelled_at: The cancelled_at of this SchedulePickupResponseBody.
        :param carrier_id: The carrier_id of this SchedulePickupResponseBody.
        :param confirmation_number: The confirmation_number of this SchedulePickupResponseBody.
        :param contact_details: The contact_details of this SchedulePickupResponseBody.
        :param created_at: The created_at of this SchedulePickupResponseBody.
        :param label_ids: The label_ids of this SchedulePickupResponseBody.
        :param pickup_address: The pickup_address of this SchedulePickupResponseBody.
        :param pickup_id: The pickup_id of this SchedulePickupResponseBody.
        :param pickup_notes: The pickup_notes of this SchedulePickupResponseBody.
        :param pickup_window: The pickup_window of this SchedulePickupResponseBody.
        :param pickup_windows: The pickup_windows of this SchedulePickupResponseBody.
        :param warehouse_id: The warehouse_id of this SchedulePickupResponseBody.
        :param errors: The errors of this SchedulePickupResponseBody.
        :param request_id: The request_id of this SchedulePickupResponseBody.
        """
        self.openapi_types = {
            'cancelled_at': datetime,
            'carrier_id': str,
            'confirmation_number': str,
            'contact_details': ContactDetails,
            'created_at': datetime,
            'label_ids': List[str],
            'pickup_address': Address,
            'pickup_id': str,
            'pickup_notes': str,
            'pickup_window': PickupWindow,
            'pickup_windows': List[PickupWindows],
            'warehouse_id': str,
            'errors': List[Error],
            'request_id': str
        }

        self.attribute_map = {
            'cancelled_at': 'cancelled_at',
            'carrier_id': 'carrier_id',
            'confirmation_number': 'confirmation_number',
            'contact_details': 'contact_details',
            'created_at': 'created_at',
            'label_ids': 'label_ids',
            'pickup_address': 'pickup_address',
            'pickup_id': 'pickup_id',
            'pickup_notes': 'pickup_notes',
            'pickup_window': 'pickup_window',
            'pickup_windows': 'pickup_windows',
            'warehouse_id': 'warehouse_id',
            'errors': 'errors',
            'request_id': 'request_id'
        }

        self._cancelled_at = cancelled_at
        self._carrier_id = carrier_id
        self._confirmation_number = confirmation_number
        self._contact_details = contact_details
        self._created_at = created_at
        self._label_ids = label_ids
        self._pickup_address = pickup_address
        self._pickup_id = pickup_id
        self._pickup_notes = pickup_notes
        self._pickup_window = pickup_window
        self._pickup_windows = pickup_windows
        self._warehouse_id = warehouse_id
        self._errors = errors
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchedulePickupResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The schedule_pickup_response_body of this SchedulePickupResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancelled_at(self):
        """Gets the cancelled_at of this SchedulePickupResponseBody.

        The date and time that the pickup was cancelled in ShipEngine.

        :return: The cancelled_at of this SchedulePickupResponseBody.
        :rtype: datetime
        """
        return self._cancelled_at

    @cancelled_at.setter
    def cancelled_at(self, cancelled_at):
        """Sets the cancelled_at of this SchedulePickupResponseBody.

        The date and time that the pickup was cancelled in ShipEngine.

        :param cancelled_at: The cancelled_at of this SchedulePickupResponseBody.
        :type cancelled_at: datetime
        """
        if cancelled_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', cancelled_at):
            raise ValueError("Invalid value for `cancelled_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._cancelled_at = cancelled_at

    @property
    def carrier_id(self):
        """Gets the carrier_id of this SchedulePickupResponseBody.

        The carrier_id associated with the pickup

        :return: The carrier_id of this SchedulePickupResponseBody.
        :rtype: str
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this SchedulePickupResponseBody.

        The carrier_id associated with the pickup

        :param carrier_id: The carrier_id of this SchedulePickupResponseBody.
        :type carrier_id: str
        """
        if carrier_id is not None and len(carrier_id) > 25:
            raise ValueError("Invalid value for `carrier_id`, length must be less than or equal to `25`")
        if carrier_id is not None and len(carrier_id) < 1:
            raise ValueError("Invalid value for `carrier_id`, length must be greater than or equal to `1`")
        if carrier_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', carrier_id):
            raise ValueError("Invalid value for `carrier_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._carrier_id = carrier_id

    @property
    def confirmation_number(self):
        """Gets the confirmation_number of this SchedulePickupResponseBody.

        The carrier confirmation number for the scheduled pickup.

        :return: The confirmation_number of this SchedulePickupResponseBody.
        :rtype: str
        """
        return self._confirmation_number

    @confirmation_number.setter
    def confirmation_number(self, confirmation_number):
        """Sets the confirmation_number of this SchedulePickupResponseBody.

        The carrier confirmation number for the scheduled pickup.

        :param confirmation_number: The confirmation_number of this SchedulePickupResponseBody.
        :type confirmation_number: str
        """

        self._confirmation_number = confirmation_number

    @property
    def contact_details(self):
        """Gets the contact_details of this SchedulePickupResponseBody.


        :return: The contact_details of this SchedulePickupResponseBody.
        :rtype: ContactDetails
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this SchedulePickupResponseBody.


        :param contact_details: The contact_details of this SchedulePickupResponseBody.
        :type contact_details: ContactDetails
        """

        self._contact_details = contact_details

    @property
    def created_at(self):
        """Gets the created_at of this SchedulePickupResponseBody.

        The date and time that the pickup was created in ShipEngine.

        :return: The created_at of this SchedulePickupResponseBody.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SchedulePickupResponseBody.

        The date and time that the pickup was created in ShipEngine.

        :param created_at: The created_at of this SchedulePickupResponseBody.
        :type created_at: datetime
        """
        if created_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', created_at):
            raise ValueError("Invalid value for `created_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._created_at = created_at

    @property
    def label_ids(self):
        """Gets the label_ids of this SchedulePickupResponseBody.

        Label IDs that will be included in the pickup request

        :return: The label_ids of this SchedulePickupResponseBody.
        :rtype: List[str]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this SchedulePickupResponseBody.

        Label IDs that will be included in the pickup request

        :param label_ids: The label_ids of this SchedulePickupResponseBody.
        :type label_ids: List[str]
        """

        self._label_ids = label_ids

    @property
    def pickup_address(self):
        """Gets the pickup_address of this SchedulePickupResponseBody.


        :return: The pickup_address of this SchedulePickupResponseBody.
        :rtype: Address
        """
        return self._pickup_address

    @pickup_address.setter
    def pickup_address(self, pickup_address):
        """Sets the pickup_address of this SchedulePickupResponseBody.


        :param pickup_address: The pickup_address of this SchedulePickupResponseBody.
        :type pickup_address: Address
        """

        self._pickup_address = pickup_address

    @property
    def pickup_id(self):
        """Gets the pickup_id of this SchedulePickupResponseBody.

        Pickup Resource ID

        :return: The pickup_id of this SchedulePickupResponseBody.
        :rtype: str
        """
        return self._pickup_id

    @pickup_id.setter
    def pickup_id(self, pickup_id):
        """Sets the pickup_id of this SchedulePickupResponseBody.

        Pickup Resource ID

        :param pickup_id: The pickup_id of this SchedulePickupResponseBody.
        :type pickup_id: str
        """
        if pickup_id is not None and len(pickup_id) < 4:
            raise ValueError("Invalid value for `pickup_id`, length must be greater than or equal to `4`")

        self._pickup_id = pickup_id

    @property
    def pickup_notes(self):
        """Gets the pickup_notes of this SchedulePickupResponseBody.

        Used by some carriers to give special instructions for a package pickup

        :return: The pickup_notes of this SchedulePickupResponseBody.
        :rtype: str
        """
        return self._pickup_notes

    @pickup_notes.setter
    def pickup_notes(self, pickup_notes):
        """Sets the pickup_notes of this SchedulePickupResponseBody.

        Used by some carriers to give special instructions for a package pickup

        :param pickup_notes: The pickup_notes of this SchedulePickupResponseBody.
        :type pickup_notes: str
        """
        if pickup_notes is not None and len(pickup_notes) < 0:
            raise ValueError("Invalid value for `pickup_notes`, length must be greater than or equal to `0`")

        self._pickup_notes = pickup_notes

    @property
    def pickup_window(self):
        """Gets the pickup_window of this SchedulePickupResponseBody.


        :return: The pickup_window of this SchedulePickupResponseBody.
        :rtype: PickupWindow
        """
        return self._pickup_window

    @pickup_window.setter
    def pickup_window(self, pickup_window):
        """Sets the pickup_window of this SchedulePickupResponseBody.


        :param pickup_window: The pickup_window of this SchedulePickupResponseBody.
        :type pickup_window: PickupWindow
        """

        self._pickup_window = pickup_window

    @property
    def pickup_windows(self):
        """Gets the pickup_windows of this SchedulePickupResponseBody.

        An array of available pickup windows. Carriers can return multiple times that they will pickup packages. 

        :return: The pickup_windows of this SchedulePickupResponseBody.
        :rtype: List[PickupWindows]
        """
        return self._pickup_windows

    @pickup_windows.setter
    def pickup_windows(self, pickup_windows):
        """Sets the pickup_windows of this SchedulePickupResponseBody.

        An array of available pickup windows. Carriers can return multiple times that they will pickup packages. 

        :param pickup_windows: The pickup_windows of this SchedulePickupResponseBody.
        :type pickup_windows: List[PickupWindows]
        """

        self._pickup_windows = pickup_windows

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this SchedulePickupResponseBody.

        The warehouse_id associated with the pickup

        :return: The warehouse_id of this SchedulePickupResponseBody.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this SchedulePickupResponseBody.

        The warehouse_id associated with the pickup

        :param warehouse_id: The warehouse_id of this SchedulePickupResponseBody.
        :type warehouse_id: str
        """
        if warehouse_id is not None and len(warehouse_id) > 25:
            raise ValueError("Invalid value for `warehouse_id`, length must be less than or equal to `25`")
        if warehouse_id is not None and len(warehouse_id) < 1:
            raise ValueError("Invalid value for `warehouse_id`, length must be greater than or equal to `1`")
        if warehouse_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', warehouse_id):
            raise ValueError("Invalid value for `warehouse_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._warehouse_id = warehouse_id

    @property
    def errors(self):
        """Gets the errors of this SchedulePickupResponseBody.

        The errors associated with the failed API call

        :return: The errors of this SchedulePickupResponseBody.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SchedulePickupResponseBody.

        The errors associated with the failed API call

        :param errors: The errors of this SchedulePickupResponseBody.
        :type errors: List[Error]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def request_id(self):
        """Gets the request_id of this SchedulePickupResponseBody.

        A UUID that uniquely identifies the request id. This can be given to the support team to help debug non-trivial issues that may occur 

        :return: The request_id of this SchedulePickupResponseBody.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SchedulePickupResponseBody.

        A UUID that uniquely identifies the request id. This can be given to the support team to help debug non-trivial issues that may occur 

        :param request_id: The request_id of this SchedulePickupResponseBody.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")
        if request_id is not None and len(request_id) > 36:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `36`")
        if request_id is not None and len(request_id) < 36:
            raise ValueError("Invalid value for `request_id`, length must be greater than or equal to `36`")
        if request_id is not None and not re.search(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$', request_id):
            raise ValueError("Invalid value for `request_id`, must be a follow pattern or equal to `/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/`")

        self._request_id = request_id
