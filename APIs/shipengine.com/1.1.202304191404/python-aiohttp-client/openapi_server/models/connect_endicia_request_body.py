# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectEndiciaRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, nickname: str=None, passphrase: str=None):
        """ConnectEndiciaRequestBody - a model defined in OpenAPI

        :param account: The account of this ConnectEndiciaRequestBody.
        :param nickname: The nickname of this ConnectEndiciaRequestBody.
        :param passphrase: The passphrase of this ConnectEndiciaRequestBody.
        """
        self.openapi_types = {
            'account': str,
            'nickname': str,
            'passphrase': str
        }

        self.attribute_map = {
            'account': 'account',
            'nickname': 'nickname',
            'passphrase': 'passphrase'
        }

        self._account = account
        self._nickname = nickname
        self._passphrase = passphrase

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectEndiciaRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_endicia_request_body of this ConnectEndiciaRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this ConnectEndiciaRequestBody.

        Account

        :return: The account of this ConnectEndiciaRequestBody.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ConnectEndiciaRequestBody.

        Account

        :param account: The account of this ConnectEndiciaRequestBody.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")
        if account is not None and len(account) < 1:
            raise ValueError("Invalid value for `account`, length must be greater than or equal to `1`")

        self._account = account

    @property
    def nickname(self):
        """Gets the nickname of this ConnectEndiciaRequestBody.

        Nickname

        :return: The nickname of this ConnectEndiciaRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectEndiciaRequestBody.

        Nickname

        :param nickname: The nickname of this ConnectEndiciaRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def passphrase(self):
        """Gets the passphrase of this ConnectEndiciaRequestBody.

        Passphrase

        :return: The passphrase of this ConnectEndiciaRequestBody.
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this ConnectEndiciaRequestBody.

        Passphrase

        :param passphrase: The passphrase of this ConnectEndiciaRequestBody.
        :type passphrase: str
        """
        if passphrase is None:
            raise ValueError("Invalid value for `passphrase`, must not be `None`")
        if passphrase is not None and len(passphrase) < 1:
            raise ValueError("Invalid value for `passphrase`, length must be greater than or equal to `1`")

        self._passphrase = passphrase
