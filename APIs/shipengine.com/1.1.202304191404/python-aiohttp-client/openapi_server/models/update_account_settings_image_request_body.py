# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateAccountSettingsImageRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, image_content_type: str=None, image_data: str=None, is_default: bool=None, label_image_id: str=None, modified_at: datetime=None, name: str=None):
        """UpdateAccountSettingsImageRequestBody - a model defined in OpenAPI

        :param created_at: The created_at of this UpdateAccountSettingsImageRequestBody.
        :param image_content_type: The image_content_type of this UpdateAccountSettingsImageRequestBody.
        :param image_data: The image_data of this UpdateAccountSettingsImageRequestBody.
        :param is_default: The is_default of this UpdateAccountSettingsImageRequestBody.
        :param label_image_id: The label_image_id of this UpdateAccountSettingsImageRequestBody.
        :param modified_at: The modified_at of this UpdateAccountSettingsImageRequestBody.
        :param name: The name of this UpdateAccountSettingsImageRequestBody.
        """
        self.openapi_types = {
            'created_at': datetime,
            'image_content_type': str,
            'image_data': str,
            'is_default': bool,
            'label_image_id': str,
            'modified_at': datetime,
            'name': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'image_content_type': 'image_content_type',
            'image_data': 'image_data',
            'is_default': 'is_default',
            'label_image_id': 'label_image_id',
            'modified_at': 'modified_at',
            'name': 'name'
        }

        self._created_at = created_at
        self._image_content_type = image_content_type
        self._image_data = image_data
        self._is_default = is_default
        self._label_image_id = label_image_id
        self._modified_at = modified_at
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccountSettingsImageRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The update_account_settings_image_request_body of this UpdateAccountSettingsImageRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this UpdateAccountSettingsImageRequestBody.

        The date and time that the image was created in ShipEngine.

        :return: The created_at of this UpdateAccountSettingsImageRequestBody.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UpdateAccountSettingsImageRequestBody.

        The date and time that the image was created in ShipEngine.

        :param created_at: The created_at of this UpdateAccountSettingsImageRequestBody.
        :type created_at: datetime
        """
        if created_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', created_at):
            raise ValueError("Invalid value for `created_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._created_at = created_at

    @property
    def image_content_type(self):
        """Gets the image_content_type of this UpdateAccountSettingsImageRequestBody.

        The image type

        :return: The image_content_type of this UpdateAccountSettingsImageRequestBody.
        :rtype: str
        """
        return self._image_content_type

    @image_content_type.setter
    def image_content_type(self, image_content_type):
        """Sets the image_content_type of this UpdateAccountSettingsImageRequestBody.

        The image type

        :param image_content_type: The image_content_type of this UpdateAccountSettingsImageRequestBody.
        :type image_content_type: str
        """
        allowed_values = ["image/png", "image/jpeg"]  # noqa: E501
        if image_content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `image_content_type` ({0}), must be one of {1}"
                .format(image_content_type, allowed_values)
            )

        self._image_content_type = image_content_type

    @property
    def image_data(self):
        """Gets the image_data of this UpdateAccountSettingsImageRequestBody.

        A base64 encoded string representation of the image. 

        :return: The image_data of this UpdateAccountSettingsImageRequestBody.
        :rtype: str
        """
        return self._image_data

    @image_data.setter
    def image_data(self, image_data):
        """Sets the image_data of this UpdateAccountSettingsImageRequestBody.

        A base64 encoded string representation of the image. 

        :param image_data: The image_data of this UpdateAccountSettingsImageRequestBody.
        :type image_data: str
        """

        self._image_data = image_data

    @property
    def is_default(self):
        """Gets the is_default of this UpdateAccountSettingsImageRequestBody.

        Indicates whether this image is set as default. 

        :return: The is_default of this UpdateAccountSettingsImageRequestBody.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this UpdateAccountSettingsImageRequestBody.

        Indicates whether this image is set as default. 

        :param is_default: The is_default of this UpdateAccountSettingsImageRequestBody.
        :type is_default: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default

    @property
    def label_image_id(self):
        """Gets the label_image_id of this UpdateAccountSettingsImageRequestBody.

        A string that uniquely identifies the image. This ID is generated by ShipEngine when the image is uploaded. 

        :return: The label_image_id of this UpdateAccountSettingsImageRequestBody.
        :rtype: str
        """
        return self._label_image_id

    @label_image_id.setter
    def label_image_id(self, label_image_id):
        """Sets the label_image_id of this UpdateAccountSettingsImageRequestBody.

        A string that uniquely identifies the image. This ID is generated by ShipEngine when the image is uploaded. 

        :param label_image_id: The label_image_id of this UpdateAccountSettingsImageRequestBody.
        :type label_image_id: str
        """
        if label_image_id is not None and len(label_image_id) < 4:
            raise ValueError("Invalid value for `label_image_id`, length must be greater than or equal to `4`")

        self._label_image_id = label_image_id

    @property
    def modified_at(self):
        """Gets the modified_at of this UpdateAccountSettingsImageRequestBody.

        The date and time that the image was modified in ShipEngine.

        :return: The modified_at of this UpdateAccountSettingsImageRequestBody.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this UpdateAccountSettingsImageRequestBody.

        The date and time that the image was modified in ShipEngine.

        :param modified_at: The modified_at of this UpdateAccountSettingsImageRequestBody.
        :type modified_at: datetime
        """
        if modified_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', modified_at):
            raise ValueError("Invalid value for `modified_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this UpdateAccountSettingsImageRequestBody.

        A human readable name for the image. 

        :return: The name of this UpdateAccountSettingsImageRequestBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAccountSettingsImageRequestBody.

        A human readable name for the image. 

        :param name: The name of this UpdateAccountSettingsImageRequestBody.
        :type name: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
