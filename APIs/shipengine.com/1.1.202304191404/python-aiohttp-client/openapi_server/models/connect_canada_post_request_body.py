# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectCanadaPostRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, api_key: str=None, api_secret: str=None, contract_id: str=None, nickname: str=None):
        """ConnectCanadaPostRequestBody - a model defined in OpenAPI

        :param account_number: The account_number of this ConnectCanadaPostRequestBody.
        :param api_key: The api_key of this ConnectCanadaPostRequestBody.
        :param api_secret: The api_secret of this ConnectCanadaPostRequestBody.
        :param contract_id: The contract_id of this ConnectCanadaPostRequestBody.
        :param nickname: The nickname of this ConnectCanadaPostRequestBody.
        """
        self.openapi_types = {
            'account_number': str,
            'api_key': str,
            'api_secret': str,
            'contract_id': str,
            'nickname': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'api_key': 'api_key',
            'api_secret': 'api_secret',
            'contract_id': 'contract_id',
            'nickname': 'nickname'
        }

        self._account_number = account_number
        self._api_key = api_key
        self._api_secret = api_secret
        self._contract_id = contract_id
        self._nickname = nickname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectCanadaPostRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_canada_post_request_body of this ConnectCanadaPostRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this ConnectCanadaPostRequestBody.

        Canada Post Account Number

        :return: The account_number of this ConnectCanadaPostRequestBody.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ConnectCanadaPostRequestBody.

        Canada Post Account Number

        :param account_number: The account_number of this ConnectCanadaPostRequestBody.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def api_key(self):
        """Gets the api_key of this ConnectCanadaPostRequestBody.

        Canada Post Account API Key

        :return: The api_key of this ConnectCanadaPostRequestBody.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ConnectCanadaPostRequestBody.

        Canada Post Account API Key

        :param api_key: The api_key of this ConnectCanadaPostRequestBody.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")
        if api_key is not None and len(api_key) < 1:
            raise ValueError("Invalid value for `api_key`, length must be greater than or equal to `1`")

        self._api_key = api_key

    @property
    def api_secret(self):
        """Gets the api_secret of this ConnectCanadaPostRequestBody.

        Canada Post Account API Secret

        :return: The api_secret of this ConnectCanadaPostRequestBody.
        :rtype: str
        """
        return self._api_secret

    @api_secret.setter
    def api_secret(self, api_secret):
        """Sets the api_secret of this ConnectCanadaPostRequestBody.

        Canada Post Account API Secret

        :param api_secret: The api_secret of this ConnectCanadaPostRequestBody.
        :type api_secret: str
        """
        if api_secret is None:
            raise ValueError("Invalid value for `api_secret`, must not be `None`")
        if api_secret is not None and len(api_secret) < 1:
            raise ValueError("Invalid value for `api_secret`, length must be greater than or equal to `1`")

        self._api_secret = api_secret

    @property
    def contract_id(self):
        """Gets the contract_id of this ConnectCanadaPostRequestBody.

        Canada Post Account Contract ID

        :return: The contract_id of this ConnectCanadaPostRequestBody.
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this ConnectCanadaPostRequestBody.

        Canada Post Account Contract ID

        :param contract_id: The contract_id of this ConnectCanadaPostRequestBody.
        :type contract_id: str
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")
        if contract_id is not None and len(contract_id) < 1:
            raise ValueError("Invalid value for `contract_id`, length must be greater than or equal to `1`")

        self._contract_id = contract_id

    @property
    def nickname(self):
        """Gets the nickname of this ConnectCanadaPostRequestBody.

        Nickname

        :return: The nickname of this ConnectCanadaPostRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectCanadaPostRequestBody.

        Nickname

        :param nickname: The nickname of this ConnectCanadaPostRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname
