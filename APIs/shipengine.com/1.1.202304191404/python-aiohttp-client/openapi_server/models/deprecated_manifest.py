# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.manifest_download import ManifestDownload
import re
from openapi_server import util


class DeprecatedManifest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_id: str=None, created_at: datetime=None, form_id: str=None, label_ids: List[str]=None, manifest_download: ManifestDownload=None, manifest_id: str=None, ship_date: datetime=None, shipments: int=None, submission_id: str=None, warehouse_id: str=None):
        """DeprecatedManifest - a model defined in OpenAPI

        :param carrier_id: The carrier_id of this DeprecatedManifest.
        :param created_at: The created_at of this DeprecatedManifest.
        :param form_id: The form_id of this DeprecatedManifest.
        :param label_ids: The label_ids of this DeprecatedManifest.
        :param manifest_download: The manifest_download of this DeprecatedManifest.
        :param manifest_id: The manifest_id of this DeprecatedManifest.
        :param ship_date: The ship_date of this DeprecatedManifest.
        :param shipments: The shipments of this DeprecatedManifest.
        :param submission_id: The submission_id of this DeprecatedManifest.
        :param warehouse_id: The warehouse_id of this DeprecatedManifest.
        """
        self.openapi_types = {
            'carrier_id': str,
            'created_at': datetime,
            'form_id': str,
            'label_ids': List[str],
            'manifest_download': ManifestDownload,
            'manifest_id': str,
            'ship_date': datetime,
            'shipments': int,
            'submission_id': str,
            'warehouse_id': str
        }

        self.attribute_map = {
            'carrier_id': 'carrier_id',
            'created_at': 'created_at',
            'form_id': 'form_id',
            'label_ids': 'label_ids',
            'manifest_download': 'manifest_download',
            'manifest_id': 'manifest_id',
            'ship_date': 'ship_date',
            'shipments': 'shipments',
            'submission_id': 'submission_id',
            'warehouse_id': 'warehouse_id'
        }

        self._carrier_id = carrier_id
        self._created_at = created_at
        self._form_id = form_id
        self._label_ids = label_ids
        self._manifest_download = manifest_download
        self._manifest_id = manifest_id
        self._ship_date = ship_date
        self._shipments = shipments
        self._submission_id = submission_id
        self._warehouse_id = warehouse_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeprecatedManifest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The deprecated_manifest of this DeprecatedManifest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_id(self):
        """Gets the carrier_id of this DeprecatedManifest.

        A string that uniquely identifies the carrier

        :return: The carrier_id of this DeprecatedManifest.
        :rtype: str
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this DeprecatedManifest.

        A string that uniquely identifies the carrier

        :param carrier_id: The carrier_id of this DeprecatedManifest.
        :type carrier_id: str
        """
        if carrier_id is not None and len(carrier_id) > 25:
            raise ValueError("Invalid value for `carrier_id`, length must be less than or equal to `25`")
        if carrier_id is not None and len(carrier_id) < 1:
            raise ValueError("Invalid value for `carrier_id`, length must be greater than or equal to `1`")
        if carrier_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', carrier_id):
            raise ValueError("Invalid value for `carrier_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._carrier_id = carrier_id

    @property
    def created_at(self):
        """Gets the created_at of this DeprecatedManifest.

        The date-time that the manifest was created

        :return: The created_at of this DeprecatedManifest.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeprecatedManifest.

        The date-time that the manifest was created

        :param created_at: The created_at of this DeprecatedManifest.
        :type created_at: datetime
        """
        if created_at is not None and len(created_at) < 1:
            raise ValueError("Invalid value for `created_at`, length must be greater than or equal to `1`")

        self._created_at = created_at

    @property
    def form_id(self):
        """Gets the form_id of this DeprecatedManifest.

        A string that uniquely identifies the form

        :return: The form_id of this DeprecatedManifest.
        :rtype: str
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this DeprecatedManifest.

        A string that uniquely identifies the form

        :param form_id: The form_id of this DeprecatedManifest.
        :type form_id: str
        """
        if form_id is not None and len(form_id) > 25:
            raise ValueError("Invalid value for `form_id`, length must be less than or equal to `25`")
        if form_id is not None and len(form_id) < 1:
            raise ValueError("Invalid value for `form_id`, length must be greater than or equal to `1`")
        if form_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', form_id):
            raise ValueError("Invalid value for `form_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._form_id = form_id

    @property
    def label_ids(self):
        """Gets the label_ids of this DeprecatedManifest.

        An array of the label ids used in this manifest.

        :return: The label_ids of this DeprecatedManifest.
        :rtype: List[str]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this DeprecatedManifest.

        An array of the label ids used in this manifest.

        :param label_ids: The label_ids of this DeprecatedManifest.
        :type label_ids: List[str]
        """

        self._label_ids = label_ids

    @property
    def manifest_download(self):
        """Gets the manifest_download of this DeprecatedManifest.


        :return: The manifest_download of this DeprecatedManifest.
        :rtype: ManifestDownload
        """
        return self._manifest_download

    @manifest_download.setter
    def manifest_download(self, manifest_download):
        """Sets the manifest_download of this DeprecatedManifest.


        :param manifest_download: The manifest_download of this DeprecatedManifest.
        :type manifest_download: ManifestDownload
        """

        self._manifest_download = manifest_download

    @property
    def manifest_id(self):
        """Gets the manifest_id of this DeprecatedManifest.

        A string that uniquely identifies the manifest

        :return: The manifest_id of this DeprecatedManifest.
        :rtype: str
        """
        return self._manifest_id

    @manifest_id.setter
    def manifest_id(self, manifest_id):
        """Sets the manifest_id of this DeprecatedManifest.

        A string that uniquely identifies the manifest

        :param manifest_id: The manifest_id of this DeprecatedManifest.
        :type manifest_id: str
        """
        if manifest_id is not None and len(manifest_id) > 25:
            raise ValueError("Invalid value for `manifest_id`, length must be less than or equal to `25`")
        if manifest_id is not None and len(manifest_id) < 1:
            raise ValueError("Invalid value for `manifest_id`, length must be greater than or equal to `1`")
        if manifest_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', manifest_id):
            raise ValueError("Invalid value for `manifest_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._manifest_id = manifest_id

    @property
    def ship_date(self):
        """Gets the ship_date of this DeprecatedManifest.

        The date-time that the manifests shipments will be picked up

        :return: The ship_date of this DeprecatedManifest.
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this DeprecatedManifest.

        The date-time that the manifests shipments will be picked up

        :param ship_date: The ship_date of this DeprecatedManifest.
        :type ship_date: datetime
        """
        if ship_date is not None and len(ship_date) < 1:
            raise ValueError("Invalid value for `ship_date`, length must be greater than or equal to `1`")

        self._ship_date = ship_date

    @property
    def shipments(self):
        """Gets the shipments of this DeprecatedManifest.

        The number of shipments that are included in this manifest

        :return: The shipments of this DeprecatedManifest.
        :rtype: int
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """Sets the shipments of this DeprecatedManifest.

        The number of shipments that are included in this manifest

        :param shipments: The shipments of this DeprecatedManifest.
        :type shipments: int
        """
        if shipments is not None and shipments < 1:
            raise ValueError("Invalid value for `shipments`, must be a value greater than or equal to `1`")

        self._shipments = shipments

    @property
    def submission_id(self):
        """Gets the submission_id of this DeprecatedManifest.

        A string that uniquely identifies the submission

        :return: The submission_id of this DeprecatedManifest.
        :rtype: str
        """
        return self._submission_id

    @submission_id.setter
    def submission_id(self, submission_id):
        """Sets the submission_id of this DeprecatedManifest.

        A string that uniquely identifies the submission

        :param submission_id: The submission_id of this DeprecatedManifest.
        :type submission_id: str
        """
        if submission_id is not None and len(submission_id) < 1:
            raise ValueError("Invalid value for `submission_id`, length must be greater than or equal to `1`")

        self._submission_id = submission_id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this DeprecatedManifest.

        A string that uniquely identifies the warehouse

        :return: The warehouse_id of this DeprecatedManifest.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this DeprecatedManifest.

        A string that uniquely identifies the warehouse

        :param warehouse_id: The warehouse_id of this DeprecatedManifest.
        :type warehouse_id: str
        """
        if warehouse_id is not None and len(warehouse_id) > 25:
            raise ValueError("Invalid value for `warehouse_id`, length must be less than or equal to `25`")
        if warehouse_id is not None and len(warehouse_id) < 1:
            raise ValueError("Invalid value for `warehouse_id`, length must be greater than or equal to `1`")
        if warehouse_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', warehouse_id):
            raise ValueError("Invalid value for `warehouse_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._warehouse_id = warehouse_id
