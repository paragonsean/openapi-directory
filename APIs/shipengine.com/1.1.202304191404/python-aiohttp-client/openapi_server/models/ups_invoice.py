# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpsInvoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_id: str=None, invoice_amount: float=None, invoice_currency_code: str=None, invoice_date: datetime=None, invoice_number: str=None):
        """UpsInvoice - a model defined in OpenAPI

        :param control_id: The control_id of this UpsInvoice.
        :param invoice_amount: The invoice_amount of this UpsInvoice.
        :param invoice_currency_code: The invoice_currency_code of this UpsInvoice.
        :param invoice_date: The invoice_date of this UpsInvoice.
        :param invoice_number: The invoice_number of this UpsInvoice.
        """
        self.openapi_types = {
            'control_id': str,
            'invoice_amount': float,
            'invoice_currency_code': str,
            'invoice_date': datetime,
            'invoice_number': str
        }

        self.attribute_map = {
            'control_id': 'control_id',
            'invoice_amount': 'invoice_amount',
            'invoice_currency_code': 'invoice_currency_code',
            'invoice_date': 'invoice_date',
            'invoice_number': 'invoice_number'
        }

        self._control_id = control_id
        self._invoice_amount = invoice_amount
        self._invoice_currency_code = invoice_currency_code
        self._invoice_date = invoice_date
        self._invoice_number = invoice_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsInvoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ups_invoice of this UpsInvoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_id(self):
        """Gets the control_id of this UpsInvoice.

        A string that uniquely identifies the control

        :return: The control_id of this UpsInvoice.
        :rtype: str
        """
        return self._control_id

    @control_id.setter
    def control_id(self, control_id):
        """Sets the control_id of this UpsInvoice.

        A string that uniquely identifies the control

        :param control_id: The control_id of this UpsInvoice.
        :type control_id: str
        """
        if control_id is not None and len(control_id) > 25:
            raise ValueError("Invalid value for `control_id`, length must be less than or equal to `25`")
        if control_id is not None and len(control_id) < 1:
            raise ValueError("Invalid value for `control_id`, length must be greater than or equal to `1`")
        if control_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', control_id):
            raise ValueError("Invalid value for `control_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._control_id = control_id

    @property
    def invoice_amount(self):
        """Gets the invoice_amount of this UpsInvoice.


        :return: The invoice_amount of this UpsInvoice.
        :rtype: float
        """
        return self._invoice_amount

    @invoice_amount.setter
    def invoice_amount(self, invoice_amount):
        """Sets the invoice_amount of this UpsInvoice.


        :param invoice_amount: The invoice_amount of this UpsInvoice.
        :type invoice_amount: float
        """
        if invoice_amount is not None and invoice_amount < 0:
            raise ValueError("Invalid value for `invoice_amount`, must be a value greater than or equal to `0`")

        self._invoice_amount = invoice_amount

    @property
    def invoice_currency_code(self):
        """Gets the invoice_currency_code of this UpsInvoice.


        :return: The invoice_currency_code of this UpsInvoice.
        :rtype: str
        """
        return self._invoice_currency_code

    @invoice_currency_code.setter
    def invoice_currency_code(self, invoice_currency_code):
        """Sets the invoice_currency_code of this UpsInvoice.


        :param invoice_currency_code: The invoice_currency_code of this UpsInvoice.
        :type invoice_currency_code: str
        """

        self._invoice_currency_code = invoice_currency_code

    @property
    def invoice_date(self):
        """Gets the invoice_date of this UpsInvoice.

        invoice date

        :return: The invoice_date of this UpsInvoice.
        :rtype: datetime
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this UpsInvoice.

        invoice date

        :param invoice_date: The invoice_date of this UpsInvoice.
        :type invoice_date: datetime
        """
        if invoice_date is not None and len(invoice_date) < 1:
            raise ValueError("Invalid value for `invoice_date`, length must be greater than or equal to `1`")

        self._invoice_date = invoice_date

    @property
    def invoice_number(self):
        """Gets the invoice_number of this UpsInvoice.

        invoice number

        :return: The invoice_number of this UpsInvoice.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this UpsInvoice.

        invoice number

        :param invoice_number: The invoice_number of this UpsInvoice.
        :type invoice_number: str
        """
        if invoice_number is not None and len(invoice_number) < 1:
            raise ValueError("Invalid value for `invoice_number`, length must be greater than or equal to `1`")

        self._invoice_number = invoice_number
