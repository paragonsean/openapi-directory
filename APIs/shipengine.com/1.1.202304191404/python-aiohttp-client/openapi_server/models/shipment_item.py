# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_source_name import OrderSourceName
from openapi_server import util


class ShipmentItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asin: str=None, external_order_id: str=None, external_order_item_id: str=None, name: str=None, order_source_code: OrderSourceName=None, quantity: int=None, sales_order_id: str=None, sales_order_item_id: str=None, sku: str=None):
        """ShipmentItem - a model defined in OpenAPI

        :param asin: The asin of this ShipmentItem.
        :param external_order_id: The external_order_id of this ShipmentItem.
        :param external_order_item_id: The external_order_item_id of this ShipmentItem.
        :param name: The name of this ShipmentItem.
        :param order_source_code: The order_source_code of this ShipmentItem.
        :param quantity: The quantity of this ShipmentItem.
        :param sales_order_id: The sales_order_id of this ShipmentItem.
        :param sales_order_item_id: The sales_order_item_id of this ShipmentItem.
        :param sku: The sku of this ShipmentItem.
        """
        self.openapi_types = {
            'asin': str,
            'external_order_id': str,
            'external_order_item_id': str,
            'name': str,
            'order_source_code': OrderSourceName,
            'quantity': int,
            'sales_order_id': str,
            'sales_order_item_id': str,
            'sku': str
        }

        self.attribute_map = {
            'asin': 'asin',
            'external_order_id': 'external_order_id',
            'external_order_item_id': 'external_order_item_id',
            'name': 'name',
            'order_source_code': 'order_source_code',
            'quantity': 'quantity',
            'sales_order_id': 'sales_order_id',
            'sales_order_item_id': 'sales_order_item_id',
            'sku': 'sku'
        }

        self._asin = asin
        self._external_order_id = external_order_id
        self._external_order_item_id = external_order_item_id
        self._name = name
        self._order_source_code = order_source_code
        self._quantity = quantity
        self._sales_order_id = sales_order_id
        self._sales_order_item_id = sales_order_item_id
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShipmentItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The shipment_item of this ShipmentItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asin(self):
        """Gets the asin of this ShipmentItem.

        Amazon Standard Identification Number

        :return: The asin of this ShipmentItem.
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this ShipmentItem.

        Amazon Standard Identification Number

        :param asin: The asin of this ShipmentItem.
        :type asin: str
        """
        if asin is not None and len(asin) > 10:
            raise ValueError("Invalid value for `asin`, length must be less than or equal to `10`")
        if asin is not None and len(asin) < 10:
            raise ValueError("Invalid value for `asin`, length must be greater than or equal to `10`")

        self._asin = asin

    @property
    def external_order_id(self):
        """Gets the external_order_id of this ShipmentItem.

        external order id

        :return: The external_order_id of this ShipmentItem.
        :rtype: str
        """
        return self._external_order_id

    @external_order_id.setter
    def external_order_id(self, external_order_id):
        """Sets the external_order_id of this ShipmentItem.

        external order id

        :param external_order_id: The external_order_id of this ShipmentItem.
        :type external_order_id: str
        """

        self._external_order_id = external_order_id

    @property
    def external_order_item_id(self):
        """Gets the external_order_item_id of this ShipmentItem.

        external order item id

        :return: The external_order_item_id of this ShipmentItem.
        :rtype: str
        """
        return self._external_order_item_id

    @external_order_item_id.setter
    def external_order_item_id(self, external_order_item_id):
        """Sets the external_order_item_id of this ShipmentItem.

        external order item id

        :param external_order_item_id: The external_order_item_id of this ShipmentItem.
        :type external_order_item_id: str
        """

        self._external_order_item_id = external_order_item_id

    @property
    def name(self):
        """Gets the name of this ShipmentItem.

        item name

        :return: The name of this ShipmentItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShipmentItem.

        item name

        :param name: The name of this ShipmentItem.
        :type name: str
        """
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def order_source_code(self):
        """Gets the order_source_code of this ShipmentItem.


        :return: The order_source_code of this ShipmentItem.
        :rtype: OrderSourceName
        """
        return self._order_source_code

    @order_source_code.setter
    def order_source_code(self, order_source_code):
        """Sets the order_source_code of this ShipmentItem.


        :param order_source_code: The order_source_code of this ShipmentItem.
        :type order_source_code: OrderSourceName
        """

        self._order_source_code = order_source_code

    @property
    def quantity(self):
        """Gets the quantity of this ShipmentItem.

        The quantity of this item included in the shipment

        :return: The quantity of this ShipmentItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ShipmentItem.

        The quantity of this item included in the shipment

        :param quantity: The quantity of this ShipmentItem.
        :type quantity: int
        """
        if quantity is not None and quantity < 0:
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `0`")

        self._quantity = quantity

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this ShipmentItem.

        sales order id

        :return: The sales_order_id of this ShipmentItem.
        :rtype: str
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this ShipmentItem.

        sales order id

        :param sales_order_id: The sales_order_id of this ShipmentItem.
        :type sales_order_id: str
        """

        self._sales_order_id = sales_order_id

    @property
    def sales_order_item_id(self):
        """Gets the sales_order_item_id of this ShipmentItem.

        sales order item id

        :return: The sales_order_item_id of this ShipmentItem.
        :rtype: str
        """
        return self._sales_order_item_id

    @sales_order_item_id.setter
    def sales_order_item_id(self, sales_order_item_id):
        """Sets the sales_order_item_id of this ShipmentItem.

        sales order item id

        :param sales_order_item_id: The sales_order_item_id of this ShipmentItem.
        :type sales_order_item_id: str
        """

        self._sales_order_item_id = sales_order_item_id

    @property
    def sku(self):
        """Gets the sku of this ShipmentItem.

        Item Stock Keeping Unit

        :return: The sku of this ShipmentItem.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ShipmentItem.

        Item Stock Keeping Unit

        :param sku: The sku of this ShipmentItem.
        :type sku: str
        """

        self._sku = sku
