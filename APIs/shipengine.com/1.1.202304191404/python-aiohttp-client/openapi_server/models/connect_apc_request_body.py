# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectApcRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nickname: str=None, password: str=None, username: str=None):
        """ConnectApcRequestBody - a model defined in OpenAPI

        :param nickname: The nickname of this ConnectApcRequestBody.
        :param password: The password of this ConnectApcRequestBody.
        :param username: The username of this ConnectApcRequestBody.
        """
        self.openapi_types = {
            'nickname': str,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'nickname': 'nickname',
            'password': 'password',
            'username': 'username'
        }

        self._nickname = nickname
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectApcRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_apc_request_body of this ConnectApcRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nickname(self):
        """Gets the nickname of this ConnectApcRequestBody.

        The nickname for the APC account

        :return: The nickname of this ConnectApcRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectApcRequestBody.

        The nickname for the APC account

        :param nickname: The nickname of this ConnectApcRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def password(self):
        """Gets the password of this ConnectApcRequestBody.

        The password for the APC account

        :return: The password of this ConnectApcRequestBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConnectApcRequestBody.

        The password for the APC account

        :param password: The password of this ConnectApcRequestBody.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this ConnectApcRequestBody.

        The username for the APC account

        :return: The username of this ConnectApcRequestBody.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConnectApcRequestBody.

        The username for the APC account

        :param username: The username of this ConnectApcRequestBody.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")

        self._username = username
