# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CarrierAdvancedOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_value: str=None, description: str=None, name: str=None):
        """CarrierAdvancedOption - a model defined in OpenAPI

        :param default_value: The default_value of this CarrierAdvancedOption.
        :param description: The description of this CarrierAdvancedOption.
        :param name: The name of this CarrierAdvancedOption.
        """
        self.openapi_types = {
            'default_value': str,
            'description': str,
            'name': str
        }

        self.attribute_map = {
            'default_value': 'default_value',
            'description': 'description',
            'name': 'name'
        }

        self._default_value = default_value
        self._description = description
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CarrierAdvancedOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The carrier_advanced_option of this CarrierAdvancedOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_value(self):
        """Gets the default_value of this CarrierAdvancedOption.

        Default value of option

        :return: The default_value of this CarrierAdvancedOption.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CarrierAdvancedOption.

        Default value of option

        :param default_value: The default_value of this CarrierAdvancedOption.
        :type default_value: str
        """
        if default_value is not None and len(default_value) < 1:
            raise ValueError("Invalid value for `default_value`, length must be greater than or equal to `1`")

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this CarrierAdvancedOption.

        Description of option

        :return: The description of this CarrierAdvancedOption.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CarrierAdvancedOption.

        Description of option

        :param description: The description of this CarrierAdvancedOption.
        :type description: str
        """
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this CarrierAdvancedOption.

        Name of advanced option

        :return: The name of this CarrierAdvancedOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CarrierAdvancedOption.

        Name of advanced option

        :param name: The name of this CarrierAdvancedOption.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
