# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ConnectFirstmileRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mailer_id: str=None, nickname: str=None, password: str=None, profile_name: str=None):
        """ConnectFirstmileRequestBody - a model defined in OpenAPI

        :param mailer_id: The mailer_id of this ConnectFirstmileRequestBody.
        :param nickname: The nickname of this ConnectFirstmileRequestBody.
        :param password: The password of this ConnectFirstmileRequestBody.
        :param profile_name: The profile_name of this ConnectFirstmileRequestBody.
        """
        self.openapi_types = {
            'mailer_id': str,
            'nickname': str,
            'password': str,
            'profile_name': str
        }

        self.attribute_map = {
            'mailer_id': 'mailer_id',
            'nickname': 'nickname',
            'password': 'password',
            'profile_name': 'profile_name'
        }

        self._mailer_id = mailer_id
        self._nickname = nickname
        self._password = password
        self._profile_name = profile_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectFirstmileRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_firstmile_request_body of this ConnectFirstmileRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mailer_id(self):
        """Gets the mailer_id of this ConnectFirstmileRequestBody.

        A string that uniquely identifies the mailer

        :return: The mailer_id of this ConnectFirstmileRequestBody.
        :rtype: str
        """
        return self._mailer_id

    @mailer_id.setter
    def mailer_id(self, mailer_id):
        """Sets the mailer_id of this ConnectFirstmileRequestBody.

        A string that uniquely identifies the mailer

        :param mailer_id: The mailer_id of this ConnectFirstmileRequestBody.
        :type mailer_id: str
        """
        if mailer_id is None:
            raise ValueError("Invalid value for `mailer_id`, must not be `None`")
        if mailer_id is not None and len(mailer_id) > 25:
            raise ValueError("Invalid value for `mailer_id`, length must be less than or equal to `25`")
        if mailer_id is not None and len(mailer_id) < 1:
            raise ValueError("Invalid value for `mailer_id`, length must be greater than or equal to `1`")
        if mailer_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', mailer_id):
            raise ValueError("Invalid value for `mailer_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._mailer_id = mailer_id

    @property
    def nickname(self):
        """Gets the nickname of this ConnectFirstmileRequestBody.

        Nickname

        :return: The nickname of this ConnectFirstmileRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectFirstmileRequestBody.

        Nickname

        :param nickname: The nickname of this ConnectFirstmileRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def password(self):
        """Gets the password of this ConnectFirstmileRequestBody.

        Password

        :return: The password of this ConnectFirstmileRequestBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConnectFirstmileRequestBody.

        Password

        :param password: The password of this ConnectFirstmileRequestBody.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")

        self._password = password

    @property
    def profile_name(self):
        """Gets the profile_name of this ConnectFirstmileRequestBody.

        Profile name

        :return: The profile_name of this ConnectFirstmileRequestBody.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this ConnectFirstmileRequestBody.

        Profile name

        :param profile_name: The profile_name of this ConnectFirstmileRequestBody.
        :type profile_name: str
        """
        if profile_name is not None and len(profile_name) < 1:
            raise ValueError("Invalid value for `profile_name`, length must be greater than or equal to `1`")

        self._profile_name = profile_name
