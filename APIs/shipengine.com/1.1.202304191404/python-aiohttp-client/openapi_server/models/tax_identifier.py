# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identifier_type import IdentifierType
from openapi_server.models.taxable_entity_type import TaxableEntityType
from openapi_server import util


class TaxIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier_type: IdentifierType=None, issuing_authority: str=None, taxable_entity_type: TaxableEntityType=None, value: str=None):
        """TaxIdentifier - a model defined in OpenAPI

        :param identifier_type: The identifier_type of this TaxIdentifier.
        :param issuing_authority: The issuing_authority of this TaxIdentifier.
        :param taxable_entity_type: The taxable_entity_type of this TaxIdentifier.
        :param value: The value of this TaxIdentifier.
        """
        self.openapi_types = {
            'identifier_type': IdentifierType,
            'issuing_authority': str,
            'taxable_entity_type': TaxableEntityType,
            'value': str
        }

        self.attribute_map = {
            'identifier_type': 'identifier_type',
            'issuing_authority': 'issuing_authority',
            'taxable_entity_type': 'taxable_entity_type',
            'value': 'value'
        }

        self._identifier_type = identifier_type
        self._issuing_authority = issuing_authority
        self._taxable_entity_type = taxable_entity_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tax_identifier of this TaxIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier_type(self):
        """Gets the identifier_type of this TaxIdentifier.


        :return: The identifier_type of this TaxIdentifier.
        :rtype: IdentifierType
        """
        return self._identifier_type

    @identifier_type.setter
    def identifier_type(self, identifier_type):
        """Sets the identifier_type of this TaxIdentifier.


        :param identifier_type: The identifier_type of this TaxIdentifier.
        :type identifier_type: IdentifierType
        """
        if identifier_type is None:
            raise ValueError("Invalid value for `identifier_type`, must not be `None`")

        self._identifier_type = identifier_type

    @property
    def issuing_authority(self):
        """Gets the issuing_authority of this TaxIdentifier.

        The authority that issued this tax. This must be a valid 2 character ISO 3166 Alpha 2 country code.

        :return: The issuing_authority of this TaxIdentifier.
        :rtype: str
        """
        return self._issuing_authority

    @issuing_authority.setter
    def issuing_authority(self, issuing_authority):
        """Sets the issuing_authority of this TaxIdentifier.

        The authority that issued this tax. This must be a valid 2 character ISO 3166 Alpha 2 country code.

        :param issuing_authority: The issuing_authority of this TaxIdentifier.
        :type issuing_authority: str
        """
        if issuing_authority is None:
            raise ValueError("Invalid value for `issuing_authority`, must not be `None`")

        self._issuing_authority = issuing_authority

    @property
    def taxable_entity_type(self):
        """Gets the taxable_entity_type of this TaxIdentifier.


        :return: The taxable_entity_type of this TaxIdentifier.
        :rtype: TaxableEntityType
        """
        return self._taxable_entity_type

    @taxable_entity_type.setter
    def taxable_entity_type(self, taxable_entity_type):
        """Sets the taxable_entity_type of this TaxIdentifier.


        :param taxable_entity_type: The taxable_entity_type of this TaxIdentifier.
        :type taxable_entity_type: TaxableEntityType
        """
        if taxable_entity_type is None:
            raise ValueError("Invalid value for `taxable_entity_type`, must not be `None`")

        self._taxable_entity_type = taxable_entity_type

    @property
    def value(self):
        """Gets the value of this TaxIdentifier.

        The value of the identifier

        :return: The value of this TaxIdentifier.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TaxIdentifier.

        The value of the identifier

        :param value: The value of this TaxIdentifier.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
