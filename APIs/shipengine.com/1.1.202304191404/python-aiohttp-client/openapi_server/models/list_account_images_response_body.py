# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pagination_link import PaginationLink
from openapi_server import util


class ListAccountImagesResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, images: List[object]=None, links: PaginationLink=None, page: int=None, pages: int=None, total: int=None):
        """ListAccountImagesResponseBody - a model defined in OpenAPI

        :param images: The images of this ListAccountImagesResponseBody.
        :param links: The links of this ListAccountImagesResponseBody.
        :param page: The page of this ListAccountImagesResponseBody.
        :param pages: The pages of this ListAccountImagesResponseBody.
        :param total: The total of this ListAccountImagesResponseBody.
        """
        self.openapi_types = {
            'images': List[object],
            'links': PaginationLink,
            'page': int,
            'pages': int,
            'total': int
        }

        self.attribute_map = {
            'images': 'images',
            'links': 'links',
            'page': 'page',
            'pages': 'pages',
            'total': 'total'
        }

        self._images = images
        self._links = links
        self._page = page
        self._pages = pages
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAccountImagesResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The list_account_images_response_body of this ListAccountImagesResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def images(self):
        """Gets the images of this ListAccountImagesResponseBody.

        Image List

        :return: The images of this ListAccountImagesResponseBody.
        :rtype: List[object]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ListAccountImagesResponseBody.

        Image List

        :param images: The images of this ListAccountImagesResponseBody.
        :type images: List[object]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")
        if images is not None and len(images) < 0:
            raise ValueError("Invalid value for `images`, number of items must be greater than or equal to `0`")

        self._images = images

    @property
    def links(self):
        """Gets the links of this ListAccountImagesResponseBody.


        :return: The links of this ListAccountImagesResponseBody.
        :rtype: PaginationLink
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ListAccountImagesResponseBody.


        :param links: The links of this ListAccountImagesResponseBody.
        :type links: PaginationLink
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def page(self):
        """Gets the page of this ListAccountImagesResponseBody.

        The current page number of results.  For example, if there are 80 results, and the page size is 25, then `page` could be 1, 2, 3, or 4.  The first three pages would contain 25 items each, and the fourth page would contain the five remaining items.

        :return: The page of this ListAccountImagesResponseBody.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ListAccountImagesResponseBody.

        The current page number of results.  For example, if there are 80 results, and the page size is 25, then `page` could be 1, 2, 3, or 4.  The first three pages would contain 25 items each, and the fourth page would contain the five remaining items.

        :param page: The page of this ListAccountImagesResponseBody.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def pages(self):
        """Gets the pages of this ListAccountImagesResponseBody.

        The total number of pages of results.  For example, if there are 80 results, and the page size is 25, then `pages` would be 4.  The first three pages would contain 25 items each, and the fourth page would contain the five remaining items.  If there are no results, then `pages` will be zero.

        :return: The pages of this ListAccountImagesResponseBody.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this ListAccountImagesResponseBody.

        The total number of pages of results.  For example, if there are 80 results, and the page size is 25, then `pages` would be 4.  The first three pages would contain 25 items each, and the fourth page would contain the five remaining items.  If there are no results, then `pages` will be zero.

        :param pages: The pages of this ListAccountImagesResponseBody.
        :type pages: int
        """
        if pages is None:
            raise ValueError("Invalid value for `pages`, must not be `None`")
        if pages is not None and pages < 0:
            raise ValueError("Invalid value for `pages`, must be a value greater than or equal to `0`")

        self._pages = pages

    @property
    def total(self):
        """Gets the total of this ListAccountImagesResponseBody.

        The total number of items across all pages of results

        :return: The total of this ListAccountImagesResponseBody.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ListAccountImagesResponseBody.

        The total number of items across all pages of results

        :param total: The total of this ListAccountImagesResponseBody.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")
        if total is not None and total < 0:
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `0`")

        self._total = total
