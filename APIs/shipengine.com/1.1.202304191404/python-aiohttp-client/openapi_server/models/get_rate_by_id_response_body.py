# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monetary_value import MonetaryValue
from openapi_server.models.rate_type import RateType
from openapi_server.models.validation_status import ValidationStatus
import re
from openapi_server import util


class GetRateByIdResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_code: str=None, carrier_delivery_days: str=None, carrier_friendly_name: str=None, carrier_id: str=None, carrier_nickname: str=None, confirmation_amount: MonetaryValue=None, delivery_days: int=None, error_messages: List[str]=None, estimated_delivery_date: datetime=None, guaranteed_service: bool=None, insurance_amount: MonetaryValue=None, negotiated_rate: bool=None, other_amount: MonetaryValue=None, package_type: str=None, rate_id: str=None, rate_type: RateType=None, service_code: str=None, service_type: str=None, ship_date: datetime=None, shipping_amount: MonetaryValue=None, tax_amount: MonetaryValue=None, trackable: bool=None, validation_status: ValidationStatus=None, warning_messages: List[str]=None, zone: int=None):
        """GetRateByIdResponseBody - a model defined in OpenAPI

        :param carrier_code: The carrier_code of this GetRateByIdResponseBody.
        :param carrier_delivery_days: The carrier_delivery_days of this GetRateByIdResponseBody.
        :param carrier_friendly_name: The carrier_friendly_name of this GetRateByIdResponseBody.
        :param carrier_id: The carrier_id of this GetRateByIdResponseBody.
        :param carrier_nickname: The carrier_nickname of this GetRateByIdResponseBody.
        :param confirmation_amount: The confirmation_amount of this GetRateByIdResponseBody.
        :param delivery_days: The delivery_days of this GetRateByIdResponseBody.
        :param error_messages: The error_messages of this GetRateByIdResponseBody.
        :param estimated_delivery_date: The estimated_delivery_date of this GetRateByIdResponseBody.
        :param guaranteed_service: The guaranteed_service of this GetRateByIdResponseBody.
        :param insurance_amount: The insurance_amount of this GetRateByIdResponseBody.
        :param negotiated_rate: The negotiated_rate of this GetRateByIdResponseBody.
        :param other_amount: The other_amount of this GetRateByIdResponseBody.
        :param package_type: The package_type of this GetRateByIdResponseBody.
        :param rate_id: The rate_id of this GetRateByIdResponseBody.
        :param rate_type: The rate_type of this GetRateByIdResponseBody.
        :param service_code: The service_code of this GetRateByIdResponseBody.
        :param service_type: The service_type of this GetRateByIdResponseBody.
        :param ship_date: The ship_date of this GetRateByIdResponseBody.
        :param shipping_amount: The shipping_amount of this GetRateByIdResponseBody.
        :param tax_amount: The tax_amount of this GetRateByIdResponseBody.
        :param trackable: The trackable of this GetRateByIdResponseBody.
        :param validation_status: The validation_status of this GetRateByIdResponseBody.
        :param warning_messages: The warning_messages of this GetRateByIdResponseBody.
        :param zone: The zone of this GetRateByIdResponseBody.
        """
        self.openapi_types = {
            'carrier_code': str,
            'carrier_delivery_days': str,
            'carrier_friendly_name': str,
            'carrier_id': str,
            'carrier_nickname': str,
            'confirmation_amount': MonetaryValue,
            'delivery_days': int,
            'error_messages': List[str],
            'estimated_delivery_date': datetime,
            'guaranteed_service': bool,
            'insurance_amount': MonetaryValue,
            'negotiated_rate': bool,
            'other_amount': MonetaryValue,
            'package_type': str,
            'rate_id': str,
            'rate_type': RateType,
            'service_code': str,
            'service_type': str,
            'ship_date': datetime,
            'shipping_amount': MonetaryValue,
            'tax_amount': MonetaryValue,
            'trackable': bool,
            'validation_status': ValidationStatus,
            'warning_messages': List[str],
            'zone': int
        }

        self.attribute_map = {
            'carrier_code': 'carrier_code',
            'carrier_delivery_days': 'carrier_delivery_days',
            'carrier_friendly_name': 'carrier_friendly_name',
            'carrier_id': 'carrier_id',
            'carrier_nickname': 'carrier_nickname',
            'confirmation_amount': 'confirmation_amount',
            'delivery_days': 'delivery_days',
            'error_messages': 'error_messages',
            'estimated_delivery_date': 'estimated_delivery_date',
            'guaranteed_service': 'guaranteed_service',
            'insurance_amount': 'insurance_amount',
            'negotiated_rate': 'negotiated_rate',
            'other_amount': 'other_amount',
            'package_type': 'package_type',
            'rate_id': 'rate_id',
            'rate_type': 'rate_type',
            'service_code': 'service_code',
            'service_type': 'service_type',
            'ship_date': 'ship_date',
            'shipping_amount': 'shipping_amount',
            'tax_amount': 'tax_amount',
            'trackable': 'trackable',
            'validation_status': 'validation_status',
            'warning_messages': 'warning_messages',
            'zone': 'zone'
        }

        self._carrier_code = carrier_code
        self._carrier_delivery_days = carrier_delivery_days
        self._carrier_friendly_name = carrier_friendly_name
        self._carrier_id = carrier_id
        self._carrier_nickname = carrier_nickname
        self._confirmation_amount = confirmation_amount
        self._delivery_days = delivery_days
        self._error_messages = error_messages
        self._estimated_delivery_date = estimated_delivery_date
        self._guaranteed_service = guaranteed_service
        self._insurance_amount = insurance_amount
        self._negotiated_rate = negotiated_rate
        self._other_amount = other_amount
        self._package_type = package_type
        self._rate_id = rate_id
        self._rate_type = rate_type
        self._service_code = service_code
        self._service_type = service_type
        self._ship_date = ship_date
        self._shipping_amount = shipping_amount
        self._tax_amount = tax_amount
        self._trackable = trackable
        self._validation_status = validation_status
        self._warning_messages = warning_messages
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRateByIdResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_rate_by_id_response_body of this GetRateByIdResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_code(self):
        """Gets the carrier_code of this GetRateByIdResponseBody.

        carrier code

        :return: The carrier_code of this GetRateByIdResponseBody.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this GetRateByIdResponseBody.

        carrier code

        :param carrier_code: The carrier_code of this GetRateByIdResponseBody.
        :type carrier_code: str
        """
        if carrier_code is None:
            raise ValueError("Invalid value for `carrier_code`, must not be `None`")
        if carrier_code is not None and len(carrier_code) < 1:
            raise ValueError("Invalid value for `carrier_code`, length must be greater than or equal to `1`")

        self._carrier_code = carrier_code

    @property
    def carrier_delivery_days(self):
        """Gets the carrier_delivery_days of this GetRateByIdResponseBody.

        The carrier delivery days

        :return: The carrier_delivery_days of this GetRateByIdResponseBody.
        :rtype: str
        """
        return self._carrier_delivery_days

    @carrier_delivery_days.setter
    def carrier_delivery_days(self, carrier_delivery_days):
        """Sets the carrier_delivery_days of this GetRateByIdResponseBody.

        The carrier delivery days

        :param carrier_delivery_days: The carrier_delivery_days of this GetRateByIdResponseBody.
        :type carrier_delivery_days: str
        """
        if carrier_delivery_days is not None and len(carrier_delivery_days) < 1:
            raise ValueError("Invalid value for `carrier_delivery_days`, length must be greater than or equal to `1`")

        self._carrier_delivery_days = carrier_delivery_days

    @property
    def carrier_friendly_name(self):
        """Gets the carrier_friendly_name of this GetRateByIdResponseBody.

        carrier friendly name

        :return: The carrier_friendly_name of this GetRateByIdResponseBody.
        :rtype: str
        """
        return self._carrier_friendly_name

    @carrier_friendly_name.setter
    def carrier_friendly_name(self, carrier_friendly_name):
        """Sets the carrier_friendly_name of this GetRateByIdResponseBody.

        carrier friendly name

        :param carrier_friendly_name: The carrier_friendly_name of this GetRateByIdResponseBody.
        :type carrier_friendly_name: str
        """
        if carrier_friendly_name is None:
            raise ValueError("Invalid value for `carrier_friendly_name`, must not be `None`")
        if carrier_friendly_name is not None and len(carrier_friendly_name) < 1:
            raise ValueError("Invalid value for `carrier_friendly_name`, length must be greater than or equal to `1`")

        self._carrier_friendly_name = carrier_friendly_name

    @property
    def carrier_id(self):
        """Gets the carrier_id of this GetRateByIdResponseBody.

        A string that uniquely identifies the carrier

        :return: The carrier_id of this GetRateByIdResponseBody.
        :rtype: str
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this GetRateByIdResponseBody.

        A string that uniquely identifies the carrier

        :param carrier_id: The carrier_id of this GetRateByIdResponseBody.
        :type carrier_id: str
        """
        if carrier_id is None:
            raise ValueError("Invalid value for `carrier_id`, must not be `None`")
        if carrier_id is not None and len(carrier_id) > 25:
            raise ValueError("Invalid value for `carrier_id`, length must be less than or equal to `25`")
        if carrier_id is not None and len(carrier_id) < 1:
            raise ValueError("Invalid value for `carrier_id`, length must be greater than or equal to `1`")
        if carrier_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', carrier_id):
            raise ValueError("Invalid value for `carrier_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._carrier_id = carrier_id

    @property
    def carrier_nickname(self):
        """Gets the carrier_nickname of this GetRateByIdResponseBody.

        carrier nickname

        :return: The carrier_nickname of this GetRateByIdResponseBody.
        :rtype: str
        """
        return self._carrier_nickname

    @carrier_nickname.setter
    def carrier_nickname(self, carrier_nickname):
        """Sets the carrier_nickname of this GetRateByIdResponseBody.

        carrier nickname

        :param carrier_nickname: The carrier_nickname of this GetRateByIdResponseBody.
        :type carrier_nickname: str
        """
        if carrier_nickname is None:
            raise ValueError("Invalid value for `carrier_nickname`, must not be `None`")
        if carrier_nickname is not None and len(carrier_nickname) < 1:
            raise ValueError("Invalid value for `carrier_nickname`, length must be greater than or equal to `1`")

        self._carrier_nickname = carrier_nickname

    @property
    def confirmation_amount(self):
        """Gets the confirmation_amount of this GetRateByIdResponseBody.

        The confirmation amount

        :return: The confirmation_amount of this GetRateByIdResponseBody.
        :rtype: MonetaryValue
        """
        return self._confirmation_amount

    @confirmation_amount.setter
    def confirmation_amount(self, confirmation_amount):
        """Sets the confirmation_amount of this GetRateByIdResponseBody.

        The confirmation amount

        :param confirmation_amount: The confirmation_amount of this GetRateByIdResponseBody.
        :type confirmation_amount: MonetaryValue
        """
        if confirmation_amount is None:
            raise ValueError("Invalid value for `confirmation_amount`, must not be `None`")

        self._confirmation_amount = confirmation_amount

    @property
    def delivery_days(self):
        """Gets the delivery_days of this GetRateByIdResponseBody.

        The number of days estimated for delivery, this will show the _actual_ delivery time if for example, the package gets shipped on a Friday 

        :return: The delivery_days of this GetRateByIdResponseBody.
        :rtype: int
        """
        return self._delivery_days

    @delivery_days.setter
    def delivery_days(self, delivery_days):
        """Sets the delivery_days of this GetRateByIdResponseBody.

        The number of days estimated for delivery, this will show the _actual_ delivery time if for example, the package gets shipped on a Friday 

        :param delivery_days: The delivery_days of this GetRateByIdResponseBody.
        :type delivery_days: int
        """
        if delivery_days is not None and delivery_days < 1:
            raise ValueError("Invalid value for `delivery_days`, must be a value greater than or equal to `1`")

        self._delivery_days = delivery_days

    @property
    def error_messages(self):
        """Gets the error_messages of this GetRateByIdResponseBody.

        The error messages

        :return: The error_messages of this GetRateByIdResponseBody.
        :rtype: List[str]
        """
        return self._error_messages

    @error_messages.setter
    def error_messages(self, error_messages):
        """Sets the error_messages of this GetRateByIdResponseBody.

        The error messages

        :param error_messages: The error_messages of this GetRateByIdResponseBody.
        :type error_messages: List[str]
        """
        if error_messages is None:
            raise ValueError("Invalid value for `error_messages`, must not be `None`")
        if error_messages is not None and len(error_messages) < 0:
            raise ValueError("Invalid value for `error_messages`, number of items must be greater than or equal to `0`")

        self._error_messages = error_messages

    @property
    def estimated_delivery_date(self):
        """Gets the estimated_delivery_date of this GetRateByIdResponseBody.

        An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date, but not a specific time.  The value _may_ contain a time component, but it will be set to `00:00:00` UTC by ShipEngine. 

        :return: The estimated_delivery_date of this GetRateByIdResponseBody.
        :rtype: datetime
        """
        return self._estimated_delivery_date

    @estimated_delivery_date.setter
    def estimated_delivery_date(self, estimated_delivery_date):
        """Sets the estimated_delivery_date of this GetRateByIdResponseBody.

        An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date, but not a specific time.  The value _may_ contain a time component, but it will be set to `00:00:00` UTC by ShipEngine. 

        :param estimated_delivery_date: The estimated_delivery_date of this GetRateByIdResponseBody.
        :type estimated_delivery_date: datetime
        """
        if estimated_delivery_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2}))?$', estimated_delivery_date):
            raise ValueError("Invalid value for `estimated_delivery_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2}))?$/`")

        self._estimated_delivery_date = estimated_delivery_date

    @property
    def guaranteed_service(self):
        """Gets the guaranteed_service of this GetRateByIdResponseBody.

        Indicates if the rate is guaranteed.

        :return: The guaranteed_service of this GetRateByIdResponseBody.
        :rtype: bool
        """
        return self._guaranteed_service

    @guaranteed_service.setter
    def guaranteed_service(self, guaranteed_service):
        """Sets the guaranteed_service of this GetRateByIdResponseBody.

        Indicates if the rate is guaranteed.

        :param guaranteed_service: The guaranteed_service of this GetRateByIdResponseBody.
        :type guaranteed_service: bool
        """
        if guaranteed_service is None:
            raise ValueError("Invalid value for `guaranteed_service`, must not be `None`")

        self._guaranteed_service = guaranteed_service

    @property
    def insurance_amount(self):
        """Gets the insurance_amount of this GetRateByIdResponseBody.

        The insurance amount

        :return: The insurance_amount of this GetRateByIdResponseBody.
        :rtype: MonetaryValue
        """
        return self._insurance_amount

    @insurance_amount.setter
    def insurance_amount(self, insurance_amount):
        """Sets the insurance_amount of this GetRateByIdResponseBody.

        The insurance amount

        :param insurance_amount: The insurance_amount of this GetRateByIdResponseBody.
        :type insurance_amount: MonetaryValue
        """
        if insurance_amount is None:
            raise ValueError("Invalid value for `insurance_amount`, must not be `None`")

        self._insurance_amount = insurance_amount

    @property
    def negotiated_rate(self):
        """Gets the negotiated_rate of this GetRateByIdResponseBody.

        Indicates if the rates been negotiated

        :return: The negotiated_rate of this GetRateByIdResponseBody.
        :rtype: bool
        """
        return self._negotiated_rate

    @negotiated_rate.setter
    def negotiated_rate(self, negotiated_rate):
        """Sets the negotiated_rate of this GetRateByIdResponseBody.

        Indicates if the rates been negotiated

        :param negotiated_rate: The negotiated_rate of this GetRateByIdResponseBody.
        :type negotiated_rate: bool
        """
        if negotiated_rate is None:
            raise ValueError("Invalid value for `negotiated_rate`, must not be `None`")

        self._negotiated_rate = negotiated_rate

    @property
    def other_amount(self):
        """Gets the other_amount of this GetRateByIdResponseBody.

        Any other charges associated with this rate

        :return: The other_amount of this GetRateByIdResponseBody.
        :rtype: MonetaryValue
        """
        return self._other_amount

    @other_amount.setter
    def other_amount(self, other_amount):
        """Sets the other_amount of this GetRateByIdResponseBody.

        Any other charges associated with this rate

        :param other_amount: The other_amount of this GetRateByIdResponseBody.
        :type other_amount: MonetaryValue
        """
        if other_amount is None:
            raise ValueError("Invalid value for `other_amount`, must not be `None`")

        self._other_amount = other_amount

    @property
    def package_type(self):
        """Gets the package_type of this GetRateByIdResponseBody.

        package type that this rate was estimated for

        :return: The package_type of this GetRateByIdResponseBody.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this GetRateByIdResponseBody.

        package type that this rate was estimated for

        :param package_type: The package_type of this GetRateByIdResponseBody.
        :type package_type: str
        """
        if package_type is None:
            raise ValueError("Invalid value for `package_type`, must not be `None`")
        if package_type is not None and len(package_type) < 1:
            raise ValueError("Invalid value for `package_type`, length must be greater than or equal to `1`")

        self._package_type = package_type

    @property
    def rate_id(self):
        """Gets the rate_id of this GetRateByIdResponseBody.

        A string that uniquely identifies the rate

        :return: The rate_id of this GetRateByIdResponseBody.
        :rtype: str
        """
        return self._rate_id

    @rate_id.setter
    def rate_id(self, rate_id):
        """Sets the rate_id of this GetRateByIdResponseBody.

        A string that uniquely identifies the rate

        :param rate_id: The rate_id of this GetRateByIdResponseBody.
        :type rate_id: str
        """
        if rate_id is None:
            raise ValueError("Invalid value for `rate_id`, must not be `None`")
        if rate_id is not None and len(rate_id) > 25:
            raise ValueError("Invalid value for `rate_id`, length must be less than or equal to `25`")
        if rate_id is not None and len(rate_id) < 1:
            raise ValueError("Invalid value for `rate_id`, length must be greater than or equal to `1`")
        if rate_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', rate_id):
            raise ValueError("Invalid value for `rate_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._rate_id = rate_id

    @property
    def rate_type(self):
        """Gets the rate_type of this GetRateByIdResponseBody.


        :return: The rate_type of this GetRateByIdResponseBody.
        :rtype: RateType
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """Sets the rate_type of this GetRateByIdResponseBody.


        :param rate_type: The rate_type of this GetRateByIdResponseBody.
        :type rate_type: RateType
        """
        if rate_type is None:
            raise ValueError("Invalid value for `rate_type`, must not be `None`")

        self._rate_type = rate_type

    @property
    def service_code(self):
        """Gets the service_code of this GetRateByIdResponseBody.

        service code for the rate

        :return: The service_code of this GetRateByIdResponseBody.
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this GetRateByIdResponseBody.

        service code for the rate

        :param service_code: The service_code of this GetRateByIdResponseBody.
        :type service_code: str
        """
        if service_code is None:
            raise ValueError("Invalid value for `service_code`, must not be `None`")
        if service_code is not None and len(service_code) < 1:
            raise ValueError("Invalid value for `service_code`, length must be greater than or equal to `1`")

        self._service_code = service_code

    @property
    def service_type(self):
        """Gets the service_type of this GetRateByIdResponseBody.

        service type

        :return: The service_type of this GetRateByIdResponseBody.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this GetRateByIdResponseBody.

        service type

        :param service_type: The service_type of this GetRateByIdResponseBody.
        :type service_type: str
        """
        if service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")
        if service_type is not None and len(service_type) < 1:
            raise ValueError("Invalid value for `service_type`, length must be greater than or equal to `1`")

        self._service_type = service_type

    @property
    def ship_date(self):
        """Gets the ship_date of this GetRateByIdResponseBody.

        ship date

        :return: The ship_date of this GetRateByIdResponseBody.
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this GetRateByIdResponseBody.

        ship date

        :param ship_date: The ship_date of this GetRateByIdResponseBody.
        :type ship_date: datetime
        """
        if ship_date is not None and len(ship_date) < 1:
            raise ValueError("Invalid value for `ship_date`, length must be greater than or equal to `1`")

        self._ship_date = ship_date

    @property
    def shipping_amount(self):
        """Gets the shipping_amount of this GetRateByIdResponseBody.

        The shipping amount

        :return: The shipping_amount of this GetRateByIdResponseBody.
        :rtype: MonetaryValue
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """Sets the shipping_amount of this GetRateByIdResponseBody.

        The shipping amount

        :param shipping_amount: The shipping_amount of this GetRateByIdResponseBody.
        :type shipping_amount: MonetaryValue
        """
        if shipping_amount is None:
            raise ValueError("Invalid value for `shipping_amount`, must not be `None`")

        self._shipping_amount = shipping_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this GetRateByIdResponseBody.

        Tariff and additional taxes associated with an international shipment.

        :return: The tax_amount of this GetRateByIdResponseBody.
        :rtype: MonetaryValue
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this GetRateByIdResponseBody.

        Tariff and additional taxes associated with an international shipment.

        :param tax_amount: The tax_amount of this GetRateByIdResponseBody.
        :type tax_amount: MonetaryValue
        """

        self._tax_amount = tax_amount

    @property
    def trackable(self):
        """Gets the trackable of this GetRateByIdResponseBody.

        Indicates if rate is trackable

        :return: The trackable of this GetRateByIdResponseBody.
        :rtype: bool
        """
        return self._trackable

    @trackable.setter
    def trackable(self, trackable):
        """Sets the trackable of this GetRateByIdResponseBody.

        Indicates if rate is trackable

        :param trackable: The trackable of this GetRateByIdResponseBody.
        :type trackable: bool
        """
        if trackable is None:
            raise ValueError("Invalid value for `trackable`, must not be `None`")

        self._trackable = trackable

    @property
    def validation_status(self):
        """Gets the validation_status of this GetRateByIdResponseBody.


        :return: The validation_status of this GetRateByIdResponseBody.
        :rtype: ValidationStatus
        """
        return self._validation_status

    @validation_status.setter
    def validation_status(self, validation_status):
        """Sets the validation_status of this GetRateByIdResponseBody.


        :param validation_status: The validation_status of this GetRateByIdResponseBody.
        :type validation_status: ValidationStatus
        """
        if validation_status is None:
            raise ValueError("Invalid value for `validation_status`, must not be `None`")

        self._validation_status = validation_status

    @property
    def warning_messages(self):
        """Gets the warning_messages of this GetRateByIdResponseBody.

        The warning messages

        :return: The warning_messages of this GetRateByIdResponseBody.
        :rtype: List[str]
        """
        return self._warning_messages

    @warning_messages.setter
    def warning_messages(self, warning_messages):
        """Sets the warning_messages of this GetRateByIdResponseBody.

        The warning messages

        :param warning_messages: The warning_messages of this GetRateByIdResponseBody.
        :type warning_messages: List[str]
        """
        if warning_messages is None:
            raise ValueError("Invalid value for `warning_messages`, must not be `None`")
        if warning_messages is not None and len(warning_messages) < 0:
            raise ValueError("Invalid value for `warning_messages`, number of items must be greater than or equal to `0`")

        self._warning_messages = warning_messages

    @property
    def zone(self):
        """Gets the zone of this GetRateByIdResponseBody.

        Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of custom zones that vary depending upon the ship_to and ship_from location 

        :return: The zone of this GetRateByIdResponseBody.
        :rtype: int
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this GetRateByIdResponseBody.

        Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of custom zones that vary depending upon the ship_to and ship_from location 

        :param zone: The zone of this GetRateByIdResponseBody.
        :type zone: int
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")
        if zone is not None and zone < 0:
            raise ValueError("Invalid value for `zone`, must be a value greater than or equal to `0`")

        self._zone = zone
