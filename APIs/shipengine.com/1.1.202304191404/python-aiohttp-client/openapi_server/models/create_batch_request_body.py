# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateBatchRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_notes: str=None, external_batch_id: str=None, rate_ids: List[str]=None, shipment_ids: List[str]=None):
        """CreateBatchRequestBody - a model defined in OpenAPI

        :param batch_notes: The batch_notes of this CreateBatchRequestBody.
        :param external_batch_id: The external_batch_id of this CreateBatchRequestBody.
        :param rate_ids: The rate_ids of this CreateBatchRequestBody.
        :param shipment_ids: The shipment_ids of this CreateBatchRequestBody.
        """
        self.openapi_types = {
            'batch_notes': str,
            'external_batch_id': str,
            'rate_ids': List[str],
            'shipment_ids': List[str]
        }

        self.attribute_map = {
            'batch_notes': 'batch_notes',
            'external_batch_id': 'external_batch_id',
            'rate_ids': 'rate_ids',
            'shipment_ids': 'shipment_ids'
        }

        self._batch_notes = batch_notes
        self._external_batch_id = external_batch_id
        self._rate_ids = rate_ids
        self._shipment_ids = shipment_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBatchRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_batch_request_body of this CreateBatchRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_notes(self):
        """Gets the batch_notes of this CreateBatchRequestBody.

        Add custom messages for a particular batch

        :return: The batch_notes of this CreateBatchRequestBody.
        :rtype: str
        """
        return self._batch_notes

    @batch_notes.setter
    def batch_notes(self, batch_notes):
        """Sets the batch_notes of this CreateBatchRequestBody.

        Add custom messages for a particular batch

        :param batch_notes: The batch_notes of this CreateBatchRequestBody.
        :type batch_notes: str
        """
        if batch_notes is not None and len(batch_notes) < 1:
            raise ValueError("Invalid value for `batch_notes`, length must be greater than or equal to `1`")

        self._batch_notes = batch_notes

    @property
    def external_batch_id(self):
        """Gets the external_batch_id of this CreateBatchRequestBody.

        A string that uniquely identifies the external batch

        :return: The external_batch_id of this CreateBatchRequestBody.
        :rtype: str
        """
        return self._external_batch_id

    @external_batch_id.setter
    def external_batch_id(self, external_batch_id):
        """Sets the external_batch_id of this CreateBatchRequestBody.

        A string that uniquely identifies the external batch

        :param external_batch_id: The external_batch_id of this CreateBatchRequestBody.
        :type external_batch_id: str
        """
        if external_batch_id is not None and len(external_batch_id) > 25:
            raise ValueError("Invalid value for `external_batch_id`, length must be less than or equal to `25`")
        if external_batch_id is not None and len(external_batch_id) < 1:
            raise ValueError("Invalid value for `external_batch_id`, length must be greater than or equal to `1`")
        if external_batch_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', external_batch_id):
            raise ValueError("Invalid value for `external_batch_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._external_batch_id = external_batch_id

    @property
    def rate_ids(self):
        """Gets the rate_ids of this CreateBatchRequestBody.

        Array of rate IDs used in the batch

        :return: The rate_ids of this CreateBatchRequestBody.
        :rtype: List[str]
        """
        return self._rate_ids

    @rate_ids.setter
    def rate_ids(self, rate_ids):
        """Sets the rate_ids of this CreateBatchRequestBody.

        Array of rate IDs used in the batch

        :param rate_ids: The rate_ids of this CreateBatchRequestBody.
        :type rate_ids: List[str]
        """

        self._rate_ids = rate_ids

    @property
    def shipment_ids(self):
        """Gets the shipment_ids of this CreateBatchRequestBody.

        Array of shipment IDs used in the batch

        :return: The shipment_ids of this CreateBatchRequestBody.
        :rtype: List[str]
        """
        return self._shipment_ids

    @shipment_ids.setter
    def shipment_ids(self, shipment_ids):
        """Sets the shipment_ids of this CreateBatchRequestBody.

        Array of shipment IDs used in the batch

        :param shipment_ids: The shipment_ids of this CreateBatchRequestBody.
        :type shipment_ids: List[str]
        """

        self._shipment_ids = shipment_ids
