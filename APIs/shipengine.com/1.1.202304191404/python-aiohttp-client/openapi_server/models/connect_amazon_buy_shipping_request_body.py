# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectAmazonBuyShippingRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, merchant_seller_id: str=None, mws_auth_token: str=None, nickname: str=None):
        """ConnectAmazonBuyShippingRequestBody - a model defined in OpenAPI

        :param email: The email of this ConnectAmazonBuyShippingRequestBody.
        :param merchant_seller_id: The merchant_seller_id of this ConnectAmazonBuyShippingRequestBody.
        :param mws_auth_token: The mws_auth_token of this ConnectAmazonBuyShippingRequestBody.
        :param nickname: The nickname of this ConnectAmazonBuyShippingRequestBody.
        """
        self.openapi_types = {
            'email': str,
            'merchant_seller_id': str,
            'mws_auth_token': str,
            'nickname': str
        }

        self.attribute_map = {
            'email': 'email',
            'merchant_seller_id': 'merchant_seller_id',
            'mws_auth_token': 'mws_auth_token',
            'nickname': 'nickname'
        }

        self._email = email
        self._merchant_seller_id = merchant_seller_id
        self._mws_auth_token = mws_auth_token
        self._nickname = nickname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectAmazonBuyShippingRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_amazon_buy_shipping_request_body of this ConnectAmazonBuyShippingRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this ConnectAmazonBuyShippingRequestBody.

        An email address.

        :return: The email of this ConnectAmazonBuyShippingRequestBody.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ConnectAmazonBuyShippingRequestBody.

        An email address.

        :param email: The email of this ConnectAmazonBuyShippingRequestBody.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def merchant_seller_id(self):
        """Gets the merchant_seller_id of this ConnectAmazonBuyShippingRequestBody.


        :return: The merchant_seller_id of this ConnectAmazonBuyShippingRequestBody.
        :rtype: str
        """
        return self._merchant_seller_id

    @merchant_seller_id.setter
    def merchant_seller_id(self, merchant_seller_id):
        """Sets the merchant_seller_id of this ConnectAmazonBuyShippingRequestBody.


        :param merchant_seller_id: The merchant_seller_id of this ConnectAmazonBuyShippingRequestBody.
        :type merchant_seller_id: str
        """
        if merchant_seller_id is None:
            raise ValueError("Invalid value for `merchant_seller_id`, must not be `None`")
        if merchant_seller_id is not None and len(merchant_seller_id) < 1:
            raise ValueError("Invalid value for `merchant_seller_id`, length must be greater than or equal to `1`")

        self._merchant_seller_id = merchant_seller_id

    @property
    def mws_auth_token(self):
        """Gets the mws_auth_token of this ConnectAmazonBuyShippingRequestBody.


        :return: The mws_auth_token of this ConnectAmazonBuyShippingRequestBody.
        :rtype: str
        """
        return self._mws_auth_token

    @mws_auth_token.setter
    def mws_auth_token(self, mws_auth_token):
        """Sets the mws_auth_token of this ConnectAmazonBuyShippingRequestBody.


        :param mws_auth_token: The mws_auth_token of this ConnectAmazonBuyShippingRequestBody.
        :type mws_auth_token: str
        """
        if mws_auth_token is None:
            raise ValueError("Invalid value for `mws_auth_token`, must not be `None`")
        if mws_auth_token is not None and len(mws_auth_token) < 1:
            raise ValueError("Invalid value for `mws_auth_token`, length must be greater than or equal to `1`")

        self._mws_auth_token = mws_auth_token

    @property
    def nickname(self):
        """Gets the nickname of this ConnectAmazonBuyShippingRequestBody.

        Nickname to be associated with the account connection

        :return: The nickname of this ConnectAmazonBuyShippingRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectAmazonBuyShippingRequestBody.

        Nickname to be associated with the account connection

        :param nickname: The nickname of this ConnectAmazonBuyShippingRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname
