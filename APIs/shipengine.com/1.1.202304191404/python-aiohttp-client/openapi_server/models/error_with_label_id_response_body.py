# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
import re
from openapi_server import util


class ErrorWithLabelIdResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[Error]=None, request_id: str=None):
        """ErrorWithLabelIdResponseBody - a model defined in OpenAPI

        :param errors: The errors of this ErrorWithLabelIdResponseBody.
        :param request_id: The request_id of this ErrorWithLabelIdResponseBody.
        """
        self.openapi_types = {
            'errors': List[Error],
            'request_id': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'request_id': 'request_id'
        }

        self._errors = errors
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorWithLabelIdResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error_with_label_id_response_body of this ErrorWithLabelIdResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this ErrorWithLabelIdResponseBody.

        The errors associated with the failed API call

        :return: The errors of this ErrorWithLabelIdResponseBody.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ErrorWithLabelIdResponseBody.

        The errors associated with the failed API call

        :param errors: The errors of this ErrorWithLabelIdResponseBody.
        :type errors: List[Error]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def request_id(self):
        """Gets the request_id of this ErrorWithLabelIdResponseBody.

        A UUID that uniquely identifies the request id. This can be given to the support team to help debug non-trivial issues that may occur 

        :return: The request_id of this ErrorWithLabelIdResponseBody.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ErrorWithLabelIdResponseBody.

        A UUID that uniquely identifies the request id. This can be given to the support team to help debug non-trivial issues that may occur 

        :param request_id: The request_id of this ErrorWithLabelIdResponseBody.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")
        if request_id is not None and len(request_id) > 36:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `36`")
        if request_id is not None and len(request_id) < 36:
            raise ValueError("Invalid value for `request_id`, length must be greater than or equal to `36`")
        if request_id is not None and not re.search(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$', request_id):
            raise ValueError("Invalid value for `request_id`, must be a follow pattern or equal to `/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/`")

        self._request_id = request_id
