# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_code: str=None, carrier_id: str=None, domestic: bool=None, international: bool=None, is_multi_package_supported: bool=None, name: str=None, service_code: str=None):
        """Service - a model defined in OpenAPI

        :param carrier_code: The carrier_code of this Service.
        :param carrier_id: The carrier_id of this Service.
        :param domestic: The domestic of this Service.
        :param international: The international of this Service.
        :param is_multi_package_supported: The is_multi_package_supported of this Service.
        :param name: The name of this Service.
        :param service_code: The service_code of this Service.
        """
        self.openapi_types = {
            'carrier_code': str,
            'carrier_id': str,
            'domestic': bool,
            'international': bool,
            'is_multi_package_supported': bool,
            'name': str,
            'service_code': str
        }

        self.attribute_map = {
            'carrier_code': 'carrier_code',
            'carrier_id': 'carrier_id',
            'domestic': 'domestic',
            'international': 'international',
            'is_multi_package_supported': 'is_multi_package_supported',
            'name': 'name',
            'service_code': 'service_code'
        }

        self._carrier_code = carrier_code
        self._carrier_id = carrier_id
        self._domestic = domestic
        self._international = international
        self._is_multi_package_supported = is_multi_package_supported
        self._name = name
        self._service_code = service_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_code(self):
        """Gets the carrier_code of this Service.

        A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.

        :return: The carrier_code of this Service.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this Service.

        A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.

        :param carrier_code: The carrier_code of this Service.
        :type carrier_code: str
        """
        if carrier_code is not None and len(carrier_code) > 25:
            raise ValueError("Invalid value for `carrier_code`, length must be less than or equal to `25`")
        if carrier_code is not None and len(carrier_code) < 1:
            raise ValueError("Invalid value for `carrier_code`, length must be greater than or equal to `1`")
        if carrier_code is not None and not re.search(r'^se(-[a-z0-9]+)+$', carrier_code):
            raise ValueError("Invalid value for `carrier_code`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._carrier_code = carrier_code

    @property
    def carrier_id(self):
        """Gets the carrier_id of this Service.

        A string that uniquely identifies the carrier

        :return: The carrier_id of this Service.
        :rtype: str
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this Service.

        A string that uniquely identifies the carrier

        :param carrier_id: The carrier_id of this Service.
        :type carrier_id: str
        """
        if carrier_id is not None and len(carrier_id) > 25:
            raise ValueError("Invalid value for `carrier_id`, length must be less than or equal to `25`")
        if carrier_id is not None and len(carrier_id) < 1:
            raise ValueError("Invalid value for `carrier_id`, length must be greater than or equal to `1`")
        if carrier_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', carrier_id):
            raise ValueError("Invalid value for `carrier_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._carrier_id = carrier_id

    @property
    def domestic(self):
        """Gets the domestic of this Service.

        Supports domestic shipping

        :return: The domestic of this Service.
        :rtype: bool
        """
        return self._domestic

    @domestic.setter
    def domestic(self, domestic):
        """Sets the domestic of this Service.

        Supports domestic shipping

        :param domestic: The domestic of this Service.
        :type domestic: bool
        """

        self._domestic = domestic

    @property
    def international(self):
        """Gets the international of this Service.

        Supports international shipping.

        :return: The international of this Service.
        :rtype: bool
        """
        return self._international

    @international.setter
    def international(self, international):
        """Sets the international of this Service.

        Supports international shipping.

        :param international: The international of this Service.
        :type international: bool
        """

        self._international = international

    @property
    def is_multi_package_supported(self):
        """Gets the is_multi_package_supported of this Service.

        Carrier supports multiple packages per shipment

        :return: The is_multi_package_supported of this Service.
        :rtype: bool
        """
        return self._is_multi_package_supported

    @is_multi_package_supported.setter
    def is_multi_package_supported(self, is_multi_package_supported):
        """Sets the is_multi_package_supported of this Service.

        Carrier supports multiple packages per shipment

        :param is_multi_package_supported: The is_multi_package_supported of this Service.
        :type is_multi_package_supported: bool
        """

        self._is_multi_package_supported = is_multi_package_supported

    @property
    def name(self):
        """Gets the name of this Service.

        User friendly service name

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        User friendly service name

        :param name: The name of this Service.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def service_code(self):
        """Gets the service_code of this Service.

        service code

        :return: The service_code of this Service.
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this Service.

        service code

        :param service_code: The service_code of this Service.
        :type service_code: str
        """
        if service_code is not None and len(service_code) < 1:
            raise ValueError("Invalid value for `service_code`, length must be greater than or equal to `1`")

        self._service_code = service_code
