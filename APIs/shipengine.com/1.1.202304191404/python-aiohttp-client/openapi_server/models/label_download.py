# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabelDownload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, pdf: str=None, png: str=None, zpl: str=None):
        """LabelDownload - a model defined in OpenAPI

        :param href: The href of this LabelDownload.
        :param pdf: The pdf of this LabelDownload.
        :param png: The png of this LabelDownload.
        :param zpl: The zpl of this LabelDownload.
        """
        self.openapi_types = {
            'href': str,
            'pdf': str,
            'png': str,
            'zpl': str
        }

        self.attribute_map = {
            'href': 'href',
            'pdf': 'pdf',
            'png': 'png',
            'zpl': 'zpl'
        }

        self._href = href
        self._pdf = pdf
        self._png = png
        self._zpl = zpl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelDownload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The label_download of this LabelDownload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this LabelDownload.

        The URL of the linked resource, if any

        :return: The href of this LabelDownload.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this LabelDownload.

        The URL of the linked resource, if any

        :param href: The href of this LabelDownload.
        :type href: str
        """
        if href is not None and len(href) < 1:
            raise ValueError("Invalid value for `href`, length must be greater than or equal to `1`")

        self._href = href

    @property
    def pdf(self):
        """Gets the pdf of this LabelDownload.

        The URL for the pdf generated label

        :return: The pdf of this LabelDownload.
        :rtype: str
        """
        return self._pdf

    @pdf.setter
    def pdf(self, pdf):
        """Sets the pdf of this LabelDownload.

        The URL for the pdf generated label

        :param pdf: The pdf of this LabelDownload.
        :type pdf: str
        """
        if pdf is not None and len(pdf) < 1:
            raise ValueError("Invalid value for `pdf`, length must be greater than or equal to `1`")

        self._pdf = pdf

    @property
    def png(self):
        """Gets the png of this LabelDownload.

        The URL for the png generated label

        :return: The png of this LabelDownload.
        :rtype: str
        """
        return self._png

    @png.setter
    def png(self, png):
        """Sets the png of this LabelDownload.

        The URL for the png generated label

        :param png: The png of this LabelDownload.
        :type png: str
        """
        if png is not None and len(png) < 1:
            raise ValueError("Invalid value for `png`, length must be greater than or equal to `1`")

        self._png = png

    @property
    def zpl(self):
        """Gets the zpl of this LabelDownload.

        The URL for the zpl generated label

        :return: The zpl of this LabelDownload.
        :rtype: str
        """
        return self._zpl

    @zpl.setter
    def zpl(self, zpl):
        """Sets the zpl of this LabelDownload.

        The URL for the zpl generated label

        :param zpl: The zpl of this LabelDownload.
        :type zpl: str
        """
        if zpl is not None and len(zpl) < 1:
            raise ValueError("Invalid value for `zpl`, length must be greater than or equal to `1`")

        self._zpl = zpl
