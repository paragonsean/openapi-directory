# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_manifest_by_object_request_body import CreateManifestByObjectRequestBody
from openapi_server.models.create_manifest_label_ids_request_body import CreateManifestLabelIdsRequestBody
import re
from openapi_server import util


class CreateManifestRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_id: str=None, excluded_label_ids: List[str]=None, label_ids: List[str]=None, ship_date: datetime=None, warehouse_id: str=None):
        """CreateManifestRequestBody - a model defined in OpenAPI

        :param carrier_id: The carrier_id of this CreateManifestRequestBody.
        :param excluded_label_ids: The excluded_label_ids of this CreateManifestRequestBody.
        :param label_ids: The label_ids of this CreateManifestRequestBody.
        :param ship_date: The ship_date of this CreateManifestRequestBody.
        :param warehouse_id: The warehouse_id of this CreateManifestRequestBody.
        """
        self.openapi_types = {
            'carrier_id': str,
            'excluded_label_ids': List[str],
            'label_ids': List[str],
            'ship_date': datetime,
            'warehouse_id': str
        }

        self.attribute_map = {
            'carrier_id': 'carrier_id',
            'excluded_label_ids': 'excluded_label_ids',
            'label_ids': 'label_ids',
            'ship_date': 'ship_date',
            'warehouse_id': 'warehouse_id'
        }

        self._carrier_id = carrier_id
        self._excluded_label_ids = excluded_label_ids
        self._label_ids = label_ids
        self._ship_date = ship_date
        self._warehouse_id = warehouse_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateManifestRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_manifest_request_body of this CreateManifestRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CreateManifestRequestBody.

        A string that uniquely identifies the carrier

        :return: The carrier_id of this CreateManifestRequestBody.
        :rtype: str
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CreateManifestRequestBody.

        A string that uniquely identifies the carrier

        :param carrier_id: The carrier_id of this CreateManifestRequestBody.
        :type carrier_id: str
        """
        if carrier_id is None:
            raise ValueError("Invalid value for `carrier_id`, must not be `None`")
        if carrier_id is not None and len(carrier_id) > 25:
            raise ValueError("Invalid value for `carrier_id`, length must be less than or equal to `25`")
        if carrier_id is not None and len(carrier_id) < 1:
            raise ValueError("Invalid value for `carrier_id`, length must be greater than or equal to `1`")
        if carrier_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', carrier_id):
            raise ValueError("Invalid value for `carrier_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._carrier_id = carrier_id

    @property
    def excluded_label_ids(self):
        """Gets the excluded_label_ids of this CreateManifestRequestBody.

        The list of label ids to exclude from the manifest

        :return: The excluded_label_ids of this CreateManifestRequestBody.
        :rtype: List[str]
        """
        return self._excluded_label_ids

    @excluded_label_ids.setter
    def excluded_label_ids(self, excluded_label_ids):
        """Sets the excluded_label_ids of this CreateManifestRequestBody.

        The list of label ids to exclude from the manifest

        :param excluded_label_ids: The excluded_label_ids of this CreateManifestRequestBody.
        :type excluded_label_ids: List[str]
        """

        self._excluded_label_ids = excluded_label_ids

    @property
    def label_ids(self):
        """Gets the label_ids of this CreateManifestRequestBody.

        The list of label ids to include in the manifest

        :return: The label_ids of this CreateManifestRequestBody.
        :rtype: List[str]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this CreateManifestRequestBody.

        The list of label ids to include in the manifest

        :param label_ids: The label_ids of this CreateManifestRequestBody.
        :type label_ids: List[str]
        """
        if label_ids is None:
            raise ValueError("Invalid value for `label_ids`, must not be `None`")

        self._label_ids = label_ids

    @property
    def ship_date(self):
        """Gets the ship_date of this CreateManifestRequestBody.

        The ship date that the shipment will be sent out on

        :return: The ship_date of this CreateManifestRequestBody.
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this CreateManifestRequestBody.

        The ship date that the shipment will be sent out on

        :param ship_date: The ship_date of this CreateManifestRequestBody.
        :type ship_date: datetime
        """
        if ship_date is None:
            raise ValueError("Invalid value for `ship_date`, must not be `None`")
        if ship_date is not None and len(ship_date) < 1:
            raise ValueError("Invalid value for `ship_date`, length must be greater than or equal to `1`")

        self._ship_date = ship_date

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this CreateManifestRequestBody.

        A string that uniquely identifies the warehouse

        :return: The warehouse_id of this CreateManifestRequestBody.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this CreateManifestRequestBody.

        A string that uniquely identifies the warehouse

        :param warehouse_id: The warehouse_id of this CreateManifestRequestBody.
        :type warehouse_id: str
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")
        if warehouse_id is not None and len(warehouse_id) > 25:
            raise ValueError("Invalid value for `warehouse_id`, length must be less than or equal to `25`")
        if warehouse_id is not None and len(warehouse_id) < 1:
            raise ValueError("Invalid value for `warehouse_id`, length must be greater than or equal to `1`")
        if warehouse_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', warehouse_id):
            raise ValueError("Invalid value for `warehouse_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._warehouse_id = warehouse_id
