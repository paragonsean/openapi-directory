# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectRoyalMailRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, city: str=None, company_name: str=None, contact_name: str=None, email: str=None, nickname: str=None, oba_email: str=None, phone: str=None, postal_code: str=None, street_line1: str=None, street_line2: str=None, street_line3: str=None):
        """ConnectRoyalMailRequestBody - a model defined in OpenAPI

        :param account_number: The account_number of this ConnectRoyalMailRequestBody.
        :param city: The city of this ConnectRoyalMailRequestBody.
        :param company_name: The company_name of this ConnectRoyalMailRequestBody.
        :param contact_name: The contact_name of this ConnectRoyalMailRequestBody.
        :param email: The email of this ConnectRoyalMailRequestBody.
        :param nickname: The nickname of this ConnectRoyalMailRequestBody.
        :param oba_email: The oba_email of this ConnectRoyalMailRequestBody.
        :param phone: The phone of this ConnectRoyalMailRequestBody.
        :param postal_code: The postal_code of this ConnectRoyalMailRequestBody.
        :param street_line1: The street_line1 of this ConnectRoyalMailRequestBody.
        :param street_line2: The street_line2 of this ConnectRoyalMailRequestBody.
        :param street_line3: The street_line3 of this ConnectRoyalMailRequestBody.
        """
        self.openapi_types = {
            'account_number': str,
            'city': str,
            'company_name': str,
            'contact_name': str,
            'email': str,
            'nickname': str,
            'oba_email': str,
            'phone': str,
            'postal_code': str,
            'street_line1': str,
            'street_line2': str,
            'street_line3': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'city': 'city',
            'company_name': 'company_name',
            'contact_name': 'contact_name',
            'email': 'email',
            'nickname': 'nickname',
            'oba_email': 'oba_email',
            'phone': 'phone',
            'postal_code': 'postal_code',
            'street_line1': 'street_line1',
            'street_line2': 'street_line2',
            'street_line3': 'street_line3'
        }

        self._account_number = account_number
        self._city = city
        self._company_name = company_name
        self._contact_name = contact_name
        self._email = email
        self._nickname = nickname
        self._oba_email = oba_email
        self._phone = phone
        self._postal_code = postal_code
        self._street_line1 = street_line1
        self._street_line2 = street_line2
        self._street_line3 = street_line3

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectRoyalMailRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_royal_mail_request_body of this ConnectRoyalMailRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this ConnectRoyalMailRequestBody.

        Account number

        :return: The account_number of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ConnectRoyalMailRequestBody.

        Account number

        :param account_number: The account_number of this ConnectRoyalMailRequestBody.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def city(self):
        """Gets the city of this ConnectRoyalMailRequestBody.

        City

        :return: The city of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ConnectRoyalMailRequestBody.

        City

        :param city: The city of this ConnectRoyalMailRequestBody.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and len(city) < 1:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `1`")

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this ConnectRoyalMailRequestBody.

        Company name

        :return: The company_name of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ConnectRoyalMailRequestBody.

        Company name

        :param company_name: The company_name of this ConnectRoyalMailRequestBody.
        :type company_name: str
        """
        if company_name is not None and len(company_name) < 1:
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `1`")

        self._company_name = company_name

    @property
    def contact_name(self):
        """Gets the contact_name of this ConnectRoyalMailRequestBody.

        Contact name

        :return: The contact_name of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this ConnectRoyalMailRequestBody.

        Contact name

        :param contact_name: The contact_name of this ConnectRoyalMailRequestBody.
        :type contact_name: str
        """
        if contact_name is None:
            raise ValueError("Invalid value for `contact_name`, must not be `None`")
        if contact_name is not None and len(contact_name) < 1:
            raise ValueError("Invalid value for `contact_name`, length must be greater than or equal to `1`")

        self._contact_name = contact_name

    @property
    def email(self):
        """Gets the email of this ConnectRoyalMailRequestBody.

        The email address

        :return: The email of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ConnectRoyalMailRequestBody.

        The email address

        :param email: The email of this ConnectRoyalMailRequestBody.
        :type email: str
        """
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def nickname(self):
        """Gets the nickname of this ConnectRoyalMailRequestBody.

        Nickname

        :return: The nickname of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectRoyalMailRequestBody.

        Nickname

        :param nickname: The nickname of this ConnectRoyalMailRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def oba_email(self):
        """Gets the oba_email of this ConnectRoyalMailRequestBody.

        The oba email address

        :return: The oba_email of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._oba_email

    @oba_email.setter
    def oba_email(self, oba_email):
        """Sets the oba_email of this ConnectRoyalMailRequestBody.

        The oba email address

        :param oba_email: The oba_email of this ConnectRoyalMailRequestBody.
        :type oba_email: str
        """
        if oba_email is not None and len(oba_email) < 1:
            raise ValueError("Invalid value for `oba_email`, length must be greater than or equal to `1`")

        self._oba_email = oba_email

    @property
    def phone(self):
        """Gets the phone of this ConnectRoyalMailRequestBody.

        Phone

        :return: The phone of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ConnectRoyalMailRequestBody.

        Phone

        :param phone: The phone of this ConnectRoyalMailRequestBody.
        :type phone: str
        """
        if phone is not None and len(phone) < 1:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `1`")

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this ConnectRoyalMailRequestBody.

        Postal code

        :return: The postal_code of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ConnectRoyalMailRequestBody.

        Postal code

        :param postal_code: The postal_code of this ConnectRoyalMailRequestBody.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")
        if postal_code is not None and len(postal_code) < 1:
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `1`")

        self._postal_code = postal_code

    @property
    def street_line1(self):
        """Gets the street_line1 of this ConnectRoyalMailRequestBody.

        Street line1

        :return: The street_line1 of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._street_line1

    @street_line1.setter
    def street_line1(self, street_line1):
        """Sets the street_line1 of this ConnectRoyalMailRequestBody.

        Street line1

        :param street_line1: The street_line1 of this ConnectRoyalMailRequestBody.
        :type street_line1: str
        """
        if street_line1 is not None and len(street_line1) < 1:
            raise ValueError("Invalid value for `street_line1`, length must be greater than or equal to `1`")

        self._street_line1 = street_line1

    @property
    def street_line2(self):
        """Gets the street_line2 of this ConnectRoyalMailRequestBody.

        Street line2

        :return: The street_line2 of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._street_line2

    @street_line2.setter
    def street_line2(self, street_line2):
        """Sets the street_line2 of this ConnectRoyalMailRequestBody.

        Street line2

        :param street_line2: The street_line2 of this ConnectRoyalMailRequestBody.
        :type street_line2: str
        """
        if street_line2 is not None and len(street_line2) < 1:
            raise ValueError("Invalid value for `street_line2`, length must be greater than or equal to `1`")

        self._street_line2 = street_line2

    @property
    def street_line3(self):
        """Gets the street_line3 of this ConnectRoyalMailRequestBody.

        Street line3

        :return: The street_line3 of this ConnectRoyalMailRequestBody.
        :rtype: str
        """
        return self._street_line3

    @street_line3.setter
    def street_line3(self, street_line3):
        """Sets the street_line3 of this ConnectRoyalMailRequestBody.

        Street line3

        :param street_line3: The street_line3 of this ConnectRoyalMailRequestBody.
        :type street_line3: str
        """
        if street_line3 is not None and len(street_line3) < 1:
            raise ValueError("Invalid value for `street_line3`, length must be greater than or equal to `1`")

        self._street_line3 = street_line3
