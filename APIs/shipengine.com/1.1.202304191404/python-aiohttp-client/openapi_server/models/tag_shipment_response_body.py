# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class TagShipmentResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shipment_id: str=None, tag: Tag=None):
        """TagShipmentResponseBody - a model defined in OpenAPI

        :param shipment_id: The shipment_id of this TagShipmentResponseBody.
        :param tag: The tag of this TagShipmentResponseBody.
        """
        self.openapi_types = {
            'shipment_id': str,
            'tag': Tag
        }

        self.attribute_map = {
            'shipment_id': 'shipment_id',
            'tag': 'tag'
        }

        self._shipment_id = shipment_id
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagShipmentResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tag_shipment_response_body of this TagShipmentResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shipment_id(self):
        """Gets the shipment_id of this TagShipmentResponseBody.

        A string that uniquely identifies the shipment

        :return: The shipment_id of this TagShipmentResponseBody.
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this TagShipmentResponseBody.

        A string that uniquely identifies the shipment

        :param shipment_id: The shipment_id of this TagShipmentResponseBody.
        :type shipment_id: str
        """
        if shipment_id is None:
            raise ValueError("Invalid value for `shipment_id`, must not be `None`")
        if shipment_id is not None and len(shipment_id) > 25:
            raise ValueError("Invalid value for `shipment_id`, length must be less than or equal to `25`")
        if shipment_id is not None and len(shipment_id) < 1:
            raise ValueError("Invalid value for `shipment_id`, length must be greater than or equal to `1`")
        if shipment_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', shipment_id):
            raise ValueError("Invalid value for `shipment_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._shipment_id = shipment_id

    @property
    def tag(self):
        """Gets the tag of this TagShipmentResponseBody.

        The tag that is now associated with this shipment

        :return: The tag of this TagShipmentResponseBody.
        :rtype: Tag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this TagShipmentResponseBody.

        The tag that is now associated with this shipment

        :param tag: The tag of this TagShipmentResponseBody.
        :type tag: Tag
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")

        self._tag = tag
