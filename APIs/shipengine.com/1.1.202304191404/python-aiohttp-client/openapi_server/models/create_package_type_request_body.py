# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimensions import Dimensions
import re
from openapi_server import util


class CreatePackageTypeRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, dimensions: Dimensions=None, name: str=None, package_code: str=None, package_id: str=None):
        """CreatePackageTypeRequestBody - a model defined in OpenAPI

        :param description: The description of this CreatePackageTypeRequestBody.
        :param dimensions: The dimensions of this CreatePackageTypeRequestBody.
        :param name: The name of this CreatePackageTypeRequestBody.
        :param package_code: The package_code of this CreatePackageTypeRequestBody.
        :param package_id: The package_id of this CreatePackageTypeRequestBody.
        """
        self.openapi_types = {
            'description': str,
            'dimensions': Dimensions,
            'name': str,
            'package_code': str,
            'package_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'dimensions': 'dimensions',
            'name': 'name',
            'package_code': 'package_code',
            'package_id': 'package_id'
        }

        self._description = description
        self._dimensions = dimensions
        self._name = name
        self._package_code = package_code
        self._package_id = package_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePackageTypeRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_package_type_request_body of this CreatePackageTypeRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreatePackageTypeRequestBody.

        Provides a helpful description for the custom package.

        :return: The description of this CreatePackageTypeRequestBody.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePackageTypeRequestBody.

        Provides a helpful description for the custom package.

        :param description: The description of this CreatePackageTypeRequestBody.
        :type description: str
        """

        self._description = description

    @property
    def dimensions(self):
        """Gets the dimensions of this CreatePackageTypeRequestBody.

        The custom dimensions for the package.

        :return: The dimensions of this CreatePackageTypeRequestBody.
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this CreatePackageTypeRequestBody.

        The custom dimensions for the package.

        :param dimensions: The dimensions of this CreatePackageTypeRequestBody.
        :type dimensions: Dimensions
        """

        self._dimensions = dimensions

    @property
    def name(self):
        """Gets the name of this CreatePackageTypeRequestBody.


        :return: The name of this CreatePackageTypeRequestBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePackageTypeRequestBody.


        :param name: The name of this CreatePackageTypeRequestBody.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def package_code(self):
        """Gets the package_code of this CreatePackageTypeRequestBody.

        A [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  Use the code `package` for custom or unknown package types. 

        :return: The package_code of this CreatePackageTypeRequestBody.
        :rtype: str
        """
        return self._package_code

    @package_code.setter
    def package_code(self, package_code):
        """Sets the package_code of this CreatePackageTypeRequestBody.

        A [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  Use the code `package` for custom or unknown package types. 

        :param package_code: The package_code of this CreatePackageTypeRequestBody.
        :type package_code: str
        """
        if package_code is None:
            raise ValueError("Invalid value for `package_code`, must not be `None`")
        if package_code is not None and not re.search(r'^[a-z0-9]+(_[a-z0-9]+)*$', package_code):
            raise ValueError("Invalid value for `package_code`, must be a follow pattern or equal to `/^[a-z0-9]+(_[a-z0-9]+)*$/`")

        self._package_code = package_code

    @property
    def package_id(self):
        """Gets the package_id of this CreatePackageTypeRequestBody.

        A string that uniquely identifies the package.

        :return: The package_id of this CreatePackageTypeRequestBody.
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this CreatePackageTypeRequestBody.

        A string that uniquely identifies the package.

        :param package_id: The package_id of this CreatePackageTypeRequestBody.
        :type package_id: str
        """
        if package_id is not None and len(package_id) > 25:
            raise ValueError("Invalid value for `package_id`, length must be less than or equal to `25`")
        if package_id is not None and len(package_id) < 1:
            raise ValueError("Invalid value for `package_id`, length must be greater than or equal to `1`")
        if package_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', package_id):
            raise ValueError("Invalid value for `package_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._package_id = package_id
