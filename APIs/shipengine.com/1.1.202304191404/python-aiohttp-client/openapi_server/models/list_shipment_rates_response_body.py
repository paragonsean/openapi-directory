# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.rate import Rate
from openapi_server.models.rate_response_status import RateResponseStatus
import re
from openapi_server import util


class ListShipmentRatesResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, errors: List[Error]=None, invalid_rates: List[Rate]=[], rate_request_id: str=None, rates: List[Rate]=None, shipment_id: str=None, status: RateResponseStatus=None):
        """ListShipmentRatesResponseBody - a model defined in OpenAPI

        :param created_at: The created_at of this ListShipmentRatesResponseBody.
        :param errors: The errors of this ListShipmentRatesResponseBody.
        :param invalid_rates: The invalid_rates of this ListShipmentRatesResponseBody.
        :param rate_request_id: The rate_request_id of this ListShipmentRatesResponseBody.
        :param rates: The rates of this ListShipmentRatesResponseBody.
        :param shipment_id: The shipment_id of this ListShipmentRatesResponseBody.
        :param status: The status of this ListShipmentRatesResponseBody.
        """
        self.openapi_types = {
            'created_at': str,
            'errors': List[Error],
            'invalid_rates': List[Rate],
            'rate_request_id': str,
            'rates': List[Rate],
            'shipment_id': str,
            'status': RateResponseStatus
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'errors': 'errors',
            'invalid_rates': 'invalid_rates',
            'rate_request_id': 'rate_request_id',
            'rates': 'rates',
            'shipment_id': 'shipment_id',
            'status': 'status'
        }

        self._created_at = created_at
        self._errors = errors
        self._invalid_rates = invalid_rates
        self._rate_request_id = rate_request_id
        self._rates = rates
        self._shipment_id = shipment_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListShipmentRatesResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The list_shipment_rates_response_body of this ListShipmentRatesResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ListShipmentRatesResponseBody.

        When the rate was created

        :return: The created_at of this ListShipmentRatesResponseBody.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ListShipmentRatesResponseBody.

        When the rate was created

        :param created_at: The created_at of this ListShipmentRatesResponseBody.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")
        if created_at is not None and len(created_at) > 25:
            raise ValueError("Invalid value for `created_at`, length must be less than or equal to `25`")
        if created_at is not None and len(created_at) < 1:
            raise ValueError("Invalid value for `created_at`, length must be greater than or equal to `1`")
        if created_at is not None and not re.search(r'^se(-[a-z0-9]+)+$', created_at):
            raise ValueError("Invalid value for `created_at`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._created_at = created_at

    @property
    def errors(self):
        """Gets the errors of this ListShipmentRatesResponseBody.


        :return: The errors of this ListShipmentRatesResponseBody.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ListShipmentRatesResponseBody.


        :param errors: The errors of this ListShipmentRatesResponseBody.
        :type errors: List[Error]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def invalid_rates(self):
        """Gets the invalid_rates of this ListShipmentRatesResponseBody.

        An array of invalid shipment rates

        :return: The invalid_rates of this ListShipmentRatesResponseBody.
        :rtype: List[Rate]
        """
        return self._invalid_rates

    @invalid_rates.setter
    def invalid_rates(self, invalid_rates):
        """Sets the invalid_rates of this ListShipmentRatesResponseBody.

        An array of invalid shipment rates

        :param invalid_rates: The invalid_rates of this ListShipmentRatesResponseBody.
        :type invalid_rates: List[Rate]
        """
        if invalid_rates is None:
            raise ValueError("Invalid value for `invalid_rates`, must not be `None`")

        self._invalid_rates = invalid_rates

    @property
    def rate_request_id(self):
        """Gets the rate_request_id of this ListShipmentRatesResponseBody.

        A string that uniquely identifies the rate request

        :return: The rate_request_id of this ListShipmentRatesResponseBody.
        :rtype: str
        """
        return self._rate_request_id

    @rate_request_id.setter
    def rate_request_id(self, rate_request_id):
        """Sets the rate_request_id of this ListShipmentRatesResponseBody.

        A string that uniquely identifies the rate request

        :param rate_request_id: The rate_request_id of this ListShipmentRatesResponseBody.
        :type rate_request_id: str
        """
        if rate_request_id is None:
            raise ValueError("Invalid value for `rate_request_id`, must not be `None`")
        if rate_request_id is not None and len(rate_request_id) > 25:
            raise ValueError("Invalid value for `rate_request_id`, length must be less than or equal to `25`")
        if rate_request_id is not None and len(rate_request_id) < 1:
            raise ValueError("Invalid value for `rate_request_id`, length must be greater than or equal to `1`")
        if rate_request_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', rate_request_id):
            raise ValueError("Invalid value for `rate_request_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._rate_request_id = rate_request_id

    @property
    def rates(self):
        """Gets the rates of this ListShipmentRatesResponseBody.

        An array of shipment rates

        :return: The rates of this ListShipmentRatesResponseBody.
        :rtype: List[Rate]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this ListShipmentRatesResponseBody.

        An array of shipment rates

        :param rates: The rates of this ListShipmentRatesResponseBody.
        :type rates: List[Rate]
        """
        if rates is None:
            raise ValueError("Invalid value for `rates`, must not be `None`")

        self._rates = rates

    @property
    def shipment_id(self):
        """Gets the shipment_id of this ListShipmentRatesResponseBody.

        A string that uniquely identifies the shipment

        :return: The shipment_id of this ListShipmentRatesResponseBody.
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this ListShipmentRatesResponseBody.

        A string that uniquely identifies the shipment

        :param shipment_id: The shipment_id of this ListShipmentRatesResponseBody.
        :type shipment_id: str
        """
        if shipment_id is None:
            raise ValueError("Invalid value for `shipment_id`, must not be `None`")
        if shipment_id is not None and len(shipment_id) > 25:
            raise ValueError("Invalid value for `shipment_id`, length must be less than or equal to `25`")
        if shipment_id is not None and len(shipment_id) < 1:
            raise ValueError("Invalid value for `shipment_id`, length must be greater than or equal to `1`")
        if shipment_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', shipment_id):
            raise ValueError("Invalid value for `shipment_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._shipment_id = shipment_id

    @property
    def status(self):
        """Gets the status of this ListShipmentRatesResponseBody.


        :return: The status of this ListShipmentRatesResponseBody.
        :rtype: RateResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListShipmentRatesResponseBody.


        :param status: The status of this ListShipmentRatesResponseBody.
        :type status: RateResponseStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
