# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ancillary_service_endorsement import AncillaryServiceEndorsement
from openapi_server import util


class ConnectDhlEcommerceRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, ancillary_endorsement: AncillaryServiceEndorsement=None, api_key: str=None, api_secret: str=None, client_id: str=None, distribution_center: str=None, ftp_password: str=None, ftp_username: str=None, nickname: str=None, password: str=None, pickup_number: str=None, registration_id: str=None, software_name: str=None, sold_to: str=None, username: str=None):
        """ConnectDhlEcommerceRequestBody - a model defined in OpenAPI

        :param account_number: The account_number of this ConnectDhlEcommerceRequestBody.
        :param ancillary_endorsement: The ancillary_endorsement of this ConnectDhlEcommerceRequestBody.
        :param api_key: The api_key of this ConnectDhlEcommerceRequestBody.
        :param api_secret: The api_secret of this ConnectDhlEcommerceRequestBody.
        :param client_id: The client_id of this ConnectDhlEcommerceRequestBody.
        :param distribution_center: The distribution_center of this ConnectDhlEcommerceRequestBody.
        :param ftp_password: The ftp_password of this ConnectDhlEcommerceRequestBody.
        :param ftp_username: The ftp_username of this ConnectDhlEcommerceRequestBody.
        :param nickname: The nickname of this ConnectDhlEcommerceRequestBody.
        :param password: The password of this ConnectDhlEcommerceRequestBody.
        :param pickup_number: The pickup_number of this ConnectDhlEcommerceRequestBody.
        :param registration_id: The registration_id of this ConnectDhlEcommerceRequestBody.
        :param software_name: The software_name of this ConnectDhlEcommerceRequestBody.
        :param sold_to: The sold_to of this ConnectDhlEcommerceRequestBody.
        :param username: The username of this ConnectDhlEcommerceRequestBody.
        """
        self.openapi_types = {
            'account_number': str,
            'ancillary_endorsement': AncillaryServiceEndorsement,
            'api_key': str,
            'api_secret': str,
            'client_id': str,
            'distribution_center': str,
            'ftp_password': str,
            'ftp_username': str,
            'nickname': str,
            'password': str,
            'pickup_number': str,
            'registration_id': str,
            'software_name': str,
            'sold_to': str,
            'username': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'ancillary_endorsement': 'ancillary_endorsement',
            'api_key': 'api_key',
            'api_secret': 'api_secret',
            'client_id': 'client_id',
            'distribution_center': 'distribution_center',
            'ftp_password': 'ftp_password',
            'ftp_username': 'ftp_username',
            'nickname': 'nickname',
            'password': 'password',
            'pickup_number': 'pickup_number',
            'registration_id': 'registration_id',
            'software_name': 'software_name',
            'sold_to': 'sold_to',
            'username': 'username'
        }

        self._account_number = account_number
        self._ancillary_endorsement = ancillary_endorsement
        self._api_key = api_key
        self._api_secret = api_secret
        self._client_id = client_id
        self._distribution_center = distribution_center
        self._ftp_password = ftp_password
        self._ftp_username = ftp_username
        self._nickname = nickname
        self._password = password
        self._pickup_number = pickup_number
        self._registration_id = registration_id
        self._software_name = software_name
        self._sold_to = sold_to
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectDhlEcommerceRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_dhl_ecommerce_request_body of this ConnectDhlEcommerceRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this ConnectDhlEcommerceRequestBody.

        Account number

        :return: The account_number of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ConnectDhlEcommerceRequestBody.

        Account number

        :param account_number: The account_number of this ConnectDhlEcommerceRequestBody.
        :type account_number: str
        """
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def ancillary_endorsement(self):
        """Gets the ancillary_endorsement of this ConnectDhlEcommerceRequestBody.


        :return: The ancillary_endorsement of this ConnectDhlEcommerceRequestBody.
        :rtype: AncillaryServiceEndorsement
        """
        return self._ancillary_endorsement

    @ancillary_endorsement.setter
    def ancillary_endorsement(self, ancillary_endorsement):
        """Sets the ancillary_endorsement of this ConnectDhlEcommerceRequestBody.


        :param ancillary_endorsement: The ancillary_endorsement of this ConnectDhlEcommerceRequestBody.
        :type ancillary_endorsement: AncillaryServiceEndorsement
        """

        self._ancillary_endorsement = ancillary_endorsement

    @property
    def api_key(self):
        """Gets the api_key of this ConnectDhlEcommerceRequestBody.

        The DHL E-Commerce API key. This field is optional, but if not set you will not be able to get rates for this account. 

        :return: The api_key of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ConnectDhlEcommerceRequestBody.

        The DHL E-Commerce API key. This field is optional, but if not set you will not be able to get rates for this account. 

        :param api_key: The api_key of this ConnectDhlEcommerceRequestBody.
        :type api_key: str
        """
        if api_key is not None and len(api_key) < 1:
            raise ValueError("Invalid value for `api_key`, length must be greater than or equal to `1`")

        self._api_key = api_key

    @property
    def api_secret(self):
        """Gets the api_secret of this ConnectDhlEcommerceRequestBody.

        The DHL E-Commerce API secret. This field is optional, but if not set you will not be able to get rates for this account. 

        :return: The api_secret of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._api_secret

    @api_secret.setter
    def api_secret(self, api_secret):
        """Sets the api_secret of this ConnectDhlEcommerceRequestBody.

        The DHL E-Commerce API secret. This field is optional, but if not set you will not be able to get rates for this account. 

        :param api_secret: The api_secret of this ConnectDhlEcommerceRequestBody.
        :type api_secret: str
        """
        if api_secret is not None and len(api_secret) < 1:
            raise ValueError("Invalid value for `api_secret`, length must be greater than or equal to `1`")

        self._api_secret = api_secret

    @property
    def client_id(self):
        """Gets the client_id of this ConnectDhlEcommerceRequestBody.

        The client id

        :return: The client_id of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ConnectDhlEcommerceRequestBody.

        The client id

        :param client_id: The client_id of this ConnectDhlEcommerceRequestBody.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")
        if client_id is not None and len(client_id) < 1:
            raise ValueError("Invalid value for `client_id`, length must be greater than or equal to `1`")

        self._client_id = client_id

    @property
    def distribution_center(self):
        """Gets the distribution_center of this ConnectDhlEcommerceRequestBody.

        The distribution center

        :return: The distribution_center of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._distribution_center

    @distribution_center.setter
    def distribution_center(self, distribution_center):
        """Sets the distribution_center of this ConnectDhlEcommerceRequestBody.

        The distribution center

        :param distribution_center: The distribution_center of this ConnectDhlEcommerceRequestBody.
        :type distribution_center: str
        """
        if distribution_center is None:
            raise ValueError("Invalid value for `distribution_center`, must not be `None`")
        if distribution_center is not None and len(distribution_center) < 1:
            raise ValueError("Invalid value for `distribution_center`, length must be greater than or equal to `1`")

        self._distribution_center = distribution_center

    @property
    def ftp_password(self):
        """Gets the ftp_password of this ConnectDhlEcommerceRequestBody.

        FTP password

        :return: The ftp_password of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._ftp_password

    @ftp_password.setter
    def ftp_password(self, ftp_password):
        """Sets the ftp_password of this ConnectDhlEcommerceRequestBody.

        FTP password

        :param ftp_password: The ftp_password of this ConnectDhlEcommerceRequestBody.
        :type ftp_password: str
        """
        if ftp_password is not None and len(ftp_password) < 1:
            raise ValueError("Invalid value for `ftp_password`, length must be greater than or equal to `1`")

        self._ftp_password = ftp_password

    @property
    def ftp_username(self):
        """Gets the ftp_username of this ConnectDhlEcommerceRequestBody.

        FTP username

        :return: The ftp_username of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._ftp_username

    @ftp_username.setter
    def ftp_username(self, ftp_username):
        """Sets the ftp_username of this ConnectDhlEcommerceRequestBody.

        FTP username

        :param ftp_username: The ftp_username of this ConnectDhlEcommerceRequestBody.
        :type ftp_username: str
        """
        if ftp_username is not None and len(ftp_username) < 1:
            raise ValueError("Invalid value for `ftp_username`, length must be greater than or equal to `1`")

        self._ftp_username = ftp_username

    @property
    def nickname(self):
        """Gets the nickname of this ConnectDhlEcommerceRequestBody.

        A nickname to help you identify this account

        :return: The nickname of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectDhlEcommerceRequestBody.

        A nickname to help you identify this account

        :param nickname: The nickname of this ConnectDhlEcommerceRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def password(self):
        """Gets the password of this ConnectDhlEcommerceRequestBody.

        The account password

        :return: The password of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConnectDhlEcommerceRequestBody.

        The account password

        :param password: The password of this ConnectDhlEcommerceRequestBody.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")

        self._password = password

    @property
    def pickup_number(self):
        """Gets the pickup_number of this ConnectDhlEcommerceRequestBody.

        The pickup number

        :return: The pickup_number of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._pickup_number

    @pickup_number.setter
    def pickup_number(self, pickup_number):
        """Sets the pickup_number of this ConnectDhlEcommerceRequestBody.

        The pickup number

        :param pickup_number: The pickup_number of this ConnectDhlEcommerceRequestBody.
        :type pickup_number: str
        """
        if pickup_number is None:
            raise ValueError("Invalid value for `pickup_number`, must not be `None`")
        if pickup_number is not None and len(pickup_number) < 1:
            raise ValueError("Invalid value for `pickup_number`, length must be greater than or equal to `1`")

        self._pickup_number = pickup_number

    @property
    def registration_id(self):
        """Gets the registration_id of this ConnectDhlEcommerceRequestBody.


        :return: The registration_id of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this ConnectDhlEcommerceRequestBody.


        :param registration_id: The registration_id of this ConnectDhlEcommerceRequestBody.
        :type registration_id: str
        """

        self._registration_id = registration_id

    @property
    def software_name(self):
        """Gets the software_name of this ConnectDhlEcommerceRequestBody.


        :return: The software_name of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._software_name

    @software_name.setter
    def software_name(self, software_name):
        """Sets the software_name of this ConnectDhlEcommerceRequestBody.


        :param software_name: The software_name of this ConnectDhlEcommerceRequestBody.
        :type software_name: str
        """

        self._software_name = software_name

    @property
    def sold_to(self):
        """Gets the sold_to of this ConnectDhlEcommerceRequestBody.

        Sold To field

        :return: The sold_to of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._sold_to

    @sold_to.setter
    def sold_to(self, sold_to):
        """Sets the sold_to of this ConnectDhlEcommerceRequestBody.

        Sold To field

        :param sold_to: The sold_to of this ConnectDhlEcommerceRequestBody.
        :type sold_to: str
        """

        self._sold_to = sold_to

    @property
    def username(self):
        """Gets the username of this ConnectDhlEcommerceRequestBody.

        The account username

        :return: The username of this ConnectDhlEcommerceRequestBody.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConnectDhlEcommerceRequestBody.

        The account username

        :param username: The username of this ConnectDhlEcommerceRequestBody.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")

        self._username = username
