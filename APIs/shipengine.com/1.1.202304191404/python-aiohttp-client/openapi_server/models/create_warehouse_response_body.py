# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
import re
from openapi_server import util


class CreateWarehouseResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, is_default: bool=False, name: str=None, origin_address: Address=None, return_address: Address=None, warehouse_id: str=None):
        """CreateWarehouseResponseBody - a model defined in OpenAPI

        :param created_at: The created_at of this CreateWarehouseResponseBody.
        :param is_default: The is_default of this CreateWarehouseResponseBody.
        :param name: The name of this CreateWarehouseResponseBody.
        :param origin_address: The origin_address of this CreateWarehouseResponseBody.
        :param return_address: The return_address of this CreateWarehouseResponseBody.
        :param warehouse_id: The warehouse_id of this CreateWarehouseResponseBody.
        """
        self.openapi_types = {
            'created_at': datetime,
            'is_default': bool,
            'name': str,
            'origin_address': Address,
            'return_address': Address,
            'warehouse_id': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'is_default': 'is_default',
            'name': 'name',
            'origin_address': 'origin_address',
            'return_address': 'return_address',
            'warehouse_id': 'warehouse_id'
        }

        self._created_at = created_at
        self._is_default = is_default
        self._name = name
        self._origin_address = origin_address
        self._return_address = return_address
        self._warehouse_id = warehouse_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWarehouseResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_warehouse_response_body of this CreateWarehouseResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this CreateWarehouseResponseBody.

        Timestamp that indicates when the warehouse was created

        :return: The created_at of this CreateWarehouseResponseBody.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreateWarehouseResponseBody.

        Timestamp that indicates when the warehouse was created

        :param created_at: The created_at of this CreateWarehouseResponseBody.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")
        if created_at is not None and len(created_at) < 1:
            raise ValueError("Invalid value for `created_at`, length must be greater than or equal to `1`")

        self._created_at = created_at

    @property
    def is_default(self):
        """Gets the is_default of this CreateWarehouseResponseBody.

        Designates which single warehouse is the default on the account

        :return: The is_default of this CreateWarehouseResponseBody.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this CreateWarehouseResponseBody.

        Designates which single warehouse is the default on the account

        :param is_default: The is_default of this CreateWarehouseResponseBody.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this CreateWarehouseResponseBody.

        Name of the warehouse

        :return: The name of this CreateWarehouseResponseBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWarehouseResponseBody.

        Name of the warehouse

        :param name: The name of this CreateWarehouseResponseBody.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def origin_address(self):
        """Gets the origin_address of this CreateWarehouseResponseBody.

        The origin address of the warehouse

        :return: The origin_address of this CreateWarehouseResponseBody.
        :rtype: Address
        """
        return self._origin_address

    @origin_address.setter
    def origin_address(self, origin_address):
        """Sets the origin_address of this CreateWarehouseResponseBody.

        The origin address of the warehouse

        :param origin_address: The origin_address of this CreateWarehouseResponseBody.
        :type origin_address: Address
        """
        if origin_address is None:
            raise ValueError("Invalid value for `origin_address`, must not be `None`")

        self._origin_address = origin_address

    @property
    def return_address(self):
        """Gets the return_address of this CreateWarehouseResponseBody.

        The return address associated with the warehouse

        :return: The return_address of this CreateWarehouseResponseBody.
        :rtype: Address
        """
        return self._return_address

    @return_address.setter
    def return_address(self, return_address):
        """Sets the return_address of this CreateWarehouseResponseBody.

        The return address associated with the warehouse

        :param return_address: The return_address of this CreateWarehouseResponseBody.
        :type return_address: Address
        """
        if return_address is None:
            raise ValueError("Invalid value for `return_address`, must not be `None`")

        self._return_address = return_address

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this CreateWarehouseResponseBody.

        A string that uniquely identifies the warehouse

        :return: The warehouse_id of this CreateWarehouseResponseBody.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this CreateWarehouseResponseBody.

        A string that uniquely identifies the warehouse

        :param warehouse_id: The warehouse_id of this CreateWarehouseResponseBody.
        :type warehouse_id: str
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")
        if warehouse_id is not None and len(warehouse_id) > 25:
            raise ValueError("Invalid value for `warehouse_id`, length must be less than or equal to `25`")
        if warehouse_id is not None and len(warehouse_id) < 1:
            raise ValueError("Invalid value for `warehouse_id`, length must be greater than or equal to `1`")
        if warehouse_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', warehouse_id):
            raise ValueError("Invalid value for `warehouse_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._warehouse_id = warehouse_id
