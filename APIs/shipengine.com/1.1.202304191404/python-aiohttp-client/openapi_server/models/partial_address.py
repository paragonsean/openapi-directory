# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_residential_indicator import AddressResidentialIndicator
from openapi_server import util


class PartialAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, address_line3: str=None, address_residential_indicator: AddressResidentialIndicator=None, city_locality: str=None, company_name: str=None, country_code: str=None, email: str=None, name: str=None, phone: str=None, postal_code: str=None, state_province: str=None):
        """PartialAddress - a model defined in OpenAPI

        :param address_line1: The address_line1 of this PartialAddress.
        :param address_line2: The address_line2 of this PartialAddress.
        :param address_line3: The address_line3 of this PartialAddress.
        :param address_residential_indicator: The address_residential_indicator of this PartialAddress.
        :param city_locality: The city_locality of this PartialAddress.
        :param company_name: The company_name of this PartialAddress.
        :param country_code: The country_code of this PartialAddress.
        :param email: The email of this PartialAddress.
        :param name: The name of this PartialAddress.
        :param phone: The phone of this PartialAddress.
        :param postal_code: The postal_code of this PartialAddress.
        :param state_province: The state_province of this PartialAddress.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'address_line3': str,
            'address_residential_indicator': AddressResidentialIndicator,
            'city_locality': str,
            'company_name': str,
            'country_code': str,
            'email': str,
            'name': str,
            'phone': str,
            'postal_code': str,
            'state_province': str
        }

        self.attribute_map = {
            'address_line1': 'address_line1',
            'address_line2': 'address_line2',
            'address_line3': 'address_line3',
            'address_residential_indicator': 'address_residential_indicator',
            'city_locality': 'city_locality',
            'company_name': 'company_name',
            'country_code': 'country_code',
            'email': 'email',
            'name': 'name',
            'phone': 'phone',
            'postal_code': 'postal_code',
            'state_province': 'state_province'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_line3 = address_line3
        self._address_residential_indicator = address_residential_indicator
        self._city_locality = city_locality
        self._company_name = company_name
        self._country_code = country_code
        self._email = email
        self._name = name
        self._phone = phone
        self._postal_code = postal_code
        self._state_province = state_province

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartialAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The partial_address of this PartialAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this PartialAddress.

        The first line of the street address.  For some addresses, this may be the only line.  Other addresses may require 2 or 3 lines. 

        :return: The address_line1 of this PartialAddress.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this PartialAddress.

        The first line of the street address.  For some addresses, this may be the only line.  Other addresses may require 2 or 3 lines. 

        :param address_line1: The address_line1 of this PartialAddress.
        :type address_line1: str
        """
        if address_line1 is not None and len(address_line1) < 1:
            raise ValueError("Invalid value for `address_line1`, length must be greater than or equal to `1`")

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this PartialAddress.

        The second line of the street address.  For some addresses, this line may not be needed. 

        :return: The address_line2 of this PartialAddress.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this PartialAddress.

        The second line of the street address.  For some addresses, this line may not be needed. 

        :param address_line2: The address_line2 of this PartialAddress.
        :type address_line2: str
        """
        if address_line2 is not None and len(address_line2) < 1:
            raise ValueError("Invalid value for `address_line2`, length must be greater than or equal to `1`")

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this PartialAddress.

        The third line of the street address.  For some addresses, this line may not be needed. 

        :return: The address_line3 of this PartialAddress.
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this PartialAddress.

        The third line of the street address.  For some addresses, this line may not be needed. 

        :param address_line3: The address_line3 of this PartialAddress.
        :type address_line3: str
        """
        if address_line3 is not None and len(address_line3) < 1:
            raise ValueError("Invalid value for `address_line3`, length must be greater than or equal to `1`")

        self._address_line3 = address_line3

    @property
    def address_residential_indicator(self):
        """Gets the address_residential_indicator of this PartialAddress.

        Indicates whether this is a residential address.

        :return: The address_residential_indicator of this PartialAddress.
        :rtype: AddressResidentialIndicator
        """
        return self._address_residential_indicator

    @address_residential_indicator.setter
    def address_residential_indicator(self, address_residential_indicator):
        """Sets the address_residential_indicator of this PartialAddress.

        Indicates whether this is a residential address.

        :param address_residential_indicator: The address_residential_indicator of this PartialAddress.
        :type address_residential_indicator: AddressResidentialIndicator
        """

        self._address_residential_indicator = address_residential_indicator

    @property
    def city_locality(self):
        """Gets the city_locality of this PartialAddress.

        The name of the city or locality

        :return: The city_locality of this PartialAddress.
        :rtype: str
        """
        return self._city_locality

    @city_locality.setter
    def city_locality(self, city_locality):
        """Sets the city_locality of this PartialAddress.

        The name of the city or locality

        :param city_locality: The city_locality of this PartialAddress.
        :type city_locality: str
        """
        if city_locality is not None and len(city_locality) < 1:
            raise ValueError("Invalid value for `city_locality`, length must be greater than or equal to `1`")

        self._city_locality = city_locality

    @property
    def company_name(self):
        """Gets the company_name of this PartialAddress.

        If this is a business address, then the company name should be specified here. 

        :return: The company_name of this PartialAddress.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this PartialAddress.

        If this is a business address, then the company name should be specified here. 

        :param company_name: The company_name of this PartialAddress.
        :type company_name: str
        """
        if company_name is not None and len(company_name) < 1:
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `1`")

        self._company_name = company_name

    @property
    def country_code(self):
        """Gets the country_code of this PartialAddress.

        The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 

        :return: The country_code of this PartialAddress.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PartialAddress.

        The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 

        :param country_code: The country_code of this PartialAddress.
        :type country_code: str
        """
        if country_code is not None and len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")
        if country_code is not None and len(country_code) < 2:
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `2`")

        self._country_code = country_code

    @property
    def email(self):
        """Gets the email of this PartialAddress.

        Email for the address owner. 

        :return: The email of this PartialAddress.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PartialAddress.

        Email for the address owner. 

        :param email: The email of this PartialAddress.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this PartialAddress.

        The name of a contact person at this address.  This field may be set instead of - or in addition to - the `company_name` field. 

        :return: The name of this PartialAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PartialAddress.

        The name of a contact person at this address.  This field may be set instead of - or in addition to - the `company_name` field. 

        :param name: The name of this PartialAddress.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this PartialAddress.

        The phone number of a contact person at this address.  The format of this phone number varies depending on the country. 

        :return: The phone of this PartialAddress.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PartialAddress.

        The phone number of a contact person at this address.  The format of this phone number varies depending on the country. 

        :param phone: The phone of this PartialAddress.
        :type phone: str
        """
        if phone is not None and len(phone) < 1:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `1`")

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this PartialAddress.

        postal code

        :return: The postal_code of this PartialAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this PartialAddress.

        postal code

        :param postal_code: The postal_code of this PartialAddress.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) < 1:
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `1`")

        self._postal_code = postal_code

    @property
    def state_province(self):
        """Gets the state_province of this PartialAddress.

        The state or province.  For some countries (including the U.S.) only abbreviations are allowed.  Other countries allow the full name or abbreviation. 

        :return: The state_province of this PartialAddress.
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this PartialAddress.

        The state or province.  For some countries (including the U.S.) only abbreviations are allowed.  Other countries allow the full name or abbreviation. 

        :param state_province: The state_province of this PartialAddress.
        :type state_province: str
        """
        if state_province is not None and len(state_province) < 1:
            raise ValueError("Invalid value for `state_province`, length must be greater than or equal to `1`")

        self._state_province = state_province
