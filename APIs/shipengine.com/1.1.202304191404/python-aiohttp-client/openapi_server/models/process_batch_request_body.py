# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_scheme import DisplayScheme
from openapi_server.models.label_format import LabelFormat
from openapi_server.models.label_layout import LabelLayout
import re
from openapi_server import util


class ProcessBatchRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_scheme: DisplayScheme=None, label_format: LabelFormat=None, label_layout: LabelLayout='4x6', ship_date: datetime=None):
        """ProcessBatchRequestBody - a model defined in OpenAPI

        :param display_scheme: The display_scheme of this ProcessBatchRequestBody.
        :param label_format: The label_format of this ProcessBatchRequestBody.
        :param label_layout: The label_layout of this ProcessBatchRequestBody.
        :param ship_date: The ship_date of this ProcessBatchRequestBody.
        """
        self.openapi_types = {
            'display_scheme': DisplayScheme,
            'label_format': LabelFormat,
            'label_layout': LabelLayout,
            'ship_date': datetime
        }

        self.attribute_map = {
            'display_scheme': 'display_scheme',
            'label_format': 'label_format',
            'label_layout': 'label_layout',
            'ship_date': 'ship_date'
        }

        self._display_scheme = display_scheme
        self._label_format = label_format
        self._label_layout = label_layout
        self._ship_date = ship_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProcessBatchRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The process_batch_request_body of this ProcessBatchRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_scheme(self):
        """Gets the display_scheme of this ProcessBatchRequestBody.

        The display format that the label should be shown in.

        :return: The display_scheme of this ProcessBatchRequestBody.
        :rtype: DisplayScheme
        """
        return self._display_scheme

    @display_scheme.setter
    def display_scheme(self, display_scheme):
        """Sets the display_scheme of this ProcessBatchRequestBody.

        The display format that the label should be shown in.

        :param display_scheme: The display_scheme of this ProcessBatchRequestBody.
        :type display_scheme: DisplayScheme
        """

        self._display_scheme = display_scheme

    @property
    def label_format(self):
        """Gets the label_format of this ProcessBatchRequestBody.


        :return: The label_format of this ProcessBatchRequestBody.
        :rtype: LabelFormat
        """
        return self._label_format

    @label_format.setter
    def label_format(self, label_format):
        """Sets the label_format of this ProcessBatchRequestBody.


        :param label_format: The label_format of this ProcessBatchRequestBody.
        :type label_format: LabelFormat
        """

        self._label_format = label_format

    @property
    def label_layout(self):
        """Gets the label_layout of this ProcessBatchRequestBody.


        :return: The label_layout of this ProcessBatchRequestBody.
        :rtype: LabelLayout
        """
        return self._label_layout

    @label_layout.setter
    def label_layout(self, label_layout):
        """Sets the label_layout of this ProcessBatchRequestBody.


        :param label_layout: The label_layout of this ProcessBatchRequestBody.
        :type label_layout: LabelLayout
        """

        self._label_layout = label_layout

    @property
    def ship_date(self):
        """Gets the ship_date of this ProcessBatchRequestBody.

        The Ship date the batch is being processed for

        :return: The ship_date of this ProcessBatchRequestBody.
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this ProcessBatchRequestBody.

        The Ship date the batch is being processed for

        :param ship_date: The ship_date of this ProcessBatchRequestBody.
        :type ship_date: datetime
        """
        if ship_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', ship_date):
            raise ValueError("Invalid value for `ship_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._ship_date = ship_date
