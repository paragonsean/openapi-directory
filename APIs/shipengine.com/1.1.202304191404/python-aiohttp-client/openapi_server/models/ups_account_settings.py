# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ancillary_service_endorsement import AncillaryServiceEndorsement
from openapi_server.models.ups_invoice import UpsInvoice
from openapi_server.models.ups_pickup_type import UpsPickupType
from openapi_server import util


class UpsAccountSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_postal_code: str=None, invoice: UpsInvoice=None, is_primary_account: bool=None, mail_innovations_cost_center: str=None, mail_innovations_endorsement: AncillaryServiceEndorsement=None, nickname: str=None, pickup_type: UpsPickupType=None, use_carbon_neutral_shipping_program: bool=None, use_consolidation_services: bool=None, use_ground_freight_pricing: bool=None, use_negotiated_rates: bool=None, use_order_number_on_mail_innovations_labels: bool=None):
        """UpsAccountSettings - a model defined in OpenAPI

        :param account_postal_code: The account_postal_code of this UpsAccountSettings.
        :param invoice: The invoice of this UpsAccountSettings.
        :param is_primary_account: The is_primary_account of this UpsAccountSettings.
        :param mail_innovations_cost_center: The mail_innovations_cost_center of this UpsAccountSettings.
        :param mail_innovations_endorsement: The mail_innovations_endorsement of this UpsAccountSettings.
        :param nickname: The nickname of this UpsAccountSettings.
        :param pickup_type: The pickup_type of this UpsAccountSettings.
        :param use_carbon_neutral_shipping_program: The use_carbon_neutral_shipping_program of this UpsAccountSettings.
        :param use_consolidation_services: The use_consolidation_services of this UpsAccountSettings.
        :param use_ground_freight_pricing: The use_ground_freight_pricing of this UpsAccountSettings.
        :param use_negotiated_rates: The use_negotiated_rates of this UpsAccountSettings.
        :param use_order_number_on_mail_innovations_labels: The use_order_number_on_mail_innovations_labels of this UpsAccountSettings.
        """
        self.openapi_types = {
            'account_postal_code': str,
            'invoice': UpsInvoice,
            'is_primary_account': bool,
            'mail_innovations_cost_center': str,
            'mail_innovations_endorsement': AncillaryServiceEndorsement,
            'nickname': str,
            'pickup_type': UpsPickupType,
            'use_carbon_neutral_shipping_program': bool,
            'use_consolidation_services': bool,
            'use_ground_freight_pricing': bool,
            'use_negotiated_rates': bool,
            'use_order_number_on_mail_innovations_labels': bool
        }

        self.attribute_map = {
            'account_postal_code': 'account_postal_code',
            'invoice': 'invoice',
            'is_primary_account': 'is_primary_account',
            'mail_innovations_cost_center': 'mail_innovations_cost_center',
            'mail_innovations_endorsement': 'mail_innovations_endorsement',
            'nickname': 'nickname',
            'pickup_type': 'pickup_type',
            'use_carbon_neutral_shipping_program': 'use_carbon_neutral_shipping_program',
            'use_consolidation_services': 'use_consolidation_services',
            'use_ground_freight_pricing': 'use_ground_freight_pricing',
            'use_negotiated_rates': 'use_negotiated_rates',
            'use_order_number_on_mail_innovations_labels': 'use_order_number_on_mail_innovations_labels'
        }

        self._account_postal_code = account_postal_code
        self._invoice = invoice
        self._is_primary_account = is_primary_account
        self._mail_innovations_cost_center = mail_innovations_cost_center
        self._mail_innovations_endorsement = mail_innovations_endorsement
        self._nickname = nickname
        self._pickup_type = pickup_type
        self._use_carbon_neutral_shipping_program = use_carbon_neutral_shipping_program
        self._use_consolidation_services = use_consolidation_services
        self._use_ground_freight_pricing = use_ground_freight_pricing
        self._use_negotiated_rates = use_negotiated_rates
        self._use_order_number_on_mail_innovations_labels = use_order_number_on_mail_innovations_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsAccountSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ups_account_settings of this UpsAccountSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_postal_code(self):
        """Gets the account_postal_code of this UpsAccountSettings.

        account postal code

        :return: The account_postal_code of this UpsAccountSettings.
        :rtype: str
        """
        return self._account_postal_code

    @account_postal_code.setter
    def account_postal_code(self, account_postal_code):
        """Sets the account_postal_code of this UpsAccountSettings.

        account postal code

        :param account_postal_code: The account_postal_code of this UpsAccountSettings.
        :type account_postal_code: str
        """
        if account_postal_code is not None and len(account_postal_code) < 5:
            raise ValueError("Invalid value for `account_postal_code`, length must be greater than or equal to `5`")

        self._account_postal_code = account_postal_code

    @property
    def invoice(self):
        """Gets the invoice of this UpsAccountSettings.

        The invoice

        :return: The invoice of this UpsAccountSettings.
        :rtype: UpsInvoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this UpsAccountSettings.

        The invoice

        :param invoice: The invoice of this UpsAccountSettings.
        :type invoice: UpsInvoice
        """

        self._invoice = invoice

    @property
    def is_primary_account(self):
        """Gets the is_primary_account of this UpsAccountSettings.

        Indicates if this is the primary UPS account

        :return: The is_primary_account of this UpsAccountSettings.
        :rtype: bool
        """
        return self._is_primary_account

    @is_primary_account.setter
    def is_primary_account(self, is_primary_account):
        """Sets the is_primary_account of this UpsAccountSettings.

        Indicates if this is the primary UPS account

        :param is_primary_account: The is_primary_account of this UpsAccountSettings.
        :type is_primary_account: bool
        """

        self._is_primary_account = is_primary_account

    @property
    def mail_innovations_cost_center(self):
        """Gets the mail_innovations_cost_center of this UpsAccountSettings.

        mail innovations cost center

        :return: The mail_innovations_cost_center of this UpsAccountSettings.
        :rtype: str
        """
        return self._mail_innovations_cost_center

    @mail_innovations_cost_center.setter
    def mail_innovations_cost_center(self, mail_innovations_cost_center):
        """Sets the mail_innovations_cost_center of this UpsAccountSettings.

        mail innovations cost center

        :param mail_innovations_cost_center: The mail_innovations_cost_center of this UpsAccountSettings.
        :type mail_innovations_cost_center: str
        """
        if mail_innovations_cost_center is not None and len(mail_innovations_cost_center) < 0:
            raise ValueError("Invalid value for `mail_innovations_cost_center`, length must be greater than or equal to `0`")

        self._mail_innovations_cost_center = mail_innovations_cost_center

    @property
    def mail_innovations_endorsement(self):
        """Gets the mail_innovations_endorsement of this UpsAccountSettings.


        :return: The mail_innovations_endorsement of this UpsAccountSettings.
        :rtype: AncillaryServiceEndorsement
        """
        return self._mail_innovations_endorsement

    @mail_innovations_endorsement.setter
    def mail_innovations_endorsement(self, mail_innovations_endorsement):
        """Sets the mail_innovations_endorsement of this UpsAccountSettings.


        :param mail_innovations_endorsement: The mail_innovations_endorsement of this UpsAccountSettings.
        :type mail_innovations_endorsement: AncillaryServiceEndorsement
        """

        self._mail_innovations_endorsement = mail_innovations_endorsement

    @property
    def nickname(self):
        """Gets the nickname of this UpsAccountSettings.

        nickname

        :return: The nickname of this UpsAccountSettings.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this UpsAccountSettings.

        nickname

        :param nickname: The nickname of this UpsAccountSettings.
        :type nickname: str
        """
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def pickup_type(self):
        """Gets the pickup_type of this UpsAccountSettings.


        :return: The pickup_type of this UpsAccountSettings.
        :rtype: UpsPickupType
        """
        return self._pickup_type

    @pickup_type.setter
    def pickup_type(self, pickup_type):
        """Sets the pickup_type of this UpsAccountSettings.


        :param pickup_type: The pickup_type of this UpsAccountSettings.
        :type pickup_type: UpsPickupType
        """

        self._pickup_type = pickup_type

    @property
    def use_carbon_neutral_shipping_program(self):
        """Gets the use_carbon_neutral_shipping_program of this UpsAccountSettings.

        The use carbon neutral shipping program

        :return: The use_carbon_neutral_shipping_program of this UpsAccountSettings.
        :rtype: bool
        """
        return self._use_carbon_neutral_shipping_program

    @use_carbon_neutral_shipping_program.setter
    def use_carbon_neutral_shipping_program(self, use_carbon_neutral_shipping_program):
        """Sets the use_carbon_neutral_shipping_program of this UpsAccountSettings.

        The use carbon neutral shipping program

        :param use_carbon_neutral_shipping_program: The use_carbon_neutral_shipping_program of this UpsAccountSettings.
        :type use_carbon_neutral_shipping_program: bool
        """

        self._use_carbon_neutral_shipping_program = use_carbon_neutral_shipping_program

    @property
    def use_consolidation_services(self):
        """Gets the use_consolidation_services of this UpsAccountSettings.

        The use consolidation services

        :return: The use_consolidation_services of this UpsAccountSettings.
        :rtype: bool
        """
        return self._use_consolidation_services

    @use_consolidation_services.setter
    def use_consolidation_services(self, use_consolidation_services):
        """Sets the use_consolidation_services of this UpsAccountSettings.

        The use consolidation services

        :param use_consolidation_services: The use_consolidation_services of this UpsAccountSettings.
        :type use_consolidation_services: bool
        """

        self._use_consolidation_services = use_consolidation_services

    @property
    def use_ground_freight_pricing(self):
        """Gets the use_ground_freight_pricing of this UpsAccountSettings.

        The use ground freight pricing

        :return: The use_ground_freight_pricing of this UpsAccountSettings.
        :rtype: bool
        """
        return self._use_ground_freight_pricing

    @use_ground_freight_pricing.setter
    def use_ground_freight_pricing(self, use_ground_freight_pricing):
        """Sets the use_ground_freight_pricing of this UpsAccountSettings.

        The use ground freight pricing

        :param use_ground_freight_pricing: The use_ground_freight_pricing of this UpsAccountSettings.
        :type use_ground_freight_pricing: bool
        """

        self._use_ground_freight_pricing = use_ground_freight_pricing

    @property
    def use_negotiated_rates(self):
        """Gets the use_negotiated_rates of this UpsAccountSettings.

        The use negotiated rates

        :return: The use_negotiated_rates of this UpsAccountSettings.
        :rtype: bool
        """
        return self._use_negotiated_rates

    @use_negotiated_rates.setter
    def use_negotiated_rates(self, use_negotiated_rates):
        """Sets the use_negotiated_rates of this UpsAccountSettings.

        The use negotiated rates

        :param use_negotiated_rates: The use_negotiated_rates of this UpsAccountSettings.
        :type use_negotiated_rates: bool
        """

        self._use_negotiated_rates = use_negotiated_rates

    @property
    def use_order_number_on_mail_innovations_labels(self):
        """Gets the use_order_number_on_mail_innovations_labels of this UpsAccountSettings.

        The use order number on mail innovations labels

        :return: The use_order_number_on_mail_innovations_labels of this UpsAccountSettings.
        :rtype: bool
        """
        return self._use_order_number_on_mail_innovations_labels

    @use_order_number_on_mail_innovations_labels.setter
    def use_order_number_on_mail_innovations_labels(self, use_order_number_on_mail_innovations_labels):
        """Sets the use_order_number_on_mail_innovations_labels of this UpsAccountSettings.

        The use order number on mail innovations labels

        :param use_order_number_on_mail_innovations_labels: The use_order_number_on_mail_innovations_labels of this UpsAccountSettings.
        :type use_order_number_on_mail_innovations_labels: bool
        """

        self._use_order_number_on_mail_innovations_labels = use_order_number_on_mail_innovations_labels
