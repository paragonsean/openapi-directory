# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_validating_shipment import AddressValidatingShipment
from openapi_server import util


class CreateShipmentsRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shipments: List[AddressValidatingShipment]=None):
        """CreateShipmentsRequestBody - a model defined in OpenAPI

        :param shipments: The shipments of this CreateShipmentsRequestBody.
        """
        self.openapi_types = {
            'shipments': List[AddressValidatingShipment]
        }

        self.attribute_map = {
            'shipments': 'shipments'
        }

        self._shipments = shipments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateShipmentsRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_shipments_request_body of this CreateShipmentsRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shipments(self):
        """Gets the shipments of this CreateShipmentsRequestBody.

        An array of shipments to be created.

        :return: The shipments of this CreateShipmentsRequestBody.
        :rtype: List[AddressValidatingShipment]
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """Sets the shipments of this CreateShipmentsRequestBody.

        An array of shipments to be created.

        :param shipments: The shipments of this CreateShipmentsRequestBody.
        :type shipments: List[AddressValidatingShipment]
        """
        if shipments is None:
            raise ValueError("Invalid value for `shipments`, must not be `None`")
        if shipments is not None and len(shipments) < 1:
            raise ValueError("Invalid value for `shipments`, number of items must be greater than or equal to `1`")

        self._shipments = shipments
