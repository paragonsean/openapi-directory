# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status_code import StatusCode
import re
from openapi_server import util


class TrackEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_detail_code: str=None, carrier_occurred_at: datetime=None, carrier_status_code: str=None, carrier_status_description: str=None, city_locality: str=None, company_name: str=None, country_code: str=None, description: str=None, event_code: str=None, latitude: float=None, longitude: float=None, occurred_at: datetime=None, postal_code: str=None, signer: str=None, state_province: str=None, status_code: StatusCode=None, status_description: str=None):
        """TrackEvent - a model defined in OpenAPI

        :param carrier_detail_code: The carrier_detail_code of this TrackEvent.
        :param carrier_occurred_at: The carrier_occurred_at of this TrackEvent.
        :param carrier_status_code: The carrier_status_code of this TrackEvent.
        :param carrier_status_description: The carrier_status_description of this TrackEvent.
        :param city_locality: The city_locality of this TrackEvent.
        :param company_name: The company_name of this TrackEvent.
        :param country_code: The country_code of this TrackEvent.
        :param description: The description of this TrackEvent.
        :param event_code: The event_code of this TrackEvent.
        :param latitude: The latitude of this TrackEvent.
        :param longitude: The longitude of this TrackEvent.
        :param occurred_at: The occurred_at of this TrackEvent.
        :param postal_code: The postal_code of this TrackEvent.
        :param signer: The signer of this TrackEvent.
        :param state_province: The state_province of this TrackEvent.
        :param status_code: The status_code of this TrackEvent.
        :param status_description: The status_description of this TrackEvent.
        """
        self.openapi_types = {
            'carrier_detail_code': str,
            'carrier_occurred_at': datetime,
            'carrier_status_code': str,
            'carrier_status_description': str,
            'city_locality': str,
            'company_name': str,
            'country_code': str,
            'description': str,
            'event_code': str,
            'latitude': float,
            'longitude': float,
            'occurred_at': datetime,
            'postal_code': str,
            'signer': str,
            'state_province': str,
            'status_code': StatusCode,
            'status_description': str
        }

        self.attribute_map = {
            'carrier_detail_code': 'carrier_detail_code',
            'carrier_occurred_at': 'carrier_occurred_at',
            'carrier_status_code': 'carrier_status_code',
            'carrier_status_description': 'carrier_status_description',
            'city_locality': 'city_locality',
            'company_name': 'company_name',
            'country_code': 'country_code',
            'description': 'description',
            'event_code': 'event_code',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'occurred_at': 'occurred_at',
            'postal_code': 'postal_code',
            'signer': 'signer',
            'state_province': 'state_province',
            'status_code': 'status_code',
            'status_description': 'status_description'
        }

        self._carrier_detail_code = carrier_detail_code
        self._carrier_occurred_at = carrier_occurred_at
        self._carrier_status_code = carrier_status_code
        self._carrier_status_description = carrier_status_description
        self._city_locality = city_locality
        self._company_name = company_name
        self._country_code = country_code
        self._description = description
        self._event_code = event_code
        self._latitude = latitude
        self._longitude = longitude
        self._occurred_at = occurred_at
        self._postal_code = postal_code
        self._signer = signer
        self._state_province = state_province
        self._status_code = status_code
        self._status_description = status_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The track_event of this TrackEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_detail_code(self):
        """Gets the carrier_detail_code of this TrackEvent.

        Carrier detail code

        :return: The carrier_detail_code of this TrackEvent.
        :rtype: str
        """
        return self._carrier_detail_code

    @carrier_detail_code.setter
    def carrier_detail_code(self, carrier_detail_code):
        """Sets the carrier_detail_code of this TrackEvent.

        Carrier detail code

        :param carrier_detail_code: The carrier_detail_code of this TrackEvent.
        :type carrier_detail_code: str
        """
        if carrier_detail_code is None:
            raise ValueError("Invalid value for `carrier_detail_code`, must not be `None`")
        if carrier_detail_code is not None and len(carrier_detail_code) < 1:
            raise ValueError("Invalid value for `carrier_detail_code`, length must be greater than or equal to `1`")

        self._carrier_detail_code = carrier_detail_code

    @property
    def carrier_occurred_at(self):
        """Gets the carrier_occurred_at of this TrackEvent.

        Carrier timestamp for the event, it is assumed to be the local time of where the event occurred.

        :return: The carrier_occurred_at of this TrackEvent.
        :rtype: datetime
        """
        return self._carrier_occurred_at

    @carrier_occurred_at.setter
    def carrier_occurred_at(self, carrier_occurred_at):
        """Sets the carrier_occurred_at of this TrackEvent.

        Carrier timestamp for the event, it is assumed to be the local time of where the event occurred.

        :param carrier_occurred_at: The carrier_occurred_at of this TrackEvent.
        :type carrier_occurred_at: datetime
        """
        if carrier_occurred_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', carrier_occurred_at):
            raise ValueError("Invalid value for `carrier_occurred_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._carrier_occurred_at = carrier_occurred_at

    @property
    def carrier_status_code(self):
        """Gets the carrier_status_code of this TrackEvent.

        Carrier status code

        :return: The carrier_status_code of this TrackEvent.
        :rtype: str
        """
        return self._carrier_status_code

    @carrier_status_code.setter
    def carrier_status_code(self, carrier_status_code):
        """Sets the carrier_status_code of this TrackEvent.

        Carrier status code

        :param carrier_status_code: The carrier_status_code of this TrackEvent.
        :type carrier_status_code: str
        """
        if carrier_status_code is None:
            raise ValueError("Invalid value for `carrier_status_code`, must not be `None`")
        if carrier_status_code is not None and len(carrier_status_code) < 1:
            raise ValueError("Invalid value for `carrier_status_code`, length must be greater than or equal to `1`")

        self._carrier_status_code = carrier_status_code

    @property
    def carrier_status_description(self):
        """Gets the carrier_status_description of this TrackEvent.

        carrier status description

        :return: The carrier_status_description of this TrackEvent.
        :rtype: str
        """
        return self._carrier_status_description

    @carrier_status_description.setter
    def carrier_status_description(self, carrier_status_description):
        """Sets the carrier_status_description of this TrackEvent.

        carrier status description

        :param carrier_status_description: The carrier_status_description of this TrackEvent.
        :type carrier_status_description: str
        """
        if carrier_status_description is None:
            raise ValueError("Invalid value for `carrier_status_description`, must not be `None`")
        if carrier_status_description is not None and len(carrier_status_description) < 0:
            raise ValueError("Invalid value for `carrier_status_description`, length must be greater than or equal to `0`")

        self._carrier_status_description = carrier_status_description

    @property
    def city_locality(self):
        """Gets the city_locality of this TrackEvent.

        City locality

        :return: The city_locality of this TrackEvent.
        :rtype: str
        """
        return self._city_locality

    @city_locality.setter
    def city_locality(self, city_locality):
        """Sets the city_locality of this TrackEvent.

        City locality

        :param city_locality: The city_locality of this TrackEvent.
        :type city_locality: str
        """
        if city_locality is None:
            raise ValueError("Invalid value for `city_locality`, must not be `None`")
        if city_locality is not None and len(city_locality) < 0:
            raise ValueError("Invalid value for `city_locality`, length must be greater than or equal to `0`")

        self._city_locality = city_locality

    @property
    def company_name(self):
        """Gets the company_name of this TrackEvent.

        Company Name

        :return: The company_name of this TrackEvent.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this TrackEvent.

        Company Name

        :param company_name: The company_name of this TrackEvent.
        :type company_name: str
        """
        if company_name is not None and len(company_name) < 0:
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `0`")

        self._company_name = company_name

    @property
    def country_code(self):
        """Gets the country_code of this TrackEvent.

        A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 

        :return: The country_code of this TrackEvent.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this TrackEvent.

        A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 

        :param country_code: The country_code of this TrackEvent.
        :type country_code: str
        """
        if country_code is not None and len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")
        if country_code is not None and len(country_code) < 2:
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `2`")

        self._country_code = country_code

    @property
    def description(self):
        """Gets the description of this TrackEvent.

        Event description

        :return: The description of this TrackEvent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrackEvent.

        Event description

        :param description: The description of this TrackEvent.
        :type description: str
        """
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def event_code(self):
        """Gets the event_code of this TrackEvent.

        Event Code

        :return: The event_code of this TrackEvent.
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this TrackEvent.

        Event Code

        :param event_code: The event_code of this TrackEvent.
        :type event_code: str
        """
        if event_code is not None and len(event_code) < 0:
            raise ValueError("Invalid value for `event_code`, length must be greater than or equal to `0`")

        self._event_code = event_code

    @property
    def latitude(self):
        """Gets the latitude of this TrackEvent.

        Latitude coordinate of tracking event.

        :return: The latitude of this TrackEvent.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this TrackEvent.

        Latitude coordinate of tracking event.

        :param latitude: The latitude of this TrackEvent.
        :type latitude: float
        """
        if latitude is not None and latitude > 90:
            raise ValueError("Invalid value for `latitude`, must be a value less than or equal to `90`")
        if latitude is not None and latitude < -90:
            raise ValueError("Invalid value for `latitude`, must be a value greater than or equal to `-90`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this TrackEvent.

        Longitude coordinate of tracking event.

        :return: The longitude of this TrackEvent.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this TrackEvent.

        Longitude coordinate of tracking event.

        :param longitude: The longitude of this TrackEvent.
        :type longitude: float
        """
        if longitude is not None and longitude > 180:
            raise ValueError("Invalid value for `longitude`, must be a value less than or equal to `180`")
        if longitude is not None and longitude < -180:
            raise ValueError("Invalid value for `longitude`, must be a value greater than or equal to `-180`")

        self._longitude = longitude

    @property
    def occurred_at(self):
        """Gets the occurred_at of this TrackEvent.

        Timestamp for carrier event

        :return: The occurred_at of this TrackEvent.
        :rtype: datetime
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this TrackEvent.

        Timestamp for carrier event

        :param occurred_at: The occurred_at of this TrackEvent.
        :type occurred_at: datetime
        """
        if occurred_at is None:
            raise ValueError("Invalid value for `occurred_at`, must not be `None`")
        if occurred_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', occurred_at):
            raise ValueError("Invalid value for `occurred_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._occurred_at = occurred_at

    @property
    def postal_code(self):
        """Gets the postal_code of this TrackEvent.

        Postal code

        :return: The postal_code of this TrackEvent.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this TrackEvent.

        Postal code

        :param postal_code: The postal_code of this TrackEvent.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")
        if postal_code is not None and len(postal_code) < 0:
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `0`")

        self._postal_code = postal_code

    @property
    def signer(self):
        """Gets the signer of this TrackEvent.

        Signer information

        :return: The signer of this TrackEvent.
        :rtype: str
        """
        return self._signer

    @signer.setter
    def signer(self, signer):
        """Sets the signer of this TrackEvent.

        Signer information

        :param signer: The signer of this TrackEvent.
        :type signer: str
        """
        if signer is not None and len(signer) < 0:
            raise ValueError("Invalid value for `signer`, length must be greater than or equal to `0`")

        self._signer = signer

    @property
    def state_province(self):
        """Gets the state_province of this TrackEvent.

        State province

        :return: The state_province of this TrackEvent.
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this TrackEvent.

        State province

        :param state_province: The state_province of this TrackEvent.
        :type state_province: str
        """
        if state_province is None:
            raise ValueError("Invalid value for `state_province`, must not be `None`")
        if state_province is not None and len(state_province) < 2:
            raise ValueError("Invalid value for `state_province`, length must be greater than or equal to `2`")

        self._state_province = state_province

    @property
    def status_code(self):
        """Gets the status_code of this TrackEvent.


        :return: The status_code of this TrackEvent.
        :rtype: StatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this TrackEvent.


        :param status_code: The status_code of this TrackEvent.
        :type status_code: StatusCode
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def status_description(self):
        """Gets the status_description of this TrackEvent.

        Event Status Description

        :return: The status_description of this TrackEvent.
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this TrackEvent.

        Event Status Description

        :param status_description: The status_description of this TrackEvent.
        :type status_description: str
        """
        if status_description is None:
            raise ValueError("Invalid value for `status_description`, must not be `None`")
        if status_description is not None and len(status_description) < 1:
            raise ValueError("Invalid value for `status_description`, length must be greater than or equal to `1`")

        self._status_description = status_description
