# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ups_invoice import UpsInvoice
from openapi_server import util


class ConnectUpsRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_country_code: str=None, account_number: str=None, account_postal_code: str=None, address1: str=None, address2: str=None, agree_to_technology_agreement: bool=None, city: str=None, company: str=None, country_code: str=None, email: str=None, first_name: str=None, invoice: UpsInvoice=None, invoice_amount: float=None, invoice_currency_code: str=None, last_name: str=None, nickname: str=None, phone: str=None, postal_code: str=None, state: str=None, title: str=None):
        """ConnectUpsRequestBody - a model defined in OpenAPI

        :param account_country_code: The account_country_code of this ConnectUpsRequestBody.
        :param account_number: The account_number of this ConnectUpsRequestBody.
        :param account_postal_code: The account_postal_code of this ConnectUpsRequestBody.
        :param address1: The address1 of this ConnectUpsRequestBody.
        :param address2: The address2 of this ConnectUpsRequestBody.
        :param agree_to_technology_agreement: The agree_to_technology_agreement of this ConnectUpsRequestBody.
        :param city: The city of this ConnectUpsRequestBody.
        :param company: The company of this ConnectUpsRequestBody.
        :param country_code: The country_code of this ConnectUpsRequestBody.
        :param email: The email of this ConnectUpsRequestBody.
        :param first_name: The first_name of this ConnectUpsRequestBody.
        :param invoice: The invoice of this ConnectUpsRequestBody.
        :param invoice_amount: The invoice_amount of this ConnectUpsRequestBody.
        :param invoice_currency_code: The invoice_currency_code of this ConnectUpsRequestBody.
        :param last_name: The last_name of this ConnectUpsRequestBody.
        :param nickname: The nickname of this ConnectUpsRequestBody.
        :param phone: The phone of this ConnectUpsRequestBody.
        :param postal_code: The postal_code of this ConnectUpsRequestBody.
        :param state: The state of this ConnectUpsRequestBody.
        :param title: The title of this ConnectUpsRequestBody.
        """
        self.openapi_types = {
            'account_country_code': str,
            'account_number': str,
            'account_postal_code': str,
            'address1': str,
            'address2': str,
            'agree_to_technology_agreement': bool,
            'city': str,
            'company': str,
            'country_code': str,
            'email': str,
            'first_name': str,
            'invoice': UpsInvoice,
            'invoice_amount': float,
            'invoice_currency_code': str,
            'last_name': str,
            'nickname': str,
            'phone': str,
            'postal_code': str,
            'state': str,
            'title': str
        }

        self.attribute_map = {
            'account_country_code': 'account_country_code',
            'account_number': 'account_number',
            'account_postal_code': 'account_postal_code',
            'address1': 'address1',
            'address2': 'address2',
            'agree_to_technology_agreement': 'agree_to_technology_agreement',
            'city': 'city',
            'company': 'company',
            'country_code': 'country_code',
            'email': 'email',
            'first_name': 'first_name',
            'invoice': 'invoice',
            'invoice_amount': 'invoice_amount',
            'invoice_currency_code': 'invoice_currency_code',
            'last_name': 'last_name',
            'nickname': 'nickname',
            'phone': 'phone',
            'postal_code': 'postal_code',
            'state': 'state',
            'title': 'title'
        }

        self._account_country_code = account_country_code
        self._account_number = account_number
        self._account_postal_code = account_postal_code
        self._address1 = address1
        self._address2 = address2
        self._agree_to_technology_agreement = agree_to_technology_agreement
        self._city = city
        self._company = company
        self._country_code = country_code
        self._email = email
        self._first_name = first_name
        self._invoice = invoice
        self._invoice_amount = invoice_amount
        self._invoice_currency_code = invoice_currency_code
        self._last_name = last_name
        self._nickname = nickname
        self._phone = phone
        self._postal_code = postal_code
        self._state = state
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectUpsRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_ups_request_body of this ConnectUpsRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_country_code(self):
        """Gets the account_country_code of this ConnectUpsRequestBody.

        Account country code

        :return: The account_country_code of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._account_country_code

    @account_country_code.setter
    def account_country_code(self, account_country_code):
        """Sets the account_country_code of this ConnectUpsRequestBody.

        Account country code

        :param account_country_code: The account_country_code of this ConnectUpsRequestBody.
        :type account_country_code: str
        """
        if account_country_code is None:
            raise ValueError("Invalid value for `account_country_code`, must not be `None`")
        if account_country_code is not None and len(account_country_code) < 1:
            raise ValueError("Invalid value for `account_country_code`, length must be greater than or equal to `1`")

        self._account_country_code = account_country_code

    @property
    def account_number(self):
        """Gets the account_number of this ConnectUpsRequestBody.

        Account number

        :return: The account_number of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ConnectUpsRequestBody.

        Account number

        :param account_number: The account_number of this ConnectUpsRequestBody.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def account_postal_code(self):
        """Gets the account_postal_code of this ConnectUpsRequestBody.

        Account postal code

        :return: The account_postal_code of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._account_postal_code

    @account_postal_code.setter
    def account_postal_code(self, account_postal_code):
        """Sets the account_postal_code of this ConnectUpsRequestBody.

        Account postal code

        :param account_postal_code: The account_postal_code of this ConnectUpsRequestBody.
        :type account_postal_code: str
        """
        if account_postal_code is None:
            raise ValueError("Invalid value for `account_postal_code`, must not be `None`")
        if account_postal_code is not None and len(account_postal_code) < 1:
            raise ValueError("Invalid value for `account_postal_code`, length must be greater than or equal to `1`")

        self._account_postal_code = account_postal_code

    @property
    def address1(self):
        """Gets the address1 of this ConnectUpsRequestBody.

        Address Line 1

        :return: The address1 of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this ConnectUpsRequestBody.

        Address Line 1

        :param address1: The address1 of this ConnectUpsRequestBody.
        :type address1: str
        """
        if address1 is None:
            raise ValueError("Invalid value for `address1`, must not be `None`")
        if address1 is not None and len(address1) < 1:
            raise ValueError("Invalid value for `address1`, length must be greater than or equal to `1`")

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this ConnectUpsRequestBody.

        Address Line 2

        :return: The address2 of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this ConnectUpsRequestBody.

        Address Line 2

        :param address2: The address2 of this ConnectUpsRequestBody.
        :type address2: str
        """
        if address2 is not None and len(address2) < 1:
            raise ValueError("Invalid value for `address2`, length must be greater than or equal to `1`")

        self._address2 = address2

    @property
    def agree_to_technology_agreement(self):
        """Gets the agree_to_technology_agreement of this ConnectUpsRequestBody.

        The Agreement to the [UPS Technology Agreement](https://www.ups.com/assets/resources/media/UTA_with_EUR.pdf)

        :return: The agree_to_technology_agreement of this ConnectUpsRequestBody.
        :rtype: bool
        """
        return self._agree_to_technology_agreement

    @agree_to_technology_agreement.setter
    def agree_to_technology_agreement(self, agree_to_technology_agreement):
        """Sets the agree_to_technology_agreement of this ConnectUpsRequestBody.

        The Agreement to the [UPS Technology Agreement](https://www.ups.com/assets/resources/media/UTA_with_EUR.pdf)

        :param agree_to_technology_agreement: The agree_to_technology_agreement of this ConnectUpsRequestBody.
        :type agree_to_technology_agreement: bool
        """
        if agree_to_technology_agreement is None:
            raise ValueError("Invalid value for `agree_to_technology_agreement`, must not be `None`")

        self._agree_to_technology_agreement = agree_to_technology_agreement

    @property
    def city(self):
        """Gets the city of this ConnectUpsRequestBody.

        City

        :return: The city of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ConnectUpsRequestBody.

        City

        :param city: The city of this ConnectUpsRequestBody.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and len(city) < 1:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `1`")

        self._city = city

    @property
    def company(self):
        """Gets the company of this ConnectUpsRequestBody.

        Company

        :return: The company of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ConnectUpsRequestBody.

        Company

        :param company: The company of this ConnectUpsRequestBody.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")
        if company is not None and len(company) < 1:
            raise ValueError("Invalid value for `company`, length must be greater than or equal to `1`")

        self._company = company

    @property
    def country_code(self):
        """Gets the country_code of this ConnectUpsRequestBody.

        Country code

        :return: The country_code of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ConnectUpsRequestBody.

        Country code

        :param country_code: The country_code of this ConnectUpsRequestBody.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")
        if country_code is not None and len(country_code) < 1:
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `1`")

        self._country_code = country_code

    @property
    def email(self):
        """Gets the email of this ConnectUpsRequestBody.

        The email address

        :return: The email of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ConnectUpsRequestBody.

        The email address

        :param email: The email of this ConnectUpsRequestBody.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this ConnectUpsRequestBody.

        First name

        :return: The first_name of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ConnectUpsRequestBody.

        First name

        :param first_name: The first_name of this ConnectUpsRequestBody.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def invoice(self):
        """Gets the invoice of this ConnectUpsRequestBody.

        The UPS invoice

        :return: The invoice of this ConnectUpsRequestBody.
        :rtype: UpsInvoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this ConnectUpsRequestBody.

        The UPS invoice

        :param invoice: The invoice of this ConnectUpsRequestBody.
        :type invoice: UpsInvoice
        """

        self._invoice = invoice

    @property
    def invoice_amount(self):
        """Gets the invoice_amount of this ConnectUpsRequestBody.

        The invoice amount

        :return: The invoice_amount of this ConnectUpsRequestBody.
        :rtype: float
        """
        return self._invoice_amount

    @invoice_amount.setter
    def invoice_amount(self, invoice_amount):
        """Sets the invoice_amount of this ConnectUpsRequestBody.

        The invoice amount

        :param invoice_amount: The invoice_amount of this ConnectUpsRequestBody.
        :type invoice_amount: float
        """

        self._invoice_amount = invoice_amount

    @property
    def invoice_currency_code(self):
        """Gets the invoice_currency_code of this ConnectUpsRequestBody.

        The invoice currency code

        :return: The invoice_currency_code of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._invoice_currency_code

    @invoice_currency_code.setter
    def invoice_currency_code(self, invoice_currency_code):
        """Sets the invoice_currency_code of this ConnectUpsRequestBody.

        The invoice currency code

        :param invoice_currency_code: The invoice_currency_code of this ConnectUpsRequestBody.
        :type invoice_currency_code: str
        """

        self._invoice_currency_code = invoice_currency_code

    @property
    def last_name(self):
        """Gets the last_name of this ConnectUpsRequestBody.

        Last name

        :return: The last_name of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ConnectUpsRequestBody.

        Last name

        :param last_name: The last_name of this ConnectUpsRequestBody.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def nickname(self):
        """Gets the nickname of this ConnectUpsRequestBody.

        Nickname

        :return: The nickname of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectUpsRequestBody.

        Nickname

        :param nickname: The nickname of this ConnectUpsRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def phone(self):
        """Gets the phone of this ConnectUpsRequestBody.

        Phone

        :return: The phone of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ConnectUpsRequestBody.

        Phone

        :param phone: The phone of this ConnectUpsRequestBody.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")
        if phone is not None and len(phone) < 1:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `1`")

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this ConnectUpsRequestBody.

        Postal code

        :return: The postal_code of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ConnectUpsRequestBody.

        Postal code

        :param postal_code: The postal_code of this ConnectUpsRequestBody.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")
        if postal_code is not None and len(postal_code) < 1:
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `1`")

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this ConnectUpsRequestBody.

        State

        :return: The state of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConnectUpsRequestBody.

        State

        :param state: The state of this ConnectUpsRequestBody.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")
        if state is not None and len(state) < 1:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")

        self._state = state

    @property
    def title(self):
        """Gets the title of this ConnectUpsRequestBody.

        Title

        :return: The title of this ConnectUpsRequestBody.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ConnectUpsRequestBody.

        Title

        :param title: The title of this ConnectUpsRequestBody.
        :type title: str
        """
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title
