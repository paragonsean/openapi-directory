/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateLabelFromRateRequestBody;
import org.openapitools.client.model.CreateLabelFromRateResponseBody;
import org.openapitools.client.model.CreateLabelFromShipmentRequestBody;
import org.openapitools.client.model.CreateLabelFromShipmentResponseBody;
import org.openapitools.client.model.CreateLabelRequestBody;
import org.openapitools.client.model.CreateLabelResponseBody;
import org.openapitools.client.model.CreateReturnLabelRequestBody;
import org.openapitools.client.model.CreateReturnLabelResponseBody;
import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.GetLabelByExternalShipmentIdResponseBody;
import org.openapitools.client.model.GetLabelByIdResponseBody;
import org.openapitools.client.model.GetTrackingLogFromLabelResponseBody;
import org.openapitools.client.model.LabelDownloadType;
import org.openapitools.client.model.LabelStatus;
import org.openapitools.client.model.ListLabelsResponseBody;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SortDir;
import org.openapitools.client.model.VoidLabelResponseBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LabelsApi
 */
@Disabled
public class LabelsApiTest {

    private final LabelsApi api = new LabelsApi();

    /**
     * Purchase Label
     *
     * Purchase and print a label for shipment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLabelTest() throws ApiException {
        CreateLabelRequestBody createLabelRequestBody = null;
        CreateLabelResponseBody response = api.createLabel(createLabelRequestBody);
        // TODO: test validations
    }

    /**
     * Purchase Label with Rate ID
     *
     * When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLabelFromRateTest() throws ApiException {
        String rateId = null;
        CreateLabelFromRateRequestBody createLabelFromRateRequestBody = null;
        CreateLabelFromRateResponseBody response = api.createLabelFromRate(rateId, createLabelFromRateRequestBody);
        // TODO: test validations
    }

    /**
     * Purchase Label with Shipment ID
     *
     * Purchase a label using a shipment ID that has already been created with the desired address and package info. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLabelFromShipmentTest() throws ApiException {
        String shipmentId = null;
        CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody = null;
        CreateLabelFromShipmentResponseBody response = api.createLabelFromShipment(shipmentId, createLabelFromShipmentRequestBody);
        // TODO: test validations
    }

    /**
     * Create a return label
     *
     * Create a return label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReturnLabelTest() throws ApiException {
        String labelId = null;
        CreateReturnLabelRequestBody createReturnLabelRequestBody = null;
        CreateReturnLabelResponseBody response = api.createReturnLabel(labelId, createReturnLabelRequestBody);
        // TODO: test validations
    }

    /**
     * Get Label By External Shipment ID
     *
     * Find a label by using the external shipment id that was used during label creation 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLabelByExternalShipmentIdTest() throws ApiException {
        String externalShipmentId = null;
        LabelDownloadType labelDownloadType = null;
        GetLabelByExternalShipmentIdResponseBody response = api.getLabelByExternalShipmentId(externalShipmentId, labelDownloadType);
        // TODO: test validations
    }

    /**
     * Get Label By ID
     *
     * Retrieve information for individual labels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLabelByIdTest() throws ApiException {
        String labelId = null;
        LabelDownloadType labelDownloadType = null;
        GetLabelByIdResponseBody response = api.getLabelById(labelId, labelDownloadType);
        // TODO: test validations
    }

    /**
     * Get Label Tracking Information
     *
     * Retrieve the label&#39;s tracking information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackingLogFromLabelTest() throws ApiException {
        String labelId = null;
        GetTrackingLogFromLabelResponseBody response = api.getTrackingLogFromLabel(labelId);
        // TODO: test validations
    }

    /**
     * List labels
     *
     * This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLabelsTest() throws ApiException {
        LabelStatus labelStatus = null;
        String serviceCode = null;
        String carrierId = null;
        String trackingNumber = null;
        String batchId = null;
        String rateId = null;
        String shipmentId = null;
        String warehouseId = null;
        OffsetDateTime createdAtStart = null;
        OffsetDateTime createdAtEnd = null;
        Integer page = null;
        Integer pageSize = null;
        SortDir sortDir = null;
        String sortBy = null;
        ListLabelsResponseBody response = api.listLabels(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy);
        // TODO: test validations
    }

    /**
     * Void a Label By ID
     *
     * Void a label by ID to get a refund.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void voidLabelTest() throws ApiException {
        String labelId = null;
        VoidLabelResponseBody response = api.voidLabel(labelId);
        // TODO: test validations
    }

}
