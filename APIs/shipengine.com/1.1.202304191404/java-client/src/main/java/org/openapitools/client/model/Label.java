/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AlternativeIdentifier;
import org.openapitools.client.model.DisplayScheme;
import org.openapitools.client.model.LabelChargeEvent;
import org.openapitools.client.model.LabelDownload;
import org.openapitools.client.model.LabelDownloadType;
import org.openapitools.client.model.LabelFormat;
import org.openapitools.client.model.LabelLayout;
import org.openapitools.client.model.LabelStatus;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.ModelPackage;
import org.openapitools.client.model.MonetaryValue;
import org.openapitools.client.model.Shipment;
import org.openapitools.client.model.TrackingStatus;
import org.openapitools.client.model.ValidateAddress;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A label represents the physical sticker that you affix to a package to ship it.  ShipEngine makes it easy for you to [create labels](https://www.shipengine.com/docs/labels/create-a-label/) and then download them in PDF, PNG, or ZPL format so you can print them. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Label {
  public static final String SERIALIZED_NAME_ALTERNATIVE_IDENTIFIERS = "alternative_identifiers";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_IDENTIFIERS)
  private List<AlternativeIdentifier> alternativeIdentifiers;

  public static final String SERIALIZED_NAME_BATCH_ID = "batch_id";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private String batchId;

  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrier_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private String carrierCode;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrier_id";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_CHARGE_EVENT = "charge_event";
  @SerializedName(SERIALIZED_NAME_CHARGE_EVENT)
  private LabelChargeEvent chargeEvent;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISPLAY_SCHEME = "display_scheme";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SCHEME)
  private DisplayScheme displayScheme = DisplayScheme.LABEL;

  public static final String SERIALIZED_NAME_FORM_DOWNLOAD = "form_download";
  @SerializedName(SERIALIZED_NAME_FORM_DOWNLOAD)
  private Link formDownload;

  public static final String SERIALIZED_NAME_INSURANCE_CLAIM = "insurance_claim";
  @SerializedName(SERIALIZED_NAME_INSURANCE_CLAIM)
  private Link insuranceClaim;

  public static final String SERIALIZED_NAME_INSURANCE_COST = "insurance_cost";
  @SerializedName(SERIALIZED_NAME_INSURANCE_COST)
  private MonetaryValue insuranceCost;

  public static final String SERIALIZED_NAME_IS_INTERNATIONAL = "is_international";
  @SerializedName(SERIALIZED_NAME_IS_INTERNATIONAL)
  private Boolean isInternational;

  public static final String SERIALIZED_NAME_IS_RETURN_LABEL = "is_return_label";
  @SerializedName(SERIALIZED_NAME_IS_RETURN_LABEL)
  private Boolean isReturnLabel;

  public static final String SERIALIZED_NAME_LABEL_DOWNLOAD = "label_download";
  @SerializedName(SERIALIZED_NAME_LABEL_DOWNLOAD)
  private LabelDownload labelDownload;

  public static final String SERIALIZED_NAME_LABEL_DOWNLOAD_TYPE = "label_download_type";
  @SerializedName(SERIALIZED_NAME_LABEL_DOWNLOAD_TYPE)
  private LabelDownloadType labelDownloadType = LabelDownloadType.URL;

  public static final String SERIALIZED_NAME_LABEL_FORMAT = "label_format";
  @SerializedName(SERIALIZED_NAME_LABEL_FORMAT)
  private LabelFormat labelFormat = LabelFormat.PDF;

  public static final String SERIALIZED_NAME_LABEL_ID = "label_id";
  @SerializedName(SERIALIZED_NAME_LABEL_ID)
  private String labelId;

  public static final String SERIALIZED_NAME_LABEL_IMAGE_ID = "label_image_id";
  @SerializedName(SERIALIZED_NAME_LABEL_IMAGE_ID)
  private String labelImageId;

  public static final String SERIALIZED_NAME_LABEL_LAYOUT = "label_layout";
  @SerializedName(SERIALIZED_NAME_LABEL_LAYOUT)
  private LabelLayout labelLayout = LabelLayout._4X6;

  public static final String SERIALIZED_NAME_OUTBOUND_LABEL_ID = "outbound_label_id";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_LABEL_ID)
  private String outboundLabelId;

  public static final String SERIALIZED_NAME_PACKAGE_CODE = "package_code";
  @SerializedName(SERIALIZED_NAME_PACKAGE_CODE)
  private String packageCode;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<ModelPackage> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_RMA_NUMBER = "rma_number";
  @SerializedName(SERIALIZED_NAME_RMA_NUMBER)
  private String rmaNumber;

  public static final String SERIALIZED_NAME_SERVICE_CODE = "service_code";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODE)
  private String serviceCode;

  public static final String SERIALIZED_NAME_SHIP_DATE = "ship_date";
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public static final String SERIALIZED_NAME_SHIPMENT = "shipment";
  @SerializedName(SERIALIZED_NAME_SHIPMENT)
  private Shipment shipment;

  public static final String SERIALIZED_NAME_SHIPMENT_COST = "shipment_cost";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_COST)
  private MonetaryValue shipmentCost;

  public static final String SERIALIZED_NAME_SHIPMENT_ID = "shipment_id";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_ID)
  private String shipmentId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LabelStatus status;

  public static final String SERIALIZED_NAME_TEST_LABEL = "test_label";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TEST_LABEL)
  private Boolean testLabel = false;

  public static final String SERIALIZED_NAME_TRACKABLE = "trackable";
  @SerializedName(SERIALIZED_NAME_TRACKABLE)
  private Boolean trackable;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "tracking_number";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public static final String SERIALIZED_NAME_TRACKING_STATUS = "tracking_status";
  @SerializedName(SERIALIZED_NAME_TRACKING_STATUS)
  private TrackingStatus trackingStatus;

  public static final String SERIALIZED_NAME_VALIDATE_ADDRESS = "validate_address";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ADDRESS)
  private ValidateAddress validateAddress = ValidateAddress.VALIDATE_AND_CLEAN;

  public static final String SERIALIZED_NAME_VOIDED = "voided";
  @SerializedName(SERIALIZED_NAME_VOIDED)
  private Boolean voided;

  public static final String SERIALIZED_NAME_VOIDED_AT = "voided_at";
  @SerializedName(SERIALIZED_NAME_VOIDED_AT)
  private OffsetDateTime voidedAt;

  public Label() {
  }

  public Label(
     List<AlternativeIdentifier> alternativeIdentifiers, 
     String batchId, 
     String carrierCode, 
     String carrierId, 
     OffsetDateTime createdAt, 
     Link formDownload, 
     Link insuranceClaim, 
     MonetaryValue insuranceCost, 
     Boolean isInternational, 
     LabelDownload labelDownload, 
     String labelId, 
     String packageCode, 
     List<ModelPackage> packages, 
     String serviceCode, 
     OffsetDateTime shipDate, 
     MonetaryValue shipmentCost, 
     String shipmentId, 
     LabelStatus status, 
     Boolean trackable, 
     String trackingNumber, 
     TrackingStatus trackingStatus, 
     Boolean voided, 
     OffsetDateTime voidedAt
  ) {
    this();
    this.alternativeIdentifiers = alternativeIdentifiers;
    this.batchId = batchId;
    this.carrierCode = carrierCode;
    this.carrierId = carrierId;
    this.createdAt = createdAt;
    this.formDownload = formDownload;
    this.insuranceClaim = insuranceClaim;
    this.insuranceCost = insuranceCost;
    this.isInternational = isInternational;
    this.labelDownload = labelDownload;
    this.labelId = labelId;
    this.packageCode = packageCode;
    this.packages = packages;
    this.serviceCode = serviceCode;
    this.shipDate = shipDate;
    this.shipmentCost = shipmentCost;
    this.shipmentId = shipmentId;
    this.status = status;
    this.trackable = trackable;
    this.trackingNumber = trackingNumber;
    this.trackingStatus = trackingStatus;
    this.voided = voided;
    this.voidedAt = voidedAt;
  }

  /**
   * Additional information some carriers may provide by which to identify a given label in their system.  
   * @return alternativeIdentifiers
   */
  @javax.annotation.Nullable
  public List<AlternativeIdentifier> getAlternativeIdentifiers() {
    return alternativeIdentifiers;
  }



  /**
   * If this label was created as part of a [batch](https://www.shipengine.com/docs/labels/bulk/), then this is the unique ID of that batch. 
   * @return batchId
   */
  @javax.annotation.Nullable
  public String getBatchId() {
    return batchId;
  }



  /**
   * The [shipping carrier](https://www.shipengine.com/docs/carriers/setup/) who will ship the package, such as &#x60;fedex&#x60;, &#x60;dhl_express&#x60;, &#x60;stamps_com&#x60;, etc. 
   * @return carrierCode
   */
  @javax.annotation.Nullable
  public String getCarrierCode() {
    return carrierCode;
  }



  /**
   * The unique ID of the [carrier account](https://www.shipengine.com/docs/carriers/setup/) that was used to create this label 
   * @return carrierId
   */
  @javax.annotation.Nullable
  public String getCarrierId() {
    return carrierId;
  }



  public Label chargeEvent(LabelChargeEvent chargeEvent) {
    this.chargeEvent = chargeEvent;
    return this;
  }

  /**
   * The label charge event. 
   * @return chargeEvent
   */
  @javax.annotation.Nullable
  public LabelChargeEvent getChargeEvent() {
    return chargeEvent;
  }

  public void setChargeEvent(LabelChargeEvent chargeEvent) {
    this.chargeEvent = chargeEvent;
  }


  /**
   * The date and time that the label was created in ShipEngine.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public Label displayScheme(DisplayScheme displayScheme) {
    this.displayScheme = displayScheme;
    return this;
  }

  /**
   * The display format that the label should be shown in.
   * @return displayScheme
   */
  @javax.annotation.Nullable
  public DisplayScheme getDisplayScheme() {
    return displayScheme;
  }

  public void setDisplayScheme(DisplayScheme displayScheme) {
    this.displayScheme = displayScheme;
  }


  /**
   * The link to download the customs form (a.k.a. commercial invoice) for this shipment, if any.  Forms are in PDF format. This field is null if the shipment does not require a customs form, or if the carrier does not support it. 
   * @return formDownload
   */
  @javax.annotation.Nullable
  public Link getFormDownload() {
    return formDownload;
  }



  /**
   * The link to submit an insurance claim for the shipment.  This field is null if the shipment is not insured or if the insurance provider does not support online claim submission. 
   * @return insuranceClaim
   */
  @javax.annotation.Nullable
  public Link getInsuranceClaim() {
    return insuranceClaim;
  }



  /**
   * The insurance cost for this package.  Add this to the &#x60;shipment_cost&#x60; field to get the total cost. 
   * @return insuranceCost
   */
  @javax.annotation.Nullable
  public MonetaryValue getInsuranceCost() {
    return insuranceCost;
  }



  /**
   * Indicates whether this is an international shipment.  That is, the originating country and destination country are different. 
   * @return isInternational
   */
  @javax.annotation.Nullable
  public Boolean getIsInternational() {
    return isInternational;
  }



  public Label isReturnLabel(Boolean isReturnLabel) {
    this.isReturnLabel = isReturnLabel;
    return this;
  }

  /**
   * Indicates whether this is a return label.  You may also want to set the &#x60;rma_number&#x60; so you know what is being returned. 
   * @return isReturnLabel
   */
  @javax.annotation.Nullable
  public Boolean getIsReturnLabel() {
    return isReturnLabel;
  }

  public void setIsReturnLabel(Boolean isReturnLabel) {
    this.isReturnLabel = isReturnLabel;
  }


  /**
   * Get labelDownload
   * @return labelDownload
   */
  @javax.annotation.Nullable
  public LabelDownload getLabelDownload() {
    return labelDownload;
  }



  public Label labelDownloadType(LabelDownloadType labelDownloadType) {
    this.labelDownloadType = labelDownloadType;
    return this;
  }

  /**
   * Get labelDownloadType
   * @return labelDownloadType
   */
  @javax.annotation.Nullable
  public LabelDownloadType getLabelDownloadType() {
    return labelDownloadType;
  }

  public void setLabelDownloadType(LabelDownloadType labelDownloadType) {
    this.labelDownloadType = labelDownloadType;
  }


  public Label labelFormat(LabelFormat labelFormat) {
    this.labelFormat = labelFormat;
    return this;
  }

  /**
   * The file format that you want the label to be in.  We recommend &#x60;pdf&#x60; format because it is supported by all carriers, whereas some carriers do not support the &#x60;png&#x60; or &#x60;zpl&#x60; formats. 
   * @return labelFormat
   */
  @javax.annotation.Nullable
  public LabelFormat getLabelFormat() {
    return labelFormat;
  }

  public void setLabelFormat(LabelFormat labelFormat) {
    this.labelFormat = labelFormat;
  }


  /**
   * A string that uniquely identifies the label. This ID is generated by ShipEngine when the label is created. 
   * @return labelId
   */
  @javax.annotation.Nullable
  public String getLabelId() {
    return labelId;
  }



  public Label labelImageId(String labelImageId) {
    this.labelImageId = labelImageId;
    return this;
  }

  /**
   * The label image resource that was used to create a custom label image.
   * @return labelImageId
   */
  @javax.annotation.Nullable
  public String getLabelImageId() {
    return labelImageId;
  }

  public void setLabelImageId(String labelImageId) {
    this.labelImageId = labelImageId;
  }


  public Label labelLayout(LabelLayout labelLayout) {
    this.labelLayout = labelLayout;
    return this;
  }

  /**
   * The layout (size) that you want the label to be in.  The &#x60;label_format&#x60; determines which sizes are allowed.  &#x60;4x6&#x60; is supported for all label formats, whereas &#x60;letter&#x60; (8.5\&quot; x 11\&quot;) is only supported for &#x60;pdf&#x60; format. 
   * @return labelLayout
   */
  @javax.annotation.Nullable
  public LabelLayout getLabelLayout() {
    return labelLayout;
  }

  public void setLabelLayout(LabelLayout labelLayout) {
    this.labelLayout = labelLayout;
  }


  public Label outboundLabelId(String outboundLabelId) {
    this.outboundLabelId = outboundLabelId;
    return this;
  }

  /**
   * The &#x60;label_id&#x60; of the original (outgoing) label that the return label is for. This associates the two labels together, which is required by some carriers. 
   * @return outboundLabelId
   */
  @javax.annotation.Nullable
  public String getOutboundLabelId() {
    return outboundLabelId;
  }

  public void setOutboundLabelId(String outboundLabelId) {
    this.outboundLabelId = outboundLabelId;
  }


  /**
   * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as &#x60;thick_envelope&#x60;, &#x60;small_flat_rate_box&#x60;, &#x60;large_package&#x60;, etc.  The code &#x60;package&#x60; indicates a custom or unknown package type. 
   * @return packageCode
   */
  @javax.annotation.Nullable
  public String getPackageCode() {
    return packageCode;
  }



  /**
   * The label&#39;s package(s).  &gt; **Note:** Some carriers only allow one package per label.  If you attempt to create a multi-package label for a carrier that doesn&#39;t allow it, an error will be returned. 
   * @return packages
   */
  @javax.annotation.Nullable
  public List<ModelPackage> getPackages() {
    return packages;
  }



  public Label rmaNumber(String rmaNumber) {
    this.rmaNumber = rmaNumber;
    return this;
  }

  /**
   * An optional Return Merchandise Authorization number.  This field is useful for return labels.  You can set it to any string value. 
   * @return rmaNumber
   */
  @javax.annotation.Nullable
  public String getRmaNumber() {
    return rmaNumber;
  }

  public void setRmaNumber(String rmaNumber) {
    this.rmaNumber = rmaNumber;
  }


  /**
   * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as &#x60;fedex_ground&#x60;, &#x60;usps_first_class_mail&#x60;, &#x60;flat_rate_envelope&#x60;, etc. 
   * @return serviceCode
   */
  @javax.annotation.Nullable
  public String getServiceCode() {
    return serviceCode;
  }



  /**
   * The date that the package was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead. 
   * @return shipDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShipDate() {
    return shipDate;
  }



  public Label shipment(Shipment shipment) {
    this.shipment = shipment;
    return this;
  }

  /**
   * The shipment information used to generate the label
   * @return shipment
   */
  @javax.annotation.Nullable
  public Shipment getShipment() {
    return shipment;
  }

  public void setShipment(Shipment shipment) {
    this.shipment = shipment;
  }


  /**
   * The cost of shipping, delivery confirmation, and other carrier charges.  This amount **does not** include insurance costs. 
   * @return shipmentCost
   */
  @javax.annotation.Nullable
  public MonetaryValue getShipmentCost() {
    return shipmentCost;
  }



  /**
   * The shipment that this label is for.  ShipEngine can create a shipment for you automatically when you [create a label](https://www.shipengine.com/docs/labels/create-a-label/), or you can [create your own shipment](https://www.shipengine.com/docs/shipping/create-a-shipment/) and then [use it to print a label](https://www.shipengine.com/docs/labels/create-from-shipment/) 
   * @return shipmentId
   */
  @javax.annotation.Nullable
  public String getShipmentId() {
    return shipmentId;
  }



  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public LabelStatus getStatus() {
    return status;
  }



  @Deprecated
  public Label testLabel(Boolean testLabel) {
    this.testLabel = testLabel;
    return this;
  }

  /**
   * Indicate if this label is being used only for testing purposes. If true, then no charge will be added to your account.
   * @return testLabel
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getTestLabel() {
    return testLabel;
  }

  @Deprecated
  public void setTestLabel(Boolean testLabel) {
    this.testLabel = testLabel;
  }


  /**
   * Indicates whether the shipment is trackable, in which case the &#x60;tracking_status&#x60; field will reflect the current status and each package will have a &#x60;tracking_number&#x60;. 
   * @return trackable
   */
  @javax.annotation.Nullable
  public Boolean getTrackable() {
    return trackable;
  }



  /**
   * The tracking number for the package. Tracking number formats vary across carriers.
   * @return trackingNumber
   */
  @javax.annotation.Nullable
  public String getTrackingNumber() {
    return trackingNumber;
  }



  /**
   * The current status of the package, such as &#x60;in_transit&#x60; or &#x60;delivered&#x60;
   * @return trackingStatus
   */
  @javax.annotation.Nullable
  public TrackingStatus getTrackingStatus() {
    return trackingStatus;
  }



  public Label validateAddress(ValidateAddress validateAddress) {
    this.validateAddress = validateAddress;
    return this;
  }

  /**
   * Get validateAddress
   * @return validateAddress
   */
  @javax.annotation.Nullable
  public ValidateAddress getValidateAddress() {
    return validateAddress;
  }

  public void setValidateAddress(ValidateAddress validateAddress) {
    this.validateAddress = validateAddress;
  }


  /**
   * Indicates whether the label has been [voided](https://www.shipengine.com/docs/labels/voiding/) 
   * @return voided
   */
  @javax.annotation.Nullable
  public Boolean getVoided() {
    return voided;
  }



  /**
   * The date and time that the label was [voided](https://www.shipengine.com/docs/labels/voiding/), or &#x60;null&#x60; if the label has not been voided 
   * @return voidedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getVoidedAt() {
    return voidedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Label label = (Label) o;
    return Objects.equals(this.alternativeIdentifiers, label.alternativeIdentifiers) &&
        Objects.equals(this.batchId, label.batchId) &&
        Objects.equals(this.carrierCode, label.carrierCode) &&
        Objects.equals(this.carrierId, label.carrierId) &&
        Objects.equals(this.chargeEvent, label.chargeEvent) &&
        Objects.equals(this.createdAt, label.createdAt) &&
        Objects.equals(this.displayScheme, label.displayScheme) &&
        Objects.equals(this.formDownload, label.formDownload) &&
        Objects.equals(this.insuranceClaim, label.insuranceClaim) &&
        Objects.equals(this.insuranceCost, label.insuranceCost) &&
        Objects.equals(this.isInternational, label.isInternational) &&
        Objects.equals(this.isReturnLabel, label.isReturnLabel) &&
        Objects.equals(this.labelDownload, label.labelDownload) &&
        Objects.equals(this.labelDownloadType, label.labelDownloadType) &&
        Objects.equals(this.labelFormat, label.labelFormat) &&
        Objects.equals(this.labelId, label.labelId) &&
        Objects.equals(this.labelImageId, label.labelImageId) &&
        Objects.equals(this.labelLayout, label.labelLayout) &&
        Objects.equals(this.outboundLabelId, label.outboundLabelId) &&
        Objects.equals(this.packageCode, label.packageCode) &&
        Objects.equals(this.packages, label.packages) &&
        Objects.equals(this.rmaNumber, label.rmaNumber) &&
        Objects.equals(this.serviceCode, label.serviceCode) &&
        Objects.equals(this.shipDate, label.shipDate) &&
        Objects.equals(this.shipment, label.shipment) &&
        Objects.equals(this.shipmentCost, label.shipmentCost) &&
        Objects.equals(this.shipmentId, label.shipmentId) &&
        Objects.equals(this.status, label.status) &&
        Objects.equals(this.testLabel, label.testLabel) &&
        Objects.equals(this.trackable, label.trackable) &&
        Objects.equals(this.trackingNumber, label.trackingNumber) &&
        Objects.equals(this.trackingStatus, label.trackingStatus) &&
        Objects.equals(this.validateAddress, label.validateAddress) &&
        Objects.equals(this.voided, label.voided) &&
        Objects.equals(this.voidedAt, label.voidedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternativeIdentifiers, batchId, carrierCode, carrierId, chargeEvent, createdAt, displayScheme, formDownload, insuranceClaim, insuranceCost, isInternational, isReturnLabel, labelDownload, labelDownloadType, labelFormat, labelId, labelImageId, labelLayout, outboundLabelId, packageCode, packages, rmaNumber, serviceCode, shipDate, shipment, shipmentCost, shipmentId, status, testLabel, trackable, trackingNumber, trackingStatus, validateAddress, voided, voidedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Label {\n");
    sb.append("    alternativeIdentifiers: ").append(toIndentedString(alternativeIdentifiers)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    chargeEvent: ").append(toIndentedString(chargeEvent)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    displayScheme: ").append(toIndentedString(displayScheme)).append("\n");
    sb.append("    formDownload: ").append(toIndentedString(formDownload)).append("\n");
    sb.append("    insuranceClaim: ").append(toIndentedString(insuranceClaim)).append("\n");
    sb.append("    insuranceCost: ").append(toIndentedString(insuranceCost)).append("\n");
    sb.append("    isInternational: ").append(toIndentedString(isInternational)).append("\n");
    sb.append("    isReturnLabel: ").append(toIndentedString(isReturnLabel)).append("\n");
    sb.append("    labelDownload: ").append(toIndentedString(labelDownload)).append("\n");
    sb.append("    labelDownloadType: ").append(toIndentedString(labelDownloadType)).append("\n");
    sb.append("    labelFormat: ").append(toIndentedString(labelFormat)).append("\n");
    sb.append("    labelId: ").append(toIndentedString(labelId)).append("\n");
    sb.append("    labelImageId: ").append(toIndentedString(labelImageId)).append("\n");
    sb.append("    labelLayout: ").append(toIndentedString(labelLayout)).append("\n");
    sb.append("    outboundLabelId: ").append(toIndentedString(outboundLabelId)).append("\n");
    sb.append("    packageCode: ").append(toIndentedString(packageCode)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    rmaNumber: ").append(toIndentedString(rmaNumber)).append("\n");
    sb.append("    serviceCode: ").append(toIndentedString(serviceCode)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    shipment: ").append(toIndentedString(shipment)).append("\n");
    sb.append("    shipmentCost: ").append(toIndentedString(shipmentCost)).append("\n");
    sb.append("    shipmentId: ").append(toIndentedString(shipmentId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    testLabel: ").append(toIndentedString(testLabel)).append("\n");
    sb.append("    trackable: ").append(toIndentedString(trackable)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    trackingStatus: ").append(toIndentedString(trackingStatus)).append("\n");
    sb.append("    validateAddress: ").append(toIndentedString(validateAddress)).append("\n");
    sb.append("    voided: ").append(toIndentedString(voided)).append("\n");
    sb.append("    voidedAt: ").append(toIndentedString(voidedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternative_identifiers");
    openapiFields.add("batch_id");
    openapiFields.add("carrier_code");
    openapiFields.add("carrier_id");
    openapiFields.add("charge_event");
    openapiFields.add("created_at");
    openapiFields.add("display_scheme");
    openapiFields.add("form_download");
    openapiFields.add("insurance_claim");
    openapiFields.add("insurance_cost");
    openapiFields.add("is_international");
    openapiFields.add("is_return_label");
    openapiFields.add("label_download");
    openapiFields.add("label_download_type");
    openapiFields.add("label_format");
    openapiFields.add("label_id");
    openapiFields.add("label_image_id");
    openapiFields.add("label_layout");
    openapiFields.add("outbound_label_id");
    openapiFields.add("package_code");
    openapiFields.add("packages");
    openapiFields.add("rma_number");
    openapiFields.add("service_code");
    openapiFields.add("ship_date");
    openapiFields.add("shipment");
    openapiFields.add("shipment_cost");
    openapiFields.add("shipment_id");
    openapiFields.add("status");
    openapiFields.add("test_label");
    openapiFields.add("trackable");
    openapiFields.add("tracking_number");
    openapiFields.add("tracking_status");
    openapiFields.add("validate_address");
    openapiFields.add("voided");
    openapiFields.add("voided_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Label
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Label.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Label is not found in the empty JSON string", Label.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Label.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Label` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("alternative_identifiers") != null && !jsonObj.get("alternative_identifiers").isJsonNull()) {
        JsonArray jsonArrayalternativeIdentifiers = jsonObj.getAsJsonArray("alternative_identifiers");
        if (jsonArrayalternativeIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alternative_identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alternative_identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("alternative_identifiers").toString()));
          }

          // validate the optional field `alternative_identifiers` (array)
          for (int i = 0; i < jsonArrayalternativeIdentifiers.size(); i++) {
            AlternativeIdentifier.validateJsonElement(jsonArrayalternativeIdentifiers.get(i));
          };
        }
      }
      if ((jsonObj.get("batch_id") != null && !jsonObj.get("batch_id").isJsonNull()) && !jsonObj.get("batch_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batch_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batch_id").toString()));
      }
      if ((jsonObj.get("carrier_code") != null && !jsonObj.get("carrier_code").isJsonNull()) && !jsonObj.get("carrier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_code").toString()));
      }
      if ((jsonObj.get("carrier_id") != null && !jsonObj.get("carrier_id").isJsonNull()) && !jsonObj.get("carrier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_id").toString()));
      }
      // validate the optional field `charge_event`
      if (jsonObj.get("charge_event") != null && !jsonObj.get("charge_event").isJsonNull()) {
        LabelChargeEvent.validateJsonElement(jsonObj.get("charge_event"));
      }
      // validate the optional field `display_scheme`
      if (jsonObj.get("display_scheme") != null && !jsonObj.get("display_scheme").isJsonNull()) {
        DisplayScheme.validateJsonElement(jsonObj.get("display_scheme"));
      }
      // validate the optional field `form_download`
      if (jsonObj.get("form_download") != null && !jsonObj.get("form_download").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("form_download"));
      }
      // validate the optional field `insurance_claim`
      if (jsonObj.get("insurance_claim") != null && !jsonObj.get("insurance_claim").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("insurance_claim"));
      }
      // validate the optional field `insurance_cost`
      if (jsonObj.get("insurance_cost") != null && !jsonObj.get("insurance_cost").isJsonNull()) {
        MonetaryValue.validateJsonElement(jsonObj.get("insurance_cost"));
      }
      // validate the optional field `label_download`
      if (jsonObj.get("label_download") != null && !jsonObj.get("label_download").isJsonNull()) {
        LabelDownload.validateJsonElement(jsonObj.get("label_download"));
      }
      // validate the optional field `label_download_type`
      if (jsonObj.get("label_download_type") != null && !jsonObj.get("label_download_type").isJsonNull()) {
        LabelDownloadType.validateJsonElement(jsonObj.get("label_download_type"));
      }
      // validate the optional field `label_format`
      if (jsonObj.get("label_format") != null && !jsonObj.get("label_format").isJsonNull()) {
        LabelFormat.validateJsonElement(jsonObj.get("label_format"));
      }
      if ((jsonObj.get("label_id") != null && !jsonObj.get("label_id").isJsonNull()) && !jsonObj.get("label_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label_id").toString()));
      }
      if ((jsonObj.get("label_image_id") != null && !jsonObj.get("label_image_id").isJsonNull()) && !jsonObj.get("label_image_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_image_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label_image_id").toString()));
      }
      // validate the optional field `label_layout`
      if (jsonObj.get("label_layout") != null && !jsonObj.get("label_layout").isJsonNull()) {
        LabelLayout.validateJsonElement(jsonObj.get("label_layout"));
      }
      if ((jsonObj.get("outbound_label_id") != null && !jsonObj.get("outbound_label_id").isJsonNull()) && !jsonObj.get("outbound_label_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outbound_label_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outbound_label_id").toString()));
      }
      if ((jsonObj.get("package_code") != null && !jsonObj.get("package_code").isJsonNull()) && !jsonObj.get("package_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_code").toString()));
      }
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            ModelPackage.validateJsonElement(jsonArraypackages.get(i));
          };
        }
      }
      if ((jsonObj.get("rma_number") != null && !jsonObj.get("rma_number").isJsonNull()) && !jsonObj.get("rma_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rma_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rma_number").toString()));
      }
      if ((jsonObj.get("service_code") != null && !jsonObj.get("service_code").isJsonNull()) && !jsonObj.get("service_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_code").toString()));
      }
      // validate the optional field `shipment`
      if (jsonObj.get("shipment") != null && !jsonObj.get("shipment").isJsonNull()) {
        Shipment.validateJsonElement(jsonObj.get("shipment"));
      }
      // validate the optional field `shipment_cost`
      if (jsonObj.get("shipment_cost") != null && !jsonObj.get("shipment_cost").isJsonNull()) {
        MonetaryValue.validateJsonElement(jsonObj.get("shipment_cost"));
      }
      if ((jsonObj.get("shipment_id") != null && !jsonObj.get("shipment_id").isJsonNull()) && !jsonObj.get("shipment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipment_id").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        LabelStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("tracking_number") != null && !jsonObj.get("tracking_number").isJsonNull()) && !jsonObj.get("tracking_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_number").toString()));
      }
      // validate the optional field `tracking_status`
      if (jsonObj.get("tracking_status") != null && !jsonObj.get("tracking_status").isJsonNull()) {
        TrackingStatus.validateJsonElement(jsonObj.get("tracking_status"));
      }
      // validate the optional field `validate_address`
      if (jsonObj.get("validate_address") != null && !jsonObj.get("validate_address").isJsonNull()) {
        ValidateAddress.validateJsonElement(jsonObj.get("validate_address"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Label.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Label' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Label> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Label.class));

       return (TypeAdapter<T>) new TypeAdapter<Label>() {
           @Override
           public void write(JsonWriter out, Label value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Label read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Label given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Label
   * @throws IOException if the JSON string is invalid with respect to Label
   */
  public static Label fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Label.class);
  }

  /**
   * Convert an instance of Label to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

