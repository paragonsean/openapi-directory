/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateManifestRequestBody;
import org.openapitools.client.model.CreateManifestResponseBody;
import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.GetManifestByIdResponseBody;
import org.openapitools.client.model.ListManifestsResponseBody;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManifestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManifestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManifestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createManifest
     * @param createManifestRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createManifestCall(CreateManifestRequestBody createManifestRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createManifestRequestBody;

        // create path and map variables
        String localVarPath = "/v1/manifests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createManifestValidateBeforeCall(CreateManifestRequestBody createManifestRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createManifestRequestBody' is set
        if (createManifestRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createManifestRequestBody' when calling createManifest(Async)");
        }

        return createManifestCall(createManifestRequestBody, _callback);

    }

    /**
     * Create Manifest
     * Each ShipEngine manifest is created for a specific warehouse, so you&#39;ll need to provide the warehouse_id rather than the ship_from address. You can create a warehouse for each location that you want to create manifests for. 
     * @param createManifestRequestBody  (required)
     * @return CreateManifestResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateManifestResponseBody createManifest(CreateManifestRequestBody createManifestRequestBody) throws ApiException {
        ApiResponse<CreateManifestResponseBody> localVarResp = createManifestWithHttpInfo(createManifestRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Manifest
     * Each ShipEngine manifest is created for a specific warehouse, so you&#39;ll need to provide the warehouse_id rather than the ship_from address. You can create a warehouse for each location that you want to create manifests for. 
     * @param createManifestRequestBody  (required)
     * @return ApiResponse&lt;CreateManifestResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateManifestResponseBody> createManifestWithHttpInfo(CreateManifestRequestBody createManifestRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createManifestValidateBeforeCall(createManifestRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateManifestResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Manifest (asynchronously)
     * Each ShipEngine manifest is created for a specific warehouse, so you&#39;ll need to provide the warehouse_id rather than the ship_from address. You can create a warehouse for each location that you want to create manifests for. 
     * @param createManifestRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createManifestAsync(CreateManifestRequestBody createManifestRequestBody, final ApiCallback<CreateManifestResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createManifestValidateBeforeCall(createManifestRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateManifestResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getManifestById
     * @param manifestId The Manifest Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManifestByIdCall(String manifestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/manifests/{manifest_id}"
            .replace("{" + "manifest_id" + "}", localVarApiClient.escapeString(manifestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManifestByIdValidateBeforeCall(String manifestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'manifestId' is set
        if (manifestId == null) {
            throw new ApiException("Missing the required parameter 'manifestId' when calling getManifestById(Async)");
        }

        return getManifestByIdCall(manifestId, _callback);

    }

    /**
     * Get Manifest By Id
     * Get Manifest By Id
     * @param manifestId The Manifest Id (required)
     * @return GetManifestByIdResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public GetManifestByIdResponseBody getManifestById(String manifestId) throws ApiException {
        ApiResponse<GetManifestByIdResponseBody> localVarResp = getManifestByIdWithHttpInfo(manifestId);
        return localVarResp.getData();
    }

    /**
     * Get Manifest By Id
     * Get Manifest By Id
     * @param manifestId The Manifest Id (required)
     * @return ApiResponse&lt;GetManifestByIdResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetManifestByIdResponseBody> getManifestByIdWithHttpInfo(String manifestId) throws ApiException {
        okhttp3.Call localVarCall = getManifestByIdValidateBeforeCall(manifestId, null);
        Type localVarReturnType = new TypeToken<GetManifestByIdResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Manifest By Id (asynchronously)
     * Get Manifest By Id
     * @param manifestId The Manifest Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManifestByIdAsync(String manifestId, final ApiCallback<GetManifestByIdResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManifestByIdValidateBeforeCall(manifestId, _callback);
        Type localVarReturnType = new TypeToken<GetManifestByIdResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getManifestRequestById
     * @param manifestRequestId The Manifest Request Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManifestRequestByIdCall(String manifestRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/manifests/requests/{manifest_request_id}"
            .replace("{" + "manifest_request_id" + "}", localVarApiClient.escapeString(manifestRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManifestRequestByIdValidateBeforeCall(String manifestRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'manifestRequestId' is set
        if (manifestRequestId == null) {
            throw new ApiException("Missing the required parameter 'manifestRequestId' when calling getManifestRequestById(Async)");
        }

        return getManifestRequestByIdCall(manifestRequestId, _callback);

    }

    /**
     * Get Manifest Request By Id
     * Get Manifest Request By Id
     * @param manifestRequestId The Manifest Request Id (required)
     * @return CreateManifestResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateManifestResponseBody getManifestRequestById(String manifestRequestId) throws ApiException {
        ApiResponse<CreateManifestResponseBody> localVarResp = getManifestRequestByIdWithHttpInfo(manifestRequestId);
        return localVarResp.getData();
    }

    /**
     * Get Manifest Request By Id
     * Get Manifest Request By Id
     * @param manifestRequestId The Manifest Request Id (required)
     * @return ApiResponse&lt;CreateManifestResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateManifestResponseBody> getManifestRequestByIdWithHttpInfo(String manifestRequestId) throws ApiException {
        okhttp3.Call localVarCall = getManifestRequestByIdValidateBeforeCall(manifestRequestId, null);
        Type localVarReturnType = new TypeToken<CreateManifestResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Manifest Request By Id (asynchronously)
     * Get Manifest Request By Id
     * @param manifestRequestId The Manifest Request Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManifestRequestByIdAsync(String manifestRequestId, final ApiCallback<CreateManifestResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManifestRequestByIdValidateBeforeCall(manifestRequestId, _callback);
        Type localVarReturnType = new TypeToken<CreateManifestResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listManifests
     * @param warehouseId Warehouse ID (optional)
     * @param shipDateStart ship date start range (optional)
     * @param shipDateEnd ship date end range (optional)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param createdAtEnd Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param carrierId Carrier ID (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param labelIds  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listManifestsCall(String warehouseId, OffsetDateTime shipDateStart, OffsetDateTime shipDateEnd, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, String carrierId, Integer page, Integer pageSize, List<String> labelIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/manifests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (warehouseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("warehouse_id", warehouseId));
        }

        if (shipDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_date_start", shipDateStart));
        }

        if (shipDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_date_end", shipDateEnd));
        }

        if (createdAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_start", createdAtStart));
        }

        if (createdAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_end", createdAtEnd));
        }

        if (carrierId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carrier_id", carrierId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (labelIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "label_ids", labelIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listManifestsValidateBeforeCall(String warehouseId, OffsetDateTime shipDateStart, OffsetDateTime shipDateEnd, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, String carrierId, Integer page, Integer pageSize, List<String> labelIds, final ApiCallback _callback) throws ApiException {
        return listManifestsCall(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds, _callback);

    }

    /**
     * List Manifests
     * Similar to querying shipments, we allow you to query manifests since there will likely be a large number over a long period of time.
     * @param warehouseId Warehouse ID (optional)
     * @param shipDateStart ship date start range (optional)
     * @param shipDateEnd ship date end range (optional)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param createdAtEnd Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param carrierId Carrier ID (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param labelIds  (optional)
     * @return ListManifestsResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ListManifestsResponseBody listManifests(String warehouseId, OffsetDateTime shipDateStart, OffsetDateTime shipDateEnd, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, String carrierId, Integer page, Integer pageSize, List<String> labelIds) throws ApiException {
        ApiResponse<ListManifestsResponseBody> localVarResp = listManifestsWithHttpInfo(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds);
        return localVarResp.getData();
    }

    /**
     * List Manifests
     * Similar to querying shipments, we allow you to query manifests since there will likely be a large number over a long period of time.
     * @param warehouseId Warehouse ID (optional)
     * @param shipDateStart ship date start range (optional)
     * @param shipDateEnd ship date end range (optional)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param createdAtEnd Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param carrierId Carrier ID (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param labelIds  (optional)
     * @return ApiResponse&lt;ListManifestsResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListManifestsResponseBody> listManifestsWithHttpInfo(String warehouseId, OffsetDateTime shipDateStart, OffsetDateTime shipDateEnd, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, String carrierId, Integer page, Integer pageSize, List<String> labelIds) throws ApiException {
        okhttp3.Call localVarCall = listManifestsValidateBeforeCall(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds, null);
        Type localVarReturnType = new TypeToken<ListManifestsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Manifests (asynchronously)
     * Similar to querying shipments, we allow you to query manifests since there will likely be a large number over a long period of time.
     * @param warehouseId Warehouse ID (optional)
     * @param shipDateStart ship date start range (optional)
     * @param shipDateEnd ship date end range (optional)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param createdAtEnd Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param carrierId Carrier ID (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param labelIds  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listManifestsAsync(String warehouseId, OffsetDateTime shipDateStart, OffsetDateTime shipDateEnd, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, String carrierId, Integer page, Integer pageSize, List<String> labelIds, final ApiCallback<ListManifestsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listManifestsValidateBeforeCall(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds, _callback);
        Type localVarReturnType = new TypeToken<ListManifestsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
