/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Royal Mail account information request body
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectRoyalMailRequestBody {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_CONTACT_NAME = "contact_name";
  @SerializedName(SERIALIZED_NAME_CONTACT_NAME)
  private String contactName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_OBA_EMAIL = "oba_email";
  @SerializedName(SERIALIZED_NAME_OBA_EMAIL)
  private String obaEmail;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STREET_LINE1 = "street_line1";
  @SerializedName(SERIALIZED_NAME_STREET_LINE1)
  private String streetLine1;

  public static final String SERIALIZED_NAME_STREET_LINE2 = "street_line2";
  @SerializedName(SERIALIZED_NAME_STREET_LINE2)
  private String streetLine2;

  public static final String SERIALIZED_NAME_STREET_LINE3 = "street_line3";
  @SerializedName(SERIALIZED_NAME_STREET_LINE3)
  private String streetLine3;

  public ConnectRoyalMailRequestBody() {
  }

  public ConnectRoyalMailRequestBody accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Account number
   * @return accountNumber
   */
  @javax.annotation.Nonnull
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public ConnectRoyalMailRequestBody city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public ConnectRoyalMailRequestBody companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Company name
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public ConnectRoyalMailRequestBody contactName(String contactName) {
    this.contactName = contactName;
    return this;
  }

  /**
   * Contact name
   * @return contactName
   */
  @javax.annotation.Nonnull
  public String getContactName() {
    return contactName;
  }

  public void setContactName(String contactName) {
    this.contactName = contactName;
  }


  public ConnectRoyalMailRequestBody email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ConnectRoyalMailRequestBody nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * Nickname
   * @return nickname
   */
  @javax.annotation.Nonnull
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public ConnectRoyalMailRequestBody obaEmail(String obaEmail) {
    this.obaEmail = obaEmail;
    return this;
  }

  /**
   * The oba email address
   * @return obaEmail
   */
  @javax.annotation.Nullable
  public String getObaEmail() {
    return obaEmail;
  }

  public void setObaEmail(String obaEmail) {
    this.obaEmail = obaEmail;
  }


  public ConnectRoyalMailRequestBody phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public ConnectRoyalMailRequestBody postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public ConnectRoyalMailRequestBody streetLine1(String streetLine1) {
    this.streetLine1 = streetLine1;
    return this;
  }

  /**
   * Street line1
   * @return streetLine1
   */
  @javax.annotation.Nullable
  public String getStreetLine1() {
    return streetLine1;
  }

  public void setStreetLine1(String streetLine1) {
    this.streetLine1 = streetLine1;
  }


  public ConnectRoyalMailRequestBody streetLine2(String streetLine2) {
    this.streetLine2 = streetLine2;
    return this;
  }

  /**
   * Street line2
   * @return streetLine2
   */
  @javax.annotation.Nullable
  public String getStreetLine2() {
    return streetLine2;
  }

  public void setStreetLine2(String streetLine2) {
    this.streetLine2 = streetLine2;
  }


  public ConnectRoyalMailRequestBody streetLine3(String streetLine3) {
    this.streetLine3 = streetLine3;
    return this;
  }

  /**
   * Street line3
   * @return streetLine3
   */
  @javax.annotation.Nullable
  public String getStreetLine3() {
    return streetLine3;
  }

  public void setStreetLine3(String streetLine3) {
    this.streetLine3 = streetLine3;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectRoyalMailRequestBody connectRoyalMailRequestBody = (ConnectRoyalMailRequestBody) o;
    return Objects.equals(this.accountNumber, connectRoyalMailRequestBody.accountNumber) &&
        Objects.equals(this.city, connectRoyalMailRequestBody.city) &&
        Objects.equals(this.companyName, connectRoyalMailRequestBody.companyName) &&
        Objects.equals(this.contactName, connectRoyalMailRequestBody.contactName) &&
        Objects.equals(this.email, connectRoyalMailRequestBody.email) &&
        Objects.equals(this.nickname, connectRoyalMailRequestBody.nickname) &&
        Objects.equals(this.obaEmail, connectRoyalMailRequestBody.obaEmail) &&
        Objects.equals(this.phone, connectRoyalMailRequestBody.phone) &&
        Objects.equals(this.postalCode, connectRoyalMailRequestBody.postalCode) &&
        Objects.equals(this.streetLine1, connectRoyalMailRequestBody.streetLine1) &&
        Objects.equals(this.streetLine2, connectRoyalMailRequestBody.streetLine2) &&
        Objects.equals(this.streetLine3, connectRoyalMailRequestBody.streetLine3);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, city, companyName, contactName, email, nickname, obaEmail, phone, postalCode, streetLine1, streetLine2, streetLine3);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectRoyalMailRequestBody {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    obaEmail: ").append(toIndentedString(obaEmail)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    streetLine1: ").append(toIndentedString(streetLine1)).append("\n");
    sb.append("    streetLine2: ").append(toIndentedString(streetLine2)).append("\n");
    sb.append("    streetLine3: ").append(toIndentedString(streetLine3)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number");
    openapiFields.add("city");
    openapiFields.add("company_name");
    openapiFields.add("contact_name");
    openapiFields.add("email");
    openapiFields.add("nickname");
    openapiFields.add("oba_email");
    openapiFields.add("phone");
    openapiFields.add("postal_code");
    openapiFields.add("street_line1");
    openapiFields.add("street_line2");
    openapiFields.add("street_line3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_number");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("contact_name");
    openapiRequiredFields.add("nickname");
    openapiRequiredFields.add("postal_code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectRoyalMailRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectRoyalMailRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectRoyalMailRequestBody is not found in the empty JSON string", ConnectRoyalMailRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectRoyalMailRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectRoyalMailRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectRoyalMailRequestBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if (!jsonObj.get("contact_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("oba_email") != null && !jsonObj.get("oba_email").isJsonNull()) && !jsonObj.get("oba_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oba_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oba_email").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if (!jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("street_line1") != null && !jsonObj.get("street_line1").isJsonNull()) && !jsonObj.get("street_line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_line1").toString()));
      }
      if ((jsonObj.get("street_line2") != null && !jsonObj.get("street_line2").isJsonNull()) && !jsonObj.get("street_line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_line2").toString()));
      }
      if ((jsonObj.get("street_line3") != null && !jsonObj.get("street_line3").isJsonNull()) && !jsonObj.get("street_line3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_line3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_line3").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectRoyalMailRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectRoyalMailRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectRoyalMailRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectRoyalMailRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectRoyalMailRequestBody>() {
           @Override
           public void write(JsonWriter out, ConnectRoyalMailRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectRoyalMailRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectRoyalMailRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectRoyalMailRequestBody
   * @throws IOException if the JSON string is invalid with respect to ConnectRoyalMailRequestBody
   */
  public static ConnectRoyalMailRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectRoyalMailRequestBody.class);
  }

  /**
   * Convert an instance of ConnectRoyalMailRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

