/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AncillaryServiceEndorsement;
import org.openapitools.client.model.ConnectAccessWorldwideRequestBody;
import org.openapitools.client.model.ConnectAmazonBuyShippingRequestBody;
import org.openapitools.client.model.ConnectAmazonShippingUk;
import org.openapitools.client.model.ConnectApcRequestBody;
import org.openapitools.client.model.ConnectAsendiaRequestBody;
import org.openapitools.client.model.ConnectAustraliaPostRequestBody;
import org.openapitools.client.model.ConnectCanadaPostRequestBody;
import org.openapitools.client.model.ConnectDhlEcommerceRequestBody;
import org.openapitools.client.model.ConnectDhlExpressAuRequestBody;
import org.openapitools.client.model.ConnectDhlExpressCaRequestBody;
import org.openapitools.client.model.ConnectDhlExpressRequestBody;
import org.openapitools.client.model.ConnectDhlExpressUkRequestBody;
import org.openapitools.client.model.ConnectDpdRequestBody;
import org.openapitools.client.model.ConnectEndiciaRequestBody;
import org.openapitools.client.model.ConnectFedexRequestBody;
import org.openapitools.client.model.ConnectFedexUkRequestBody;
import org.openapitools.client.model.ConnectFirstmileRequestBody;
import org.openapitools.client.model.ConnectImexRequestBody;
import org.openapitools.client.model.ConnectNewgisticsRequestBody;
import org.openapitools.client.model.ConnectOntracRequestBody;
import org.openapitools.client.model.ConnectPurolatorRequestBody;
import org.openapitools.client.model.ConnectRoyalMailRequestBody;
import org.openapitools.client.model.ConnectRrDonnelleyRequestBody;
import org.openapitools.client.model.ConnectSekoRequestBody;
import org.openapitools.client.model.ConnectSendleRequestBody;
import org.openapitools.client.model.ConnectStampsRequestBody;
import org.openapitools.client.model.ConnectUpsRequestBody;
import org.openapitools.client.model.UpsInvoice;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectCarrierRequestBody extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ConnectCarrierRequestBody.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ConnectCarrierRequestBody.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ConnectCarrierRequestBody' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ConnectAccessWorldwideRequestBody> adapterConnectAccessWorldwideRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectAccessWorldwideRequestBody.class));
            final TypeAdapter<ConnectAmazonBuyShippingRequestBody> adapterConnectAmazonBuyShippingRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectAmazonBuyShippingRequestBody.class));
            final TypeAdapter<ConnectAmazonShippingUk> adapterConnectAmazonShippingUk = gson.getDelegateAdapter(this, TypeToken.get(ConnectAmazonShippingUk.class));
            final TypeAdapter<ConnectApcRequestBody> adapterConnectApcRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectApcRequestBody.class));
            final TypeAdapter<ConnectAsendiaRequestBody> adapterConnectAsendiaRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectAsendiaRequestBody.class));
            final TypeAdapter<ConnectAustraliaPostRequestBody> adapterConnectAustraliaPostRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectAustraliaPostRequestBody.class));
            final TypeAdapter<ConnectCanadaPostRequestBody> adapterConnectCanadaPostRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectCanadaPostRequestBody.class));
            final TypeAdapter<ConnectDhlEcommerceRequestBody> adapterConnectDhlEcommerceRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectDhlEcommerceRequestBody.class));
            final TypeAdapter<ConnectDhlExpressRequestBody> adapterConnectDhlExpressRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectDhlExpressRequestBody.class));
            final TypeAdapter<ConnectDhlExpressAuRequestBody> adapterConnectDhlExpressAuRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectDhlExpressAuRequestBody.class));
            final TypeAdapter<ConnectDhlExpressCaRequestBody> adapterConnectDhlExpressCaRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectDhlExpressCaRequestBody.class));
            final TypeAdapter<ConnectDhlExpressUkRequestBody> adapterConnectDhlExpressUkRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectDhlExpressUkRequestBody.class));
            final TypeAdapter<ConnectDpdRequestBody> adapterConnectDpdRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectDpdRequestBody.class));
            final TypeAdapter<ConnectEndiciaRequestBody> adapterConnectEndiciaRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectEndiciaRequestBody.class));
            final TypeAdapter<ConnectFedexRequestBody> adapterConnectFedexRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectFedexRequestBody.class));
            final TypeAdapter<ConnectFedexUkRequestBody> adapterConnectFedexUkRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectFedexUkRequestBody.class));
            final TypeAdapter<ConnectFirstmileRequestBody> adapterConnectFirstmileRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectFirstmileRequestBody.class));
            final TypeAdapter<ConnectImexRequestBody> adapterConnectImexRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectImexRequestBody.class));
            final TypeAdapter<ConnectNewgisticsRequestBody> adapterConnectNewgisticsRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectNewgisticsRequestBody.class));
            final TypeAdapter<ConnectOntracRequestBody> adapterConnectOntracRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectOntracRequestBody.class));
            final TypeAdapter<ConnectPurolatorRequestBody> adapterConnectPurolatorRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectPurolatorRequestBody.class));
            final TypeAdapter<ConnectRoyalMailRequestBody> adapterConnectRoyalMailRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectRoyalMailRequestBody.class));
            final TypeAdapter<ConnectRrDonnelleyRequestBody> adapterConnectRrDonnelleyRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectRrDonnelleyRequestBody.class));
            final TypeAdapter<ConnectSekoRequestBody> adapterConnectSekoRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectSekoRequestBody.class));
            final TypeAdapter<ConnectSendleRequestBody> adapterConnectSendleRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectSendleRequestBody.class));
            final TypeAdapter<ConnectStampsRequestBody> adapterConnectStampsRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectStampsRequestBody.class));
            final TypeAdapter<ConnectUpsRequestBody> adapterConnectUpsRequestBody = gson.getDelegateAdapter(this, TypeToken.get(ConnectUpsRequestBody.class));

            return (TypeAdapter<T>) new TypeAdapter<ConnectCarrierRequestBody>() {
                @Override
                public void write(JsonWriter out, ConnectCarrierRequestBody value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ConnectAccessWorldwideRequestBody`
                    if (value.getActualInstance() instanceof ConnectAccessWorldwideRequestBody) {
                        JsonElement element = adapterConnectAccessWorldwideRequestBody.toJsonTree((ConnectAccessWorldwideRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectAmazonBuyShippingRequestBody`
                    if (value.getActualInstance() instanceof ConnectAmazonBuyShippingRequestBody) {
                        JsonElement element = adapterConnectAmazonBuyShippingRequestBody.toJsonTree((ConnectAmazonBuyShippingRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectAmazonShippingUk`
                    if (value.getActualInstance() instanceof ConnectAmazonShippingUk) {
                        JsonElement element = adapterConnectAmazonShippingUk.toJsonTree((ConnectAmazonShippingUk)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectApcRequestBody`
                    if (value.getActualInstance() instanceof ConnectApcRequestBody) {
                        JsonElement element = adapterConnectApcRequestBody.toJsonTree((ConnectApcRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectAsendiaRequestBody`
                    if (value.getActualInstance() instanceof ConnectAsendiaRequestBody) {
                        JsonElement element = adapterConnectAsendiaRequestBody.toJsonTree((ConnectAsendiaRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectAustraliaPostRequestBody`
                    if (value.getActualInstance() instanceof ConnectAustraliaPostRequestBody) {
                        JsonElement element = adapterConnectAustraliaPostRequestBody.toJsonTree((ConnectAustraliaPostRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectCanadaPostRequestBody`
                    if (value.getActualInstance() instanceof ConnectCanadaPostRequestBody) {
                        JsonElement element = adapterConnectCanadaPostRequestBody.toJsonTree((ConnectCanadaPostRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectDhlEcommerceRequestBody`
                    if (value.getActualInstance() instanceof ConnectDhlEcommerceRequestBody) {
                        JsonElement element = adapterConnectDhlEcommerceRequestBody.toJsonTree((ConnectDhlEcommerceRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectDhlExpressRequestBody`
                    if (value.getActualInstance() instanceof ConnectDhlExpressRequestBody) {
                        JsonElement element = adapterConnectDhlExpressRequestBody.toJsonTree((ConnectDhlExpressRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectDhlExpressAuRequestBody`
                    if (value.getActualInstance() instanceof ConnectDhlExpressAuRequestBody) {
                        JsonElement element = adapterConnectDhlExpressAuRequestBody.toJsonTree((ConnectDhlExpressAuRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectDhlExpressCaRequestBody`
                    if (value.getActualInstance() instanceof ConnectDhlExpressCaRequestBody) {
                        JsonElement element = adapterConnectDhlExpressCaRequestBody.toJsonTree((ConnectDhlExpressCaRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectDhlExpressUkRequestBody`
                    if (value.getActualInstance() instanceof ConnectDhlExpressUkRequestBody) {
                        JsonElement element = adapterConnectDhlExpressUkRequestBody.toJsonTree((ConnectDhlExpressUkRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectDpdRequestBody`
                    if (value.getActualInstance() instanceof ConnectDpdRequestBody) {
                        JsonElement element = adapterConnectDpdRequestBody.toJsonTree((ConnectDpdRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectEndiciaRequestBody`
                    if (value.getActualInstance() instanceof ConnectEndiciaRequestBody) {
                        JsonElement element = adapterConnectEndiciaRequestBody.toJsonTree((ConnectEndiciaRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectFedexRequestBody`
                    if (value.getActualInstance() instanceof ConnectFedexRequestBody) {
                        JsonElement element = adapterConnectFedexRequestBody.toJsonTree((ConnectFedexRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectFedexUkRequestBody`
                    if (value.getActualInstance() instanceof ConnectFedexUkRequestBody) {
                        JsonElement element = adapterConnectFedexUkRequestBody.toJsonTree((ConnectFedexUkRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectFirstmileRequestBody`
                    if (value.getActualInstance() instanceof ConnectFirstmileRequestBody) {
                        JsonElement element = adapterConnectFirstmileRequestBody.toJsonTree((ConnectFirstmileRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectImexRequestBody`
                    if (value.getActualInstance() instanceof ConnectImexRequestBody) {
                        JsonElement element = adapterConnectImexRequestBody.toJsonTree((ConnectImexRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectNewgisticsRequestBody`
                    if (value.getActualInstance() instanceof ConnectNewgisticsRequestBody) {
                        JsonElement element = adapterConnectNewgisticsRequestBody.toJsonTree((ConnectNewgisticsRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectOntracRequestBody`
                    if (value.getActualInstance() instanceof ConnectOntracRequestBody) {
                        JsonElement element = adapterConnectOntracRequestBody.toJsonTree((ConnectOntracRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectPurolatorRequestBody`
                    if (value.getActualInstance() instanceof ConnectPurolatorRequestBody) {
                        JsonElement element = adapterConnectPurolatorRequestBody.toJsonTree((ConnectPurolatorRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectRoyalMailRequestBody`
                    if (value.getActualInstance() instanceof ConnectRoyalMailRequestBody) {
                        JsonElement element = adapterConnectRoyalMailRequestBody.toJsonTree((ConnectRoyalMailRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectRrDonnelleyRequestBody`
                    if (value.getActualInstance() instanceof ConnectRrDonnelleyRequestBody) {
                        JsonElement element = adapterConnectRrDonnelleyRequestBody.toJsonTree((ConnectRrDonnelleyRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectSekoRequestBody`
                    if (value.getActualInstance() instanceof ConnectSekoRequestBody) {
                        JsonElement element = adapterConnectSekoRequestBody.toJsonTree((ConnectSekoRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectSendleRequestBody`
                    if (value.getActualInstance() instanceof ConnectSendleRequestBody) {
                        JsonElement element = adapterConnectSendleRequestBody.toJsonTree((ConnectSendleRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectStampsRequestBody`
                    if (value.getActualInstance() instanceof ConnectStampsRequestBody) {
                        JsonElement element = adapterConnectStampsRequestBody.toJsonTree((ConnectStampsRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConnectUpsRequestBody`
                    if (value.getActualInstance() instanceof ConnectUpsRequestBody) {
                        JsonElement element = adapterConnectUpsRequestBody.toJsonTree((ConnectUpsRequestBody)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ConnectAccessWorldwideRequestBody, ConnectAmazonBuyShippingRequestBody, ConnectAmazonShippingUk, ConnectApcRequestBody, ConnectAsendiaRequestBody, ConnectAustraliaPostRequestBody, ConnectCanadaPostRequestBody, ConnectDhlEcommerceRequestBody, ConnectDhlExpressAuRequestBody, ConnectDhlExpressCaRequestBody, ConnectDhlExpressRequestBody, ConnectDhlExpressUkRequestBody, ConnectDpdRequestBody, ConnectEndiciaRequestBody, ConnectFedexRequestBody, ConnectFedexUkRequestBody, ConnectFirstmileRequestBody, ConnectImexRequestBody, ConnectNewgisticsRequestBody, ConnectOntracRequestBody, ConnectPurolatorRequestBody, ConnectRoyalMailRequestBody, ConnectRrDonnelleyRequestBody, ConnectSekoRequestBody, ConnectSendleRequestBody, ConnectStampsRequestBody, ConnectUpsRequestBody");
                }

                @Override
                public ConnectCarrierRequestBody read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ConnectAccessWorldwideRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectAccessWorldwideRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectAccessWorldwideRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectAccessWorldwideRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectAccessWorldwideRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectAccessWorldwideRequestBody'", e);
                    }
                    // deserialize ConnectAmazonBuyShippingRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectAmazonBuyShippingRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectAmazonBuyShippingRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectAmazonBuyShippingRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectAmazonBuyShippingRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectAmazonBuyShippingRequestBody'", e);
                    }
                    // deserialize ConnectAmazonShippingUk
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectAmazonShippingUk.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectAmazonShippingUk;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectAmazonShippingUk'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectAmazonShippingUk failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectAmazonShippingUk'", e);
                    }
                    // deserialize ConnectApcRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectApcRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectApcRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectApcRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectApcRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectApcRequestBody'", e);
                    }
                    // deserialize ConnectAsendiaRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectAsendiaRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectAsendiaRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectAsendiaRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectAsendiaRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectAsendiaRequestBody'", e);
                    }
                    // deserialize ConnectAustraliaPostRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectAustraliaPostRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectAustraliaPostRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectAustraliaPostRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectAustraliaPostRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectAustraliaPostRequestBody'", e);
                    }
                    // deserialize ConnectCanadaPostRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectCanadaPostRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectCanadaPostRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectCanadaPostRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectCanadaPostRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectCanadaPostRequestBody'", e);
                    }
                    // deserialize ConnectDhlEcommerceRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectDhlEcommerceRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectDhlEcommerceRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectDhlEcommerceRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectDhlEcommerceRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectDhlEcommerceRequestBody'", e);
                    }
                    // deserialize ConnectDhlExpressRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectDhlExpressRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectDhlExpressRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectDhlExpressRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectDhlExpressRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectDhlExpressRequestBody'", e);
                    }
                    // deserialize ConnectDhlExpressAuRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectDhlExpressAuRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectDhlExpressAuRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectDhlExpressAuRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectDhlExpressAuRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectDhlExpressAuRequestBody'", e);
                    }
                    // deserialize ConnectDhlExpressCaRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectDhlExpressCaRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectDhlExpressCaRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectDhlExpressCaRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectDhlExpressCaRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectDhlExpressCaRequestBody'", e);
                    }
                    // deserialize ConnectDhlExpressUkRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectDhlExpressUkRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectDhlExpressUkRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectDhlExpressUkRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectDhlExpressUkRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectDhlExpressUkRequestBody'", e);
                    }
                    // deserialize ConnectDpdRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectDpdRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectDpdRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectDpdRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectDpdRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectDpdRequestBody'", e);
                    }
                    // deserialize ConnectEndiciaRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectEndiciaRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectEndiciaRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectEndiciaRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectEndiciaRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectEndiciaRequestBody'", e);
                    }
                    // deserialize ConnectFedexRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectFedexRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectFedexRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectFedexRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectFedexRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectFedexRequestBody'", e);
                    }
                    // deserialize ConnectFedexUkRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectFedexUkRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectFedexUkRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectFedexUkRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectFedexUkRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectFedexUkRequestBody'", e);
                    }
                    // deserialize ConnectFirstmileRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectFirstmileRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectFirstmileRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectFirstmileRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectFirstmileRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectFirstmileRequestBody'", e);
                    }
                    // deserialize ConnectImexRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectImexRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectImexRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectImexRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectImexRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectImexRequestBody'", e);
                    }
                    // deserialize ConnectNewgisticsRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectNewgisticsRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectNewgisticsRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectNewgisticsRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectNewgisticsRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectNewgisticsRequestBody'", e);
                    }
                    // deserialize ConnectOntracRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectOntracRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectOntracRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectOntracRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectOntracRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectOntracRequestBody'", e);
                    }
                    // deserialize ConnectPurolatorRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectPurolatorRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectPurolatorRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectPurolatorRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectPurolatorRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectPurolatorRequestBody'", e);
                    }
                    // deserialize ConnectRoyalMailRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectRoyalMailRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectRoyalMailRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectRoyalMailRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectRoyalMailRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectRoyalMailRequestBody'", e);
                    }
                    // deserialize ConnectRrDonnelleyRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectRrDonnelleyRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectRrDonnelleyRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectRrDonnelleyRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectRrDonnelleyRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectRrDonnelleyRequestBody'", e);
                    }
                    // deserialize ConnectSekoRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectSekoRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectSekoRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectSekoRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectSekoRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectSekoRequestBody'", e);
                    }
                    // deserialize ConnectSendleRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectSendleRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectSendleRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectSendleRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectSendleRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectSendleRequestBody'", e);
                    }
                    // deserialize ConnectStampsRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectStampsRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectStampsRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectStampsRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectStampsRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectStampsRequestBody'", e);
                    }
                    // deserialize ConnectUpsRequestBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectUpsRequestBody.validateJsonElement(jsonElement);
                        actualAdapter = adapterConnectUpsRequestBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectUpsRequestBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectUpsRequestBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectUpsRequestBody'", e);
                    }

                    if (match == 1) {
                        ConnectCarrierRequestBody ret = new ConnectCarrierRequestBody();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ConnectCarrierRequestBody: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ConnectCarrierRequestBody() {
        super("oneOf", Boolean.FALSE);
    }

    public ConnectCarrierRequestBody(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ConnectAccessWorldwideRequestBody", ConnectAccessWorldwideRequestBody.class);
        schemas.put("ConnectAmazonBuyShippingRequestBody", ConnectAmazonBuyShippingRequestBody.class);
        schemas.put("ConnectAmazonShippingUk", ConnectAmazonShippingUk.class);
        schemas.put("ConnectApcRequestBody", ConnectApcRequestBody.class);
        schemas.put("ConnectAsendiaRequestBody", ConnectAsendiaRequestBody.class);
        schemas.put("ConnectAustraliaPostRequestBody", ConnectAustraliaPostRequestBody.class);
        schemas.put("ConnectCanadaPostRequestBody", ConnectCanadaPostRequestBody.class);
        schemas.put("ConnectDhlEcommerceRequestBody", ConnectDhlEcommerceRequestBody.class);
        schemas.put("ConnectDhlExpressRequestBody", ConnectDhlExpressRequestBody.class);
        schemas.put("ConnectDhlExpressAuRequestBody", ConnectDhlExpressAuRequestBody.class);
        schemas.put("ConnectDhlExpressCaRequestBody", ConnectDhlExpressCaRequestBody.class);
        schemas.put("ConnectDhlExpressUkRequestBody", ConnectDhlExpressUkRequestBody.class);
        schemas.put("ConnectDpdRequestBody", ConnectDpdRequestBody.class);
        schemas.put("ConnectEndiciaRequestBody", ConnectEndiciaRequestBody.class);
        schemas.put("ConnectFedexRequestBody", ConnectFedexRequestBody.class);
        schemas.put("ConnectFedexUkRequestBody", ConnectFedexUkRequestBody.class);
        schemas.put("ConnectFirstmileRequestBody", ConnectFirstmileRequestBody.class);
        schemas.put("ConnectImexRequestBody", ConnectImexRequestBody.class);
        schemas.put("ConnectNewgisticsRequestBody", ConnectNewgisticsRequestBody.class);
        schemas.put("ConnectOntracRequestBody", ConnectOntracRequestBody.class);
        schemas.put("ConnectPurolatorRequestBody", ConnectPurolatorRequestBody.class);
        schemas.put("ConnectRoyalMailRequestBody", ConnectRoyalMailRequestBody.class);
        schemas.put("ConnectRrDonnelleyRequestBody", ConnectRrDonnelleyRequestBody.class);
        schemas.put("ConnectSekoRequestBody", ConnectSekoRequestBody.class);
        schemas.put("ConnectSendleRequestBody", ConnectSendleRequestBody.class);
        schemas.put("ConnectStampsRequestBody", ConnectStampsRequestBody.class);
        schemas.put("ConnectUpsRequestBody", ConnectUpsRequestBody.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ConnectCarrierRequestBody.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ConnectAccessWorldwideRequestBody, ConnectAmazonBuyShippingRequestBody, ConnectAmazonShippingUk, ConnectApcRequestBody, ConnectAsendiaRequestBody, ConnectAustraliaPostRequestBody, ConnectCanadaPostRequestBody, ConnectDhlEcommerceRequestBody, ConnectDhlExpressAuRequestBody, ConnectDhlExpressCaRequestBody, ConnectDhlExpressRequestBody, ConnectDhlExpressUkRequestBody, ConnectDpdRequestBody, ConnectEndiciaRequestBody, ConnectFedexRequestBody, ConnectFedexUkRequestBody, ConnectFirstmileRequestBody, ConnectImexRequestBody, ConnectNewgisticsRequestBody, ConnectOntracRequestBody, ConnectPurolatorRequestBody, ConnectRoyalMailRequestBody, ConnectRrDonnelleyRequestBody, ConnectSekoRequestBody, ConnectSendleRequestBody, ConnectStampsRequestBody, ConnectUpsRequestBody
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ConnectAccessWorldwideRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectAmazonBuyShippingRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectAmazonShippingUk) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectApcRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectAsendiaRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectAustraliaPostRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectCanadaPostRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectDhlEcommerceRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectDhlExpressRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectDhlExpressAuRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectDhlExpressCaRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectDhlExpressUkRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectDpdRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectEndiciaRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectFedexRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectFedexUkRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectFirstmileRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectImexRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectNewgisticsRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectOntracRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectPurolatorRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectRoyalMailRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectRrDonnelleyRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectSekoRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectSendleRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectStampsRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConnectUpsRequestBody) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ConnectAccessWorldwideRequestBody, ConnectAmazonBuyShippingRequestBody, ConnectAmazonShippingUk, ConnectApcRequestBody, ConnectAsendiaRequestBody, ConnectAustraliaPostRequestBody, ConnectCanadaPostRequestBody, ConnectDhlEcommerceRequestBody, ConnectDhlExpressAuRequestBody, ConnectDhlExpressCaRequestBody, ConnectDhlExpressRequestBody, ConnectDhlExpressUkRequestBody, ConnectDpdRequestBody, ConnectEndiciaRequestBody, ConnectFedexRequestBody, ConnectFedexUkRequestBody, ConnectFirstmileRequestBody, ConnectImexRequestBody, ConnectNewgisticsRequestBody, ConnectOntracRequestBody, ConnectPurolatorRequestBody, ConnectRoyalMailRequestBody, ConnectRrDonnelleyRequestBody, ConnectSekoRequestBody, ConnectSendleRequestBody, ConnectStampsRequestBody, ConnectUpsRequestBody");
    }

    /**
     * Get the actual instance, which can be the following:
     * ConnectAccessWorldwideRequestBody, ConnectAmazonBuyShippingRequestBody, ConnectAmazonShippingUk, ConnectApcRequestBody, ConnectAsendiaRequestBody, ConnectAustraliaPostRequestBody, ConnectCanadaPostRequestBody, ConnectDhlEcommerceRequestBody, ConnectDhlExpressAuRequestBody, ConnectDhlExpressCaRequestBody, ConnectDhlExpressRequestBody, ConnectDhlExpressUkRequestBody, ConnectDpdRequestBody, ConnectEndiciaRequestBody, ConnectFedexRequestBody, ConnectFedexUkRequestBody, ConnectFirstmileRequestBody, ConnectImexRequestBody, ConnectNewgisticsRequestBody, ConnectOntracRequestBody, ConnectPurolatorRequestBody, ConnectRoyalMailRequestBody, ConnectRrDonnelleyRequestBody, ConnectSekoRequestBody, ConnectSendleRequestBody, ConnectStampsRequestBody, ConnectUpsRequestBody
     *
     * @return The actual instance (ConnectAccessWorldwideRequestBody, ConnectAmazonBuyShippingRequestBody, ConnectAmazonShippingUk, ConnectApcRequestBody, ConnectAsendiaRequestBody, ConnectAustraliaPostRequestBody, ConnectCanadaPostRequestBody, ConnectDhlEcommerceRequestBody, ConnectDhlExpressAuRequestBody, ConnectDhlExpressCaRequestBody, ConnectDhlExpressRequestBody, ConnectDhlExpressUkRequestBody, ConnectDpdRequestBody, ConnectEndiciaRequestBody, ConnectFedexRequestBody, ConnectFedexUkRequestBody, ConnectFirstmileRequestBody, ConnectImexRequestBody, ConnectNewgisticsRequestBody, ConnectOntracRequestBody, ConnectPurolatorRequestBody, ConnectRoyalMailRequestBody, ConnectRrDonnelleyRequestBody, ConnectSekoRequestBody, ConnectSendleRequestBody, ConnectStampsRequestBody, ConnectUpsRequestBody)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ConnectAccessWorldwideRequestBody`. If the actual instance is not `ConnectAccessWorldwideRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectAccessWorldwideRequestBody`
     * @throws ClassCastException if the instance is not `ConnectAccessWorldwideRequestBody`
     */
    public ConnectAccessWorldwideRequestBody getConnectAccessWorldwideRequestBody() throws ClassCastException {
        return (ConnectAccessWorldwideRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectAmazonBuyShippingRequestBody`. If the actual instance is not `ConnectAmazonBuyShippingRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectAmazonBuyShippingRequestBody`
     * @throws ClassCastException if the instance is not `ConnectAmazonBuyShippingRequestBody`
     */
    public ConnectAmazonBuyShippingRequestBody getConnectAmazonBuyShippingRequestBody() throws ClassCastException {
        return (ConnectAmazonBuyShippingRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectAmazonShippingUk`. If the actual instance is not `ConnectAmazonShippingUk`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectAmazonShippingUk`
     * @throws ClassCastException if the instance is not `ConnectAmazonShippingUk`
     */
    public ConnectAmazonShippingUk getConnectAmazonShippingUk() throws ClassCastException {
        return (ConnectAmazonShippingUk)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectApcRequestBody`. If the actual instance is not `ConnectApcRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectApcRequestBody`
     * @throws ClassCastException if the instance is not `ConnectApcRequestBody`
     */
    public ConnectApcRequestBody getConnectApcRequestBody() throws ClassCastException {
        return (ConnectApcRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectAsendiaRequestBody`. If the actual instance is not `ConnectAsendiaRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectAsendiaRequestBody`
     * @throws ClassCastException if the instance is not `ConnectAsendiaRequestBody`
     */
    public ConnectAsendiaRequestBody getConnectAsendiaRequestBody() throws ClassCastException {
        return (ConnectAsendiaRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectAustraliaPostRequestBody`. If the actual instance is not `ConnectAustraliaPostRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectAustraliaPostRequestBody`
     * @throws ClassCastException if the instance is not `ConnectAustraliaPostRequestBody`
     */
    public ConnectAustraliaPostRequestBody getConnectAustraliaPostRequestBody() throws ClassCastException {
        return (ConnectAustraliaPostRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectCanadaPostRequestBody`. If the actual instance is not `ConnectCanadaPostRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectCanadaPostRequestBody`
     * @throws ClassCastException if the instance is not `ConnectCanadaPostRequestBody`
     */
    public ConnectCanadaPostRequestBody getConnectCanadaPostRequestBody() throws ClassCastException {
        return (ConnectCanadaPostRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectDhlEcommerceRequestBody`. If the actual instance is not `ConnectDhlEcommerceRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectDhlEcommerceRequestBody`
     * @throws ClassCastException if the instance is not `ConnectDhlEcommerceRequestBody`
     */
    public ConnectDhlEcommerceRequestBody getConnectDhlEcommerceRequestBody() throws ClassCastException {
        return (ConnectDhlEcommerceRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectDhlExpressRequestBody`. If the actual instance is not `ConnectDhlExpressRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectDhlExpressRequestBody`
     * @throws ClassCastException if the instance is not `ConnectDhlExpressRequestBody`
     */
    public ConnectDhlExpressRequestBody getConnectDhlExpressRequestBody() throws ClassCastException {
        return (ConnectDhlExpressRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectDhlExpressAuRequestBody`. If the actual instance is not `ConnectDhlExpressAuRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectDhlExpressAuRequestBody`
     * @throws ClassCastException if the instance is not `ConnectDhlExpressAuRequestBody`
     */
    public ConnectDhlExpressAuRequestBody getConnectDhlExpressAuRequestBody() throws ClassCastException {
        return (ConnectDhlExpressAuRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectDhlExpressCaRequestBody`. If the actual instance is not `ConnectDhlExpressCaRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectDhlExpressCaRequestBody`
     * @throws ClassCastException if the instance is not `ConnectDhlExpressCaRequestBody`
     */
    public ConnectDhlExpressCaRequestBody getConnectDhlExpressCaRequestBody() throws ClassCastException {
        return (ConnectDhlExpressCaRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectDhlExpressUkRequestBody`. If the actual instance is not `ConnectDhlExpressUkRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectDhlExpressUkRequestBody`
     * @throws ClassCastException if the instance is not `ConnectDhlExpressUkRequestBody`
     */
    public ConnectDhlExpressUkRequestBody getConnectDhlExpressUkRequestBody() throws ClassCastException {
        return (ConnectDhlExpressUkRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectDpdRequestBody`. If the actual instance is not `ConnectDpdRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectDpdRequestBody`
     * @throws ClassCastException if the instance is not `ConnectDpdRequestBody`
     */
    public ConnectDpdRequestBody getConnectDpdRequestBody() throws ClassCastException {
        return (ConnectDpdRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectEndiciaRequestBody`. If the actual instance is not `ConnectEndiciaRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectEndiciaRequestBody`
     * @throws ClassCastException if the instance is not `ConnectEndiciaRequestBody`
     */
    public ConnectEndiciaRequestBody getConnectEndiciaRequestBody() throws ClassCastException {
        return (ConnectEndiciaRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectFedexRequestBody`. If the actual instance is not `ConnectFedexRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectFedexRequestBody`
     * @throws ClassCastException if the instance is not `ConnectFedexRequestBody`
     */
    public ConnectFedexRequestBody getConnectFedexRequestBody() throws ClassCastException {
        return (ConnectFedexRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectFedexUkRequestBody`. If the actual instance is not `ConnectFedexUkRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectFedexUkRequestBody`
     * @throws ClassCastException if the instance is not `ConnectFedexUkRequestBody`
     */
    public ConnectFedexUkRequestBody getConnectFedexUkRequestBody() throws ClassCastException {
        return (ConnectFedexUkRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectFirstmileRequestBody`. If the actual instance is not `ConnectFirstmileRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectFirstmileRequestBody`
     * @throws ClassCastException if the instance is not `ConnectFirstmileRequestBody`
     */
    public ConnectFirstmileRequestBody getConnectFirstmileRequestBody() throws ClassCastException {
        return (ConnectFirstmileRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectImexRequestBody`. If the actual instance is not `ConnectImexRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectImexRequestBody`
     * @throws ClassCastException if the instance is not `ConnectImexRequestBody`
     */
    public ConnectImexRequestBody getConnectImexRequestBody() throws ClassCastException {
        return (ConnectImexRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectNewgisticsRequestBody`. If the actual instance is not `ConnectNewgisticsRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectNewgisticsRequestBody`
     * @throws ClassCastException if the instance is not `ConnectNewgisticsRequestBody`
     */
    public ConnectNewgisticsRequestBody getConnectNewgisticsRequestBody() throws ClassCastException {
        return (ConnectNewgisticsRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectOntracRequestBody`. If the actual instance is not `ConnectOntracRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectOntracRequestBody`
     * @throws ClassCastException if the instance is not `ConnectOntracRequestBody`
     */
    public ConnectOntracRequestBody getConnectOntracRequestBody() throws ClassCastException {
        return (ConnectOntracRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectPurolatorRequestBody`. If the actual instance is not `ConnectPurolatorRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectPurolatorRequestBody`
     * @throws ClassCastException if the instance is not `ConnectPurolatorRequestBody`
     */
    public ConnectPurolatorRequestBody getConnectPurolatorRequestBody() throws ClassCastException {
        return (ConnectPurolatorRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectRoyalMailRequestBody`. If the actual instance is not `ConnectRoyalMailRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectRoyalMailRequestBody`
     * @throws ClassCastException if the instance is not `ConnectRoyalMailRequestBody`
     */
    public ConnectRoyalMailRequestBody getConnectRoyalMailRequestBody() throws ClassCastException {
        return (ConnectRoyalMailRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectRrDonnelleyRequestBody`. If the actual instance is not `ConnectRrDonnelleyRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectRrDonnelleyRequestBody`
     * @throws ClassCastException if the instance is not `ConnectRrDonnelleyRequestBody`
     */
    public ConnectRrDonnelleyRequestBody getConnectRrDonnelleyRequestBody() throws ClassCastException {
        return (ConnectRrDonnelleyRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectSekoRequestBody`. If the actual instance is not `ConnectSekoRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectSekoRequestBody`
     * @throws ClassCastException if the instance is not `ConnectSekoRequestBody`
     */
    public ConnectSekoRequestBody getConnectSekoRequestBody() throws ClassCastException {
        return (ConnectSekoRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectSendleRequestBody`. If the actual instance is not `ConnectSendleRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectSendleRequestBody`
     * @throws ClassCastException if the instance is not `ConnectSendleRequestBody`
     */
    public ConnectSendleRequestBody getConnectSendleRequestBody() throws ClassCastException {
        return (ConnectSendleRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectStampsRequestBody`. If the actual instance is not `ConnectStampsRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectStampsRequestBody`
     * @throws ClassCastException if the instance is not `ConnectStampsRequestBody`
     */
    public ConnectStampsRequestBody getConnectStampsRequestBody() throws ClassCastException {
        return (ConnectStampsRequestBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConnectUpsRequestBody`. If the actual instance is not `ConnectUpsRequestBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectUpsRequestBody`
     * @throws ClassCastException if the instance is not `ConnectUpsRequestBody`
     */
    public ConnectUpsRequestBody getConnectUpsRequestBody() throws ClassCastException {
        return (ConnectUpsRequestBody)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ConnectCarrierRequestBody
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ConnectAccessWorldwideRequestBody
        try {
            ConnectAccessWorldwideRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectAccessWorldwideRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectAmazonBuyShippingRequestBody
        try {
            ConnectAmazonBuyShippingRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectAmazonBuyShippingRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectAmazonShippingUk
        try {
            ConnectAmazonShippingUk.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectAmazonShippingUk failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectApcRequestBody
        try {
            ConnectApcRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectApcRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectAsendiaRequestBody
        try {
            ConnectAsendiaRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectAsendiaRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectAustraliaPostRequestBody
        try {
            ConnectAustraliaPostRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectAustraliaPostRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectCanadaPostRequestBody
        try {
            ConnectCanadaPostRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectCanadaPostRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectDhlEcommerceRequestBody
        try {
            ConnectDhlEcommerceRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectDhlEcommerceRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectDhlExpressRequestBody
        try {
            ConnectDhlExpressRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectDhlExpressRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectDhlExpressAuRequestBody
        try {
            ConnectDhlExpressAuRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectDhlExpressAuRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectDhlExpressCaRequestBody
        try {
            ConnectDhlExpressCaRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectDhlExpressCaRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectDhlExpressUkRequestBody
        try {
            ConnectDhlExpressUkRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectDhlExpressUkRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectDpdRequestBody
        try {
            ConnectDpdRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectDpdRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectEndiciaRequestBody
        try {
            ConnectEndiciaRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectEndiciaRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectFedexRequestBody
        try {
            ConnectFedexRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectFedexRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectFedexUkRequestBody
        try {
            ConnectFedexUkRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectFedexUkRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectFirstmileRequestBody
        try {
            ConnectFirstmileRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectFirstmileRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectImexRequestBody
        try {
            ConnectImexRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectImexRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectNewgisticsRequestBody
        try {
            ConnectNewgisticsRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectNewgisticsRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectOntracRequestBody
        try {
            ConnectOntracRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectOntracRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectPurolatorRequestBody
        try {
            ConnectPurolatorRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectPurolatorRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectRoyalMailRequestBody
        try {
            ConnectRoyalMailRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectRoyalMailRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectRrDonnelleyRequestBody
        try {
            ConnectRrDonnelleyRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectRrDonnelleyRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectSekoRequestBody
        try {
            ConnectSekoRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectSekoRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectSendleRequestBody
        try {
            ConnectSendleRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectSendleRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectStampsRequestBody
        try {
            ConnectStampsRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectStampsRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConnectUpsRequestBody
        try {
            ConnectUpsRequestBody.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConnectUpsRequestBody failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ConnectCarrierRequestBody with oneOf schemas: ConnectAccessWorldwideRequestBody, ConnectAmazonBuyShippingRequestBody, ConnectAmazonShippingUk, ConnectApcRequestBody, ConnectAsendiaRequestBody, ConnectAustraliaPostRequestBody, ConnectCanadaPostRequestBody, ConnectDhlEcommerceRequestBody, ConnectDhlExpressAuRequestBody, ConnectDhlExpressCaRequestBody, ConnectDhlExpressRequestBody, ConnectDhlExpressUkRequestBody, ConnectDpdRequestBody, ConnectEndiciaRequestBody, ConnectFedexRequestBody, ConnectFedexUkRequestBody, ConnectFirstmileRequestBody, ConnectImexRequestBody, ConnectNewgisticsRequestBody, ConnectOntracRequestBody, ConnectPurolatorRequestBody, ConnectRoyalMailRequestBody, ConnectRrDonnelleyRequestBody, ConnectSekoRequestBody, ConnectSendleRequestBody, ConnectStampsRequestBody, ConnectUpsRequestBody. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ConnectCarrierRequestBody given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ConnectCarrierRequestBody
     * @throws IOException if the JSON string is invalid with respect to ConnectCarrierRequestBody
     */
    public static ConnectCarrierRequestBody fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ConnectCarrierRequestBody.class);
    }

    /**
     * Convert an instance of ConnectCarrierRequestBody to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

