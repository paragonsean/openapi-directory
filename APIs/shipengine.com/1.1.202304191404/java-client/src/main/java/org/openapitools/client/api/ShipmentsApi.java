/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateShipmentsRequestBody;
import org.openapitools.client.model.CreateShipmentsResponseBody;
import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.GetShipmentByExternalIdResponseBody;
import org.openapitools.client.model.GetShipmentByIdResponseBody;
import org.openapitools.client.model.ListShipmentRatesResponseBody;
import org.openapitools.client.model.ListShipmentsResponseBody;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ParseShipmentRequestBody;
import org.openapitools.client.model.ParseShipmentResponseBody;
import org.openapitools.client.model.ShipmentStatus;
import org.openapitools.client.model.ShipmentsSortBy;
import org.openapitools.client.model.SortDir;
import org.openapitools.client.model.TagShipmentResponseBody;
import org.openapitools.client.model.UpdateShipmentRequestBody;
import org.openapitools.client.model.UpdateShipmentResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShipmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShipmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShipmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelShipments
     * @param shipmentId Shipment ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelShipmentsCall(String shipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}/cancel"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelShipmentsValidateBeforeCall(String shipmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling cancelShipments(Async)");
        }

        return cancelShipmentsCall(shipmentId, _callback);

    }

    /**
     * Cancel a Shipment
     * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries &#x60;pending&#x60; shipments. Marking a shipment as cancelled would remove it from this process 
     * @param shipmentId Shipment ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public String cancelShipments(String shipmentId) throws ApiException {
        ApiResponse<String> localVarResp = cancelShipmentsWithHttpInfo(shipmentId);
        return localVarResp.getData();
    }

    /**
     * Cancel a Shipment
     * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries &#x60;pending&#x60; shipments. Marking a shipment as cancelled would remove it from this process 
     * @param shipmentId Shipment ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> cancelShipmentsWithHttpInfo(String shipmentId) throws ApiException {
        okhttp3.Call localVarCall = cancelShipmentsValidateBeforeCall(shipmentId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a Shipment (asynchronously)
     * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries &#x60;pending&#x60; shipments. Marking a shipment as cancelled would remove it from this process 
     * @param shipmentId Shipment ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelShipmentsAsync(String shipmentId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelShipmentsValidateBeforeCall(shipmentId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createShipments
     * @param createShipmentsRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShipmentsCall(CreateShipmentsRequestBody createShipmentsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createShipmentsRequestBody;

        // create path and map variables
        String localVarPath = "/v1/shipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShipmentsValidateBeforeCall(CreateShipmentsRequestBody createShipmentsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createShipmentsRequestBody' is set
        if (createShipmentsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createShipmentsRequestBody' when calling createShipments(Async)");
        }

        return createShipmentsCall(createShipmentsRequestBody, _callback);

    }

    /**
     * Create Shipments
     * Create one or multiple shipments.
     * @param createShipmentsRequestBody  (required)
     * @return CreateShipmentsResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateShipmentsResponseBody createShipments(CreateShipmentsRequestBody createShipmentsRequestBody) throws ApiException {
        ApiResponse<CreateShipmentsResponseBody> localVarResp = createShipmentsWithHttpInfo(createShipmentsRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Shipments
     * Create one or multiple shipments.
     * @param createShipmentsRequestBody  (required)
     * @return ApiResponse&lt;CreateShipmentsResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateShipmentsResponseBody> createShipmentsWithHttpInfo(CreateShipmentsRequestBody createShipmentsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createShipmentsValidateBeforeCall(createShipmentsRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateShipmentsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Shipments (asynchronously)
     * Create one or multiple shipments.
     * @param createShipmentsRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShipmentsAsync(CreateShipmentsRequestBody createShipmentsRequestBody, final ApiCallback<CreateShipmentsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShipmentsValidateBeforeCall(createShipmentsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateShipmentsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShipmentByExternalId
     * @param externalShipmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentByExternalIdCall(String externalShipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/external_shipment_id/{external_shipment_id}"
            .replace("{" + "external_shipment_id" + "}", localVarApiClient.escapeString(externalShipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipmentByExternalIdValidateBeforeCall(String externalShipmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalShipmentId' is set
        if (externalShipmentId == null) {
            throw new ApiException("Missing the required parameter 'externalShipmentId' when calling getShipmentByExternalId(Async)");
        }

        return getShipmentByExternalIdCall(externalShipmentId, _callback);

    }

    /**
     * Get Shipment By External ID
     * Query Shipments created using your own custom ID convention using this endpint
     * @param externalShipmentId  (required)
     * @return GetShipmentByExternalIdResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public GetShipmentByExternalIdResponseBody getShipmentByExternalId(String externalShipmentId) throws ApiException {
        ApiResponse<GetShipmentByExternalIdResponseBody> localVarResp = getShipmentByExternalIdWithHttpInfo(externalShipmentId);
        return localVarResp.getData();
    }

    /**
     * Get Shipment By External ID
     * Query Shipments created using your own custom ID convention using this endpint
     * @param externalShipmentId  (required)
     * @return ApiResponse&lt;GetShipmentByExternalIdResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetShipmentByExternalIdResponseBody> getShipmentByExternalIdWithHttpInfo(String externalShipmentId) throws ApiException {
        okhttp3.Call localVarCall = getShipmentByExternalIdValidateBeforeCall(externalShipmentId, null);
        Type localVarReturnType = new TypeToken<GetShipmentByExternalIdResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipment By External ID (asynchronously)
     * Query Shipments created using your own custom ID convention using this endpint
     * @param externalShipmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentByExternalIdAsync(String externalShipmentId, final ApiCallback<GetShipmentByExternalIdResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShipmentByExternalIdValidateBeforeCall(externalShipmentId, _callback);
        Type localVarReturnType = new TypeToken<GetShipmentByExternalIdResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShipmentById
     * @param shipmentId Shipment ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentByIdCall(String shipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipmentByIdValidateBeforeCall(String shipmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling getShipmentById(Async)");
        }

        return getShipmentByIdCall(shipmentId, _callback);

    }

    /**
     * Get Shipment By ID
     * Get an individual shipment based on its ID
     * @param shipmentId Shipment ID (required)
     * @return GetShipmentByIdResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public GetShipmentByIdResponseBody getShipmentById(String shipmentId) throws ApiException {
        ApiResponse<GetShipmentByIdResponseBody> localVarResp = getShipmentByIdWithHttpInfo(shipmentId);
        return localVarResp.getData();
    }

    /**
     * Get Shipment By ID
     * Get an individual shipment based on its ID
     * @param shipmentId Shipment ID (required)
     * @return ApiResponse&lt;GetShipmentByIdResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetShipmentByIdResponseBody> getShipmentByIdWithHttpInfo(String shipmentId) throws ApiException {
        okhttp3.Call localVarCall = getShipmentByIdValidateBeforeCall(shipmentId, null);
        Type localVarReturnType = new TypeToken<GetShipmentByIdResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipment By ID (asynchronously)
     * Get an individual shipment based on its ID
     * @param shipmentId Shipment ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentByIdAsync(String shipmentId, final ApiCallback<GetShipmentByIdResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShipmentByIdValidateBeforeCall(shipmentId, _callback);
        Type localVarReturnType = new TypeToken<GetShipmentByIdResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listShipmentRates
     * @param shipmentId Shipment ID (required)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listShipmentRatesCall(String shipmentId, OffsetDateTime createdAtStart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}/rates"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createdAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_start", createdAtStart));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listShipmentRatesValidateBeforeCall(String shipmentId, OffsetDateTime createdAtStart, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling listShipmentRates(Async)");
        }

        return listShipmentRatesCall(shipmentId, createdAtStart, _callback);

    }

    /**
     * Get Shipment Rates
     * Get Rates for the shipment information associated with the shipment ID
     * @param shipmentId Shipment ID (required)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @return ListShipmentRatesResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ListShipmentRatesResponseBody listShipmentRates(String shipmentId, OffsetDateTime createdAtStart) throws ApiException {
        ApiResponse<ListShipmentRatesResponseBody> localVarResp = listShipmentRatesWithHttpInfo(shipmentId, createdAtStart);
        return localVarResp.getData();
    }

    /**
     * Get Shipment Rates
     * Get Rates for the shipment information associated with the shipment ID
     * @param shipmentId Shipment ID (required)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @return ApiResponse&lt;ListShipmentRatesResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListShipmentRatesResponseBody> listShipmentRatesWithHttpInfo(String shipmentId, OffsetDateTime createdAtStart) throws ApiException {
        okhttp3.Call localVarCall = listShipmentRatesValidateBeforeCall(shipmentId, createdAtStart, null);
        Type localVarReturnType = new TypeToken<ListShipmentRatesResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipment Rates (asynchronously)
     * Get Rates for the shipment information associated with the shipment ID
     * @param shipmentId Shipment ID (required)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listShipmentRatesAsync(String shipmentId, OffsetDateTime createdAtStart, final ApiCallback<ListShipmentRatesResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listShipmentRatesValidateBeforeCall(shipmentId, createdAtStart, _callback);
        Type localVarReturnType = new TypeToken<ListShipmentRatesResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listShipments
     * @param shipmentStatus  (optional)
     * @param batchId Batch ID (optional)
     * @param tag Search for shipments based on the custom tag added to the shipment object (optional)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param createdAtEnd Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param modifiedAtStart Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time) (optional)
     * @param modifiedAtEnd Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time) (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param salesOrderId Sales Order ID (optional)
     * @param sortDir Controls the sort order of the query. (optional, default to desc)
     * @param sortBy  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listShipmentsCall(ShipmentStatus shipmentStatus, String batchId, String tag, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, OffsetDateTime modifiedAtStart, OffsetDateTime modifiedAtEnd, Integer page, Integer pageSize, String salesOrderId, SortDir sortDir, ShipmentsSortBy sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipmentStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipment_status", shipmentStatus));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("batch_id", batchId));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (createdAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_start", createdAtStart));
        }

        if (createdAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_end", createdAtEnd));
        }

        if (modifiedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_at_start", modifiedAtStart));
        }

        if (modifiedAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_at_end", modifiedAtEnd));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (salesOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sales_order_id", salesOrderId));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listShipmentsValidateBeforeCall(ShipmentStatus shipmentStatus, String batchId, String tag, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, OffsetDateTime modifiedAtStart, OffsetDateTime modifiedAtEnd, Integer page, Integer pageSize, String salesOrderId, SortDir sortDir, ShipmentsSortBy sortBy, final ApiCallback _callback) throws ApiException {
        return listShipmentsCall(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy, _callback);

    }

    /**
     * List Shipments
     * Get list of Shipments
     * @param shipmentStatus  (optional)
     * @param batchId Batch ID (optional)
     * @param tag Search for shipments based on the custom tag added to the shipment object (optional)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param createdAtEnd Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param modifiedAtStart Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time) (optional)
     * @param modifiedAtEnd Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time) (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param salesOrderId Sales Order ID (optional)
     * @param sortDir Controls the sort order of the query. (optional, default to desc)
     * @param sortBy  (optional)
     * @return ListShipmentsResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ListShipmentsResponseBody listShipments(ShipmentStatus shipmentStatus, String batchId, String tag, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, OffsetDateTime modifiedAtStart, OffsetDateTime modifiedAtEnd, Integer page, Integer pageSize, String salesOrderId, SortDir sortDir, ShipmentsSortBy sortBy) throws ApiException {
        ApiResponse<ListShipmentsResponseBody> localVarResp = listShipmentsWithHttpInfo(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy);
        return localVarResp.getData();
    }

    /**
     * List Shipments
     * Get list of Shipments
     * @param shipmentStatus  (optional)
     * @param batchId Batch ID (optional)
     * @param tag Search for shipments based on the custom tag added to the shipment object (optional)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param createdAtEnd Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param modifiedAtStart Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time) (optional)
     * @param modifiedAtEnd Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time) (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param salesOrderId Sales Order ID (optional)
     * @param sortDir Controls the sort order of the query. (optional, default to desc)
     * @param sortBy  (optional)
     * @return ApiResponse&lt;ListShipmentsResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListShipmentsResponseBody> listShipmentsWithHttpInfo(ShipmentStatus shipmentStatus, String batchId, String tag, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, OffsetDateTime modifiedAtStart, OffsetDateTime modifiedAtEnd, Integer page, Integer pageSize, String salesOrderId, SortDir sortDir, ShipmentsSortBy sortBy) throws ApiException {
        okhttp3.Call localVarCall = listShipmentsValidateBeforeCall(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy, null);
        Type localVarReturnType = new TypeToken<ListShipmentsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Shipments (asynchronously)
     * Get list of Shipments
     * @param shipmentStatus  (optional)
     * @param batchId Batch ID (optional)
     * @param tag Search for shipments based on the custom tag added to the shipment object (optional)
     * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param createdAtEnd Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param modifiedAtStart Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time) (optional)
     * @param modifiedAtEnd Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time) (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param salesOrderId Sales Order ID (optional)
     * @param sortDir Controls the sort order of the query. (optional, default to desc)
     * @param sortBy  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listShipmentsAsync(ShipmentStatus shipmentStatus, String batchId, String tag, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, OffsetDateTime modifiedAtStart, OffsetDateTime modifiedAtEnd, Integer page, Integer pageSize, String salesOrderId, SortDir sortDir, ShipmentsSortBy sortBy, final ApiCallback<ListShipmentsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listShipmentsValidateBeforeCall(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ListShipmentsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parseShipment
     * @param parseShipmentRequestBody The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide a &#x60;shipment&#x60; containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseShipmentCall(ParseShipmentRequestBody parseShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parseShipmentRequestBody;

        // create path and map variables
        String localVarPath = "/v1/shipments/recognize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseShipmentValidateBeforeCall(ParseShipmentRequestBody parseShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parseShipmentRequestBody' is set
        if (parseShipmentRequestBody == null) {
            throw new ApiException("Missing the required parameter 'parseShipmentRequestBody' when calling parseShipment(Async)");
        }

        return parseShipmentCall(parseShipmentRequestBody, _callback);

    }

    /**
     * Parse shipping info
     * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people&#39;s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine&#39;s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that&#39;s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  &gt; **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
     * @param parseShipmentRequestBody The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide a &#x60;shipment&#x60; containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use.  (required)
     * @return ParseShipmentResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ParseShipmentResponseBody parseShipment(ParseShipmentRequestBody parseShipmentRequestBody) throws ApiException {
        ApiResponse<ParseShipmentResponseBody> localVarResp = parseShipmentWithHttpInfo(parseShipmentRequestBody);
        return localVarResp.getData();
    }

    /**
     * Parse shipping info
     * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people&#39;s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine&#39;s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that&#39;s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  &gt; **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
     * @param parseShipmentRequestBody The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide a &#x60;shipment&#x60; containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use.  (required)
     * @return ApiResponse&lt;ParseShipmentResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParseShipmentResponseBody> parseShipmentWithHttpInfo(ParseShipmentRequestBody parseShipmentRequestBody) throws ApiException {
        okhttp3.Call localVarCall = parseShipmentValidateBeforeCall(parseShipmentRequestBody, null);
        Type localVarReturnType = new TypeToken<ParseShipmentResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parse shipping info (asynchronously)
     * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people&#39;s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine&#39;s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that&#39;s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  &gt; **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
     * @param parseShipmentRequestBody The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide a &#x60;shipment&#x60; containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseShipmentAsync(ParseShipmentRequestBody parseShipmentRequestBody, final ApiCallback<ParseShipmentResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseShipmentValidateBeforeCall(parseShipmentRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ParseShipmentResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagShipment
     * @param shipmentId Shipment ID (required)
     * @param tagName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagShipmentCall(String shipmentId, String tagName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}/tags/{tag_name}"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagShipmentValidateBeforeCall(String shipmentId, String tagName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling tagShipment(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling tagShipment(Async)");
        }

        return tagShipmentCall(shipmentId, tagName, _callback);

    }

    /**
     * Add Tag to Shipment
     * Add a tag to the shipment object
     * @param shipmentId Shipment ID (required)
     * @param tagName  (required)
     * @return TagShipmentResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public TagShipmentResponseBody tagShipment(String shipmentId, String tagName) throws ApiException {
        ApiResponse<TagShipmentResponseBody> localVarResp = tagShipmentWithHttpInfo(shipmentId, tagName);
        return localVarResp.getData();
    }

    /**
     * Add Tag to Shipment
     * Add a tag to the shipment object
     * @param shipmentId Shipment ID (required)
     * @param tagName  (required)
     * @return ApiResponse&lt;TagShipmentResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagShipmentResponseBody> tagShipmentWithHttpInfo(String shipmentId, String tagName) throws ApiException {
        okhttp3.Call localVarCall = tagShipmentValidateBeforeCall(shipmentId, tagName, null);
        Type localVarReturnType = new TypeToken<TagShipmentResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Tag to Shipment (asynchronously)
     * Add a tag to the shipment object
     * @param shipmentId Shipment ID (required)
     * @param tagName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagShipmentAsync(String shipmentId, String tagName, final ApiCallback<TagShipmentResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagShipmentValidateBeforeCall(shipmentId, tagName, _callback);
        Type localVarReturnType = new TypeToken<TagShipmentResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagShipment
     * @param shipmentId Shipment ID (required)
     * @param tagName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagShipmentCall(String shipmentId, String tagName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}/tags/{tag_name}"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagShipmentValidateBeforeCall(String shipmentId, String tagName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling untagShipment(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling untagShipment(Async)");
        }

        return untagShipmentCall(shipmentId, tagName, _callback);

    }

    /**
     * Remove Tag from Shipment
     * Remove an existing tag from the Shipment object
     * @param shipmentId Shipment ID (required)
     * @param tagName  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public String untagShipment(String shipmentId, String tagName) throws ApiException {
        ApiResponse<String> localVarResp = untagShipmentWithHttpInfo(shipmentId, tagName);
        return localVarResp.getData();
    }

    /**
     * Remove Tag from Shipment
     * Remove an existing tag from the Shipment object
     * @param shipmentId Shipment ID (required)
     * @param tagName  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> untagShipmentWithHttpInfo(String shipmentId, String tagName) throws ApiException {
        okhttp3.Call localVarCall = untagShipmentValidateBeforeCall(shipmentId, tagName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Tag from Shipment (asynchronously)
     * Remove an existing tag from the Shipment object
     * @param shipmentId Shipment ID (required)
     * @param tagName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagShipmentAsync(String shipmentId, String tagName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagShipmentValidateBeforeCall(shipmentId, tagName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateShipment
     * @param shipmentId Shipment ID (required)
     * @param updateShipmentRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShipmentCall(String shipmentId, UpdateShipmentRequestBody updateShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateShipmentRequestBody;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShipmentValidateBeforeCall(String shipmentId, UpdateShipmentRequestBody updateShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling updateShipment(Async)");
        }

        // verify the required parameter 'updateShipmentRequestBody' is set
        if (updateShipmentRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateShipmentRequestBody' when calling updateShipment(Async)");
        }

        return updateShipmentCall(shipmentId, updateShipmentRequestBody, _callback);

    }

    /**
     * Update Shipment By ID
     * Update a shipment object based on its ID
     * @param shipmentId Shipment ID (required)
     * @param updateShipmentRequestBody  (required)
     * @return UpdateShipmentResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateShipmentResponseBody updateShipment(String shipmentId, UpdateShipmentRequestBody updateShipmentRequestBody) throws ApiException {
        ApiResponse<UpdateShipmentResponseBody> localVarResp = updateShipmentWithHttpInfo(shipmentId, updateShipmentRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update Shipment By ID
     * Update a shipment object based on its ID
     * @param shipmentId Shipment ID (required)
     * @param updateShipmentRequestBody  (required)
     * @return ApiResponse&lt;UpdateShipmentResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateShipmentResponseBody> updateShipmentWithHttpInfo(String shipmentId, UpdateShipmentRequestBody updateShipmentRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateShipmentValidateBeforeCall(shipmentId, updateShipmentRequestBody, null);
        Type localVarReturnType = new TypeToken<UpdateShipmentResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Shipment By ID (asynchronously)
     * Update a shipment object based on its ID
     * @param shipmentId Shipment ID (required)
     * @param updateShipmentRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShipmentAsync(String shipmentId, UpdateShipmentRequestBody updateShipmentRequestBody, final ApiCallback<UpdateShipmentResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShipmentValidateBeforeCall(shipmentId, updateShipmentRequestBody, _callback);
        Type localVarReturnType = new TypeToken<UpdateShipmentResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
