/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.GetServicePointByIdResponseBody;
import org.openapitools.client.model.GetServicePointsRequest;
import org.openapitools.client.model.ListServicePointsResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicePointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServicePointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicePointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for servicePointsGetById
     * @param carrierCode Carrier code (required)
     * @param countryCode A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)  (required)
     * @param servicePointId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePointsGetByIdCall(String carrierCode, String countryCode, String servicePointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/service_points/{carrier_code}/{country_code}/{service_point_id}"
            .replace("{" + "carrier_code" + "}", localVarApiClient.escapeString(carrierCode.toString()))
            .replace("{" + "country_code" + "}", localVarApiClient.escapeString(countryCode.toString()))
            .replace("{" + "service_point_id" + "}", localVarApiClient.escapeString(servicePointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicePointsGetByIdValidateBeforeCall(String carrierCode, String countryCode, String servicePointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierCode' is set
        if (carrierCode == null) {
            throw new ApiException("Missing the required parameter 'carrierCode' when calling servicePointsGetById(Async)");
        }

        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling servicePointsGetById(Async)");
        }

        // verify the required parameter 'servicePointId' is set
        if (servicePointId == null) {
            throw new ApiException("Missing the required parameter 'servicePointId' when calling servicePointsGetById(Async)");
        }

        return servicePointsGetByIdCall(carrierCode, countryCode, servicePointId, _callback);

    }

    /**
     * Get Service Point By ID
     * Returns a carrier service point by using the service_point_id
     * @param carrierCode Carrier code (required)
     * @param countryCode A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)  (required)
     * @param servicePointId  (required)
     * @return GetServicePointByIdResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public GetServicePointByIdResponseBody servicePointsGetById(String carrierCode, String countryCode, String servicePointId) throws ApiException {
        ApiResponse<GetServicePointByIdResponseBody> localVarResp = servicePointsGetByIdWithHttpInfo(carrierCode, countryCode, servicePointId);
        return localVarResp.getData();
    }

    /**
     * Get Service Point By ID
     * Returns a carrier service point by using the service_point_id
     * @param carrierCode Carrier code (required)
     * @param countryCode A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)  (required)
     * @param servicePointId  (required)
     * @return ApiResponse&lt;GetServicePointByIdResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetServicePointByIdResponseBody> servicePointsGetByIdWithHttpInfo(String carrierCode, String countryCode, String servicePointId) throws ApiException {
        okhttp3.Call localVarCall = servicePointsGetByIdValidateBeforeCall(carrierCode, countryCode, servicePointId, null);
        Type localVarReturnType = new TypeToken<GetServicePointByIdResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Service Point By ID (asynchronously)
     * Returns a carrier service point by using the service_point_id
     * @param carrierCode Carrier code (required)
     * @param countryCode A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)  (required)
     * @param servicePointId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePointsGetByIdAsync(String carrierCode, String countryCode, String servicePointId, final ApiCallback<GetServicePointByIdResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicePointsGetByIdValidateBeforeCall(carrierCode, countryCode, servicePointId, _callback);
        Type localVarReturnType = new TypeToken<GetServicePointByIdResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicePointsList
     * @param getServicePointsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePointsListCall(GetServicePointsRequest getServicePointsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getServicePointsRequest;

        // create path and map variables
        String localVarPath = "/v1/service_points/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicePointsListValidateBeforeCall(GetServicePointsRequest getServicePointsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getServicePointsRequest' is set
        if (getServicePointsRequest == null) {
            throw new ApiException("Missing the required parameter 'getServicePointsRequest' when calling servicePointsList(Async)");
        }

        return servicePointsListCall(getServicePointsRequest, _callback);

    }

    /**
     * List Service Points
     * List carrier service points by location
     * @param getServicePointsRequest  (required)
     * @return ListServicePointsResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ListServicePointsResponseBody servicePointsList(GetServicePointsRequest getServicePointsRequest) throws ApiException {
        ApiResponse<ListServicePointsResponseBody> localVarResp = servicePointsListWithHttpInfo(getServicePointsRequest);
        return localVarResp.getData();
    }

    /**
     * List Service Points
     * List carrier service points by location
     * @param getServicePointsRequest  (required)
     * @return ApiResponse&lt;ListServicePointsResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServicePointsResponseBody> servicePointsListWithHttpInfo(GetServicePointsRequest getServicePointsRequest) throws ApiException {
        okhttp3.Call localVarCall = servicePointsListValidateBeforeCall(getServicePointsRequest, null);
        Type localVarReturnType = new TypeToken<ListServicePointsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Service Points (asynchronously)
     * List carrier service points by location
     * @param getServicePointsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePointsListAsync(GetServicePointsRequest getServicePointsRequest, final ApiCallback<ListServicePointsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicePointsListValidateBeforeCall(getServicePointsRequest, _callback);
        Type localVarReturnType = new TypeToken<ListServicePointsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
