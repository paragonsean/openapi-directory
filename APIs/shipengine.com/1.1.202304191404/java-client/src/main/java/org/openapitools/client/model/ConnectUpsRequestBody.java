/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpsInvoice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A UPS account information request body
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectUpsRequestBody {
  public static final String SERIALIZED_NAME_ACCOUNT_COUNTRY_CODE = "account_country_code";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_COUNTRY_CODE)
  private String accountCountryCode;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_POSTAL_CODE = "account_postal_code";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_POSTAL_CODE)
  private String accountPostalCode;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_AGREE_TO_TECHNOLOGY_AGREEMENT = "agree_to_technology_agreement";
  @SerializedName(SERIALIZED_NAME_AGREE_TO_TECHNOLOGY_AGREEMENT)
  private Boolean agreeToTechnologyAgreement;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private UpsInvoice invoice;

  public static final String SERIALIZED_NAME_INVOICE_AMOUNT = "invoice_amount";
  @SerializedName(SERIALIZED_NAME_INVOICE_AMOUNT)
  private Double invoiceAmount;

  public static final String SERIALIZED_NAME_INVOICE_CURRENCY_CODE = "invoice_currency_code";
  @SerializedName(SERIALIZED_NAME_INVOICE_CURRENCY_CODE)
  private String invoiceCurrencyCode;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ConnectUpsRequestBody() {
  }

  public ConnectUpsRequestBody accountCountryCode(String accountCountryCode) {
    this.accountCountryCode = accountCountryCode;
    return this;
  }

  /**
   * Account country code
   * @return accountCountryCode
   */
  @javax.annotation.Nonnull
  public String getAccountCountryCode() {
    return accountCountryCode;
  }

  public void setAccountCountryCode(String accountCountryCode) {
    this.accountCountryCode = accountCountryCode;
  }


  public ConnectUpsRequestBody accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Account number
   * @return accountNumber
   */
  @javax.annotation.Nonnull
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public ConnectUpsRequestBody accountPostalCode(String accountPostalCode) {
    this.accountPostalCode = accountPostalCode;
    return this;
  }

  /**
   * Account postal code
   * @return accountPostalCode
   */
  @javax.annotation.Nonnull
  public String getAccountPostalCode() {
    return accountPostalCode;
  }

  public void setAccountPostalCode(String accountPostalCode) {
    this.accountPostalCode = accountPostalCode;
  }


  public ConnectUpsRequestBody address1(String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * Address Line 1
   * @return address1
   */
  @javax.annotation.Nonnull
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }


  public ConnectUpsRequestBody address2(String address2) {
    this.address2 = address2;
    return this;
  }

  /**
   * Address Line 2
   * @return address2
   */
  @javax.annotation.Nullable
  public String getAddress2() {
    return address2;
  }

  public void setAddress2(String address2) {
    this.address2 = address2;
  }


  public ConnectUpsRequestBody agreeToTechnologyAgreement(Boolean agreeToTechnologyAgreement) {
    this.agreeToTechnologyAgreement = agreeToTechnologyAgreement;
    return this;
  }

  /**
   * The Agreement to the [UPS Technology Agreement](https://www.ups.com/assets/resources/media/UTA_with_EUR.pdf)
   * @return agreeToTechnologyAgreement
   */
  @javax.annotation.Nonnull
  public Boolean getAgreeToTechnologyAgreement() {
    return agreeToTechnologyAgreement;
  }

  public void setAgreeToTechnologyAgreement(Boolean agreeToTechnologyAgreement) {
    this.agreeToTechnologyAgreement = agreeToTechnologyAgreement;
  }


  public ConnectUpsRequestBody city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public ConnectUpsRequestBody company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Company
   * @return company
   */
  @javax.annotation.Nonnull
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public ConnectUpsRequestBody countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country code
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public ConnectUpsRequestBody email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ConnectUpsRequestBody firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ConnectUpsRequestBody invoice(UpsInvoice invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * The UPS invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public UpsInvoice getInvoice() {
    return invoice;
  }

  public void setInvoice(UpsInvoice invoice) {
    this.invoice = invoice;
  }


  public ConnectUpsRequestBody invoiceAmount(Double invoiceAmount) {
    this.invoiceAmount = invoiceAmount;
    return this;
  }

  /**
   * The invoice amount
   * @return invoiceAmount
   */
  @javax.annotation.Nullable
  public Double getInvoiceAmount() {
    return invoiceAmount;
  }

  public void setInvoiceAmount(Double invoiceAmount) {
    this.invoiceAmount = invoiceAmount;
  }


  public ConnectUpsRequestBody invoiceCurrencyCode(String invoiceCurrencyCode) {
    this.invoiceCurrencyCode = invoiceCurrencyCode;
    return this;
  }

  /**
   * The invoice currency code
   * @return invoiceCurrencyCode
   */
  @javax.annotation.Nullable
  public String getInvoiceCurrencyCode() {
    return invoiceCurrencyCode;
  }

  public void setInvoiceCurrencyCode(String invoiceCurrencyCode) {
    this.invoiceCurrencyCode = invoiceCurrencyCode;
  }


  public ConnectUpsRequestBody lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ConnectUpsRequestBody nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * Nickname
   * @return nickname
   */
  @javax.annotation.Nonnull
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public ConnectUpsRequestBody phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Phone
   * @return phone
   */
  @javax.annotation.Nonnull
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public ConnectUpsRequestBody postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public ConnectUpsRequestBody state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public ConnectUpsRequestBody title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectUpsRequestBody connectUpsRequestBody = (ConnectUpsRequestBody) o;
    return Objects.equals(this.accountCountryCode, connectUpsRequestBody.accountCountryCode) &&
        Objects.equals(this.accountNumber, connectUpsRequestBody.accountNumber) &&
        Objects.equals(this.accountPostalCode, connectUpsRequestBody.accountPostalCode) &&
        Objects.equals(this.address1, connectUpsRequestBody.address1) &&
        Objects.equals(this.address2, connectUpsRequestBody.address2) &&
        Objects.equals(this.agreeToTechnologyAgreement, connectUpsRequestBody.agreeToTechnologyAgreement) &&
        Objects.equals(this.city, connectUpsRequestBody.city) &&
        Objects.equals(this.company, connectUpsRequestBody.company) &&
        Objects.equals(this.countryCode, connectUpsRequestBody.countryCode) &&
        Objects.equals(this.email, connectUpsRequestBody.email) &&
        Objects.equals(this.firstName, connectUpsRequestBody.firstName) &&
        Objects.equals(this.invoice, connectUpsRequestBody.invoice) &&
        Objects.equals(this.invoiceAmount, connectUpsRequestBody.invoiceAmount) &&
        Objects.equals(this.invoiceCurrencyCode, connectUpsRequestBody.invoiceCurrencyCode) &&
        Objects.equals(this.lastName, connectUpsRequestBody.lastName) &&
        Objects.equals(this.nickname, connectUpsRequestBody.nickname) &&
        Objects.equals(this.phone, connectUpsRequestBody.phone) &&
        Objects.equals(this.postalCode, connectUpsRequestBody.postalCode) &&
        Objects.equals(this.state, connectUpsRequestBody.state) &&
        Objects.equals(this.title, connectUpsRequestBody.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCountryCode, accountNumber, accountPostalCode, address1, address2, agreeToTechnologyAgreement, city, company, countryCode, email, firstName, invoice, invoiceAmount, invoiceCurrencyCode, lastName, nickname, phone, postalCode, state, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectUpsRequestBody {\n");
    sb.append("    accountCountryCode: ").append(toIndentedString(accountCountryCode)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountPostalCode: ").append(toIndentedString(accountPostalCode)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    agreeToTechnologyAgreement: ").append(toIndentedString(agreeToTechnologyAgreement)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceAmount: ").append(toIndentedString(invoiceAmount)).append("\n");
    sb.append("    invoiceCurrencyCode: ").append(toIndentedString(invoiceCurrencyCode)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_country_code");
    openapiFields.add("account_number");
    openapiFields.add("account_postal_code");
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("agree_to_technology_agreement");
    openapiFields.add("city");
    openapiFields.add("company");
    openapiFields.add("country_code");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("invoice");
    openapiFields.add("invoice_amount");
    openapiFields.add("invoice_currency_code");
    openapiFields.add("last_name");
    openapiFields.add("nickname");
    openapiFields.add("phone");
    openapiFields.add("postal_code");
    openapiFields.add("state");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_country_code");
    openapiRequiredFields.add("account_number");
    openapiRequiredFields.add("account_postal_code");
    openapiRequiredFields.add("address1");
    openapiRequiredFields.add("agree_to_technology_agreement");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("company");
    openapiRequiredFields.add("country_code");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("last_name");
    openapiRequiredFields.add("nickname");
    openapiRequiredFields.add("phone");
    openapiRequiredFields.add("postal_code");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectUpsRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectUpsRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectUpsRequestBody is not found in the empty JSON string", ConnectUpsRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectUpsRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectUpsRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectUpsRequestBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_country_code").toString()));
      }
      if (!jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if (!jsonObj.get("account_postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_postal_code").toString()));
      }
      if (!jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if ((jsonObj.get("address2") != null && !jsonObj.get("address2").isJsonNull()) && !jsonObj.get("address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address2").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if (!jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        UpsInvoice.validateJsonElement(jsonObj.get("invoice"));
      }
      if ((jsonObj.get("invoice_currency_code") != null && !jsonObj.get("invoice_currency_code").isJsonNull()) && !jsonObj.get("invoice_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_currency_code").toString()));
      }
      if (!jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (!jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if (!jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectUpsRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectUpsRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectUpsRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectUpsRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectUpsRequestBody>() {
           @Override
           public void write(JsonWriter out, ConnectUpsRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectUpsRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectUpsRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectUpsRequestBody
   * @throws IOException if the JSON string is invalid with respect to ConnectUpsRequestBody
   */
  public static ConnectUpsRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectUpsRequestBody.class);
  }

  /**
   * Convert an instance of ConnectUpsRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

