/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateTagResponseBody;
import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.ListTagsResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTag
     * @param tagName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagCall(String tagName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tags/{tag_name}"
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTagValidateBeforeCall(String tagName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling createTag(Async)");
        }

        return createTagCall(tagName, _callback);

    }

    /**
     * Create a New Tag
     * Create a new Tag for customizing how you track your shipments
     * @param tagName  (required)
     * @return CreateTagResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateTagResponseBody createTag(String tagName) throws ApiException {
        ApiResponse<CreateTagResponseBody> localVarResp = createTagWithHttpInfo(tagName);
        return localVarResp.getData();
    }

    /**
     * Create a New Tag
     * Create a new Tag for customizing how you track your shipments
     * @param tagName  (required)
     * @return ApiResponse&lt;CreateTagResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTagResponseBody> createTagWithHttpInfo(String tagName) throws ApiException {
        okhttp3.Call localVarCall = createTagValidateBeforeCall(tagName, null);
        Type localVarReturnType = new TypeToken<CreateTagResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a New Tag (asynchronously)
     * Create a new Tag for customizing how you track your shipments
     * @param tagName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagAsync(String tagName, final ApiCallback<CreateTagResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTagValidateBeforeCall(tagName, _callback);
        Type localVarReturnType = new TypeToken<CreateTagResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTag
     * @param tagName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagCall(String tagName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tags/{tag_name}"
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTagValidateBeforeCall(String tagName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling deleteTag(Async)");
        }

        return deleteTagCall(tagName, _callback);

    }

    /**
     * Delete Tag
     * Delete a tag that is no longer needed
     * @param tagName  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public String deleteTag(String tagName) throws ApiException {
        ApiResponse<String> localVarResp = deleteTagWithHttpInfo(tagName);
        return localVarResp.getData();
    }

    /**
     * Delete Tag
     * Delete a tag that is no longer needed
     * @param tagName  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> deleteTagWithHttpInfo(String tagName) throws ApiException {
        okhttp3.Call localVarCall = deleteTagValidateBeforeCall(tagName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Tag (asynchronously)
     * Delete a tag that is no longer needed
     * @param tagName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagAsync(String tagName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTagValidateBeforeCall(tagName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTags
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listTagsCall(_callback);

    }

    /**
     * Get Tags
     * Get a list of all tags associated with an account.
     * @return ListTagsResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsResponseBody listTags() throws ApiException {
        ApiResponse<ListTagsResponseBody> localVarResp = listTagsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Tags
     * Get a list of all tags associated with an account.
     * @return ApiResponse&lt;ListTagsResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsResponseBody> listTagsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listTagsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListTagsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Tags (asynchronously)
     * Get a list of all tags associated with an account.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsAsync(final ApiCallback<ListTagsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListTagsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameTag
     * @param tagName  (required)
     * @param newTagName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameTagCall(String tagName, String newTagName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tags/{tag_name}/{new_tag_name}"
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()))
            .replace("{" + "new_tag_name" + "}", localVarApiClient.escapeString(newTagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameTagValidateBeforeCall(String tagName, String newTagName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling renameTag(Async)");
        }

        // verify the required parameter 'newTagName' is set
        if (newTagName == null) {
            throw new ApiException("Missing the required parameter 'newTagName' when calling renameTag(Async)");
        }

        return renameTagCall(tagName, newTagName, _callback);

    }

    /**
     * Update Tag Name
     * Change a tag name while still keeping the relevant shipments attached to it
     * @param tagName  (required)
     * @param newTagName  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public String renameTag(String tagName, String newTagName) throws ApiException {
        ApiResponse<String> localVarResp = renameTagWithHttpInfo(tagName, newTagName);
        return localVarResp.getData();
    }

    /**
     * Update Tag Name
     * Change a tag name while still keeping the relevant shipments attached to it
     * @param tagName  (required)
     * @param newTagName  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> renameTagWithHttpInfo(String tagName, String newTagName) throws ApiException {
        okhttp3.Call localVarCall = renameTagValidateBeforeCall(tagName, newTagName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Tag Name (asynchronously)
     * Change a tag name while still keeping the relevant shipments attached to it
     * @param tagName  (required)
     * @param newTagName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameTagAsync(String tagName, String newTagName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameTagValidateBeforeCall(tagName, newTagName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
