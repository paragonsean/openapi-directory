/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MonetaryValue;
import org.openapitools.client.model.RateType;
import org.openapitools.client.model.ValidationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rate {
  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrier_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private String carrierCode;

  public static final String SERIALIZED_NAME_CARRIER_DELIVERY_DAYS = "carrier_delivery_days";
  @SerializedName(SERIALIZED_NAME_CARRIER_DELIVERY_DAYS)
  private String carrierDeliveryDays;

  public static final String SERIALIZED_NAME_CARRIER_FRIENDLY_NAME = "carrier_friendly_name";
  @SerializedName(SERIALIZED_NAME_CARRIER_FRIENDLY_NAME)
  private String carrierFriendlyName;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrier_id";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_CARRIER_NICKNAME = "carrier_nickname";
  @SerializedName(SERIALIZED_NAME_CARRIER_NICKNAME)
  private String carrierNickname;

  public static final String SERIALIZED_NAME_CONFIRMATION_AMOUNT = "confirmation_amount";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_AMOUNT)
  private MonetaryValue confirmationAmount;

  public static final String SERIALIZED_NAME_DELIVERY_DAYS = "delivery_days";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DAYS)
  private Integer deliveryDays;

  public static final String SERIALIZED_NAME_ERROR_MESSAGES = "error_messages";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGES)
  private List<String> errorMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_ESTIMATED_DELIVERY_DATE = "estimated_delivery_date";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_DELIVERY_DATE)
  private OffsetDateTime estimatedDeliveryDate;

  public static final String SERIALIZED_NAME_GUARANTEED_SERVICE = "guaranteed_service";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_SERVICE)
  private Boolean guaranteedService;

  public static final String SERIALIZED_NAME_INSURANCE_AMOUNT = "insurance_amount";
  @SerializedName(SERIALIZED_NAME_INSURANCE_AMOUNT)
  private MonetaryValue insuranceAmount;

  public static final String SERIALIZED_NAME_NEGOTIATED_RATE = "negotiated_rate";
  @SerializedName(SERIALIZED_NAME_NEGOTIATED_RATE)
  private Boolean negotiatedRate;

  public static final String SERIALIZED_NAME_OTHER_AMOUNT = "other_amount";
  @SerializedName(SERIALIZED_NAME_OTHER_AMOUNT)
  private MonetaryValue otherAmount;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE = "package_type";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE)
  private String packageType;

  public static final String SERIALIZED_NAME_RATE_ID = "rate_id";
  @SerializedName(SERIALIZED_NAME_RATE_ID)
  private String rateId;

  public static final String SERIALIZED_NAME_RATE_TYPE = "rate_type";
  @SerializedName(SERIALIZED_NAME_RATE_TYPE)
  private RateType rateType;

  public static final String SERIALIZED_NAME_SERVICE_CODE = "service_code";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODE)
  private String serviceCode;

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "service_type";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private String serviceType;

  public static final String SERIALIZED_NAME_SHIP_DATE = "ship_date";
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public static final String SERIALIZED_NAME_SHIPPING_AMOUNT = "shipping_amount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AMOUNT)
  private MonetaryValue shippingAmount;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private MonetaryValue taxAmount;

  public static final String SERIALIZED_NAME_TRACKABLE = "trackable";
  @SerializedName(SERIALIZED_NAME_TRACKABLE)
  private Boolean trackable;

  public static final String SERIALIZED_NAME_VALIDATION_STATUS = "validation_status";
  @SerializedName(SERIALIZED_NAME_VALIDATION_STATUS)
  private ValidationStatus validationStatus;

  public static final String SERIALIZED_NAME_WARNING_MESSAGES = "warning_messages";
  @SerializedName(SERIALIZED_NAME_WARNING_MESSAGES)
  private List<String> warningMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private Integer zone;

  public Rate() {
  }

  public Rate(
     String carrierCode, 
     String carrierDeliveryDays, 
     String carrierFriendlyName, 
     String carrierId, 
     String carrierNickname, 
     MonetaryValue confirmationAmount, 
     Integer deliveryDays, 
     List<String> errorMessages, 
     OffsetDateTime estimatedDeliveryDate, 
     Boolean guaranteedService, 
     MonetaryValue insuranceAmount, 
     Boolean negotiatedRate, 
     MonetaryValue otherAmount, 
     String packageType, 
     String rateId, 
     RateType rateType, 
     String serviceCode, 
     String serviceType, 
     OffsetDateTime shipDate, 
     MonetaryValue shippingAmount, 
     MonetaryValue taxAmount, 
     Boolean trackable, 
     ValidationStatus validationStatus, 
     List<String> warningMessages, 
     Integer zone
  ) {
    this();
    this.carrierCode = carrierCode;
    this.carrierDeliveryDays = carrierDeliveryDays;
    this.carrierFriendlyName = carrierFriendlyName;
    this.carrierId = carrierId;
    this.carrierNickname = carrierNickname;
    this.confirmationAmount = confirmationAmount;
    this.deliveryDays = deliveryDays;
    this.errorMessages = errorMessages;
    this.estimatedDeliveryDate = estimatedDeliveryDate;
    this.guaranteedService = guaranteedService;
    this.insuranceAmount = insuranceAmount;
    this.negotiatedRate = negotiatedRate;
    this.otherAmount = otherAmount;
    this.packageType = packageType;
    this.rateId = rateId;
    this.rateType = rateType;
    this.serviceCode = serviceCode;
    this.serviceType = serviceType;
    this.shipDate = shipDate;
    this.shippingAmount = shippingAmount;
    this.taxAmount = taxAmount;
    this.trackable = trackable;
    this.validationStatus = validationStatus;
    this.warningMessages = warningMessages;
    this.zone = zone;
  }

  /**
   * carrier code
   * @return carrierCode
   */
  @javax.annotation.Nonnull
  public String getCarrierCode() {
    return carrierCode;
  }



  /**
   * The carrier delivery days
   * @return carrierDeliveryDays
   */
  @javax.annotation.Nullable
  public String getCarrierDeliveryDays() {
    return carrierDeliveryDays;
  }



  /**
   * carrier friendly name
   * @return carrierFriendlyName
   */
  @javax.annotation.Nonnull
  public String getCarrierFriendlyName() {
    return carrierFriendlyName;
  }



  /**
   * A string that uniquely identifies the carrier
   * @return carrierId
   */
  @javax.annotation.Nonnull
  public String getCarrierId() {
    return carrierId;
  }



  /**
   * carrier nickname
   * @return carrierNickname
   */
  @javax.annotation.Nonnull
  public String getCarrierNickname() {
    return carrierNickname;
  }



  /**
   * The confirmation amount
   * @return confirmationAmount
   */
  @javax.annotation.Nonnull
  public MonetaryValue getConfirmationAmount() {
    return confirmationAmount;
  }



  /**
   * The number of days estimated for delivery, this will show the _actual_ delivery time if for example, the package gets shipped on a Friday 
   * minimum: 1
   * @return deliveryDays
   */
  @javax.annotation.Nullable
  public Integer getDeliveryDays() {
    return deliveryDays;
  }



  /**
   * The error messages
   * @return errorMessages
   */
  @javax.annotation.Nonnull
  public List<String> getErrorMessages() {
    return errorMessages;
  }



  /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date, but not a specific time.  The value _may_ contain a time component, but it will be set to &#x60;00:00:00&#x60; UTC by ShipEngine. 
   * @return estimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEstimatedDeliveryDate() {
    return estimatedDeliveryDate;
  }



  /**
   * Indicates if the rate is guaranteed.
   * @return guaranteedService
   */
  @javax.annotation.Nonnull
  public Boolean getGuaranteedService() {
    return guaranteedService;
  }



  /**
   * The insurance amount
   * @return insuranceAmount
   */
  @javax.annotation.Nonnull
  public MonetaryValue getInsuranceAmount() {
    return insuranceAmount;
  }



  /**
   * Indicates if the rates been negotiated
   * @return negotiatedRate
   */
  @javax.annotation.Nonnull
  public Boolean getNegotiatedRate() {
    return negotiatedRate;
  }



  /**
   * Any other charges associated with this rate
   * @return otherAmount
   */
  @javax.annotation.Nonnull
  public MonetaryValue getOtherAmount() {
    return otherAmount;
  }



  /**
   * package type that this rate was estimated for
   * @return packageType
   */
  @javax.annotation.Nullable
  public String getPackageType() {
    return packageType;
  }



  /**
   * A string that uniquely identifies the rate
   * @return rateId
   */
  @javax.annotation.Nonnull
  public String getRateId() {
    return rateId;
  }



  /**
   * Get rateType
   * @return rateType
   */
  @javax.annotation.Nonnull
  public RateType getRateType() {
    return rateType;
  }



  /**
   * service code for the rate
   * @return serviceCode
   */
  @javax.annotation.Nonnull
  public String getServiceCode() {
    return serviceCode;
  }



  /**
   * service type
   * @return serviceType
   */
  @javax.annotation.Nonnull
  public String getServiceType() {
    return serviceType;
  }



  /**
   * ship date
   * @return shipDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShipDate() {
    return shipDate;
  }



  /**
   * The shipping amount
   * @return shippingAmount
   */
  @javax.annotation.Nonnull
  public MonetaryValue getShippingAmount() {
    return shippingAmount;
  }



  /**
   * Tariff and additional taxes associated with an international shipment.
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public MonetaryValue getTaxAmount() {
    return taxAmount;
  }



  /**
   * Indicates if rate is trackable
   * @return trackable
   */
  @javax.annotation.Nonnull
  public Boolean getTrackable() {
    return trackable;
  }



  /**
   * Get validationStatus
   * @return validationStatus
   */
  @javax.annotation.Nonnull
  public ValidationStatus getValidationStatus() {
    return validationStatus;
  }



  /**
   * The warning messages
   * @return warningMessages
   */
  @javax.annotation.Nonnull
  public List<String> getWarningMessages() {
    return warningMessages;
  }



  /**
   * Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of custom zones that vary depending upon the ship_to and ship_from location 
   * minimum: 0
   * @return zone
   */
  @javax.annotation.Nullable
  public Integer getZone() {
    return zone;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rate rate = (Rate) o;
    return Objects.equals(this.carrierCode, rate.carrierCode) &&
        Objects.equals(this.carrierDeliveryDays, rate.carrierDeliveryDays) &&
        Objects.equals(this.carrierFriendlyName, rate.carrierFriendlyName) &&
        Objects.equals(this.carrierId, rate.carrierId) &&
        Objects.equals(this.carrierNickname, rate.carrierNickname) &&
        Objects.equals(this.confirmationAmount, rate.confirmationAmount) &&
        Objects.equals(this.deliveryDays, rate.deliveryDays) &&
        Objects.equals(this.errorMessages, rate.errorMessages) &&
        Objects.equals(this.estimatedDeliveryDate, rate.estimatedDeliveryDate) &&
        Objects.equals(this.guaranteedService, rate.guaranteedService) &&
        Objects.equals(this.insuranceAmount, rate.insuranceAmount) &&
        Objects.equals(this.negotiatedRate, rate.negotiatedRate) &&
        Objects.equals(this.otherAmount, rate.otherAmount) &&
        Objects.equals(this.packageType, rate.packageType) &&
        Objects.equals(this.rateId, rate.rateId) &&
        Objects.equals(this.rateType, rate.rateType) &&
        Objects.equals(this.serviceCode, rate.serviceCode) &&
        Objects.equals(this.serviceType, rate.serviceType) &&
        Objects.equals(this.shipDate, rate.shipDate) &&
        Objects.equals(this.shippingAmount, rate.shippingAmount) &&
        Objects.equals(this.taxAmount, rate.taxAmount) &&
        Objects.equals(this.trackable, rate.trackable) &&
        Objects.equals(this.validationStatus, rate.validationStatus) &&
        Objects.equals(this.warningMessages, rate.warningMessages) &&
        Objects.equals(this.zone, rate.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierCode, carrierDeliveryDays, carrierFriendlyName, carrierId, carrierNickname, confirmationAmount, deliveryDays, errorMessages, estimatedDeliveryDate, guaranteedService, insuranceAmount, negotiatedRate, otherAmount, packageType, rateId, rateType, serviceCode, serviceType, shipDate, shippingAmount, taxAmount, trackable, validationStatus, warningMessages, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rate {\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    carrierDeliveryDays: ").append(toIndentedString(carrierDeliveryDays)).append("\n");
    sb.append("    carrierFriendlyName: ").append(toIndentedString(carrierFriendlyName)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    carrierNickname: ").append(toIndentedString(carrierNickname)).append("\n");
    sb.append("    confirmationAmount: ").append(toIndentedString(confirmationAmount)).append("\n");
    sb.append("    deliveryDays: ").append(toIndentedString(deliveryDays)).append("\n");
    sb.append("    errorMessages: ").append(toIndentedString(errorMessages)).append("\n");
    sb.append("    estimatedDeliveryDate: ").append(toIndentedString(estimatedDeliveryDate)).append("\n");
    sb.append("    guaranteedService: ").append(toIndentedString(guaranteedService)).append("\n");
    sb.append("    insuranceAmount: ").append(toIndentedString(insuranceAmount)).append("\n");
    sb.append("    negotiatedRate: ").append(toIndentedString(negotiatedRate)).append("\n");
    sb.append("    otherAmount: ").append(toIndentedString(otherAmount)).append("\n");
    sb.append("    packageType: ").append(toIndentedString(packageType)).append("\n");
    sb.append("    rateId: ").append(toIndentedString(rateId)).append("\n");
    sb.append("    rateType: ").append(toIndentedString(rateType)).append("\n");
    sb.append("    serviceCode: ").append(toIndentedString(serviceCode)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    trackable: ").append(toIndentedString(trackable)).append("\n");
    sb.append("    validationStatus: ").append(toIndentedString(validationStatus)).append("\n");
    sb.append("    warningMessages: ").append(toIndentedString(warningMessages)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carrier_code");
    openapiFields.add("carrier_delivery_days");
    openapiFields.add("carrier_friendly_name");
    openapiFields.add("carrier_id");
    openapiFields.add("carrier_nickname");
    openapiFields.add("confirmation_amount");
    openapiFields.add("delivery_days");
    openapiFields.add("error_messages");
    openapiFields.add("estimated_delivery_date");
    openapiFields.add("guaranteed_service");
    openapiFields.add("insurance_amount");
    openapiFields.add("negotiated_rate");
    openapiFields.add("other_amount");
    openapiFields.add("package_type");
    openapiFields.add("rate_id");
    openapiFields.add("rate_type");
    openapiFields.add("service_code");
    openapiFields.add("service_type");
    openapiFields.add("ship_date");
    openapiFields.add("shipping_amount");
    openapiFields.add("tax_amount");
    openapiFields.add("trackable");
    openapiFields.add("validation_status");
    openapiFields.add("warning_messages");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("carrier_code");
    openapiRequiredFields.add("carrier_friendly_name");
    openapiRequiredFields.add("carrier_id");
    openapiRequiredFields.add("carrier_nickname");
    openapiRequiredFields.add("confirmation_amount");
    openapiRequiredFields.add("error_messages");
    openapiRequiredFields.add("guaranteed_service");
    openapiRequiredFields.add("insurance_amount");
    openapiRequiredFields.add("negotiated_rate");
    openapiRequiredFields.add("other_amount");
    openapiRequiredFields.add("package_type");
    openapiRequiredFields.add("rate_id");
    openapiRequiredFields.add("rate_type");
    openapiRequiredFields.add("service_code");
    openapiRequiredFields.add("service_type");
    openapiRequiredFields.add("shipping_amount");
    openapiRequiredFields.add("trackable");
    openapiRequiredFields.add("validation_status");
    openapiRequiredFields.add("warning_messages");
    openapiRequiredFields.add("zone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rate is not found in the empty JSON string", Rate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Rate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("carrier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_code").toString()));
      }
      if ((jsonObj.get("carrier_delivery_days") != null && !jsonObj.get("carrier_delivery_days").isJsonNull()) && !jsonObj.get("carrier_delivery_days").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_delivery_days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_delivery_days").toString()));
      }
      if (!jsonObj.get("carrier_friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_friendly_name").toString()));
      }
      if (!jsonObj.get("carrier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_id").toString()));
      }
      if (!jsonObj.get("carrier_nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_nickname").toString()));
      }
      // validate the required field `confirmation_amount`
      MonetaryValue.validateJsonElement(jsonObj.get("confirmation_amount"));
      // ensure the required json array is present
      if (jsonObj.get("error_messages") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("error_messages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_messages` to be an array in the JSON string but got `%s`", jsonObj.get("error_messages").toString()));
      }
      // validate the required field `insurance_amount`
      MonetaryValue.validateJsonElement(jsonObj.get("insurance_amount"));
      // validate the required field `other_amount`
      MonetaryValue.validateJsonElement(jsonObj.get("other_amount"));
      if ((jsonObj.get("package_type") != null && !jsonObj.get("package_type").isJsonNull()) && !jsonObj.get("package_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_type").toString()));
      }
      if (!jsonObj.get("rate_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate_id").toString()));
      }
      // validate the required field `rate_type`
      RateType.validateJsonElement(jsonObj.get("rate_type"));
      if (!jsonObj.get("service_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_code").toString()));
      }
      if (!jsonObj.get("service_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_type").toString()));
      }
      // validate the required field `shipping_amount`
      MonetaryValue.validateJsonElement(jsonObj.get("shipping_amount"));
      // validate the optional field `tax_amount`
      if (jsonObj.get("tax_amount") != null && !jsonObj.get("tax_amount").isJsonNull()) {
        MonetaryValue.validateJsonElement(jsonObj.get("tax_amount"));
      }
      // validate the required field `validation_status`
      ValidationStatus.validateJsonElement(jsonObj.get("validation_status"));
      // ensure the required json array is present
      if (jsonObj.get("warning_messages") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("warning_messages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warning_messages` to be an array in the JSON string but got `%s`", jsonObj.get("warning_messages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rate.class));

       return (TypeAdapter<T>) new TypeAdapter<Rate>() {
           @Override
           public void write(JsonWriter out, Rate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rate
   * @throws IOException if the JSON string is invalid with respect to Rate
   */
  public static Rate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rate.class);
  }

  /**
   * Convert an instance of Rate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

