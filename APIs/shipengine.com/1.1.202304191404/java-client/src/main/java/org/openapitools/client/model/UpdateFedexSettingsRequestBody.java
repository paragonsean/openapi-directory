/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AncillaryServiceEndorsement;
import org.openapitools.client.model.FedexPickupType;
import org.openapitools.client.model.SmartPostHub;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An update Fedex settings request body
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFedexSettingsRequestBody {
  public static final String SERIALIZED_NAME_IS_PRIMARY_ACCOUNT = "is_primary_account";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY_ACCOUNT)
  private Boolean isPrimaryAccount;

  public static final String SERIALIZED_NAME_LETTERHEAD_IMAGE = "letterhead_image";
  @SerializedName(SERIALIZED_NAME_LETTERHEAD_IMAGE)
  private String letterheadImage;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_PICKUP_TYPE = "pickup_type";
  @SerializedName(SERIALIZED_NAME_PICKUP_TYPE)
  private FedexPickupType pickupType;

  public static final String SERIALIZED_NAME_SIGNATURE_IMAGE = "signature_image";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_IMAGE)
  private String signatureImage;

  public static final String SERIALIZED_NAME_SMART_POST_ENDORSEMENT = "smart_post_endorsement";
  @SerializedName(SERIALIZED_NAME_SMART_POST_ENDORSEMENT)
  private AncillaryServiceEndorsement smartPostEndorsement;

  public static final String SERIALIZED_NAME_SMART_POST_HUB = "smart_post_hub";
  @SerializedName(SERIALIZED_NAME_SMART_POST_HUB)
  private SmartPostHub smartPostHub;

  public UpdateFedexSettingsRequestBody() {
  }

  public UpdateFedexSettingsRequestBody isPrimaryAccount(Boolean isPrimaryAccount) {
    this.isPrimaryAccount = isPrimaryAccount;
    return this;
  }

  /**
   * Get isPrimaryAccount
   * @return isPrimaryAccount
   */
  @javax.annotation.Nullable
  public Boolean getIsPrimaryAccount() {
    return isPrimaryAccount;
  }

  public void setIsPrimaryAccount(Boolean isPrimaryAccount) {
    this.isPrimaryAccount = isPrimaryAccount;
  }


  public UpdateFedexSettingsRequestBody letterheadImage(String letterheadImage) {
    this.letterheadImage = letterheadImage;
    return this;
  }

  /**
   * Get letterheadImage
   * @return letterheadImage
   */
  @javax.annotation.Nullable
  public String getLetterheadImage() {
    return letterheadImage;
  }

  public void setLetterheadImage(String letterheadImage) {
    this.letterheadImage = letterheadImage;
  }


  public UpdateFedexSettingsRequestBody nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * Account nickname
   * @return nickname
   */
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public UpdateFedexSettingsRequestBody pickupType(FedexPickupType pickupType) {
    this.pickupType = pickupType;
    return this;
  }

  /**
   * Get pickupType
   * @return pickupType
   */
  @javax.annotation.Nullable
  public FedexPickupType getPickupType() {
    return pickupType;
  }

  public void setPickupType(FedexPickupType pickupType) {
    this.pickupType = pickupType;
  }


  public UpdateFedexSettingsRequestBody signatureImage(String signatureImage) {
    this.signatureImage = signatureImage;
    return this;
  }

  /**
   * Get signatureImage
   * @return signatureImage
   */
  @javax.annotation.Nullable
  public String getSignatureImage() {
    return signatureImage;
  }

  public void setSignatureImage(String signatureImage) {
    this.signatureImage = signatureImage;
  }


  public UpdateFedexSettingsRequestBody smartPostEndorsement(AncillaryServiceEndorsement smartPostEndorsement) {
    this.smartPostEndorsement = smartPostEndorsement;
    return this;
  }

  /**
   * Get smartPostEndorsement
   * @return smartPostEndorsement
   */
  @javax.annotation.Nullable
  public AncillaryServiceEndorsement getSmartPostEndorsement() {
    return smartPostEndorsement;
  }

  public void setSmartPostEndorsement(AncillaryServiceEndorsement smartPostEndorsement) {
    this.smartPostEndorsement = smartPostEndorsement;
  }


  public UpdateFedexSettingsRequestBody smartPostHub(SmartPostHub smartPostHub) {
    this.smartPostHub = smartPostHub;
    return this;
  }

  /**
   * Get smartPostHub
   * @return smartPostHub
   */
  @javax.annotation.Nullable
  public SmartPostHub getSmartPostHub() {
    return smartPostHub;
  }

  public void setSmartPostHub(SmartPostHub smartPostHub) {
    this.smartPostHub = smartPostHub;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFedexSettingsRequestBody updateFedexSettingsRequestBody = (UpdateFedexSettingsRequestBody) o;
    return Objects.equals(this.isPrimaryAccount, updateFedexSettingsRequestBody.isPrimaryAccount) &&
        Objects.equals(this.letterheadImage, updateFedexSettingsRequestBody.letterheadImage) &&
        Objects.equals(this.nickname, updateFedexSettingsRequestBody.nickname) &&
        Objects.equals(this.pickupType, updateFedexSettingsRequestBody.pickupType) &&
        Objects.equals(this.signatureImage, updateFedexSettingsRequestBody.signatureImage) &&
        Objects.equals(this.smartPostEndorsement, updateFedexSettingsRequestBody.smartPostEndorsement) &&
        Objects.equals(this.smartPostHub, updateFedexSettingsRequestBody.smartPostHub);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isPrimaryAccount, letterheadImage, nickname, pickupType, signatureImage, smartPostEndorsement, smartPostHub);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFedexSettingsRequestBody {\n");
    sb.append("    isPrimaryAccount: ").append(toIndentedString(isPrimaryAccount)).append("\n");
    sb.append("    letterheadImage: ").append(toIndentedString(letterheadImage)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    pickupType: ").append(toIndentedString(pickupType)).append("\n");
    sb.append("    signatureImage: ").append(toIndentedString(signatureImage)).append("\n");
    sb.append("    smartPostEndorsement: ").append(toIndentedString(smartPostEndorsement)).append("\n");
    sb.append("    smartPostHub: ").append(toIndentedString(smartPostHub)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_primary_account");
    openapiFields.add("letterhead_image");
    openapiFields.add("nickname");
    openapiFields.add("pickup_type");
    openapiFields.add("signature_image");
    openapiFields.add("smart_post_endorsement");
    openapiFields.add("smart_post_hub");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFedexSettingsRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFedexSettingsRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFedexSettingsRequestBody is not found in the empty JSON string", UpdateFedexSettingsRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFedexSettingsRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFedexSettingsRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("letterhead_image") != null && !jsonObj.get("letterhead_image").isJsonNull()) && !jsonObj.get("letterhead_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `letterhead_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("letterhead_image").toString()));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      // validate the optional field `pickup_type`
      if (jsonObj.get("pickup_type") != null && !jsonObj.get("pickup_type").isJsonNull()) {
        FedexPickupType.validateJsonElement(jsonObj.get("pickup_type"));
      }
      if ((jsonObj.get("signature_image") != null && !jsonObj.get("signature_image").isJsonNull()) && !jsonObj.get("signature_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature_image").toString()));
      }
      // validate the optional field `smart_post_endorsement`
      if (jsonObj.get("smart_post_endorsement") != null && !jsonObj.get("smart_post_endorsement").isJsonNull()) {
        AncillaryServiceEndorsement.validateJsonElement(jsonObj.get("smart_post_endorsement"));
      }
      // validate the optional field `smart_post_hub`
      if (jsonObj.get("smart_post_hub") != null && !jsonObj.get("smart_post_hub").isJsonNull()) {
        SmartPostHub.validateJsonElement(jsonObj.get("smart_post_hub"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFedexSettingsRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFedexSettingsRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFedexSettingsRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFedexSettingsRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFedexSettingsRequestBody>() {
           @Override
           public void write(JsonWriter out, UpdateFedexSettingsRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFedexSettingsRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFedexSettingsRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFedexSettingsRequestBody
   * @throws IOException if the JSON string is invalid with respect to UpdateFedexSettingsRequestBody
   */
  public static UpdateFedexSettingsRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFedexSettingsRequestBody.class);
  }

  /**
   * Convert an instance of UpdateFedexSettingsRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

