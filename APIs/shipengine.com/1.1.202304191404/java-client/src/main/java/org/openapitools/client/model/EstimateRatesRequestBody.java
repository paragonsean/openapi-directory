/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AddressResidentialIndicator;
import org.openapitools.client.model.DeliveryConfirmation;
import org.openapitools.client.model.Dimensions;
import org.openapitools.client.model.Weight;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EstimateRatesRequestBody extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(EstimateRatesRequestBody.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EstimateRatesRequestBody.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EstimateRatesRequestBody' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RateEstimateByCarrierId> adapterRateEstimateByCarrierId = gson.getDelegateAdapter(this, TypeToken.get(RateEstimateByCarrierId.class));
            final TypeAdapter<RateEstimateByCarrierIds> adapterRateEstimateByCarrierIds = gson.getDelegateAdapter(this, TypeToken.get(RateEstimateByCarrierIds.class));

            return (TypeAdapter<T>) new TypeAdapter<EstimateRatesRequestBody>() {
                @Override
                public void write(JsonWriter out, EstimateRatesRequestBody value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `RateEstimateByCarrierId`
                    if (value.getActualInstance() instanceof RateEstimateByCarrierId) {
                        JsonElement element = adapterRateEstimateByCarrierId.toJsonTree((RateEstimateByCarrierId)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RateEstimateByCarrierIds`
                    if (value.getActualInstance() instanceof RateEstimateByCarrierIds) {
                        JsonElement element = adapterRateEstimateByCarrierIds.toJsonTree((RateEstimateByCarrierIds)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: RateEstimateOptions");
                }

                @Override
                public EstimateRatesRequestBody read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize RateEstimateByCarrierId
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RateEstimateByCarrierId.validateJsonElement(jsonElement);
                        actualAdapter = adapterRateEstimateByCarrierId;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RateEstimateByCarrierId'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RateEstimateByCarrierId failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RateEstimateByCarrierId'", e);
                    }
                    // deserialize RateEstimateByCarrierIds
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RateEstimateByCarrierIds.validateJsonElement(jsonElement);
                        actualAdapter = adapterRateEstimateByCarrierIds;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RateEstimateByCarrierIds'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RateEstimateByCarrierIds failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RateEstimateByCarrierIds'", e);
                    }

                    if (match == 1) {
                        EstimateRatesRequestBody ret = new EstimateRatesRequestBody();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for EstimateRatesRequestBody: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public EstimateRatesRequestBody() {
        super("oneOf", Boolean.FALSE);
    }

    public EstimateRatesRequestBody(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("RateEstimateByCarrierId", RateEstimateByCarrierId.class);
        schemas.put("RateEstimateByCarrierIds", RateEstimateByCarrierIds.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return EstimateRatesRequestBody.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * RateEstimateOptions
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof RateEstimateByCarrierId) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RateEstimateByCarrierIds) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be RateEstimateOptions");
    }

    /**
     * Get the actual instance, which can be the following:
     * RateEstimateOptions
     *
     * @return The actual instance (RateEstimateOptions)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `RateEstimateByCarrierId`. If the actual instance is not `RateEstimateByCarrierId`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RateEstimateByCarrierId`
     * @throws ClassCastException if the instance is not `RateEstimateByCarrierId`
     */
    public RateEstimateByCarrierId getRateEstimateByCarrierId() throws ClassCastException {
        return (RateEstimateByCarrierId)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RateEstimateByCarrierIds`. If the actual instance is not `RateEstimateByCarrierIds`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RateEstimateByCarrierIds`
     * @throws ClassCastException if the instance is not `RateEstimateByCarrierIds`
     */
    public RateEstimateByCarrierIds getRateEstimateByCarrierIds() throws ClassCastException {
        return (RateEstimateByCarrierIds)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EstimateRatesRequestBody
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with RateEstimateByCarrierId
        try {
            RateEstimateByCarrierId.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RateEstimateByCarrierId failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RateEstimateByCarrierIds
        try {
            RateEstimateByCarrierIds.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RateEstimateByCarrierIds failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for EstimateRatesRequestBody with oneOf schemas: RateEstimateOptions. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of EstimateRatesRequestBody given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EstimateRatesRequestBody
     * @throws IOException if the JSON string is invalid with respect to EstimateRatesRequestBody
     */
    public static EstimateRatesRequestBody fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EstimateRatesRequestBody.class);
    }

    /**
     * Convert an instance of EstimateRatesRequestBody to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

