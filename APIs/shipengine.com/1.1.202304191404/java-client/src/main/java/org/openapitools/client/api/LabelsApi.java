/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateLabelFromRateRequestBody;
import org.openapitools.client.model.CreateLabelFromRateResponseBody;
import org.openapitools.client.model.CreateLabelFromShipmentRequestBody;
import org.openapitools.client.model.CreateLabelFromShipmentResponseBody;
import org.openapitools.client.model.CreateLabelRequestBody;
import org.openapitools.client.model.CreateLabelResponseBody;
import org.openapitools.client.model.CreateReturnLabelRequestBody;
import org.openapitools.client.model.CreateReturnLabelResponseBody;
import org.openapitools.client.model.ErrorResponseBody;
import org.openapitools.client.model.GetLabelByExternalShipmentIdResponseBody;
import org.openapitools.client.model.GetLabelByIdResponseBody;
import org.openapitools.client.model.GetTrackingLogFromLabelResponseBody;
import org.openapitools.client.model.LabelDownloadType;
import org.openapitools.client.model.LabelStatus;
import org.openapitools.client.model.ListLabelsResponseBody;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SortDir;
import org.openapitools.client.model.VoidLabelResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LabelsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LabelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LabelsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createLabel
     * @param createLabelRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLabelCall(CreateLabelRequestBody createLabelRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLabelRequestBody;

        // create path and map variables
        String localVarPath = "/v1/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLabelValidateBeforeCall(CreateLabelRequestBody createLabelRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createLabelRequestBody' is set
        if (createLabelRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createLabelRequestBody' when calling createLabel(Async)");
        }

        return createLabelCall(createLabelRequestBody, _callback);

    }

    /**
     * Purchase Label
     * Purchase and print a label for shipment
     * @param createLabelRequestBody  (required)
     * @return CreateLabelResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateLabelResponseBody createLabel(CreateLabelRequestBody createLabelRequestBody) throws ApiException {
        ApiResponse<CreateLabelResponseBody> localVarResp = createLabelWithHttpInfo(createLabelRequestBody);
        return localVarResp.getData();
    }

    /**
     * Purchase Label
     * Purchase and print a label for shipment
     * @param createLabelRequestBody  (required)
     * @return ApiResponse&lt;CreateLabelResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLabelResponseBody> createLabelWithHttpInfo(CreateLabelRequestBody createLabelRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createLabelValidateBeforeCall(createLabelRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateLabelResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Purchase Label (asynchronously)
     * Purchase and print a label for shipment
     * @param createLabelRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLabelAsync(CreateLabelRequestBody createLabelRequestBody, final ApiCallback<CreateLabelResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLabelValidateBeforeCall(createLabelRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateLabelResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLabelFromRate
     * @param rateId Rate ID (required)
     * @param createLabelFromRateRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLabelFromRateCall(String rateId, CreateLabelFromRateRequestBody createLabelFromRateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLabelFromRateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/labels/rates/{rate_id}"
            .replace("{" + "rate_id" + "}", localVarApiClient.escapeString(rateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLabelFromRateValidateBeforeCall(String rateId, CreateLabelFromRateRequestBody createLabelFromRateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rateId' is set
        if (rateId == null) {
            throw new ApiException("Missing the required parameter 'rateId' when calling createLabelFromRate(Async)");
        }

        // verify the required parameter 'createLabelFromRateRequestBody' is set
        if (createLabelFromRateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createLabelFromRateRequestBody' when calling createLabelFromRate(Async)");
        }

        return createLabelFromRateCall(rateId, createLabelFromRateRequestBody, _callback);

    }

    /**
     * Purchase Label with Rate ID
     * When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
     * @param rateId Rate ID (required)
     * @param createLabelFromRateRequestBody  (required)
     * @return CreateLabelFromRateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateLabelFromRateResponseBody createLabelFromRate(String rateId, CreateLabelFromRateRequestBody createLabelFromRateRequestBody) throws ApiException {
        ApiResponse<CreateLabelFromRateResponseBody> localVarResp = createLabelFromRateWithHttpInfo(rateId, createLabelFromRateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Purchase Label with Rate ID
     * When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
     * @param rateId Rate ID (required)
     * @param createLabelFromRateRequestBody  (required)
     * @return ApiResponse&lt;CreateLabelFromRateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLabelFromRateResponseBody> createLabelFromRateWithHttpInfo(String rateId, CreateLabelFromRateRequestBody createLabelFromRateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createLabelFromRateValidateBeforeCall(rateId, createLabelFromRateRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateLabelFromRateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Purchase Label with Rate ID (asynchronously)
     * When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
     * @param rateId Rate ID (required)
     * @param createLabelFromRateRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLabelFromRateAsync(String rateId, CreateLabelFromRateRequestBody createLabelFromRateRequestBody, final ApiCallback<CreateLabelFromRateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLabelFromRateValidateBeforeCall(rateId, createLabelFromRateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateLabelFromRateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLabelFromShipment
     * @param shipmentId Shipment ID (required)
     * @param createLabelFromShipmentRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLabelFromShipmentCall(String shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLabelFromShipmentRequestBody;

        // create path and map variables
        String localVarPath = "/v1/labels/shipment/{shipment_id}"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLabelFromShipmentValidateBeforeCall(String shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling createLabelFromShipment(Async)");
        }

        // verify the required parameter 'createLabelFromShipmentRequestBody' is set
        if (createLabelFromShipmentRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createLabelFromShipmentRequestBody' when calling createLabelFromShipment(Async)");
        }

        return createLabelFromShipmentCall(shipmentId, createLabelFromShipmentRequestBody, _callback);

    }

    /**
     * Purchase Label with Shipment ID
     * Purchase a label using a shipment ID that has already been created with the desired address and package info. 
     * @param shipmentId Shipment ID (required)
     * @param createLabelFromShipmentRequestBody  (required)
     * @return CreateLabelFromShipmentResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateLabelFromShipmentResponseBody createLabelFromShipment(String shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody) throws ApiException {
        ApiResponse<CreateLabelFromShipmentResponseBody> localVarResp = createLabelFromShipmentWithHttpInfo(shipmentId, createLabelFromShipmentRequestBody);
        return localVarResp.getData();
    }

    /**
     * Purchase Label with Shipment ID
     * Purchase a label using a shipment ID that has already been created with the desired address and package info. 
     * @param shipmentId Shipment ID (required)
     * @param createLabelFromShipmentRequestBody  (required)
     * @return ApiResponse&lt;CreateLabelFromShipmentResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLabelFromShipmentResponseBody> createLabelFromShipmentWithHttpInfo(String shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createLabelFromShipmentValidateBeforeCall(shipmentId, createLabelFromShipmentRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateLabelFromShipmentResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Purchase Label with Shipment ID (asynchronously)
     * Purchase a label using a shipment ID that has already been created with the desired address and package info. 
     * @param shipmentId Shipment ID (required)
     * @param createLabelFromShipmentRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLabelFromShipmentAsync(String shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody, final ApiCallback<CreateLabelFromShipmentResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLabelFromShipmentValidateBeforeCall(shipmentId, createLabelFromShipmentRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateLabelFromShipmentResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReturnLabel
     * @param labelId Label ID (required)
     * @param createReturnLabelRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReturnLabelCall(String labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReturnLabelRequestBody;

        // create path and map variables
        String localVarPath = "/v1/labels/{label_id}/return"
            .replace("{" + "label_id" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReturnLabelValidateBeforeCall(String labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling createReturnLabel(Async)");
        }

        // verify the required parameter 'createReturnLabelRequestBody' is set
        if (createReturnLabelRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createReturnLabelRequestBody' when calling createReturnLabel(Async)");
        }

        return createReturnLabelCall(labelId, createReturnLabelRequestBody, _callback);

    }

    /**
     * Create a return label
     * Create a return label
     * @param labelId Label ID (required)
     * @param createReturnLabelRequestBody  (required)
     * @return CreateReturnLabelResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateReturnLabelResponseBody createReturnLabel(String labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody) throws ApiException {
        ApiResponse<CreateReturnLabelResponseBody> localVarResp = createReturnLabelWithHttpInfo(labelId, createReturnLabelRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create a return label
     * Create a return label
     * @param labelId Label ID (required)
     * @param createReturnLabelRequestBody  (required)
     * @return ApiResponse&lt;CreateReturnLabelResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateReturnLabelResponseBody> createReturnLabelWithHttpInfo(String labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createReturnLabelValidateBeforeCall(labelId, createReturnLabelRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateReturnLabelResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a return label (asynchronously)
     * Create a return label
     * @param labelId Label ID (required)
     * @param createReturnLabelRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReturnLabelAsync(String labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody, final ApiCallback<CreateReturnLabelResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReturnLabelValidateBeforeCall(labelId, createReturnLabelRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateReturnLabelResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLabelByExternalShipmentId
     * @param externalShipmentId  (required)
     * @param labelDownloadType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelByExternalShipmentIdCall(String externalShipmentId, LabelDownloadType labelDownloadType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/labels/external_shipment_id/{external_shipment_id}"
            .replace("{" + "external_shipment_id" + "}", localVarApiClient.escapeString(externalShipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labelDownloadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label_download_type", labelDownloadType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLabelByExternalShipmentIdValidateBeforeCall(String externalShipmentId, LabelDownloadType labelDownloadType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalShipmentId' is set
        if (externalShipmentId == null) {
            throw new ApiException("Missing the required parameter 'externalShipmentId' when calling getLabelByExternalShipmentId(Async)");
        }

        return getLabelByExternalShipmentIdCall(externalShipmentId, labelDownloadType, _callback);

    }

    /**
     * Get Label By External Shipment ID
     * Find a label by using the external shipment id that was used during label creation 
     * @param externalShipmentId  (required)
     * @param labelDownloadType  (optional)
     * @return GetLabelByExternalShipmentIdResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public GetLabelByExternalShipmentIdResponseBody getLabelByExternalShipmentId(String externalShipmentId, LabelDownloadType labelDownloadType) throws ApiException {
        ApiResponse<GetLabelByExternalShipmentIdResponseBody> localVarResp = getLabelByExternalShipmentIdWithHttpInfo(externalShipmentId, labelDownloadType);
        return localVarResp.getData();
    }

    /**
     * Get Label By External Shipment ID
     * Find a label by using the external shipment id that was used during label creation 
     * @param externalShipmentId  (required)
     * @param labelDownloadType  (optional)
     * @return ApiResponse&lt;GetLabelByExternalShipmentIdResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLabelByExternalShipmentIdResponseBody> getLabelByExternalShipmentIdWithHttpInfo(String externalShipmentId, LabelDownloadType labelDownloadType) throws ApiException {
        okhttp3.Call localVarCall = getLabelByExternalShipmentIdValidateBeforeCall(externalShipmentId, labelDownloadType, null);
        Type localVarReturnType = new TypeToken<GetLabelByExternalShipmentIdResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Label By External Shipment ID (asynchronously)
     * Find a label by using the external shipment id that was used during label creation 
     * @param externalShipmentId  (required)
     * @param labelDownloadType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelByExternalShipmentIdAsync(String externalShipmentId, LabelDownloadType labelDownloadType, final ApiCallback<GetLabelByExternalShipmentIdResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLabelByExternalShipmentIdValidateBeforeCall(externalShipmentId, labelDownloadType, _callback);
        Type localVarReturnType = new TypeToken<GetLabelByExternalShipmentIdResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLabelById
     * @param labelId Label ID (required)
     * @param labelDownloadType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelByIdCall(String labelId, LabelDownloadType labelDownloadType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/labels/{label_id}"
            .replace("{" + "label_id" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labelDownloadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label_download_type", labelDownloadType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLabelByIdValidateBeforeCall(String labelId, LabelDownloadType labelDownloadType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling getLabelById(Async)");
        }

        return getLabelByIdCall(labelId, labelDownloadType, _callback);

    }

    /**
     * Get Label By ID
     * Retrieve information for individual labels.
     * @param labelId Label ID (required)
     * @param labelDownloadType  (optional)
     * @return GetLabelByIdResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public GetLabelByIdResponseBody getLabelById(String labelId, LabelDownloadType labelDownloadType) throws ApiException {
        ApiResponse<GetLabelByIdResponseBody> localVarResp = getLabelByIdWithHttpInfo(labelId, labelDownloadType);
        return localVarResp.getData();
    }

    /**
     * Get Label By ID
     * Retrieve information for individual labels.
     * @param labelId Label ID (required)
     * @param labelDownloadType  (optional)
     * @return ApiResponse&lt;GetLabelByIdResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLabelByIdResponseBody> getLabelByIdWithHttpInfo(String labelId, LabelDownloadType labelDownloadType) throws ApiException {
        okhttp3.Call localVarCall = getLabelByIdValidateBeforeCall(labelId, labelDownloadType, null);
        Type localVarReturnType = new TypeToken<GetLabelByIdResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Label By ID (asynchronously)
     * Retrieve information for individual labels.
     * @param labelId Label ID (required)
     * @param labelDownloadType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelByIdAsync(String labelId, LabelDownloadType labelDownloadType, final ApiCallback<GetLabelByIdResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLabelByIdValidateBeforeCall(labelId, labelDownloadType, _callback);
        Type localVarReturnType = new TypeToken<GetLabelByIdResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackingLogFromLabel
     * @param labelId Label ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackingLogFromLabelCall(String labelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/labels/{label_id}/track"
            .replace("{" + "label_id" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackingLogFromLabelValidateBeforeCall(String labelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling getTrackingLogFromLabel(Async)");
        }

        return getTrackingLogFromLabelCall(labelId, _callback);

    }

    /**
     * Get Label Tracking Information
     * Retrieve the label&#39;s tracking information
     * @param labelId Label ID (required)
     * @return GetTrackingLogFromLabelResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public GetTrackingLogFromLabelResponseBody getTrackingLogFromLabel(String labelId) throws ApiException {
        ApiResponse<GetTrackingLogFromLabelResponseBody> localVarResp = getTrackingLogFromLabelWithHttpInfo(labelId);
        return localVarResp.getData();
    }

    /**
     * Get Label Tracking Information
     * Retrieve the label&#39;s tracking information
     * @param labelId Label ID (required)
     * @return ApiResponse&lt;GetTrackingLogFromLabelResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTrackingLogFromLabelResponseBody> getTrackingLogFromLabelWithHttpInfo(String labelId) throws ApiException {
        okhttp3.Call localVarCall = getTrackingLogFromLabelValidateBeforeCall(labelId, null);
        Type localVarReturnType = new TypeToken<GetTrackingLogFromLabelResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Label Tracking Information (asynchronously)
     * Retrieve the label&#39;s tracking information
     * @param labelId Label ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackingLogFromLabelAsync(String labelId, final ApiCallback<GetTrackingLogFromLabelResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackingLogFromLabelValidateBeforeCall(labelId, _callback);
        Type localVarReturnType = new TypeToken<GetTrackingLogFromLabelResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLabels
     * @param labelStatus Only return labels that are currently in the specified status (optional)
     * @param serviceCode Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)
     * @param carrierId Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)
     * @param trackingNumber Only return labels with a specific tracking number (optional)
     * @param batchId Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)
     * @param rateId Rate ID (optional)
     * @param shipmentId Shipment ID (optional)
     * @param warehouseId Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)
     * @param createdAtStart Only return labels that were created on or after a specific date/time (optional)
     * @param createdAtEnd Only return labels that were created on or before a specific date/time (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param sortDir Controls the sort order of the query. (optional, default to desc)
     * @param sortBy Controls which field the query is sorted by. (optional, default to created_at)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response includes a &#x60;labels&#x60; array containing a page of results (as determined by the &#x60;page_size&#x60; query parameter).  It also includes other useful information, such as the total number of labels that match the query criteria, the number of pages of results, and the URLs of the first, last, next, and previous pages of results.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLabelsCall(LabelStatus labelStatus, String serviceCode, String carrierId, String trackingNumber, String batchId, String rateId, String shipmentId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, SortDir sortDir, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labelStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label_status", labelStatus));
        }

        if (serviceCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_code", serviceCode));
        }

        if (carrierId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carrier_id", carrierId));
        }

        if (trackingNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tracking_number", trackingNumber));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("batch_id", batchId));
        }

        if (rateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rate_id", rateId));
        }

        if (shipmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipment_id", shipmentId));
        }

        if (warehouseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("warehouse_id", warehouseId));
        }

        if (createdAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_start", createdAtStart));
        }

        if (createdAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_end", createdAtEnd));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLabelsValidateBeforeCall(LabelStatus labelStatus, String serviceCode, String carrierId, String trackingNumber, String batchId, String rateId, String shipmentId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, SortDir sortDir, String sortBy, final ApiCallback _callback) throws ApiException {
        return listLabelsCall(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy, _callback);

    }

    /**
     * List labels
     * This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
     * @param labelStatus Only return labels that are currently in the specified status (optional)
     * @param serviceCode Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)
     * @param carrierId Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)
     * @param trackingNumber Only return labels with a specific tracking number (optional)
     * @param batchId Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)
     * @param rateId Rate ID (optional)
     * @param shipmentId Shipment ID (optional)
     * @param warehouseId Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)
     * @param createdAtStart Only return labels that were created on or after a specific date/time (optional)
     * @param createdAtEnd Only return labels that were created on or before a specific date/time (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param sortDir Controls the sort order of the query. (optional, default to desc)
     * @param sortBy Controls which field the query is sorted by. (optional, default to created_at)
     * @return ListLabelsResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response includes a &#x60;labels&#x60; array containing a page of results (as determined by the &#x60;page_size&#x60; query parameter).  It also includes other useful information, such as the total number of labels that match the query criteria, the number of pages of results, and the URLs of the first, last, next, and previous pages of results.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ListLabelsResponseBody listLabels(LabelStatus labelStatus, String serviceCode, String carrierId, String trackingNumber, String batchId, String rateId, String shipmentId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, SortDir sortDir, String sortBy) throws ApiException {
        ApiResponse<ListLabelsResponseBody> localVarResp = listLabelsWithHttpInfo(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy);
        return localVarResp.getData();
    }

    /**
     * List labels
     * This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
     * @param labelStatus Only return labels that are currently in the specified status (optional)
     * @param serviceCode Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)
     * @param carrierId Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)
     * @param trackingNumber Only return labels with a specific tracking number (optional)
     * @param batchId Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)
     * @param rateId Rate ID (optional)
     * @param shipmentId Shipment ID (optional)
     * @param warehouseId Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)
     * @param createdAtStart Only return labels that were created on or after a specific date/time (optional)
     * @param createdAtEnd Only return labels that were created on or before a specific date/time (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param sortDir Controls the sort order of the query. (optional, default to desc)
     * @param sortBy Controls which field the query is sorted by. (optional, default to created_at)
     * @return ApiResponse&lt;ListLabelsResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response includes a &#x60;labels&#x60; array containing a page of results (as determined by the &#x60;page_size&#x60; query parameter).  It also includes other useful information, such as the total number of labels that match the query criteria, the number of pages of results, and the URLs of the first, last, next, and previous pages of results.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListLabelsResponseBody> listLabelsWithHttpInfo(LabelStatus labelStatus, String serviceCode, String carrierId, String trackingNumber, String batchId, String rateId, String shipmentId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, SortDir sortDir, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = listLabelsValidateBeforeCall(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy, null);
        Type localVarReturnType = new TypeToken<ListLabelsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List labels (asynchronously)
     * This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
     * @param labelStatus Only return labels that are currently in the specified status (optional)
     * @param serviceCode Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)
     * @param carrierId Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)
     * @param trackingNumber Only return labels with a specific tracking number (optional)
     * @param batchId Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)
     * @param rateId Rate ID (optional)
     * @param shipmentId Shipment ID (optional)
     * @param warehouseId Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)
     * @param createdAtStart Only return labels that were created on or after a specific date/time (optional)
     * @param createdAtEnd Only return labels that were created on or before a specific date/time (optional)
     * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
     * @param pageSize The number of results to return per response. (optional, default to 25)
     * @param sortDir Controls the sort order of the query. (optional, default to desc)
     * @param sortBy Controls which field the query is sorted by. (optional, default to created_at)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response includes a &#x60;labels&#x60; array containing a page of results (as determined by the &#x60;page_size&#x60; query parameter).  It also includes other useful information, such as the total number of labels that match the query criteria, the number of pages of results, and the URLs of the first, last, next, and previous pages of results.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLabelsAsync(LabelStatus labelStatus, String serviceCode, String carrierId, String trackingNumber, String batchId, String rateId, String shipmentId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, SortDir sortDir, String sortBy, final ApiCallback<ListLabelsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLabelsValidateBeforeCall(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ListLabelsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for voidLabel
     * @param labelId Label ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call voidLabelCall(String labelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/labels/{label_id}/void"
            .replace("{" + "label_id" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call voidLabelValidateBeforeCall(String labelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling voidLabel(Async)");
        }

        return voidLabelCall(labelId, _callback);

    }

    /**
     * Void a Label By ID
     * Void a label by ID to get a refund.
     * @param labelId Label ID (required)
     * @return VoidLabelResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public VoidLabelResponseBody voidLabel(String labelId) throws ApiException {
        ApiResponse<VoidLabelResponseBody> localVarResp = voidLabelWithHttpInfo(labelId);
        return localVarResp.getData();
    }

    /**
     * Void a Label By ID
     * Void a label by ID to get a refund.
     * @param labelId Label ID (required)
     * @return ApiResponse&lt;VoidLabelResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoidLabelResponseBody> voidLabelWithHttpInfo(String labelId) throws ApiException {
        okhttp3.Call localVarCall = voidLabelValidateBeforeCall(labelId, null);
        Type localVarReturnType = new TypeToken<VoidLabelResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Void a Label By ID (asynchronously)
     * Void a label by ID to get a refund.
     * @param labelId Label ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred on ShipEngine&#39;s side.  &gt; This error will automatically be reported to our engineers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call voidLabelAsync(String labelId, final ApiCallback<VoidLabelResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = voidLabelValidateBeforeCall(labelId, _callback);
        Type localVarReturnType = new TypeToken<VoidLabelResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
