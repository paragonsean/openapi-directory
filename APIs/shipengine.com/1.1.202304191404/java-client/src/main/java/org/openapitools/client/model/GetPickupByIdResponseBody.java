/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.ContactDetails;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PickupWindow;
import org.openapitools.client.model.PickupWindows;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPickupByIdResponseBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPickupByIdResponseBody {
  public static final String SERIALIZED_NAME_CANCELLED_AT = "cancelled_at";
  @SerializedName(SERIALIZED_NAME_CANCELLED_AT)
  private OffsetDateTime cancelledAt;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrier_id";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_CONFIRMATION_NUMBER = "confirmation_number";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_NUMBER)
  private String confirmationNumber;

  public static final String SERIALIZED_NAME_CONTACT_DETAILS = "contact_details";
  @SerializedName(SERIALIZED_NAME_CONTACT_DETAILS)
  private ContactDetails contactDetails;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LABEL_IDS = "label_ids";
  @SerializedName(SERIALIZED_NAME_LABEL_IDS)
  private List<String> labelIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PICKUP_ADDRESS = "pickup_address";
  @SerializedName(SERIALIZED_NAME_PICKUP_ADDRESS)
  private Address pickupAddress;

  public static final String SERIALIZED_NAME_PICKUP_ID = "pickup_id";
  @SerializedName(SERIALIZED_NAME_PICKUP_ID)
  private String pickupId;

  public static final String SERIALIZED_NAME_PICKUP_NOTES = "pickup_notes";
  @SerializedName(SERIALIZED_NAME_PICKUP_NOTES)
  private String pickupNotes;

  public static final String SERIALIZED_NAME_PICKUP_WINDOW = "pickup_window";
  @SerializedName(SERIALIZED_NAME_PICKUP_WINDOW)
  private PickupWindow pickupWindow;

  public static final String SERIALIZED_NAME_PICKUP_WINDOWS = "pickup_windows";
  @SerializedName(SERIALIZED_NAME_PICKUP_WINDOWS)
  private List<PickupWindows> pickupWindows = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouse_id";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
  private String warehouseId;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private UUID requestId;

  public GetPickupByIdResponseBody() {
  }

  public GetPickupByIdResponseBody(
     OffsetDateTime cancelledAt, 
     String carrierId, 
     String confirmationNumber, 
     OffsetDateTime createdAt, 
     Address pickupAddress, 
     String pickupId, 
     List<PickupWindows> pickupWindows, 
     String warehouseId, 
     List<Error> errors
  ) {
    this();
    this.cancelledAt = cancelledAt;
    this.carrierId = carrierId;
    this.confirmationNumber = confirmationNumber;
    this.createdAt = createdAt;
    this.pickupAddress = pickupAddress;
    this.pickupId = pickupId;
    this.pickupWindows = pickupWindows;
    this.warehouseId = warehouseId;
    this.errors = errors;
  }

  /**
   * The date and time that the pickup was cancelled in ShipEngine.
   * @return cancelledAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCancelledAt() {
    return cancelledAt;
  }



  /**
   * The carrier_id associated with the pickup
   * @return carrierId
   */
  @javax.annotation.Nonnull
  public String getCarrierId() {
    return carrierId;
  }



  /**
   * The carrier confirmation number for the scheduled pickup.
   * @return confirmationNumber
   */
  @javax.annotation.Nullable
  public String getConfirmationNumber() {
    return confirmationNumber;
  }



  public GetPickupByIdResponseBody contactDetails(ContactDetails contactDetails) {
    this.contactDetails = contactDetails;
    return this;
  }

  /**
   * Get contactDetails
   * @return contactDetails
   */
  @javax.annotation.Nonnull
  public ContactDetails getContactDetails() {
    return contactDetails;
  }

  public void setContactDetails(ContactDetails contactDetails) {
    this.contactDetails = contactDetails;
  }


  /**
   * The date and time that the pickup was created in ShipEngine.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public GetPickupByIdResponseBody labelIds(List<String> labelIds) {
    this.labelIds = labelIds;
    return this;
  }

  public GetPickupByIdResponseBody addLabelIdsItem(String labelIdsItem) {
    if (this.labelIds == null) {
      this.labelIds = new ArrayList<>();
    }
    this.labelIds.add(labelIdsItem);
    return this;
  }

  /**
   * Label IDs that will be included in the pickup request
   * @return labelIds
   */
  @javax.annotation.Nonnull
  public List<String> getLabelIds() {
    return labelIds;
  }

  public void setLabelIds(List<String> labelIds) {
    this.labelIds = labelIds;
  }


  /**
   * Get pickupAddress
   * @return pickupAddress
   */
  @javax.annotation.Nonnull
  public Address getPickupAddress() {
    return pickupAddress;
  }



  /**
   * Pickup Resource ID
   * @return pickupId
   */
  @javax.annotation.Nonnull
  public String getPickupId() {
    return pickupId;
  }



  public GetPickupByIdResponseBody pickupNotes(String pickupNotes) {
    this.pickupNotes = pickupNotes;
    return this;
  }

  /**
   * Used by some carriers to give special instructions for a package pickup
   * @return pickupNotes
   */
  @javax.annotation.Nullable
  public String getPickupNotes() {
    return pickupNotes;
  }

  public void setPickupNotes(String pickupNotes) {
    this.pickupNotes = pickupNotes;
  }


  public GetPickupByIdResponseBody pickupWindow(PickupWindow pickupWindow) {
    this.pickupWindow = pickupWindow;
    return this;
  }

  /**
   * Get pickupWindow
   * @return pickupWindow
   */
  @javax.annotation.Nonnull
  public PickupWindow getPickupWindow() {
    return pickupWindow;
  }

  public void setPickupWindow(PickupWindow pickupWindow) {
    this.pickupWindow = pickupWindow;
  }


  /**
   * An array of available pickup windows. Carriers can return multiple times that they will pickup packages. 
   * @return pickupWindows
   */
  @javax.annotation.Nullable
  public List<PickupWindows> getPickupWindows() {
    return pickupWindows;
  }



  /**
   * The warehouse_id associated with the pickup
   * @return warehouseId
   */
  @javax.annotation.Nonnull
  public String getWarehouseId() {
    return warehouseId;
  }



  /**
   * The errors associated with the failed API call
   * @return errors
   */
  @javax.annotation.Nonnull
  public List<Error> getErrors() {
    return errors;
  }



  public GetPickupByIdResponseBody requestId(UUID requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * A UUID that uniquely identifies the request id. This can be given to the support team to help debug non-trivial issues that may occur 
   * @return requestId
   */
  @javax.annotation.Nonnull
  public UUID getRequestId() {
    return requestId;
  }

  public void setRequestId(UUID requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPickupByIdResponseBody getPickupByIdResponseBody = (GetPickupByIdResponseBody) o;
    return Objects.equals(this.cancelledAt, getPickupByIdResponseBody.cancelledAt) &&
        Objects.equals(this.carrierId, getPickupByIdResponseBody.carrierId) &&
        Objects.equals(this.confirmationNumber, getPickupByIdResponseBody.confirmationNumber) &&
        Objects.equals(this.contactDetails, getPickupByIdResponseBody.contactDetails) &&
        Objects.equals(this.createdAt, getPickupByIdResponseBody.createdAt) &&
        Objects.equals(this.labelIds, getPickupByIdResponseBody.labelIds) &&
        Objects.equals(this.pickupAddress, getPickupByIdResponseBody.pickupAddress) &&
        Objects.equals(this.pickupId, getPickupByIdResponseBody.pickupId) &&
        Objects.equals(this.pickupNotes, getPickupByIdResponseBody.pickupNotes) &&
        Objects.equals(this.pickupWindow, getPickupByIdResponseBody.pickupWindow) &&
        Objects.equals(this.pickupWindows, getPickupByIdResponseBody.pickupWindows) &&
        Objects.equals(this.warehouseId, getPickupByIdResponseBody.warehouseId) &&
        Objects.equals(this.errors, getPickupByIdResponseBody.errors) &&
        Objects.equals(this.requestId, getPickupByIdResponseBody.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancelledAt, carrierId, confirmationNumber, contactDetails, createdAt, labelIds, pickupAddress, pickupId, pickupNotes, pickupWindow, pickupWindows, warehouseId, errors, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPickupByIdResponseBody {\n");
    sb.append("    cancelledAt: ").append(toIndentedString(cancelledAt)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    confirmationNumber: ").append(toIndentedString(confirmationNumber)).append("\n");
    sb.append("    contactDetails: ").append(toIndentedString(contactDetails)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    labelIds: ").append(toIndentedString(labelIds)).append("\n");
    sb.append("    pickupAddress: ").append(toIndentedString(pickupAddress)).append("\n");
    sb.append("    pickupId: ").append(toIndentedString(pickupId)).append("\n");
    sb.append("    pickupNotes: ").append(toIndentedString(pickupNotes)).append("\n");
    sb.append("    pickupWindow: ").append(toIndentedString(pickupWindow)).append("\n");
    sb.append("    pickupWindows: ").append(toIndentedString(pickupWindows)).append("\n");
    sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancelled_at");
    openapiFields.add("carrier_id");
    openapiFields.add("confirmation_number");
    openapiFields.add("contact_details");
    openapiFields.add("created_at");
    openapiFields.add("label_ids");
    openapiFields.add("pickup_address");
    openapiFields.add("pickup_id");
    openapiFields.add("pickup_notes");
    openapiFields.add("pickup_window");
    openapiFields.add("pickup_windows");
    openapiFields.add("warehouse_id");
    openapiFields.add("errors");
    openapiFields.add("request_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("carrier_id");
    openapiRequiredFields.add("confirmation_number");
    openapiRequiredFields.add("contact_details");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("label_ids");
    openapiRequiredFields.add("pickup_address");
    openapiRequiredFields.add("pickup_id");
    openapiRequiredFields.add("pickup_window");
    openapiRequiredFields.add("warehouse_id");
    openapiRequiredFields.add("errors");
    openapiRequiredFields.add("request_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPickupByIdResponseBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPickupByIdResponseBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPickupByIdResponseBody is not found in the empty JSON string", GetPickupByIdResponseBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPickupByIdResponseBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPickupByIdResponseBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetPickupByIdResponseBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("carrier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_id").toString()));
      }
      if ((jsonObj.get("confirmation_number") != null && !jsonObj.get("confirmation_number").isJsonNull()) && !jsonObj.get("confirmation_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmation_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmation_number").toString()));
      }
      // validate the required field `contact_details`
      ContactDetails.validateJsonElement(jsonObj.get("contact_details"));
      // ensure the required json array is present
      if (jsonObj.get("label_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("label_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_ids` to be an array in the JSON string but got `%s`", jsonObj.get("label_ids").toString()));
      }
      // validate the required field `pickup_address`
      Address.validateJsonElement(jsonObj.get("pickup_address"));
      if (!jsonObj.get("pickup_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickup_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickup_id").toString()));
      }
      if ((jsonObj.get("pickup_notes") != null && !jsonObj.get("pickup_notes").isJsonNull()) && !jsonObj.get("pickup_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickup_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickup_notes").toString()));
      }
      // validate the required field `pickup_window`
      PickupWindow.validateJsonElement(jsonObj.get("pickup_window"));
      if (jsonObj.get("pickup_windows") != null && !jsonObj.get("pickup_windows").isJsonNull()) {
        JsonArray jsonArraypickupWindows = jsonObj.getAsJsonArray("pickup_windows");
        if (jsonArraypickupWindows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pickup_windows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pickup_windows` to be an array in the JSON string but got `%s`", jsonObj.get("pickup_windows").toString()));
          }

          // validate the optional field `pickup_windows` (array)
          for (int i = 0; i < jsonArraypickupWindows.size(); i++) {
            PickupWindows.validateJsonElement(jsonArraypickupWindows.get(i));
          };
        }
      }
      if (!jsonObj.get("warehouse_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouse_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouse_id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }

      JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
      // validate the required field `errors` (array)
      for (int i = 0; i < jsonArrayerrors.size(); i++) {
        Error.validateJsonElement(jsonArrayerrors.get(i));
      };
      if (!jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPickupByIdResponseBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPickupByIdResponseBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPickupByIdResponseBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPickupByIdResponseBody.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPickupByIdResponseBody>() {
           @Override
           public void write(JsonWriter out, GetPickupByIdResponseBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPickupByIdResponseBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPickupByIdResponseBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPickupByIdResponseBody
   * @throws IOException if the JSON string is invalid with respect to GetPickupByIdResponseBody
   */
  public static GetPickupByIdResponseBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPickupByIdResponseBody.class);
  }

  /**
   * Convert an instance of GetPickupByIdResponseBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

