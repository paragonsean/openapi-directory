/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Manifest;
import org.openapitools.client.model.ManifestDownload;
import org.openapitools.client.model.ManifestRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A create manifest response body
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateManifestResponseBody {
  public static final String SERIALIZED_NAME_MANIFESTS = "manifests";
  @SerializedName(SERIALIZED_NAME_MANIFESTS)
  private List<Manifest> manifests = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANIFEST_REQUESTS = "manifest_requests";
  @SerializedName(SERIALIZED_NAME_MANIFEST_REQUESTS)
  private List<ManifestRequest> manifestRequests = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrier_id";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_FORM_ID = "form_id";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  private String formId;

  public static final String SERIALIZED_NAME_LABEL_IDS = "label_ids";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LABEL_IDS)
  private List<String> labelIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANIFEST_DOWNLOAD = "manifest_download";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_MANIFEST_DOWNLOAD)
  private ManifestDownload manifestDownload;

  public static final String SERIALIZED_NAME_MANIFEST_ID = "manifest_id";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_MANIFEST_ID)
  private String manifestId;

  public static final String SERIALIZED_NAME_SHIP_DATE = "ship_date";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public static final String SERIALIZED_NAME_SHIPMENTS = "shipments";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SHIPMENTS)
  private Integer shipments;

  public static final String SERIALIZED_NAME_SUBMISSION_ID = "submission_id";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SUBMISSION_ID)
  private String submissionId;

  public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouse_id";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
  private String warehouseId;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private UUID requestId;

  public CreateManifestResponseBody() {
  }

  public CreateManifestResponseBody(
     List<String> labelIds, 
     Integer shipments, 
     List<Error> errors
  ) {
    this();
    this.labelIds = labelIds;
    this.shipments = shipments;
    this.errors = errors;
  }

  public CreateManifestResponseBody manifests(List<Manifest> manifests) {
    this.manifests = manifests;
    return this;
  }

  public CreateManifestResponseBody addManifestsItem(Manifest manifestsItem) {
    if (this.manifests == null) {
      this.manifests = new ArrayList<>();
    }
    this.manifests.add(manifestsItem);
    return this;
  }

  /**
   * Resulting Manifests
   * @return manifests
   */
  @javax.annotation.Nullable
  public List<Manifest> getManifests() {
    return manifests;
  }

  public void setManifests(List<Manifest> manifests) {
    this.manifests = manifests;
  }


  public CreateManifestResponseBody manifestRequests(List<ManifestRequest> manifestRequests) {
    this.manifestRequests = manifestRequests;
    return this;
  }

  public CreateManifestResponseBody addManifestRequestsItem(ManifestRequest manifestRequestsItem) {
    if (this.manifestRequests == null) {
      this.manifestRequests = new ArrayList<>();
    }
    this.manifestRequests.add(manifestRequestsItem);
    return this;
  }

  /**
   * Resulting manifest requests with statuses
   * @return manifestRequests
   */
  @javax.annotation.Nullable
  public List<ManifestRequest> getManifestRequests() {
    return manifestRequests;
  }

  public void setManifestRequests(List<ManifestRequest> manifestRequests) {
    this.manifestRequests = manifestRequests;
  }


  @Deprecated
  public CreateManifestResponseBody carrierId(String carrierId) {
    this.carrierId = carrierId;
    return this;
  }

  /**
   * A string that uniquely identifies the carrier
   * @return carrierId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public String getCarrierId() {
    return carrierId;
  }

  @Deprecated
  public void setCarrierId(String carrierId) {
    this.carrierId = carrierId;
  }


  @Deprecated
  public CreateManifestResponseBody createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date-time that the manifest was created
   * @return createdAt
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  @Deprecated
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  @Deprecated
  public CreateManifestResponseBody formId(String formId) {
    this.formId = formId;
    return this;
  }

  /**
   * A string that uniquely identifies the form
   * @return formId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public String getFormId() {
    return formId;
  }

  @Deprecated
  public void setFormId(String formId) {
    this.formId = formId;
  }


  /**
   * An array of the label ids used in this manifest.
   * @return labelIds
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getLabelIds() {
    return labelIds;
  }



  @Deprecated
  public CreateManifestResponseBody manifestDownload(ManifestDownload manifestDownload) {
    this.manifestDownload = manifestDownload;
    return this;
  }

  /**
   * Get manifestDownload
   * @return manifestDownload
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public ManifestDownload getManifestDownload() {
    return manifestDownload;
  }

  @Deprecated
  public void setManifestDownload(ManifestDownload manifestDownload) {
    this.manifestDownload = manifestDownload;
  }


  @Deprecated
  public CreateManifestResponseBody manifestId(String manifestId) {
    this.manifestId = manifestId;
    return this;
  }

  /**
   * A string that uniquely identifies the manifest
   * @return manifestId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public String getManifestId() {
    return manifestId;
  }

  @Deprecated
  public void setManifestId(String manifestId) {
    this.manifestId = manifestId;
  }


  @Deprecated
  public CreateManifestResponseBody shipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
    return this;
  }

  /**
   * The date-time that the manifests shipments will be picked up
   * @return shipDate
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public OffsetDateTime getShipDate() {
    return shipDate;
  }

  @Deprecated
  public void setShipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
  }


  /**
   * The number of shipments that are included in this manifest
   * minimum: 1
   * @return shipments
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public Integer getShipments() {
    return shipments;
  }



  @Deprecated
  public CreateManifestResponseBody submissionId(String submissionId) {
    this.submissionId = submissionId;
    return this;
  }

  /**
   * A string that uniquely identifies the submission
   * @return submissionId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public String getSubmissionId() {
    return submissionId;
  }

  @Deprecated
  public void setSubmissionId(String submissionId) {
    this.submissionId = submissionId;
  }


  @Deprecated
  public CreateManifestResponseBody warehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
    return this;
  }

  /**
   * A string that uniquely identifies the warehouse
   * @return warehouseId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public String getWarehouseId() {
    return warehouseId;
  }

  @Deprecated
  public void setWarehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
  }


  /**
   * The errors associated with the failed API call
   * @return errors
   */
  @javax.annotation.Nonnull
  public List<Error> getErrors() {
    return errors;
  }



  public CreateManifestResponseBody requestId(UUID requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * A UUID that uniquely identifies the request id. This can be given to the support team to help debug non-trivial issues that may occur 
   * @return requestId
   */
  @javax.annotation.Nonnull
  public UUID getRequestId() {
    return requestId;
  }

  public void setRequestId(UUID requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateManifestResponseBody createManifestResponseBody = (CreateManifestResponseBody) o;
    return Objects.equals(this.manifests, createManifestResponseBody.manifests) &&
        Objects.equals(this.manifestRequests, createManifestResponseBody.manifestRequests) &&
        Objects.equals(this.carrierId, createManifestResponseBody.carrierId) &&
        Objects.equals(this.createdAt, createManifestResponseBody.createdAt) &&
        Objects.equals(this.formId, createManifestResponseBody.formId) &&
        Objects.equals(this.labelIds, createManifestResponseBody.labelIds) &&
        Objects.equals(this.manifestDownload, createManifestResponseBody.manifestDownload) &&
        Objects.equals(this.manifestId, createManifestResponseBody.manifestId) &&
        Objects.equals(this.shipDate, createManifestResponseBody.shipDate) &&
        Objects.equals(this.shipments, createManifestResponseBody.shipments) &&
        Objects.equals(this.submissionId, createManifestResponseBody.submissionId) &&
        Objects.equals(this.warehouseId, createManifestResponseBody.warehouseId) &&
        Objects.equals(this.errors, createManifestResponseBody.errors) &&
        Objects.equals(this.requestId, createManifestResponseBody.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(manifests, manifestRequests, carrierId, createdAt, formId, labelIds, manifestDownload, manifestId, shipDate, shipments, submissionId, warehouseId, errors, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateManifestResponseBody {\n");
    sb.append("    manifests: ").append(toIndentedString(manifests)).append("\n");
    sb.append("    manifestRequests: ").append(toIndentedString(manifestRequests)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    labelIds: ").append(toIndentedString(labelIds)).append("\n");
    sb.append("    manifestDownload: ").append(toIndentedString(manifestDownload)).append("\n");
    sb.append("    manifestId: ").append(toIndentedString(manifestId)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    shipments: ").append(toIndentedString(shipments)).append("\n");
    sb.append("    submissionId: ").append(toIndentedString(submissionId)).append("\n");
    sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("manifests");
    openapiFields.add("manifest_requests");
    openapiFields.add("carrier_id");
    openapiFields.add("created_at");
    openapiFields.add("form_id");
    openapiFields.add("label_ids");
    openapiFields.add("manifest_download");
    openapiFields.add("manifest_id");
    openapiFields.add("ship_date");
    openapiFields.add("shipments");
    openapiFields.add("submission_id");
    openapiFields.add("warehouse_id");
    openapiFields.add("errors");
    openapiFields.add("request_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("carrier_id");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("form_id");
    openapiRequiredFields.add("manifest_download");
    openapiRequiredFields.add("manifest_id");
    openapiRequiredFields.add("ship_date");
    openapiRequiredFields.add("shipments");
    openapiRequiredFields.add("submission_id");
    openapiRequiredFields.add("warehouse_id");
    openapiRequiredFields.add("errors");
    openapiRequiredFields.add("request_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateManifestResponseBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateManifestResponseBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateManifestResponseBody is not found in the empty JSON string", CreateManifestResponseBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateManifestResponseBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateManifestResponseBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateManifestResponseBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("manifests") != null && !jsonObj.get("manifests").isJsonNull()) {
        JsonArray jsonArraymanifests = jsonObj.getAsJsonArray("manifests");
        if (jsonArraymanifests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("manifests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manifests` to be an array in the JSON string but got `%s`", jsonObj.get("manifests").toString()));
          }

          // validate the optional field `manifests` (array)
          for (int i = 0; i < jsonArraymanifests.size(); i++) {
            Manifest.validateJsonElement(jsonArraymanifests.get(i));
          };
        }
      }
      if (jsonObj.get("manifest_requests") != null && !jsonObj.get("manifest_requests").isJsonNull()) {
        JsonArray jsonArraymanifestRequests = jsonObj.getAsJsonArray("manifest_requests");
        if (jsonArraymanifestRequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("manifest_requests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manifest_requests` to be an array in the JSON string but got `%s`", jsonObj.get("manifest_requests").toString()));
          }

          // validate the optional field `manifest_requests` (array)
          for (int i = 0; i < jsonArraymanifestRequests.size(); i++) {
            ManifestRequest.validateJsonElement(jsonArraymanifestRequests.get(i));
          };
        }
      }
      if (!jsonObj.get("carrier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_id").toString()));
      }
      if (!jsonObj.get("form_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("label_ids") != null && !jsonObj.get("label_ids").isJsonNull() && !jsonObj.get("label_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_ids` to be an array in the JSON string but got `%s`", jsonObj.get("label_ids").toString()));
      }
      // validate the required field `manifest_download`
      ManifestDownload.validateJsonElement(jsonObj.get("manifest_download"));
      if (!jsonObj.get("manifest_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifest_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifest_id").toString()));
      }
      if (!jsonObj.get("submission_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submission_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submission_id").toString()));
      }
      if (!jsonObj.get("warehouse_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouse_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouse_id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }

      JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
      // validate the required field `errors` (array)
      for (int i = 0; i < jsonArrayerrors.size(); i++) {
        Error.validateJsonElement(jsonArrayerrors.get(i));
      };
      if (!jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateManifestResponseBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateManifestResponseBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateManifestResponseBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateManifestResponseBody.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateManifestResponseBody>() {
           @Override
           public void write(JsonWriter out, CreateManifestResponseBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateManifestResponseBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateManifestResponseBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateManifestResponseBody
   * @throws IOException if the JSON string is invalid with respect to CreateManifestResponseBody
   */
  public static CreateManifestResponseBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateManifestResponseBody.class);
  }

  /**
   * Convert an instance of CreateManifestResponseBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

