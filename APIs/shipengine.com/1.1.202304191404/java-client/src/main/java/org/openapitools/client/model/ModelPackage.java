/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimensions;
import org.openapitools.client.model.LabelDownload;
import org.openapitools.client.model.LabelMessages;
import org.openapitools.client.model.MonetaryValue;
import org.openapitools.client.model.OptionalLink;
import org.openapitools.client.model.Weight;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A package associated with a [shipping label](https://www.shipengine.com/docs/labels/create-a-label/) 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelPackage {
  public static final String SERIALIZED_NAME_CONTENT_DESCRIPTION = "content_description";
  @SerializedName(SERIALIZED_NAME_CONTENT_DESCRIPTION)
  private String contentDescription;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_EXTERNAL_PACKAGE_ID = "external_package_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PACKAGE_ID)
  private String externalPackageId;

  public static final String SERIALIZED_NAME_FORM_DOWNLOAD = "form_download";
  @SerializedName(SERIALIZED_NAME_FORM_DOWNLOAD)
  private OptionalLink formDownload;

  public static final String SERIALIZED_NAME_INSURED_VALUE = "insured_value";
  @SerializedName(SERIALIZED_NAME_INSURED_VALUE)
  private MonetaryValue insuredValue = [{"amount":0,"currency":"usd"}];

  public static final String SERIALIZED_NAME_LABEL_DOWNLOAD = "label_download";
  @SerializedName(SERIALIZED_NAME_LABEL_DOWNLOAD)
  private LabelDownload labelDownload;

  public static final String SERIALIZED_NAME_LABEL_MESSAGES = "label_messages";
  @SerializedName(SERIALIZED_NAME_LABEL_MESSAGES)
  private LabelMessages labelMessages;

  public static final String SERIALIZED_NAME_PACKAGE_CODE = "package_code";
  @SerializedName(SERIALIZED_NAME_PACKAGE_CODE)
  private String packageCode;

  public static final String SERIALIZED_NAME_PACKAGE_ID = "package_id";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ID)
  private String packageId;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "tracking_number";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Weight weight;

  public ModelPackage() {
  }

  public ModelPackage(
     OptionalLink formDownload, 
     LabelDownload labelDownload, 
     Integer sequence, 
     String trackingNumber
  ) {
    this();
    this.formDownload = formDownload;
    this.labelDownload = labelDownload;
    this.sequence = sequence;
    this.trackingNumber = trackingNumber;
  }

  public ModelPackage contentDescription(String contentDescription) {
    this.contentDescription = contentDescription;
    return this;
  }

  /**
   * A short description of the package content. Required for shipments moving to, from, and through Mexico. 
   * @return contentDescription
   */
  @javax.annotation.Nullable
  public String getContentDescription() {
    return contentDescription;
  }

  public void setContentDescription(String contentDescription) {
    this.contentDescription = contentDescription;
  }


  public ModelPackage dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * The package dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  public ModelPackage externalPackageId(String externalPackageId) {
    this.externalPackageId = externalPackageId;
    return this;
  }

  /**
   * An external package id.
   * @return externalPackageId
   */
  @javax.annotation.Nullable
  public String getExternalPackageId() {
    return externalPackageId;
  }

  public void setExternalPackageId(String externalPackageId) {
    this.externalPackageId = externalPackageId;
  }


  /**
   * The form download for any customs that are needed
   * @return formDownload
   */
  @javax.annotation.Nullable
  public OptionalLink getFormDownload() {
    return formDownload;
  }



  public ModelPackage insuredValue(MonetaryValue insuredValue) {
    this.insuredValue = insuredValue;
    return this;
  }

  /**
   * The insured value of the package.  Requires the &#x60;insurance_provider&#x60; field of the shipment to be set. 
   * @return insuredValue
   */
  @javax.annotation.Nullable
  public MonetaryValue getInsuredValue() {
    return insuredValue;
  }

  public void setInsuredValue(MonetaryValue insuredValue) {
    this.insuredValue = insuredValue;
  }


  /**
   * The label download for the package
   * @return labelDownload
   */
  @javax.annotation.Nullable
  public LabelDownload getLabelDownload() {
    return labelDownload;
  }



  public ModelPackage labelMessages(LabelMessages labelMessages) {
    this.labelMessages = labelMessages;
    return this;
  }

  /**
   * Get labelMessages
   * @return labelMessages
   */
  @javax.annotation.Nullable
  public LabelMessages getLabelMessages() {
    return labelMessages;
  }

  public void setLabelMessages(LabelMessages labelMessages) {
    this.labelMessages = labelMessages;
  }


  public ModelPackage packageCode(String packageCode) {
    this.packageCode = packageCode;
    return this;
  }

  /**
   * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as &#x60;thick_envelope&#x60;, &#x60;small_flat_rate_box&#x60;, &#x60;large_package&#x60;, etc.  The code &#x60;package&#x60; indicates a custom or unknown package type. 
   * @return packageCode
   */
  @javax.annotation.Nullable
  public String getPackageCode() {
    return packageCode;
  }

  public void setPackageCode(String packageCode) {
    this.packageCode = packageCode;
  }


  public ModelPackage packageId(String packageId) {
    this.packageId = packageId;
    return this;
  }

  /**
   * A string that uniquely identifies this [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/)
   * @return packageId
   */
  @javax.annotation.Nullable
  public String getPackageId() {
    return packageId;
  }

  public void setPackageId(String packageId) {
    this.packageId = packageId;
  }


  /**
   * Package sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }



  /**
   * The tracking number for the package.  The format depends on the carrier. 
   * @return trackingNumber
   */
  @javax.annotation.Nullable
  public String getTrackingNumber() {
    return trackingNumber;
  }



  public ModelPackage weight(Weight weight) {
    this.weight = weight;
    return this;
  }

  /**
   * The package weight
   * @return weight
   */
  @javax.annotation.Nonnull
  public Weight getWeight() {
    return weight;
  }

  public void setWeight(Weight weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelPackage _package = (ModelPackage) o;
    return Objects.equals(this.contentDescription, _package.contentDescription) &&
        Objects.equals(this.dimensions, _package.dimensions) &&
        Objects.equals(this.externalPackageId, _package.externalPackageId) &&
        Objects.equals(this.formDownload, _package.formDownload) &&
        Objects.equals(this.insuredValue, _package.insuredValue) &&
        Objects.equals(this.labelDownload, _package.labelDownload) &&
        Objects.equals(this.labelMessages, _package.labelMessages) &&
        Objects.equals(this.packageCode, _package.packageCode) &&
        Objects.equals(this.packageId, _package.packageId) &&
        Objects.equals(this.sequence, _package.sequence) &&
        Objects.equals(this.trackingNumber, _package.trackingNumber) &&
        Objects.equals(this.weight, _package.weight);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentDescription, dimensions, externalPackageId, formDownload, insuredValue, labelDownload, labelMessages, packageCode, packageId, sequence, trackingNumber, weight);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelPackage {\n");
    sb.append("    contentDescription: ").append(toIndentedString(contentDescription)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    externalPackageId: ").append(toIndentedString(externalPackageId)).append("\n");
    sb.append("    formDownload: ").append(toIndentedString(formDownload)).append("\n");
    sb.append("    insuredValue: ").append(toIndentedString(insuredValue)).append("\n");
    sb.append("    labelDownload: ").append(toIndentedString(labelDownload)).append("\n");
    sb.append("    labelMessages: ").append(toIndentedString(labelMessages)).append("\n");
    sb.append("    packageCode: ").append(toIndentedString(packageCode)).append("\n");
    sb.append("    packageId: ").append(toIndentedString(packageId)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content_description");
    openapiFields.add("dimensions");
    openapiFields.add("external_package_id");
    openapiFields.add("form_download");
    openapiFields.add("insured_value");
    openapiFields.add("label_download");
    openapiFields.add("label_messages");
    openapiFields.add("package_code");
    openapiFields.add("package_id");
    openapiFields.add("sequence");
    openapiFields.add("tracking_number");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("weight");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelPackage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelPackage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelPackage is not found in the empty JSON string", ModelPackage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelPackage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelPackage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelPackage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content_description") != null && !jsonObj.get("content_description").isJsonNull()) && !jsonObj.get("content_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_description").toString()));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Dimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      if ((jsonObj.get("external_package_id") != null && !jsonObj.get("external_package_id").isJsonNull()) && !jsonObj.get("external_package_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_package_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_package_id").toString()));
      }
      // validate the optional field `form_download`
      if (jsonObj.get("form_download") != null && !jsonObj.get("form_download").isJsonNull()) {
        OptionalLink.validateJsonElement(jsonObj.get("form_download"));
      }
      // validate the optional field `insured_value`
      if (jsonObj.get("insured_value") != null && !jsonObj.get("insured_value").isJsonNull()) {
        MonetaryValue.validateJsonElement(jsonObj.get("insured_value"));
      }
      // validate the optional field `label_download`
      if (jsonObj.get("label_download") != null && !jsonObj.get("label_download").isJsonNull()) {
        LabelDownload.validateJsonElement(jsonObj.get("label_download"));
      }
      // validate the optional field `label_messages`
      if (jsonObj.get("label_messages") != null && !jsonObj.get("label_messages").isJsonNull()) {
        LabelMessages.validateJsonElement(jsonObj.get("label_messages"));
      }
      if ((jsonObj.get("package_code") != null && !jsonObj.get("package_code").isJsonNull()) && !jsonObj.get("package_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_code").toString()));
      }
      if ((jsonObj.get("package_id") != null && !jsonObj.get("package_id").isJsonNull()) && !jsonObj.get("package_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_id").toString()));
      }
      if ((jsonObj.get("tracking_number") != null && !jsonObj.get("tracking_number").isJsonNull()) && !jsonObj.get("tracking_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_number").toString()));
      }
      // validate the required field `weight`
      Weight.validateJsonElement(jsonObj.get("weight"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelPackage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelPackage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelPackage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelPackage.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelPackage>() {
           @Override
           public void write(JsonWriter out, ModelPackage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelPackage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelPackage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelPackage
   * @throws IOException if the JSON string is invalid with respect to ModelPackage
   */
  public static ModelPackage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelPackage.class);
  }

  /**
   * Convert an instance of ModelPackage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

