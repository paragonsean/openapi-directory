/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CarrierAdvancedOption;
import org.openapitools.client.model.PackageType;
import org.openapitools.client.model.Service;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A get carrier by id response body
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCarrierByIdResponseBody {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Double balance;

  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrier_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private String carrierCode;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrier_id";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HAS_MULTI_PACKAGE_SUPPORTING_SERVICES = "has_multi_package_supporting_services";
  @SerializedName(SERIALIZED_NAME_HAS_MULTI_PACKAGE_SUPPORTING_SERVICES)
  private Boolean hasMultiPackageSupportingServices;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<CarrierAdvancedOption> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<PackageType> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_REQUIRES_FUNDED_AMOUNT = "requires_funded_amount";
  @SerializedName(SERIALIZED_NAME_REQUIRES_FUNDED_AMOUNT)
  private Boolean requiresFundedAmount;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<Service> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTS_LABEL_MESSAGES = "supports_label_messages";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_LABEL_MESSAGES)
  private Boolean supportsLabelMessages;

  public GetCarrierByIdResponseBody() {
  }

  public GetCarrierByIdResponseBody(
     String accountNumber, 
     Double balance, 
     String carrierId, 
     String friendlyName, 
     Boolean hasMultiPackageSupportingServices, 
     String nickname, 
     List<CarrierAdvancedOption> options, 
     List<PackageType> packages, 
     Boolean primary, 
     Boolean requiresFundedAmount, 
     List<Service> services, 
     Boolean supportsLabelMessages
  ) {
    this();
    this.accountNumber = accountNumber;
    this.balance = balance;
    this.carrierId = carrierId;
    this.friendlyName = friendlyName;
    this.hasMultiPackageSupportingServices = hasMultiPackageSupportingServices;
    this.nickname = nickname;
    this.options = options;
    this.packages = packages;
    this.primary = primary;
    this.requiresFundedAmount = requiresFundedAmount;
    this.services = services;
    this.supportsLabelMessages = supportsLabelMessages;
  }

  /**
   * The account number that the carrier is connected to.
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }



  /**
   * Current available balance
   * minimum: 0
   * @return balance
   */
  @javax.annotation.Nullable
  public Double getBalance() {
    return balance;
  }



  public GetCarrierByIdResponseBody carrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
    return this;
  }

  /**
   * A string that uniquely identifies the carrier.
   * @return carrierCode
   */
  @javax.annotation.Nullable
  public String getCarrierCode() {
    return carrierCode;
  }

  public void setCarrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
  }


  /**
   * A string that uniquely identifies the carrier.
   * @return carrierId
   */
  @javax.annotation.Nullable
  public String getCarrierId() {
    return carrierId;
  }



  /**
   * Screen readable name
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }



  /**
   * Carrier supports multiple packages per shipment
   * @return hasMultiPackageSupportingServices
   */
  @javax.annotation.Nullable
  public Boolean getHasMultiPackageSupportingServices() {
    return hasMultiPackageSupportingServices;
  }



  /**
   * Nickname given to the account when initially setting up the carrier.
   * @return nickname
   */
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }



  /**
   * A list of options that are available to that carrier
   * @return options
   */
  @javax.annotation.Nullable
  public List<CarrierAdvancedOption> getOptions() {
    return options;
  }



  /**
   * A list of package types that are supported by the carrier
   * @return packages
   */
  @javax.annotation.Nullable
  public List<PackageType> getPackages() {
    return packages;
  }



  /**
   * Is this the primary carrier that is used by default when no carrier is specified in label/shipment creation
   * @return primary
   */
  @javax.annotation.Nullable
  public Boolean getPrimary() {
    return primary;
  }



  /**
   * Indicates whether the carrier requires funding to use its services
   * @return requiresFundedAmount
   */
  @javax.annotation.Nullable
  public Boolean getRequiresFundedAmount() {
    return requiresFundedAmount;
  }



  /**
   * A list of services that are offered by the carrier
   * @return services
   */
  @javax.annotation.Nullable
  public List<Service> getServices() {
    return services;
  }



  /**
   * The carrier supports adding custom label messages to an order.
   * @return supportsLabelMessages
   */
  @javax.annotation.Nullable
  public Boolean getSupportsLabelMessages() {
    return supportsLabelMessages;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCarrierByIdResponseBody getCarrierByIdResponseBody = (GetCarrierByIdResponseBody) o;
    return Objects.equals(this.accountNumber, getCarrierByIdResponseBody.accountNumber) &&
        Objects.equals(this.balance, getCarrierByIdResponseBody.balance) &&
        Objects.equals(this.carrierCode, getCarrierByIdResponseBody.carrierCode) &&
        Objects.equals(this.carrierId, getCarrierByIdResponseBody.carrierId) &&
        Objects.equals(this.friendlyName, getCarrierByIdResponseBody.friendlyName) &&
        Objects.equals(this.hasMultiPackageSupportingServices, getCarrierByIdResponseBody.hasMultiPackageSupportingServices) &&
        Objects.equals(this.nickname, getCarrierByIdResponseBody.nickname) &&
        Objects.equals(this.options, getCarrierByIdResponseBody.options) &&
        Objects.equals(this.packages, getCarrierByIdResponseBody.packages) &&
        Objects.equals(this.primary, getCarrierByIdResponseBody.primary) &&
        Objects.equals(this.requiresFundedAmount, getCarrierByIdResponseBody.requiresFundedAmount) &&
        Objects.equals(this.services, getCarrierByIdResponseBody.services) &&
        Objects.equals(this.supportsLabelMessages, getCarrierByIdResponseBody.supportsLabelMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, balance, carrierCode, carrierId, friendlyName, hasMultiPackageSupportingServices, nickname, options, packages, primary, requiresFundedAmount, services, supportsLabelMessages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCarrierByIdResponseBody {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    hasMultiPackageSupportingServices: ").append(toIndentedString(hasMultiPackageSupportingServices)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    requiresFundedAmount: ").append(toIndentedString(requiresFundedAmount)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    supportsLabelMessages: ").append(toIndentedString(supportsLabelMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number");
    openapiFields.add("balance");
    openapiFields.add("carrier_code");
    openapiFields.add("carrier_id");
    openapiFields.add("friendly_name");
    openapiFields.add("has_multi_package_supporting_services");
    openapiFields.add("nickname");
    openapiFields.add("options");
    openapiFields.add("packages");
    openapiFields.add("primary");
    openapiFields.add("requires_funded_amount");
    openapiFields.add("services");
    openapiFields.add("supports_label_messages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCarrierByIdResponseBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCarrierByIdResponseBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCarrierByIdResponseBody is not found in the empty JSON string", GetCarrierByIdResponseBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCarrierByIdResponseBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCarrierByIdResponseBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_number") != null && !jsonObj.get("account_number").isJsonNull()) && !jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if ((jsonObj.get("carrier_code") != null && !jsonObj.get("carrier_code").isJsonNull()) && !jsonObj.get("carrier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_code").toString()));
      }
      if ((jsonObj.get("carrier_id") != null && !jsonObj.get("carrier_id").isJsonNull()) && !jsonObj.get("carrier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_id").toString()));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            CarrierAdvancedOption.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            PackageType.validateJsonElement(jsonArraypackages.get(i));
          };
        }
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            Service.validateJsonElement(jsonArrayservices.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCarrierByIdResponseBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCarrierByIdResponseBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCarrierByIdResponseBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCarrierByIdResponseBody.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCarrierByIdResponseBody>() {
           @Override
           public void write(JsonWriter out, GetCarrierByIdResponseBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCarrierByIdResponseBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCarrierByIdResponseBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCarrierByIdResponseBody
   * @throws IOException if the JSON string is invalid with respect to GetCarrierByIdResponseBody
   */
  public static GetCarrierByIdResponseBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCarrierByIdResponseBody.class);
  }

  /**
   * Convert an instance of GetCarrierByIdResponseBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

