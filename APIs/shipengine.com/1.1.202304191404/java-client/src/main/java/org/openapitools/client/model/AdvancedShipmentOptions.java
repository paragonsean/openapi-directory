/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdvancedShipmentOptionsFedexFreight;
import org.openapitools.client.model.BillToParty;
import org.openapitools.client.model.CollectOnDelivery;
import org.openapitools.client.model.OriginType;
import org.openapitools.client.model.Weight;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Advanced shipment options
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvancedShipmentOptions {
  public static final String SERIALIZED_NAME_BILL_TO_ACCOUNT = "bill_to_account";
  @SerializedName(SERIALIZED_NAME_BILL_TO_ACCOUNT)
  private String billToAccount;

  public static final String SERIALIZED_NAME_BILL_TO_COUNTRY_CODE = "bill_to_country_code";
  @SerializedName(SERIALIZED_NAME_BILL_TO_COUNTRY_CODE)
  private String billToCountryCode = null;

  public static final String SERIALIZED_NAME_BILL_TO_PARTY = "bill_to_party";
  @SerializedName(SERIALIZED_NAME_BILL_TO_PARTY)
  private BillToParty billToParty = null;

  public static final String SERIALIZED_NAME_BILL_TO_POSTAL_CODE = "bill_to_postal_code";
  @SerializedName(SERIALIZED_NAME_BILL_TO_POSTAL_CODE)
  private String billToPostalCode;

  public static final String SERIALIZED_NAME_COLLECT_ON_DELIVERY = "collect_on_delivery";
  @SerializedName(SERIALIZED_NAME_COLLECT_ON_DELIVERY)
  private CollectOnDelivery collectOnDelivery;

  public static final String SERIALIZED_NAME_CONTAINS_ALCOHOL = "contains_alcohol";
  @SerializedName(SERIALIZED_NAME_CONTAINS_ALCOHOL)
  private Boolean containsAlcohol = false;

  public static final String SERIALIZED_NAME_CUSTOM_FIELD1 = "custom_field1";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD1)
  private String customField1;

  public static final String SERIALIZED_NAME_CUSTOM_FIELD2 = "custom_field2";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD2)
  private String customField2;

  public static final String SERIALIZED_NAME_CUSTOM_FIELD3 = "custom_field3";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD3)
  private String customField3;

  public static final String SERIALIZED_NAME_DELIVERED_DUTY_PAID = "delivered_duty_paid";
  @SerializedName(SERIALIZED_NAME_DELIVERED_DUTY_PAID)
  private Boolean deliveredDutyPaid = false;

  public static final String SERIALIZED_NAME_DRY_ICE = "dry_ice";
  @SerializedName(SERIALIZED_NAME_DRY_ICE)
  private Boolean dryIce = false;

  public static final String SERIALIZED_NAME_DRY_ICE_WEIGHT = "dry_ice_weight";
  @SerializedName(SERIALIZED_NAME_DRY_ICE_WEIGHT)
  private Weight dryIceWeight;

  public static final String SERIALIZED_NAME_FEDEX_FREIGHT = "fedex_freight";
  @SerializedName(SERIALIZED_NAME_FEDEX_FREIGHT)
  private AdvancedShipmentOptionsFedexFreight fedexFreight;

  public static final String SERIALIZED_NAME_FREIGHT_CLASS = "freight_class";
  @SerializedName(SERIALIZED_NAME_FREIGHT_CLASS)
  private String freightClass;

  public static final String SERIALIZED_NAME_NON_MACHINABLE = "non_machinable";
  @SerializedName(SERIALIZED_NAME_NON_MACHINABLE)
  private Boolean nonMachinable = false;

  public static final String SERIALIZED_NAME_ORIGIN_TYPE = "origin_type";
  @SerializedName(SERIALIZED_NAME_ORIGIN_TYPE)
  private OriginType originType = null;

  public static final String SERIALIZED_NAME_SATURDAY_DELIVERY = "saturday_delivery";
  @SerializedName(SERIALIZED_NAME_SATURDAY_DELIVERY)
  private Boolean saturdayDelivery = false;

  public static final String SERIALIZED_NAME_SHIPPER_RELEASE = "shipper_release";
  @SerializedName(SERIALIZED_NAME_SHIPPER_RELEASE)
  private Boolean shipperRelease;

  public static final String SERIALIZED_NAME_THIRD_PARTY_CONSIGNEE = "third_party_consignee";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_CONSIGNEE)
  private Boolean thirdPartyConsignee = false;

  public static final String SERIALIZED_NAME_USE_UPS_GROUND_FREIGHT_PRICING = "use_ups_ground_freight_pricing";
  @SerializedName(SERIALIZED_NAME_USE_UPS_GROUND_FREIGHT_PRICING)
  private Boolean useUpsGroundFreightPricing;

  public AdvancedShipmentOptions() {
  }

  public AdvancedShipmentOptions billToAccount(String billToAccount) {
    this.billToAccount = billToAccount;
    return this;
  }

  /**
   * This field is used to [bill shipping costs to a third party](https://www.shipengine.com/docs/shipping/bill-to-third-party/).  This field must be used in conjunction with the &#x60;bill_to_country_code&#x60;, &#x60;bill_to_party&#x60;, and &#x60;bill_to_postal_code&#x60; fields. 
   * @return billToAccount
   */
  @javax.annotation.Nullable
  public String getBillToAccount() {
    return billToAccount;
  }

  public void setBillToAccount(String billToAccount) {
    this.billToAccount = billToAccount;
  }


  public AdvancedShipmentOptions billToCountryCode(String billToCountryCode) {
    this.billToCountryCode = billToCountryCode;
    return this;
  }

  /**
   * The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the third-party that is responsible for shipping costs. 
   * @return billToCountryCode
   */
  @javax.annotation.Nullable
  public String getBillToCountryCode() {
    return billToCountryCode;
  }

  public void setBillToCountryCode(String billToCountryCode) {
    this.billToCountryCode = billToCountryCode;
  }


  public AdvancedShipmentOptions billToParty(BillToParty billToParty) {
    this.billToParty = billToParty;
    return this;
  }

  /**
   * Indicates whether to bill shipping costs to the recipient or to a third-party.  When billing to a third-party, the &#x60;bill_to_account&#x60;, &#x60;bill_to_country_code&#x60;, and &#x60;bill_to_postal_code&#x60; fields must also be set. 
   * @return billToParty
   */
  @javax.annotation.Nullable
  public BillToParty getBillToParty() {
    return billToParty;
  }

  public void setBillToParty(BillToParty billToParty) {
    this.billToParty = billToParty;
  }


  public AdvancedShipmentOptions billToPostalCode(String billToPostalCode) {
    this.billToPostalCode = billToPostalCode;
    return this;
  }

  /**
   * The postal code of the third-party that is responsible for shipping costs. 
   * @return billToPostalCode
   */
  @javax.annotation.Nullable
  public String getBillToPostalCode() {
    return billToPostalCode;
  }

  public void setBillToPostalCode(String billToPostalCode) {
    this.billToPostalCode = billToPostalCode;
  }


  public AdvancedShipmentOptions collectOnDelivery(CollectOnDelivery collectOnDelivery) {
    this.collectOnDelivery = collectOnDelivery;
    return this;
  }

  /**
   * Get collectOnDelivery
   * @return collectOnDelivery
   */
  @javax.annotation.Nullable
  public CollectOnDelivery getCollectOnDelivery() {
    return collectOnDelivery;
  }

  public void setCollectOnDelivery(CollectOnDelivery collectOnDelivery) {
    this.collectOnDelivery = collectOnDelivery;
  }


  public AdvancedShipmentOptions containsAlcohol(Boolean containsAlcohol) {
    this.containsAlcohol = containsAlcohol;
    return this;
  }

  /**
   * Indicates that the shipment contains alcohol.
   * @return containsAlcohol
   */
  @javax.annotation.Nullable
  public Boolean getContainsAlcohol() {
    return containsAlcohol;
  }

  public void setContainsAlcohol(Boolean containsAlcohol) {
    this.containsAlcohol = containsAlcohol;
  }


  public AdvancedShipmentOptions customField1(String customField1) {
    this.customField1 = customField1;
    return this;
  }

  /**
   * An arbitrary field that can be used to store information about the shipment. 
   * @return customField1
   */
  @javax.annotation.Nullable
  public String getCustomField1() {
    return customField1;
  }

  public void setCustomField1(String customField1) {
    this.customField1 = customField1;
  }


  public AdvancedShipmentOptions customField2(String customField2) {
    this.customField2 = customField2;
    return this;
  }

  /**
   * An arbitrary field that can be used to store information about the shipment. 
   * @return customField2
   */
  @javax.annotation.Nullable
  public String getCustomField2() {
    return customField2;
  }

  public void setCustomField2(String customField2) {
    this.customField2 = customField2;
  }


  public AdvancedShipmentOptions customField3(String customField3) {
    this.customField3 = customField3;
    return this;
  }

  /**
   * An arbitrary field that can be used to store information about the shipment. 
   * @return customField3
   */
  @javax.annotation.Nullable
  public String getCustomField3() {
    return customField3;
  }

  public void setCustomField3(String customField3) {
    this.customField3 = customField3;
  }


  public AdvancedShipmentOptions deliveredDutyPaid(Boolean deliveredDutyPaid) {
    this.deliveredDutyPaid = deliveredDutyPaid;
    return this;
  }

  /**
   * Indicates that the shipper is paying the international delivery duties for this shipment.  This option is supported by UPS, FedEx, and DHL Express. 
   * @return deliveredDutyPaid
   */
  @javax.annotation.Nullable
  public Boolean getDeliveredDutyPaid() {
    return deliveredDutyPaid;
  }

  public void setDeliveredDutyPaid(Boolean deliveredDutyPaid) {
    this.deliveredDutyPaid = deliveredDutyPaid;
  }


  public AdvancedShipmentOptions dryIce(Boolean dryIce) {
    this.dryIce = dryIce;
    return this;
  }

  /**
   * Indicates if the shipment contain dry ice
   * @return dryIce
   */
  @javax.annotation.Nullable
  public Boolean getDryIce() {
    return dryIce;
  }

  public void setDryIce(Boolean dryIce) {
    this.dryIce = dryIce;
  }


  public AdvancedShipmentOptions dryIceWeight(Weight dryIceWeight) {
    this.dryIceWeight = dryIceWeight;
    return this;
  }

  /**
   * The weight of the dry ice in the shipment
   * @return dryIceWeight
   */
  @javax.annotation.Nullable
  public Weight getDryIceWeight() {
    return dryIceWeight;
  }

  public void setDryIceWeight(Weight dryIceWeight) {
    this.dryIceWeight = dryIceWeight;
  }


  public AdvancedShipmentOptions fedexFreight(AdvancedShipmentOptionsFedexFreight fedexFreight) {
    this.fedexFreight = fedexFreight;
    return this;
  }

  /**
   * Get fedexFreight
   * @return fedexFreight
   */
  @javax.annotation.Nullable
  public AdvancedShipmentOptionsFedexFreight getFedexFreight() {
    return fedexFreight;
  }

  public void setFedexFreight(AdvancedShipmentOptionsFedexFreight fedexFreight) {
    this.fedexFreight = fedexFreight;
  }


  public AdvancedShipmentOptions freightClass(String freightClass) {
    this.freightClass = freightClass;
    return this;
  }

  /**
   * The National Motor Freight Traffic Association [freight class](http://www.nmfta.org/pages/nmfc?AspxAutoDetectCookieSupport&#x3D;1), such as \&quot;77.5\&quot;, \&quot;110\&quot;, or \&quot;250\&quot;. 
   * @return freightClass
   */
  @javax.annotation.Nullable
  public String getFreightClass() {
    return freightClass;
  }

  public void setFreightClass(String freightClass) {
    this.freightClass = freightClass;
  }


  public AdvancedShipmentOptions nonMachinable(Boolean nonMachinable) {
    this.nonMachinable = nonMachinable;
    return this;
  }

  /**
   * Indicates that the package cannot be processed automatically because it is too large or irregularly shaped. This is primarily for USPS shipments.  See [Section 1.2 of the USPS parcel standards](https://pe.usps.com/text/dmm300/101.htm#ep1047495) for details. 
   * @return nonMachinable
   */
  @javax.annotation.Nullable
  public Boolean getNonMachinable() {
    return nonMachinable;
  }

  public void setNonMachinable(Boolean nonMachinable) {
    this.nonMachinable = nonMachinable;
  }


  public AdvancedShipmentOptions originType(OriginType originType) {
    this.originType = originType;
    return this;
  }

  /**
   * Get originType
   * @return originType
   */
  @javax.annotation.Nullable
  public OriginType getOriginType() {
    return originType;
  }

  public void setOriginType(OriginType originType) {
    this.originType = originType;
  }


  public AdvancedShipmentOptions saturdayDelivery(Boolean saturdayDelivery) {
    this.saturdayDelivery = saturdayDelivery;
    return this;
  }

  /**
   * Enables Saturday delivery, if supported by the carrier.
   * @return saturdayDelivery
   */
  @javax.annotation.Nullable
  public Boolean getSaturdayDelivery() {
    return saturdayDelivery;
  }

  public void setSaturdayDelivery(Boolean saturdayDelivery) {
    this.saturdayDelivery = saturdayDelivery;
  }


  public AdvancedShipmentOptions shipperRelease(Boolean shipperRelease) {
    this.shipperRelease = shipperRelease;
    return this;
  }

  /**
   * Get shipperRelease
   * @return shipperRelease
   */
  @javax.annotation.Nullable
  public Boolean getShipperRelease() {
    return shipperRelease;
  }

  public void setShipperRelease(Boolean shipperRelease) {
    this.shipperRelease = shipperRelease;
  }


  public AdvancedShipmentOptions thirdPartyConsignee(Boolean thirdPartyConsignee) {
    this.thirdPartyConsignee = thirdPartyConsignee;
    return this;
  }

  /**
   * Third Party Consignee option is a value-added service that allows the shipper to supply goods without commercial invoices being attached
   * @return thirdPartyConsignee
   */
  @javax.annotation.Nullable
  public Boolean getThirdPartyConsignee() {
    return thirdPartyConsignee;
  }

  public void setThirdPartyConsignee(Boolean thirdPartyConsignee) {
    this.thirdPartyConsignee = thirdPartyConsignee;
  }


  public AdvancedShipmentOptions useUpsGroundFreightPricing(Boolean useUpsGroundFreightPricing) {
    this.useUpsGroundFreightPricing = useUpsGroundFreightPricing;
    return this;
  }

  /**
   * Whether to use [UPS Ground Freight pricing](https://www.shipengine.com/docs/shipping/ups-ground-freight/).  If enabled, then a &#x60;freight_class&#x60; must also be specified. 
   * @return useUpsGroundFreightPricing
   */
  @javax.annotation.Nullable
  public Boolean getUseUpsGroundFreightPricing() {
    return useUpsGroundFreightPricing;
  }

  public void setUseUpsGroundFreightPricing(Boolean useUpsGroundFreightPricing) {
    this.useUpsGroundFreightPricing = useUpsGroundFreightPricing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedShipmentOptions advancedShipmentOptions = (AdvancedShipmentOptions) o;
    return Objects.equals(this.billToAccount, advancedShipmentOptions.billToAccount) &&
        Objects.equals(this.billToCountryCode, advancedShipmentOptions.billToCountryCode) &&
        Objects.equals(this.billToParty, advancedShipmentOptions.billToParty) &&
        Objects.equals(this.billToPostalCode, advancedShipmentOptions.billToPostalCode) &&
        Objects.equals(this.collectOnDelivery, advancedShipmentOptions.collectOnDelivery) &&
        Objects.equals(this.containsAlcohol, advancedShipmentOptions.containsAlcohol) &&
        Objects.equals(this.customField1, advancedShipmentOptions.customField1) &&
        Objects.equals(this.customField2, advancedShipmentOptions.customField2) &&
        Objects.equals(this.customField3, advancedShipmentOptions.customField3) &&
        Objects.equals(this.deliveredDutyPaid, advancedShipmentOptions.deliveredDutyPaid) &&
        Objects.equals(this.dryIce, advancedShipmentOptions.dryIce) &&
        Objects.equals(this.dryIceWeight, advancedShipmentOptions.dryIceWeight) &&
        Objects.equals(this.fedexFreight, advancedShipmentOptions.fedexFreight) &&
        Objects.equals(this.freightClass, advancedShipmentOptions.freightClass) &&
        Objects.equals(this.nonMachinable, advancedShipmentOptions.nonMachinable) &&
        Objects.equals(this.originType, advancedShipmentOptions.originType) &&
        Objects.equals(this.saturdayDelivery, advancedShipmentOptions.saturdayDelivery) &&
        Objects.equals(this.shipperRelease, advancedShipmentOptions.shipperRelease) &&
        Objects.equals(this.thirdPartyConsignee, advancedShipmentOptions.thirdPartyConsignee) &&
        Objects.equals(this.useUpsGroundFreightPricing, advancedShipmentOptions.useUpsGroundFreightPricing);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billToAccount, billToCountryCode, billToParty, billToPostalCode, collectOnDelivery, containsAlcohol, customField1, customField2, customField3, deliveredDutyPaid, dryIce, dryIceWeight, fedexFreight, freightClass, nonMachinable, originType, saturdayDelivery, shipperRelease, thirdPartyConsignee, useUpsGroundFreightPricing);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedShipmentOptions {\n");
    sb.append("    billToAccount: ").append(toIndentedString(billToAccount)).append("\n");
    sb.append("    billToCountryCode: ").append(toIndentedString(billToCountryCode)).append("\n");
    sb.append("    billToParty: ").append(toIndentedString(billToParty)).append("\n");
    sb.append("    billToPostalCode: ").append(toIndentedString(billToPostalCode)).append("\n");
    sb.append("    collectOnDelivery: ").append(toIndentedString(collectOnDelivery)).append("\n");
    sb.append("    containsAlcohol: ").append(toIndentedString(containsAlcohol)).append("\n");
    sb.append("    customField1: ").append(toIndentedString(customField1)).append("\n");
    sb.append("    customField2: ").append(toIndentedString(customField2)).append("\n");
    sb.append("    customField3: ").append(toIndentedString(customField3)).append("\n");
    sb.append("    deliveredDutyPaid: ").append(toIndentedString(deliveredDutyPaid)).append("\n");
    sb.append("    dryIce: ").append(toIndentedString(dryIce)).append("\n");
    sb.append("    dryIceWeight: ").append(toIndentedString(dryIceWeight)).append("\n");
    sb.append("    fedexFreight: ").append(toIndentedString(fedexFreight)).append("\n");
    sb.append("    freightClass: ").append(toIndentedString(freightClass)).append("\n");
    sb.append("    nonMachinable: ").append(toIndentedString(nonMachinable)).append("\n");
    sb.append("    originType: ").append(toIndentedString(originType)).append("\n");
    sb.append("    saturdayDelivery: ").append(toIndentedString(saturdayDelivery)).append("\n");
    sb.append("    shipperRelease: ").append(toIndentedString(shipperRelease)).append("\n");
    sb.append("    thirdPartyConsignee: ").append(toIndentedString(thirdPartyConsignee)).append("\n");
    sb.append("    useUpsGroundFreightPricing: ").append(toIndentedString(useUpsGroundFreightPricing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bill_to_account");
    openapiFields.add("bill_to_country_code");
    openapiFields.add("bill_to_party");
    openapiFields.add("bill_to_postal_code");
    openapiFields.add("collect_on_delivery");
    openapiFields.add("contains_alcohol");
    openapiFields.add("custom_field1");
    openapiFields.add("custom_field2");
    openapiFields.add("custom_field3");
    openapiFields.add("delivered_duty_paid");
    openapiFields.add("dry_ice");
    openapiFields.add("dry_ice_weight");
    openapiFields.add("fedex_freight");
    openapiFields.add("freight_class");
    openapiFields.add("non_machinable");
    openapiFields.add("origin_type");
    openapiFields.add("saturday_delivery");
    openapiFields.add("shipper_release");
    openapiFields.add("third_party_consignee");
    openapiFields.add("use_ups_ground_freight_pricing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvancedShipmentOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvancedShipmentOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvancedShipmentOptions is not found in the empty JSON string", AdvancedShipmentOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvancedShipmentOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvancedShipmentOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bill_to_account") != null && !jsonObj.get("bill_to_account").isJsonNull()) && !jsonObj.get("bill_to_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bill_to_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bill_to_account").toString()));
      }
      if ((jsonObj.get("bill_to_country_code") != null && !jsonObj.get("bill_to_country_code").isJsonNull()) && !jsonObj.get("bill_to_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bill_to_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bill_to_country_code").toString()));
      }
      // validate the optional field `bill_to_party`
      if (jsonObj.get("bill_to_party") != null && !jsonObj.get("bill_to_party").isJsonNull()) {
        BillToParty.validateJsonElement(jsonObj.get("bill_to_party"));
      }
      if ((jsonObj.get("bill_to_postal_code") != null && !jsonObj.get("bill_to_postal_code").isJsonNull()) && !jsonObj.get("bill_to_postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bill_to_postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bill_to_postal_code").toString()));
      }
      // validate the optional field `collect_on_delivery`
      if (jsonObj.get("collect_on_delivery") != null && !jsonObj.get("collect_on_delivery").isJsonNull()) {
        CollectOnDelivery.validateJsonElement(jsonObj.get("collect_on_delivery"));
      }
      if ((jsonObj.get("custom_field1") != null && !jsonObj.get("custom_field1").isJsonNull()) && !jsonObj.get("custom_field1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_field1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_field1").toString()));
      }
      if ((jsonObj.get("custom_field2") != null && !jsonObj.get("custom_field2").isJsonNull()) && !jsonObj.get("custom_field2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_field2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_field2").toString()));
      }
      if ((jsonObj.get("custom_field3") != null && !jsonObj.get("custom_field3").isJsonNull()) && !jsonObj.get("custom_field3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_field3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_field3").toString()));
      }
      // validate the optional field `dry_ice_weight`
      if (jsonObj.get("dry_ice_weight") != null && !jsonObj.get("dry_ice_weight").isJsonNull()) {
        Weight.validateJsonElement(jsonObj.get("dry_ice_weight"));
      }
      // validate the optional field `fedex_freight`
      if (jsonObj.get("fedex_freight") != null && !jsonObj.get("fedex_freight").isJsonNull()) {
        AdvancedShipmentOptionsFedexFreight.validateJsonElement(jsonObj.get("fedex_freight"));
      }
      if ((jsonObj.get("freight_class") != null && !jsonObj.get("freight_class").isJsonNull()) && !jsonObj.get("freight_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freight_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freight_class").toString()));
      }
      // validate the optional field `origin_type`
      if (jsonObj.get("origin_type") != null && !jsonObj.get("origin_type").isJsonNull()) {
        OriginType.validateJsonElement(jsonObj.get("origin_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvancedShipmentOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvancedShipmentOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvancedShipmentOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvancedShipmentOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvancedShipmentOptions>() {
           @Override
           public void write(JsonWriter out, AdvancedShipmentOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvancedShipmentOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvancedShipmentOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvancedShipmentOptions
   * @throws IOException if the JSON string is invalid with respect to AdvancedShipmentOptions
   */
  public static AdvancedShipmentOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvancedShipmentOptions.class);
  }

  /**
   * Convert an instance of AdvancedShipmentOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

