/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rate request body
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RateRequestBody {
  public static final String SERIALIZED_NAME_CALCULATE_TAX_AMOUNT = "calculate_tax_amount";
  @SerializedName(SERIALIZED_NAME_CALCULATE_TAX_AMOUNT)
  private Boolean calculateTaxAmount;

  public static final String SERIALIZED_NAME_CARRIER_IDS = "carrier_ids";
  @SerializedName(SERIALIZED_NAME_CARRIER_IDS)
  private List<String> carrierIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_RETURN = "is_return";
  @SerializedName(SERIALIZED_NAME_IS_RETURN)
  private Boolean isReturn;

  public static final String SERIALIZED_NAME_PACKAGE_TYPES = "package_types";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPES)
  private List<String> packageTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFERRED_CURRENCY = "preferred_currency";
  @SerializedName(SERIALIZED_NAME_PREFERRED_CURRENCY)
  private String preferredCurrency;

  public static final String SERIALIZED_NAME_SERVICE_CODES = "service_codes";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODES)
  private List<String> serviceCodes = new ArrayList<>();

  public RateRequestBody() {
  }

  public RateRequestBody calculateTaxAmount(Boolean calculateTaxAmount) {
    this.calculateTaxAmount = calculateTaxAmount;
    return this;
  }

  /**
   * Calculate the duties and tariffs for cross border shipments.
   * @return calculateTaxAmount
   */
  @javax.annotation.Nullable
  public Boolean getCalculateTaxAmount() {
    return calculateTaxAmount;
  }

  public void setCalculateTaxAmount(Boolean calculateTaxAmount) {
    this.calculateTaxAmount = calculateTaxAmount;
  }


  public RateRequestBody carrierIds(List<String> carrierIds) {
    this.carrierIds = carrierIds;
    return this;
  }

  public RateRequestBody addCarrierIdsItem(String carrierIdsItem) {
    if (this.carrierIds == null) {
      this.carrierIds = new ArrayList<>();
    }
    this.carrierIds.add(carrierIdsItem);
    return this;
  }

  /**
   * Array of carrier ids to get rates for
   * @return carrierIds
   */
  @javax.annotation.Nonnull
  public List<String> getCarrierIds() {
    return carrierIds;
  }

  public void setCarrierIds(List<String> carrierIds) {
    this.carrierIds = carrierIds;
  }


  public RateRequestBody isReturn(Boolean isReturn) {
    this.isReturn = isReturn;
    return this;
  }

  /**
   * Indicate if it&#39;s a return shipment
   * @return isReturn
   */
  @javax.annotation.Nullable
  public Boolean getIsReturn() {
    return isReturn;
  }

  public void setIsReturn(Boolean isReturn) {
    this.isReturn = isReturn;
  }


  public RateRequestBody packageTypes(List<String> packageTypes) {
    this.packageTypes = packageTypes;
    return this;
  }

  public RateRequestBody addPackageTypesItem(String packageTypesItem) {
    if (this.packageTypes == null) {
      this.packageTypes = new ArrayList<>();
    }
    this.packageTypes.add(packageTypesItem);
    return this;
  }

  /**
   * Get packageTypes
   * @return packageTypes
   */
  @javax.annotation.Nullable
  public List<String> getPackageTypes() {
    return packageTypes;
  }

  public void setPackageTypes(List<String> packageTypes) {
    this.packageTypes = packageTypes;
  }


  public RateRequestBody preferredCurrency(String preferredCurrency) {
    this.preferredCurrency = preferredCurrency;
    return this;
  }

  /**
   * The currencies that are supported by ShipEngine are the ones that specified by ISO 4217: https://www.iso.org/iso-4217-currency-codes.html 
   * @return preferredCurrency
   */
  @javax.annotation.Nullable
  public String getPreferredCurrency() {
    return preferredCurrency;
  }

  public void setPreferredCurrency(String preferredCurrency) {
    this.preferredCurrency = preferredCurrency;
  }


  public RateRequestBody serviceCodes(List<String> serviceCodes) {
    this.serviceCodes = serviceCodes;
    return this;
  }

  public RateRequestBody addServiceCodesItem(String serviceCodesItem) {
    if (this.serviceCodes == null) {
      this.serviceCodes = new ArrayList<>();
    }
    this.serviceCodes.add(serviceCodesItem);
    return this;
  }

  /**
   * Get serviceCodes
   * @return serviceCodes
   */
  @javax.annotation.Nullable
  public List<String> getServiceCodes() {
    return serviceCodes;
  }

  public void setServiceCodes(List<String> serviceCodes) {
    this.serviceCodes = serviceCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateRequestBody rateRequestBody = (RateRequestBody) o;
    return Objects.equals(this.calculateTaxAmount, rateRequestBody.calculateTaxAmount) &&
        Objects.equals(this.carrierIds, rateRequestBody.carrierIds) &&
        Objects.equals(this.isReturn, rateRequestBody.isReturn) &&
        Objects.equals(this.packageTypes, rateRequestBody.packageTypes) &&
        Objects.equals(this.preferredCurrency, rateRequestBody.preferredCurrency) &&
        Objects.equals(this.serviceCodes, rateRequestBody.serviceCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculateTaxAmount, carrierIds, isReturn, packageTypes, preferredCurrency, serviceCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateRequestBody {\n");
    sb.append("    calculateTaxAmount: ").append(toIndentedString(calculateTaxAmount)).append("\n");
    sb.append("    carrierIds: ").append(toIndentedString(carrierIds)).append("\n");
    sb.append("    isReturn: ").append(toIndentedString(isReturn)).append("\n");
    sb.append("    packageTypes: ").append(toIndentedString(packageTypes)).append("\n");
    sb.append("    preferredCurrency: ").append(toIndentedString(preferredCurrency)).append("\n");
    sb.append("    serviceCodes: ").append(toIndentedString(serviceCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculate_tax_amount");
    openapiFields.add("carrier_ids");
    openapiFields.add("is_return");
    openapiFields.add("package_types");
    openapiFields.add("preferred_currency");
    openapiFields.add("service_codes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("carrier_ids");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RateRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RateRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateRequestBody is not found in the empty JSON string", RateRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RateRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RateRequestBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("carrier_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("carrier_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_ids` to be an array in the JSON string but got `%s`", jsonObj.get("carrier_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("package_types") != null && !jsonObj.get("package_types").isJsonNull() && !jsonObj.get("package_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_types` to be an array in the JSON string but got `%s`", jsonObj.get("package_types").toString()));
      }
      if ((jsonObj.get("preferred_currency") != null && !jsonObj.get("preferred_currency").isJsonNull()) && !jsonObj.get("preferred_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferred_currency").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("service_codes") != null && !jsonObj.get("service_codes").isJsonNull() && !jsonObj.get("service_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_codes` to be an array in the JSON string but got `%s`", jsonObj.get("service_codes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<RateRequestBody>() {
           @Override
           public void write(JsonWriter out, RateRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RateRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RateRequestBody
   * @throws IOException if the JSON string is invalid with respect to RateRequestBody
   */
  public static RateRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateRequestBody.class);
  }

  /**
   * Convert an instance of RateRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

