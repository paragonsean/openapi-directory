/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StatusCode;
import org.openapitools.client.model.TrackEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A get tracking log response body
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTrackingLogResponseBody {
  public static final String SERIALIZED_NAME_ACTUAL_DELIVERY_DATE = "actual_delivery_date";
  @SerializedName(SERIALIZED_NAME_ACTUAL_DELIVERY_DATE)
  private OffsetDateTime actualDeliveryDate;

  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrier_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private String carrierCode;

  public static final String SERIALIZED_NAME_CARRIER_DETAIL_CODE = "carrier_detail_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_DETAIL_CODE)
  private String carrierDetailCode;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrier_id";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_CARRIER_STATUS_CODE = "carrier_status_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_STATUS_CODE)
  private String carrierStatusCode;

  public static final String SERIALIZED_NAME_CARRIER_STATUS_DESCRIPTION = "carrier_status_description";
  @SerializedName(SERIALIZED_NAME_CARRIER_STATUS_DESCRIPTION)
  private String carrierStatusDescription;

  public static final String SERIALIZED_NAME_ESTIMATED_DELIVERY_DATE = "estimated_delivery_date";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_DELIVERY_DATE)
  private OffsetDateTime estimatedDeliveryDate;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<TrackEvent> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCEPTION_DESCRIPTION = "exception_description";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_DESCRIPTION)
  private String exceptionDescription;

  public static final String SERIALIZED_NAME_SHIP_DATE = "ship_date";
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StatusCode statusCode;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "status_description";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "tracking_number";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public static final String SERIALIZED_NAME_TRACKING_URL = "tracking_url";
  @SerializedName(SERIALIZED_NAME_TRACKING_URL)
  private String trackingUrl;

  public GetTrackingLogResponseBody() {
  }

  public GetTrackingLogResponseBody(
     String carrierDetailCode, 
     String carrierStatusCode, 
     String carrierStatusDescription, 
     List<TrackEvent> events, 
     String exceptionDescription, 
     String statusDescription, 
     String trackingUrl
  ) {
    this();
    this.carrierDetailCode = carrierDetailCode;
    this.carrierStatusCode = carrierStatusCode;
    this.carrierStatusDescription = carrierStatusDescription;
    this.events = events;
    this.exceptionDescription = exceptionDescription;
    this.statusDescription = statusDescription;
    this.trackingUrl = trackingUrl;
  }

  public GetTrackingLogResponseBody actualDeliveryDate(OffsetDateTime actualDeliveryDate) {
    this.actualDeliveryDate = actualDeliveryDate;
    return this;
  }

  /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return actualDeliveryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActualDeliveryDate() {
    return actualDeliveryDate;
  }

  public void setActualDeliveryDate(OffsetDateTime actualDeliveryDate) {
    this.actualDeliveryDate = actualDeliveryDate;
  }


  public GetTrackingLogResponseBody carrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
    return this;
  }

  /**
   * A [shipping carrier](https://www.shipengine.com/docs/carriers/setup/), such as &#x60;fedex&#x60;, &#x60;dhl_express&#x60;, &#x60;stamps_com&#x60;, etc. 
   * @return carrierCode
   */
  @javax.annotation.Nonnull
  public String getCarrierCode() {
    return carrierCode;
  }

  public void setCarrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
  }


  /**
   * Carrier detail code
   * @return carrierDetailCode
   */
  @javax.annotation.Nonnull
  public String getCarrierDetailCode() {
    return carrierDetailCode;
  }



  public GetTrackingLogResponseBody carrierId(String carrierId) {
    this.carrierId = carrierId;
    return this;
  }

  /**
   * A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.
   * @return carrierId
   */
  @javax.annotation.Nonnull
  public String getCarrierId() {
    return carrierId;
  }

  public void setCarrierId(String carrierId) {
    this.carrierId = carrierId;
  }


  /**
   * Carrier status code
   * @return carrierStatusCode
   */
  @javax.annotation.Nonnull
  public String getCarrierStatusCode() {
    return carrierStatusCode;
  }



  /**
   * carrier status description
   * @return carrierStatusDescription
   */
  @javax.annotation.Nullable
  public String getCarrierStatusDescription() {
    return carrierStatusDescription;
  }



  public GetTrackingLogResponseBody estimatedDeliveryDate(OffsetDateTime estimatedDeliveryDate) {
    this.estimatedDeliveryDate = estimatedDeliveryDate;
    return this;
  }

  /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return estimatedDeliveryDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEstimatedDeliveryDate() {
    return estimatedDeliveryDate;
  }

  public void setEstimatedDeliveryDate(OffsetDateTime estimatedDeliveryDate) {
    this.estimatedDeliveryDate = estimatedDeliveryDate;
  }


  /**
   * The events that have occured during the lifetime of this tracking number.
   * @return events
   */
  @javax.annotation.Nonnull
  public List<TrackEvent> getEvents() {
    return events;
  }



  /**
   * Exception description
   * @return exceptionDescription
   */
  @javax.annotation.Nullable
  public String getExceptionDescription() {
    return exceptionDescription;
  }



  public GetTrackingLogResponseBody shipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
    return this;
  }

  /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return shipDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShipDate() {
    return shipDate;
  }

  public void setShipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
  }


  public GetTrackingLogResponseBody statusCode(StatusCode statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nonnull
  public StatusCode getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StatusCode statusCode) {
    this.statusCode = statusCode;
  }


  /**
   * Status description
   * @return statusDescription
   */
  @javax.annotation.Nullable
  public String getStatusDescription() {
    return statusDescription;
  }



  public GetTrackingLogResponseBody trackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
    return this;
  }

  /**
   * A tracking number for a package. The format depends on the carrier.
   * @return trackingNumber
   */
  @javax.annotation.Nonnull
  public String getTrackingNumber() {
    return trackingNumber;
  }

  public void setTrackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
  }


  /**
   * Carrier Tracking Url, if available
   * @return trackingUrl
   */
  @javax.annotation.Nonnull
  public String getTrackingUrl() {
    return trackingUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTrackingLogResponseBody getTrackingLogResponseBody = (GetTrackingLogResponseBody) o;
    return Objects.equals(this.actualDeliveryDate, getTrackingLogResponseBody.actualDeliveryDate) &&
        Objects.equals(this.carrierCode, getTrackingLogResponseBody.carrierCode) &&
        Objects.equals(this.carrierDetailCode, getTrackingLogResponseBody.carrierDetailCode) &&
        Objects.equals(this.carrierId, getTrackingLogResponseBody.carrierId) &&
        Objects.equals(this.carrierStatusCode, getTrackingLogResponseBody.carrierStatusCode) &&
        Objects.equals(this.carrierStatusDescription, getTrackingLogResponseBody.carrierStatusDescription) &&
        Objects.equals(this.estimatedDeliveryDate, getTrackingLogResponseBody.estimatedDeliveryDate) &&
        Objects.equals(this.events, getTrackingLogResponseBody.events) &&
        Objects.equals(this.exceptionDescription, getTrackingLogResponseBody.exceptionDescription) &&
        Objects.equals(this.shipDate, getTrackingLogResponseBody.shipDate) &&
        Objects.equals(this.statusCode, getTrackingLogResponseBody.statusCode) &&
        Objects.equals(this.statusDescription, getTrackingLogResponseBody.statusDescription) &&
        Objects.equals(this.trackingNumber, getTrackingLogResponseBody.trackingNumber) &&
        Objects.equals(this.trackingUrl, getTrackingLogResponseBody.trackingUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualDeliveryDate, carrierCode, carrierDetailCode, carrierId, carrierStatusCode, carrierStatusDescription, estimatedDeliveryDate, events, exceptionDescription, shipDate, statusCode, statusDescription, trackingNumber, trackingUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTrackingLogResponseBody {\n");
    sb.append("    actualDeliveryDate: ").append(toIndentedString(actualDeliveryDate)).append("\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    carrierDetailCode: ").append(toIndentedString(carrierDetailCode)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    carrierStatusCode: ").append(toIndentedString(carrierStatusCode)).append("\n");
    sb.append("    carrierStatusDescription: ").append(toIndentedString(carrierStatusDescription)).append("\n");
    sb.append("    estimatedDeliveryDate: ").append(toIndentedString(estimatedDeliveryDate)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    exceptionDescription: ").append(toIndentedString(exceptionDescription)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actual_delivery_date");
    openapiFields.add("carrier_code");
    openapiFields.add("carrier_detail_code");
    openapiFields.add("carrier_id");
    openapiFields.add("carrier_status_code");
    openapiFields.add("carrier_status_description");
    openapiFields.add("estimated_delivery_date");
    openapiFields.add("events");
    openapiFields.add("exception_description");
    openapiFields.add("ship_date");
    openapiFields.add("status_code");
    openapiFields.add("status_description");
    openapiFields.add("tracking_number");
    openapiFields.add("tracking_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("carrier_code");
    openapiRequiredFields.add("carrier_detail_code");
    openapiRequiredFields.add("carrier_id");
    openapiRequiredFields.add("carrier_status_code");
    openapiRequiredFields.add("estimated_delivery_date");
    openapiRequiredFields.add("events");
    openapiRequiredFields.add("status_code");
    openapiRequiredFields.add("tracking_number");
    openapiRequiredFields.add("tracking_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTrackingLogResponseBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTrackingLogResponseBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTrackingLogResponseBody is not found in the empty JSON string", GetTrackingLogResponseBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTrackingLogResponseBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTrackingLogResponseBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetTrackingLogResponseBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("carrier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_code").toString()));
      }
      if (!jsonObj.get("carrier_detail_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_detail_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_detail_code").toString()));
      }
      if (!jsonObj.get("carrier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_id").toString()));
      }
      if (!jsonObj.get("carrier_status_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_status_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_status_code").toString()));
      }
      if ((jsonObj.get("carrier_status_description") != null && !jsonObj.get("carrier_status_description").isJsonNull()) && !jsonObj.get("carrier_status_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_status_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_status_description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }

      JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
      // validate the required field `events` (array)
      for (int i = 0; i < jsonArrayevents.size(); i++) {
        TrackEvent.validateJsonElement(jsonArrayevents.get(i));
      };
      if ((jsonObj.get("exception_description") != null && !jsonObj.get("exception_description").isJsonNull()) && !jsonObj.get("exception_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exception_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exception_description").toString()));
      }
      // validate the required field `status_code`
      StatusCode.validateJsonElement(jsonObj.get("status_code"));
      if ((jsonObj.get("status_description") != null && !jsonObj.get("status_description").isJsonNull()) && !jsonObj.get("status_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_description").toString()));
      }
      if (!jsonObj.get("tracking_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_number").toString()));
      }
      if (!jsonObj.get("tracking_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTrackingLogResponseBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTrackingLogResponseBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTrackingLogResponseBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTrackingLogResponseBody.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTrackingLogResponseBody>() {
           @Override
           public void write(JsonWriter out, GetTrackingLogResponseBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTrackingLogResponseBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTrackingLogResponseBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTrackingLogResponseBody
   * @throws IOException if the JSON string is invalid with respect to GetTrackingLogResponseBody
   */
  public static GetTrackingLogResponseBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTrackingLogResponseBody.class);
  }

  /**
   * Convert an instance of GetTrackingLogResponseBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

