/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AddressResidentialIndicator;
import org.openapitools.client.model.DeliveryConfirmation;
import org.openapitools.client.model.Dimensions;
import org.openapitools.client.model.Weight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RateEstimateOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RateEstimateOptions {
  public static final String SERIALIZED_NAME_ADDRESS_RESIDENTIAL_INDICATOR = "address_residential_indicator";
  @SerializedName(SERIALIZED_NAME_ADDRESS_RESIDENTIAL_INDICATOR)
  private AddressResidentialIndicator addressResidentialIndicator;

  public static final String SERIALIZED_NAME_CONFIRMATION = "confirmation";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION)
  private DeliveryConfirmation confirmation;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_FROM_CITY_LOCALITY = "from_city_locality";
  @SerializedName(SERIALIZED_NAME_FROM_CITY_LOCALITY)
  private String fromCityLocality;

  public static final String SERIALIZED_NAME_FROM_COUNTRY_CODE = "from_country_code";
  @SerializedName(SERIALIZED_NAME_FROM_COUNTRY_CODE)
  private String fromCountryCode;

  public static final String SERIALIZED_NAME_FROM_POSTAL_CODE = "from_postal_code";
  @SerializedName(SERIALIZED_NAME_FROM_POSTAL_CODE)
  private String fromPostalCode;

  public static final String SERIALIZED_NAME_FROM_STATE_PROVINCE = "from_state_province";
  @SerializedName(SERIALIZED_NAME_FROM_STATE_PROVINCE)
  private String fromStateProvince;

  public static final String SERIALIZED_NAME_SHIP_DATE = "ship_date";
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public static final String SERIALIZED_NAME_TO_CITY_LOCALITY = "to_city_locality";
  @SerializedName(SERIALIZED_NAME_TO_CITY_LOCALITY)
  private String toCityLocality;

  public static final String SERIALIZED_NAME_TO_COUNTRY_CODE = "to_country_code";
  @SerializedName(SERIALIZED_NAME_TO_COUNTRY_CODE)
  private String toCountryCode;

  public static final String SERIALIZED_NAME_TO_POSTAL_CODE = "to_postal_code";
  @SerializedName(SERIALIZED_NAME_TO_POSTAL_CODE)
  private String toPostalCode;

  public static final String SERIALIZED_NAME_TO_STATE_PROVINCE = "to_state_province";
  @SerializedName(SERIALIZED_NAME_TO_STATE_PROVINCE)
  private String toStateProvince;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Weight weight;

  public RateEstimateOptions() {
  }

  public RateEstimateOptions addressResidentialIndicator(AddressResidentialIndicator addressResidentialIndicator) {
    this.addressResidentialIndicator = addressResidentialIndicator;
    return this;
  }

  /**
   * Get addressResidentialIndicator
   * @return addressResidentialIndicator
   */
  @javax.annotation.Nullable
  public AddressResidentialIndicator getAddressResidentialIndicator() {
    return addressResidentialIndicator;
  }

  public void setAddressResidentialIndicator(AddressResidentialIndicator addressResidentialIndicator) {
    this.addressResidentialIndicator = addressResidentialIndicator;
  }


  public RateEstimateOptions confirmation(DeliveryConfirmation confirmation) {
    this.confirmation = confirmation;
    return this;
  }

  /**
   * Get confirmation
   * @return confirmation
   */
  @javax.annotation.Nullable
  public DeliveryConfirmation getConfirmation() {
    return confirmation;
  }

  public void setConfirmation(DeliveryConfirmation confirmation) {
    this.confirmation = confirmation;
  }


  public RateEstimateOptions dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * The dimensions of the package
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  public RateEstimateOptions fromCityLocality(String fromCityLocality) {
    this.fromCityLocality = fromCityLocality;
    return this;
  }

  /**
   * from postal code
   * @return fromCityLocality
   */
  @javax.annotation.Nullable
  public String getFromCityLocality() {
    return fromCityLocality;
  }

  public void setFromCityLocality(String fromCityLocality) {
    this.fromCityLocality = fromCityLocality;
  }


  public RateEstimateOptions fromCountryCode(String fromCountryCode) {
    this.fromCountryCode = fromCountryCode;
    return this;
  }

  /**
   * A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 
   * @return fromCountryCode
   */
  @javax.annotation.Nullable
  public String getFromCountryCode() {
    return fromCountryCode;
  }

  public void setFromCountryCode(String fromCountryCode) {
    this.fromCountryCode = fromCountryCode;
  }


  public RateEstimateOptions fromPostalCode(String fromPostalCode) {
    this.fromPostalCode = fromPostalCode;
    return this;
  }

  /**
   * postal code
   * @return fromPostalCode
   */
  @javax.annotation.Nullable
  public String getFromPostalCode() {
    return fromPostalCode;
  }

  public void setFromPostalCode(String fromPostalCode) {
    this.fromPostalCode = fromPostalCode;
  }


  public RateEstimateOptions fromStateProvince(String fromStateProvince) {
    this.fromStateProvince = fromStateProvince;
    return this;
  }

  /**
   * From state province
   * @return fromStateProvince
   */
  @javax.annotation.Nullable
  public String getFromStateProvince() {
    return fromStateProvince;
  }

  public void setFromStateProvince(String fromStateProvince) {
    this.fromStateProvince = fromStateProvince;
  }


  public RateEstimateOptions shipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
    return this;
  }

  /**
   * ship date
   * @return shipDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShipDate() {
    return shipDate;
  }

  public void setShipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
  }


  public RateEstimateOptions toCityLocality(String toCityLocality) {
    this.toCityLocality = toCityLocality;
    return this;
  }

  /**
   * The city locality the package is being shipped to
   * @return toCityLocality
   */
  @javax.annotation.Nullable
  public String getToCityLocality() {
    return toCityLocality;
  }

  public void setToCityLocality(String toCityLocality) {
    this.toCityLocality = toCityLocality;
  }


  public RateEstimateOptions toCountryCode(String toCountryCode) {
    this.toCountryCode = toCountryCode;
    return this;
  }

  /**
   * A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 
   * @return toCountryCode
   */
  @javax.annotation.Nullable
  public String getToCountryCode() {
    return toCountryCode;
  }

  public void setToCountryCode(String toCountryCode) {
    this.toCountryCode = toCountryCode;
  }


  public RateEstimateOptions toPostalCode(String toPostalCode) {
    this.toPostalCode = toPostalCode;
    return this;
  }

  /**
   * postal code
   * @return toPostalCode
   */
  @javax.annotation.Nullable
  public String getToPostalCode() {
    return toPostalCode;
  }

  public void setToPostalCode(String toPostalCode) {
    this.toPostalCode = toPostalCode;
  }


  public RateEstimateOptions toStateProvince(String toStateProvince) {
    this.toStateProvince = toStateProvince;
    return this;
  }

  /**
   * To state province
   * @return toStateProvince
   */
  @javax.annotation.Nullable
  public String getToStateProvince() {
    return toStateProvince;
  }

  public void setToStateProvince(String toStateProvince) {
    this.toStateProvince = toStateProvince;
  }


  public RateEstimateOptions weight(Weight weight) {
    this.weight = weight;
    return this;
  }

  /**
   * The weight of the package
   * @return weight
   */
  @javax.annotation.Nullable
  public Weight getWeight() {
    return weight;
  }

  public void setWeight(Weight weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateEstimateOptions rateEstimateOptions = (RateEstimateOptions) o;
    return Objects.equals(this.addressResidentialIndicator, rateEstimateOptions.addressResidentialIndicator) &&
        Objects.equals(this.confirmation, rateEstimateOptions.confirmation) &&
        Objects.equals(this.dimensions, rateEstimateOptions.dimensions) &&
        Objects.equals(this.fromCityLocality, rateEstimateOptions.fromCityLocality) &&
        Objects.equals(this.fromCountryCode, rateEstimateOptions.fromCountryCode) &&
        Objects.equals(this.fromPostalCode, rateEstimateOptions.fromPostalCode) &&
        Objects.equals(this.fromStateProvince, rateEstimateOptions.fromStateProvince) &&
        Objects.equals(this.shipDate, rateEstimateOptions.shipDate) &&
        Objects.equals(this.toCityLocality, rateEstimateOptions.toCityLocality) &&
        Objects.equals(this.toCountryCode, rateEstimateOptions.toCountryCode) &&
        Objects.equals(this.toPostalCode, rateEstimateOptions.toPostalCode) &&
        Objects.equals(this.toStateProvince, rateEstimateOptions.toStateProvince) &&
        Objects.equals(this.weight, rateEstimateOptions.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressResidentialIndicator, confirmation, dimensions, fromCityLocality, fromCountryCode, fromPostalCode, fromStateProvince, shipDate, toCityLocality, toCountryCode, toPostalCode, toStateProvince, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateEstimateOptions {\n");
    sb.append("    addressResidentialIndicator: ").append(toIndentedString(addressResidentialIndicator)).append("\n");
    sb.append("    confirmation: ").append(toIndentedString(confirmation)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    fromCityLocality: ").append(toIndentedString(fromCityLocality)).append("\n");
    sb.append("    fromCountryCode: ").append(toIndentedString(fromCountryCode)).append("\n");
    sb.append("    fromPostalCode: ").append(toIndentedString(fromPostalCode)).append("\n");
    sb.append("    fromStateProvince: ").append(toIndentedString(fromStateProvince)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    toCityLocality: ").append(toIndentedString(toCityLocality)).append("\n");
    sb.append("    toCountryCode: ").append(toIndentedString(toCountryCode)).append("\n");
    sb.append("    toPostalCode: ").append(toIndentedString(toPostalCode)).append("\n");
    sb.append("    toStateProvince: ").append(toIndentedString(toStateProvince)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_residential_indicator");
    openapiFields.add("confirmation");
    openapiFields.add("dimensions");
    openapiFields.add("from_city_locality");
    openapiFields.add("from_country_code");
    openapiFields.add("from_postal_code");
    openapiFields.add("from_state_province");
    openapiFields.add("ship_date");
    openapiFields.add("to_city_locality");
    openapiFields.add("to_country_code");
    openapiFields.add("to_postal_code");
    openapiFields.add("to_state_province");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RateEstimateOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RateEstimateOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateEstimateOptions is not found in the empty JSON string", RateEstimateOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RateEstimateOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateEstimateOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address_residential_indicator`
      if (jsonObj.get("address_residential_indicator") != null && !jsonObj.get("address_residential_indicator").isJsonNull()) {
        AddressResidentialIndicator.validateJsonElement(jsonObj.get("address_residential_indicator"));
      }
      // validate the optional field `confirmation`
      if (jsonObj.get("confirmation") != null && !jsonObj.get("confirmation").isJsonNull()) {
        DeliveryConfirmation.validateJsonElement(jsonObj.get("confirmation"));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Dimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      if ((jsonObj.get("from_city_locality") != null && !jsonObj.get("from_city_locality").isJsonNull()) && !jsonObj.get("from_city_locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_city_locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_city_locality").toString()));
      }
      if ((jsonObj.get("from_country_code") != null && !jsonObj.get("from_country_code").isJsonNull()) && !jsonObj.get("from_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_country_code").toString()));
      }
      if ((jsonObj.get("from_postal_code") != null && !jsonObj.get("from_postal_code").isJsonNull()) && !jsonObj.get("from_postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_postal_code").toString()));
      }
      if ((jsonObj.get("from_state_province") != null && !jsonObj.get("from_state_province").isJsonNull()) && !jsonObj.get("from_state_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_state_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_state_province").toString()));
      }
      if ((jsonObj.get("to_city_locality") != null && !jsonObj.get("to_city_locality").isJsonNull()) && !jsonObj.get("to_city_locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_city_locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_city_locality").toString()));
      }
      if ((jsonObj.get("to_country_code") != null && !jsonObj.get("to_country_code").isJsonNull()) && !jsonObj.get("to_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_country_code").toString()));
      }
      if ((jsonObj.get("to_postal_code") != null && !jsonObj.get("to_postal_code").isJsonNull()) && !jsonObj.get("to_postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_postal_code").toString()));
      }
      if ((jsonObj.get("to_state_province") != null && !jsonObj.get("to_state_province").isJsonNull()) && !jsonObj.get("to_state_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_state_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_state_province").toString()));
      }
      // validate the optional field `weight`
      if (jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) {
        Weight.validateJsonElement(jsonObj.get("weight"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateEstimateOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateEstimateOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateEstimateOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateEstimateOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<RateEstimateOptions>() {
           @Override
           public void write(JsonWriter out, RateEstimateOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateEstimateOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RateEstimateOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RateEstimateOptions
   * @throws IOException if the JSON string is invalid with respect to RateEstimateOptions
   */
  public static RateEstimateOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateEstimateOptions.class);
  }

  /**
   * Convert an instance of RateEstimateOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

