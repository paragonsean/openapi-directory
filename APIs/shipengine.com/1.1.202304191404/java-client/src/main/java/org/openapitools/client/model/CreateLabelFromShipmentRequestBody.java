/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DisplayScheme;
import org.openapitools.client.model.LabelDownloadType;
import org.openapitools.client.model.LabelFormat;
import org.openapitools.client.model.LabelLayout;
import org.openapitools.client.model.ValidateAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A purchase label without shipment request body
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLabelFromShipmentRequestBody {
  public static final String SERIALIZED_NAME_DISPLAY_SCHEME = "display_scheme";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SCHEME)
  private DisplayScheme displayScheme = DisplayScheme.LABEL;

  public static final String SERIALIZED_NAME_LABEL_DOWNLOAD_TYPE = "label_download_type";
  @SerializedName(SERIALIZED_NAME_LABEL_DOWNLOAD_TYPE)
  private LabelDownloadType labelDownloadType;

  public static final String SERIALIZED_NAME_LABEL_FORMAT = "label_format";
  @SerializedName(SERIALIZED_NAME_LABEL_FORMAT)
  private LabelFormat labelFormat = LabelFormat.PDF;

  public static final String SERIALIZED_NAME_LABEL_LAYOUT = "label_layout";
  @SerializedName(SERIALIZED_NAME_LABEL_LAYOUT)
  private LabelLayout labelLayout = LabelLayout._4X6;

  public static final String SERIALIZED_NAME_VALIDATE_ADDRESS = "validate_address";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ADDRESS)
  private ValidateAddress validateAddress;

  public CreateLabelFromShipmentRequestBody() {
  }

  public CreateLabelFromShipmentRequestBody displayScheme(DisplayScheme displayScheme) {
    this.displayScheme = displayScheme;
    return this;
  }

  /**
   * The display format that the label should be shown in.
   * @return displayScheme
   */
  @javax.annotation.Nullable
  public DisplayScheme getDisplayScheme() {
    return displayScheme;
  }

  public void setDisplayScheme(DisplayScheme displayScheme) {
    this.displayScheme = displayScheme;
  }


  public CreateLabelFromShipmentRequestBody labelDownloadType(LabelDownloadType labelDownloadType) {
    this.labelDownloadType = labelDownloadType;
    return this;
  }

  /**
   * Get labelDownloadType
   * @return labelDownloadType
   */
  @javax.annotation.Nullable
  public LabelDownloadType getLabelDownloadType() {
    return labelDownloadType;
  }

  public void setLabelDownloadType(LabelDownloadType labelDownloadType) {
    this.labelDownloadType = labelDownloadType;
  }


  public CreateLabelFromShipmentRequestBody labelFormat(LabelFormat labelFormat) {
    this.labelFormat = labelFormat;
    return this;
  }

  /**
   * Get labelFormat
   * @return labelFormat
   */
  @javax.annotation.Nullable
  public LabelFormat getLabelFormat() {
    return labelFormat;
  }

  public void setLabelFormat(LabelFormat labelFormat) {
    this.labelFormat = labelFormat;
  }


  public CreateLabelFromShipmentRequestBody labelLayout(LabelLayout labelLayout) {
    this.labelLayout = labelLayout;
    return this;
  }

  /**
   * Get labelLayout
   * @return labelLayout
   */
  @javax.annotation.Nullable
  public LabelLayout getLabelLayout() {
    return labelLayout;
  }

  public void setLabelLayout(LabelLayout labelLayout) {
    this.labelLayout = labelLayout;
  }


  public CreateLabelFromShipmentRequestBody validateAddress(ValidateAddress validateAddress) {
    this.validateAddress = validateAddress;
    return this;
  }

  /**
   * Get validateAddress
   * @return validateAddress
   */
  @javax.annotation.Nullable
  public ValidateAddress getValidateAddress() {
    return validateAddress;
  }

  public void setValidateAddress(ValidateAddress validateAddress) {
    this.validateAddress = validateAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody = (CreateLabelFromShipmentRequestBody) o;
    return Objects.equals(this.displayScheme, createLabelFromShipmentRequestBody.displayScheme) &&
        Objects.equals(this.labelDownloadType, createLabelFromShipmentRequestBody.labelDownloadType) &&
        Objects.equals(this.labelFormat, createLabelFromShipmentRequestBody.labelFormat) &&
        Objects.equals(this.labelLayout, createLabelFromShipmentRequestBody.labelLayout) &&
        Objects.equals(this.validateAddress, createLabelFromShipmentRequestBody.validateAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayScheme, labelDownloadType, labelFormat, labelLayout, validateAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLabelFromShipmentRequestBody {\n");
    sb.append("    displayScheme: ").append(toIndentedString(displayScheme)).append("\n");
    sb.append("    labelDownloadType: ").append(toIndentedString(labelDownloadType)).append("\n");
    sb.append("    labelFormat: ").append(toIndentedString(labelFormat)).append("\n");
    sb.append("    labelLayout: ").append(toIndentedString(labelLayout)).append("\n");
    sb.append("    validateAddress: ").append(toIndentedString(validateAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display_scheme");
    openapiFields.add("label_download_type");
    openapiFields.add("label_format");
    openapiFields.add("label_layout");
    openapiFields.add("validate_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLabelFromShipmentRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLabelFromShipmentRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLabelFromShipmentRequestBody is not found in the empty JSON string", CreateLabelFromShipmentRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLabelFromShipmentRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLabelFromShipmentRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `display_scheme`
      if (jsonObj.get("display_scheme") != null && !jsonObj.get("display_scheme").isJsonNull()) {
        DisplayScheme.validateJsonElement(jsonObj.get("display_scheme"));
      }
      // validate the optional field `label_download_type`
      if (jsonObj.get("label_download_type") != null && !jsonObj.get("label_download_type").isJsonNull()) {
        LabelDownloadType.validateJsonElement(jsonObj.get("label_download_type"));
      }
      // validate the optional field `label_format`
      if (jsonObj.get("label_format") != null && !jsonObj.get("label_format").isJsonNull()) {
        LabelFormat.validateJsonElement(jsonObj.get("label_format"));
      }
      // validate the optional field `label_layout`
      if (jsonObj.get("label_layout") != null && !jsonObj.get("label_layout").isJsonNull()) {
        LabelLayout.validateJsonElement(jsonObj.get("label_layout"));
      }
      // validate the optional field `validate_address`
      if (jsonObj.get("validate_address") != null && !jsonObj.get("validate_address").isJsonNull()) {
        ValidateAddress.validateJsonElement(jsonObj.get("validate_address"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLabelFromShipmentRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLabelFromShipmentRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLabelFromShipmentRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLabelFromShipmentRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLabelFromShipmentRequestBody>() {
           @Override
           public void write(JsonWriter out, CreateLabelFromShipmentRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLabelFromShipmentRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLabelFromShipmentRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLabelFromShipmentRequestBody
   * @throws IOException if the JSON string is invalid with respect to CreateLabelFromShipmentRequestBody
   */
  public static CreateLabelFromShipmentRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLabelFromShipmentRequestBody.class);
  }

  /**
   * Convert an instance of CreateLabelFromShipmentRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

