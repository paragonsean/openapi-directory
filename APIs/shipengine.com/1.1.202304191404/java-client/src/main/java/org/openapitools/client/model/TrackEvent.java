/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StatusCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A track event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrackEvent {
  public static final String SERIALIZED_NAME_CARRIER_DETAIL_CODE = "carrier_detail_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_DETAIL_CODE)
  private String carrierDetailCode;

  public static final String SERIALIZED_NAME_CARRIER_OCCURRED_AT = "carrier_occurred_at";
  @SerializedName(SERIALIZED_NAME_CARRIER_OCCURRED_AT)
  private OffsetDateTime carrierOccurredAt;

  public static final String SERIALIZED_NAME_CARRIER_STATUS_CODE = "carrier_status_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_STATUS_CODE)
  private String carrierStatusCode;

  public static final String SERIALIZED_NAME_CARRIER_STATUS_DESCRIPTION = "carrier_status_description";
  @SerializedName(SERIALIZED_NAME_CARRIER_STATUS_DESCRIPTION)
  private String carrierStatusDescription;

  public static final String SERIALIZED_NAME_CITY_LOCALITY = "city_locality";
  @SerializedName(SERIALIZED_NAME_CITY_LOCALITY)
  private String cityLocality;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_CODE = "event_code";
  @SerializedName(SERIALIZED_NAME_EVENT_CODE)
  private String eventCode;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurred_at";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private OffsetDateTime occurredAt;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_SIGNER = "signer";
  @SerializedName(SERIALIZED_NAME_SIGNER)
  private String signer;

  public static final String SERIALIZED_NAME_STATE_PROVINCE = "state_province";
  @SerializedName(SERIALIZED_NAME_STATE_PROVINCE)
  private String stateProvince;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StatusCode statusCode;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "status_description";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public TrackEvent() {
  }

  public TrackEvent(
     String carrierDetailCode, 
     String carrierStatusCode, 
     String carrierStatusDescription, 
     String cityLocality, 
     String companyName, 
     String description, 
     String postalCode, 
     String signer, 
     String stateProvince, 
     String statusDescription
  ) {
    this();
    this.carrierDetailCode = carrierDetailCode;
    this.carrierStatusCode = carrierStatusCode;
    this.carrierStatusDescription = carrierStatusDescription;
    this.cityLocality = cityLocality;
    this.companyName = companyName;
    this.description = description;
    this.postalCode = postalCode;
    this.signer = signer;
    this.stateProvince = stateProvince;
    this.statusDescription = statusDescription;
  }

  /**
   * Carrier detail code
   * @return carrierDetailCode
   */
  @javax.annotation.Nonnull
  public String getCarrierDetailCode() {
    return carrierDetailCode;
  }



  public TrackEvent carrierOccurredAt(OffsetDateTime carrierOccurredAt) {
    this.carrierOccurredAt = carrierOccurredAt;
    return this;
  }

  /**
   * Carrier timestamp for the event, it is assumed to be the local time of where the event occurred.
   * @return carrierOccurredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCarrierOccurredAt() {
    return carrierOccurredAt;
  }

  public void setCarrierOccurredAt(OffsetDateTime carrierOccurredAt) {
    this.carrierOccurredAt = carrierOccurredAt;
  }


  /**
   * Carrier status code
   * @return carrierStatusCode
   */
  @javax.annotation.Nonnull
  public String getCarrierStatusCode() {
    return carrierStatusCode;
  }



  /**
   * carrier status description
   * @return carrierStatusDescription
   */
  @javax.annotation.Nonnull
  public String getCarrierStatusDescription() {
    return carrierStatusDescription;
  }



  /**
   * City locality
   * @return cityLocality
   */
  @javax.annotation.Nonnull
  public String getCityLocality() {
    return cityLocality;
  }



  /**
   * Company Name
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }



  public TrackEvent countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  /**
   * Event description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  public TrackEvent eventCode(String eventCode) {
    this.eventCode = eventCode;
    return this;
  }

  /**
   * Event Code
   * @return eventCode
   */
  @javax.annotation.Nullable
  public String getEventCode() {
    return eventCode;
  }

  public void setEventCode(String eventCode) {
    this.eventCode = eventCode;
  }


  public TrackEvent latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Latitude coordinate of tracking event.
   * minimum: -90
   * maximum: 90
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public TrackEvent longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Longitude coordinate of tracking event.
   * minimum: -180
   * maximum: 180
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public TrackEvent occurredAt(OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * Timestamp for carrier event
   * @return occurredAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getOccurredAt() {
    return occurredAt;
  }

  public void setOccurredAt(OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
  }


  /**
   * Postal code
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }



  /**
   * Signer information
   * @return signer
   */
  @javax.annotation.Nullable
  public String getSigner() {
    return signer;
  }



  /**
   * State province
   * @return stateProvince
   */
  @javax.annotation.Nonnull
  public String getStateProvince() {
    return stateProvince;
  }



  public TrackEvent statusCode(StatusCode statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nonnull
  public StatusCode getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StatusCode statusCode) {
    this.statusCode = statusCode;
  }


  /**
   * Event Status Description
   * @return statusDescription
   */
  @javax.annotation.Nonnull
  public String getStatusDescription() {
    return statusDescription;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackEvent trackEvent = (TrackEvent) o;
    return Objects.equals(this.carrierDetailCode, trackEvent.carrierDetailCode) &&
        Objects.equals(this.carrierOccurredAt, trackEvent.carrierOccurredAt) &&
        Objects.equals(this.carrierStatusCode, trackEvent.carrierStatusCode) &&
        Objects.equals(this.carrierStatusDescription, trackEvent.carrierStatusDescription) &&
        Objects.equals(this.cityLocality, trackEvent.cityLocality) &&
        Objects.equals(this.companyName, trackEvent.companyName) &&
        Objects.equals(this.countryCode, trackEvent.countryCode) &&
        Objects.equals(this.description, trackEvent.description) &&
        Objects.equals(this.eventCode, trackEvent.eventCode) &&
        Objects.equals(this.latitude, trackEvent.latitude) &&
        Objects.equals(this.longitude, trackEvent.longitude) &&
        Objects.equals(this.occurredAt, trackEvent.occurredAt) &&
        Objects.equals(this.postalCode, trackEvent.postalCode) &&
        Objects.equals(this.signer, trackEvent.signer) &&
        Objects.equals(this.stateProvince, trackEvent.stateProvince) &&
        Objects.equals(this.statusCode, trackEvent.statusCode) &&
        Objects.equals(this.statusDescription, trackEvent.statusDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierDetailCode, carrierOccurredAt, carrierStatusCode, carrierStatusDescription, cityLocality, companyName, countryCode, description, eventCode, latitude, longitude, occurredAt, postalCode, signer, stateProvince, statusCode, statusDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackEvent {\n");
    sb.append("    carrierDetailCode: ").append(toIndentedString(carrierDetailCode)).append("\n");
    sb.append("    carrierOccurredAt: ").append(toIndentedString(carrierOccurredAt)).append("\n");
    sb.append("    carrierStatusCode: ").append(toIndentedString(carrierStatusCode)).append("\n");
    sb.append("    carrierStatusDescription: ").append(toIndentedString(carrierStatusDescription)).append("\n");
    sb.append("    cityLocality: ").append(toIndentedString(cityLocality)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    signer: ").append(toIndentedString(signer)).append("\n");
    sb.append("    stateProvince: ").append(toIndentedString(stateProvince)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carrier_detail_code");
    openapiFields.add("carrier_occurred_at");
    openapiFields.add("carrier_status_code");
    openapiFields.add("carrier_status_description");
    openapiFields.add("city_locality");
    openapiFields.add("company_name");
    openapiFields.add("country_code");
    openapiFields.add("description");
    openapiFields.add("event_code");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("occurred_at");
    openapiFields.add("postal_code");
    openapiFields.add("signer");
    openapiFields.add("state_province");
    openapiFields.add("status_code");
    openapiFields.add("status_description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("carrier_detail_code");
    openapiRequiredFields.add("carrier_status_code");
    openapiRequiredFields.add("carrier_status_description");
    openapiRequiredFields.add("city_locality");
    openapiRequiredFields.add("occurred_at");
    openapiRequiredFields.add("postal_code");
    openapiRequiredFields.add("state_province");
    openapiRequiredFields.add("status_code");
    openapiRequiredFields.add("status_description");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrackEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrackEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackEvent is not found in the empty JSON string", TrackEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrackEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrackEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("carrier_detail_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_detail_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_detail_code").toString()));
      }
      if (!jsonObj.get("carrier_status_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_status_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_status_code").toString()));
      }
      if (!jsonObj.get("carrier_status_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_status_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_status_description").toString()));
      }
      if (!jsonObj.get("city_locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city_locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city_locality").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("event_code") != null && !jsonObj.get("event_code").isJsonNull()) && !jsonObj.get("event_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_code").toString()));
      }
      if (!jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("signer") != null && !jsonObj.get("signer").isJsonNull()) && !jsonObj.get("signer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signer").toString()));
      }
      if (!jsonObj.get("state_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_province").toString()));
      }
      // validate the required field `status_code`
      StatusCode.validateJsonElement(jsonObj.get("status_code"));
      if (!jsonObj.get("status_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackEvent>() {
           @Override
           public void write(JsonWriter out, TrackEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrackEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrackEvent
   * @throws IOException if the JSON string is invalid with respect to TrackEvent
   */
  public static TrackEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackEvent.class);
  }

  /**
   * Convert an instance of TrackEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

