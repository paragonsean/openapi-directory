/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdvancedShipmentOptions;
import org.openapitools.client.model.DeliveryConfirmation;
import org.openapitools.client.model.InsuranceProvider;
import org.openapitools.client.model.InternationalShipmentOptions;
import org.openapitools.client.model.ModelPackage;
import org.openapitools.client.model.OrderSourceName;
import org.openapitools.client.model.OriginType;
import org.openapitools.client.model.ShipmentItem;
import org.openapitools.client.model.ShipmentStatus;
import org.openapitools.client.model.ShippingAddress;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TaxIdentifier;
import org.openapitools.client.model.ValidateAddress;
import org.openapitools.client.model.Weight;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An update shipment request body
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:16.939652-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateShipmentRequestBody {
  public static final String SERIALIZED_NAME_ADVANCED_OPTIONS = "advanced_options";
  @SerializedName(SERIALIZED_NAME_ADVANCED_OPTIONS)
  private AdvancedShipmentOptions advancedOptions;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrier_id";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_CONFIRMATION = "confirmation";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION)
  private DeliveryConfirmation confirmation = DeliveryConfirmation.NONE;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CUSTOMS = "customs";
  @SerializedName(SERIALIZED_NAME_CUSTOMS)
  private InternationalShipmentOptions customs;

  public static final String SERIALIZED_NAME_EXTERNAL_ORDER_ID = "external_order_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ORDER_ID)
  private String externalOrderId;

  public static final String SERIALIZED_NAME_EXTERNAL_SHIPMENT_ID = "external_shipment_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SHIPMENT_ID)
  private String externalShipmentId;

  public static final String SERIALIZED_NAME_INSURANCE_PROVIDER = "insurance_provider";
  @SerializedName(SERIALIZED_NAME_INSURANCE_PROVIDER)
  private InsuranceProvider insuranceProvider = InsuranceProvider.NONE;

  public static final String SERIALIZED_NAME_IS_RETURN = "is_return";
  @SerializedName(SERIALIZED_NAME_IS_RETURN)
  private Boolean isReturn = false;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<ShipmentItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_ORDER_SOURCE_CODE = "order_source_code";
  @SerializedName(SERIALIZED_NAME_ORDER_SOURCE_CODE)
  private OrderSourceName orderSourceCode;

  public static final String SERIALIZED_NAME_ORIGIN_TYPE = "origin_type";
  @SerializedName(SERIALIZED_NAME_ORIGIN_TYPE)
  private OriginType originType;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<ModelPackage> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_TO = "return_to";
  @SerializedName(SERIALIZED_NAME_RETURN_TO)
  private ShippingAddress returnTo;

  public static final String SERIALIZED_NAME_SERVICE_CODE = "service_code";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODE)
  private String serviceCode;

  public static final String SERIALIZED_NAME_SHIP_DATE = "ship_date";
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public static final String SERIALIZED_NAME_SHIP_FROM = "ship_from";
  @SerializedName(SERIALIZED_NAME_SHIP_FROM)
  private ShippingAddress shipFrom;

  public static final String SERIALIZED_NAME_SHIP_TO = "ship_to";
  @SerializedName(SERIALIZED_NAME_SHIP_TO)
  private ShippingAddress shipTo;

  public static final String SERIALIZED_NAME_SHIPMENT_ID = "shipment_id";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_ID)
  private String shipmentId;

  public static final String SERIALIZED_NAME_SHIPMENT_NUMBER = "shipment_number";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_NUMBER)
  private String shipmentNumber;

  public static final String SERIALIZED_NAME_SHIPMENT_STATUS = "shipment_status";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_STATUS)
  private ShipmentStatus shipmentStatus = ShipmentStatus.PENDING;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_IDENTIFIERS = "tax_identifiers";
  @SerializedName(SERIALIZED_NAME_TAX_IDENTIFIERS)
  private List<TaxIdentifier> taxIdentifiers;

  public static final String SERIALIZED_NAME_TOTAL_WEIGHT = "total_weight";
  @SerializedName(SERIALIZED_NAME_TOTAL_WEIGHT)
  private Weight totalWeight;

  public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouse_id";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
  private String warehouseId;

  public static final String SERIALIZED_NAME_VALIDATE_ADDRESS = "validate_address";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ADDRESS)
  private ValidateAddress validateAddress = ValidateAddress.NO_VALIDATION;

  public UpdateShipmentRequestBody() {
  }

  public UpdateShipmentRequestBody(
     OffsetDateTime createdAt, 
     OffsetDateTime modifiedAt, 
     String shipmentId, 
     ShipmentStatus shipmentStatus, 
     List<Tag> tags, 
     Weight totalWeight
  ) {
    this();
    this.createdAt = createdAt;
    this.modifiedAt = modifiedAt;
    this.shipmentId = shipmentId;
    this.shipmentStatus = shipmentStatus;
    this.tags = tags;
    this.totalWeight = totalWeight;
  }

  public UpdateShipmentRequestBody advancedOptions(AdvancedShipmentOptions advancedOptions) {
    this.advancedOptions = advancedOptions;
    return this;
  }

  /**
   * Advanced shipment options.  These are entirely optional.
   * @return advancedOptions
   */
  @javax.annotation.Nullable
  public AdvancedShipmentOptions getAdvancedOptions() {
    return advancedOptions;
  }

  public void setAdvancedOptions(AdvancedShipmentOptions advancedOptions) {
    this.advancedOptions = advancedOptions;
  }


  public UpdateShipmentRequestBody carrierId(String carrierId) {
    this.carrierId = carrierId;
    return this;
  }

  /**
   * The carrier account that is billed for the shipping charges
   * @return carrierId
   */
  @javax.annotation.Nullable
  public String getCarrierId() {
    return carrierId;
  }

  public void setCarrierId(String carrierId) {
    this.carrierId = carrierId;
  }


  public UpdateShipmentRequestBody confirmation(DeliveryConfirmation confirmation) {
    this.confirmation = confirmation;
    return this;
  }

  /**
   * The type of delivery confirmation that is required for this shipment.
   * @return confirmation
   */
  @javax.annotation.Nullable
  public DeliveryConfirmation getConfirmation() {
    return confirmation;
  }

  public void setConfirmation(DeliveryConfirmation confirmation) {
    this.confirmation = confirmation;
  }


  /**
   * The date and time that the shipment was created in ShipEngine.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public UpdateShipmentRequestBody customs(InternationalShipmentOptions customs) {
    this.customs = customs;
    return this;
  }

  /**
   * Customs information.  This is usually only needed for international shipments. 
   * @return customs
   */
  @javax.annotation.Nullable
  public InternationalShipmentOptions getCustoms() {
    return customs;
  }

  public void setCustoms(InternationalShipmentOptions customs) {
    this.customs = customs;
  }


  public UpdateShipmentRequestBody externalOrderId(String externalOrderId) {
    this.externalOrderId = externalOrderId;
    return this;
  }

  /**
   * ID that the Order Source assigned
   * @return externalOrderId
   */
  @javax.annotation.Nullable
  public String getExternalOrderId() {
    return externalOrderId;
  }

  public void setExternalOrderId(String externalOrderId) {
    this.externalOrderId = externalOrderId;
  }


  public UpdateShipmentRequestBody externalShipmentId(String externalShipmentId) {
    this.externalShipmentId = externalShipmentId;
    return this;
  }

  /**
   * A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.  &gt; **Warning:** The &#x60;external_shipment_id&#x60; is limited to 50 characters. Any additional characters will be truncated. 
   * @return externalShipmentId
   */
  @javax.annotation.Nullable
  public String getExternalShipmentId() {
    return externalShipmentId;
  }

  public void setExternalShipmentId(String externalShipmentId) {
    this.externalShipmentId = externalShipmentId;
  }


  public UpdateShipmentRequestBody insuranceProvider(InsuranceProvider insuranceProvider) {
    this.insuranceProvider = insuranceProvider;
    return this;
  }

  /**
   * The insurance provider to use for any insured packages in the shipment. 
   * @return insuranceProvider
   */
  @javax.annotation.Nullable
  public InsuranceProvider getInsuranceProvider() {
    return insuranceProvider;
  }

  public void setInsuranceProvider(InsuranceProvider insuranceProvider) {
    this.insuranceProvider = insuranceProvider;
  }


  public UpdateShipmentRequestBody isReturn(Boolean isReturn) {
    this.isReturn = isReturn;
    return this;
  }

  /**
   * An optional indicator if the shipment is intended to be a return. Defaults to false if not provided. 
   * @return isReturn
   */
  @javax.annotation.Nullable
  public Boolean getIsReturn() {
    return isReturn;
  }

  public void setIsReturn(Boolean isReturn) {
    this.isReturn = isReturn;
  }


  public UpdateShipmentRequestBody items(List<ShipmentItem> items) {
    this.items = items;
    return this;
  }

  public UpdateShipmentRequestBody addItemsItem(ShipmentItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Describe the packages included in this shipment as related to potential metadata that was imported from external order sources 
   * @return items
   */
  @javax.annotation.Nullable
  public List<ShipmentItem> getItems() {
    return items;
  }

  public void setItems(List<ShipmentItem> items) {
    this.items = items;
  }


  /**
   * The date and time that the shipment was created or last modified.
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }



  public UpdateShipmentRequestBody orderSourceCode(OrderSourceName orderSourceCode) {
    this.orderSourceCode = orderSourceCode;
    return this;
  }

  /**
   * Get orderSourceCode
   * @return orderSourceCode
   */
  @javax.annotation.Nullable
  public OrderSourceName getOrderSourceCode() {
    return orderSourceCode;
  }

  public void setOrderSourceCode(OrderSourceName orderSourceCode) {
    this.orderSourceCode = orderSourceCode;
  }


  public UpdateShipmentRequestBody originType(OriginType originType) {
    this.originType = originType;
    return this;
  }

  /**
   * Indicates if the package will be picked up or dropped off by the carrier
   * @return originType
   */
  @javax.annotation.Nullable
  public OriginType getOriginType() {
    return originType;
  }

  public void setOriginType(OriginType originType) {
    this.originType = originType;
  }


  public UpdateShipmentRequestBody packages(List<ModelPackage> packages) {
    this.packages = packages;
    return this;
  }

  public UpdateShipmentRequestBody addPackagesItem(ModelPackage packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

  /**
   * The packages in the shipment.  &gt; **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn&#39;t allow it, an error will be returned. 
   * @return packages
   */
  @javax.annotation.Nullable
  public List<ModelPackage> getPackages() {
    return packages;
  }

  public void setPackages(List<ModelPackage> packages) {
    this.packages = packages;
  }


  public UpdateShipmentRequestBody returnTo(ShippingAddress returnTo) {
    this.returnTo = returnTo;
    return this;
  }

  /**
   * The return address for this shipment.  Defaults to the &#x60;ship_from&#x60; address. 
   * @return returnTo
   */
  @javax.annotation.Nullable
  public ShippingAddress getReturnTo() {
    return returnTo;
  }

  public void setReturnTo(ShippingAddress returnTo) {
    this.returnTo = returnTo;
  }


  public UpdateShipmentRequestBody serviceCode(String serviceCode) {
    this.serviceCode = serviceCode;
    return this;
  }

  /**
   * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as &#x60;fedex_ground&#x60;, &#x60;usps_first_class_mail&#x60;, &#x60;flat_rate_envelope&#x60;, etc. 
   * @return serviceCode
   */
  @javax.annotation.Nullable
  public String getServiceCode() {
    return serviceCode;
  }

  public void setServiceCode(String serviceCode) {
    this.serviceCode = serviceCode;
  }


  public UpdateShipmentRequestBody shipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
    return this;
  }

  /**
   * The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead. 
   * @return shipDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShipDate() {
    return shipDate;
  }

  public void setShipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
  }


  public UpdateShipmentRequestBody shipFrom(ShippingAddress shipFrom) {
    this.shipFrom = shipFrom;
    return this;
  }

  /**
   * The shipment&#39;s origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the &#x60;warehouse_id&#x60; rather than the complete address each time. 
   * @return shipFrom
   */
  @javax.annotation.Nonnull
  public ShippingAddress getShipFrom() {
    return shipFrom;
  }

  public void setShipFrom(ShippingAddress shipFrom) {
    this.shipFrom = shipFrom;
  }


  public UpdateShipmentRequestBody shipTo(ShippingAddress shipTo) {
    this.shipTo = shipTo;
    return this;
  }

  /**
   * The recipient&#39;s mailing address
   * @return shipTo
   */
  @javax.annotation.Nonnull
  public ShippingAddress getShipTo() {
    return shipTo;
  }

  public void setShipTo(ShippingAddress shipTo) {
    this.shipTo = shipTo;
  }


  /**
   * A string that uniquely identifies the shipment
   * @return shipmentId
   */
  @javax.annotation.Nullable
  public String getShipmentId() {
    return shipmentId;
  }



  public UpdateShipmentRequestBody shipmentNumber(String shipmentNumber) {
    this.shipmentNumber = shipmentNumber;
    return this;
  }

  /**
   * A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.  &gt; **Warning:** The &#x60;shipment_number&#x60; is limited to 50 characters. Any additional characters will be truncated. 
   * @return shipmentNumber
   */
  @javax.annotation.Nullable
  public String getShipmentNumber() {
    return shipmentNumber;
  }

  public void setShipmentNumber(String shipmentNumber) {
    this.shipmentNumber = shipmentNumber;
  }


  /**
   * The current status of the shipment
   * @return shipmentStatus
   */
  @javax.annotation.Nullable
  public ShipmentStatus getShipmentStatus() {
    return shipmentStatus;
  }



  /**
   * Arbitrary tags associated with this shipment.  Tags can be used to categorize shipments, and shipments can be queried by their tags. 
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }



  public UpdateShipmentRequestBody taxIdentifiers(List<TaxIdentifier> taxIdentifiers) {
    this.taxIdentifiers = taxIdentifiers;
    return this;
  }

  public UpdateShipmentRequestBody addTaxIdentifiersItem(TaxIdentifier taxIdentifiersItem) {
    if (this.taxIdentifiers == null) {
      this.taxIdentifiers = new ArrayList<>();
    }
    this.taxIdentifiers.add(taxIdentifiersItem);
    return this;
  }

  /**
   * Get taxIdentifiers
   * @return taxIdentifiers
   */
  @javax.annotation.Nullable
  public List<TaxIdentifier> getTaxIdentifiers() {
    return taxIdentifiers;
  }

  public void setTaxIdentifiers(List<TaxIdentifier> taxIdentifiers) {
    this.taxIdentifiers = taxIdentifiers;
  }


  /**
   * The combined weight of all packages in the shipment
   * @return totalWeight
   */
  @javax.annotation.Nullable
  public Weight getTotalWeight() {
    return totalWeight;
  }



  public UpdateShipmentRequestBody warehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
    return this;
  }

  /**
   * The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either &#x60;warehouse_id&#x60; or &#x60;ship_from&#x60; must be specified. 
   * @return warehouseId
   */
  @javax.annotation.Nullable
  public String getWarehouseId() {
    return warehouseId;
  }

  public void setWarehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
  }


  public UpdateShipmentRequestBody validateAddress(ValidateAddress validateAddress) {
    this.validateAddress = validateAddress;
    return this;
  }

  /**
   * Get validateAddress
   * @return validateAddress
   */
  @javax.annotation.Nullable
  public ValidateAddress getValidateAddress() {
    return validateAddress;
  }

  public void setValidateAddress(ValidateAddress validateAddress) {
    this.validateAddress = validateAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateShipmentRequestBody updateShipmentRequestBody = (UpdateShipmentRequestBody) o;
    return Objects.equals(this.advancedOptions, updateShipmentRequestBody.advancedOptions) &&
        Objects.equals(this.carrierId, updateShipmentRequestBody.carrierId) &&
        Objects.equals(this.confirmation, updateShipmentRequestBody.confirmation) &&
        Objects.equals(this.createdAt, updateShipmentRequestBody.createdAt) &&
        Objects.equals(this.customs, updateShipmentRequestBody.customs) &&
        Objects.equals(this.externalOrderId, updateShipmentRequestBody.externalOrderId) &&
        Objects.equals(this.externalShipmentId, updateShipmentRequestBody.externalShipmentId) &&
        Objects.equals(this.insuranceProvider, updateShipmentRequestBody.insuranceProvider) &&
        Objects.equals(this.isReturn, updateShipmentRequestBody.isReturn) &&
        Objects.equals(this.items, updateShipmentRequestBody.items) &&
        Objects.equals(this.modifiedAt, updateShipmentRequestBody.modifiedAt) &&
        Objects.equals(this.orderSourceCode, updateShipmentRequestBody.orderSourceCode) &&
        Objects.equals(this.originType, updateShipmentRequestBody.originType) &&
        Objects.equals(this.packages, updateShipmentRequestBody.packages) &&
        Objects.equals(this.returnTo, updateShipmentRequestBody.returnTo) &&
        Objects.equals(this.serviceCode, updateShipmentRequestBody.serviceCode) &&
        Objects.equals(this.shipDate, updateShipmentRequestBody.shipDate) &&
        Objects.equals(this.shipFrom, updateShipmentRequestBody.shipFrom) &&
        Objects.equals(this.shipTo, updateShipmentRequestBody.shipTo) &&
        Objects.equals(this.shipmentId, updateShipmentRequestBody.shipmentId) &&
        Objects.equals(this.shipmentNumber, updateShipmentRequestBody.shipmentNumber) &&
        Objects.equals(this.shipmentStatus, updateShipmentRequestBody.shipmentStatus) &&
        Objects.equals(this.tags, updateShipmentRequestBody.tags) &&
        Objects.equals(this.taxIdentifiers, updateShipmentRequestBody.taxIdentifiers) &&
        Objects.equals(this.totalWeight, updateShipmentRequestBody.totalWeight) &&
        Objects.equals(this.warehouseId, updateShipmentRequestBody.warehouseId) &&
        Objects.equals(this.validateAddress, updateShipmentRequestBody.validateAddress);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedOptions, carrierId, confirmation, createdAt, customs, externalOrderId, externalShipmentId, insuranceProvider, isReturn, items, modifiedAt, orderSourceCode, originType, packages, returnTo, serviceCode, shipDate, shipFrom, shipTo, shipmentId, shipmentNumber, shipmentStatus, tags, taxIdentifiers, totalWeight, warehouseId, validateAddress);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateShipmentRequestBody {\n");
    sb.append("    advancedOptions: ").append(toIndentedString(advancedOptions)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    confirmation: ").append(toIndentedString(confirmation)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customs: ").append(toIndentedString(customs)).append("\n");
    sb.append("    externalOrderId: ").append(toIndentedString(externalOrderId)).append("\n");
    sb.append("    externalShipmentId: ").append(toIndentedString(externalShipmentId)).append("\n");
    sb.append("    insuranceProvider: ").append(toIndentedString(insuranceProvider)).append("\n");
    sb.append("    isReturn: ").append(toIndentedString(isReturn)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    orderSourceCode: ").append(toIndentedString(orderSourceCode)).append("\n");
    sb.append("    originType: ").append(toIndentedString(originType)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    returnTo: ").append(toIndentedString(returnTo)).append("\n");
    sb.append("    serviceCode: ").append(toIndentedString(serviceCode)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    shipFrom: ").append(toIndentedString(shipFrom)).append("\n");
    sb.append("    shipTo: ").append(toIndentedString(shipTo)).append("\n");
    sb.append("    shipmentId: ").append(toIndentedString(shipmentId)).append("\n");
    sb.append("    shipmentNumber: ").append(toIndentedString(shipmentNumber)).append("\n");
    sb.append("    shipmentStatus: ").append(toIndentedString(shipmentStatus)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    taxIdentifiers: ").append(toIndentedString(taxIdentifiers)).append("\n");
    sb.append("    totalWeight: ").append(toIndentedString(totalWeight)).append("\n");
    sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
    sb.append("    validateAddress: ").append(toIndentedString(validateAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advanced_options");
    openapiFields.add("carrier_id");
    openapiFields.add("confirmation");
    openapiFields.add("created_at");
    openapiFields.add("customs");
    openapiFields.add("external_order_id");
    openapiFields.add("external_shipment_id");
    openapiFields.add("insurance_provider");
    openapiFields.add("is_return");
    openapiFields.add("items");
    openapiFields.add("modified_at");
    openapiFields.add("order_source_code");
    openapiFields.add("origin_type");
    openapiFields.add("packages");
    openapiFields.add("return_to");
    openapiFields.add("service_code");
    openapiFields.add("ship_date");
    openapiFields.add("ship_from");
    openapiFields.add("ship_to");
    openapiFields.add("shipment_id");
    openapiFields.add("shipment_number");
    openapiFields.add("shipment_status");
    openapiFields.add("tags");
    openapiFields.add("tax_identifiers");
    openapiFields.add("total_weight");
    openapiFields.add("warehouse_id");
    openapiFields.add("validate_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ship_from");
    openapiRequiredFields.add("ship_to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateShipmentRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateShipmentRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateShipmentRequestBody is not found in the empty JSON string", UpdateShipmentRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateShipmentRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateShipmentRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateShipmentRequestBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `advanced_options`
      if (jsonObj.get("advanced_options") != null && !jsonObj.get("advanced_options").isJsonNull()) {
        AdvancedShipmentOptions.validateJsonElement(jsonObj.get("advanced_options"));
      }
      if ((jsonObj.get("carrier_id") != null && !jsonObj.get("carrier_id").isJsonNull()) && !jsonObj.get("carrier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_id").toString()));
      }
      // validate the optional field `confirmation`
      if (jsonObj.get("confirmation") != null && !jsonObj.get("confirmation").isJsonNull()) {
        DeliveryConfirmation.validateJsonElement(jsonObj.get("confirmation"));
      }
      // validate the optional field `customs`
      if (jsonObj.get("customs") != null && !jsonObj.get("customs").isJsonNull()) {
        InternationalShipmentOptions.validateJsonElement(jsonObj.get("customs"));
      }
      if ((jsonObj.get("external_order_id") != null && !jsonObj.get("external_order_id").isJsonNull()) && !jsonObj.get("external_order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_order_id").toString()));
      }
      if ((jsonObj.get("external_shipment_id") != null && !jsonObj.get("external_shipment_id").isJsonNull()) && !jsonObj.get("external_shipment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_shipment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_shipment_id").toString()));
      }
      // validate the optional field `insurance_provider`
      if (jsonObj.get("insurance_provider") != null && !jsonObj.get("insurance_provider").isJsonNull()) {
        InsuranceProvider.validateJsonElement(jsonObj.get("insurance_provider"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            ShipmentItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      // validate the optional field `order_source_code`
      if (jsonObj.get("order_source_code") != null && !jsonObj.get("order_source_code").isJsonNull()) {
        OrderSourceName.validateJsonElement(jsonObj.get("order_source_code"));
      }
      // validate the optional field `origin_type`
      if (jsonObj.get("origin_type") != null && !jsonObj.get("origin_type").isJsonNull()) {
        OriginType.validateJsonElement(jsonObj.get("origin_type"));
      }
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            ModelPackage.validateJsonElement(jsonArraypackages.get(i));
          };
        }
      }
      // validate the optional field `return_to`
      if (jsonObj.get("return_to") != null && !jsonObj.get("return_to").isJsonNull()) {
        ShippingAddress.validateJsonElement(jsonObj.get("return_to"));
      }
      if ((jsonObj.get("service_code") != null && !jsonObj.get("service_code").isJsonNull()) && !jsonObj.get("service_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_code").toString()));
      }
      // validate the required field `ship_from`
      ShippingAddress.validateJsonElement(jsonObj.get("ship_from"));
      // validate the required field `ship_to`
      ShippingAddress.validateJsonElement(jsonObj.get("ship_to"));
      if ((jsonObj.get("shipment_id") != null && !jsonObj.get("shipment_id").isJsonNull()) && !jsonObj.get("shipment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipment_id").toString()));
      }
      if ((jsonObj.get("shipment_number") != null && !jsonObj.get("shipment_number").isJsonNull()) && !jsonObj.get("shipment_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipment_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipment_number").toString()));
      }
      // validate the optional field `shipment_status`
      if (jsonObj.get("shipment_status") != null && !jsonObj.get("shipment_status").isJsonNull()) {
        ShipmentStatus.validateJsonElement(jsonObj.get("shipment_status"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (jsonObj.get("tax_identifiers") != null && !jsonObj.get("tax_identifiers").isJsonNull()) {
        JsonArray jsonArraytaxIdentifiers = jsonObj.getAsJsonArray("tax_identifiers");
        if (jsonArraytaxIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tax_identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tax_identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("tax_identifiers").toString()));
          }

          // validate the optional field `tax_identifiers` (array)
          for (int i = 0; i < jsonArraytaxIdentifiers.size(); i++) {
            TaxIdentifier.validateJsonElement(jsonArraytaxIdentifiers.get(i));
          };
        }
      }
      // validate the optional field `total_weight`
      if (jsonObj.get("total_weight") != null && !jsonObj.get("total_weight").isJsonNull()) {
        Weight.validateJsonElement(jsonObj.get("total_weight"));
      }
      if ((jsonObj.get("warehouse_id") != null && !jsonObj.get("warehouse_id").isJsonNull()) && !jsonObj.get("warehouse_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouse_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouse_id").toString()));
      }
      // validate the optional field `validate_address`
      if (jsonObj.get("validate_address") != null && !jsonObj.get("validate_address").isJsonNull()) {
        ValidateAddress.validateJsonElement(jsonObj.get("validate_address"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateShipmentRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateShipmentRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateShipmentRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateShipmentRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateShipmentRequestBody>() {
           @Override
           public void write(JsonWriter out, UpdateShipmentRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateShipmentRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateShipmentRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateShipmentRequestBody
   * @throws IOException if the JSON string is invalid with respect to UpdateShipmentRequestBody
   */
  public static UpdateShipmentRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateShipmentRequestBody.class);
  }

  /**
   * Convert an instance of UpdateShipmentRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

