# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UnitConverterGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _from: str=None, result: float=None, to: str=None, type: str=None, value: float=None):
        """UnitConverterGet200Response - a model defined in OpenAPI

        :param _from: The _from of this UnitConverterGet200Response.
        :param result: The result of this UnitConverterGet200Response.
        :param to: The to of this UnitConverterGet200Response.
        :param type: The type of this UnitConverterGet200Response.
        :param value: The value of this UnitConverterGet200Response.
        """
        self.openapi_types = {
            '_from': str,
            'result': float,
            'to': str,
            'type': str,
            'value': float
        }

        self.attribute_map = {
            '_from': 'from',
            'result': 'result',
            'to': 'to',
            'type': 'type',
            'value': 'value'
        }

        self.__from = _from
        self._result = result
        self._to = to
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnitConverterGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The unit_converter_get_200_response of this UnitConverterGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self):
        """Gets the _from of this UnitConverterGet200Response.

        Source unit

        :return: The _from of this UnitConverterGet200Response.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this UnitConverterGet200Response.

        Source unit

        :param _from: The _from of this UnitConverterGet200Response.
        :type _from: str
        """
        allowed_values = ["m/s2", "'", "''", "deg", "gon", "rad", "rad/s", "[acr_us]", "[sft_i]", "[sin_i]", "[smi_us]", "[syd_i]", "ar", "cm2", "har", "km2", "m2", "mm2", "AUD", "BGN", "BRL", "CAD", "CHF", "CNY", "CZK", "DKK", "EUR", "GBP", "HKD", "HUF", "IDR", "ILS", "INR", "ISK", "JPY", "KRW", "MXN", "MYR", "NOK", "NZD", "PHP", "PLN", "RON", "SEK", "SGD", "THB", "TRY", "USD", "ZAR", "F", "C", "S", "A", "V", "Ohm", "[Btu_IT]", "J", "kW.h", "MJ", "kW.h/100km", "m/J", "W.h/km", "N", "%", "bpm", "Hz", "rpm", "[mi_i]/[gal_br]", "L/100km", "m/m3", "lx", "H", "[ft_i]", "[in_i]", "[mi_i]", "[nmi_i]", "[yd_i]", "cm", "dm", "km", "m", "mm", "g/km", "kg/m", "lm", "Wb", "T", "[lb_av]", "g", "kg", "t", "[HP_e]", "[HP_m]", "[HP_s]", "[HP]", "kW", "W", "Pa", "Bq", "[kn_i]", "km/h", "m/s", "[degF]", "Cel", "K", "a", "d", "h", "min", "mo", "s", "wk", "N.m", "[gal_br]", "[pk_br]", "L", "m3"]  # noqa: E501
        if _from not in allowed_values:
            raise ValueError(
                "Invalid value for `_from` ({0}), must be one of {1}"
                .format(_from, allowed_values)
            )

        self.__from = _from

    @property
    def result(self):
        """Gets the result of this UnitConverterGet200Response.

        Result of the conversion

        :return: The result of this UnitConverterGet200Response.
        :rtype: float
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this UnitConverterGet200Response.

        Result of the conversion

        :param result: The result of this UnitConverterGet200Response.
        :type result: float
        """

        self._result = result

    @property
    def to(self):
        """Gets the to of this UnitConverterGet200Response.

        Target unit

        :return: The to of this UnitConverterGet200Response.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this UnitConverterGet200Response.

        Target unit

        :param to: The to of this UnitConverterGet200Response.
        :type to: str
        """
        allowed_values = ["m/s2", "'", "''", "deg", "gon", "rad", "rad/s", "[acr_us]", "[sft_i]", "[sin_i]", "[smi_us]", "[syd_i]", "ar", "cm2", "har", "km2", "m2", "mm2", "AUD", "BGN", "BRL", "CAD", "CHF", "CNY", "CZK", "DKK", "EUR", "GBP", "HKD", "HUF", "IDR", "ILS", "INR", "ISK", "JPY", "KRW", "MXN", "MYR", "NOK", "NZD", "PHP", "PLN", "RON", "SEK", "SGD", "THB", "TRY", "USD", "ZAR", "F", "C", "S", "A", "V", "Ohm", "[Btu_IT]", "J", "kW.h", "MJ", "kW.h/100km", "m/J", "W.h/km", "N", "%", "bpm", "Hz", "rpm", "[mi_i]/[gal_br]", "L/100km", "m/m3", "lx", "H", "[ft_i]", "[in_i]", "[mi_i]", "[nmi_i]", "[yd_i]", "cm", "dm", "km", "m", "mm", "g/km", "kg/m", "lm", "Wb", "T", "[lb_av]", "g", "kg", "t", "[HP_e]", "[HP_m]", "[HP_s]", "[HP]", "kW", "W", "Pa", "Bq", "[kn_i]", "km/h", "m/s", "[degF]", "Cel", "K", "a", "d", "h", "min", "mo", "s", "wk", "N.m", "[gal_br]", "[pk_br]", "L", "m3"]  # noqa: E501
        if to not in allowed_values:
            raise ValueError(
                "Invalid value for `to` ({0}), must be one of {1}"
                .format(to, allowed_values)
            )

        self._to = to

    @property
    def type(self):
        """Gets the type of this UnitConverterGet200Response.


        :return: The type of this UnitConverterGet200Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UnitConverterGet200Response.


        :param type: The type of this UnitConverterGet200Response.
        :type type: str
        """
        allowed_values = ["acceleration", "angle", "angularVelocity", "area", "currency", "electricCapacitance", "electricCharge", "electricConductance", "electricCurrent", "electricPotential", "electricResistance", "energy", "energyEfficiency", "force", "fraction", "frequency", "fuelEfficiency", "illuminance", "inductance", "length", "linearMassDensity", "luminousFlux", "magneticFlux", "magneticFluxDensity", "mass", "power", "pressure", "radioactivity", "speed", "temperature", "time", "torque", "volume"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this UnitConverterGet200Response.

        Value to convert

        :return: The value of this UnitConverterGet200Response.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this UnitConverterGet200Response.

        Value to convert

        :param value: The value of this UnitConverterGet200Response.
        :type value: float
        """

        self._value = value
