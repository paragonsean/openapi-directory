# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReverseGeocodingGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, country: str=None, country_code: str=None, country_code3: str=None, currency: str=None, house_number: str=None, lat: float=None, lon: float=None, postal_code: str=None, region: str=None, region_code: str=None, street: str=None):
        """ReverseGeocodingGet200Response - a model defined in OpenAPI

        :param address: The address of this ReverseGeocodingGet200Response.
        :param city: The city of this ReverseGeocodingGet200Response.
        :param country: The country of this ReverseGeocodingGet200Response.
        :param country_code: The country_code of this ReverseGeocodingGet200Response.
        :param country_code3: The country_code3 of this ReverseGeocodingGet200Response.
        :param currency: The currency of this ReverseGeocodingGet200Response.
        :param house_number: The house_number of this ReverseGeocodingGet200Response.
        :param lat: The lat of this ReverseGeocodingGet200Response.
        :param lon: The lon of this ReverseGeocodingGet200Response.
        :param postal_code: The postal_code of this ReverseGeocodingGet200Response.
        :param region: The region of this ReverseGeocodingGet200Response.
        :param region_code: The region_code of this ReverseGeocodingGet200Response.
        :param street: The street of this ReverseGeocodingGet200Response.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'country': str,
            'country_code': str,
            'country_code3': str,
            'currency': str,
            'house_number': str,
            'lat': float,
            'lon': float,
            'postal_code': str,
            'region': str,
            'region_code': str,
            'street': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'country': 'country',
            'country_code': 'countryCode',
            'country_code3': 'countryCode3',
            'currency': 'currency',
            'house_number': 'houseNumber',
            'lat': 'lat',
            'lon': 'lon',
            'postal_code': 'postalCode',
            'region': 'region',
            'region_code': 'regionCode',
            'street': 'street'
        }

        self._address = address
        self._city = city
        self._country = country
        self._country_code = country_code
        self._country_code3 = country_code3
        self._currency = currency
        self._house_number = house_number
        self._lat = lat
        self._lon = lon
        self._postal_code = postal_code
        self._region = region
        self._region_code = region_code
        self._street = street

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReverseGeocodingGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reverse_geocoding_get_200_response of this ReverseGeocodingGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ReverseGeocodingGet200Response.

        Formatted address according to locale parameter

        :return: The address of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ReverseGeocodingGet200Response.

        Formatted address according to locale parameter

        :param address: The address of this ReverseGeocodingGet200Response.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this ReverseGeocodingGet200Response.

        City name

        :return: The city of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ReverseGeocodingGet200Response.

        City name

        :param city: The city of this ReverseGeocodingGet200Response.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this ReverseGeocodingGet200Response.

        Country name

        :return: The country of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ReverseGeocodingGet200Response.

        Country name

        :param country: The country of this ReverseGeocodingGet200Response.
        :type country: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this ReverseGeocodingGet200Response.

        ISO 3166-1 alpha-2 country code

        :return: The country_code of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ReverseGeocodingGet200Response.

        ISO 3166-1 alpha-2 country code

        :param country_code: The country_code of this ReverseGeocodingGet200Response.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def country_code3(self):
        """Gets the country_code3 of this ReverseGeocodingGet200Response.

        ISO3166-1 alpha3 country code

        :return: The country_code3 of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._country_code3

    @country_code3.setter
    def country_code3(self, country_code3):
        """Sets the country_code3 of this ReverseGeocodingGet200Response.

        ISO3166-1 alpha3 country code

        :param country_code3: The country_code3 of this ReverseGeocodingGet200Response.
        :type country_code3: str
        """

        self._country_code3 = country_code3

    @property
    def currency(self):
        """Gets the currency of this ReverseGeocodingGet200Response.

        ISO 4217 currency code, if available

        :return: The currency of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ReverseGeocodingGet200Response.

        ISO 4217 currency code, if available

        :param currency: The currency of this ReverseGeocodingGet200Response.
        :type currency: str
        """

        self._currency = currency

    @property
    def house_number(self):
        """Gets the house_number of this ReverseGeocodingGet200Response.

        House number

        :return: The house_number of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this ReverseGeocodingGet200Response.

        House number

        :param house_number: The house_number of this ReverseGeocodingGet200Response.
        :type house_number: str
        """

        self._house_number = house_number

    @property
    def lat(self):
        """Gets the lat of this ReverseGeocodingGet200Response.

        Latitude

        :return: The lat of this ReverseGeocodingGet200Response.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this ReverseGeocodingGet200Response.

        Latitude

        :param lat: The lat of this ReverseGeocodingGet200Response.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this ReverseGeocodingGet200Response.

        Longitude

        :return: The lon of this ReverseGeocodingGet200Response.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this ReverseGeocodingGet200Response.

        Longitude

        :param lon: The lon of this ReverseGeocodingGet200Response.
        :type lon: float
        """

        self._lon = lon

    @property
    def postal_code(self):
        """Gets the postal_code of this ReverseGeocodingGet200Response.

        Postal code

        :return: The postal_code of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ReverseGeocodingGet200Response.

        Postal code

        :param postal_code: The postal_code of this ReverseGeocodingGet200Response.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this ReverseGeocodingGet200Response.

        Region/state name

        :return: The region of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ReverseGeocodingGet200Response.

        Region/state name

        :param region: The region of this ReverseGeocodingGet200Response.
        :type region: str
        """

        self._region = region

    @property
    def region_code(self):
        """Gets the region_code of this ReverseGeocodingGet200Response.

        ISO3166-2 region/state code

        :return: The region_code of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this ReverseGeocodingGet200Response.

        ISO3166-2 region/state code

        :param region_code: The region_code of this ReverseGeocodingGet200Response.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def street(self):
        """Gets the street of this ReverseGeocodingGet200Response.

        Street name

        :return: The street of this ReverseGeocodingGet200Response.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ReverseGeocodingGet200Response.

        Street name

        :param street: The street of this ReverseGeocodingGet200Response.
        :type street: str
        """

        self._street = street
