# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HtmlRendererPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, css: str=None, footer: str=None, format: str='pdf', header: str=None, html: str=None, image_height: int=None, image_width: int=512, landscape: bool=False, margin: str='0', margin_bottom: str='0', margin_left: str='0', margin_right: str='0', margin_top: str='0', page_height: str=None, page_size: str='a4', page_width: str=None, title: str=None):
        """HtmlRendererPostRequest - a model defined in OpenAPI

        :param css: The css of this HtmlRendererPostRequest.
        :param footer: The footer of this HtmlRendererPostRequest.
        :param format: The format of this HtmlRendererPostRequest.
        :param header: The header of this HtmlRendererPostRequest.
        :param html: The html of this HtmlRendererPostRequest.
        :param image_height: The image_height of this HtmlRendererPostRequest.
        :param image_width: The image_width of this HtmlRendererPostRequest.
        :param landscape: The landscape of this HtmlRendererPostRequest.
        :param margin: The margin of this HtmlRendererPostRequest.
        :param margin_bottom: The margin_bottom of this HtmlRendererPostRequest.
        :param margin_left: The margin_left of this HtmlRendererPostRequest.
        :param margin_right: The margin_right of this HtmlRendererPostRequest.
        :param margin_top: The margin_top of this HtmlRendererPostRequest.
        :param page_height: The page_height of this HtmlRendererPostRequest.
        :param page_size: The page_size of this HtmlRendererPostRequest.
        :param page_width: The page_width of this HtmlRendererPostRequest.
        :param title: The title of this HtmlRendererPostRequest.
        """
        self.openapi_types = {
            'css': str,
            'footer': str,
            'format': str,
            'header': str,
            'html': str,
            'image_height': int,
            'image_width': int,
            'landscape': bool,
            'margin': str,
            'margin_bottom': str,
            'margin_left': str,
            'margin_right': str,
            'margin_top': str,
            'page_height': str,
            'page_size': str,
            'page_width': str,
            'title': str
        }

        self.attribute_map = {
            'css': 'css',
            'footer': 'footer',
            'format': 'format',
            'header': 'header',
            'html': 'html',
            'image_height': 'imageHeight',
            'image_width': 'imageWidth',
            'landscape': 'landscape',
            'margin': 'margin',
            'margin_bottom': 'marginBottom',
            'margin_left': 'marginLeft',
            'margin_right': 'marginRight',
            'margin_top': 'marginTop',
            'page_height': 'pageHeight',
            'page_size': 'pageSize',
            'page_width': 'pageWidth',
            'title': 'title'
        }

        self._css = css
        self._footer = footer
        self._format = format
        self._header = header
        self._html = html
        self._image_height = image_height
        self._image_width = image_width
        self._landscape = landscape
        self._margin = margin
        self._margin_bottom = margin_bottom
        self._margin_left = margin_left
        self._margin_right = margin_right
        self._margin_top = margin_top
        self._page_height = page_height
        self._page_size = page_size
        self._page_width = page_width
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HtmlRendererPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The html_renderer_post_request of this HtmlRendererPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def css(self):
        """Gets the css of this HtmlRendererPostRequest.

        Custom CSS style content

        :return: The css of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this HtmlRendererPostRequest.

        Custom CSS style content

        :param css: The css of this HtmlRendererPostRequest.
        :type css: str
        """

        self._css = css

    @property
    def footer(self):
        """Gets the footer of this HtmlRendererPostRequest.

        HTML page footer content. Use special CSS classes to inject parameters: \"date\", \"pageNumber\", \"totalPages\"

        :return: The footer of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this HtmlRendererPostRequest.

        HTML page footer content. Use special CSS classes to inject parameters: \"date\", \"pageNumber\", \"totalPages\"

        :param footer: The footer of this HtmlRendererPostRequest.
        :type footer: str
        """

        self._footer = footer

    @property
    def format(self):
        """Gets the format of this HtmlRendererPostRequest.

        Output format

        :return: The format of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this HtmlRendererPostRequest.

        Output format

        :param format: The format of this HtmlRendererPostRequest.
        :type format: str
        """
        allowed_values = ["pdf", "png"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def header(self):
        """Gets the header of this HtmlRendererPostRequest.

        HTML page header content. Use special CSS classes to inject parameters: \"date\", \"pageNumber\", \"totalPages\"

        :return: The header of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this HtmlRendererPostRequest.

        HTML page header content. Use special CSS classes to inject parameters: \"date\", \"pageNumber\", \"totalPages\"

        :param header: The header of this HtmlRendererPostRequest.
        :type header: str
        """

        self._header = header

    @property
    def html(self):
        """Gets the html of this HtmlRendererPostRequest.

        HTML content to render

        :return: The html of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this HtmlRendererPostRequest.

        HTML content to render

        :param html: The html of this HtmlRendererPostRequest.
        :type html: str
        """
        if html is None:
            raise ValueError("Invalid value for `html`, must not be `None`")

        self._html = html

    @property
    def image_height(self):
        """Gets the image_height of this HtmlRendererPostRequest.

        PNG image height (in pixels). In not specified, the height will automatically adapt to the content

        :return: The image_height of this HtmlRendererPostRequest.
        :rtype: int
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """Sets the image_height of this HtmlRendererPostRequest.

        PNG image height (in pixels). In not specified, the height will automatically adapt to the content

        :param image_height: The image_height of this HtmlRendererPostRequest.
        :type image_height: int
        """

        self._image_height = image_height

    @property
    def image_width(self):
        """Gets the image_width of this HtmlRendererPostRequest.

        PNG image width (in pixels)

        :return: The image_width of this HtmlRendererPostRequest.
        :rtype: int
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """Sets the image_width of this HtmlRendererPostRequest.

        PNG image width (in pixels)

        :param image_width: The image_width of this HtmlRendererPostRequest.
        :type image_width: int
        """

        self._image_width = image_width

    @property
    def landscape(self):
        """Gets the landscape of this HtmlRendererPostRequest.

        PDF document orientation

        :return: The landscape of this HtmlRendererPostRequest.
        :rtype: bool
        """
        return self._landscape

    @landscape.setter
    def landscape(self, landscape):
        """Sets the landscape of this HtmlRendererPostRequest.

        PDF document orientation

        :param landscape: The landscape of this HtmlRendererPostRequest.
        :type landscape: bool
        """

        self._landscape = landscape

    @property
    def margin(self):
        """Gets the margin of this HtmlRendererPostRequest.

        PDF page margin (in px, mm, in or cm)

        :return: The margin of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this HtmlRendererPostRequest.

        PDF page margin (in px, mm, in or cm)

        :param margin: The margin of this HtmlRendererPostRequest.
        :type margin: str
        """

        self._margin = margin

    @property
    def margin_bottom(self):
        """Gets the margin_bottom of this HtmlRendererPostRequest.

        PDF bottom margin (in px, mm, in or cm)

        :return: The margin_bottom of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._margin_bottom

    @margin_bottom.setter
    def margin_bottom(self, margin_bottom):
        """Sets the margin_bottom of this HtmlRendererPostRequest.

        PDF bottom margin (in px, mm, in or cm)

        :param margin_bottom: The margin_bottom of this HtmlRendererPostRequest.
        :type margin_bottom: str
        """

        self._margin_bottom = margin_bottom

    @property
    def margin_left(self):
        """Gets the margin_left of this HtmlRendererPostRequest.

        PDF left margin (in px, mm, in or cm)

        :return: The margin_left of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._margin_left

    @margin_left.setter
    def margin_left(self, margin_left):
        """Sets the margin_left of this HtmlRendererPostRequest.

        PDF left margin (in px, mm, in or cm)

        :param margin_left: The margin_left of this HtmlRendererPostRequest.
        :type margin_left: str
        """

        self._margin_left = margin_left

    @property
    def margin_right(self):
        """Gets the margin_right of this HtmlRendererPostRequest.

        PDF right margin (in px, mm, in or cm)

        :return: The margin_right of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._margin_right

    @margin_right.setter
    def margin_right(self, margin_right):
        """Sets the margin_right of this HtmlRendererPostRequest.

        PDF right margin (in px, mm, in or cm)

        :param margin_right: The margin_right of this HtmlRendererPostRequest.
        :type margin_right: str
        """

        self._margin_right = margin_right

    @property
    def margin_top(self):
        """Gets the margin_top of this HtmlRendererPostRequest.

        PDF top margin (in px, mm, in or cm)

        :return: The margin_top of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._margin_top

    @margin_top.setter
    def margin_top(self, margin_top):
        """Sets the margin_top of this HtmlRendererPostRequest.

        PDF top margin (in px, mm, in or cm)

        :param margin_top: The margin_top of this HtmlRendererPostRequest.
        :type margin_top: str
        """

        self._margin_top = margin_top

    @property
    def page_height(self):
        """Gets the page_height of this HtmlRendererPostRequest.

        Explicit PDF height (in px, mm, in or cm)

        :return: The page_height of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._page_height

    @page_height.setter
    def page_height(self, page_height):
        """Sets the page_height of this HtmlRendererPostRequest.

        Explicit PDF height (in px, mm, in or cm)

        :param page_height: The page_height of this HtmlRendererPostRequest.
        :type page_height: str
        """

        self._page_height = page_height

    @property
    def page_size(self):
        """Gets the page_size of this HtmlRendererPostRequest.

        Default page size of the generated PDF document

        :return: The page_size of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this HtmlRendererPostRequest.

        Default page size of the generated PDF document

        :param page_size: The page_size of this HtmlRendererPostRequest.
        :type page_size: str
        """
        allowed_values = ["letter", "legal", "tabloid", "ledger", "a0", "a1", "a2", "a3", "a4", "a5", "a6"]  # noqa: E501
        if page_size not in allowed_values:
            raise ValueError(
                "Invalid value for `page_size` ({0}), must be one of {1}"
                .format(page_size, allowed_values)
            )

        self._page_size = page_size

    @property
    def page_width(self):
        """Gets the page_width of this HtmlRendererPostRequest.

        Explicit PDF width (in px, mm, in or cm)

        :return: The page_width of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._page_width

    @page_width.setter
    def page_width(self, page_width):
        """Sets the page_width of this HtmlRendererPostRequest.

        Explicit PDF width (in px, mm, in or cm)

        :param page_width: The page_width of this HtmlRendererPostRequest.
        :type page_width: str
        """

        self._page_width = page_width

    @property
    def title(self):
        """Gets the title of this HtmlRendererPostRequest.

        Title of the generated PDF document or PNG image

        :return: The title of this HtmlRendererPostRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this HtmlRendererPostRequest.

        Title of the generated PDF document or PNG image

        :param title: The title of this HtmlRendererPostRequest.
        :type title: str
        """

        self._title = title
