# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BarcodeGeneratorPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: str='#ffffff', fit_width: bool=False, foreground_color: str='#000000', format: str='png', height: int=None, show_text: bool=True, type: str='qrcode', value: str=None, width: int=256):
        """BarcodeGeneratorPostRequest - a model defined in OpenAPI

        :param background_color: The background_color of this BarcodeGeneratorPostRequest.
        :param fit_width: The fit_width of this BarcodeGeneratorPostRequest.
        :param foreground_color: The foreground_color of this BarcodeGeneratorPostRequest.
        :param format: The format of this BarcodeGeneratorPostRequest.
        :param height: The height of this BarcodeGeneratorPostRequest.
        :param show_text: The show_text of this BarcodeGeneratorPostRequest.
        :param type: The type of this BarcodeGeneratorPostRequest.
        :param value: The value of this BarcodeGeneratorPostRequest.
        :param width: The width of this BarcodeGeneratorPostRequest.
        """
        self.openapi_types = {
            'background_color': str,
            'fit_width': bool,
            'foreground_color': str,
            'format': str,
            'height': int,
            'show_text': bool,
            'type': str,
            'value': str,
            'width': int
        }

        self.attribute_map = {
            'background_color': 'backgroundColor',
            'fit_width': 'fitWidth',
            'foreground_color': 'foregroundColor',
            'format': 'format',
            'height': 'height',
            'show_text': 'showText',
            'type': 'type',
            'value': 'value',
            'width': 'width'
        }

        self._background_color = background_color
        self._fit_width = fit_width
        self._foreground_color = foreground_color
        self._format = format
        self._height = height
        self._show_text = show_text
        self._type = type
        self._value = value
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BarcodeGeneratorPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The barcode_generator_post_request of this BarcodeGeneratorPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this BarcodeGeneratorPostRequest.

        Image background color (hexadecimal format)

        :return: The background_color of this BarcodeGeneratorPostRequest.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this BarcodeGeneratorPostRequest.

        Image background color (hexadecimal format)

        :param background_color: The background_color of this BarcodeGeneratorPostRequest.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def fit_width(self):
        """Gets the fit_width of this BarcodeGeneratorPostRequest.

        Stretch barcodes to exactly fit the `width`. Due to the nature of barcodes, where every bar's width is a multiple of the narrowest bar, stretching may result in slightly blurry images, which are more difficult for devices to scan.

        :return: The fit_width of this BarcodeGeneratorPostRequest.
        :rtype: bool
        """
        return self._fit_width

    @fit_width.setter
    def fit_width(self, fit_width):
        """Sets the fit_width of this BarcodeGeneratorPostRequest.

        Stretch barcodes to exactly fit the `width`. Due to the nature of barcodes, where every bar's width is a multiple of the narrowest bar, stretching may result in slightly blurry images, which are more difficult for devices to scan.

        :param fit_width: The fit_width of this BarcodeGeneratorPostRequest.
        :type fit_width: bool
        """

        self._fit_width = fit_width

    @property
    def foreground_color(self):
        """Gets the foreground_color of this BarcodeGeneratorPostRequest.

        Barcode color (hexadecimal format)

        :return: The foreground_color of this BarcodeGeneratorPostRequest.
        :rtype: str
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this BarcodeGeneratorPostRequest.

        Barcode color (hexadecimal format)

        :param foreground_color: The foreground_color of this BarcodeGeneratorPostRequest.
        :type foreground_color: str
        """

        self._foreground_color = foreground_color

    @property
    def format(self):
        """Gets the format of this BarcodeGeneratorPostRequest.

        Output image format

        :return: The format of this BarcodeGeneratorPostRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this BarcodeGeneratorPostRequest.

        Output image format

        :param format: The format of this BarcodeGeneratorPostRequest.
        :type format: str
        """
        allowed_values = ["png", "svg"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def height(self):
        """Gets the height of this BarcodeGeneratorPostRequest.

        Height of the PNG code image

        :return: The height of this BarcodeGeneratorPostRequest.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this BarcodeGeneratorPostRequest.

        Height of the PNG code image

        :param height: The height of this BarcodeGeneratorPostRequest.
        :type height: int
        """

        self._height = height

    @property
    def show_text(self):
        """Gets the show_text of this BarcodeGeneratorPostRequest.

        Display human-readable text under barcodes

        :return: The show_text of this BarcodeGeneratorPostRequest.
        :rtype: bool
        """
        return self._show_text

    @show_text.setter
    def show_text(self, show_text):
        """Sets the show_text of this BarcodeGeneratorPostRequest.

        Display human-readable text under barcodes

        :param show_text: The show_text of this BarcodeGeneratorPostRequest.
        :type show_text: bool
        """

        self._show_text = show_text

    @property
    def type(self):
        """Gets the type of this BarcodeGeneratorPostRequest.

        Type of code

        :return: The type of this BarcodeGeneratorPostRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BarcodeGeneratorPostRequest.

        Type of code

        :param type: The type of this BarcodeGeneratorPostRequest.
        :type type: str
        """
        allowed_values = ["auspost", "azteccode", "azteccodecompact", "aztecrune", "bc412", "channelcode", "codablockf", "code11", "code128", "code16k", "code2of5", "code32", "code39", "code39ext", "code49", "code93", "code93ext", "codeone", "coop2of5", "daft", "databarexpanded", "databarexpandedcomposite", "databarexpandedstacked", "databarexpandedstackedcomposite", "databarlimited", "databarlimitedcomposite", "databaromni", "databaromnicomposite", "databarstacked", "databarstackedcomposite", "databarstackedomni", "databarstackedomnicomposite", "databartruncated", "databartruncatedcomposite", "datalogic2of5", "datamatrix", "datamatrixrectangular", "datamatrixrectangularextension", "dotcode", "ean13", "ean13composite", "ean14", "ean2", "ean5", "ean8", "ean8composite", "flattermarken", "gs1-128", "gs1-128composite", "gs1-cc", "gs1datamatrix", "gs1datamatrixrectangular", "gs1northamericancoupon", "gs1qrcode", "hanxin", "hibcazteccode", "hibccodablockf", "hibccode128", "hibccode39", "hibcdatamatrix", "hibcdatamatrixrectangular", "hibcmicropdf417", "hibcpdf417", "hibcqrcode", "iata2of5", "identcode", "industrial2of5", "interleaved2of5", "isbn", "ismn", "issn", "itf14", "japanpost", "kix", "leitcode", "mailmark", "matrix2of5", "maxicode", "micropdf417", "microqrcode", "msi", "onecode", "pdf417", "pdf417compact", "pharmacode", "pharmacode2", "planet", "plessey", "posicode", "postnet", "pzn", "qrcode", "rationalizedCodabar", "raw", "royalmail", "sscc18", "symbol", "telepen", "telepennumeric", "ultracode", "upca", "upcacomposite", "upce", "upcecomposite"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this BarcodeGeneratorPostRequest.

        Content to encode into the code

        :return: The value of this BarcodeGeneratorPostRequest.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BarcodeGeneratorPostRequest.

        Content to encode into the code

        :param value: The value of this BarcodeGeneratorPostRequest.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def width(self):
        """Gets the width of this BarcodeGeneratorPostRequest.

        Width of the PNG code image

        :return: The width of this BarcodeGeneratorPostRequest.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this BarcodeGeneratorPostRequest.

        Width of the PNG code image

        :param width: The width of this BarcodeGeneratorPostRequest.
        :type width: int
        """

        self._width = width
