/**
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReverse_geocoding_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReverse_geocoding_get_200_response::OAIReverse_geocoding_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReverse_geocoding_get_200_response::OAIReverse_geocoding_get_200_response() {
    this->initializeModel();
}

OAIReverse_geocoding_get_200_response::~OAIReverse_geocoding_get_200_response() {}

void OAIReverse_geocoding_get_200_response::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_code3_isSet = false;
    m_country_code3_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_house_number_isSet = false;
    m_house_number_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAIReverse_geocoding_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReverse_geocoding_get_200_response::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_country_code3_isValid = ::OpenAPI::fromJsonValue(m_country_code3, json[QString("countryCode3")]);
    m_country_code3_isSet = !json[QString("countryCode3")].isNull() && m_country_code3_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_house_number_isValid = ::OpenAPI::fromJsonValue(m_house_number, json[QString("houseNumber")]);
    m_house_number_isSet = !json[QString("houseNumber")].isNull() && m_house_number_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;
}

QString OAIReverse_geocoding_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReverse_geocoding_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_code3_isSet) {
        obj.insert(QString("countryCode3"), ::OpenAPI::toJsonValue(m_country_code3));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_house_number_isSet) {
        obj.insert(QString("houseNumber"), ::OpenAPI::toJsonValue(m_house_number));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAIReverse_geocoding_get_200_response::getAddress() const {
    return m_address;
}
void OAIReverse_geocoding_get_200_response::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_address_Set() const{
    return m_address_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIReverse_geocoding_get_200_response::getCity() const {
    return m_city;
}
void OAIReverse_geocoding_get_200_response::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_city_Set() const{
    return m_city_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIReverse_geocoding_get_200_response::getCountry() const {
    return m_country;
}
void OAIReverse_geocoding_get_200_response::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_country_Set() const{
    return m_country_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIReverse_geocoding_get_200_response::getCountryCode() const {
    return m_country_code;
}
void OAIReverse_geocoding_get_200_response::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIReverse_geocoding_get_200_response::getCountryCode3() const {
    return m_country_code3;
}
void OAIReverse_geocoding_get_200_response::setCountryCode3(const QString &country_code3) {
    m_country_code3 = country_code3;
    m_country_code3_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_country_code3_Set() const{
    return m_country_code3_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_country_code3_Valid() const{
    return m_country_code3_isValid;
}

QString OAIReverse_geocoding_get_200_response::getCurrency() const {
    return m_currency;
}
void OAIReverse_geocoding_get_200_response::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIReverse_geocoding_get_200_response::getHouseNumber() const {
    return m_house_number;
}
void OAIReverse_geocoding_get_200_response::setHouseNumber(const QString &house_number) {
    m_house_number = house_number;
    m_house_number_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_house_number_Set() const{
    return m_house_number_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_house_number_Valid() const{
    return m_house_number_isValid;
}

double OAIReverse_geocoding_get_200_response::getLat() const {
    return m_lat;
}
void OAIReverse_geocoding_get_200_response::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIReverse_geocoding_get_200_response::getLon() const {
    return m_lon;
}
void OAIReverse_geocoding_get_200_response::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAIReverse_geocoding_get_200_response::getPostalCode() const {
    return m_postal_code;
}
void OAIReverse_geocoding_get_200_response::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIReverse_geocoding_get_200_response::getRegion() const {
    return m_region;
}
void OAIReverse_geocoding_get_200_response::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_region_Set() const{
    return m_region_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIReverse_geocoding_get_200_response::getRegionCode() const {
    return m_region_code;
}
void OAIReverse_geocoding_get_200_response::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_region_code_Valid() const{
    return m_region_code_isValid;
}

QString OAIReverse_geocoding_get_200_response::getStreet() const {
    return m_street;
}
void OAIReverse_geocoding_get_200_response::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIReverse_geocoding_get_200_response::is_street_Set() const{
    return m_street_isSet;
}

bool OAIReverse_geocoding_get_200_response::is_street_Valid() const{
    return m_street_isValid;
}

bool OAIReverse_geocoding_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReverse_geocoding_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
