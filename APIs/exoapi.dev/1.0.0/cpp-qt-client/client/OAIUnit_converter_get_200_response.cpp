/**
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnit_converter_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnit_converter_get_200_response::OAIUnit_converter_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnit_converter_get_200_response::OAIUnit_converter_get_200_response() {
    this->initializeModel();
}

OAIUnit_converter_get_200_response::~OAIUnit_converter_get_200_response() {}

void OAIUnit_converter_get_200_response::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIUnit_converter_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnit_converter_get_200_response::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIUnit_converter_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnit_converter_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIUnit_converter_get_200_response::getFrom() const {
    return m_from;
}
void OAIUnit_converter_get_200_response::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIUnit_converter_get_200_response::is_from_Set() const{
    return m_from_isSet;
}

bool OAIUnit_converter_get_200_response::is_from_Valid() const{
    return m_from_isValid;
}

double OAIUnit_converter_get_200_response::getResult() const {
    return m_result;
}
void OAIUnit_converter_get_200_response::setResult(const double &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIUnit_converter_get_200_response::is_result_Set() const{
    return m_result_isSet;
}

bool OAIUnit_converter_get_200_response::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIUnit_converter_get_200_response::getTo() const {
    return m_to;
}
void OAIUnit_converter_get_200_response::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIUnit_converter_get_200_response::is_to_Set() const{
    return m_to_isSet;
}

bool OAIUnit_converter_get_200_response::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIUnit_converter_get_200_response::getType() const {
    return m_type;
}
void OAIUnit_converter_get_200_response::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUnit_converter_get_200_response::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUnit_converter_get_200_response::is_type_Valid() const{
    return m_type_isValid;
}

double OAIUnit_converter_get_200_response::getValue() const {
    return m_value;
}
void OAIUnit_converter_get_200_response::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIUnit_converter_get_200_response::is_value_Set() const{
    return m_value_isSet;
}

bool OAIUnit_converter_get_200_response::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIUnit_converter_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnit_converter_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
