/**
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHtml_renderer_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHtml_renderer_post_request::OAIHtml_renderer_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHtml_renderer_post_request::OAIHtml_renderer_post_request() {
    this->initializeModel();
}

OAIHtml_renderer_post_request::~OAIHtml_renderer_post_request() {}

void OAIHtml_renderer_post_request::initializeModel() {

    m_css_isSet = false;
    m_css_isValid = false;

    m_footer_isSet = false;
    m_footer_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_image_height_isSet = false;
    m_image_height_isValid = false;

    m_image_width_isSet = false;
    m_image_width_isValid = false;

    m_landscape_isSet = false;
    m_landscape_isValid = false;

    m_margin_isSet = false;
    m_margin_isValid = false;

    m_margin_bottom_isSet = false;
    m_margin_bottom_isValid = false;

    m_margin_left_isSet = false;
    m_margin_left_isValid = false;

    m_margin_right_isSet = false;
    m_margin_right_isValid = false;

    m_margin_top_isSet = false;
    m_margin_top_isValid = false;

    m_page_height_isSet = false;
    m_page_height_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_width_isSet = false;
    m_page_width_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIHtml_renderer_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHtml_renderer_post_request::fromJsonObject(QJsonObject json) {

    m_css_isValid = ::OpenAPI::fromJsonValue(m_css, json[QString("css")]);
    m_css_isSet = !json[QString("css")].isNull() && m_css_isValid;

    m_footer_isValid = ::OpenAPI::fromJsonValue(m_footer, json[QString("footer")]);
    m_footer_isSet = !json[QString("footer")].isNull() && m_footer_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_image_height_isValid = ::OpenAPI::fromJsonValue(m_image_height, json[QString("imageHeight")]);
    m_image_height_isSet = !json[QString("imageHeight")].isNull() && m_image_height_isValid;

    m_image_width_isValid = ::OpenAPI::fromJsonValue(m_image_width, json[QString("imageWidth")]);
    m_image_width_isSet = !json[QString("imageWidth")].isNull() && m_image_width_isValid;

    m_landscape_isValid = ::OpenAPI::fromJsonValue(m_landscape, json[QString("landscape")]);
    m_landscape_isSet = !json[QString("landscape")].isNull() && m_landscape_isValid;

    m_margin_isValid = ::OpenAPI::fromJsonValue(m_margin, json[QString("margin")]);
    m_margin_isSet = !json[QString("margin")].isNull() && m_margin_isValid;

    m_margin_bottom_isValid = ::OpenAPI::fromJsonValue(m_margin_bottom, json[QString("marginBottom")]);
    m_margin_bottom_isSet = !json[QString("marginBottom")].isNull() && m_margin_bottom_isValid;

    m_margin_left_isValid = ::OpenAPI::fromJsonValue(m_margin_left, json[QString("marginLeft")]);
    m_margin_left_isSet = !json[QString("marginLeft")].isNull() && m_margin_left_isValid;

    m_margin_right_isValid = ::OpenAPI::fromJsonValue(m_margin_right, json[QString("marginRight")]);
    m_margin_right_isSet = !json[QString("marginRight")].isNull() && m_margin_right_isValid;

    m_margin_top_isValid = ::OpenAPI::fromJsonValue(m_margin_top, json[QString("marginTop")]);
    m_margin_top_isSet = !json[QString("marginTop")].isNull() && m_margin_top_isValid;

    m_page_height_isValid = ::OpenAPI::fromJsonValue(m_page_height, json[QString("pageHeight")]);
    m_page_height_isSet = !json[QString("pageHeight")].isNull() && m_page_height_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_width_isValid = ::OpenAPI::fromJsonValue(m_page_width, json[QString("pageWidth")]);
    m_page_width_isSet = !json[QString("pageWidth")].isNull() && m_page_width_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIHtml_renderer_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHtml_renderer_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_css_isSet) {
        obj.insert(QString("css"), ::OpenAPI::toJsonValue(m_css));
    }
    if (m_footer_isSet) {
        obj.insert(QString("footer"), ::OpenAPI::toJsonValue(m_footer));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_image_height_isSet) {
        obj.insert(QString("imageHeight"), ::OpenAPI::toJsonValue(m_image_height));
    }
    if (m_image_width_isSet) {
        obj.insert(QString("imageWidth"), ::OpenAPI::toJsonValue(m_image_width));
    }
    if (m_landscape_isSet) {
        obj.insert(QString("landscape"), ::OpenAPI::toJsonValue(m_landscape));
    }
    if (m_margin_isSet) {
        obj.insert(QString("margin"), ::OpenAPI::toJsonValue(m_margin));
    }
    if (m_margin_bottom_isSet) {
        obj.insert(QString("marginBottom"), ::OpenAPI::toJsonValue(m_margin_bottom));
    }
    if (m_margin_left_isSet) {
        obj.insert(QString("marginLeft"), ::OpenAPI::toJsonValue(m_margin_left));
    }
    if (m_margin_right_isSet) {
        obj.insert(QString("marginRight"), ::OpenAPI::toJsonValue(m_margin_right));
    }
    if (m_margin_top_isSet) {
        obj.insert(QString("marginTop"), ::OpenAPI::toJsonValue(m_margin_top));
    }
    if (m_page_height_isSet) {
        obj.insert(QString("pageHeight"), ::OpenAPI::toJsonValue(m_page_height));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_width_isSet) {
        obj.insert(QString("pageWidth"), ::OpenAPI::toJsonValue(m_page_width));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIHtml_renderer_post_request::getCss() const {
    return m_css;
}
void OAIHtml_renderer_post_request::setCss(const QString &css) {
    m_css = css;
    m_css_isSet = true;
}

bool OAIHtml_renderer_post_request::is_css_Set() const{
    return m_css_isSet;
}

bool OAIHtml_renderer_post_request::is_css_Valid() const{
    return m_css_isValid;
}

QString OAIHtml_renderer_post_request::getFooter() const {
    return m_footer;
}
void OAIHtml_renderer_post_request::setFooter(const QString &footer) {
    m_footer = footer;
    m_footer_isSet = true;
}

bool OAIHtml_renderer_post_request::is_footer_Set() const{
    return m_footer_isSet;
}

bool OAIHtml_renderer_post_request::is_footer_Valid() const{
    return m_footer_isValid;
}

QString OAIHtml_renderer_post_request::getFormat() const {
    return m_format;
}
void OAIHtml_renderer_post_request::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIHtml_renderer_post_request::is_format_Set() const{
    return m_format_isSet;
}

bool OAIHtml_renderer_post_request::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIHtml_renderer_post_request::getHeader() const {
    return m_header;
}
void OAIHtml_renderer_post_request::setHeader(const QString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIHtml_renderer_post_request::is_header_Set() const{
    return m_header_isSet;
}

bool OAIHtml_renderer_post_request::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIHtml_renderer_post_request::getHtml() const {
    return m_html;
}
void OAIHtml_renderer_post_request::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIHtml_renderer_post_request::is_html_Set() const{
    return m_html_isSet;
}

bool OAIHtml_renderer_post_request::is_html_Valid() const{
    return m_html_isValid;
}

qint32 OAIHtml_renderer_post_request::getImageHeight() const {
    return m_image_height;
}
void OAIHtml_renderer_post_request::setImageHeight(const qint32 &image_height) {
    m_image_height = image_height;
    m_image_height_isSet = true;
}

bool OAIHtml_renderer_post_request::is_image_height_Set() const{
    return m_image_height_isSet;
}

bool OAIHtml_renderer_post_request::is_image_height_Valid() const{
    return m_image_height_isValid;
}

qint32 OAIHtml_renderer_post_request::getImageWidth() const {
    return m_image_width;
}
void OAIHtml_renderer_post_request::setImageWidth(const qint32 &image_width) {
    m_image_width = image_width;
    m_image_width_isSet = true;
}

bool OAIHtml_renderer_post_request::is_image_width_Set() const{
    return m_image_width_isSet;
}

bool OAIHtml_renderer_post_request::is_image_width_Valid() const{
    return m_image_width_isValid;
}

bool OAIHtml_renderer_post_request::isLandscape() const {
    return m_landscape;
}
void OAIHtml_renderer_post_request::setLandscape(const bool &landscape) {
    m_landscape = landscape;
    m_landscape_isSet = true;
}

bool OAIHtml_renderer_post_request::is_landscape_Set() const{
    return m_landscape_isSet;
}

bool OAIHtml_renderer_post_request::is_landscape_Valid() const{
    return m_landscape_isValid;
}

QString OAIHtml_renderer_post_request::getMargin() const {
    return m_margin;
}
void OAIHtml_renderer_post_request::setMargin(const QString &margin) {
    m_margin = margin;
    m_margin_isSet = true;
}

bool OAIHtml_renderer_post_request::is_margin_Set() const{
    return m_margin_isSet;
}

bool OAIHtml_renderer_post_request::is_margin_Valid() const{
    return m_margin_isValid;
}

QString OAIHtml_renderer_post_request::getMarginBottom() const {
    return m_margin_bottom;
}
void OAIHtml_renderer_post_request::setMarginBottom(const QString &margin_bottom) {
    m_margin_bottom = margin_bottom;
    m_margin_bottom_isSet = true;
}

bool OAIHtml_renderer_post_request::is_margin_bottom_Set() const{
    return m_margin_bottom_isSet;
}

bool OAIHtml_renderer_post_request::is_margin_bottom_Valid() const{
    return m_margin_bottom_isValid;
}

QString OAIHtml_renderer_post_request::getMarginLeft() const {
    return m_margin_left;
}
void OAIHtml_renderer_post_request::setMarginLeft(const QString &margin_left) {
    m_margin_left = margin_left;
    m_margin_left_isSet = true;
}

bool OAIHtml_renderer_post_request::is_margin_left_Set() const{
    return m_margin_left_isSet;
}

bool OAIHtml_renderer_post_request::is_margin_left_Valid() const{
    return m_margin_left_isValid;
}

QString OAIHtml_renderer_post_request::getMarginRight() const {
    return m_margin_right;
}
void OAIHtml_renderer_post_request::setMarginRight(const QString &margin_right) {
    m_margin_right = margin_right;
    m_margin_right_isSet = true;
}

bool OAIHtml_renderer_post_request::is_margin_right_Set() const{
    return m_margin_right_isSet;
}

bool OAIHtml_renderer_post_request::is_margin_right_Valid() const{
    return m_margin_right_isValid;
}

QString OAIHtml_renderer_post_request::getMarginTop() const {
    return m_margin_top;
}
void OAIHtml_renderer_post_request::setMarginTop(const QString &margin_top) {
    m_margin_top = margin_top;
    m_margin_top_isSet = true;
}

bool OAIHtml_renderer_post_request::is_margin_top_Set() const{
    return m_margin_top_isSet;
}

bool OAIHtml_renderer_post_request::is_margin_top_Valid() const{
    return m_margin_top_isValid;
}

QString OAIHtml_renderer_post_request::getPageHeight() const {
    return m_page_height;
}
void OAIHtml_renderer_post_request::setPageHeight(const QString &page_height) {
    m_page_height = page_height;
    m_page_height_isSet = true;
}

bool OAIHtml_renderer_post_request::is_page_height_Set() const{
    return m_page_height_isSet;
}

bool OAIHtml_renderer_post_request::is_page_height_Valid() const{
    return m_page_height_isValid;
}

QString OAIHtml_renderer_post_request::getPageSize() const {
    return m_page_size;
}
void OAIHtml_renderer_post_request::setPageSize(const QString &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIHtml_renderer_post_request::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIHtml_renderer_post_request::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIHtml_renderer_post_request::getPageWidth() const {
    return m_page_width;
}
void OAIHtml_renderer_post_request::setPageWidth(const QString &page_width) {
    m_page_width = page_width;
    m_page_width_isSet = true;
}

bool OAIHtml_renderer_post_request::is_page_width_Set() const{
    return m_page_width_isSet;
}

bool OAIHtml_renderer_post_request::is_page_width_Valid() const{
    return m_page_width_isValid;
}

QString OAIHtml_renderer_post_request::getTitle() const {
    return m_title;
}
void OAIHtml_renderer_post_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIHtml_renderer_post_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAIHtml_renderer_post_request::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIHtml_renderer_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landscape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_right_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHtml_renderer_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_html_isValid && true;
}

} // namespace OpenAPI
