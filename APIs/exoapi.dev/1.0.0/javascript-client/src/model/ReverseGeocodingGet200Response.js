/**
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReverseGeocodingGet200Response model module.
 * @module model/ReverseGeocodingGet200Response
 * @version 1.0.0
 */
class ReverseGeocodingGet200Response {
    /**
     * Constructs a new <code>ReverseGeocodingGet200Response</code>.
     * @alias module:model/ReverseGeocodingGet200Response
     */
    constructor() { 
        
        ReverseGeocodingGet200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReverseGeocodingGet200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReverseGeocodingGet200Response} obj Optional instance to populate.
     * @return {module:model/ReverseGeocodingGet200Response} The populated <code>ReverseGeocodingGet200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReverseGeocodingGet200Response();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('countryCode3')) {
                obj['countryCode3'] = ApiClient.convertToType(data['countryCode3'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('houseNumber')) {
                obj['houseNumber'] = ApiClient.convertToType(data['houseNumber'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('regionCode')) {
                obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReverseGeocodingGet200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReverseGeocodingGet200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['countryCode3'] && !(typeof data['countryCode3'] === 'string' || data['countryCode3'] instanceof String)) {
            throw new Error("Expected the field `countryCode3` to be a primitive type in the JSON string but got " + data['countryCode3']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['houseNumber'] && !(typeof data['houseNumber'] === 'string' || data['houseNumber'] instanceof String)) {
            throw new Error("Expected the field `houseNumber` to be a primitive type in the JSON string but got " + data['houseNumber']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['regionCode'] && !(typeof data['regionCode'] === 'string' || data['regionCode'] instanceof String)) {
            throw new Error("Expected the field `regionCode` to be a primitive type in the JSON string but got " + data['regionCode']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }

        return true;
    }


}



/**
 * Formatted address according to locale parameter
 * @member {String} address
 */
ReverseGeocodingGet200Response.prototype['address'] = undefined;

/**
 * City name
 * @member {String} city
 */
ReverseGeocodingGet200Response.prototype['city'] = undefined;

/**
 * Country name
 * @member {String} country
 */
ReverseGeocodingGet200Response.prototype['country'] = undefined;

/**
 * ISO 3166-1 alpha-2 country code
 * @member {String} countryCode
 */
ReverseGeocodingGet200Response.prototype['countryCode'] = undefined;

/**
 * ISO3166-1 alpha3 country code
 * @member {String} countryCode3
 */
ReverseGeocodingGet200Response.prototype['countryCode3'] = undefined;

/**
 * ISO 4217 currency code, if available
 * @member {String} currency
 */
ReverseGeocodingGet200Response.prototype['currency'] = undefined;

/**
 * House number
 * @member {String} houseNumber
 */
ReverseGeocodingGet200Response.prototype['houseNumber'] = undefined;

/**
 * Latitude
 * @member {Number} lat
 */
ReverseGeocodingGet200Response.prototype['lat'] = undefined;

/**
 * Longitude
 * @member {Number} lon
 */
ReverseGeocodingGet200Response.prototype['lon'] = undefined;

/**
 * Postal code
 * @member {String} postalCode
 */
ReverseGeocodingGet200Response.prototype['postalCode'] = undefined;

/**
 * Region/state name
 * @member {String} region
 */
ReverseGeocodingGet200Response.prototype['region'] = undefined;

/**
 * ISO3166-2 region/state code
 * @member {String} regionCode
 */
ReverseGeocodingGet200Response.prototype['regionCode'] = undefined;

/**
 * Street name
 * @member {String} street
 */
ReverseGeocodingGet200Response.prototype['street'] = undefined;






export default ReverseGeocodingGet200Response;

