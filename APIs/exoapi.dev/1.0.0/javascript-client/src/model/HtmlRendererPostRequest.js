/**
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HtmlRendererPostRequest model module.
 * @module model/HtmlRendererPostRequest
 * @version 1.0.0
 */
class HtmlRendererPostRequest {
    /**
     * Constructs a new <code>HtmlRendererPostRequest</code>.
     * @alias module:model/HtmlRendererPostRequest
     * @param html {String} HTML content to render
     */
    constructor(html) { 
        
        HtmlRendererPostRequest.initialize(this, html);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, html) { 
        obj['format'] = 'pdf';
        obj['html'] = html;
        obj['imageWidth'] = 512;
        obj['landscape'] = false;
        obj['margin'] = '0';
        obj['marginBottom'] = '0';
        obj['marginLeft'] = '0';
        obj['marginRight'] = '0';
        obj['marginTop'] = '0';
        obj['pageSize'] = 'a4';
    }

    /**
     * Constructs a <code>HtmlRendererPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HtmlRendererPostRequest} obj Optional instance to populate.
     * @return {module:model/HtmlRendererPostRequest} The populated <code>HtmlRendererPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HtmlRendererPostRequest();

            if (data.hasOwnProperty('css')) {
                obj['css'] = ApiClient.convertToType(data['css'], 'String');
            }
            if (data.hasOwnProperty('footer')) {
                obj['footer'] = ApiClient.convertToType(data['footer'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], 'String');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('imageHeight')) {
                obj['imageHeight'] = ApiClient.convertToType(data['imageHeight'], 'Number');
            }
            if (data.hasOwnProperty('imageWidth')) {
                obj['imageWidth'] = ApiClient.convertToType(data['imageWidth'], 'Number');
            }
            if (data.hasOwnProperty('landscape')) {
                obj['landscape'] = ApiClient.convertToType(data['landscape'], 'Boolean');
            }
            if (data.hasOwnProperty('margin')) {
                obj['margin'] = ApiClient.convertToType(data['margin'], 'String');
            }
            if (data.hasOwnProperty('marginBottom')) {
                obj['marginBottom'] = ApiClient.convertToType(data['marginBottom'], 'String');
            }
            if (data.hasOwnProperty('marginLeft')) {
                obj['marginLeft'] = ApiClient.convertToType(data['marginLeft'], 'String');
            }
            if (data.hasOwnProperty('marginRight')) {
                obj['marginRight'] = ApiClient.convertToType(data['marginRight'], 'String');
            }
            if (data.hasOwnProperty('marginTop')) {
                obj['marginTop'] = ApiClient.convertToType(data['marginTop'], 'String');
            }
            if (data.hasOwnProperty('pageHeight')) {
                obj['pageHeight'] = ApiClient.convertToType(data['pageHeight'], 'String');
            }
            if (data.hasOwnProperty('pageSize')) {
                obj['pageSize'] = ApiClient.convertToType(data['pageSize'], 'String');
            }
            if (data.hasOwnProperty('pageWidth')) {
                obj['pageWidth'] = ApiClient.convertToType(data['pageWidth'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HtmlRendererPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HtmlRendererPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HtmlRendererPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['css'] && !(typeof data['css'] === 'string' || data['css'] instanceof String)) {
            throw new Error("Expected the field `css` to be a primitive type in the JSON string but got " + data['css']);
        }
        // ensure the json data is a string
        if (data['footer'] && !(typeof data['footer'] === 'string' || data['footer'] instanceof String)) {
            throw new Error("Expected the field `footer` to be a primitive type in the JSON string but got " + data['footer']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['header'] && !(typeof data['header'] === 'string' || data['header'] instanceof String)) {
            throw new Error("Expected the field `header` to be a primitive type in the JSON string but got " + data['header']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['margin'] && !(typeof data['margin'] === 'string' || data['margin'] instanceof String)) {
            throw new Error("Expected the field `margin` to be a primitive type in the JSON string but got " + data['margin']);
        }
        // ensure the json data is a string
        if (data['marginBottom'] && !(typeof data['marginBottom'] === 'string' || data['marginBottom'] instanceof String)) {
            throw new Error("Expected the field `marginBottom` to be a primitive type in the JSON string but got " + data['marginBottom']);
        }
        // ensure the json data is a string
        if (data['marginLeft'] && !(typeof data['marginLeft'] === 'string' || data['marginLeft'] instanceof String)) {
            throw new Error("Expected the field `marginLeft` to be a primitive type in the JSON string but got " + data['marginLeft']);
        }
        // ensure the json data is a string
        if (data['marginRight'] && !(typeof data['marginRight'] === 'string' || data['marginRight'] instanceof String)) {
            throw new Error("Expected the field `marginRight` to be a primitive type in the JSON string but got " + data['marginRight']);
        }
        // ensure the json data is a string
        if (data['marginTop'] && !(typeof data['marginTop'] === 'string' || data['marginTop'] instanceof String)) {
            throw new Error("Expected the field `marginTop` to be a primitive type in the JSON string but got " + data['marginTop']);
        }
        // ensure the json data is a string
        if (data['pageHeight'] && !(typeof data['pageHeight'] === 'string' || data['pageHeight'] instanceof String)) {
            throw new Error("Expected the field `pageHeight` to be a primitive type in the JSON string but got " + data['pageHeight']);
        }
        // ensure the json data is a string
        if (data['pageSize'] && !(typeof data['pageSize'] === 'string' || data['pageSize'] instanceof String)) {
            throw new Error("Expected the field `pageSize` to be a primitive type in the JSON string but got " + data['pageSize']);
        }
        // ensure the json data is a string
        if (data['pageWidth'] && !(typeof data['pageWidth'] === 'string' || data['pageWidth'] instanceof String)) {
            throw new Error("Expected the field `pageWidth` to be a primitive type in the JSON string but got " + data['pageWidth']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

HtmlRendererPostRequest.RequiredProperties = ["html"];

/**
 * Custom CSS style content
 * @member {String} css
 */
HtmlRendererPostRequest.prototype['css'] = undefined;

/**
 * HTML page footer content. Use special CSS classes to inject parameters: \"date\", \"pageNumber\", \"totalPages\"
 * @member {String} footer
 */
HtmlRendererPostRequest.prototype['footer'] = undefined;

/**
 * Output format
 * @member {module:model/HtmlRendererPostRequest.FormatEnum} format
 * @default 'pdf'
 */
HtmlRendererPostRequest.prototype['format'] = 'pdf';

/**
 * HTML page header content. Use special CSS classes to inject parameters: \"date\", \"pageNumber\", \"totalPages\"
 * @member {String} header
 */
HtmlRendererPostRequest.prototype['header'] = undefined;

/**
 * HTML content to render
 * @member {String} html
 */
HtmlRendererPostRequest.prototype['html'] = undefined;

/**
 * PNG image height (in pixels). In not specified, the height will automatically adapt to the content
 * @member {Number} imageHeight
 */
HtmlRendererPostRequest.prototype['imageHeight'] = undefined;

/**
 * PNG image width (in pixels)
 * @member {Number} imageWidth
 * @default 512
 */
HtmlRendererPostRequest.prototype['imageWidth'] = 512;

/**
 * PDF document orientation
 * @member {Boolean} landscape
 * @default false
 */
HtmlRendererPostRequest.prototype['landscape'] = false;

/**
 * PDF page margin (in px, mm, in or cm)
 * @member {String} margin
 * @default '0'
 */
HtmlRendererPostRequest.prototype['margin'] = '0';

/**
 * PDF bottom margin (in px, mm, in or cm)
 * @member {String} marginBottom
 * @default '0'
 */
HtmlRendererPostRequest.prototype['marginBottom'] = '0';

/**
 * PDF left margin (in px, mm, in or cm)
 * @member {String} marginLeft
 * @default '0'
 */
HtmlRendererPostRequest.prototype['marginLeft'] = '0';

/**
 * PDF right margin (in px, mm, in or cm)
 * @member {String} marginRight
 * @default '0'
 */
HtmlRendererPostRequest.prototype['marginRight'] = '0';

/**
 * PDF top margin (in px, mm, in or cm)
 * @member {String} marginTop
 * @default '0'
 */
HtmlRendererPostRequest.prototype['marginTop'] = '0';

/**
 * Explicit PDF height (in px, mm, in or cm)
 * @member {String} pageHeight
 */
HtmlRendererPostRequest.prototype['pageHeight'] = undefined;

/**
 * Default page size of the generated PDF document
 * @member {module:model/HtmlRendererPostRequest.PageSizeEnum} pageSize
 * @default 'a4'
 */
HtmlRendererPostRequest.prototype['pageSize'] = 'a4';

/**
 * Explicit PDF width (in px, mm, in or cm)
 * @member {String} pageWidth
 */
HtmlRendererPostRequest.prototype['pageWidth'] = undefined;

/**
 * Title of the generated PDF document or PNG image
 * @member {String} title
 */
HtmlRendererPostRequest.prototype['title'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
HtmlRendererPostRequest['FormatEnum'] = {

    /**
     * value: "pdf"
     * @const
     */
    "pdf": "pdf",

    /**
     * value: "png"
     * @const
     */
    "png": "png"
};


/**
 * Allowed values for the <code>pageSize</code> property.
 * @enum {String}
 * @readonly
 */
HtmlRendererPostRequest['PageSizeEnum'] = {

    /**
     * value: "letter"
     * @const
     */
    "letter": "letter",

    /**
     * value: "legal"
     * @const
     */
    "legal": "legal",

    /**
     * value: "tabloid"
     * @const
     */
    "tabloid": "tabloid",

    /**
     * value: "ledger"
     * @const
     */
    "ledger": "ledger",

    /**
     * value: "a0"
     * @const
     */
    "a0": "a0",

    /**
     * value: "a1"
     * @const
     */
    "a1": "a1",

    /**
     * value: "a2"
     * @const
     */
    "a2": "a2",

    /**
     * value: "a3"
     * @const
     */
    "a3": "a3",

    /**
     * value: "a4"
     * @const
     */
    "a4": "a4",

    /**
     * value: "a5"
     * @const
     */
    "a5": "a5",

    /**
     * value: "a6"
     * @const
     */
    "a6": "a6"
};



export default HtmlRendererPostRequest;

