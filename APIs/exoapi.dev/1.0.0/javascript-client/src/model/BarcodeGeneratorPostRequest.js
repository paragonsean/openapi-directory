/**
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BarcodeGeneratorPostRequest model module.
 * @module model/BarcodeGeneratorPostRequest
 * @version 1.0.0
 */
class BarcodeGeneratorPostRequest {
    /**
     * Constructs a new <code>BarcodeGeneratorPostRequest</code>.
     * @alias module:model/BarcodeGeneratorPostRequest
     * @param type {module:model/BarcodeGeneratorPostRequest.TypeEnum} Type of code
     * @param value {String} Content to encode into the code
     */
    constructor(type, value) { 
        
        BarcodeGeneratorPostRequest.initialize(this, type, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, value) { 
        obj['backgroundColor'] = '#ffffff';
        obj['fitWidth'] = false;
        obj['foregroundColor'] = '#000000';
        obj['format'] = 'png';
        obj['showText'] = true;
        obj['type'] = type || 'qrcode';
        obj['value'] = value;
        obj['width'] = 256;
    }

    /**
     * Constructs a <code>BarcodeGeneratorPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BarcodeGeneratorPostRequest} obj Optional instance to populate.
     * @return {module:model/BarcodeGeneratorPostRequest} The populated <code>BarcodeGeneratorPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BarcodeGeneratorPostRequest();

            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = ApiClient.convertToType(data['backgroundColor'], 'String');
            }
            if (data.hasOwnProperty('fitWidth')) {
                obj['fitWidth'] = ApiClient.convertToType(data['fitWidth'], 'Boolean');
            }
            if (data.hasOwnProperty('foregroundColor')) {
                obj['foregroundColor'] = ApiClient.convertToType(data['foregroundColor'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('showText')) {
                obj['showText'] = ApiClient.convertToType(data['showText'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BarcodeGeneratorPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BarcodeGeneratorPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BarcodeGeneratorPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['backgroundColor'] && !(typeof data['backgroundColor'] === 'string' || data['backgroundColor'] instanceof String)) {
            throw new Error("Expected the field `backgroundColor` to be a primitive type in the JSON string but got " + data['backgroundColor']);
        }
        // ensure the json data is a string
        if (data['foregroundColor'] && !(typeof data['foregroundColor'] === 'string' || data['foregroundColor'] instanceof String)) {
            throw new Error("Expected the field `foregroundColor` to be a primitive type in the JSON string but got " + data['foregroundColor']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

BarcodeGeneratorPostRequest.RequiredProperties = ["type", "value"];

/**
 * Image background color (hexadecimal format)
 * @member {String} backgroundColor
 * @default '#ffffff'
 */
BarcodeGeneratorPostRequest.prototype['backgroundColor'] = '#ffffff';

/**
 * Stretch barcodes to exactly fit the `width`. Due to the nature of barcodes, where every bar's width is a multiple of the narrowest bar, stretching may result in slightly blurry images, which are more difficult for devices to scan.
 * @member {Boolean} fitWidth
 * @default false
 */
BarcodeGeneratorPostRequest.prototype['fitWidth'] = false;

/**
 * Barcode color (hexadecimal format)
 * @member {String} foregroundColor
 * @default '#000000'
 */
BarcodeGeneratorPostRequest.prototype['foregroundColor'] = '#000000';

/**
 * Output image format
 * @member {module:model/BarcodeGeneratorPostRequest.FormatEnum} format
 * @default 'png'
 */
BarcodeGeneratorPostRequest.prototype['format'] = 'png';

/**
 * Height of the PNG code image
 * @member {Number} height
 */
BarcodeGeneratorPostRequest.prototype['height'] = undefined;

/**
 * Display human-readable text under barcodes
 * @member {Boolean} showText
 * @default true
 */
BarcodeGeneratorPostRequest.prototype['showText'] = true;

/**
 * Type of code
 * @member {module:model/BarcodeGeneratorPostRequest.TypeEnum} type
 * @default 'qrcode'
 */
BarcodeGeneratorPostRequest.prototype['type'] = 'qrcode';

/**
 * Content to encode into the code
 * @member {String} value
 */
BarcodeGeneratorPostRequest.prototype['value'] = undefined;

/**
 * Width of the PNG code image
 * @member {Number} width
 * @default 256
 */
BarcodeGeneratorPostRequest.prototype['width'] = 256;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
BarcodeGeneratorPostRequest['FormatEnum'] = {

    /**
     * value: "png"
     * @const
     */
    "png": "png",

    /**
     * value: "svg"
     * @const
     */
    "svg": "svg"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BarcodeGeneratorPostRequest['TypeEnum'] = {

    /**
     * value: "auspost"
     * @const
     */
    "auspost": "auspost",

    /**
     * value: "azteccode"
     * @const
     */
    "azteccode": "azteccode",

    /**
     * value: "azteccodecompact"
     * @const
     */
    "azteccodecompact": "azteccodecompact",

    /**
     * value: "aztecrune"
     * @const
     */
    "aztecrune": "aztecrune",

    /**
     * value: "bc412"
     * @const
     */
    "bc412": "bc412",

    /**
     * value: "channelcode"
     * @const
     */
    "channelcode": "channelcode",

    /**
     * value: "codablockf"
     * @const
     */
    "codablockf": "codablockf",

    /**
     * value: "code11"
     * @const
     */
    "code11": "code11",

    /**
     * value: "code128"
     * @const
     */
    "code128": "code128",

    /**
     * value: "code16k"
     * @const
     */
    "code16k": "code16k",

    /**
     * value: "code2of5"
     * @const
     */
    "code2of5": "code2of5",

    /**
     * value: "code32"
     * @const
     */
    "code32": "code32",

    /**
     * value: "code39"
     * @const
     */
    "code39": "code39",

    /**
     * value: "code39ext"
     * @const
     */
    "code39ext": "code39ext",

    /**
     * value: "code49"
     * @const
     */
    "code49": "code49",

    /**
     * value: "code93"
     * @const
     */
    "code93": "code93",

    /**
     * value: "code93ext"
     * @const
     */
    "code93ext": "code93ext",

    /**
     * value: "codeone"
     * @const
     */
    "codeone": "codeone",

    /**
     * value: "coop2of5"
     * @const
     */
    "coop2of5": "coop2of5",

    /**
     * value: "daft"
     * @const
     */
    "daft": "daft",

    /**
     * value: "databarexpanded"
     * @const
     */
    "databarexpanded": "databarexpanded",

    /**
     * value: "databarexpandedcomposite"
     * @const
     */
    "databarexpandedcomposite": "databarexpandedcomposite",

    /**
     * value: "databarexpandedstacked"
     * @const
     */
    "databarexpandedstacked": "databarexpandedstacked",

    /**
     * value: "databarexpandedstackedcomposite"
     * @const
     */
    "databarexpandedstackedcomposite": "databarexpandedstackedcomposite",

    /**
     * value: "databarlimited"
     * @const
     */
    "databarlimited": "databarlimited",

    /**
     * value: "databarlimitedcomposite"
     * @const
     */
    "databarlimitedcomposite": "databarlimitedcomposite",

    /**
     * value: "databaromni"
     * @const
     */
    "databaromni": "databaromni",

    /**
     * value: "databaromnicomposite"
     * @const
     */
    "databaromnicomposite": "databaromnicomposite",

    /**
     * value: "databarstacked"
     * @const
     */
    "databarstacked": "databarstacked",

    /**
     * value: "databarstackedcomposite"
     * @const
     */
    "databarstackedcomposite": "databarstackedcomposite",

    /**
     * value: "databarstackedomni"
     * @const
     */
    "databarstackedomni": "databarstackedomni",

    /**
     * value: "databarstackedomnicomposite"
     * @const
     */
    "databarstackedomnicomposite": "databarstackedomnicomposite",

    /**
     * value: "databartruncated"
     * @const
     */
    "databartruncated": "databartruncated",

    /**
     * value: "databartruncatedcomposite"
     * @const
     */
    "databartruncatedcomposite": "databartruncatedcomposite",

    /**
     * value: "datalogic2of5"
     * @const
     */
    "datalogic2of5": "datalogic2of5",

    /**
     * value: "datamatrix"
     * @const
     */
    "datamatrix": "datamatrix",

    /**
     * value: "datamatrixrectangular"
     * @const
     */
    "datamatrixrectangular": "datamatrixrectangular",

    /**
     * value: "datamatrixrectangularextension"
     * @const
     */
    "datamatrixrectangularextension": "datamatrixrectangularextension",

    /**
     * value: "dotcode"
     * @const
     */
    "dotcode": "dotcode",

    /**
     * value: "ean13"
     * @const
     */
    "ean13": "ean13",

    /**
     * value: "ean13composite"
     * @const
     */
    "ean13composite": "ean13composite",

    /**
     * value: "ean14"
     * @const
     */
    "ean14": "ean14",

    /**
     * value: "ean2"
     * @const
     */
    "ean2": "ean2",

    /**
     * value: "ean5"
     * @const
     */
    "ean5": "ean5",

    /**
     * value: "ean8"
     * @const
     */
    "ean8": "ean8",

    /**
     * value: "ean8composite"
     * @const
     */
    "ean8composite": "ean8composite",

    /**
     * value: "flattermarken"
     * @const
     */
    "flattermarken": "flattermarken",

    /**
     * value: "gs1-128"
     * @const
     */
    "gs1-128": "gs1-128",

    /**
     * value: "gs1-128composite"
     * @const
     */
    "gs1-128composite": "gs1-128composite",

    /**
     * value: "gs1-cc"
     * @const
     */
    "gs1-cc": "gs1-cc",

    /**
     * value: "gs1datamatrix"
     * @const
     */
    "gs1datamatrix": "gs1datamatrix",

    /**
     * value: "gs1datamatrixrectangular"
     * @const
     */
    "gs1datamatrixrectangular": "gs1datamatrixrectangular",

    /**
     * value: "gs1northamericancoupon"
     * @const
     */
    "gs1northamericancoupon": "gs1northamericancoupon",

    /**
     * value: "gs1qrcode"
     * @const
     */
    "gs1qrcode": "gs1qrcode",

    /**
     * value: "hanxin"
     * @const
     */
    "hanxin": "hanxin",

    /**
     * value: "hibcazteccode"
     * @const
     */
    "hibcazteccode": "hibcazteccode",

    /**
     * value: "hibccodablockf"
     * @const
     */
    "hibccodablockf": "hibccodablockf",

    /**
     * value: "hibccode128"
     * @const
     */
    "hibccode128": "hibccode128",

    /**
     * value: "hibccode39"
     * @const
     */
    "hibccode39": "hibccode39",

    /**
     * value: "hibcdatamatrix"
     * @const
     */
    "hibcdatamatrix": "hibcdatamatrix",

    /**
     * value: "hibcdatamatrixrectangular"
     * @const
     */
    "hibcdatamatrixrectangular": "hibcdatamatrixrectangular",

    /**
     * value: "hibcmicropdf417"
     * @const
     */
    "hibcmicropdf417": "hibcmicropdf417",

    /**
     * value: "hibcpdf417"
     * @const
     */
    "hibcpdf417": "hibcpdf417",

    /**
     * value: "hibcqrcode"
     * @const
     */
    "hibcqrcode": "hibcqrcode",

    /**
     * value: "iata2of5"
     * @const
     */
    "iata2of5": "iata2of5",

    /**
     * value: "identcode"
     * @const
     */
    "identcode": "identcode",

    /**
     * value: "industrial2of5"
     * @const
     */
    "industrial2of5": "industrial2of5",

    /**
     * value: "interleaved2of5"
     * @const
     */
    "interleaved2of5": "interleaved2of5",

    /**
     * value: "isbn"
     * @const
     */
    "isbn": "isbn",

    /**
     * value: "ismn"
     * @const
     */
    "ismn": "ismn",

    /**
     * value: "issn"
     * @const
     */
    "issn": "issn",

    /**
     * value: "itf14"
     * @const
     */
    "itf14": "itf14",

    /**
     * value: "japanpost"
     * @const
     */
    "japanpost": "japanpost",

    /**
     * value: "kix"
     * @const
     */
    "kix": "kix",

    /**
     * value: "leitcode"
     * @const
     */
    "leitcode": "leitcode",

    /**
     * value: "mailmark"
     * @const
     */
    "mailmark": "mailmark",

    /**
     * value: "matrix2of5"
     * @const
     */
    "matrix2of5": "matrix2of5",

    /**
     * value: "maxicode"
     * @const
     */
    "maxicode": "maxicode",

    /**
     * value: "micropdf417"
     * @const
     */
    "micropdf417": "micropdf417",

    /**
     * value: "microqrcode"
     * @const
     */
    "microqrcode": "microqrcode",

    /**
     * value: "msi"
     * @const
     */
    "msi": "msi",

    /**
     * value: "onecode"
     * @const
     */
    "onecode": "onecode",

    /**
     * value: "pdf417"
     * @const
     */
    "pdf417": "pdf417",

    /**
     * value: "pdf417compact"
     * @const
     */
    "pdf417compact": "pdf417compact",

    /**
     * value: "pharmacode"
     * @const
     */
    "pharmacode": "pharmacode",

    /**
     * value: "pharmacode2"
     * @const
     */
    "pharmacode2": "pharmacode2",

    /**
     * value: "planet"
     * @const
     */
    "planet": "planet",

    /**
     * value: "plessey"
     * @const
     */
    "plessey": "plessey",

    /**
     * value: "posicode"
     * @const
     */
    "posicode": "posicode",

    /**
     * value: "postnet"
     * @const
     */
    "postnet": "postnet",

    /**
     * value: "pzn"
     * @const
     */
    "pzn": "pzn",

    /**
     * value: "qrcode"
     * @const
     */
    "qrcode": "qrcode",

    /**
     * value: "rationalizedCodabar"
     * @const
     */
    "rationalizedCodabar": "rationalizedCodabar",

    /**
     * value: "raw"
     * @const
     */
    "raw": "raw",

    /**
     * value: "royalmail"
     * @const
     */
    "royalmail": "royalmail",

    /**
     * value: "sscc18"
     * @const
     */
    "sscc18": "sscc18",

    /**
     * value: "symbol"
     * @const
     */
    "symbol": "symbol",

    /**
     * value: "telepen"
     * @const
     */
    "telepen": "telepen",

    /**
     * value: "telepennumeric"
     * @const
     */
    "telepennumeric": "telepennumeric",

    /**
     * value: "ultracode"
     * @const
     */
    "ultracode": "ultracode",

    /**
     * value: "upca"
     * @const
     */
    "upca": "upca",

    /**
     * value: "upcacomposite"
     * @const
     */
    "upcacomposite": "upcacomposite",

    /**
     * value: "upce"
     * @const
     */
    "upce": "upce",

    /**
     * value: "upcecomposite"
     * @const
     */
    "upcecomposite": "upcecomposite"
};



export default BarcodeGeneratorPostRequest;

