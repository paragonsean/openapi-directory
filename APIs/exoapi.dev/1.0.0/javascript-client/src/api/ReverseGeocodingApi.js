/**
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BarcodeGeneratorPost400Response from '../model/BarcodeGeneratorPost400Response';
import ReverseGeocodingGet200Response from '../model/ReverseGeocodingGet200Response';

/**
* ReverseGeocoding service.
* @module api/ReverseGeocodingApi
* @version 1.0.0
*/
export default class ReverseGeocodingApi {

    /**
    * Constructs a new ReverseGeocodingApi. 
    * @alias module:api/ReverseGeocodingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reverseGeocodingGet operation.
     * @callback module:api/ReverseGeocodingApi~reverseGeocodingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReverseGeocodingGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quickly convert GPS coordinates to human-readable addresses
     * @param {Number} lat 
     * @param {Number} lon 
     * @param {Object} opts Optional parameters
     * @param {String} [locale] 
     * @param {module:api/ReverseGeocodingApi~reverseGeocodingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReverseGeocodingGet200Response}
     */
    reverseGeocodingGet(lat, lon, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling reverseGeocodingGet");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling reverseGeocodingGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lon': lon,
        'locale': opts['locale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReverseGeocodingGet200Response;
      return this.apiClient.callApi(
        '/reverse-geocoding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
