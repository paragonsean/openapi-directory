/**
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BarcodeGeneratorPost400Response from '../model/BarcodeGeneratorPost400Response';
import UnitConverterGet200Response from '../model/UnitConverterGet200Response';

/**
* UnitConverter service.
* @module api/UnitConverterApi
* @version 1.0.0
*/
export default class UnitConverterApi {

    /**
    * Constructs a new UnitConverterApi. 
    * @alias module:api/UnitConverterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the unitConverterGet operation.
     * @callback module:api/UnitConverterApi~unitConverterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnitConverterGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quickly convert between all different kinds of measurement units
     * @param {module:model/String} from 
     * @param {module:model/String} to 
     * @param {Number} value 
     * @param {module:api/UnitConverterApi~unitConverterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnitConverterGet200Response}
     */
    unitConverterGet(from, to, value, callback) {
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling unitConverterGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling unitConverterGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling unitConverterGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnitConverterGet200Response;
      return this.apiClient.callApi(
        '/unit-converter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
