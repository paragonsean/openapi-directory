/*
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HtmlRendererPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:40.666573-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HtmlRendererPostRequest {
  public static final String SERIALIZED_NAME_CSS = "css";
  @SerializedName(SERIALIZED_NAME_CSS)
  private String css;

  public static final String SERIALIZED_NAME_FOOTER = "footer";
  @SerializedName(SERIALIZED_NAME_FOOTER)
  private String footer;

  /**
   * Output format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    PDF("pdf"),
    
    PNG("png");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format = FormatEnum.PDF;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private String header;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_IMAGE_HEIGHT = "imageHeight";
  @SerializedName(SERIALIZED_NAME_IMAGE_HEIGHT)
  private Integer imageHeight;

  public static final String SERIALIZED_NAME_IMAGE_WIDTH = "imageWidth";
  @SerializedName(SERIALIZED_NAME_IMAGE_WIDTH)
  private Integer imageWidth = 512;

  public static final String SERIALIZED_NAME_LANDSCAPE = "landscape";
  @SerializedName(SERIALIZED_NAME_LANDSCAPE)
  private Boolean landscape = false;

  public static final String SERIALIZED_NAME_MARGIN = "margin";
  @SerializedName(SERIALIZED_NAME_MARGIN)
  private String margin = "0";

  public static final String SERIALIZED_NAME_MARGIN_BOTTOM = "marginBottom";
  @SerializedName(SERIALIZED_NAME_MARGIN_BOTTOM)
  private String marginBottom = "0";

  public static final String SERIALIZED_NAME_MARGIN_LEFT = "marginLeft";
  @SerializedName(SERIALIZED_NAME_MARGIN_LEFT)
  private String marginLeft = "0";

  public static final String SERIALIZED_NAME_MARGIN_RIGHT = "marginRight";
  @SerializedName(SERIALIZED_NAME_MARGIN_RIGHT)
  private String marginRight = "0";

  public static final String SERIALIZED_NAME_MARGIN_TOP = "marginTop";
  @SerializedName(SERIALIZED_NAME_MARGIN_TOP)
  private String marginTop = "0";

  public static final String SERIALIZED_NAME_PAGE_HEIGHT = "pageHeight";
  @SerializedName(SERIALIZED_NAME_PAGE_HEIGHT)
  private String pageHeight;

  /**
   * Default page size of the generated PDF document
   */
  @JsonAdapter(PageSizeEnum.Adapter.class)
  public enum PageSizeEnum {
    LETTER("letter"),
    
    LEGAL("legal"),
    
    TABLOID("tabloid"),
    
    LEDGER("ledger"),
    
    A0("a0"),
    
    A1("a1"),
    
    A2("a2"),
    
    A3("a3"),
    
    A4("a4"),
    
    A5("a5"),
    
    A6("a6");

    private String value;

    PageSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PageSizeEnum fromValue(String value) {
      for (PageSizeEnum b : PageSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PageSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PageSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PageSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PageSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PageSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private PageSizeEnum pageSize = PageSizeEnum.A4;

  public static final String SERIALIZED_NAME_PAGE_WIDTH = "pageWidth";
  @SerializedName(SERIALIZED_NAME_PAGE_WIDTH)
  private String pageWidth;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public HtmlRendererPostRequest() {
  }

  public HtmlRendererPostRequest css(String css) {
    this.css = css;
    return this;
  }

  /**
   * Custom CSS style content
   * @return css
   */
  @javax.annotation.Nullable
  public String getCss() {
    return css;
  }

  public void setCss(String css) {
    this.css = css;
  }


  public HtmlRendererPostRequest footer(String footer) {
    this.footer = footer;
    return this;
  }

  /**
   * HTML page footer content. Use special CSS classes to inject parameters: \&quot;date\&quot;, \&quot;pageNumber\&quot;, \&quot;totalPages\&quot;
   * @return footer
   */
  @javax.annotation.Nullable
  public String getFooter() {
    return footer;
  }

  public void setFooter(String footer) {
    this.footer = footer;
  }


  public HtmlRendererPostRequest format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Output format
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public HtmlRendererPostRequest header(String header) {
    this.header = header;
    return this;
  }

  /**
   * HTML page header content. Use special CSS classes to inject parameters: \&quot;date\&quot;, \&quot;pageNumber\&quot;, \&quot;totalPages\&quot;
   * @return header
   */
  @javax.annotation.Nullable
  public String getHeader() {
    return header;
  }

  public void setHeader(String header) {
    this.header = header;
  }


  public HtmlRendererPostRequest html(String html) {
    this.html = html;
    return this;
  }

  /**
   * HTML content to render
   * @return html
   */
  @javax.annotation.Nonnull
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public HtmlRendererPostRequest imageHeight(Integer imageHeight) {
    this.imageHeight = imageHeight;
    return this;
  }

  /**
   * PNG image height (in pixels). In not specified, the height will automatically adapt to the content
   * @return imageHeight
   */
  @javax.annotation.Nullable
  public Integer getImageHeight() {
    return imageHeight;
  }

  public void setImageHeight(Integer imageHeight) {
    this.imageHeight = imageHeight;
  }


  public HtmlRendererPostRequest imageWidth(Integer imageWidth) {
    this.imageWidth = imageWidth;
    return this;
  }

  /**
   * PNG image width (in pixels)
   * @return imageWidth
   */
  @javax.annotation.Nullable
  public Integer getImageWidth() {
    return imageWidth;
  }

  public void setImageWidth(Integer imageWidth) {
    this.imageWidth = imageWidth;
  }


  public HtmlRendererPostRequest landscape(Boolean landscape) {
    this.landscape = landscape;
    return this;
  }

  /**
   * PDF document orientation
   * @return landscape
   */
  @javax.annotation.Nullable
  public Boolean getLandscape() {
    return landscape;
  }

  public void setLandscape(Boolean landscape) {
    this.landscape = landscape;
  }


  public HtmlRendererPostRequest margin(String margin) {
    this.margin = margin;
    return this;
  }

  /**
   * PDF page margin (in px, mm, in or cm)
   * @return margin
   */
  @javax.annotation.Nullable
  public String getMargin() {
    return margin;
  }

  public void setMargin(String margin) {
    this.margin = margin;
  }


  public HtmlRendererPostRequest marginBottom(String marginBottom) {
    this.marginBottom = marginBottom;
    return this;
  }

  /**
   * PDF bottom margin (in px, mm, in or cm)
   * @return marginBottom
   */
  @javax.annotation.Nullable
  public String getMarginBottom() {
    return marginBottom;
  }

  public void setMarginBottom(String marginBottom) {
    this.marginBottom = marginBottom;
  }


  public HtmlRendererPostRequest marginLeft(String marginLeft) {
    this.marginLeft = marginLeft;
    return this;
  }

  /**
   * PDF left margin (in px, mm, in or cm)
   * @return marginLeft
   */
  @javax.annotation.Nullable
  public String getMarginLeft() {
    return marginLeft;
  }

  public void setMarginLeft(String marginLeft) {
    this.marginLeft = marginLeft;
  }


  public HtmlRendererPostRequest marginRight(String marginRight) {
    this.marginRight = marginRight;
    return this;
  }

  /**
   * PDF right margin (in px, mm, in or cm)
   * @return marginRight
   */
  @javax.annotation.Nullable
  public String getMarginRight() {
    return marginRight;
  }

  public void setMarginRight(String marginRight) {
    this.marginRight = marginRight;
  }


  public HtmlRendererPostRequest marginTop(String marginTop) {
    this.marginTop = marginTop;
    return this;
  }

  /**
   * PDF top margin (in px, mm, in or cm)
   * @return marginTop
   */
  @javax.annotation.Nullable
  public String getMarginTop() {
    return marginTop;
  }

  public void setMarginTop(String marginTop) {
    this.marginTop = marginTop;
  }


  public HtmlRendererPostRequest pageHeight(String pageHeight) {
    this.pageHeight = pageHeight;
    return this;
  }

  /**
   * Explicit PDF height (in px, mm, in or cm)
   * @return pageHeight
   */
  @javax.annotation.Nullable
  public String getPageHeight() {
    return pageHeight;
  }

  public void setPageHeight(String pageHeight) {
    this.pageHeight = pageHeight;
  }


  public HtmlRendererPostRequest pageSize(PageSizeEnum pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Default page size of the generated PDF document
   * @return pageSize
   */
  @javax.annotation.Nullable
  public PageSizeEnum getPageSize() {
    return pageSize;
  }

  public void setPageSize(PageSizeEnum pageSize) {
    this.pageSize = pageSize;
  }


  public HtmlRendererPostRequest pageWidth(String pageWidth) {
    this.pageWidth = pageWidth;
    return this;
  }

  /**
   * Explicit PDF width (in px, mm, in or cm)
   * @return pageWidth
   */
  @javax.annotation.Nullable
  public String getPageWidth() {
    return pageWidth;
  }

  public void setPageWidth(String pageWidth) {
    this.pageWidth = pageWidth;
  }


  public HtmlRendererPostRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the generated PDF document or PNG image
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HtmlRendererPostRequest htmlRendererPostRequest = (HtmlRendererPostRequest) o;
    return Objects.equals(this.css, htmlRendererPostRequest.css) &&
        Objects.equals(this.footer, htmlRendererPostRequest.footer) &&
        Objects.equals(this.format, htmlRendererPostRequest.format) &&
        Objects.equals(this.header, htmlRendererPostRequest.header) &&
        Objects.equals(this.html, htmlRendererPostRequest.html) &&
        Objects.equals(this.imageHeight, htmlRendererPostRequest.imageHeight) &&
        Objects.equals(this.imageWidth, htmlRendererPostRequest.imageWidth) &&
        Objects.equals(this.landscape, htmlRendererPostRequest.landscape) &&
        Objects.equals(this.margin, htmlRendererPostRequest.margin) &&
        Objects.equals(this.marginBottom, htmlRendererPostRequest.marginBottom) &&
        Objects.equals(this.marginLeft, htmlRendererPostRequest.marginLeft) &&
        Objects.equals(this.marginRight, htmlRendererPostRequest.marginRight) &&
        Objects.equals(this.marginTop, htmlRendererPostRequest.marginTop) &&
        Objects.equals(this.pageHeight, htmlRendererPostRequest.pageHeight) &&
        Objects.equals(this.pageSize, htmlRendererPostRequest.pageSize) &&
        Objects.equals(this.pageWidth, htmlRendererPostRequest.pageWidth) &&
        Objects.equals(this.title, htmlRendererPostRequest.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(css, footer, format, header, html, imageHeight, imageWidth, landscape, margin, marginBottom, marginLeft, marginRight, marginTop, pageHeight, pageSize, pageWidth, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HtmlRendererPostRequest {\n");
    sb.append("    css: ").append(toIndentedString(css)).append("\n");
    sb.append("    footer: ").append(toIndentedString(footer)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    imageHeight: ").append(toIndentedString(imageHeight)).append("\n");
    sb.append("    imageWidth: ").append(toIndentedString(imageWidth)).append("\n");
    sb.append("    landscape: ").append(toIndentedString(landscape)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    marginBottom: ").append(toIndentedString(marginBottom)).append("\n");
    sb.append("    marginLeft: ").append(toIndentedString(marginLeft)).append("\n");
    sb.append("    marginRight: ").append(toIndentedString(marginRight)).append("\n");
    sb.append("    marginTop: ").append(toIndentedString(marginTop)).append("\n");
    sb.append("    pageHeight: ").append(toIndentedString(pageHeight)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageWidth: ").append(toIndentedString(pageWidth)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("css");
    openapiFields.add("footer");
    openapiFields.add("format");
    openapiFields.add("header");
    openapiFields.add("html");
    openapiFields.add("imageHeight");
    openapiFields.add("imageWidth");
    openapiFields.add("landscape");
    openapiFields.add("margin");
    openapiFields.add("marginBottom");
    openapiFields.add("marginLeft");
    openapiFields.add("marginRight");
    openapiFields.add("marginTop");
    openapiFields.add("pageHeight");
    openapiFields.add("pageSize");
    openapiFields.add("pageWidth");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("html");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HtmlRendererPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HtmlRendererPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HtmlRendererPostRequest is not found in the empty JSON string", HtmlRendererPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HtmlRendererPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HtmlRendererPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HtmlRendererPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("css") != null && !jsonObj.get("css").isJsonNull()) && !jsonObj.get("css").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `css` to be a primitive type in the JSON string but got `%s`", jsonObj.get("css").toString()));
      }
      if ((jsonObj.get("footer") != null && !jsonObj.get("footer").isJsonNull()) && !jsonObj.get("footer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) && !jsonObj.get("header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }
      if (!jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if ((jsonObj.get("margin") != null && !jsonObj.get("margin").isJsonNull()) && !jsonObj.get("margin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `margin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("margin").toString()));
      }
      if ((jsonObj.get("marginBottom") != null && !jsonObj.get("marginBottom").isJsonNull()) && !jsonObj.get("marginBottom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marginBottom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marginBottom").toString()));
      }
      if ((jsonObj.get("marginLeft") != null && !jsonObj.get("marginLeft").isJsonNull()) && !jsonObj.get("marginLeft").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marginLeft` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marginLeft").toString()));
      }
      if ((jsonObj.get("marginRight") != null && !jsonObj.get("marginRight").isJsonNull()) && !jsonObj.get("marginRight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marginRight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marginRight").toString()));
      }
      if ((jsonObj.get("marginTop") != null && !jsonObj.get("marginTop").isJsonNull()) && !jsonObj.get("marginTop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marginTop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marginTop").toString()));
      }
      if ((jsonObj.get("pageHeight") != null && !jsonObj.get("pageHeight").isJsonNull()) && !jsonObj.get("pageHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageHeight").toString()));
      }
      if ((jsonObj.get("pageSize") != null && !jsonObj.get("pageSize").isJsonNull()) && !jsonObj.get("pageSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageSize").toString()));
      }
      // validate the optional field `pageSize`
      if (jsonObj.get("pageSize") != null && !jsonObj.get("pageSize").isJsonNull()) {
        PageSizeEnum.validateJsonElement(jsonObj.get("pageSize"));
      }
      if ((jsonObj.get("pageWidth") != null && !jsonObj.get("pageWidth").isJsonNull()) && !jsonObj.get("pageWidth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageWidth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageWidth").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HtmlRendererPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HtmlRendererPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HtmlRendererPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HtmlRendererPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<HtmlRendererPostRequest>() {
           @Override
           public void write(JsonWriter out, HtmlRendererPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HtmlRendererPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HtmlRendererPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HtmlRendererPostRequest
   * @throws IOException if the JSON string is invalid with respect to HtmlRendererPostRequest
   */
  public static HtmlRendererPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HtmlRendererPostRequest.class);
  }

  /**
   * Convert an instance of HtmlRendererPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

