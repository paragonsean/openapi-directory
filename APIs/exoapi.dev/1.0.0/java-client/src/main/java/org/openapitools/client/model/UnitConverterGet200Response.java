/*
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UnitConverterGet200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:40.666573-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UnitConverterGet200Response {
  /**
   * Source unit
   */
  @JsonAdapter(FromEnum.Adapter.class)
  public enum FromEnum {
    M_S2("m/s2"),
    
    QUOTE("'"),
    
    u("''"),
    
    DEG("deg"),
    
    GON("gon"),
    
    RAD("rad"),
    
    RAD_S("rad/s"),
    
    _ACR_US_("[acr_us]"),
    
    _SFT_I_("[sft_i]"),
    
    _SIN_I_("[sin_i]"),
    
    _SMI_US_("[smi_us]"),
    
    _SYD_I_("[syd_i]"),
    
    AR("ar"),
    
    CM2("cm2"),
    
    HAR("har"),
    
    KM2("km2"),
    
    M2("m2"),
    
    MM2("mm2"),
    
    AUD("AUD"),
    
    BGN("BGN"),
    
    BRL("BRL"),
    
    CAD("CAD"),
    
    CHF("CHF"),
    
    CNY("CNY"),
    
    CZK("CZK"),
    
    DKK("DKK"),
    
    EUR("EUR"),
    
    GBP("GBP"),
    
    HKD("HKD"),
    
    HUF("HUF"),
    
    IDR("IDR"),
    
    ILS("ILS"),
    
    INR("INR"),
    
    ISK("ISK"),
    
    JPY("JPY"),
    
    KRW("KRW"),
    
    MXN("MXN"),
    
    MYR("MYR"),
    
    NOK("NOK"),
    
    NZD("NZD"),
    
    PHP("PHP"),
    
    PLN("PLN"),
    
    RON("RON"),
    
    SEK("SEK"),
    
    SGD("SGD"),
    
    THB("THB"),
    
    TRY("TRY"),
    
    USD("USD"),
    
    ZAR("ZAR"),
    
    F("F"),
    
    C("C"),
    
    S("S"),
    
    A("A"),
    
    V("V"),
    
    OHM("Ohm"),
    
    _BTU_IT_("[Btu_IT]"),
    
    J("J"),
    
    K_W_H("kW.h"),
    
    MJ("MJ"),
    
    K_W_H_100KM("kW.h/100km"),
    
    M_J("m/J"),
    
    W_H_KM("W.h/km"),
    
    N("N"),
    
    PERCENT("%"),
    
    BPM("bpm"),
    
    HZ("Hz"),
    
    RPM("rpm"),
    
    _MI_I_GAL_BR_("[mi_i]/[gal_br]"),
    
    L_100KM("L/100km"),
    
    M_M3("m/m3"),
    
    LX("lx"),
    
    H("H"),
    
    _FT_I_("[ft_i]"),
    
    _IN_I_("[in_i]"),
    
    _MI_I_("[mi_i]"),
    
    _NMI_I_("[nmi_i]"),
    
    _YD_I_("[yd_i]"),
    
    CM("cm"),
    
    DM("dm"),
    
    KM("km"),
    
    M("m"),
    
    MM("mm"),
    
    G_KM("g/km"),
    
    KG_M("kg/m"),
    
    LM("lm"),
    
    WB("Wb"),
    
    T("T"),
    
    _LB_AV_("[lb_av]"),
    
    G("g"),
    
    KG("kg"),
    
    T2("t"),
    
    _HP_E_("[HP_e]"),
    
    _HP_M_("[HP_m]"),
    
    _HP_S_("[HP_s]"),
    
    _HP_("[HP]"),
    
    K_W("kW"),
    
    W("W"),
    
    PA("Pa"),
    
    BQ("Bq"),
    
    _KN_I_("[kn_i]"),
    
    KM_H("km/h"),
    
    M_S("m/s"),
    
    _DEG_F_("[degF]"),
    
    CEL("Cel"),
    
    K("K"),
    
    A2("a"),
    
    D("d"),
    
    H2("h"),
    
    MIN("min"),
    
    MO("mo"),
    
    S2("s"),
    
    WK("wk"),
    
    N_M("N.m"),
    
    _GAL_BR_("[gal_br]"),
    
    _PK_BR_("[pk_br]"),
    
    L("L"),
    
    M3("m3");

    private String value;

    FromEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FromEnum fromValue(String value) {
      for (FromEnum b : FromEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FromEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FromEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FromEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FromEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FromEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private FromEnum from;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private BigDecimal result;

  /**
   * Target unit
   */
  @JsonAdapter(ToEnum.Adapter.class)
  public enum ToEnum {
    M_S2("m/s2"),
    
    QUOTE("'"),
    
    u("''"),
    
    DEG("deg"),
    
    GON("gon"),
    
    RAD("rad"),
    
    RAD_S("rad/s"),
    
    _ACR_US_("[acr_us]"),
    
    _SFT_I_("[sft_i]"),
    
    _SIN_I_("[sin_i]"),
    
    _SMI_US_("[smi_us]"),
    
    _SYD_I_("[syd_i]"),
    
    AR("ar"),
    
    CM2("cm2"),
    
    HAR("har"),
    
    KM2("km2"),
    
    M2("m2"),
    
    MM2("mm2"),
    
    AUD("AUD"),
    
    BGN("BGN"),
    
    BRL("BRL"),
    
    CAD("CAD"),
    
    CHF("CHF"),
    
    CNY("CNY"),
    
    CZK("CZK"),
    
    DKK("DKK"),
    
    EUR("EUR"),
    
    GBP("GBP"),
    
    HKD("HKD"),
    
    HUF("HUF"),
    
    IDR("IDR"),
    
    ILS("ILS"),
    
    INR("INR"),
    
    ISK("ISK"),
    
    JPY("JPY"),
    
    KRW("KRW"),
    
    MXN("MXN"),
    
    MYR("MYR"),
    
    NOK("NOK"),
    
    NZD("NZD"),
    
    PHP("PHP"),
    
    PLN("PLN"),
    
    RON("RON"),
    
    SEK("SEK"),
    
    SGD("SGD"),
    
    THB("THB"),
    
    TRY("TRY"),
    
    USD("USD"),
    
    ZAR("ZAR"),
    
    F("F"),
    
    C("C"),
    
    S("S"),
    
    A("A"),
    
    V("V"),
    
    OHM("Ohm"),
    
    _BTU_IT_("[Btu_IT]"),
    
    J("J"),
    
    K_W_H("kW.h"),
    
    MJ("MJ"),
    
    K_W_H_100KM("kW.h/100km"),
    
    M_J("m/J"),
    
    W_H_KM("W.h/km"),
    
    N("N"),
    
    PERCENT("%"),
    
    BPM("bpm"),
    
    HZ("Hz"),
    
    RPM("rpm"),
    
    _MI_I_GAL_BR_("[mi_i]/[gal_br]"),
    
    L_100KM("L/100km"),
    
    M_M3("m/m3"),
    
    LX("lx"),
    
    H("H"),
    
    _FT_I_("[ft_i]"),
    
    _IN_I_("[in_i]"),
    
    _MI_I_("[mi_i]"),
    
    _NMI_I_("[nmi_i]"),
    
    _YD_I_("[yd_i]"),
    
    CM("cm"),
    
    DM("dm"),
    
    KM("km"),
    
    M("m"),
    
    MM("mm"),
    
    G_KM("g/km"),
    
    KG_M("kg/m"),
    
    LM("lm"),
    
    WB("Wb"),
    
    T("T"),
    
    _LB_AV_("[lb_av]"),
    
    G("g"),
    
    KG("kg"),
    
    T2("t"),
    
    _HP_E_("[HP_e]"),
    
    _HP_M_("[HP_m]"),
    
    _HP_S_("[HP_s]"),
    
    _HP_("[HP]"),
    
    K_W("kW"),
    
    W("W"),
    
    PA("Pa"),
    
    BQ("Bq"),
    
    _KN_I_("[kn_i]"),
    
    KM_H("km/h"),
    
    M_S("m/s"),
    
    _DEG_F_("[degF]"),
    
    CEL("Cel"),
    
    K("K"),
    
    A2("a"),
    
    D("d"),
    
    H2("h"),
    
    MIN("min"),
    
    MO("mo"),
    
    S2("s"),
    
    WK("wk"),
    
    N_M("N.m"),
    
    _GAL_BR_("[gal_br]"),
    
    _PK_BR_("[pk_br]"),
    
    L("L"),
    
    M3("m3");

    private String value;

    ToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ToEnum fromValue(String value) {
      for (ToEnum b : ToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ToEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ToEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ToEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private ToEnum to;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACCELERATION("acceleration"),
    
    ANGLE("angle"),
    
    ANGULAR_VELOCITY("angularVelocity"),
    
    AREA("area"),
    
    CURRENCY("currency"),
    
    ELECTRIC_CAPACITANCE("electricCapacitance"),
    
    ELECTRIC_CHARGE("electricCharge"),
    
    ELECTRIC_CONDUCTANCE("electricConductance"),
    
    ELECTRIC_CURRENT("electricCurrent"),
    
    ELECTRIC_POTENTIAL("electricPotential"),
    
    ELECTRIC_RESISTANCE("electricResistance"),
    
    ENERGY("energy"),
    
    ENERGY_EFFICIENCY("energyEfficiency"),
    
    FORCE("force"),
    
    FRACTION("fraction"),
    
    FREQUENCY("frequency"),
    
    FUEL_EFFICIENCY("fuelEfficiency"),
    
    ILLUMINANCE("illuminance"),
    
    INDUCTANCE("inductance"),
    
    LENGTH("length"),
    
    LINEAR_MASS_DENSITY("linearMassDensity"),
    
    LUMINOUS_FLUX("luminousFlux"),
    
    MAGNETIC_FLUX("magneticFlux"),
    
    MAGNETIC_FLUX_DENSITY("magneticFluxDensity"),
    
    MASS("mass"),
    
    POWER("power"),
    
    PRESSURE("pressure"),
    
    RADIOACTIVITY("radioactivity"),
    
    SPEED("speed"),
    
    TEMPERATURE("temperature"),
    
    TIME("time"),
    
    TORQUE("torque"),
    
    VOLUME("volume");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private BigDecimal value;

  public UnitConverterGet200Response() {
  }

  public UnitConverterGet200Response from(FromEnum from) {
    this.from = from;
    return this;
  }

  /**
   * Source unit
   * @return from
   */
  @javax.annotation.Nullable
  public FromEnum getFrom() {
    return from;
  }

  public void setFrom(FromEnum from) {
    this.from = from;
  }


  public UnitConverterGet200Response result(BigDecimal result) {
    this.result = result;
    return this;
  }

  /**
   * Result of the conversion
   * @return result
   */
  @javax.annotation.Nullable
  public BigDecimal getResult() {
    return result;
  }

  public void setResult(BigDecimal result) {
    this.result = result;
  }


  public UnitConverterGet200Response to(ToEnum to) {
    this.to = to;
    return this;
  }

  /**
   * Target unit
   * @return to
   */
  @javax.annotation.Nullable
  public ToEnum getTo() {
    return to;
  }

  public void setTo(ToEnum to) {
    this.to = to;
  }


  public UnitConverterGet200Response type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public UnitConverterGet200Response value(BigDecimal value) {
    this.value = value;
    return this;
  }

  /**
   * Value to convert
   * @return value
   */
  @javax.annotation.Nullable
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(BigDecimal value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitConverterGet200Response unitConverterGet200Response = (UnitConverterGet200Response) o;
    return Objects.equals(this.from, unitConverterGet200Response.from) &&
        Objects.equals(this.result, unitConverterGet200Response.result) &&
        Objects.equals(this.to, unitConverterGet200Response.to) &&
        Objects.equals(this.type, unitConverterGet200Response.type) &&
        Objects.equals(this.value, unitConverterGet200Response.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, result, to, type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitConverterGet200Response {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("result");
    openapiFields.add("to");
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnitConverterGet200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnitConverterGet200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnitConverterGet200Response is not found in the empty JSON string", UnitConverterGet200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnitConverterGet200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnitConverterGet200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        FromEnum.validateJsonElement(jsonObj.get("from"));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      // validate the optional field `to`
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        ToEnum.validateJsonElement(jsonObj.get("to"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnitConverterGet200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnitConverterGet200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnitConverterGet200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnitConverterGet200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<UnitConverterGet200Response>() {
           @Override
           public void write(JsonWriter out, UnitConverterGet200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnitConverterGet200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnitConverterGet200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnitConverterGet200Response
   * @throws IOException if the JSON string is invalid with respect to UnitConverterGet200Response
   */
  public static UnitConverterGet200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnitConverterGet200Response.class);
  }

  /**
   * Convert an instance of UnitConverterGet200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

