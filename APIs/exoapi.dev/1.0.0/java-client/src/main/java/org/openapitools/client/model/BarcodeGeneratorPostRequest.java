/*
 * ExoAPI
 * Universal API for developers - Geocoding, HTML rendering, barcode generation & more
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@exoapi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BarcodeGeneratorPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:40.666573-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BarcodeGeneratorPostRequest {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor = "#ffffff";

  public static final String SERIALIZED_NAME_FIT_WIDTH = "fitWidth";
  @SerializedName(SERIALIZED_NAME_FIT_WIDTH)
  private Boolean fitWidth = false;

  public static final String SERIALIZED_NAME_FOREGROUND_COLOR = "foregroundColor";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_COLOR)
  private String foregroundColor = "#000000";

  /**
   * Output image format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    PNG("png"),
    
    SVG("svg");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format = FormatEnum.PNG;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_SHOW_TEXT = "showText";
  @SerializedName(SERIALIZED_NAME_SHOW_TEXT)
  private Boolean showText = true;

  /**
   * Type of code
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AUSPOST("auspost"),
    
    AZTECCODE("azteccode"),
    
    AZTECCODECOMPACT("azteccodecompact"),
    
    AZTECRUNE("aztecrune"),
    
    BC412("bc412"),
    
    CHANNELCODE("channelcode"),
    
    CODABLOCKF("codablockf"),
    
    CODE11("code11"),
    
    CODE128("code128"),
    
    CODE16K("code16k"),
    
    CODE2OF5("code2of5"),
    
    CODE32("code32"),
    
    CODE39("code39"),
    
    CODE39EXT("code39ext"),
    
    CODE49("code49"),
    
    CODE93("code93"),
    
    CODE93EXT("code93ext"),
    
    CODEONE("codeone"),
    
    COOP2OF5("coop2of5"),
    
    DAFT("daft"),
    
    DATABAREXPANDED("databarexpanded"),
    
    DATABAREXPANDEDCOMPOSITE("databarexpandedcomposite"),
    
    DATABAREXPANDEDSTACKED("databarexpandedstacked"),
    
    DATABAREXPANDEDSTACKEDCOMPOSITE("databarexpandedstackedcomposite"),
    
    DATABARLIMITED("databarlimited"),
    
    DATABARLIMITEDCOMPOSITE("databarlimitedcomposite"),
    
    DATABAROMNI("databaromni"),
    
    DATABAROMNICOMPOSITE("databaromnicomposite"),
    
    DATABARSTACKED("databarstacked"),
    
    DATABARSTACKEDCOMPOSITE("databarstackedcomposite"),
    
    DATABARSTACKEDOMNI("databarstackedomni"),
    
    DATABARSTACKEDOMNICOMPOSITE("databarstackedomnicomposite"),
    
    DATABARTRUNCATED("databartruncated"),
    
    DATABARTRUNCATEDCOMPOSITE("databartruncatedcomposite"),
    
    DATALOGIC2OF5("datalogic2of5"),
    
    DATAMATRIX("datamatrix"),
    
    DATAMATRIXRECTANGULAR("datamatrixrectangular"),
    
    DATAMATRIXRECTANGULAREXTENSION("datamatrixrectangularextension"),
    
    DOTCODE("dotcode"),
    
    EAN13("ean13"),
    
    EAN13COMPOSITE("ean13composite"),
    
    EAN14("ean14"),
    
    EAN2("ean2"),
    
    EAN5("ean5"),
    
    EAN8("ean8"),
    
    EAN8COMPOSITE("ean8composite"),
    
    FLATTERMARKEN("flattermarken"),
    
    GS1_128("gs1-128"),
    
    GS1_128COMPOSITE("gs1-128composite"),
    
    GS1_CC("gs1-cc"),
    
    GS1DATAMATRIX("gs1datamatrix"),
    
    GS1DATAMATRIXRECTANGULAR("gs1datamatrixrectangular"),
    
    GS1NORTHAMERICANCOUPON("gs1northamericancoupon"),
    
    GS1QRCODE("gs1qrcode"),
    
    HANXIN("hanxin"),
    
    HIBCAZTECCODE("hibcazteccode"),
    
    HIBCCODABLOCKF("hibccodablockf"),
    
    HIBCCODE128("hibccode128"),
    
    HIBCCODE39("hibccode39"),
    
    HIBCDATAMATRIX("hibcdatamatrix"),
    
    HIBCDATAMATRIXRECTANGULAR("hibcdatamatrixrectangular"),
    
    HIBCMICROPDF417("hibcmicropdf417"),
    
    HIBCPDF417("hibcpdf417"),
    
    HIBCQRCODE("hibcqrcode"),
    
    IATA2OF5("iata2of5"),
    
    IDENTCODE("identcode"),
    
    INDUSTRIAL2OF5("industrial2of5"),
    
    INTERLEAVED2OF5("interleaved2of5"),
    
    ISBN("isbn"),
    
    ISMN("ismn"),
    
    ISSN("issn"),
    
    ITF14("itf14"),
    
    JAPANPOST("japanpost"),
    
    KIX("kix"),
    
    LEITCODE("leitcode"),
    
    MAILMARK("mailmark"),
    
    MATRIX2OF5("matrix2of5"),
    
    MAXICODE("maxicode"),
    
    MICROPDF417("micropdf417"),
    
    MICROQRCODE("microqrcode"),
    
    MSI("msi"),
    
    ONECODE("onecode"),
    
    PDF417("pdf417"),
    
    PDF417COMPACT("pdf417compact"),
    
    PHARMACODE("pharmacode"),
    
    PHARMACODE2("pharmacode2"),
    
    PLANET("planet"),
    
    PLESSEY("plessey"),
    
    POSICODE("posicode"),
    
    POSTNET("postnet"),
    
    PZN("pzn"),
    
    QRCODE("qrcode"),
    
    RATIONALIZED_CODABAR("rationalizedCodabar"),
    
    RAW("raw"),
    
    ROYALMAIL("royalmail"),
    
    SSCC18("sscc18"),
    
    SYMBOL("symbol"),
    
    TELEPEN("telepen"),
    
    TELEPENNUMERIC("telepennumeric"),
    
    ULTRACODE("ultracode"),
    
    UPCA("upca"),
    
    UPCACOMPOSITE("upcacomposite"),
    
    UPCE("upce"),
    
    UPCECOMPOSITE("upcecomposite");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.QRCODE;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width = 256;

  public BarcodeGeneratorPostRequest() {
  }

  public BarcodeGeneratorPostRequest backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Image background color (hexadecimal format)
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public BarcodeGeneratorPostRequest fitWidth(Boolean fitWidth) {
    this.fitWidth = fitWidth;
    return this;
  }

  /**
   * Stretch barcodes to exactly fit the &#x60;width&#x60;. Due to the nature of barcodes, where every bar&#39;s width is a multiple of the narrowest bar, stretching may result in slightly blurry images, which are more difficult for devices to scan.
   * @return fitWidth
   */
  @javax.annotation.Nullable
  public Boolean getFitWidth() {
    return fitWidth;
  }

  public void setFitWidth(Boolean fitWidth) {
    this.fitWidth = fitWidth;
  }


  public BarcodeGeneratorPostRequest foregroundColor(String foregroundColor) {
    this.foregroundColor = foregroundColor;
    return this;
  }

  /**
   * Barcode color (hexadecimal format)
   * @return foregroundColor
   */
  @javax.annotation.Nullable
  public String getForegroundColor() {
    return foregroundColor;
  }

  public void setForegroundColor(String foregroundColor) {
    this.foregroundColor = foregroundColor;
  }


  public BarcodeGeneratorPostRequest format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Output image format
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public BarcodeGeneratorPostRequest height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Height of the PNG code image
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public BarcodeGeneratorPostRequest showText(Boolean showText) {
    this.showText = showText;
    return this;
  }

  /**
   * Display human-readable text under barcodes
   * @return showText
   */
  @javax.annotation.Nullable
  public Boolean getShowText() {
    return showText;
  }

  public void setShowText(Boolean showText) {
    this.showText = showText;
  }


  public BarcodeGeneratorPostRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of code
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public BarcodeGeneratorPostRequest value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Content to encode into the code
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public BarcodeGeneratorPostRequest width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Width of the PNG code image
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BarcodeGeneratorPostRequest barcodeGeneratorPostRequest = (BarcodeGeneratorPostRequest) o;
    return Objects.equals(this.backgroundColor, barcodeGeneratorPostRequest.backgroundColor) &&
        Objects.equals(this.fitWidth, barcodeGeneratorPostRequest.fitWidth) &&
        Objects.equals(this.foregroundColor, barcodeGeneratorPostRequest.foregroundColor) &&
        Objects.equals(this.format, barcodeGeneratorPostRequest.format) &&
        Objects.equals(this.height, barcodeGeneratorPostRequest.height) &&
        Objects.equals(this.showText, barcodeGeneratorPostRequest.showText) &&
        Objects.equals(this.type, barcodeGeneratorPostRequest.type) &&
        Objects.equals(this.value, barcodeGeneratorPostRequest.value) &&
        Objects.equals(this.width, barcodeGeneratorPostRequest.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, fitWidth, foregroundColor, format, height, showText, type, value, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BarcodeGeneratorPostRequest {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    fitWidth: ").append(toIndentedString(fitWidth)).append("\n");
    sb.append("    foregroundColor: ").append(toIndentedString(foregroundColor)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    showText: ").append(toIndentedString(showText)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColor");
    openapiFields.add("fitWidth");
    openapiFields.add("foregroundColor");
    openapiFields.add("format");
    openapiFields.add("height");
    openapiFields.add("showText");
    openapiFields.add("type");
    openapiFields.add("value");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BarcodeGeneratorPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BarcodeGeneratorPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BarcodeGeneratorPostRequest is not found in the empty JSON string", BarcodeGeneratorPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BarcodeGeneratorPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BarcodeGeneratorPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BarcodeGeneratorPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) && !jsonObj.get("backgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundColor").toString()));
      }
      if ((jsonObj.get("foregroundColor") != null && !jsonObj.get("foregroundColor").isJsonNull()) && !jsonObj.get("foregroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foregroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foregroundColor").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BarcodeGeneratorPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BarcodeGeneratorPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BarcodeGeneratorPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BarcodeGeneratorPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BarcodeGeneratorPostRequest>() {
           @Override
           public void write(JsonWriter out, BarcodeGeneratorPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BarcodeGeneratorPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BarcodeGeneratorPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BarcodeGeneratorPostRequest
   * @throws IOException if the JSON string is invalid with respect to BarcodeGeneratorPostRequest
   */
  public static BarcodeGeneratorPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BarcodeGeneratorPostRequest.class);
  }

  /**
   * Convert an instance of BarcodeGeneratorPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

