# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.motorcycle_base_listing import MotorcycleBaseListing
from openapi_server.models.motorcycle_search_facets import MotorcycleSearchFacets
from openapi_server.models.motorcycle_search_range_facets import MotorcycleSearchRangeFacets
from openapi_server.models.motorcycle_search_stats import MotorcycleSearchStats
from openapi_server import util


class MotorcycleSearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facets: List[MotorcycleSearchFacets]=None, listings: List[MotorcycleBaseListing]=None, num_found: int=None, range_facets: List[MotorcycleSearchRangeFacets]=None, stats: List[MotorcycleSearchStats]=None):
        """MotorcycleSearchResponse - a model defined in OpenAPI

        :param facets: The facets of this MotorcycleSearchResponse.
        :param listings: The listings of this MotorcycleSearchResponse.
        :param num_found: The num_found of this MotorcycleSearchResponse.
        :param range_facets: The range_facets of this MotorcycleSearchResponse.
        :param stats: The stats of this MotorcycleSearchResponse.
        """
        self.openapi_types = {
            'facets': List[MotorcycleSearchFacets],
            'listings': List[MotorcycleBaseListing],
            'num_found': int,
            'range_facets': List[MotorcycleSearchRangeFacets],
            'stats': List[MotorcycleSearchStats]
        }

        self.attribute_map = {
            'facets': 'facets',
            'listings': 'listings',
            'num_found': 'num_found',
            'range_facets': 'range_facets',
            'stats': 'stats'
        }

        self._facets = facets
        self._listings = listings
        self._num_found = num_found
        self._range_facets = range_facets
        self._stats = stats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MotorcycleSearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MotorcycleSearchResponse of this MotorcycleSearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facets(self):
        """Gets the facets of this MotorcycleSearchResponse.


        :return: The facets of this MotorcycleSearchResponse.
        :rtype: List[MotorcycleSearchFacets]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this MotorcycleSearchResponse.


        :param facets: The facets of this MotorcycleSearchResponse.
        :type facets: List[MotorcycleSearchFacets]
        """

        self._facets = facets

    @property
    def listings(self):
        """Gets the listings of this MotorcycleSearchResponse.


        :return: The listings of this MotorcycleSearchResponse.
        :rtype: List[MotorcycleBaseListing]
        """
        return self._listings

    @listings.setter
    def listings(self, listings):
        """Sets the listings of this MotorcycleSearchResponse.


        :param listings: The listings of this MotorcycleSearchResponse.
        :type listings: List[MotorcycleBaseListing]
        """

        self._listings = listings

    @property
    def num_found(self):
        """Gets the num_found of this MotorcycleSearchResponse.

        The number of listings found

        :return: The num_found of this MotorcycleSearchResponse.
        :rtype: int
        """
        return self._num_found

    @num_found.setter
    def num_found(self, num_found):
        """Sets the num_found of this MotorcycleSearchResponse.

        The number of listings found

        :param num_found: The num_found of this MotorcycleSearchResponse.
        :type num_found: int
        """

        self._num_found = num_found

    @property
    def range_facets(self):
        """Gets the range_facets of this MotorcycleSearchResponse.


        :return: The range_facets of this MotorcycleSearchResponse.
        :rtype: List[MotorcycleSearchRangeFacets]
        """
        return self._range_facets

    @range_facets.setter
    def range_facets(self, range_facets):
        """Sets the range_facets of this MotorcycleSearchResponse.


        :param range_facets: The range_facets of this MotorcycleSearchResponse.
        :type range_facets: List[MotorcycleSearchRangeFacets]
        """

        self._range_facets = range_facets

    @property
    def stats(self):
        """Gets the stats of this MotorcycleSearchResponse.


        :return: The stats of this MotorcycleSearchResponse.
        :rtype: List[MotorcycleSearchStats]
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this MotorcycleSearchResponse.


        :param stats: The stats of this MotorcycleSearchResponse.
        :type stats: List[MotorcycleSearchStats]
        """

        self._stats = stats
