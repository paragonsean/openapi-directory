# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrendPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dom: float=None, miles: float=None, msrp: float=None, price: float=None, units: float=None):
        """TrendPoint - a model defined in OpenAPI

        :param dom: The dom of this TrendPoint.
        :param miles: The miles of this TrendPoint.
        :param msrp: The msrp of this TrendPoint.
        :param price: The price of this TrendPoint.
        :param units: The units of this TrendPoint.
        """
        self.openapi_types = {
            'dom': float,
            'miles': float,
            'msrp': float,
            'price': float,
            'units': float
        }

        self.attribute_map = {
            'dom': 'dom',
            'miles': 'miles',
            'msrp': 'msrp',
            'price': 'price',
            'units': 'units'
        }

        self._dom = dom
        self._miles = miles
        self._msrp = msrp
        self._price = price
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrendPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrendPoint of this TrendPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dom(self):
        """Gets the dom of this TrendPoint.

        Days on Market

        :return: The dom of this TrendPoint.
        :rtype: float
        """
        return self._dom

    @dom.setter
    def dom(self, dom):
        """Sets the dom of this TrendPoint.

        Days on Market

        :param dom: The dom of this TrendPoint.
        :type dom: float
        """

        self._dom = dom

    @property
    def miles(self):
        """Gets the miles of this TrendPoint.

        Miles

        :return: The miles of this TrendPoint.
        :rtype: float
        """
        return self._miles

    @miles.setter
    def miles(self, miles):
        """Sets the miles of this TrendPoint.

        Miles

        :param miles: The miles of this TrendPoint.
        :type miles: float
        """

        self._miles = miles

    @property
    def msrp(self):
        """Gets the msrp of this TrendPoint.

        MSRP

        :return: The msrp of this TrendPoint.
        :rtype: float
        """
        return self._msrp

    @msrp.setter
    def msrp(self, msrp):
        """Sets the msrp of this TrendPoint.

        MSRP

        :param msrp: The msrp of this TrendPoint.
        :type msrp: float
        """

        self._msrp = msrp

    @property
    def price(self):
        """Gets the price of this TrendPoint.

        Price

        :return: The price of this TrendPoint.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TrendPoint.

        Price

        :param price: The price of this TrendPoint.
        :type price: float
        """

        self._price = price

    @property
    def units(self):
        """Gets the units of this TrendPoint.

        Units

        :return: The units of this TrendPoint.
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this TrendPoint.

        Units

        :param units: The units of this TrendPoint.
        :type units: float
        """

        self._units = units
