# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PredictedSpecs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_exterior_color: str=None, base_interior_color: str=None, carfax_1_owner: bool=None, carfax_clean_title: bool=None, city_mpg: float=None, cylinders: int=None, doors: int=None, drivetrain: str=None, engine_block: str=None, engine_size: float=None, highway_mpg: float=None, is_certified: bool=None, latitude: float=None, longitude: float=None, make: str=None, miles: int=None, model: str=None, transmission: str=None, trim: str=None, year: int=None):
        """PredictedSpecs - a model defined in OpenAPI

        :param base_exterior_color: The base_exterior_color of this PredictedSpecs.
        :param base_interior_color: The base_interior_color of this PredictedSpecs.
        :param carfax_1_owner: The carfax_1_owner of this PredictedSpecs.
        :param carfax_clean_title: The carfax_clean_title of this PredictedSpecs.
        :param city_mpg: The city_mpg of this PredictedSpecs.
        :param cylinders: The cylinders of this PredictedSpecs.
        :param doors: The doors of this PredictedSpecs.
        :param drivetrain: The drivetrain of this PredictedSpecs.
        :param engine_block: The engine_block of this PredictedSpecs.
        :param engine_size: The engine_size of this PredictedSpecs.
        :param highway_mpg: The highway_mpg of this PredictedSpecs.
        :param is_certified: The is_certified of this PredictedSpecs.
        :param latitude: The latitude of this PredictedSpecs.
        :param longitude: The longitude of this PredictedSpecs.
        :param make: The make of this PredictedSpecs.
        :param miles: The miles of this PredictedSpecs.
        :param model: The model of this PredictedSpecs.
        :param transmission: The transmission of this PredictedSpecs.
        :param trim: The trim of this PredictedSpecs.
        :param year: The year of this PredictedSpecs.
        """
        self.openapi_types = {
            'base_exterior_color': str,
            'base_interior_color': str,
            'carfax_1_owner': bool,
            'carfax_clean_title': bool,
            'city_mpg': float,
            'cylinders': int,
            'doors': int,
            'drivetrain': str,
            'engine_block': str,
            'engine_size': float,
            'highway_mpg': float,
            'is_certified': bool,
            'latitude': float,
            'longitude': float,
            'make': str,
            'miles': int,
            'model': str,
            'transmission': str,
            'trim': str,
            'year': int
        }

        self.attribute_map = {
            'base_exterior_color': 'base_exterior_color',
            'base_interior_color': 'base_interior_color',
            'carfax_1_owner': 'carfax_1_owner',
            'carfax_clean_title': 'carfax_clean_title',
            'city_mpg': 'city_mpg',
            'cylinders': 'cylinders',
            'doors': 'doors',
            'drivetrain': 'drivetrain',
            'engine_block': 'engine_block',
            'engine_size': 'engine_size',
            'highway_mpg': 'highway_mpg',
            'is_certified': 'is_certified',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'make': 'make',
            'miles': 'miles',
            'model': 'model',
            'transmission': 'transmission',
            'trim': 'trim',
            'year': 'year'
        }

        self._base_exterior_color = base_exterior_color
        self._base_interior_color = base_interior_color
        self._carfax_1_owner = carfax_1_owner
        self._carfax_clean_title = carfax_clean_title
        self._city_mpg = city_mpg
        self._cylinders = cylinders
        self._doors = doors
        self._drivetrain = drivetrain
        self._engine_block = engine_block
        self._engine_size = engine_size
        self._highway_mpg = highway_mpg
        self._is_certified = is_certified
        self._latitude = latitude
        self._longitude = longitude
        self._make = make
        self._miles = miles
        self._model = model
        self._transmission = transmission
        self._trim = trim
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictedSpecs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PredictedSpecs of this PredictedSpecs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_exterior_color(self):
        """Gets the base_exterior_color of this PredictedSpecs.

        Base exterior color of vehicle

        :return: The base_exterior_color of this PredictedSpecs.
        :rtype: str
        """
        return self._base_exterior_color

    @base_exterior_color.setter
    def base_exterior_color(self, base_exterior_color):
        """Sets the base_exterior_color of this PredictedSpecs.

        Base exterior color of vehicle

        :param base_exterior_color: The base_exterior_color of this PredictedSpecs.
        :type base_exterior_color: str
        """

        self._base_exterior_color = base_exterior_color

    @property
    def base_interior_color(self):
        """Gets the base_interior_color of this PredictedSpecs.

        base interior color of vehicle

        :return: The base_interior_color of this PredictedSpecs.
        :rtype: str
        """
        return self._base_interior_color

    @base_interior_color.setter
    def base_interior_color(self, base_interior_color):
        """Sets the base_interior_color of this PredictedSpecs.

        base interior color of vehicle

        :param base_interior_color: The base_interior_color of this PredictedSpecs.
        :type base_interior_color: str
        """

        self._base_interior_color = base_interior_color

    @property
    def carfax_1_owner(self):
        """Gets the carfax_1_owner of this PredictedSpecs.

        Indicates whether car has had only one owner or not

        :return: The carfax_1_owner of this PredictedSpecs.
        :rtype: bool
        """
        return self._carfax_1_owner

    @carfax_1_owner.setter
    def carfax_1_owner(self, carfax_1_owner):
        """Sets the carfax_1_owner of this PredictedSpecs.

        Indicates whether car has had only one owner or not

        :param carfax_1_owner: The carfax_1_owner of this PredictedSpecs.
        :type carfax_1_owner: bool
        """

        self._carfax_1_owner = carfax_1_owner

    @property
    def carfax_clean_title(self):
        """Gets the carfax_clean_title of this PredictedSpecs.

        Indicates whether car has clean ownership records

        :return: The carfax_clean_title of this PredictedSpecs.
        :rtype: bool
        """
        return self._carfax_clean_title

    @carfax_clean_title.setter
    def carfax_clean_title(self, carfax_clean_title):
        """Sets the carfax_clean_title of this PredictedSpecs.

        Indicates whether car has clean ownership records

        :param carfax_clean_title: The carfax_clean_title of this PredictedSpecs.
        :type carfax_clean_title: bool
        """

        self._carfax_clean_title = carfax_clean_title

    @property
    def city_mpg(self):
        """Gets the city_mpg of this PredictedSpecs.

        City mileage

        :return: The city_mpg of this PredictedSpecs.
        :rtype: float
        """
        return self._city_mpg

    @city_mpg.setter
    def city_mpg(self, city_mpg):
        """Sets the city_mpg of this PredictedSpecs.

        City mileage

        :param city_mpg: The city_mpg of this PredictedSpecs.
        :type city_mpg: float
        """

        self._city_mpg = city_mpg

    @property
    def cylinders(self):
        """Gets the cylinders of this PredictedSpecs.

        Number of cylinders

        :return: The cylinders of this PredictedSpecs.
        :rtype: int
        """
        return self._cylinders

    @cylinders.setter
    def cylinders(self, cylinders):
        """Sets the cylinders of this PredictedSpecs.

        Number of cylinders

        :param cylinders: The cylinders of this PredictedSpecs.
        :type cylinders: int
        """

        self._cylinders = cylinders

    @property
    def doors(self):
        """Gets the doors of this PredictedSpecs.

        Number of doors

        :return: The doors of this PredictedSpecs.
        :rtype: int
        """
        return self._doors

    @doors.setter
    def doors(self, doors):
        """Sets the doors of this PredictedSpecs.

        Number of doors

        :param doors: The doors of this PredictedSpecs.
        :type doors: int
        """

        self._doors = doors

    @property
    def drivetrain(self):
        """Gets the drivetrain of this PredictedSpecs.

        Drivetrain of the vehicle

        :return: The drivetrain of this PredictedSpecs.
        :rtype: str
        """
        return self._drivetrain

    @drivetrain.setter
    def drivetrain(self, drivetrain):
        """Sets the drivetrain of this PredictedSpecs.

        Drivetrain of the vehicle

        :param drivetrain: The drivetrain of this PredictedSpecs.
        :type drivetrain: str
        """

        self._drivetrain = drivetrain

    @property
    def engine_block(self):
        """Gets the engine_block of this PredictedSpecs.

        Engine block of the vehicle

        :return: The engine_block of this PredictedSpecs.
        :rtype: str
        """
        return self._engine_block

    @engine_block.setter
    def engine_block(self, engine_block):
        """Sets the engine_block of this PredictedSpecs.

        Engine block of the vehicle

        :param engine_block: The engine_block of this PredictedSpecs.
        :type engine_block: str
        """

        self._engine_block = engine_block

    @property
    def engine_size(self):
        """Gets the engine_size of this PredictedSpecs.

        Engine size

        :return: The engine_size of this PredictedSpecs.
        :rtype: float
        """
        return self._engine_size

    @engine_size.setter
    def engine_size(self, engine_size):
        """Sets the engine_size of this PredictedSpecs.

        Engine size

        :param engine_size: The engine_size of this PredictedSpecs.
        :type engine_size: float
        """

        self._engine_size = engine_size

    @property
    def highway_mpg(self):
        """Gets the highway_mpg of this PredictedSpecs.

        Highway mileage

        :return: The highway_mpg of this PredictedSpecs.
        :rtype: float
        """
        return self._highway_mpg

    @highway_mpg.setter
    def highway_mpg(self, highway_mpg):
        """Sets the highway_mpg of this PredictedSpecs.

        Highway mileage

        :param highway_mpg: The highway_mpg of this PredictedSpecs.
        :type highway_mpg: float
        """

        self._highway_mpg = highway_mpg

    @property
    def is_certified(self):
        """Gets the is_certified of this PredictedSpecs.

        Certified vehicle

        :return: The is_certified of this PredictedSpecs.
        :rtype: bool
        """
        return self._is_certified

    @is_certified.setter
    def is_certified(self, is_certified):
        """Sets the is_certified of this PredictedSpecs.

        Certified vehicle

        :param is_certified: The is_certified of this PredictedSpecs.
        :type is_certified: bool
        """

        self._is_certified = is_certified

    @property
    def latitude(self):
        """Gets the latitude of this PredictedSpecs.

        Latutide for the vehicle location

        :return: The latitude of this PredictedSpecs.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this PredictedSpecs.

        Latutide for the vehicle location

        :param latitude: The latitude of this PredictedSpecs.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this PredictedSpecs.

        Longitude for the vehicle location

        :return: The longitude of this PredictedSpecs.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this PredictedSpecs.

        Longitude for the vehicle location

        :param longitude: The longitude of this PredictedSpecs.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def make(self):
        """Gets the make of this PredictedSpecs.

        make

        :return: The make of this PredictedSpecs.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this PredictedSpecs.

        make

        :param make: The make of this PredictedSpecs.
        :type make: str
        """

        self._make = make

    @property
    def miles(self):
        """Gets the miles of this PredictedSpecs.

        Miles

        :return: The miles of this PredictedSpecs.
        :rtype: int
        """
        return self._miles

    @miles.setter
    def miles(self, miles):
        """Sets the miles of this PredictedSpecs.

        Miles

        :param miles: The miles of this PredictedSpecs.
        :type miles: int
        """

        self._miles = miles

    @property
    def model(self):
        """Gets the model of this PredictedSpecs.

        model

        :return: The model of this PredictedSpecs.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PredictedSpecs.

        model

        :param model: The model of this PredictedSpecs.
        :type model: str
        """

        self._model = model

    @property
    def transmission(self):
        """Gets the transmission of this PredictedSpecs.

        transmission

        :return: The transmission of this PredictedSpecs.
        :rtype: str
        """
        return self._transmission

    @transmission.setter
    def transmission(self, transmission):
        """Sets the transmission of this PredictedSpecs.

        transmission

        :param transmission: The transmission of this PredictedSpecs.
        :type transmission: str
        """

        self._transmission = transmission

    @property
    def trim(self):
        """Gets the trim of this PredictedSpecs.

        trim

        :return: The trim of this PredictedSpecs.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this PredictedSpecs.

        trim

        :param trim: The trim of this PredictedSpecs.
        :type trim: str
        """

        self._trim = trim

    @property
    def year(self):
        """Gets the year of this PredictedSpecs.

        year

        :return: The year of this PredictedSpecs.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this PredictedSpecs.

        year

        :param year: The year of this PredictedSpecs.
        :type year: int
        """

        self._year = year
