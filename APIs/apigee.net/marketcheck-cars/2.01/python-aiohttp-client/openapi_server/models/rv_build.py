# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RVBuild(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area: str=None, _class: str=None, engine: str=None, fuel_type: str=None, gvwr: str=None, length: str=None, made_in: str=None, make: str=None, model: str=None, sleeps: str=None, slideouts: str=None, transmission: str=None, year: int=None):
        """RVBuild - a model defined in OpenAPI

        :param area: The area of this RVBuild.
        :param _class: The _class of this RVBuild.
        :param engine: The engine of this RVBuild.
        :param fuel_type: The fuel_type of this RVBuild.
        :param gvwr: The gvwr of this RVBuild.
        :param length: The length of this RVBuild.
        :param made_in: The made_in of this RVBuild.
        :param make: The make of this RVBuild.
        :param model: The model of this RVBuild.
        :param sleeps: The sleeps of this RVBuild.
        :param slideouts: The slideouts of this RVBuild.
        :param transmission: The transmission of this RVBuild.
        :param year: The year of this RVBuild.
        """
        self.openapi_types = {
            'area': str,
            '_class': str,
            'engine': str,
            'fuel_type': str,
            'gvwr': str,
            'length': str,
            'made_in': str,
            'make': str,
            'model': str,
            'sleeps': str,
            'slideouts': str,
            'transmission': str,
            'year': int
        }

        self.attribute_map = {
            'area': 'area',
            '_class': 'class',
            'engine': 'engine',
            'fuel_type': 'fuel_type',
            'gvwr': 'gvwr',
            'length': 'length',
            'made_in': 'made_in',
            'make': 'make',
            'model': 'model',
            'sleeps': 'sleeps',
            'slideouts': 'slideouts',
            'transmission': 'transmission',
            'year': 'year'
        }

        self._area = area
        self.__class = _class
        self._engine = engine
        self._fuel_type = fuel_type
        self._gvwr = gvwr
        self._length = length
        self._made_in = made_in
        self._make = make
        self._model = model
        self._sleeps = sleeps
        self._slideouts = slideouts
        self._transmission = transmission
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RVBuild':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RVBuild of this RVBuild.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self):
        """Gets the area of this RVBuild.

        Area of the RV

        :return: The area of this RVBuild.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this RVBuild.

        Area of the RV

        :param area: The area of this RVBuild.
        :type area: str
        """

        self._area = area

    @property
    def _class(self):
        """Gets the _class of this RVBuild.

        Class of the RV

        :return: The _class of this RVBuild.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this RVBuild.

        Class of the RV

        :param _class: The _class of this RVBuild.
        :type _class: str
        """

        self.__class = _class

    @property
    def engine(self):
        """Gets the engine of this RVBuild.

        Engine of the RV

        :return: The engine of this RVBuild.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this RVBuild.

        Engine of the RV

        :param engine: The engine of this RVBuild.
        :type engine: str
        """

        self._engine = engine

    @property
    def fuel_type(self):
        """Gets the fuel_type of this RVBuild.

        Fuel type of the RV

        :return: The fuel_type of this RVBuild.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this RVBuild.

        Fuel type of the RV

        :param fuel_type: The fuel_type of this RVBuild.
        :type fuel_type: str
        """

        self._fuel_type = fuel_type

    @property
    def gvwr(self):
        """Gets the gvwr of this RVBuild.

        Gross Vehicle Weight Ratio of RV

        :return: The gvwr of this RVBuild.
        :rtype: str
        """
        return self._gvwr

    @gvwr.setter
    def gvwr(self, gvwr):
        """Sets the gvwr of this RVBuild.

        Gross Vehicle Weight Ratio of RV

        :param gvwr: The gvwr of this RVBuild.
        :type gvwr: str
        """

        self._gvwr = gvwr

    @property
    def length(self):
        """Gets the length of this RVBuild.

        Length of the RV

        :return: The length of this RVBuild.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this RVBuild.

        Length of the RV

        :param length: The length of this RVBuild.
        :type length: str
        """

        self._length = length

    @property
    def made_in(self):
        """Gets the made_in of this RVBuild.

        Made in of the RV

        :return: The made_in of this RVBuild.
        :rtype: str
        """
        return self._made_in

    @made_in.setter
    def made_in(self, made_in):
        """Sets the made_in of this RVBuild.

        Made in of the RV

        :param made_in: The made_in of this RVBuild.
        :type made_in: str
        """

        self._made_in = made_in

    @property
    def make(self):
        """Gets the make of this RVBuild.

        RV Make

        :return: The make of this RVBuild.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this RVBuild.

        RV Make

        :param make: The make of this RVBuild.
        :type make: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this RVBuild.

        RV model

        :return: The model of this RVBuild.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RVBuild.

        RV model

        :param model: The model of this RVBuild.
        :type model: str
        """

        self._model = model

    @property
    def sleeps(self):
        """Gets the sleeps of this RVBuild.

        Sleeps of the RV

        :return: The sleeps of this RVBuild.
        :rtype: str
        """
        return self._sleeps

    @sleeps.setter
    def sleeps(self, sleeps):
        """Sets the sleeps of this RVBuild.

        Sleeps of the RV

        :param sleeps: The sleeps of this RVBuild.
        :type sleeps: str
        """

        self._sleeps = sleeps

    @property
    def slideouts(self):
        """Gets the slideouts of this RVBuild.

        Slideouts of the RV

        :return: The slideouts of this RVBuild.
        :rtype: str
        """
        return self._slideouts

    @slideouts.setter
    def slideouts(self, slideouts):
        """Sets the slideouts of this RVBuild.

        Slideouts of the RV

        :param slideouts: The slideouts of this RVBuild.
        :type slideouts: str
        """

        self._slideouts = slideouts

    @property
    def transmission(self):
        """Gets the transmission of this RVBuild.

        Transmission of the RV

        :return: The transmission of this RVBuild.
        :rtype: str
        """
        return self._transmission

    @transmission.setter
    def transmission(self, transmission):
        """Sets the transmission of this RVBuild.

        Transmission of the RV

        :param transmission: The transmission of this RVBuild.
        :type transmission: str
        """

        self._transmission = transmission

    @property
    def year(self):
        """Gets the year of this RVBuild.

        Year of the RV

        :return: The year of this RVBuild.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this RVBuild.

        Year of the RV

        :param year: The year of this RVBuild.
        :type year: int
        """

        self._year = year
