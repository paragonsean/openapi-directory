# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_stats import SalesStats
from openapi_server import util


class BasePopular(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, counts: str=None, dom_stats: SalesStats=None, inventory_type: str=None, make: str=None, miles_stats: SalesStats=None, model: str=None, price_stats: SalesStats=None, state: str=None):
        """BasePopular - a model defined in OpenAPI

        :param city: The city of this BasePopular.
        :param counts: The counts of this BasePopular.
        :param dom_stats: The dom_stats of this BasePopular.
        :param inventory_type: The inventory_type of this BasePopular.
        :param make: The make of this BasePopular.
        :param miles_stats: The miles_stats of this BasePopular.
        :param model: The model of this BasePopular.
        :param price_stats: The price_stats of this BasePopular.
        :param state: The state of this BasePopular.
        """
        self.openapi_types = {
            'city': str,
            'counts': str,
            'dom_stats': SalesStats,
            'inventory_type': str,
            'make': str,
            'miles_stats': SalesStats,
            'model': str,
            'price_stats': SalesStats,
            'state': str
        }

        self.attribute_map = {
            'city': 'city',
            'counts': 'counts',
            'dom_stats': 'dom_stats',
            'inventory_type': 'inventoryType',
            'make': 'make',
            'miles_stats': 'miles_stats',
            'model': 'model',
            'price_stats': 'price_stats',
            'state': 'state'
        }

        self._city = city
        self._counts = counts
        self._dom_stats = dom_stats
        self._inventory_type = inventory_type
        self._make = make
        self._miles_stats = miles_stats
        self._model = model
        self._price_stats = price_stats
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasePopular':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasePopular of this BasePopular.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this BasePopular.

        City

        :return: The city of this BasePopular.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this BasePopular.

        City

        :param city: The city of this BasePopular.
        :type city: str
        """

        self._city = city

    @property
    def counts(self):
        """Gets the counts of this BasePopular.

        Number of sold listings of this model

        :return: The counts of this BasePopular.
        :rtype: str
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this BasePopular.

        Number of sold listings of this model

        :param counts: The counts of this BasePopular.
        :type counts: str
        """

        self._counts = counts

    @property
    def dom_stats(self):
        """Gets the dom_stats of this BasePopular.


        :return: The dom_stats of this BasePopular.
        :rtype: SalesStats
        """
        return self._dom_stats

    @dom_stats.setter
    def dom_stats(self, dom_stats):
        """Sets the dom_stats of this BasePopular.


        :param dom_stats: The dom_stats of this BasePopular.
        :type dom_stats: SalesStats
        """

        self._dom_stats = dom_stats

    @property
    def inventory_type(self):
        """Gets the inventory_type of this BasePopular.

        Inventory type

        :return: The inventory_type of this BasePopular.
        :rtype: str
        """
        return self._inventory_type

    @inventory_type.setter
    def inventory_type(self, inventory_type):
        """Sets the inventory_type of this BasePopular.

        Inventory type

        :param inventory_type: The inventory_type of this BasePopular.
        :type inventory_type: str
        """

        self._inventory_type = inventory_type

    @property
    def make(self):
        """Gets the make of this BasePopular.

        Make name

        :return: The make of this BasePopular.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this BasePopular.

        Make name

        :param make: The make of this BasePopular.
        :type make: str
        """

        self._make = make

    @property
    def miles_stats(self):
        """Gets the miles_stats of this BasePopular.


        :return: The miles_stats of this BasePopular.
        :rtype: SalesStats
        """
        return self._miles_stats

    @miles_stats.setter
    def miles_stats(self, miles_stats):
        """Sets the miles_stats of this BasePopular.


        :param miles_stats: The miles_stats of this BasePopular.
        :type miles_stats: SalesStats
        """

        self._miles_stats = miles_stats

    @property
    def model(self):
        """Gets the model of this BasePopular.

        Model name

        :return: The model of this BasePopular.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this BasePopular.

        Model name

        :param model: The model of this BasePopular.
        :type model: str
        """

        self._model = model

    @property
    def price_stats(self):
        """Gets the price_stats of this BasePopular.


        :return: The price_stats of this BasePopular.
        :rtype: SalesStats
        """
        return self._price_stats

    @price_stats.setter
    def price_stats(self, price_stats):
        """Sets the price_stats of this BasePopular.


        :param price_stats: The price_stats of this BasePopular.
        :type price_stats: SalesStats
        """

        self._price_stats = price_stats

    @property
    def state(self):
        """Gets the state of this BasePopular.

        State

        :return: The state of this BasePopular.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BasePopular.

        State

        :param state: The state of this BasePopular.
        :type state: str
        """

        self._state = state
