# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CarRankCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carfax_1_owner: float=0.9, carfax_clean_title: float=0.9, dom: float=0.9, dom_180: float=0.9, dom_active: float=0.9, is_certified: float=1, miles: float=0.9, price: float=0.9):
        """CarRankCriteria - a model defined in OpenAPI

        :param carfax_1_owner: The carfax_1_owner of this CarRankCriteria.
        :param carfax_clean_title: The carfax_clean_title of this CarRankCriteria.
        :param dom: The dom of this CarRankCriteria.
        :param dom_180: The dom_180 of this CarRankCriteria.
        :param dom_active: The dom_active of this CarRankCriteria.
        :param is_certified: The is_certified of this CarRankCriteria.
        :param miles: The miles of this CarRankCriteria.
        :param price: The price of this CarRankCriteria.
        """
        self.openapi_types = {
            'carfax_1_owner': float,
            'carfax_clean_title': float,
            'dom': float,
            'dom_180': float,
            'dom_active': float,
            'is_certified': float,
            'miles': float,
            'price': float
        }

        self.attribute_map = {
            'carfax_1_owner': 'carfax_1_owner',
            'carfax_clean_title': 'carfax_clean_title',
            'dom': 'dom',
            'dom_180': 'dom_180',
            'dom_active': 'dom_active',
            'is_certified': 'is_certified',
            'miles': 'miles',
            'price': 'price'
        }

        self._carfax_1_owner = carfax_1_owner
        self._carfax_clean_title = carfax_clean_title
        self._dom = dom
        self._dom_180 = dom_180
        self._dom_active = dom_active
        self._is_certified = is_certified
        self._miles = miles
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CarRankCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CarRankCriteria of this CarRankCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carfax_1_owner(self):
        """Gets the carfax_1_owner of this CarRankCriteria.

        Flag to indicate whether listing is carfax_1_owner.Weight for this is ranking process between 0-1.

        :return: The carfax_1_owner of this CarRankCriteria.
        :rtype: float
        """
        return self._carfax_1_owner

    @carfax_1_owner.setter
    def carfax_1_owner(self, carfax_1_owner):
        """Sets the carfax_1_owner of this CarRankCriteria.

        Flag to indicate whether listing is carfax_1_owner.Weight for this is ranking process between 0-1.

        :param carfax_1_owner: The carfax_1_owner of this CarRankCriteria.
        :type carfax_1_owner: float
        """

        self._carfax_1_owner = carfax_1_owner

    @property
    def carfax_clean_title(self):
        """Gets the carfax_clean_title of this CarRankCriteria.

        Flag to indicate whether listing is carfax_clean_title.Weight for this is ranking process between 0-1

        :return: The carfax_clean_title of this CarRankCriteria.
        :rtype: float
        """
        return self._carfax_clean_title

    @carfax_clean_title.setter
    def carfax_clean_title(self, carfax_clean_title):
        """Sets the carfax_clean_title of this CarRankCriteria.

        Flag to indicate whether listing is carfax_clean_title.Weight for this is ranking process between 0-1

        :param carfax_clean_title: The carfax_clean_title of this CarRankCriteria.
        :type carfax_clean_title: float
        """

        self._carfax_clean_title = carfax_clean_title

    @property
    def dom(self):
        """Gets the dom of this CarRankCriteria.

        Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1

        :return: The dom of this CarRankCriteria.
        :rtype: float
        """
        return self._dom

    @dom.setter
    def dom(self, dom):
        """Sets the dom of this CarRankCriteria.

        Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1

        :param dom: The dom of this CarRankCriteria.
        :type dom: float
        """

        self._dom = dom

    @property
    def dom_180(self):
        """Gets the dom_180 of this CarRankCriteria.

        Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1

        :return: The dom_180 of this CarRankCriteria.
        :rtype: float
        """
        return self._dom_180

    @dom_180.setter
    def dom_180(self, dom_180):
        """Sets the dom_180 of this CarRankCriteria.

        Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1

        :param dom_180: The dom_180 of this CarRankCriteria.
        :type dom_180: float
        """

        self._dom_180 = dom_180

    @property
    def dom_active(self):
        """Gets the dom_active of this CarRankCriteria.

        Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1

        :return: The dom_active of this CarRankCriteria.
        :rtype: float
        """
        return self._dom_active

    @dom_active.setter
    def dom_active(self, dom_active):
        """Sets the dom_active of this CarRankCriteria.

        Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1

        :param dom_active: The dom_active of this CarRankCriteria.
        :type dom_active: float
        """

        self._dom_active = dom_active

    @property
    def is_certified(self):
        """Gets the is_certified of this CarRankCriteria.

        Certified car.Weight for this is ranking process between 0-1

        :return: The is_certified of this CarRankCriteria.
        :rtype: float
        """
        return self._is_certified

    @is_certified.setter
    def is_certified(self, is_certified):
        """Sets the is_certified of this CarRankCriteria.

        Certified car.Weight for this is ranking process between 0-1

        :param is_certified: The is_certified of this CarRankCriteria.
        :type is_certified: float
        """

        self._is_certified = is_certified

    @property
    def miles(self):
        """Gets the miles of this CarRankCriteria.

        Odometer reading / reported miles usage for the car.Weight for this is ranking process between 0-1

        :return: The miles of this CarRankCriteria.
        :rtype: float
        """
        return self._miles

    @miles.setter
    def miles(self, miles):
        """Sets the miles of this CarRankCriteria.

        Odometer reading / reported miles usage for the car.Weight for this is ranking process between 0-1

        :param miles: The miles of this CarRankCriteria.
        :type miles: float
        """

        self._miles = miles

    @property
    def price(self):
        """Gets the price of this CarRankCriteria.

        Asking price for the vehicle. Weight for this is ranking process between 0-1.

        :return: The price of this CarRankCriteria.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CarRankCriteria.

        Asking price for the vehicle. Weight for this is ranking process between 0-1.

        :param price: The price of this CarRankCriteria.
        :type price: float
        """

        self._price = price
