# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HeavyEquipmentsBuild(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body_type: str=None, category: str=None, condition: str=None, drivetrain: str=None, engine: str=None, fuel_type: str=None, make: str=None, model: str=None, sub_category: str=None, transmission: str=None, trim: str=None, year: int=None):
        """HeavyEquipmentsBuild - a model defined in OpenAPI

        :param body_type: The body_type of this HeavyEquipmentsBuild.
        :param category: The category of this HeavyEquipmentsBuild.
        :param condition: The condition of this HeavyEquipmentsBuild.
        :param drivetrain: The drivetrain of this HeavyEquipmentsBuild.
        :param engine: The engine of this HeavyEquipmentsBuild.
        :param fuel_type: The fuel_type of this HeavyEquipmentsBuild.
        :param make: The make of this HeavyEquipmentsBuild.
        :param model: The model of this HeavyEquipmentsBuild.
        :param sub_category: The sub_category of this HeavyEquipmentsBuild.
        :param transmission: The transmission of this HeavyEquipmentsBuild.
        :param trim: The trim of this HeavyEquipmentsBuild.
        :param year: The year of this HeavyEquipmentsBuild.
        """
        self.openapi_types = {
            'body_type': str,
            'category': str,
            'condition': str,
            'drivetrain': str,
            'engine': str,
            'fuel_type': str,
            'make': str,
            'model': str,
            'sub_category': str,
            'transmission': str,
            'trim': str,
            'year': int
        }

        self.attribute_map = {
            'body_type': 'body_type',
            'category': 'category',
            'condition': 'condition',
            'drivetrain': 'drivetrain',
            'engine': 'engine',
            'fuel_type': 'fuel_type',
            'make': 'make',
            'model': 'model',
            'sub_category': 'sub_category',
            'transmission': 'transmission',
            'trim': 'trim',
            'year': 'year'
        }

        self._body_type = body_type
        self._category = category
        self._condition = condition
        self._drivetrain = drivetrain
        self._engine = engine
        self._fuel_type = fuel_type
        self._make = make
        self._model = model
        self._sub_category = sub_category
        self._transmission = transmission
        self._trim = trim
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HeavyEquipmentsBuild':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HeavyEquipmentsBuild of this HeavyEquipmentsBuild.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body_type(self):
        """Gets the body_type of this HeavyEquipmentsBuild.

        Body type of the heavy equipment

        :return: The body_type of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._body_type

    @body_type.setter
    def body_type(self, body_type):
        """Sets the body_type of this HeavyEquipmentsBuild.

        Body type of the heavy equipment

        :param body_type: The body_type of this HeavyEquipmentsBuild.
        :type body_type: str
        """

        self._body_type = body_type

    @property
    def category(self):
        """Gets the category of this HeavyEquipmentsBuild.

        Heavy equipment category

        :return: The category of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HeavyEquipmentsBuild.

        Heavy equipment category

        :param category: The category of this HeavyEquipmentsBuild.
        :type category: str
        """

        self._category = category

    @property
    def condition(self):
        """Gets the condition of this HeavyEquipmentsBuild.

        Heavy equipment condition

        :return: The condition of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this HeavyEquipmentsBuild.

        Heavy equipment condition

        :param condition: The condition of this HeavyEquipmentsBuild.
        :type condition: str
        """

        self._condition = condition

    @property
    def drivetrain(self):
        """Gets the drivetrain of this HeavyEquipmentsBuild.

        Drivetrain of the heavy equipment

        :return: The drivetrain of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._drivetrain

    @drivetrain.setter
    def drivetrain(self, drivetrain):
        """Sets the drivetrain of this HeavyEquipmentsBuild.

        Drivetrain of the heavy equipment

        :param drivetrain: The drivetrain of this HeavyEquipmentsBuild.
        :type drivetrain: str
        """

        self._drivetrain = drivetrain

    @property
    def engine(self):
        """Gets the engine of this HeavyEquipmentsBuild.

        Engine of the heavy equipment

        :return: The engine of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this HeavyEquipmentsBuild.

        Engine of the heavy equipment

        :param engine: The engine of this HeavyEquipmentsBuild.
        :type engine: str
        """

        self._engine = engine

    @property
    def fuel_type(self):
        """Gets the fuel_type of this HeavyEquipmentsBuild.

        Fuel type of the heavy equipment

        :return: The fuel_type of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this HeavyEquipmentsBuild.

        Fuel type of the heavy equipment

        :param fuel_type: The fuel_type of this HeavyEquipmentsBuild.
        :type fuel_type: str
        """

        self._fuel_type = fuel_type

    @property
    def make(self):
        """Gets the make of this HeavyEquipmentsBuild.

        Heavy equipment Make

        :return: The make of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this HeavyEquipmentsBuild.

        Heavy equipment Make

        :param make: The make of this HeavyEquipmentsBuild.
        :type make: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this HeavyEquipmentsBuild.

        Heavy equipment model

        :return: The model of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this HeavyEquipmentsBuild.

        Heavy equipment model

        :param model: The model of this HeavyEquipmentsBuild.
        :type model: str
        """

        self._model = model

    @property
    def sub_category(self):
        """Gets the sub_category of this HeavyEquipmentsBuild.

        Heavy equipment sub_category

        :return: The sub_category of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this HeavyEquipmentsBuild.

        Heavy equipment sub_category

        :param sub_category: The sub_category of this HeavyEquipmentsBuild.
        :type sub_category: str
        """

        self._sub_category = sub_category

    @property
    def transmission(self):
        """Gets the transmission of this HeavyEquipmentsBuild.

        Transmission of the heavy equipment

        :return: The transmission of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._transmission

    @transmission.setter
    def transmission(self, transmission):
        """Sets the transmission of this HeavyEquipmentsBuild.

        Transmission of the heavy equipment

        :param transmission: The transmission of this HeavyEquipmentsBuild.
        :type transmission: str
        """

        self._transmission = transmission

    @property
    def trim(self):
        """Gets the trim of this HeavyEquipmentsBuild.

        Trim of the heavy equipment

        :return: The trim of this HeavyEquipmentsBuild.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this HeavyEquipmentsBuild.

        Trim of the heavy equipment

        :param trim: The trim of this HeavyEquipmentsBuild.
        :type trim: str
        """

        self._trim = trim

    @property
    def year(self):
        """Gets the year of this HeavyEquipmentsBuild.

        Year of the heavy equipment

        :return: The year of this HeavyEquipmentsBuild.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this HeavyEquipmentsBuild.

        Year of the heavy equipment

        :param year: The year of this HeavyEquipmentsBuild.
        :type year: int
        """

        self._year = year
