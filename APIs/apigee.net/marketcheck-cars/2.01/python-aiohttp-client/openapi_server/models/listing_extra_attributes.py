# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListingExtraAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dealer_added_f: List[str]=None, electronics_f: List[str]=None, exterior_f: List[str]=None, features: List[str]=None, id: str=None, interior_f: List[str]=None, options: List[str]=None, safety_f: List[str]=None, seller_cmts: str=None, standard_f: List[str]=None, technical_f: List[str]=None):
        """ListingExtraAttributes - a model defined in OpenAPI

        :param dealer_added_f: The dealer_added_f of this ListingExtraAttributes.
        :param electronics_f: The electronics_f of this ListingExtraAttributes.
        :param exterior_f: The exterior_f of this ListingExtraAttributes.
        :param features: The features of this ListingExtraAttributes.
        :param id: The id of this ListingExtraAttributes.
        :param interior_f: The interior_f of this ListingExtraAttributes.
        :param options: The options of this ListingExtraAttributes.
        :param safety_f: The safety_f of this ListingExtraAttributes.
        :param seller_cmts: The seller_cmts of this ListingExtraAttributes.
        :param standard_f: The standard_f of this ListingExtraAttributes.
        :param technical_f: The technical_f of this ListingExtraAttributes.
        """
        self.openapi_types = {
            'dealer_added_f': List[str],
            'electronics_f': List[str],
            'exterior_f': List[str],
            'features': List[str],
            'id': str,
            'interior_f': List[str],
            'options': List[str],
            'safety_f': List[str],
            'seller_cmts': str,
            'standard_f': List[str],
            'technical_f': List[str]
        }

        self.attribute_map = {
            'dealer_added_f': 'dealer_added_f',
            'electronics_f': 'electronics_f',
            'exterior_f': 'exterior_f',
            'features': 'features',
            'id': 'id',
            'interior_f': 'interior_f',
            'options': 'options',
            'safety_f': 'safety_f',
            'seller_cmts': 'seller_cmts',
            'standard_f': 'standard_f',
            'technical_f': 'technical_f'
        }

        self._dealer_added_f = dealer_added_f
        self._electronics_f = electronics_f
        self._exterior_f = exterior_f
        self._features = features
        self._id = id
        self._interior_f = interior_f
        self._options = options
        self._safety_f = safety_f
        self._seller_cmts = seller_cmts
        self._standard_f = standard_f
        self._technical_f = technical_f

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListingExtraAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListingExtraAttributes of this ListingExtraAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dealer_added_f(self):
        """Gets the dealer_added_f of this ListingExtraAttributes.

        List of dealer added features available with the car

        :return: The dealer_added_f of this ListingExtraAttributes.
        :rtype: List[str]
        """
        return self._dealer_added_f

    @dealer_added_f.setter
    def dealer_added_f(self, dealer_added_f):
        """Sets the dealer_added_f of this ListingExtraAttributes.

        List of dealer added features available with the car

        :param dealer_added_f: The dealer_added_f of this ListingExtraAttributes.
        :type dealer_added_f: List[str]
        """

        self._dealer_added_f = dealer_added_f

    @property
    def electronics_f(self):
        """Gets the electronics_f of this ListingExtraAttributes.

        List of electronic features available with the car

        :return: The electronics_f of this ListingExtraAttributes.
        :rtype: List[str]
        """
        return self._electronics_f

    @electronics_f.setter
    def electronics_f(self, electronics_f):
        """Sets the electronics_f of this ListingExtraAttributes.

        List of electronic features available with the car

        :param electronics_f: The electronics_f of this ListingExtraAttributes.
        :type electronics_f: List[str]
        """

        self._electronics_f = electronics_f

    @property
    def exterior_f(self):
        """Gets the exterior_f of this ListingExtraAttributes.

        List of exterior features available with the car

        :return: The exterior_f of this ListingExtraAttributes.
        :rtype: List[str]
        """
        return self._exterior_f

    @exterior_f.setter
    def exterior_f(self, exterior_f):
        """Sets the exterior_f of this ListingExtraAttributes.

        List of exterior features available with the car

        :param exterior_f: The exterior_f of this ListingExtraAttributes.
        :type exterior_f: List[str]
        """

        self._exterior_f = exterior_f

    @property
    def features(self):
        """Gets the features of this ListingExtraAttributes.

        List of Features available with the car

        :return: The features of this ListingExtraAttributes.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ListingExtraAttributes.

        List of Features available with the car

        :param features: The features of this ListingExtraAttributes.
        :type features: List[str]
        """

        self._features = features

    @property
    def id(self):
        """Gets the id of this ListingExtraAttributes.

        Unique identifier representing a specific listing from the Marketcheck database

        :return: The id of this ListingExtraAttributes.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ListingExtraAttributes.

        Unique identifier representing a specific listing from the Marketcheck database

        :param id: The id of this ListingExtraAttributes.
        :type id: str
        """

        self._id = id

    @property
    def interior_f(self):
        """Gets the interior_f of this ListingExtraAttributes.

        List of interior features available with the car

        :return: The interior_f of this ListingExtraAttributes.
        :rtype: List[str]
        """
        return self._interior_f

    @interior_f.setter
    def interior_f(self, interior_f):
        """Sets the interior_f of this ListingExtraAttributes.

        List of interior features available with the car

        :param interior_f: The interior_f of this ListingExtraAttributes.
        :type interior_f: List[str]
        """

        self._interior_f = interior_f

    @property
    def options(self):
        """Gets the options of this ListingExtraAttributes.

        Installed Options of the car

        :return: The options of this ListingExtraAttributes.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ListingExtraAttributes.

        Installed Options of the car

        :param options: The options of this ListingExtraAttributes.
        :type options: List[str]
        """

        self._options = options

    @property
    def safety_f(self):
        """Gets the safety_f of this ListingExtraAttributes.

        List of safety features available with the car

        :return: The safety_f of this ListingExtraAttributes.
        :rtype: List[str]
        """
        return self._safety_f

    @safety_f.setter
    def safety_f(self, safety_f):
        """Sets the safety_f of this ListingExtraAttributes.

        List of safety features available with the car

        :param safety_f: The safety_f of this ListingExtraAttributes.
        :type safety_f: List[str]
        """

        self._safety_f = safety_f

    @property
    def seller_cmts(self):
        """Gets the seller_cmts of this ListingExtraAttributes.

        Seller comment for the car

        :return: The seller_cmts of this ListingExtraAttributes.
        :rtype: str
        """
        return self._seller_cmts

    @seller_cmts.setter
    def seller_cmts(self, seller_cmts):
        """Sets the seller_cmts of this ListingExtraAttributes.

        Seller comment for the car

        :param seller_cmts: The seller_cmts of this ListingExtraAttributes.
        :type seller_cmts: str
        """

        self._seller_cmts = seller_cmts

    @property
    def standard_f(self):
        """Gets the standard_f of this ListingExtraAttributes.

        List of standard features available with the car

        :return: The standard_f of this ListingExtraAttributes.
        :rtype: List[str]
        """
        return self._standard_f

    @standard_f.setter
    def standard_f(self, standard_f):
        """Sets the standard_f of this ListingExtraAttributes.

        List of standard features available with the car

        :param standard_f: The standard_f of this ListingExtraAttributes.
        :type standard_f: List[str]
        """

        self._standard_f = standard_f

    @property
    def technical_f(self):
        """Gets the technical_f of this ListingExtraAttributes.

        List of technical features available with the car

        :return: The technical_f of this ListingExtraAttributes.
        :rtype: List[str]
        """
        return self._technical_f

    @technical_f.setter
    def technical_f(self, technical_f):
        """Sets the technical_f of this ListingExtraAttributes.

        List of technical features available with the car

        :param technical_f: The technical_f of this ListingExtraAttributes.
        :type technical_f: List[str]
        """

        self._technical_f = technical_f
