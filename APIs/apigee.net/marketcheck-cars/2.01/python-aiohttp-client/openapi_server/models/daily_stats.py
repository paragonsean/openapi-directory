# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.daily_stats_nested_json import DailyStatsNestedJson
from openapi_server import util


class DailyStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dom: DailyStatsNestedJson=None, miles_stats: DailyStatsNestedJson=None, price_stats: DailyStatsNestedJson=None, units_for_sale: float=None):
        """DailyStats - a model defined in OpenAPI

        :param dom: The dom of this DailyStats.
        :param miles_stats: The miles_stats of this DailyStats.
        :param price_stats: The price_stats of this DailyStats.
        :param units_for_sale: The units_for_sale of this DailyStats.
        """
        self.openapi_types = {
            'dom': DailyStatsNestedJson,
            'miles_stats': DailyStatsNestedJson,
            'price_stats': DailyStatsNestedJson,
            'units_for_sale': float
        }

        self.attribute_map = {
            'dom': 'dom',
            'miles_stats': 'miles_stats',
            'price_stats': 'price_stats',
            'units_for_sale': 'units_for_sale'
        }

        self._dom = dom
        self._miles_stats = miles_stats
        self._price_stats = price_stats
        self._units_for_sale = units_for_sale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DailyStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DailyStats of this DailyStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dom(self):
        """Gets the dom of this DailyStats.


        :return: The dom of this DailyStats.
        :rtype: DailyStatsNestedJson
        """
        return self._dom

    @dom.setter
    def dom(self, dom):
        """Sets the dom of this DailyStats.


        :param dom: The dom of this DailyStats.
        :type dom: DailyStatsNestedJson
        """

        self._dom = dom

    @property
    def miles_stats(self):
        """Gets the miles_stats of this DailyStats.


        :return: The miles_stats of this DailyStats.
        :rtype: DailyStatsNestedJson
        """
        return self._miles_stats

    @miles_stats.setter
    def miles_stats(self, miles_stats):
        """Sets the miles_stats of this DailyStats.


        :param miles_stats: The miles_stats of this DailyStats.
        :type miles_stats: DailyStatsNestedJson
        """

        self._miles_stats = miles_stats

    @property
    def price_stats(self):
        """Gets the price_stats of this DailyStats.


        :return: The price_stats of this DailyStats.
        :rtype: DailyStatsNestedJson
        """
        return self._price_stats

    @price_stats.setter
    def price_stats(self, price_stats):
        """Sets the price_stats of this DailyStats.


        :param price_stats: The price_stats of this DailyStats.
        :type price_stats: DailyStatsNestedJson
        """

        self._price_stats = price_stats

    @property
    def units_for_sale(self):
        """Gets the units_for_sale of this DailyStats.

        Number of units of this car for sale on the market

        :return: The units_for_sale of this DailyStats.
        :rtype: float
        """
        return self._units_for_sale

    @units_for_sale.setter
    def units_for_sale(self, units_for_sale):
        """Sets the units_for_sale of this DailyStats.

        Number of units of this car for sale on the market

        :param units_for_sale: The units_for_sale of this DailyStats.
        :type units_for_sale: float
        """

        self._units_for_sale = units_for_sale
