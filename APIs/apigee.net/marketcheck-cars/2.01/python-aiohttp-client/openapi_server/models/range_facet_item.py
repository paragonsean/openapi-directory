# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.range_facet_item_counts_inner import RangeFacetItemCountsInner
from openapi_server import util


class RangeFacetItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after: int=None, before: int=None, between: int=None, counts: List[RangeFacetItemCountsInner]=None, end: int=None, gap: int=None, start: int=None):
        """RangeFacetItem - a model defined in OpenAPI

        :param after: The after of this RangeFacetItem.
        :param before: The before of this RangeFacetItem.
        :param between: The between of this RangeFacetItem.
        :param counts: The counts of this RangeFacetItem.
        :param end: The end of this RangeFacetItem.
        :param gap: The gap of this RangeFacetItem.
        :param start: The start of this RangeFacetItem.
        """
        self.openapi_types = {
            'after': int,
            'before': int,
            'between': int,
            'counts': List[RangeFacetItemCountsInner],
            'end': int,
            'gap': int,
            'start': int
        }

        self.attribute_map = {
            'after': 'after',
            'before': 'before',
            'between': 'between',
            'counts': 'counts',
            'end': 'end',
            'gap': 'gap',
            'start': 'start'
        }

        self._after = after
        self._before = before
        self._between = between
        self._counts = counts
        self._end = end
        self._gap = gap
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RangeFacetItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RangeFacetItem of this RangeFacetItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after(self):
        """Gets the after of this RangeFacetItem.

        Number of listings that have field value after range end

        :return: The after of this RangeFacetItem.
        :rtype: int
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this RangeFacetItem.

        Number of listings that have field value after range end

        :param after: The after of this RangeFacetItem.
        :type after: int
        """

        self._after = after

    @property
    def before(self):
        """Gets the before of this RangeFacetItem.

        Number of listings that have field value before range start

        :return: The before of this RangeFacetItem.
        :rtype: int
        """
        return self._before

    @before.setter
    def before(self, before):
        """Sets the before of this RangeFacetItem.

        Number of listings that have field value before range start

        :param before: The before of this RangeFacetItem.
        :type before: int
        """

        self._before = before

    @property
    def between(self):
        """Gets the between of this RangeFacetItem.

        Number of listings that have field value between range start and range end

        :return: The between of this RangeFacetItem.
        :rtype: int
        """
        return self._between

    @between.setter
    def between(self, between):
        """Sets the between of this RangeFacetItem.

        Number of listings that have field value between range start and range end

        :param between: The between of this RangeFacetItem.
        :type between: int
        """

        self._between = between

    @property
    def counts(self):
        """Gets the counts of this RangeFacetItem.


        :return: The counts of this RangeFacetItem.
        :rtype: List[RangeFacetItemCountsInner]
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this RangeFacetItem.


        :param counts: The counts of this RangeFacetItem.
        :type counts: List[RangeFacetItemCountsInner]
        """

        self._counts = counts

    @property
    def end(self):
        """Gets the end of this RangeFacetItem.

        The end of range

        :return: The end of this RangeFacetItem.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this RangeFacetItem.

        The end of range

        :param end: The end of this RangeFacetItem.
        :type end: int
        """

        self._end = end

    @property
    def gap(self):
        """Gets the gap of this RangeFacetItem.

        The range gap applied for range faceting

        :return: The gap of this RangeFacetItem.
        :rtype: int
        """
        return self._gap

    @gap.setter
    def gap(self, gap):
        """Sets the gap of this RangeFacetItem.

        The range gap applied for range faceting

        :param gap: The gap of this RangeFacetItem.
        :type gap: int
        """

        self._gap = gap

    @property
    def start(self):
        """Gets the start of this RangeFacetItem.

        The start of range

        :return: The start of this RangeFacetItem.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this RangeFacetItem.

        The start of range

        :param start: The start of this RangeFacetItem.
        :type start: int
        """

        self._start = start
