# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Mds(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, make: str=None, mds: int=None, model: str=None, sold_vins: List[str]=None, total_active_cars_for_ymmt: int=None, total_cars_sold_in_last_45_days: int=None, trim: str=None, year: int=None):
        """Mds - a model defined in OpenAPI

        :param make: The make of this Mds.
        :param mds: The mds of this Mds.
        :param model: The model of this Mds.
        :param sold_vins: The sold_vins of this Mds.
        :param total_active_cars_for_ymmt: The total_active_cars_for_ymmt of this Mds.
        :param total_cars_sold_in_last_45_days: The total_cars_sold_in_last_45_days of this Mds.
        :param trim: The trim of this Mds.
        :param year: The year of this Mds.
        """
        self.openapi_types = {
            'make': str,
            'mds': int,
            'model': str,
            'sold_vins': List[str],
            'total_active_cars_for_ymmt': int,
            'total_cars_sold_in_last_45_days': int,
            'trim': str,
            'year': int
        }

        self.attribute_map = {
            'make': 'make',
            'mds': 'mds',
            'model': 'model',
            'sold_vins': 'sold_vins',
            'total_active_cars_for_ymmt': 'total_active_cars_for_ymmt',
            'total_cars_sold_in_last_45_days': 'total_cars_sold_in_last_45_days',
            'trim': 'trim',
            'year': 'year'
        }

        self._make = make
        self._mds = mds
        self._model = model
        self._sold_vins = sold_vins
        self._total_active_cars_for_ymmt = total_active_cars_for_ymmt
        self._total_cars_sold_in_last_45_days = total_cars_sold_in_last_45_days
        self._trim = trim
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mds':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Mds of this Mds.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def make(self):
        """Gets the make of this Mds.

        Make of vin provided

        :return: The make of this Mds.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this Mds.

        Make of vin provided

        :param make: The make of this Mds.
        :type make: str
        """

        self._make = make

    @property
    def mds(self):
        """Gets the mds of this Mds.

        Provides Market days supply count

        :return: The mds of this Mds.
        :rtype: int
        """
        return self._mds

    @mds.setter
    def mds(self, mds):
        """Sets the mds of this Mds.

        Provides Market days supply count

        :param mds: The mds of this Mds.
        :type mds: int
        """

        self._mds = mds

    @property
    def model(self):
        """Gets the model of this Mds.

        Model of vin provided

        :return: The model of this Mds.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Mds.

        Model of vin provided

        :param model: The model of this Mds.
        :type model: str
        """

        self._model = model

    @property
    def sold_vins(self):
        """Gets the sold_vins of this Mds.

        Sold vins array

        :return: The sold_vins of this Mds.
        :rtype: List[str]
        """
        return self._sold_vins

    @sold_vins.setter
    def sold_vins(self, sold_vins):
        """Sets the sold_vins of this Mds.

        Sold vins array

        :param sold_vins: The sold_vins of this Mds.
        :type sold_vins: List[str]
        """

        self._sold_vins = sold_vins

    @property
    def total_active_cars_for_ymmt(self):
        """Gets the total_active_cars_for_ymmt of this Mds.

        Active cars for ymmt combination

        :return: The total_active_cars_for_ymmt of this Mds.
        :rtype: int
        """
        return self._total_active_cars_for_ymmt

    @total_active_cars_for_ymmt.setter
    def total_active_cars_for_ymmt(self, total_active_cars_for_ymmt):
        """Sets the total_active_cars_for_ymmt of this Mds.

        Active cars for ymmt combination

        :param total_active_cars_for_ymmt: The total_active_cars_for_ymmt of this Mds.
        :type total_active_cars_for_ymmt: int
        """

        self._total_active_cars_for_ymmt = total_active_cars_for_ymmt

    @property
    def total_cars_sold_in_last_45_days(self):
        """Gets the total_cars_sold_in_last_45_days of this Mds.

        Cars sold in last 45 days

        :return: The total_cars_sold_in_last_45_days of this Mds.
        :rtype: int
        """
        return self._total_cars_sold_in_last_45_days

    @total_cars_sold_in_last_45_days.setter
    def total_cars_sold_in_last_45_days(self, total_cars_sold_in_last_45_days):
        """Sets the total_cars_sold_in_last_45_days of this Mds.

        Cars sold in last 45 days

        :param total_cars_sold_in_last_45_days: The total_cars_sold_in_last_45_days of this Mds.
        :type total_cars_sold_in_last_45_days: int
        """

        self._total_cars_sold_in_last_45_days = total_cars_sold_in_last_45_days

    @property
    def trim(self):
        """Gets the trim of this Mds.

        Trim of vin provided

        :return: The trim of this Mds.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this Mds.

        Trim of vin provided

        :param trim: The trim of this Mds.
        :type trim: str
        """

        self._trim = trim

    @property
    def year(self):
        """Gets the year of this Mds.

        Year of vin provided

        :return: The year of this Mds.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Mds.

        Year of vin provided

        :param year: The year of this Mds.
        :type year: int
        """

        self._year = year
