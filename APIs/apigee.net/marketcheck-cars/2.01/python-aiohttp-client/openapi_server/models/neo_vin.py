# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NeoVIN(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_options_details: object=None, body_subtype: str=None, body_type: str=None, city_mpg: float=None, combined_msrp: float=None, created_at: int=None, created_at_date: str=None, decode_version: int=None, delivery_charges: float=None, doors: int=None, drivetrain: str=None, engine: str=None, exterior_color: object=None, features: object=None, fuel_type: str=None, height: float=None, highway_mpg: float=None, installed_equipment: object=None, installed_options_details: object=None, installed_options_msrp: float=None, interior_color: object=None, length: float=None, listing_confidence: str=None, make: str=None, manufacturer_code: str=None, model: str=None, msrp: float=None, options_packages: str=None, package_code: str=None, package_description: str=None, seating_capacity: float=None, squish_vin: str=None, transmission: str=None, transmission_confidence: str=None, transmission_description: str=None, trim: str=None, trim_confidence: str=None, updated_at: int=None, updated_at_date: str=None, version: str=None, version_confidence: str=None, vin: str=None, weight: float=None, width: float=None, year: int=None):
        """NeoVIN - a model defined in OpenAPI

        :param available_options_details: The available_options_details of this NeoVIN.
        :param body_subtype: The body_subtype of this NeoVIN.
        :param body_type: The body_type of this NeoVIN.
        :param city_mpg: The city_mpg of this NeoVIN.
        :param combined_msrp: The combined_msrp of this NeoVIN.
        :param created_at: The created_at of this NeoVIN.
        :param created_at_date: The created_at_date of this NeoVIN.
        :param decode_version: The decode_version of this NeoVIN.
        :param delivery_charges: The delivery_charges of this NeoVIN.
        :param doors: The doors of this NeoVIN.
        :param drivetrain: The drivetrain of this NeoVIN.
        :param engine: The engine of this NeoVIN.
        :param exterior_color: The exterior_color of this NeoVIN.
        :param features: The features of this NeoVIN.
        :param fuel_type: The fuel_type of this NeoVIN.
        :param height: The height of this NeoVIN.
        :param highway_mpg: The highway_mpg of this NeoVIN.
        :param installed_equipment: The installed_equipment of this NeoVIN.
        :param installed_options_details: The installed_options_details of this NeoVIN.
        :param installed_options_msrp: The installed_options_msrp of this NeoVIN.
        :param interior_color: The interior_color of this NeoVIN.
        :param length: The length of this NeoVIN.
        :param listing_confidence: The listing_confidence of this NeoVIN.
        :param make: The make of this NeoVIN.
        :param manufacturer_code: The manufacturer_code of this NeoVIN.
        :param model: The model of this NeoVIN.
        :param msrp: The msrp of this NeoVIN.
        :param options_packages: The options_packages of this NeoVIN.
        :param package_code: The package_code of this NeoVIN.
        :param package_description: The package_description of this NeoVIN.
        :param seating_capacity: The seating_capacity of this NeoVIN.
        :param squish_vin: The squish_vin of this NeoVIN.
        :param transmission: The transmission of this NeoVIN.
        :param transmission_confidence: The transmission_confidence of this NeoVIN.
        :param transmission_description: The transmission_description of this NeoVIN.
        :param trim: The trim of this NeoVIN.
        :param trim_confidence: The trim_confidence of this NeoVIN.
        :param updated_at: The updated_at of this NeoVIN.
        :param updated_at_date: The updated_at_date of this NeoVIN.
        :param version: The version of this NeoVIN.
        :param version_confidence: The version_confidence of this NeoVIN.
        :param vin: The vin of this NeoVIN.
        :param weight: The weight of this NeoVIN.
        :param width: The width of this NeoVIN.
        :param year: The year of this NeoVIN.
        """
        self.openapi_types = {
            'available_options_details': object,
            'body_subtype': str,
            'body_type': str,
            'city_mpg': float,
            'combined_msrp': float,
            'created_at': int,
            'created_at_date': str,
            'decode_version': int,
            'delivery_charges': float,
            'doors': int,
            'drivetrain': str,
            'engine': str,
            'exterior_color': object,
            'features': object,
            'fuel_type': str,
            'height': float,
            'highway_mpg': float,
            'installed_equipment': object,
            'installed_options_details': object,
            'installed_options_msrp': float,
            'interior_color': object,
            'length': float,
            'listing_confidence': str,
            'make': str,
            'manufacturer_code': str,
            'model': str,
            'msrp': float,
            'options_packages': str,
            'package_code': str,
            'package_description': str,
            'seating_capacity': float,
            'squish_vin': str,
            'transmission': str,
            'transmission_confidence': str,
            'transmission_description': str,
            'trim': str,
            'trim_confidence': str,
            'updated_at': int,
            'updated_at_date': str,
            'version': str,
            'version_confidence': str,
            'vin': str,
            'weight': float,
            'width': float,
            'year': int
        }

        self.attribute_map = {
            'available_options_details': 'available_options_details',
            'body_subtype': 'body_subtype',
            'body_type': 'body_type',
            'city_mpg': 'city_mpg',
            'combined_msrp': 'combined_msrp',
            'created_at': 'created_at',
            'created_at_date': 'created_at_date',
            'decode_version': 'decode_version',
            'delivery_charges': 'delivery_charges',
            'doors': 'doors',
            'drivetrain': 'drivetrain',
            'engine': 'engine',
            'exterior_color': 'exterior_color',
            'features': 'features',
            'fuel_type': 'fuel_type',
            'height': 'height',
            'highway_mpg': 'highway_mpg',
            'installed_equipment': 'installed_equipment',
            'installed_options_details': 'installed_options_details',
            'installed_options_msrp': 'installed_options_msrp',
            'interior_color': 'interior_color',
            'length': 'length',
            'listing_confidence': 'listing_confidence',
            'make': 'make',
            'manufacturer_code': 'manufacturer_code',
            'model': 'model',
            'msrp': 'msrp',
            'options_packages': 'options_packages',
            'package_code': 'package_code',
            'package_description': 'package_description',
            'seating_capacity': 'seating_capacity',
            'squish_vin': 'squish_vin',
            'transmission': 'transmission',
            'transmission_confidence': 'transmission_confidence',
            'transmission_description': 'transmission_description',
            'trim': 'trim',
            'trim_confidence': 'trim_confidence',
            'updated_at': 'updated_at',
            'updated_at_date': 'updated_at_date',
            'version': 'version',
            'version_confidence': 'version_confidence',
            'vin': 'vin',
            'weight': 'weight',
            'width': 'width',
            'year': 'year'
        }

        self._available_options_details = available_options_details
        self._body_subtype = body_subtype
        self._body_type = body_type
        self._city_mpg = city_mpg
        self._combined_msrp = combined_msrp
        self._created_at = created_at
        self._created_at_date = created_at_date
        self._decode_version = decode_version
        self._delivery_charges = delivery_charges
        self._doors = doors
        self._drivetrain = drivetrain
        self._engine = engine
        self._exterior_color = exterior_color
        self._features = features
        self._fuel_type = fuel_type
        self._height = height
        self._highway_mpg = highway_mpg
        self._installed_equipment = installed_equipment
        self._installed_options_details = installed_options_details
        self._installed_options_msrp = installed_options_msrp
        self._interior_color = interior_color
        self._length = length
        self._listing_confidence = listing_confidence
        self._make = make
        self._manufacturer_code = manufacturer_code
        self._model = model
        self._msrp = msrp
        self._options_packages = options_packages
        self._package_code = package_code
        self._package_description = package_description
        self._seating_capacity = seating_capacity
        self._squish_vin = squish_vin
        self._transmission = transmission
        self._transmission_confidence = transmission_confidence
        self._transmission_description = transmission_description
        self._trim = trim
        self._trim_confidence = trim_confidence
        self._updated_at = updated_at
        self._updated_at_date = updated_at_date
        self._version = version
        self._version_confidence = version_confidence
        self._vin = vin
        self._weight = weight
        self._width = width
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NeoVIN':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NeoVIN of this NeoVIN.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_options_details(self):
        """Gets the available_options_details of this NeoVIN.

        Listing of all options and packages with detailed equipment identified that could have been installed on the vehicle

        :return: The available_options_details of this NeoVIN.
        :rtype: object
        """
        return self._available_options_details

    @available_options_details.setter
    def available_options_details(self, available_options_details):
        """Sets the available_options_details of this NeoVIN.

        Listing of all options and packages with detailed equipment identified that could have been installed on the vehicle

        :param available_options_details: The available_options_details of this NeoVIN.
        :type available_options_details: object
        """

        self._available_options_details = available_options_details

    @property
    def body_subtype(self):
        """Gets the body_subtype of this NeoVIN.

        Body subtype (cab) of the vehicle

        :return: The body_subtype of this NeoVIN.
        :rtype: str
        """
        return self._body_subtype

    @body_subtype.setter
    def body_subtype(self, body_subtype):
        """Sets the body_subtype of this NeoVIN.

        Body subtype (cab) of the vehicle

        :param body_subtype: The body_subtype of this NeoVIN.
        :type body_subtype: str
        """

        self._body_subtype = body_subtype

    @property
    def body_type(self):
        """Gets the body_type of this NeoVIN.

        Body type of the vehicle

        :return: The body_type of this NeoVIN.
        :rtype: str
        """
        return self._body_type

    @body_type.setter
    def body_type(self, body_type):
        """Sets the body_type of this NeoVIN.

        Body type of the vehicle

        :param body_type: The body_type of this NeoVIN.
        :type body_type: str
        """

        self._body_type = body_type

    @property
    def city_mpg(self):
        """Gets the city_mpg of this NeoVIN.

        City miles per gallon

        :return: The city_mpg of this NeoVIN.
        :rtype: float
        """
        return self._city_mpg

    @city_mpg.setter
    def city_mpg(self, city_mpg):
        """Sets the city_mpg of this NeoVIN.

        City miles per gallon

        :param city_mpg: The city_mpg of this NeoVIN.
        :type city_mpg: float
        """

        self._city_mpg = city_mpg

    @property
    def combined_msrp(self):
        """Gets the combined_msrp of this NeoVIN.

        Calculated combination of base MSRP with the delivery charges and the installed options MSRP

        :return: The combined_msrp of this NeoVIN.
        :rtype: float
        """
        return self._combined_msrp

    @combined_msrp.setter
    def combined_msrp(self, combined_msrp):
        """Sets the combined_msrp of this NeoVIN.

        Calculated combination of base MSRP with the delivery charges and the installed options MSRP

        :param combined_msrp: The combined_msrp of this NeoVIN.
        :type combined_msrp: float
        """

        self._combined_msrp = combined_msrp

    @property
    def created_at(self):
        """Gets the created_at of this NeoVIN.

        vin first decoded at timestamp

        :return: The created_at of this NeoVIN.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NeoVIN.

        vin first decoded at timestamp

        :param created_at: The created_at of this NeoVIN.
        :type created_at: int
        """

        self._created_at = created_at

    @property
    def created_at_date(self):
        """Gets the created_at_date of this NeoVIN.

        vin first decoded at date

        :return: The created_at_date of this NeoVIN.
        :rtype: str
        """
        return self._created_at_date

    @created_at_date.setter
    def created_at_date(self, created_at_date):
        """Sets the created_at_date of this NeoVIN.

        vin first decoded at date

        :param created_at_date: The created_at_date of this NeoVIN.
        :type created_at_date: str
        """

        self._created_at_date = created_at_date

    @property
    def decode_version(self):
        """Gets the decode_version of this NeoVIN.

        This will represent if previous vin decode values are updated

        :return: The decode_version of this NeoVIN.
        :rtype: int
        """
        return self._decode_version

    @decode_version.setter
    def decode_version(self, decode_version):
        """Sets the decode_version of this NeoVIN.

        This will represent if previous vin decode values are updated

        :param decode_version: The decode_version of this NeoVIN.
        :type decode_version: int
        """

        self._decode_version = decode_version

    @property
    def delivery_charges(self):
        """Gets the delivery_charges of this NeoVIN.

        Manufacturer defined delivery charges

        :return: The delivery_charges of this NeoVIN.
        :rtype: float
        """
        return self._delivery_charges

    @delivery_charges.setter
    def delivery_charges(self, delivery_charges):
        """Sets the delivery_charges of this NeoVIN.

        Manufacturer defined delivery charges

        :param delivery_charges: The delivery_charges of this NeoVIN.
        :type delivery_charges: float
        """

        self._delivery_charges = delivery_charges

    @property
    def doors(self):
        """Gets the doors of this NeoVIN.

        Number of doors on the vehicle

        :return: The doors of this NeoVIN.
        :rtype: int
        """
        return self._doors

    @doors.setter
    def doors(self, doors):
        """Sets the doors of this NeoVIN.

        Number of doors on the vehicle

        :param doors: The doors of this NeoVIN.
        :type doors: int
        """

        self._doors = doors

    @property
    def drivetrain(self):
        """Gets the drivetrain of this NeoVIN.

        Identified drivetrain of the vehicle

        :return: The drivetrain of this NeoVIN.
        :rtype: str
        """
        return self._drivetrain

    @drivetrain.setter
    def drivetrain(self, drivetrain):
        """Sets the drivetrain of this NeoVIN.

        Identified drivetrain of the vehicle

        :param drivetrain: The drivetrain of this NeoVIN.
        :type drivetrain: str
        """

        self._drivetrain = drivetrain

    @property
    def engine(self):
        """Gets the engine of this NeoVIN.

        Base identification of the number of cylinders and configuration of the installed engine on the vehicle

        :return: The engine of this NeoVIN.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this NeoVIN.

        Base identification of the number of cylinders and configuration of the installed engine on the vehicle

        :param engine: The engine of this NeoVIN.
        :type engine: str
        """

        self._engine = engine

    @property
    def exterior_color(self):
        """Gets the exterior_color of this NeoVIN.

        The manufacturer defined option code and name for the exterior color of the vehicle

        :return: The exterior_color of this NeoVIN.
        :rtype: object
        """
        return self._exterior_color

    @exterior_color.setter
    def exterior_color(self, exterior_color):
        """Sets the exterior_color of this NeoVIN.

        The manufacturer defined option code and name for the exterior color of the vehicle

        :param exterior_color: The exterior_color of this NeoVIN.
        :type exterior_color: object
        """

        self._exterior_color = exterior_color

    @property
    def features(self):
        """Gets the features of this NeoVIN.

        Normalized feature set of equipment identified that have been identified as installed on the vehicle, including whether that item was standard to the version of the vehicle or was added as an installed option

        :return: The features of this NeoVIN.
        :rtype: object
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this NeoVIN.

        Normalized feature set of equipment identified that have been identified as installed on the vehicle, including whether that item was standard to the version of the vehicle or was added as an installed option

        :param features: The features of this NeoVIN.
        :type features: object
        """

        self._features = features

    @property
    def fuel_type(self):
        """Gets the fuel_type of this NeoVIN.

        Identified Fuel type of the vehicle

        :return: The fuel_type of this NeoVIN.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this NeoVIN.

        Identified Fuel type of the vehicle

        :param fuel_type: The fuel_type of this NeoVIN.
        :type fuel_type: str
        """

        self._fuel_type = fuel_type

    @property
    def height(self):
        """Gets the height of this NeoVIN.

        Overall height of the vehicle (in)

        :return: The height of this NeoVIN.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this NeoVIN.

        Overall height of the vehicle (in)

        :param height: The height of this NeoVIN.
        :type height: float
        """

        self._height = height

    @property
    def highway_mpg(self):
        """Gets the highway_mpg of this NeoVIN.

        Highway miles per gallon

        :return: The highway_mpg of this NeoVIN.
        :rtype: float
        """
        return self._highway_mpg

    @highway_mpg.setter
    def highway_mpg(self, highway_mpg):
        """Sets the highway_mpg of this NeoVIN.

        Highway miles per gallon

        :param highway_mpg: The highway_mpg of this NeoVIN.
        :type highway_mpg: float
        """

        self._highway_mpg = highway_mpg

    @property
    def installed_equipment(self):
        """Gets the installed_equipment of this NeoVIN.

        Detailed equipment identified as installed on the vehicle, including whether that item was standard to the version of the vehicle or was added as an installed option

        :return: The installed_equipment of this NeoVIN.
        :rtype: object
        """
        return self._installed_equipment

    @installed_equipment.setter
    def installed_equipment(self, installed_equipment):
        """Sets the installed_equipment of this NeoVIN.

        Detailed equipment identified as installed on the vehicle, including whether that item was standard to the version of the vehicle or was added as an installed option

        :param installed_equipment: The installed_equipment of this NeoVIN.
        :type installed_equipment: object
        """

        self._installed_equipment = installed_equipment

    @property
    def installed_options_details(self):
        """Gets the installed_options_details of this NeoVIN.

        Listing of all options and packages with detailed equipment identified that have been identified as installed on the vehicle

        :return: The installed_options_details of this NeoVIN.
        :rtype: object
        """
        return self._installed_options_details

    @installed_options_details.setter
    def installed_options_details(self, installed_options_details):
        """Sets the installed_options_details of this NeoVIN.

        Listing of all options and packages with detailed equipment identified that have been identified as installed on the vehicle

        :param installed_options_details: The installed_options_details of this NeoVIN.
        :type installed_options_details: object
        """

        self._installed_options_details = installed_options_details

    @property
    def installed_options_msrp(self):
        """Gets the installed_options_msrp of this NeoVIN.

        Calculated combination of the MSRP for the installed options and packages

        :return: The installed_options_msrp of this NeoVIN.
        :rtype: float
        """
        return self._installed_options_msrp

    @installed_options_msrp.setter
    def installed_options_msrp(self, installed_options_msrp):
        """Sets the installed_options_msrp of this NeoVIN.

        Calculated combination of the MSRP for the installed options and packages

        :param installed_options_msrp: The installed_options_msrp of this NeoVIN.
        :type installed_options_msrp: float
        """

        self._installed_options_msrp = installed_options_msrp

    @property
    def interior_color(self):
        """Gets the interior_color of this NeoVIN.

        The manufacturer defined option code and name for the interior color of the vehicle

        :return: The interior_color of this NeoVIN.
        :rtype: object
        """
        return self._interior_color

    @interior_color.setter
    def interior_color(self, interior_color):
        """Sets the interior_color of this NeoVIN.

        The manufacturer defined option code and name for the interior color of the vehicle

        :param interior_color: The interior_color of this NeoVIN.
        :type interior_color: object
        """

        self._interior_color = interior_color

    @property
    def length(self):
        """Gets the length of this NeoVIN.

        Overall length of the vehicle (in)

        :return: The length of this NeoVIN.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this NeoVIN.

        Overall length of the vehicle (in)

        :param length: The length of this NeoVIN.
        :type length: float
        """

        self._length = length

    @property
    def listing_confidence(self):
        """Gets the listing_confidence of this NeoVIN.

        Identification of primary source data used for trim and installed colors and options

        :return: The listing_confidence of this NeoVIN.
        :rtype: str
        """
        return self._listing_confidence

    @listing_confidence.setter
    def listing_confidence(self, listing_confidence):
        """Sets the listing_confidence of this NeoVIN.

        Identification of primary source data used for trim and installed colors and options

        :param listing_confidence: The listing_confidence of this NeoVIN.
        :type listing_confidence: str
        """

        self._listing_confidence = listing_confidence

    @property
    def make(self):
        """Gets the make of this NeoVIN.

        Make of the vehicle

        :return: The make of this NeoVIN.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this NeoVIN.

        Make of the vehicle

        :param make: The make of this NeoVIN.
        :type make: str
        """

        self._make = make

    @property
    def manufacturer_code(self):
        """Gets the manufacturer_code of this NeoVIN.

        Manufacturer code of the vehicle

        :return: The manufacturer_code of this NeoVIN.
        :rtype: str
        """
        return self._manufacturer_code

    @manufacturer_code.setter
    def manufacturer_code(self, manufacturer_code):
        """Sets the manufacturer_code of this NeoVIN.

        Manufacturer code of the vehicle

        :param manufacturer_code: The manufacturer_code of this NeoVIN.
        :type manufacturer_code: str
        """

        self._manufacturer_code = manufacturer_code

    @property
    def model(self):
        """Gets the model of this NeoVIN.

        Model of the vehicle

        :return: The model of this NeoVIN.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this NeoVIN.

        Model of the vehicle

        :param model: The model of this NeoVIN.
        :type model: str
        """

        self._model = model

    @property
    def msrp(self):
        """Gets the msrp of this NeoVIN.

        Base MSRP as defined for the defined version of that vehicle with no options installed

        :return: The msrp of this NeoVIN.
        :rtype: float
        """
        return self._msrp

    @msrp.setter
    def msrp(self, msrp):
        """Sets the msrp of this NeoVIN.

        Base MSRP as defined for the defined version of that vehicle with no options installed

        :param msrp: The msrp of this NeoVIN.
        :type msrp: float
        """

        self._msrp = msrp

    @property
    def options_packages(self):
        """Gets the options_packages of this NeoVIN.

        Option and package codes installed on the vehicle

        :return: The options_packages of this NeoVIN.
        :rtype: str
        """
        return self._options_packages

    @options_packages.setter
    def options_packages(self, options_packages):
        """Sets the options_packages of this NeoVIN.

        Option and package codes installed on the vehicle

        :param options_packages: The options_packages of this NeoVIN.
        :type options_packages: str
        """

        self._options_packages = options_packages

    @property
    def package_code(self):
        """Gets the package_code of this NeoVIN.

        Extracted manufacturer package code related to selection of the vehicle version (where available / applicable)

        :return: The package_code of this NeoVIN.
        :rtype: str
        """
        return self._package_code

    @package_code.setter
    def package_code(self, package_code):
        """Sets the package_code of this NeoVIN.

        Extracted manufacturer package code related to selection of the vehicle version (where available / applicable)

        :param package_code: The package_code of this NeoVIN.
        :type package_code: str
        """

        self._package_code = package_code

    @property
    def package_description(self):
        """Gets the package_description of this NeoVIN.

        Extracted manufacturer package code description (where available / applicable)

        :return: The package_description of this NeoVIN.
        :rtype: str
        """
        return self._package_description

    @package_description.setter
    def package_description(self, package_description):
        """Sets the package_description of this NeoVIN.

        Extracted manufacturer package code description (where available / applicable)

        :param package_description: The package_description of this NeoVIN.
        :type package_description: str
        """

        self._package_description = package_description

    @property
    def seating_capacity(self):
        """Gets the seating_capacity of this NeoVIN.

        Identified seating capacity of the vehicle

        :return: The seating_capacity of this NeoVIN.
        :rtype: float
        """
        return self._seating_capacity

    @seating_capacity.setter
    def seating_capacity(self, seating_capacity):
        """Sets the seating_capacity of this NeoVIN.

        Identified seating capacity of the vehicle

        :param seating_capacity: The seating_capacity of this NeoVIN.
        :type seating_capacity: float
        """

        self._seating_capacity = seating_capacity

    @property
    def squish_vin(self):
        """Gets the squish_vin of this NeoVIN.

        Vin prefix identification used in the decoding of the vehicle

        :return: The squish_vin of this NeoVIN.
        :rtype: str
        """
        return self._squish_vin

    @squish_vin.setter
    def squish_vin(self, squish_vin):
        """Sets the squish_vin of this NeoVIN.

        Vin prefix identification used in the decoding of the vehicle

        :param squish_vin: The squish_vin of this NeoVIN.
        :type squish_vin: str
        """

        self._squish_vin = squish_vin

    @property
    def transmission(self):
        """Gets the transmission of this NeoVIN.

        Identified installed Transmission of the vehicle

        :return: The transmission of this NeoVIN.
        :rtype: str
        """
        return self._transmission

    @transmission.setter
    def transmission(self, transmission):
        """Sets the transmission of this NeoVIN.

        Identified installed Transmission of the vehicle

        :param transmission: The transmission of this NeoVIN.
        :type transmission: str
        """

        self._transmission = transmission

    @property
    def transmission_confidence(self):
        """Gets the transmission_confidence of this NeoVIN.

        Identification of confidence related to the selection of the installed transmission

        :return: The transmission_confidence of this NeoVIN.
        :rtype: str
        """
        return self._transmission_confidence

    @transmission_confidence.setter
    def transmission_confidence(self, transmission_confidence):
        """Sets the transmission_confidence of this NeoVIN.

        Identification of confidence related to the selection of the installed transmission

        :param transmission_confidence: The transmission_confidence of this NeoVIN.
        :type transmission_confidence: str
        """

        self._transmission_confidence = transmission_confidence

    @property
    def transmission_description(self):
        """Gets the transmission_description of this NeoVIN.

        The description of the installed transmission

        :return: The transmission_description of this NeoVIN.
        :rtype: str
        """
        return self._transmission_description

    @transmission_description.setter
    def transmission_description(self, transmission_description):
        """Sets the transmission_description of this NeoVIN.

        The description of the installed transmission

        :param transmission_description: The transmission_description of this NeoVIN.
        :type transmission_description: str
        """

        self._transmission_description = transmission_description

    @property
    def trim(self):
        """Gets the trim of this NeoVIN.

        Trim of the vehicle

        :return: The trim of this NeoVIN.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this NeoVIN.

        Trim of the vehicle

        :param trim: The trim of this NeoVIN.
        :type trim: str
        """

        self._trim = trim

    @property
    def trim_confidence(self):
        """Gets the trim_confidence of this NeoVIN.

        Identification of confidence related to the selection of the trim

        :return: The trim_confidence of this NeoVIN.
        :rtype: str
        """
        return self._trim_confidence

    @trim_confidence.setter
    def trim_confidence(self, trim_confidence):
        """Sets the trim_confidence of this NeoVIN.

        Identification of confidence related to the selection of the trim

        :param trim_confidence: The trim_confidence of this NeoVIN.
        :type trim_confidence: str
        """

        self._trim_confidence = trim_confidence

    @property
    def updated_at(self):
        """Gets the updated_at of this NeoVIN.

        vin last decoded at timestamp

        :return: The updated_at of this NeoVIN.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this NeoVIN.

        vin last decoded at timestamp

        :param updated_at: The updated_at of this NeoVIN.
        :type updated_at: int
        """

        self._updated_at = updated_at

    @property
    def updated_at_date(self):
        """Gets the updated_at_date of this NeoVIN.

        vin last decoded at date

        :return: The updated_at_date of this NeoVIN.
        :rtype: str
        """
        return self._updated_at_date

    @updated_at_date.setter
    def updated_at_date(self, updated_at_date):
        """Sets the updated_at_date of this NeoVIN.

        vin last decoded at date

        :param updated_at_date: The updated_at_date of this NeoVIN.
        :type updated_at_date: str
        """

        self._updated_at_date = updated_at_date

    @property
    def version(self):
        """Gets the version of this NeoVIN.

        Version Name of the vehicle

        :return: The version of this NeoVIN.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NeoVIN.

        Version Name of the vehicle

        :param version: The version of this NeoVIN.
        :type version: str
        """

        self._version = version

    @property
    def version_confidence(self):
        """Gets the version_confidence of this NeoVIN.

        Identification of confidence related to the selection of the vehicle version

        :return: The version_confidence of this NeoVIN.
        :rtype: str
        """
        return self._version_confidence

    @version_confidence.setter
    def version_confidence(self, version_confidence):
        """Sets the version_confidence of this NeoVIN.

        Identification of confidence related to the selection of the vehicle version

        :param version_confidence: The version_confidence of this NeoVIN.
        :type version_confidence: str
        """

        self._version_confidence = version_confidence

    @property
    def vin(self):
        """Gets the vin of this NeoVIN.

        17 char long VIN of the vehicle

        :return: The vin of this NeoVIN.
        :rtype: str
        """
        return self._vin

    @vin.setter
    def vin(self, vin):
        """Sets the vin of this NeoVIN.

        17 char long VIN of the vehicle

        :param vin: The vin of this NeoVIN.
        :type vin: str
        """

        self._vin = vin

    @property
    def weight(self):
        """Gets the weight of this NeoVIN.

        Gross vehicle weight (lbs)

        :return: The weight of this NeoVIN.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this NeoVIN.

        Gross vehicle weight (lbs)

        :param weight: The weight of this NeoVIN.
        :type weight: float
        """

        self._weight = weight

    @property
    def width(self):
        """Gets the width of this NeoVIN.

        Overall width of the vehicle (in)

        :return: The width of this NeoVIN.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this NeoVIN.

        Overall width of the vehicle (in)

        :param width: The width of this NeoVIN.
        :type width: float
        """

        self._width = width

    @property
    def year(self):
        """Gets the year of this NeoVIN.

        Model Year of the vehicle

        :return: The year of this NeoVIN.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this NeoVIN.

        Model Year of the vehicle

        :param year: The year of this NeoVIN.
        :type year: int
        """

        self._year = year
