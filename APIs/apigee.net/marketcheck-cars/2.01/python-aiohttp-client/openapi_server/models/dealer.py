# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dealer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, data_source: str=None, dealer_type: str=None, dealership_group_name: str=None, distance: float=None, id: str=None, inventory_url: str=None, latitude: str=None, listing_count: int=None, location_ll: str=None, longitude: str=None, seller_email: str=None, seller_name: str=None, seller_phone: str=None, state: str=None, status: str=None, street: str=None, zip: str=None):
        """Dealer - a model defined in OpenAPI

        :param city: The city of this Dealer.
        :param country: The country of this Dealer.
        :param data_source: The data_source of this Dealer.
        :param dealer_type: The dealer_type of this Dealer.
        :param dealership_group_name: The dealership_group_name of this Dealer.
        :param distance: The distance of this Dealer.
        :param id: The id of this Dealer.
        :param inventory_url: The inventory_url of this Dealer.
        :param latitude: The latitude of this Dealer.
        :param listing_count: The listing_count of this Dealer.
        :param location_ll: The location_ll of this Dealer.
        :param longitude: The longitude of this Dealer.
        :param seller_email: The seller_email of this Dealer.
        :param seller_name: The seller_name of this Dealer.
        :param seller_phone: The seller_phone of this Dealer.
        :param state: The state of this Dealer.
        :param status: The status of this Dealer.
        :param street: The street of this Dealer.
        :param zip: The zip of this Dealer.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'data_source': str,
            'dealer_type': str,
            'dealership_group_name': str,
            'distance': float,
            'id': str,
            'inventory_url': str,
            'latitude': str,
            'listing_count': int,
            'location_ll': str,
            'longitude': str,
            'seller_email': str,
            'seller_name': str,
            'seller_phone': str,
            'state': str,
            'status': str,
            'street': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'data_source': 'data_source',
            'dealer_type': 'dealer_type',
            'dealership_group_name': 'dealership_group_name',
            'distance': 'distance',
            'id': 'id',
            'inventory_url': 'inventory_url',
            'latitude': 'latitude',
            'listing_count': 'listing_count',
            'location_ll': 'location_ll',
            'longitude': 'longitude',
            'seller_email': 'seller_email',
            'seller_name': 'seller_name',
            'seller_phone': 'seller_phone',
            'state': 'state',
            'status': 'status',
            'street': 'street',
            'zip': 'zip'
        }

        self._city = city
        self._country = country
        self._data_source = data_source
        self._dealer_type = dealer_type
        self._dealership_group_name = dealership_group_name
        self._distance = distance
        self._id = id
        self._inventory_url = inventory_url
        self._latitude = latitude
        self._listing_count = listing_count
        self._location_ll = location_ll
        self._longitude = longitude
        self._seller_email = seller_email
        self._seller_name = seller_name
        self._seller_phone = seller_phone
        self._state = state
        self._status = status
        self._street = street
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dealer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dealer of this Dealer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Dealer.

        City of the dealer

        :return: The city of this Dealer.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Dealer.

        City of the dealer

        :param city: The city of this Dealer.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Dealer.

        country of the dealer

        :return: The country of this Dealer.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Dealer.

        country of the dealer

        :param country: The country of this Dealer.
        :type country: str
        """

        self._country = country

    @property
    def data_source(self):
        """Gets the data_source of this Dealer.

        Datasource of the dealer

        :return: The data_source of this Dealer.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this Dealer.

        Datasource of the dealer

        :param data_source: The data_source of this Dealer.
        :type data_source: str
        """

        self._data_source = data_source

    @property
    def dealer_type(self):
        """Gets the dealer_type of this Dealer.

        Type of dealer (franchise/independent)

        :return: The dealer_type of this Dealer.
        :rtype: str
        """
        return self._dealer_type

    @dealer_type.setter
    def dealer_type(self, dealer_type):
        """Sets the dealer_type of this Dealer.

        Type of dealer (franchise/independent)

        :param dealer_type: The dealer_type of this Dealer.
        :type dealer_type: str
        """

        self._dealer_type = dealer_type

    @property
    def dealership_group_name(self):
        """Gets the dealership_group_name of this Dealer.

        Dealership group name of dealer

        :return: The dealership_group_name of this Dealer.
        :rtype: str
        """
        return self._dealership_group_name

    @dealership_group_name.setter
    def dealership_group_name(self, dealership_group_name):
        """Sets the dealership_group_name of this Dealer.

        Dealership group name of dealer

        :param dealership_group_name: The dealership_group_name of this Dealer.
        :type dealership_group_name: str
        """

        self._dealership_group_name = dealership_group_name

    @property
    def distance(self):
        """Gets the distance of this Dealer.

        Distance of dealer from given location

        :return: The distance of this Dealer.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Dealer.

        Distance of dealer from given location

        :param distance: The distance of this Dealer.
        :type distance: float
        """

        self._distance = distance

    @property
    def id(self):
        """Gets the id of this Dealer.

        The unique id associated with the dealer in the Marketcheck database

        :return: The id of this Dealer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dealer.

        The unique id associated with the dealer in the Marketcheck database

        :param id: The id of this Dealer.
        :type id: str
        """

        self._id = id

    @property
    def inventory_url(self):
        """Gets the inventory_url of this Dealer.

        Website of the dealer

        :return: The inventory_url of this Dealer.
        :rtype: str
        """
        return self._inventory_url

    @inventory_url.setter
    def inventory_url(self, inventory_url):
        """Sets the inventory_url of this Dealer.

        Website of the dealer

        :param inventory_url: The inventory_url of this Dealer.
        :type inventory_url: str
        """

        self._inventory_url = inventory_url

    @property
    def latitude(self):
        """Gets the latitude of this Dealer.

        Latutide for the dealer location

        :return: The latitude of this Dealer.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Dealer.

        Latutide for the dealer location

        :param latitude: The latitude of this Dealer.
        :type latitude: str
        """

        self._latitude = latitude

    @property
    def listing_count(self):
        """Gets the listing_count of this Dealer.

        Listing count of the dealer

        :return: The listing_count of this Dealer.
        :rtype: int
        """
        return self._listing_count

    @listing_count.setter
    def listing_count(self, listing_count):
        """Sets the listing_count of this Dealer.

        Listing count of the dealer

        :param listing_count: The listing_count of this Dealer.
        :type listing_count: int
        """

        self._listing_count = listing_count

    @property
    def location_ll(self):
        """Gets the location_ll of this Dealer.

        location_ll for the dealer location

        :return: The location_ll of this Dealer.
        :rtype: str
        """
        return self._location_ll

    @location_ll.setter
    def location_ll(self, location_ll):
        """Sets the location_ll of this Dealer.

        location_ll for the dealer location

        :param location_ll: The location_ll of this Dealer.
        :type location_ll: str
        """

        self._location_ll = location_ll

    @property
    def longitude(self):
        """Gets the longitude of this Dealer.

        Longitude for the dealer location

        :return: The longitude of this Dealer.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Dealer.

        Longitude for the dealer location

        :param longitude: The longitude of this Dealer.
        :type longitude: str
        """

        self._longitude = longitude

    @property
    def seller_email(self):
        """Gets the seller_email of this Dealer.

        Contact email of the dealer

        :return: The seller_email of this Dealer.
        :rtype: str
        """
        return self._seller_email

    @seller_email.setter
    def seller_email(self, seller_email):
        """Sets the seller_email of this Dealer.

        Contact email of the dealer

        :param seller_email: The seller_email of this Dealer.
        :type seller_email: str
        """

        self._seller_email = seller_email

    @property
    def seller_name(self):
        """Gets the seller_name of this Dealer.

        Name of the dealer

        :return: The seller_name of this Dealer.
        :rtype: str
        """
        return self._seller_name

    @seller_name.setter
    def seller_name(self, seller_name):
        """Sets the seller_name of this Dealer.

        Name of the dealer

        :param seller_name: The seller_name of this Dealer.
        :type seller_name: str
        """

        self._seller_name = seller_name

    @property
    def seller_phone(self):
        """Gets the seller_phone of this Dealer.

        Contact no of the dealer

        :return: The seller_phone of this Dealer.
        :rtype: str
        """
        return self._seller_phone

    @seller_phone.setter
    def seller_phone(self, seller_phone):
        """Sets the seller_phone of this Dealer.

        Contact no of the dealer

        :param seller_phone: The seller_phone of this Dealer.
        :type seller_phone: str
        """

        self._seller_phone = seller_phone

    @property
    def state(self):
        """Gets the state of this Dealer.

        State of the dealer

        :return: The state of this Dealer.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Dealer.

        State of the dealer

        :param state: The state of this Dealer.
        :type state: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this Dealer.

        Status of the dealer

        :return: The status of this Dealer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Dealer.

        Status of the dealer

        :param status: The status of this Dealer.
        :type status: str
        """

        self._status = status

    @property
    def street(self):
        """Gets the street of this Dealer.

        Street of the dealer

        :return: The street of this Dealer.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Dealer.

        Street of the dealer

        :param street: The street of this Dealer.
        :type street: str
        """

        self._street = street

    @property
    def zip(self):
        """Gets the zip of this Dealer.

        Zip of the dealer

        :return: The zip of this Dealer.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Dealer.

        Zip of the dealer

        :param zip: The zip of this Dealer.
        :type zip: str
        """

        self._zip = zip
