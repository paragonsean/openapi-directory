# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, latitude: float=None, longitude: float=None, state: str=None, zip: str=None):
        """Location - a model defined in OpenAPI

        :param city: The city of this Location.
        :param latitude: The latitude of this Location.
        :param longitude: The longitude of this Location.
        :param state: The state of this Location.
        :param zip: The zip of this Location.
        """
        self.openapi_types = {
            'city': str,
            'latitude': float,
            'longitude': float,
            'state': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'city',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'state': 'state',
            'zip': 'zip'
        }

        self._city = city
        self._latitude = latitude
        self._longitude = longitude
        self._state = state
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Location.

        City of the listing

        :return: The city of this Location.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Location.

        City of the listing

        :param city: The city of this Location.
        :type city: str
        """

        self._city = city

    @property
    def latitude(self):
        """Gets the latitude of this Location.

        Latitude component of the location

        :return: The latitude of this Location.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Location.

        Latitude component of the location

        :param latitude: The latitude of this Location.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Location.

        Longitude component of the location

        :return: The longitude of this Location.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Location.

        Longitude component of the location

        :param longitude: The longitude of this Location.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def state(self):
        """Gets the state of this Location.

        State of the listing

        :return: The state of this Location.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Location.

        State of the listing

        :param state: The state of this Location.
        :type state: str
        """

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this Location.

        Zip of the listing

        :return: The zip of this Location.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Location.

        Zip of the listing

        :param zip: The zip of this Location.
        :type zip: str
        """

        self._zip = zip
