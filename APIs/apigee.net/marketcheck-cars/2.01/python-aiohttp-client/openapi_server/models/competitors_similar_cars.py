# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompetitorsSimilarCars(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_market_value: float=None, avg_miles: float=None, avg_price: float=None, name: str=None):
        """CompetitorsSimilarCars - a model defined in OpenAPI

        :param avg_market_value: The avg_market_value of this CompetitorsSimilarCars.
        :param avg_miles: The avg_miles of this CompetitorsSimilarCars.
        :param avg_price: The avg_price of this CompetitorsSimilarCars.
        :param name: The name of this CompetitorsSimilarCars.
        """
        self.openapi_types = {
            'avg_market_value': float,
            'avg_miles': float,
            'avg_price': float,
            'name': str
        }

        self.attribute_map = {
            'avg_market_value': 'avg_market_value',
            'avg_miles': 'avg_miles',
            'avg_price': 'avg_price',
            'name': 'name'
        }

        self._avg_market_value = avg_market_value
        self._avg_miles = avg_miles
        self._avg_price = avg_price
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompetitorsSimilarCars':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompetitorsSimilarCars of this CompetitorsSimilarCars.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_market_value(self):
        """Gets the avg_market_value of this CompetitorsSimilarCars.

        Average market value of year make model combination

        :return: The avg_market_value of this CompetitorsSimilarCars.
        :rtype: float
        """
        return self._avg_market_value

    @avg_market_value.setter
    def avg_market_value(self, avg_market_value):
        """Sets the avg_market_value of this CompetitorsSimilarCars.

        Average market value of year make model combination

        :param avg_market_value: The avg_market_value of this CompetitorsSimilarCars.
        :type avg_market_value: float
        """

        self._avg_market_value = avg_market_value

    @property
    def avg_miles(self):
        """Gets the avg_miles of this CompetitorsSimilarCars.

        Average mileage of year make model combination

        :return: The avg_miles of this CompetitorsSimilarCars.
        :rtype: float
        """
        return self._avg_miles

    @avg_miles.setter
    def avg_miles(self, avg_miles):
        """Sets the avg_miles of this CompetitorsSimilarCars.

        Average mileage of year make model combination

        :param avg_miles: The avg_miles of this CompetitorsSimilarCars.
        :type avg_miles: float
        """

        self._avg_miles = avg_miles

    @property
    def avg_price(self):
        """Gets the avg_price of this CompetitorsSimilarCars.

        Average price of year make model combination

        :return: The avg_price of this CompetitorsSimilarCars.
        :rtype: float
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this CompetitorsSimilarCars.

        Average price of year make model combination

        :param avg_price: The avg_price of this CompetitorsSimilarCars.
        :type avg_price: float
        """

        self._avg_price = avg_price

    @property
    def name(self):
        """Gets the name of this CompetitorsSimilarCars.

        ymm_comb_name

        :return: The name of this CompetitorsSimilarCars.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompetitorsSimilarCars.

        ymm_comb_name

        :param name: The name of this CompetitorsSimilarCars.
        :type name: str
        """

        self._name = name
