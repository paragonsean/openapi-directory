# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StatsItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, max: int=None, mean: float=None, median: float=None, min: int=None, missing: int=None, stddev: float=None, sum: int=None, sum_of_squares: float=None):
        """StatsItem - a model defined in OpenAPI

        :param count: The count of this StatsItem.
        :param max: The max of this StatsItem.
        :param mean: The mean of this StatsItem.
        :param median: The median of this StatsItem.
        :param min: The min of this StatsItem.
        :param missing: The missing of this StatsItem.
        :param stddev: The stddev of this StatsItem.
        :param sum: The sum of this StatsItem.
        :param sum_of_squares: The sum_of_squares of this StatsItem.
        """
        self.openapi_types = {
            'count': int,
            'max': int,
            'mean': float,
            'median': float,
            'min': int,
            'missing': int,
            'stddev': float,
            'sum': int,
            'sum_of_squares': float
        }

        self.attribute_map = {
            'count': 'count',
            'max': 'max',
            'mean': 'mean',
            'median': 'median',
            'min': 'min',
            'missing': 'missing',
            'stddev': 'stddev',
            'sum': 'sum',
            'sum_of_squares': 'sum_of_squares'
        }

        self._count = count
        self._max = max
        self._mean = mean
        self._median = median
        self._min = min
        self._missing = missing
        self._stddev = stddev
        self._sum = sum
        self._sum_of_squares = sum_of_squares

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatsItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatsItem of this StatsItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this StatsItem.

        count

        :return: The count of this StatsItem.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this StatsItem.

        count

        :param count: The count of this StatsItem.
        :type count: int
        """

        self._count = count

    @property
    def max(self):
        """Gets the max of this StatsItem.

        Maximum value of the field

        :return: The max of this StatsItem.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this StatsItem.

        Maximum value of the field

        :param max: The max of this StatsItem.
        :type max: int
        """

        self._max = max

    @property
    def mean(self):
        """Gets the mean of this StatsItem.

        Mean of the field

        :return: The mean of this StatsItem.
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this StatsItem.

        Mean of the field

        :param mean: The mean of this StatsItem.
        :type mean: float
        """

        self._mean = mean

    @property
    def median(self):
        """Gets the median of this StatsItem.

        median of the field

        :return: The median of this StatsItem.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this StatsItem.

        median of the field

        :param median: The median of this StatsItem.
        :type median: float
        """

        self._median = median

    @property
    def min(self):
        """Gets the min of this StatsItem.

        Minimum value of the field

        :return: The min of this StatsItem.
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this StatsItem.

        Minimum value of the field

        :param min: The min of this StatsItem.
        :type min: int
        """

        self._min = min

    @property
    def missing(self):
        """Gets the missing of this StatsItem.

        count of listings missing particular field

        :return: The missing of this StatsItem.
        :rtype: int
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this StatsItem.

        count of listings missing particular field

        :param missing: The missing of this StatsItem.
        :type missing: int
        """

        self._missing = missing

    @property
    def stddev(self):
        """Gets the stddev of this StatsItem.

        stddev of the field

        :return: The stddev of this StatsItem.
        :rtype: float
        """
        return self._stddev

    @stddev.setter
    def stddev(self, stddev):
        """Sets the stddev of this StatsItem.

        stddev of the field

        :param stddev: The stddev of this StatsItem.
        :type stddev: float
        """

        self._stddev = stddev

    @property
    def sum(self):
        """Gets the sum of this StatsItem.

        Summation of all values of the field

        :return: The sum of this StatsItem.
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this StatsItem.

        Summation of all values of the field

        :param sum: The sum of this StatsItem.
        :type sum: int
        """

        self._sum = sum

    @property
    def sum_of_squares(self):
        """Gets the sum_of_squares of this StatsItem.

        sum_of_squares of the field

        :return: The sum_of_squares of this StatsItem.
        :rtype: float
        """
        return self._sum_of_squares

    @sum_of_squares.setter
    def sum_of_squares(self, sum_of_squares):
        """Sets the sum_of_squares of this StatsItem.

        sum_of_squares of the field

        :param sum_of_squares: The sum_of_squares of this StatsItem.
        :type sum_of_squares: float
        """

        self._sum_of_squares = sum_of_squares
