# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DailyStatsNestedJson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interquartile_range: float=None, mean: float=None, median: float=None, population_standard_deviation: float=None, standard_deviation: float=None, trimmed_mean: float=None, variance: float=None):
        """DailyStatsNestedJson - a model defined in OpenAPI

        :param interquartile_range: The interquartile_range of this DailyStatsNestedJson.
        :param mean: The mean of this DailyStatsNestedJson.
        :param median: The median of this DailyStatsNestedJson.
        :param population_standard_deviation: The population_standard_deviation of this DailyStatsNestedJson.
        :param standard_deviation: The standard_deviation of this DailyStatsNestedJson.
        :param trimmed_mean: The trimmed_mean of this DailyStatsNestedJson.
        :param variance: The variance of this DailyStatsNestedJson.
        """
        self.openapi_types = {
            'interquartile_range': float,
            'mean': float,
            'median': float,
            'population_standard_deviation': float,
            'standard_deviation': float,
            'trimmed_mean': float,
            'variance': float
        }

        self.attribute_map = {
            'interquartile_range': 'interquartile_range',
            'mean': 'mean',
            'median': 'median',
            'population_standard_deviation': 'population_standard_deviation',
            'standard_deviation': 'standard_deviation',
            'trimmed_mean': 'trimmed_mean',
            'variance': 'variance'
        }

        self._interquartile_range = interquartile_range
        self._mean = mean
        self._median = median
        self._population_standard_deviation = population_standard_deviation
        self._standard_deviation = standard_deviation
        self._trimmed_mean = trimmed_mean
        self._variance = variance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DailyStatsNestedJson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DailyStatsNestedJson of this DailyStatsNestedJson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interquartile_range(self):
        """Gets the interquartile_range of this DailyStatsNestedJson.

        Interquartile range

        :return: The interquartile_range of this DailyStatsNestedJson.
        :rtype: float
        """
        return self._interquartile_range

    @interquartile_range.setter
    def interquartile_range(self, interquartile_range):
        """Sets the interquartile_range of this DailyStatsNestedJson.

        Interquartile range

        :param interquartile_range: The interquartile_range of this DailyStatsNestedJson.
        :type interquartile_range: float
        """

        self._interquartile_range = interquartile_range

    @property
    def mean(self):
        """Gets the mean of this DailyStatsNestedJson.

        Mean

        :return: The mean of this DailyStatsNestedJson.
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this DailyStatsNestedJson.

        Mean

        :param mean: The mean of this DailyStatsNestedJson.
        :type mean: float
        """

        self._mean = mean

    @property
    def median(self):
        """Gets the median of this DailyStatsNestedJson.

        Median

        :return: The median of this DailyStatsNestedJson.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this DailyStatsNestedJson.

        Median

        :param median: The median of this DailyStatsNestedJson.
        :type median: float
        """

        self._median = median

    @property
    def population_standard_deviation(self):
        """Gets the population_standard_deviation of this DailyStatsNestedJson.

        population standard deviation

        :return: The population_standard_deviation of this DailyStatsNestedJson.
        :rtype: float
        """
        return self._population_standard_deviation

    @population_standard_deviation.setter
    def population_standard_deviation(self, population_standard_deviation):
        """Sets the population_standard_deviation of this DailyStatsNestedJson.

        population standard deviation

        :param population_standard_deviation: The population_standard_deviation of this DailyStatsNestedJson.
        :type population_standard_deviation: float
        """

        self._population_standard_deviation = population_standard_deviation

    @property
    def standard_deviation(self):
        """Gets the standard_deviation of this DailyStatsNestedJson.

        Standard Deviation

        :return: The standard_deviation of this DailyStatsNestedJson.
        :rtype: float
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """Sets the standard_deviation of this DailyStatsNestedJson.

        Standard Deviation

        :param standard_deviation: The standard_deviation of this DailyStatsNestedJson.
        :type standard_deviation: float
        """

        self._standard_deviation = standard_deviation

    @property
    def trimmed_mean(self):
        """Gets the trimmed_mean of this DailyStatsNestedJson.

        Trimmed Mean

        :return: The trimmed_mean of this DailyStatsNestedJson.
        :rtype: float
        """
        return self._trimmed_mean

    @trimmed_mean.setter
    def trimmed_mean(self, trimmed_mean):
        """Sets the trimmed_mean of this DailyStatsNestedJson.

        Trimmed Mean

        :param trimmed_mean: The trimmed_mean of this DailyStatsNestedJson.
        :type trimmed_mean: float
        """

        self._trimmed_mean = trimmed_mean

    @property
    def variance(self):
        """Gets the variance of this DailyStatsNestedJson.

        variance

        :return: The variance of this DailyStatsNestedJson.
        :rtype: float
        """
        return self._variance

    @variance.setter
    def variance(self, variance):
        """Sets the variance of this DailyStatsNestedJson.

        variance

        :param variance: The variance of this DailyStatsNestedJson.
        :type variance: float
        """

        self._variance = variance
