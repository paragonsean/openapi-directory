# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PopularityItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, delta_percent: float=None, difference: float=None, left: float=None, right: float=None, text: str=None, thumbs: str=None):
        """PopularityItem - a model defined in OpenAPI

        :param color: The color of this PopularityItem.
        :param delta_percent: The delta_percent of this PopularityItem.
        :param difference: The difference of this PopularityItem.
        :param left: The left of this PopularityItem.
        :param right: The right of this PopularityItem.
        :param text: The text of this PopularityItem.
        :param thumbs: The thumbs of this PopularityItem.
        """
        self.openapi_types = {
            'color': str,
            'delta_percent': float,
            'difference': float,
            'left': float,
            'right': float,
            'text': str,
            'thumbs': str
        }

        self.attribute_map = {
            'color': 'color',
            'delta_percent': 'delta_percent',
            'difference': 'difference',
            'left': 'left',
            'right': 'right',
            'text': 'text',
            'thumbs': 'thumbs'
        }

        self._color = color
        self._delta_percent = delta_percent
        self._difference = difference
        self._left = left
        self._right = right
        self._text = text
        self._thumbs = thumbs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PopularityItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PopularityItem of this PopularityItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this PopularityItem.

        Color depending upon left and right analysis numbers

        :return: The color of this PopularityItem.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PopularityItem.

        Color depending upon left and right analysis numbers

        :param color: The color of this PopularityItem.
        :type color: str
        """

        self._color = color

    @property
    def delta_percent(self):
        """Gets the delta_percent of this PopularityItem.

        Delta percent

        :return: The delta_percent of this PopularityItem.
        :rtype: float
        """
        return self._delta_percent

    @delta_percent.setter
    def delta_percent(self, delta_percent):
        """Sets the delta_percent of this PopularityItem.

        Delta percent

        :param delta_percent: The delta_percent of this PopularityItem.
        :type delta_percent: float
        """

        self._delta_percent = delta_percent

    @property
    def difference(self):
        """Gets the difference of this PopularityItem.

        Difference depending upon left and right analysis

        :return: The difference of this PopularityItem.
        :rtype: float
        """
        return self._difference

    @difference.setter
    def difference(self, difference):
        """Sets the difference of this PopularityItem.

        Difference depending upon left and right analysis

        :param difference: The difference of this PopularityItem.
        :type difference: float
        """

        self._difference = difference

    @property
    def left(self):
        """Gets the left of this PopularityItem.

        Left side rating for above description (2016 ford F-150 Lariat)

        :return: The left of this PopularityItem.
        :rtype: float
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this PopularityItem.

        Left side rating for above description (2016 ford F-150 Lariat)

        :param left: The left of this PopularityItem.
        :type left: float
        """

        self._left = left

    @property
    def right(self):
        """Gets the right of this PopularityItem.

        Right side rating for above description (All Other Cars)

        :return: The right of this PopularityItem.
        :rtype: float
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this PopularityItem.

        Right side rating for above description (All Other Cars)

        :param right: The right of this PopularityItem.
        :type right: float
        """

        self._right = right

    @property
    def text(self):
        """Gets the text of this PopularityItem.

        Description for which popularity should be show eg: 2016 ford F-150 Lariat vs All Other Cars

        :return: The text of this PopularityItem.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PopularityItem.

        Description for which popularity should be show eg: 2016 ford F-150 Lariat vs All Other Cars

        :param text: The text of this PopularityItem.
        :type text: str
        """

        self._text = text

    @property
    def thumbs(self):
        """Gets the thumbs of this PopularityItem.

        Thumbs up/down depending upon left and right analysis numbers

        :return: The thumbs of this PopularityItem.
        :rtype: str
        """
        return self._thumbs

    @thumbs.setter
    def thumbs(self, thumbs):
        """Sets the thumbs of this PopularityItem.

        Thumbs up/down depending upon left and right analysis numbers

        :param thumbs: The thumbs of this PopularityItem.
        :type thumbs: str
        """

        self._thumbs = thumbs
