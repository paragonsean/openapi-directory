# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Build(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, antibrake_sys: str=None, body_subtype: str=None, body_type: str=None, city_miles: str=None, city_mpg: int=None, cylinders: int=None, doors: int=None, drivetrain: str=None, engine: str=None, engine_aspiration: str=None, engine_block: str=None, engine_measure: str=None, engine_size: float=None, fuel_type: str=None, highway_miles: str=None, highway_mpg: int=None, made_in: str=None, make: str=None, model: str=None, opt_seating: str=None, overall_height: str=None, overall_length: str=None, overall_width: str=None, powertrain_type: str=None, short_trim: str=None, std_seating: str=None, steering_type: str=None, tank_size: str=None, transmission: str=None, trim: str=None, trim_r: str=None, vehicle_type: str=None, year: int=None):
        """Build - a model defined in OpenAPI

        :param antibrake_sys: The antibrake_sys of this Build.
        :param body_subtype: The body_subtype of this Build.
        :param body_type: The body_type of this Build.
        :param city_miles: The city_miles of this Build.
        :param city_mpg: The city_mpg of this Build.
        :param cylinders: The cylinders of this Build.
        :param doors: The doors of this Build.
        :param drivetrain: The drivetrain of this Build.
        :param engine: The engine of this Build.
        :param engine_aspiration: The engine_aspiration of this Build.
        :param engine_block: The engine_block of this Build.
        :param engine_measure: The engine_measure of this Build.
        :param engine_size: The engine_size of this Build.
        :param fuel_type: The fuel_type of this Build.
        :param highway_miles: The highway_miles of this Build.
        :param highway_mpg: The highway_mpg of this Build.
        :param made_in: The made_in of this Build.
        :param make: The make of this Build.
        :param model: The model of this Build.
        :param opt_seating: The opt_seating of this Build.
        :param overall_height: The overall_height of this Build.
        :param overall_length: The overall_length of this Build.
        :param overall_width: The overall_width of this Build.
        :param powertrain_type: The powertrain_type of this Build.
        :param short_trim: The short_trim of this Build.
        :param std_seating: The std_seating of this Build.
        :param steering_type: The steering_type of this Build.
        :param tank_size: The tank_size of this Build.
        :param transmission: The transmission of this Build.
        :param trim: The trim of this Build.
        :param trim_r: The trim_r of this Build.
        :param vehicle_type: The vehicle_type of this Build.
        :param year: The year of this Build.
        """
        self.openapi_types = {
            'antibrake_sys': str,
            'body_subtype': str,
            'body_type': str,
            'city_miles': str,
            'city_mpg': int,
            'cylinders': int,
            'doors': int,
            'drivetrain': str,
            'engine': str,
            'engine_aspiration': str,
            'engine_block': str,
            'engine_measure': str,
            'engine_size': float,
            'fuel_type': str,
            'highway_miles': str,
            'highway_mpg': int,
            'made_in': str,
            'make': str,
            'model': str,
            'opt_seating': str,
            'overall_height': str,
            'overall_length': str,
            'overall_width': str,
            'powertrain_type': str,
            'short_trim': str,
            'std_seating': str,
            'steering_type': str,
            'tank_size': str,
            'transmission': str,
            'trim': str,
            'trim_r': str,
            'vehicle_type': str,
            'year': int
        }

        self.attribute_map = {
            'antibrake_sys': 'antibrake_sys',
            'body_subtype': 'body_subtype',
            'body_type': 'body_type',
            'city_miles': 'city_miles',
            'city_mpg': 'city_mpg',
            'cylinders': 'cylinders',
            'doors': 'doors',
            'drivetrain': 'drivetrain',
            'engine': 'engine',
            'engine_aspiration': 'engine_aspiration',
            'engine_block': 'engine_block',
            'engine_measure': 'engine_measure',
            'engine_size': 'engine_size',
            'fuel_type': 'fuel_type',
            'highway_miles': 'highway_miles',
            'highway_mpg': 'highway_mpg',
            'made_in': 'made_in',
            'make': 'make',
            'model': 'model',
            'opt_seating': 'opt_seating',
            'overall_height': 'overall_height',
            'overall_length': 'overall_length',
            'overall_width': 'overall_width',
            'powertrain_type': 'powertrain_type',
            'short_trim': 'short_trim',
            'std_seating': 'std_seating',
            'steering_type': 'steering_type',
            'tank_size': 'tank_size',
            'transmission': 'transmission',
            'trim': 'trim',
            'trim_r': 'trim_r',
            'vehicle_type': 'vehicle_type',
            'year': 'year'
        }

        self._antibrake_sys = antibrake_sys
        self._body_subtype = body_subtype
        self._body_type = body_type
        self._city_miles = city_miles
        self._city_mpg = city_mpg
        self._cylinders = cylinders
        self._doors = doors
        self._drivetrain = drivetrain
        self._engine = engine
        self._engine_aspiration = engine_aspiration
        self._engine_block = engine_block
        self._engine_measure = engine_measure
        self._engine_size = engine_size
        self._fuel_type = fuel_type
        self._highway_miles = highway_miles
        self._highway_mpg = highway_mpg
        self._made_in = made_in
        self._make = make
        self._model = model
        self._opt_seating = opt_seating
        self._overall_height = overall_height
        self._overall_length = overall_length
        self._overall_width = overall_width
        self._powertrain_type = powertrain_type
        self._short_trim = short_trim
        self._std_seating = std_seating
        self._steering_type = steering_type
        self._tank_size = tank_size
        self._transmission = transmission
        self._trim = trim
        self._trim_r = trim_r
        self._vehicle_type = vehicle_type
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Build':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Build of this Build.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def antibrake_sys(self):
        """Gets the antibrake_sys of this Build.

        Antibrake system of the car

        :return: The antibrake_sys of this Build.
        :rtype: str
        """
        return self._antibrake_sys

    @antibrake_sys.setter
    def antibrake_sys(self, antibrake_sys):
        """Sets the antibrake_sys of this Build.

        Antibrake system of the car

        :param antibrake_sys: The antibrake_sys of this Build.
        :type antibrake_sys: str
        """

        self._antibrake_sys = antibrake_sys

    @property
    def body_subtype(self):
        """Gets the body_subtype of this Build.

        Body subtype of the car

        :return: The body_subtype of this Build.
        :rtype: str
        """
        return self._body_subtype

    @body_subtype.setter
    def body_subtype(self, body_subtype):
        """Sets the body_subtype of this Build.

        Body subtype of the car

        :param body_subtype: The body_subtype of this Build.
        :type body_subtype: str
        """

        self._body_subtype = body_subtype

    @property
    def body_type(self):
        """Gets the body_type of this Build.

        Body type of the car

        :return: The body_type of this Build.
        :rtype: str
        """
        return self._body_type

    @body_type.setter
    def body_type(self, body_type):
        """Sets the body_type of this Build.

        Body type of the car

        :param body_type: The body_type of this Build.
        :type body_type: str
        """

        self._body_type = body_type

    @property
    def city_miles(self):
        """Gets the city_miles of this Build.

        City miles of the car

        :return: The city_miles of this Build.
        :rtype: str
        """
        return self._city_miles

    @city_miles.setter
    def city_miles(self, city_miles):
        """Sets the city_miles of this Build.

        City miles of the car

        :param city_miles: The city_miles of this Build.
        :type city_miles: str
        """

        self._city_miles = city_miles

    @property
    def city_mpg(self):
        """Gets the city_mpg of this Build.

        City Mileage in MPG

        :return: The city_mpg of this Build.
        :rtype: int
        """
        return self._city_mpg

    @city_mpg.setter
    def city_mpg(self, city_mpg):
        """Sets the city_mpg of this Build.

        City Mileage in MPG

        :param city_mpg: The city_mpg of this Build.
        :type city_mpg: int
        """

        self._city_mpg = city_mpg

    @property
    def cylinders(self):
        """Gets the cylinders of this Build.

        No of cylinders of the car

        :return: The cylinders of this Build.
        :rtype: int
        """
        return self._cylinders

    @cylinders.setter
    def cylinders(self, cylinders):
        """Sets the cylinders of this Build.

        No of cylinders of the car

        :param cylinders: The cylinders of this Build.
        :type cylinders: int
        """

        self._cylinders = cylinders

    @property
    def doors(self):
        """Gets the doors of this Build.

        No of doors of the car

        :return: The doors of this Build.
        :rtype: int
        """
        return self._doors

    @doors.setter
    def doors(self, doors):
        """Sets the doors of this Build.

        No of doors of the car

        :param doors: The doors of this Build.
        :type doors: int
        """

        self._doors = doors

    @property
    def drivetrain(self):
        """Gets the drivetrain of this Build.

        Drivetrain of the car

        :return: The drivetrain of this Build.
        :rtype: str
        """
        return self._drivetrain

    @drivetrain.setter
    def drivetrain(self, drivetrain):
        """Sets the drivetrain of this Build.

        Drivetrain of the car

        :param drivetrain: The drivetrain of this Build.
        :type drivetrain: str
        """

        self._drivetrain = drivetrain

    @property
    def engine(self):
        """Gets the engine of this Build.

        Engine of the car

        :return: The engine of this Build.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this Build.

        Engine of the car

        :param engine: The engine of this Build.
        :type engine: str
        """

        self._engine = engine

    @property
    def engine_aspiration(self):
        """Gets the engine_aspiration of this Build.

        Engine aspiration of the car

        :return: The engine_aspiration of this Build.
        :rtype: str
        """
        return self._engine_aspiration

    @engine_aspiration.setter
    def engine_aspiration(self, engine_aspiration):
        """Sets the engine_aspiration of this Build.

        Engine aspiration of the car

        :param engine_aspiration: The engine_aspiration of this Build.
        :type engine_aspiration: str
        """

        self._engine_aspiration = engine_aspiration

    @property
    def engine_block(self):
        """Gets the engine_block of this Build.

        Engine block of the car

        :return: The engine_block of this Build.
        :rtype: str
        """
        return self._engine_block

    @engine_block.setter
    def engine_block(self, engine_block):
        """Sets the engine_block of this Build.

        Engine block of the car

        :param engine_block: The engine_block of this Build.
        :type engine_block: str
        """

        self._engine_block = engine_block

    @property
    def engine_measure(self):
        """Gets the engine_measure of this Build.

        Engine block of the car

        :return: The engine_measure of this Build.
        :rtype: str
        """
        return self._engine_measure

    @engine_measure.setter
    def engine_measure(self, engine_measure):
        """Sets the engine_measure of this Build.

        Engine block of the car

        :param engine_measure: The engine_measure of this Build.
        :type engine_measure: str
        """

        self._engine_measure = engine_measure

    @property
    def engine_size(self):
        """Gets the engine_size of this Build.

        Engine size of the car

        :return: The engine_size of this Build.
        :rtype: float
        """
        return self._engine_size

    @engine_size.setter
    def engine_size(self, engine_size):
        """Sets the engine_size of this Build.

        Engine size of the car

        :param engine_size: The engine_size of this Build.
        :type engine_size: float
        """

        self._engine_size = engine_size

    @property
    def fuel_type(self):
        """Gets the fuel_type of this Build.

        Fuel type of the car

        :return: The fuel_type of this Build.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this Build.

        Fuel type of the car

        :param fuel_type: The fuel_type of this Build.
        :type fuel_type: str
        """

        self._fuel_type = fuel_type

    @property
    def highway_miles(self):
        """Gets the highway_miles of this Build.

        Highway miles of the car

        :return: The highway_miles of this Build.
        :rtype: str
        """
        return self._highway_miles

    @highway_miles.setter
    def highway_miles(self, highway_miles):
        """Sets the highway_miles of this Build.

        Highway miles of the car

        :param highway_miles: The highway_miles of this Build.
        :type highway_miles: str
        """

        self._highway_miles = highway_miles

    @property
    def highway_mpg(self):
        """Gets the highway_mpg of this Build.

        Highway Mileage in MPG

        :return: The highway_mpg of this Build.
        :rtype: int
        """
        return self._highway_mpg

    @highway_mpg.setter
    def highway_mpg(self, highway_mpg):
        """Sets the highway_mpg of this Build.

        Highway Mileage in MPG

        :param highway_mpg: The highway_mpg of this Build.
        :type highway_mpg: int
        """

        self._highway_mpg = highway_mpg

    @property
    def made_in(self):
        """Gets the made_in of this Build.

        Made in of the car

        :return: The made_in of this Build.
        :rtype: str
        """
        return self._made_in

    @made_in.setter
    def made_in(self, made_in):
        """Sets the made_in of this Build.

        Made in of the car

        :param made_in: The made_in of this Build.
        :type made_in: str
        """

        self._made_in = made_in

    @property
    def make(self):
        """Gets the make of this Build.

        Car Make

        :return: The make of this Build.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this Build.

        Car Make

        :param make: The make of this Build.
        :type make: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this Build.

        Car model

        :return: The model of this Build.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Build.

        Car model

        :param model: The model of this Build.
        :type model: str
        """

        self._model = model

    @property
    def opt_seating(self):
        """Gets the opt_seating of this Build.

        opt seating of the car

        :return: The opt_seating of this Build.
        :rtype: str
        """
        return self._opt_seating

    @opt_seating.setter
    def opt_seating(self, opt_seating):
        """Sets the opt_seating of this Build.

        opt seating of the car

        :param opt_seating: The opt_seating of this Build.
        :type opt_seating: str
        """

        self._opt_seating = opt_seating

    @property
    def overall_height(self):
        """Gets the overall_height of this Build.

        Overall height of the car

        :return: The overall_height of this Build.
        :rtype: str
        """
        return self._overall_height

    @overall_height.setter
    def overall_height(self, overall_height):
        """Sets the overall_height of this Build.

        Overall height of the car

        :param overall_height: The overall_height of this Build.
        :type overall_height: str
        """

        self._overall_height = overall_height

    @property
    def overall_length(self):
        """Gets the overall_length of this Build.

        Overall length of the car

        :return: The overall_length of this Build.
        :rtype: str
        """
        return self._overall_length

    @overall_length.setter
    def overall_length(self, overall_length):
        """Sets the overall_length of this Build.

        Overall length of the car

        :param overall_length: The overall_length of this Build.
        :type overall_length: str
        """

        self._overall_length = overall_length

    @property
    def overall_width(self):
        """Gets the overall_width of this Build.

        Overall width of the car

        :return: The overall_width of this Build.
        :rtype: str
        """
        return self._overall_width

    @overall_width.setter
    def overall_width(self, overall_width):
        """Sets the overall_width of this Build.

        Overall width of the car

        :param overall_width: The overall_width of this Build.
        :type overall_width: str
        """

        self._overall_width = overall_width

    @property
    def powertrain_type(self):
        """Gets the powertrain_type of this Build.

        powertrain_type of the car

        :return: The powertrain_type of this Build.
        :rtype: str
        """
        return self._powertrain_type

    @powertrain_type.setter
    def powertrain_type(self, powertrain_type):
        """Sets the powertrain_type of this Build.

        powertrain_type of the car

        :param powertrain_type: The powertrain_type of this Build.
        :type powertrain_type: str
        """

        self._powertrain_type = powertrain_type

    @property
    def short_trim(self):
        """Gets the short_trim of this Build.

        Short trim of the car

        :return: The short_trim of this Build.
        :rtype: str
        """
        return self._short_trim

    @short_trim.setter
    def short_trim(self, short_trim):
        """Sets the short_trim of this Build.

        Short trim of the car

        :param short_trim: The short_trim of this Build.
        :type short_trim: str
        """

        self._short_trim = short_trim

    @property
    def std_seating(self):
        """Gets the std_seating of this Build.

        Std seating of the car

        :return: The std_seating of this Build.
        :rtype: str
        """
        return self._std_seating

    @std_seating.setter
    def std_seating(self, std_seating):
        """Sets the std_seating of this Build.

        Std seating of the car

        :param std_seating: The std_seating of this Build.
        :type std_seating: str
        """

        self._std_seating = std_seating

    @property
    def steering_type(self):
        """Gets the steering_type of this Build.

        Steering type of the car

        :return: The steering_type of this Build.
        :rtype: str
        """
        return self._steering_type

    @steering_type.setter
    def steering_type(self, steering_type):
        """Sets the steering_type of this Build.

        Steering type of the car

        :param steering_type: The steering_type of this Build.
        :type steering_type: str
        """

        self._steering_type = steering_type

    @property
    def tank_size(self):
        """Gets the tank_size of this Build.

        Tank size of the car

        :return: The tank_size of this Build.
        :rtype: str
        """
        return self._tank_size

    @tank_size.setter
    def tank_size(self, tank_size):
        """Sets the tank_size of this Build.

        Tank size of the car

        :param tank_size: The tank_size of this Build.
        :type tank_size: str
        """

        self._tank_size = tank_size

    @property
    def transmission(self):
        """Gets the transmission of this Build.

        Transmission of the car

        :return: The transmission of this Build.
        :rtype: str
        """
        return self._transmission

    @transmission.setter
    def transmission(self, transmission):
        """Sets the transmission of this Build.

        Transmission of the car

        :param transmission: The transmission of this Build.
        :type transmission: str
        """

        self._transmission = transmission

    @property
    def trim(self):
        """Gets the trim of this Build.

        Trim of the car

        :return: The trim of this Build.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this Build.

        Trim of the car

        :param trim: The trim of this Build.
        :type trim: str
        """

        self._trim = trim

    @property
    def trim_r(self):
        """Gets the trim_r of this Build.

        Trim_r of the car

        :return: The trim_r of this Build.
        :rtype: str
        """
        return self._trim_r

    @trim_r.setter
    def trim_r(self, trim_r):
        """Sets the trim_r of this Build.

        Trim_r of the car

        :param trim_r: The trim_r of this Build.
        :type trim_r: str
        """

        self._trim_r = trim_r

    @property
    def vehicle_type(self):
        """Gets the vehicle_type of this Build.

        Vehicle type of the car

        :return: The vehicle_type of this Build.
        :rtype: str
        """
        return self._vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type):
        """Sets the vehicle_type of this Build.

        Vehicle type of the car

        :param vehicle_type: The vehicle_type of this Build.
        :type vehicle_type: str
        """

        self._vehicle_type = vehicle_type

    @property
    def year(self):
        """Gets the year of this Build.

        Year of the Car

        :return: The year of this Build.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Build.

        Year of the Car

        :param year: The year of this Build.
        :type year: int
        """

        self._year = year
