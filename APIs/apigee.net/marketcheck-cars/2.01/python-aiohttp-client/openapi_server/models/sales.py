# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_stats import SalesStats
from openapi_server import util


class Sales(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, counts: int=None, cpo: int=None, dom_stats: SalesStats=None, inventory_type: str=None, make: str=None, miles_stats: SalesStats=None, model: str=None, non_cpo: int=None, price_stats: SalesStats=None, state: str=None, taxonomy_vin: str=None, trim: str=None, year: str=None):
        """Sales - a model defined in OpenAPI

        :param city: The city of this Sales.
        :param counts: The counts of this Sales.
        :param cpo: The cpo of this Sales.
        :param dom_stats: The dom_stats of this Sales.
        :param inventory_type: The inventory_type of this Sales.
        :param make: The make of this Sales.
        :param miles_stats: The miles_stats of this Sales.
        :param model: The model of this Sales.
        :param non_cpo: The non_cpo of this Sales.
        :param price_stats: The price_stats of this Sales.
        :param state: The state of this Sales.
        :param taxonomy_vin: The taxonomy_vin of this Sales.
        :param trim: The trim of this Sales.
        :param year: The year of this Sales.
        """
        self.openapi_types = {
            'city': str,
            'counts': int,
            'cpo': int,
            'dom_stats': SalesStats,
            'inventory_type': str,
            'make': str,
            'miles_stats': SalesStats,
            'model': str,
            'non_cpo': int,
            'price_stats': SalesStats,
            'state': str,
            'taxonomy_vin': str,
            'trim': str,
            'year': str
        }

        self.attribute_map = {
            'city': 'city',
            'counts': 'counts',
            'cpo': 'cpo',
            'dom_stats': 'dom_stats',
            'inventory_type': 'inventory_type',
            'make': 'make',
            'miles_stats': 'miles_stats',
            'model': 'model',
            'non_cpo': 'non-cpo',
            'price_stats': 'price_stats',
            'state': 'state',
            'taxonomy_vin': 'taxonomy_vin',
            'trim': 'trim',
            'year': 'year'
        }

        self._city = city
        self._counts = counts
        self._cpo = cpo
        self._dom_stats = dom_stats
        self._inventory_type = inventory_type
        self._make = make
        self._miles_stats = miles_stats
        self._model = model
        self._non_cpo = non_cpo
        self._price_stats = price_stats
        self._state = state
        self._taxonomy_vin = taxonomy_vin
        self._trim = trim
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sales':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sales of this Sales.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Sales.

        City

        :return: The city of this Sales.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Sales.

        City

        :param city: The city of this Sales.
        :type city: str
        """

        self._city = city

    @property
    def counts(self):
        """Gets the counts of this Sales.

        Sales count

        :return: The counts of this Sales.
        :rtype: int
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this Sales.

        Sales count

        :param counts: The counts of this Sales.
        :type counts: int
        """

        self._counts = counts

    @property
    def cpo(self):
        """Gets the cpo of this Sales.

        cpo sales count

        :return: The cpo of this Sales.
        :rtype: int
        """
        return self._cpo

    @cpo.setter
    def cpo(self, cpo):
        """Sets the cpo of this Sales.

        cpo sales count

        :param cpo: The cpo of this Sales.
        :type cpo: int
        """

        self._cpo = cpo

    @property
    def dom_stats(self):
        """Gets the dom_stats of this Sales.


        :return: The dom_stats of this Sales.
        :rtype: SalesStats
        """
        return self._dom_stats

    @dom_stats.setter
    def dom_stats(self, dom_stats):
        """Sets the dom_stats of this Sales.


        :param dom_stats: The dom_stats of this Sales.
        :type dom_stats: SalesStats
        """

        self._dom_stats = dom_stats

    @property
    def inventory_type(self):
        """Gets the inventory_type of this Sales.

        inventory_type

        :return: The inventory_type of this Sales.
        :rtype: str
        """
        return self._inventory_type

    @inventory_type.setter
    def inventory_type(self, inventory_type):
        """Sets the inventory_type of this Sales.

        inventory_type

        :param inventory_type: The inventory_type of this Sales.
        :type inventory_type: str
        """

        self._inventory_type = inventory_type

    @property
    def make(self):
        """Gets the make of this Sales.

        Make

        :return: The make of this Sales.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this Sales.

        Make

        :param make: The make of this Sales.
        :type make: str
        """

        self._make = make

    @property
    def miles_stats(self):
        """Gets the miles_stats of this Sales.


        :return: The miles_stats of this Sales.
        :rtype: SalesStats
        """
        return self._miles_stats

    @miles_stats.setter
    def miles_stats(self, miles_stats):
        """Sets the miles_stats of this Sales.


        :param miles_stats: The miles_stats of this Sales.
        :type miles_stats: SalesStats
        """

        self._miles_stats = miles_stats

    @property
    def model(self):
        """Gets the model of this Sales.

        model

        :return: The model of this Sales.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Sales.

        model

        :param model: The model of this Sales.
        :type model: str
        """

        self._model = model

    @property
    def non_cpo(self):
        """Gets the non_cpo of this Sales.

        Non-cpo sales count

        :return: The non_cpo of this Sales.
        :rtype: int
        """
        return self._non_cpo

    @non_cpo.setter
    def non_cpo(self, non_cpo):
        """Sets the non_cpo of this Sales.

        Non-cpo sales count

        :param non_cpo: The non_cpo of this Sales.
        :type non_cpo: int
        """

        self._non_cpo = non_cpo

    @property
    def price_stats(self):
        """Gets the price_stats of this Sales.


        :return: The price_stats of this Sales.
        :rtype: SalesStats
        """
        return self._price_stats

    @price_stats.setter
    def price_stats(self, price_stats):
        """Sets the price_stats of this Sales.


        :param price_stats: The price_stats of this Sales.
        :type price_stats: SalesStats
        """

        self._price_stats = price_stats

    @property
    def state(self):
        """Gets the state of this Sales.

        State

        :return: The state of this Sales.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Sales.

        State

        :param state: The state of this Sales.
        :type state: str
        """

        self._state = state

    @property
    def taxonomy_vin(self):
        """Gets the taxonomy_vin of this Sales.

        taxonomy_vin

        :return: The taxonomy_vin of this Sales.
        :rtype: str
        """
        return self._taxonomy_vin

    @taxonomy_vin.setter
    def taxonomy_vin(self, taxonomy_vin):
        """Sets the taxonomy_vin of this Sales.

        taxonomy_vin

        :param taxonomy_vin: The taxonomy_vin of this Sales.
        :type taxonomy_vin: str
        """

        self._taxonomy_vin = taxonomy_vin

    @property
    def trim(self):
        """Gets the trim of this Sales.

        trim

        :return: The trim of this Sales.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this Sales.

        trim

        :param trim: The trim of this Sales.
        :type trim: str
        """

        self._trim = trim

    @property
    def year(self):
        """Gets the year of this Sales.

        year

        :return: The year of this Sales.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Sales.

        year

        :param year: The year of this Sales.
        :type year: str
        """

        self._year = year
