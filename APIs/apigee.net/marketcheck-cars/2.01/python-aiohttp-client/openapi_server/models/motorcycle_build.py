# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MotorcycleBuild(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body_type: str=None, cylinders: int=None, drivetrain: str=None, dry_weight: str=None, engine: str=None, fuel_type: str=None, made_in: str=None, make: str=None, model: str=None, transmission: str=None, trim: str=None, vehicle_type: str=None, year: int=None):
        """MotorcycleBuild - a model defined in OpenAPI

        :param body_type: The body_type of this MotorcycleBuild.
        :param cylinders: The cylinders of this MotorcycleBuild.
        :param drivetrain: The drivetrain of this MotorcycleBuild.
        :param dry_weight: The dry_weight of this MotorcycleBuild.
        :param engine: The engine of this MotorcycleBuild.
        :param fuel_type: The fuel_type of this MotorcycleBuild.
        :param made_in: The made_in of this MotorcycleBuild.
        :param make: The make of this MotorcycleBuild.
        :param model: The model of this MotorcycleBuild.
        :param transmission: The transmission of this MotorcycleBuild.
        :param trim: The trim of this MotorcycleBuild.
        :param vehicle_type: The vehicle_type of this MotorcycleBuild.
        :param year: The year of this MotorcycleBuild.
        """
        self.openapi_types = {
            'body_type': str,
            'cylinders': int,
            'drivetrain': str,
            'dry_weight': str,
            'engine': str,
            'fuel_type': str,
            'made_in': str,
            'make': str,
            'model': str,
            'transmission': str,
            'trim': str,
            'vehicle_type': str,
            'year': int
        }

        self.attribute_map = {
            'body_type': 'body_type',
            'cylinders': 'cylinders',
            'drivetrain': 'drivetrain',
            'dry_weight': 'dry_weight',
            'engine': 'engine',
            'fuel_type': 'fuel_type',
            'made_in': 'made_in',
            'make': 'make',
            'model': 'model',
            'transmission': 'transmission',
            'trim': 'trim',
            'vehicle_type': 'vehicle_type',
            'year': 'year'
        }

        self._body_type = body_type
        self._cylinders = cylinders
        self._drivetrain = drivetrain
        self._dry_weight = dry_weight
        self._engine = engine
        self._fuel_type = fuel_type
        self._made_in = made_in
        self._make = make
        self._model = model
        self._transmission = transmission
        self._trim = trim
        self._vehicle_type = vehicle_type
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MotorcycleBuild':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MotorcycleBuild of this MotorcycleBuild.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body_type(self):
        """Gets the body_type of this MotorcycleBuild.

        Body type of the motorcycle

        :return: The body_type of this MotorcycleBuild.
        :rtype: str
        """
        return self._body_type

    @body_type.setter
    def body_type(self, body_type):
        """Sets the body_type of this MotorcycleBuild.

        Body type of the motorcycle

        :param body_type: The body_type of this MotorcycleBuild.
        :type body_type: str
        """

        self._body_type = body_type

    @property
    def cylinders(self):
        """Gets the cylinders of this MotorcycleBuild.

        No of cylinders of the motorcycle

        :return: The cylinders of this MotorcycleBuild.
        :rtype: int
        """
        return self._cylinders

    @cylinders.setter
    def cylinders(self, cylinders):
        """Sets the cylinders of this MotorcycleBuild.

        No of cylinders of the motorcycle

        :param cylinders: The cylinders of this MotorcycleBuild.
        :type cylinders: int
        """

        self._cylinders = cylinders

    @property
    def drivetrain(self):
        """Gets the drivetrain of this MotorcycleBuild.

        Drivetrain of the motorcycle

        :return: The drivetrain of this MotorcycleBuild.
        :rtype: str
        """
        return self._drivetrain

    @drivetrain.setter
    def drivetrain(self, drivetrain):
        """Sets the drivetrain of this MotorcycleBuild.

        Drivetrain of the motorcycle

        :param drivetrain: The drivetrain of this MotorcycleBuild.
        :type drivetrain: str
        """

        self._drivetrain = drivetrain

    @property
    def dry_weight(self):
        """Gets the dry_weight of this MotorcycleBuild.

        Dry weight of motorcycle

        :return: The dry_weight of this MotorcycleBuild.
        :rtype: str
        """
        return self._dry_weight

    @dry_weight.setter
    def dry_weight(self, dry_weight):
        """Sets the dry_weight of this MotorcycleBuild.

        Dry weight of motorcycle

        :param dry_weight: The dry_weight of this MotorcycleBuild.
        :type dry_weight: str
        """

        self._dry_weight = dry_weight

    @property
    def engine(self):
        """Gets the engine of this MotorcycleBuild.

        Engine of the motorcycle

        :return: The engine of this MotorcycleBuild.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this MotorcycleBuild.

        Engine of the motorcycle

        :param engine: The engine of this MotorcycleBuild.
        :type engine: str
        """

        self._engine = engine

    @property
    def fuel_type(self):
        """Gets the fuel_type of this MotorcycleBuild.

        Fuel type of the motorcycle

        :return: The fuel_type of this MotorcycleBuild.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this MotorcycleBuild.

        Fuel type of the motorcycle

        :param fuel_type: The fuel_type of this MotorcycleBuild.
        :type fuel_type: str
        """

        self._fuel_type = fuel_type

    @property
    def made_in(self):
        """Gets the made_in of this MotorcycleBuild.

        Made in of the motorcycle

        :return: The made_in of this MotorcycleBuild.
        :rtype: str
        """
        return self._made_in

    @made_in.setter
    def made_in(self, made_in):
        """Sets the made_in of this MotorcycleBuild.

        Made in of the motorcycle

        :param made_in: The made_in of this MotorcycleBuild.
        :type made_in: str
        """

        self._made_in = made_in

    @property
    def make(self):
        """Gets the make of this MotorcycleBuild.

        Motorcycle Make

        :return: The make of this MotorcycleBuild.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this MotorcycleBuild.

        Motorcycle Make

        :param make: The make of this MotorcycleBuild.
        :type make: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this MotorcycleBuild.

        Motorcycle model

        :return: The model of this MotorcycleBuild.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this MotorcycleBuild.

        Motorcycle model

        :param model: The model of this MotorcycleBuild.
        :type model: str
        """

        self._model = model

    @property
    def transmission(self):
        """Gets the transmission of this MotorcycleBuild.

        Transmission of the motorcycle

        :return: The transmission of this MotorcycleBuild.
        :rtype: str
        """
        return self._transmission

    @transmission.setter
    def transmission(self, transmission):
        """Sets the transmission of this MotorcycleBuild.

        Transmission of the motorcycle

        :param transmission: The transmission of this MotorcycleBuild.
        :type transmission: str
        """

        self._transmission = transmission

    @property
    def trim(self):
        """Gets the trim of this MotorcycleBuild.

        Trim of the motorcycle

        :return: The trim of this MotorcycleBuild.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this MotorcycleBuild.

        Trim of the motorcycle

        :param trim: The trim of this MotorcycleBuild.
        :type trim: str
        """

        self._trim = trim

    @property
    def vehicle_type(self):
        """Gets the vehicle_type of this MotorcycleBuild.

        Vehicle type of the motorcycle

        :return: The vehicle_type of this MotorcycleBuild.
        :rtype: str
        """
        return self._vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type):
        """Sets the vehicle_type of this MotorcycleBuild.

        Vehicle type of the motorcycle

        :param vehicle_type: The vehicle_type of this MotorcycleBuild.
        :type vehicle_type: str
        """

        self._vehicle_type = vehicle_type

    @property
    def year(self):
        """Gets the year of this MotorcycleBuild.

        Year of the motorcycle

        :return: The year of this MotorcycleBuild.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this MotorcycleBuild.

        Year of the motorcycle

        :param year: The year of this MotorcycleBuild.
        :type year: int
        """

        self._year = year
