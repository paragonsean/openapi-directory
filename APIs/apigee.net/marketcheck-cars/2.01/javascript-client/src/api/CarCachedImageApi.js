/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';

/**
* CarCachedImage service.
* @module api/CarCachedImageApi
* @version 2.01
*/
export default class CarCachedImageApi {

    /**
    * Constructs a new CarCachedImageApi. 
    * @alias module:api/CarCachedImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCachedImage operation.
     * @callback module:api/CarCachedImageApi~getCachedImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch cached image
     * Fetch the cached car image
     * @param {String} listingID ID of the listing to fetch cached images for
     * @param {String} imageID ID of the image to fetch
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/CarCachedImageApi~getCachedImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getCachedImage(listingID, imageID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listingID' is set
      if (listingID === undefined || listingID === null) {
        throw new Error("Missing the required parameter 'listingID' when calling getCachedImage");
      }
      // verify the required parameter 'imageID' is set
      if (imageID === undefined || imageID === null) {
        throw new Error("Missing the required parameter 'imageID' when calling getCachedImage");
      }

      let pathParams = {
        'listingID': listingID,
        'imageID': imageID
      };
      let queryParams = {
        'api_key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/image/cache/car/{listingID}/{imageID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
