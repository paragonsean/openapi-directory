/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ListingExtraAttributes from '../model/ListingExtraAttributes';
import ListingMedia from '../model/ListingMedia';
import MotorcycleListing from '../model/MotorcycleListing';
import MotorcycleSearchResponse from '../model/MotorcycleSearchResponse';
import SearchAutoCompleteResponse from '../model/SearchAutoCompleteResponse';

/**
* MotorcycleSearch service.
* @module api/MotorcycleSearchApi
* @version 2.01
*/
export default class MotorcycleSearchApi {

    /**
    * Constructs a new MotorcycleSearchApi. 
    * @alias module:api/MotorcycleSearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listingMotorcycleIdExtraGet operation.
     * @callback module:api/MotorcycleSearchApi~listingMotorcycleIdExtraGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListingExtraAttributes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Long text Motorcycle Listings attributes for Listing with the given id
     * Get Motorcycle listing options, features, seller comments
     * @param {String} id Listing id to get all the listing attributes
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/MotorcycleSearchApi~listingMotorcycleIdExtraGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListingExtraAttributes}
     */
    listingMotorcycleIdExtraGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listingMotorcycleIdExtraGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'api_key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListingExtraAttributes;
      return this.apiClient.callApi(
        '/listing/motorcycle/{id}/extra', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingMotorcycleIdGet operation.
     * @callback module:api/MotorcycleSearchApi~listingMotorcycleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MotorcycleListing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Motorcycle listing by id
     * Get a particular Motorcycle listing by its id
     * @param {String} id Listing id to get all the listing attributes
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/MotorcycleSearchApi~listingMotorcycleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MotorcycleListing}
     */
    listingMotorcycleIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listingMotorcycleIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'api_key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MotorcycleListing;
      return this.apiClient.callApi(
        '/listing/motorcycle/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingMotorcycleIdMediaGet operation.
     * @callback module:api/MotorcycleSearchApi~listingMotorcycleIdMediaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListingMedia} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Motorcycle listing media by id
     * Get Motorcycle listing media (photo, photos) by id
     * @param {String} id Listing id to get all the listing attributes
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/MotorcycleSearchApi~listingMotorcycleIdMediaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListingMedia}
     */
    listingMotorcycleIdMediaGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listingMotorcycleIdMediaGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'api_key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListingMedia;
      return this.apiClient.callApi(
        '/listing/motorcycle/{id}/media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchMotorcycleActiveGet operation.
     * @callback module:api/MotorcycleSearchApi~searchMotorcycleActiveGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MotorcycleSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets active motorcycle listings for the given search criteria
     * This endpoint provides search on motorcycle inventory. This API produces a list of currently active motorcycles from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search motorcycles around a given geo-point within a given radius  2. Search motorcycles for a specific year / make / model or combination of these  3. Search motorcycles matching multiple year, make, model combinatins in the same search request 4. Filter results by most motorcycle specification attributes 5. Search for similar motorcycles by VIN or Taxonomy VIN  6. Filter motorcycles within a given price / miles range 7. Specify a sort order for the results on price / miles / listed date  8. Search motorcycles for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles for your search
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {String} [priceRange] Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
     * @param {String} [milesRange] Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
     * @param {String} [msrpRange] MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
     * @param {Number} [latitude] Latitude component of location
     * @param {Number} [longitude] Longitude component of location
     * @param {Number} [radius] Radius around the search location (Unit - Miles)
     * @param {String} [searchText] To search a substring across entire document
     * @param {String} [year] To filter listing on their year
     * @param {String} [make] To filter listings on their make
     * @param {String} [model] To filter listings on their model
     * @param {String} [trim] To filter listing on their trim
     * @param {String} [vin] To filter listing on their VIN
     * @param {String} [taxonomyVin] Taxonomy VIN of the motorcycle
     * @param {module:model/String} [inventoryType] To filter listing on their condition. Either used or new
     * @param {String} [stockNo] To filter listing on their stock number on lot
     * @param {String} [source] To filter listing on their source
     * @param {String} [dealerId] Dealer id to filter the listings.
     * @param {String} [color] Color of the vehicle
     * @param {String} [bodyType] To filter listing on their body type
     * @param {String} [vehicleType] To filter listing on their vehicle type
     * @param {String} [cylinders] To filter listing on their cylinders
     * @param {String} [drivetrain] To filter listing on their drivetrain
     * @param {String} [engine] To filter listing on their engine
     * @param {String} [fuelType] To filter listing on their fuel type
     * @param {String} [transmission] To filter listing on their transmission
     * @param {String} [state] To filter listing on State in which they are listed
     * @param {String} [city] To filter listing on City in which they are listed
     * @param {String} [zip] To filter listing on ZIP around which they are listed
     * @param {String} [msaCode] To filter listing on msa code in which they are listed
     * @param {String} [sortBy] Sort by field. Default sort field is distance from the given point
     * @param {module:model/String} [sortOrder] Sort order - asc or desc. Default sort order is asc
     * @param {Number} [rows = 10)] Number of results to return. Default is 10. Max is 50
     * @param {Number} [start = 0)] Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
     * @param {String} [facets] The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
     * @param {String} [rangeFacets] The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
     * @param {module:model/String} [facetSort = 'count')] Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param
     * @param {String} [stats] The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
     * @param {String} [lastSeenRange] Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
     * @param {String} [firstSeenRange] First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
     * @param {String} [lastSeenDays] Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12
     * @param {String} [firstSeenDays] First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12
     * @param {module:api/MotorcycleSearchApi~searchMotorcycleActiveGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MotorcycleSearchResponse}
     */
    searchMotorcycleActiveGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'price_range': opts['priceRange'],
        'miles_range': opts['milesRange'],
        'msrp_range': opts['msrpRange'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'search_text': opts['searchText'],
        'year': opts['year'],
        'make': opts['make'],
        'model': opts['model'],
        'trim': opts['trim'],
        'vin': opts['vin'],
        'taxonomy_vin': opts['taxonomyVin'],
        'inventory_type': opts['inventoryType'],
        'stock_no': opts['stockNo'],
        'source': opts['source'],
        'dealer_id': opts['dealerId'],
        'color': opts['color'],
        'body_type': opts['bodyType'],
        'vehicle_type': opts['vehicleType'],
        'cylinders': opts['cylinders'],
        'drivetrain': opts['drivetrain'],
        'engine': opts['engine'],
        'fuel_type': opts['fuelType'],
        'transmission': opts['transmission'],
        'state': opts['state'],
        'city': opts['city'],
        'zip': opts['zip'],
        'msa_code': opts['msaCode'],
        'sort_by': opts['sortBy'],
        'sort_order': opts['sortOrder'],
        'rows': opts['rows'],
        'start': opts['start'],
        'facets': opts['facets'],
        'range_facets': opts['rangeFacets'],
        'facet_sort': opts['facetSort'],
        'stats': opts['stats'],
        'last_seen_range': opts['lastSeenRange'],
        'first_seen_range': opts['firstSeenRange'],
        'last_seen_days': opts['lastSeenDays'],
        'first_seen_days': opts['firstSeenDays']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MotorcycleSearchResponse;
      return this.apiClient.callApi(
        '/search/motorcycle/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchMotorcycleAutoCompleteGet operation.
     * @callback module:api/MotorcycleSearchApi~searchMotorcycleAutoCompleteGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchAutoCompleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API for auto-completion of inputs
     * Auto-complete the inputs of your end users
     * @param {module:model/String} field Field name for which you want auto-completion
     * @param {String} input Input entered so far
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {String} [year] To filter listing on their year
     * @param {String} [make] To filter listings on their make
     * @param {String} [model] To filter listings on their model
     * @param {String} [trim] To filter listing on their trim
     * @param {String} [bodyType] To filter listing on their body type
     * @param {String} [vehicleType] To filter listing on their vehicle type
     * @param {String} [transmission] To filter listing on their transmission
     * @param {String} [drivetrain] To filter listing on their drivetrain
     * @param {String} [fuelType] To filter listing on their fuel type
     * @param {String} [color] Color of the vehicle
     * @param {String} [engine] To filter listing on their engine
     * @param {String} [state] To filter listing on State in which they are listed
     * @param {String} [city] To filter listing on City in which they are listed
     * @param {module:model/String} [inventoryType] To filter listing on their condition. Either used or new
     * @param {Boolean} [ignoreCase = true)] Boolean variable to indicate ignore case of current input
     * @param {Boolean} [termCounts = false)] Boolean variable to indicate wheather to include term counts as well in response
     * @param {module:model/String} [sortBy = 'index')] Sort the response, either by index or count(default)
     * @param {String} [sellerType] seller type for autocomplete
     * @param {Number} [radius] Radius around the search location (Unit - Miles)
     * @param {String} [zip] To filter listing on ZIP around which they are listed
     * @param {Number} [facetMinCount = 1)] Provide minimum count value for facets
     * @param {module:api/MotorcycleSearchApi~searchMotorcycleAutoCompleteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchAutoCompleteResponse}
     */
    searchMotorcycleAutoCompleteGet(field, input, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling searchMotorcycleAutoCompleteGet");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling searchMotorcycleAutoCompleteGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'field': field,
        'input': input,
        'year': opts['year'],
        'make': opts['make'],
        'model': opts['model'],
        'trim': opts['trim'],
        'body_type': opts['bodyType'],
        'vehicle_type': opts['vehicleType'],
        'transmission': opts['transmission'],
        'drivetrain': opts['drivetrain'],
        'fuel_type': opts['fuelType'],
        'color': opts['color'],
        'engine': opts['engine'],
        'state': opts['state'],
        'city': opts['city'],
        'inventory_type': opts['inventoryType'],
        'ignore_case': opts['ignoreCase'],
        'term_counts': opts['termCounts'],
        'sort_by': opts['sortBy'],
        'seller_type': opts['sellerType'],
        'radius': opts['radius'],
        'zip': opts['zip'],
        'facet_min_count': opts['facetMinCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchAutoCompleteResponse;
      return this.apiClient.callApi(
        '/search/motorcycle/auto-complete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
