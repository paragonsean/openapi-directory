/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Build from '../model/Build';
import Error from '../model/Error';
import NeoVIN from '../model/NeoVIN';
import SpecsAutoCompleteResponse from '../model/SpecsAutoCompleteResponse';

/**
* VINDecoderAPI service.
* @module api/VINDecoderAPIApi
* @version 2.01
*/
export default class VINDecoderAPIApi {

    /**
    * Constructs a new VINDecoderAPIApi. 
    * @alias module:api/VINDecoderAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the decode operation.
     * @callback module:api/VINDecoderAPIApi~decodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param {String} vin The VIN to identify the car. Must be a valid 17 char VIN
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/VINDecoderAPIApi~decodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    decode(vin, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling decode");
      }

      let pathParams = {
        'vin': vin
      };
      let queryParams = {
        'api_key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/decode/car/{vin}/specs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the decodeViaEPI operation.
     * @callback module:api/VINDecoderAPIApi~decodeViaEPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EPI VIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN from EPI's decoder
     * @param {String} vin The VIN to identify the car. Must be a valid 17 char VIN
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/VINDecoderAPIApi~decodeViaEPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    decodeViaEPI(vin, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling decodeViaEPI");
      }

      let pathParams = {
        'vin': vin
      };
      let queryParams = {
        'api_key': opts['apiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/decode/car/epi/{vin}/specs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the decodeViaNeoVIN operation.
     * @callback module:api/VINDecoderAPIApi~decodeViaNeoVINCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NeoVIN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NeoVIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN from NeoVIN decoder
     * @param {String} vin The VIN to identify the car. Must be a valid 17 char VIN
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Boolean} [includeGeneric = false)] Boolean variable to indicate wheather to include generic data as well in response
     * @param {Boolean} [forceDecode = false)] Decode VIN on the fly instead of cached response
     * @param {module:api/VINDecoderAPIApi~decodeViaNeoVINCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NeoVIN}
     */
    decodeViaNeoVIN(vin, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling decodeViaNeoVIN");
      }

      let pathParams = {
        'vin': vin
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'include_generic': opts['includeGeneric'],
        'force_decode': opts['forceDecode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NeoVIN;
      return this.apiClient.callApi(
        '/decode/car/neovin/{vin}/specs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxonomyTerms operation.
     * @callback module:api/VINDecoderAPIApi~getTaxonomyTermsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecsAutoCompleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API for getting terms from taxonomy
     * Facets on taxonomy
     * @param {String} field Comma separated list of fields to get terms for
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {String} [year] To filter listing on their year
     * @param {String} [make] To filter listings on their make
     * @param {String} [model] To filter listings on their model
     * @param {String} [trim] To filter listing on their trim
     * @param {String} [bodyType] To filter listing on their body type
     * @param {String} [bodySubtype] Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
     * @param {String} [vehicleType] To filter listing on their vehicle type
     * @param {String} [transmission] To filter listing on their transmission
     * @param {String} [drivetrain] To filter listing on their drivetrain
     * @param {String} [fuelType] To filter listing on their fuel type
     * @param {String} [engine] To filter listing on their engine
     * @param {String} [engineSize] Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated
     * @param {String} [engineBlock] Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
     * @param {module:api/VINDecoderAPIApi~getTaxonomyTermsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecsAutoCompleteResponse}
     */
    getTaxonomyTerms(field, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getTaxonomyTerms");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'field': field,
        'year': opts['year'],
        'make': opts['make'],
        'model': opts['model'],
        'trim': opts['trim'],
        'body_type': opts['bodyType'],
        'body_subtype': opts['bodySubtype'],
        'vehicle_type': opts['vehicleType'],
        'transmission': opts['transmission'],
        'drivetrain': opts['drivetrain'],
        'fuel_type': opts['fuelType'],
        'engine': opts['engine'],
        'engine_size': opts['engineSize'],
        'engine_block': opts['engineBlock']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpecsAutoCompleteResponse;
      return this.apiClient.callApi(
        '/specs/car/terms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the specsCarAutoCompleteGet operation.
     * @callback module:api/VINDecoderAPIApi~specsCarAutoCompleteGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecsAutoCompleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API for auto-completion of inputs based on taxonomy
     * Auto-complete the inputs of your end users, not from active set but from taxonomy (decoder database)
     * @param {module:model/String} field Field name for which you want auto-completion
     * @param {String} input Input entered so far
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {String} [year] To filter listing on their year
     * @param {String} [make] To filter listings on their make
     * @param {String} [model] To filter listings on their model
     * @param {String} [trim] To filter listing on their trim
     * @param {String} [bodyType] To filter listing on their body type
     * @param {String} [bodySubtype] Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
     * @param {String} [vehicleType] To filter listing on their vehicle type
     * @param {String} [transmission] To filter listing on their transmission
     * @param {String} [drivetrain] To filter listing on their drivetrain
     * @param {String} [fuelType] To filter listing on their fuel type
     * @param {String} [engine] To filter listing on their engine
     * @param {String} [engineSize] Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated
     * @param {String} [engineBlock] Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
     * @param {Boolean} [ignoreCase = true)] Boolean variable to indicate ignore case of current input
     * @param {Number} [facetMinCount = 1)] Provide minimum count value for facets
     * @param {module:api/VINDecoderAPIApi~specsCarAutoCompleteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecsAutoCompleteResponse}
     */
    specsCarAutoCompleteGet(field, input, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling specsCarAutoCompleteGet");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling specsCarAutoCompleteGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'field': field,
        'input': input,
        'year': opts['year'],
        'make': opts['make'],
        'model': opts['model'],
        'trim': opts['trim'],
        'body_type': opts['bodyType'],
        'body_subtype': opts['bodySubtype'],
        'vehicle_type': opts['vehicleType'],
        'transmission': opts['transmission'],
        'drivetrain': opts['drivetrain'],
        'fuel_type': opts['fuelType'],
        'engine': opts['engine'],
        'engine_size': opts['engineSize'],
        'engine_block': opts['engineBlock'],
        'ignore_case': opts['ignoreCase'],
        'facet_min_count': opts['facetMinCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpecsAutoCompleteResponse;
      return this.apiClient.callApi(
        '/specs/car/auto-complete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
