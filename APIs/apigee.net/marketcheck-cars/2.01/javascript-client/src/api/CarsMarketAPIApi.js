/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DailyStats from '../model/DailyStats';
import Error from '../model/Error';
import FareValue from '../model/FareValue';
import Mds from '../model/Mds';
import PopularCars from '../model/PopularCars';
import PricePrediction from '../model/PricePrediction';
import Sales from '../model/Sales';

/**
* CarsMarketAPI service.
* @module api/CarsMarketAPIApi
* @version 2.01
*/
export default class CarsMarketAPIApi {

    /**
    * Constructs a new CarsMarketAPIApi. 
    * @alias module:api/CarsMarketAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fareValue operation.
     * @callback module:api/CarsMarketAPIApi~fareValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FareValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predict fare value of car for UK based on YMMT & miles
     * Predict fare value of car for UK based on YMMT & miles
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {String} [vrm] Predict price for a VRM
     * @param {Number} [year] Car manufacturing year
     * @param {String} [make] Car's make
     * @param {String} [model] Car's model
     * @param {String} [variant] Car's variant
     * @param {Number} [miles] miles vehicle has driven in total
     * @param {String} [postalCode] Postal code of the car
     * @param {Number} [radius] Radius around the search location (Unit - Miles)
     * @param {module:api/CarsMarketAPIApi~fareValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FareValue}
     */
    fareValue(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'vrm': opts['vrm'],
        'year': opts['year'],
        'make': opts['make'],
        'model': opts['model'],
        'variant': opts['variant'],
        'miles': opts['miles'],
        'postal_code': opts['postalCode'],
        'radius': opts['radius']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FareValue;
      return this.apiClient.callApi(
        '/predict/car/uk/fmv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDailyStats operation.
     * @callback module:api/CarsMarketAPIApi~getDailyStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DailyStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Price, Miles and Days on Market stats
     * National, state and city level stats for price, miles and dom
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {module:model/String} [country = 'us')] Country for which the stats are to be searched
     * @param {module:model/String} [carType = 'used')] Inventory type for which stats are to be searched, default is used
     * @param {String} [ymm] Year, Make, Model of the car, Separated by pipe e.g. ymm=2015|ford|f-150
     * @param {String} [ymmt] Year, Make, Model, Trim of the car, Separated by pipe e.g. ymmt=2015|ford|f-150|platinum
     * @param {String} [taxonomyVin] Taxonomy vin for referance to find stats of similar cars
     * @param {String} [vin] VIN that will be transformed to taxonomy_vin
     * @param {String} [state] State level stats
     * @param {String} [cityState] City level stats, pipe seperated like city_state=jacksonville|FL
     * @param {module:api/CarsMarketAPIApi~getDailyStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DailyStats}
     */
    getDailyStats(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'country': opts['country'],
        'car_type': opts['carType'],
        'ymm': opts['ymm'],
        'ymmt': opts['ymmt'],
        'taxonomy_vin': opts['taxonomyVin'],
        'vin': opts['vin'],
        'state': opts['state'],
        'city_state': opts['cityState']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DailyStats;
      return this.apiClient.callApi(
        '/stats/car', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMDS operation.
     * @callback module:api/CarsMarketAPIApi~getMDSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Market Days Supply
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {String} [vin] VIN to decode
     * @param {Boolean} [exact = false)] Exact parameter
     * @param {Number} [latitude] Latitude component of location
     * @param {Number} [longitude] Longitude component of location
     * @param {Number} [radius] Radius around the search location (Unit - Miles)
     * @param {String} [zip] To filter listing on ZIP around which they are listed
     * @param {String} [msaCode] To filter listing on msa code in which they are listed
     * @param {Boolean} [debug = false)] Debug parameter
     * @param {Boolean} [includeSold = false)] To fetch sold vins
     * @param {module:model/String} [country = 'US')] To filter listing on Country in which they are listed
     * @param {String} [state] To filter listing on State in which they are listed
     * @param {String} [city] To filter listing on City in which they are listed
     * @param {String} [ymmt] Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe '|' character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - 'year|make||' or 'year|make|model' or '|make|model|' combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the 'vins' or 'taxonomy_vins' parameter to the search api instead the year|make|model|trim combinations.
     * @param {module:model/String} [carType] Car type. Allowed values are - new / used / certified
     * @param {String} [leaseTerm] Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term=30-60
     * @param {String} [leaseDownPayment] Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment=30-60
     * @param {String} [leaseEmp] Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp=30-60
     * @param {String} [financeLoanTerm] Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term=30-60
     * @param {String} [financeLoanApr] Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr=30-60
     * @param {String} [financeEmp] Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp=30-60
     * @param {String} [financeDownPayment] Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment=30-60
     * @param {String} [financeDownPaymentPer] Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per=30-60
     * @param {module:model/String} [carfax1Owner] Indicates whether car has had only one owner or not
     * @param {module:model/String} [carfaxCleanTitle] Indicates whether car has clean ownership records
     * @param {String} [year] To filter listing on their year
     * @param {String} [make] To filter listings on their make
     * @param {String} [model] To filter listings on their model
     * @param {String} [trim] To filter listing on their trim
     * @param {String} [dealerId] Dealer id to filter the listings.
     * @param {String} [source] To filter listing on their source
     * @param {String} [bodyType] To filter listing on their body type
     * @param {String} [bodySubtype] Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
     * @param {String} [vehicleType] To filter listing on their vehicle type
     * @param {String} [cylinders] To filter listing on their cylinders
     * @param {String} [transmission] To filter listing on their transmission
     * @param {String} [doors] Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated
     * @param {String} [drivetrain] To filter listing on their drivetrain
     * @param {String} [exteriorColor] Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated
     * @param {String} [interiorColor] Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated
     * @param {String} [baseExteriorColor] Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated
     * @param {String} [baseInteriorColor] Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated
     * @param {String} [engine] To filter listing on their engine
     * @param {String} [engineSize] Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated
     * @param {String} [engineAspiration] Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated
     * @param {String} [engineBlock] Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
     * @param {String} [highwayMpgRange] Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000
     * @param {String} [cityMpgRange] City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000
     * @param {String} [milesRange] Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
     * @param {String} [priceRange] Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
     * @param {String} [msrpRange] MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
     * @param {String} [domRange] Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
     * @param {String} [dealershipGroupName] Name of the dealership group to search for
     * @param {String} [domActiveRange] Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
     * @param {String} [dom180Range] Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
     * @param {String} [fuelType] To filter listing on their fuel type
     * @param {module:model/String} [dealerType] Filter based on dealer type independant or franchise
     * @param {String} [engineSizeRange] Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2
     * @param {module:api/CarsMarketAPIApi~getMDSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mds}
     */
    getMDS(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'vin': opts['vin'],
        'exact': opts['exact'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'zip': opts['zip'],
        'msa_code': opts['msaCode'],
        'debug': opts['debug'],
        'include_sold': opts['includeSold'],
        'country': opts['country'],
        'state': opts['state'],
        'city': opts['city'],
        'ymmt': opts['ymmt'],
        'car_type': opts['carType'],
        'lease_term': opts['leaseTerm'],
        'lease_down_payment': opts['leaseDownPayment'],
        'lease_emp': opts['leaseEmp'],
        'finance_loan_term': opts['financeLoanTerm'],
        'finance_loan_apr': opts['financeLoanApr'],
        'finance_emp': opts['financeEmp'],
        'finance_down_payment': opts['financeDownPayment'],
        'finance_down_payment_per': opts['financeDownPaymentPer'],
        'carfax_1_owner': opts['carfax1Owner'],
        'carfax_clean_title': opts['carfaxCleanTitle'],
        'year': opts['year'],
        'make': opts['make'],
        'model': opts['model'],
        'trim': opts['trim'],
        'dealer_id': opts['dealerId'],
        'source': opts['source'],
        'body_type': opts['bodyType'],
        'body_subtype': opts['bodySubtype'],
        'vehicle_type': opts['vehicleType'],
        'cylinders': opts['cylinders'],
        'transmission': opts['transmission'],
        'doors': opts['doors'],
        'drivetrain': opts['drivetrain'],
        'exterior_color': opts['exteriorColor'],
        'interior_color': opts['interiorColor'],
        'base_exterior_color': opts['baseExteriorColor'],
        'base_interior_color': opts['baseInteriorColor'],
        'engine': opts['engine'],
        'engine_size': opts['engineSize'],
        'engine_aspiration': opts['engineAspiration'],
        'engine_block': opts['engineBlock'],
        'highway_mpg_range': opts['highwayMpgRange'],
        'city_mpg_range': opts['cityMpgRange'],
        'miles_range': opts['milesRange'],
        'price_range': opts['priceRange'],
        'msrp_range': opts['msrpRange'],
        'dom_range': opts['domRange'],
        'dealership_group_name': opts['dealershipGroupName'],
        'dom_active_range': opts['domActiveRange'],
        'dom_180_range': opts['dom180Range'],
        'fuel_type': opts['fuelType'],
        'dealer_type': opts['dealerType'],
        'engine_size_range': opts['engineSizeRange']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Mds;
      return this.apiClient.callApi(
        '/mds/car', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPopularCars operation.
     * @callback module:api/CarsMarketAPIApi~getPopularCarsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopularCars} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get make model wise top 50 popular cars on national, state, city level
     * Get make model wise top 50 popular cars on national, state, city level
     * @param {module:model/String} carType Inventory type for which popular count is to be searched
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {String} [state] State level sales count
     * @param {String} [cityState] City level sales count, pipe seperated like city_state=jacksonville|FL
     * @param {module:model/String} [country = 'us')] Country for which the popular cars are to be searched
     * @param {module:api/CarsMarketAPIApi~getPopularCarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopularCars}
     */
    getPopularCars(carType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'carType' is set
      if (carType === undefined || carType === null) {
        throw new Error("Missing the required parameter 'carType' when calling getPopularCars");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'state': opts['state'],
        'city_state': opts['cityState'],
        'car_type': carType,
        'country': opts['country']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopularCars;
      return this.apiClient.callApi(
        '/popular/cars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesCount operation.
     * @callback module:api/CarsMarketAPIApi~getSalesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sales} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sales count by make, model, year, trim or taxonomy vin
     * Get a sales count for city, state or national level by make, model, year, trim or taxonomy vin
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {module:model/String} [carType = 'used')] Inventory type for which sales count is to be searched, default is used
     * @param {String} [make] Make for which sales count is to be searched
     * @param {String} [mm] Make-Model for which sales count is to be searched, pipe seperated like mm=ford|f-150
     * @param {String} [ymm] Year-Make-Model for which sales count is to be searched, pipe seperated like ymm=2015|ford|f-150
     * @param {String} [ymmt] Year-Make-Model-Trim for which sales count is to be searched, pipe seperated like ymmt=2015|ford|f-150|platinum
     * @param {String} [taxonomyVin] taxonomy_vin for which sales count is to be searched
     * @param {String} [state] State level sales count
     * @param {String} [cityState] City level sales count, pipe seperated like city_state=jacksonville|FL
     * @param {String} [vin] VIN that will be transformed to taxonomy_vin
     * @param {module:model/String} [country = 'us')] Country for which the sales records are to be searched
     * @param {module:api/CarsMarketAPIApi~getSalesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sales}
     */
    getSalesCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'car_type': opts['carType'],
        'make': opts['make'],
        'mm': opts['mm'],
        'ymm': opts['ymm'],
        'ymmt': opts['ymmt'],
        'taxonomy_vin': opts['taxonomyVin'],
        'state': opts['state'],
        'city_state': opts['cityState'],
        'vin': opts['vin'],
        'country': opts['country']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sales;
      return this.apiClient.callApi(
        '/sales/car', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictCarPrice operation.
     * @callback module:api/CarsMarketAPIApi~predictCarPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predict car price based on it's specifications
     * Predict car price based on it's specifications
     * @param {module:model/String} carType Car condition
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {String} [vin] Predict price for a VIN
     * @param {Number} [year] Car manufacturing year
     * @param {String} [make] Car's make
     * @param {String} [model] Car's model
     * @param {String} [trim] Car's trim
     * @param {Boolean} [isCertified] Boolean to indicate car is certified or not
     * @param {Boolean} [carfax1Owner] Boolean to indicate car is carfax one owner or not
     * @param {Boolean} [carfaxCleanTitle] Boolean to indicate car has clean title or not
     * @param {String} [baseExteriorColor] Base exterior color of the car
     * @param {String} [baseInteriorColor] Base interior color of the car
     * @param {module:model/String} [transmission] Transmission on the car
     * @param {module:model/String} [drivetrain] Drivetrain on the car
     * @param {Number} [engineSize] Engine Size of the car
     * @param {module:model/String} [engineBlock] Engine Block of the car
     * @param {Number} [cylinders] Number of cylinders in the vehicle
     * @param {Number} [doors] Number of doors in the vehicle
     * @param {Number} [highwayMpg] Highway mileage
     * @param {Number} [cityMpg] City mileage of the car
     * @param {Number} [latitude] Latitude component of the location
     * @param {Number} [longitude] Longitude component of the location
     * @param {Number} [miles] miles vehicle has driven in total
     * @param {String} [zip] Location zip
     * @param {module:model/String} [country = 'us')] Country for which car price will be predicted
     * @param {module:api/CarsMarketAPIApi~predictCarPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricePrediction}
     */
    predictCarPrice(carType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'carType' is set
      if (carType === undefined || carType === null) {
        throw new Error("Missing the required parameter 'carType' when calling predictCarPrice");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'vin': opts['vin'],
        'car_type': carType,
        'year': opts['year'],
        'make': opts['make'],
        'model': opts['model'],
        'trim': opts['trim'],
        'is_certified': opts['isCertified'],
        'carfax_1_owner': opts['carfax1Owner'],
        'carfax_clean_title': opts['carfaxCleanTitle'],
        'base_exterior_color': opts['baseExteriorColor'],
        'base_interior_color': opts['baseInteriorColor'],
        'transmission': opts['transmission'],
        'drivetrain': opts['drivetrain'],
        'engine_size': opts['engineSize'],
        'engine_block': opts['engineBlock'],
        'cylinders': opts['cylinders'],
        'doors': opts['doors'],
        'highway_mpg': opts['highwayMpg'],
        'city_mpg': opts['cityMpg'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'miles': opts['miles'],
        'zip': opts['zip'],
        'country': opts['country']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PricePrediction;
      return this.apiClient.callApi(
        '/predict/car/price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictUkCarPrice operation.
     * @callback module:api/CarsMarketAPIApi~predictUkCarPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predict car price for UK based on it's specifications
     * Predict car price for UK based on it's specifications
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {String} [vrm] Predict price for a VRM
     * @param {Number} [year] Car manufacturing year
     * @param {String} [make] Car's make
     * @param {String} [model] Car's model
     * @param {String} [trim] Car's trim
     * @param {String} [baseExteriorColor] Base exterior color of the car
     * @param {module:model/String} [transmission] Transmission on the car
     * @param {String} [drivetrain] Drivetrain on the car
     * @param {Number} [engineSize] Engine Size of the car
     * @param {Number} [cylinders] Number of cylinders in the vehicle
     * @param {Number} [doors] Number of doors in the vehicle
     * @param {String} [fuelType] Fuel type of the car
     * @param {Number} [highwayMpg] Highway mileage
     * @param {Number} [cityMpg] City mileage of the car
     * @param {Number} [combinedMpg] Combiined mileage of the car
     * @param {Number} [latitude] Latitude component of the location
     * @param {Number} [longitude] Longitude component of the location
     * @param {Number} [miles] miles vehicle has driven in total
     * @param {String} [zip] Location zip
     * @param {module:api/CarsMarketAPIApi~predictUkCarPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricePrediction}
     */
    predictUkCarPrice(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'vrm': opts['vrm'],
        'year': opts['year'],
        'make': opts['make'],
        'model': opts['model'],
        'trim': opts['trim'],
        'base_exterior_color': opts['baseExteriorColor'],
        'transmission': opts['transmission'],
        'drivetrain': opts['drivetrain'],
        'engine_size': opts['engineSize'],
        'cylinders': opts['cylinders'],
        'doors': opts['doors'],
        'fuel_type': opts['fuelType'],
        'highway_mpg': opts['highwayMpg'],
        'city_mpg': opts['cityMpg'],
        'combined_mpg': opts['combinedMpg'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'miles': opts['miles'],
        'zip': opts['zip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PricePrediction;
      return this.apiClient.callApi(
        '/predict/car/uk/price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
