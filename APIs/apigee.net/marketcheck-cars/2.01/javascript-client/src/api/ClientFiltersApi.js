/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ClientFilters service.
* @module api/ClientFiltersApi
* @version 2.01
*/
export default class ClientFiltersApi {

    /**
    * Constructs a new ClientFiltersApi. 
    * @alias module:api/ClientFiltersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/ClientFiltersApi~getCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get client filters
     * get client filters
     * @param {module:model/String} country To filter listing on Country in which they are listed
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/ClientFiltersApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     */
    get(country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling get");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'country': country
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['text/csv'];
      let returnType = null;
      return this.apiClient.callApi(
        '/client/configure/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the set operation.
     * @callback module:api/ClientFiltersApi~setCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * set client filters
     * set client filters
     * @param {module:model/String} country To filter listing on Country in which they are listed
     * @param {File} csvfile csv file with filters
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/ClientFiltersApi~setCallback} callback The callback function, accepting three arguments: error, data, response
     */
    set(country, csvfile, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling set");
      }
      // verify the required parameter 'csvfile' is set
      if (csvfile === undefined || csvfile === null) {
        throw new Error("Missing the required parameter 'csvfile' when calling set");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'country': country
      };
      let headerParams = {
      };
      let formParams = {
        'csvfile': csvfile
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/client/configure/set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
