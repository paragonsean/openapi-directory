/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dealer from '../model/Dealer';
import DealersResponse from '../model/DealersResponse';
import Error from '../model/Error';

/**
* DealerAPI service.
* @module api/DealerAPIApi
* @version 2.01
*/
export default class DealerAPIApi {

    /**
    * Constructs a new DealerAPIApi. 
    * @alias module:api/DealerAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dealerCarUkIdGet operation.
     * @callback module:api/DealerAPIApi~dealerCarUkIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dealer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dealer by id
     * Get a particular dealer's information by its id
     * @param {String} id Dealer id to get all the dealer info attributes
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Boolean} [provider = false)] boolean param to include site providers name in response
     * @param {module:api/DealerAPIApi~dealerCarUkIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dealer}
     */
    dealerCarUkIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dealerCarUkIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'provider': opts['provider']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dealer;
      return this.apiClient.callApi(
        '/dealer/car/uk/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dealerHeavyEquipmentIdGet operation.
     * @callback module:api/DealerAPIApi~dealerHeavyEquipmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dealer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dealer by id
     * Get a particular dealer's information by its id
     * @param {String} id Dealer id to get all the dealer info attributes
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Boolean} [provider = false)] boolean param to include site providers name in response
     * @param {module:api/DealerAPIApi~dealerHeavyEquipmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dealer}
     */
    dealerHeavyEquipmentIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dealerHeavyEquipmentIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'provider': opts['provider']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dealer;
      return this.apiClient.callApi(
        '/dealer/heavy-equipment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dealerMotorcycleIdGet operation.
     * @callback module:api/DealerAPIApi~dealerMotorcycleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dealer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dealer by id
     * Get a particular dealer's information by its id
     * @param {String} id Dealer id to get all the dealer info attributes
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Boolean} [provider = false)] boolean param to include site providers name in response
     * @param {module:api/DealerAPIApi~dealerMotorcycleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dealer}
     */
    dealerMotorcycleIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dealerMotorcycleIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'provider': opts['provider']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dealer;
      return this.apiClient.callApi(
        '/dealer/motorcycle/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dealerRvIdGet operation.
     * @callback module:api/DealerAPIApi~dealerRvIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dealer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dealer by id
     * Get a particular dealer's information by its id
     * @param {String} id Dealer id to get all the dealer info attributes
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Boolean} [provider = false)] boolean param to include site providers name in response
     * @param {module:api/DealerAPIApi~dealerRvIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dealer}
     */
    dealerRvIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dealerRvIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'provider': opts['provider']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dealer;
      return this.apiClient.callApi(
        '/dealer/rv/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dealerSearch operation.
     * @callback module:api/DealerAPIApi~dealerSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Number} [latitude] Latitude component of location
     * @param {Number} [longitude] Longitude component of location
     * @param {Number} [radius] Radius around the search location (Unit - Miles)
     * @param {Number} [rows = 10)] Number of results to return. Default is 10. Max is 50
     * @param {Number} [start = 0)] Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
     * @param {module:model/String} [country] To filter listing on Country in which they are listed
     * @param {module:model/String} [dealerType] Filter based on dealer type independant or franchise
     * @param {String} [city] To filter listing on City in which they are listed
     * @param {String} [state] To filter listing on State in which they are listed
     * @param {String} [listingCountRange] To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
     * @param {String} [inventoryUrl] inventory_url of dealer to be searched
     * @param {String} [zip] To filter listing on ZIP around which they are listed
     * @param {String} [sortBy] Sort by field. Default sort field is distance from the given point
     * @param {module:model/String} [sortOrder] Sort order - asc or desc. Default sort order is asc
     * @param {Boolean} [provider = false)] boolean param to include site providers name in response
     * @param {String} [facets] The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
     * @param {String} [rangeFacets] The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
     * @param {module:api/DealerAPIApi~dealerSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealersResponse}
     */
    dealerSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'rows': opts['rows'],
        'start': opts['start'],
        'country': opts['country'],
        'dealer_type': opts['dealerType'],
        'city': opts['city'],
        'state': opts['state'],
        'listing_count_range': opts['listingCountRange'],
        'inventory_url': opts['inventoryUrl'],
        'zip': opts['zip'],
        'sort_by': opts['sortBy'],
        'sort_order': opts['sortOrder'],
        'provider': opts['provider'],
        'facets': opts['facets'],
        'range_facets': opts['rangeFacets']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DealersResponse;
      return this.apiClient.callApi(
        '/dealers/car', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dealersCarUkGet operation.
     * @callback module:api/DealerAPIApi~dealersCarUkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Number} [latitude] Latitude component of location
     * @param {Number} [longitude] Longitude component of location
     * @param {Number} [radius] Radius around the search location (Unit - Miles)
     * @param {Number} [rows = 10)] Number of results to return. Default is 10. Max is 50
     * @param {Number} [start = 0)] Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
     * @param {module:model/String} [country] To filter listing on Country in which they are listed
     * @param {module:model/String} [dealerType] Filter based on dealer type independant or franchise
     * @param {String} [city] To filter listing on City in which they are listed
     * @param {String} [county] To filter listing on county in which they are listed
     * @param {String} [listingCountRange] To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
     * @param {String} [inventoryUrl] inventory_url of dealer to be searched
     * @param {String} [postalCode] To filter listing on postal code around which they are listed
     * @param {String} [sortBy] Sort by field. Default sort field is distance from the given point
     * @param {module:model/String} [sortOrder] Sort order - asc or desc. Default sort order is asc
     * @param {Boolean} [provider = false)] boolean param to include site providers name in response
     * @param {String} [facets] The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
     * @param {String} [rangeFacets] The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
     * @param {module:api/DealerAPIApi~dealersCarUkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealersResponse}
     */
    dealersCarUkGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'rows': opts['rows'],
        'start': opts['start'],
        'country': opts['country'],
        'dealer_type': opts['dealerType'],
        'city': opts['city'],
        'county': opts['county'],
        'listing_count_range': opts['listingCountRange'],
        'inventory_url': opts['inventoryUrl'],
        'postal_code': opts['postalCode'],
        'sort_by': opts['sortBy'],
        'sort_order': opts['sortOrder'],
        'provider': opts['provider'],
        'facets': opts['facets'],
        'range_facets': opts['rangeFacets']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DealersResponse;
      return this.apiClient.callApi(
        '/dealers/car/uk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dealersHeavyEquipmentGet operation.
     * @callback module:api/DealerAPIApi~dealersHeavyEquipmentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Number} [latitude] Latitude component of location
     * @param {Number} [longitude] Longitude component of location
     * @param {Number} [radius] Radius around the search location (Unit - Miles)
     * @param {Number} [rows = 10)] Number of results to return. Default is 10. Max is 50
     * @param {Number} [start = 0)] Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
     * @param {module:model/String} [country] To filter listing on Country in which they are listed
     * @param {module:model/String} [dealerType] Filter based on dealer type independant or franchise
     * @param {String} [city] To filter listing on City in which they are listed
     * @param {String} [state] To filter listing on State in which they are listed
     * @param {String} [listingCountRange] To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
     * @param {String} [inventoryUrl] inventory_url of dealer to be searched
     * @param {String} [zip] To filter listing on ZIP around which they are listed
     * @param {String} [sortBy] Sort by field. Default sort field is distance from the given point
     * @param {module:model/String} [sortOrder] Sort order - asc or desc. Default sort order is asc
     * @param {Boolean} [provider = false)] boolean param to include site providers name in response
     * @param {String} [facets] The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
     * @param {String} [rangeFacets] The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
     * @param {module:api/DealerAPIApi~dealersHeavyEquipmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealersResponse}
     */
    dealersHeavyEquipmentGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'rows': opts['rows'],
        'start': opts['start'],
        'country': opts['country'],
        'dealer_type': opts['dealerType'],
        'city': opts['city'],
        'state': opts['state'],
        'listing_count_range': opts['listingCountRange'],
        'inventory_url': opts['inventoryUrl'],
        'zip': opts['zip'],
        'sort_by': opts['sortBy'],
        'sort_order': opts['sortOrder'],
        'provider': opts['provider'],
        'facets': opts['facets'],
        'range_facets': opts['rangeFacets']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DealersResponse;
      return this.apiClient.callApi(
        '/dealers/heavy-equipment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dealersMotorcycleGet operation.
     * @callback module:api/DealerAPIApi~dealersMotorcycleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Number} [latitude] Latitude component of location
     * @param {Number} [longitude] Longitude component of location
     * @param {Number} [radius] Radius around the search location (Unit - Miles)
     * @param {Number} [rows = 10)] Number of results to return. Default is 10. Max is 50
     * @param {Number} [start = 0)] Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
     * @param {module:model/String} [country] To filter listing on Country in which they are listed
     * @param {module:model/String} [dealerType] Filter based on dealer type independant or franchise
     * @param {String} [city] To filter listing on City in which they are listed
     * @param {String} [state] To filter listing on State in which they are listed
     * @param {String} [listingCountRange] To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
     * @param {String} [inventoryUrl] inventory_url of dealer to be searched
     * @param {String} [zip] To filter listing on ZIP around which they are listed
     * @param {String} [sortBy] Sort by field. Default sort field is distance from the given point
     * @param {module:model/String} [sortOrder] Sort order - asc or desc. Default sort order is asc
     * @param {Boolean} [provider = false)] boolean param to include site providers name in response
     * @param {String} [facets] The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
     * @param {String} [rangeFacets] The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
     * @param {module:api/DealerAPIApi~dealersMotorcycleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealersResponse}
     */
    dealersMotorcycleGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'rows': opts['rows'],
        'start': opts['start'],
        'country': opts['country'],
        'dealer_type': opts['dealerType'],
        'city': opts['city'],
        'state': opts['state'],
        'listing_count_range': opts['listingCountRange'],
        'inventory_url': opts['inventoryUrl'],
        'zip': opts['zip'],
        'sort_by': opts['sortBy'],
        'sort_order': opts['sortOrder'],
        'provider': opts['provider'],
        'facets': opts['facets'],
        'range_facets': opts['rangeFacets']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DealersResponse;
      return this.apiClient.callApi(
        '/dealers/motorcycle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dealersRvGet operation.
     * @callback module:api/DealerAPIApi~dealersRvGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Number} [latitude] Latitude component of location
     * @param {Number} [longitude] Longitude component of location
     * @param {Number} [radius] Radius around the search location (Unit - Miles)
     * @param {Number} [rows = 10)] Number of results to return. Default is 10. Max is 50
     * @param {Number} [start = 0)] Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
     * @param {module:model/String} [country] To filter listing on Country in which they are listed
     * @param {module:model/String} [dealerType] Filter based on dealer type independant or franchise
     * @param {String} [city] To filter listing on City in which they are listed
     * @param {String} [state] To filter listing on State in which they are listed
     * @param {String} [listingCountRange] To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
     * @param {String} [inventoryUrl] inventory_url of dealer to be searched
     * @param {String} [zip] To filter listing on ZIP around which they are listed
     * @param {String} [sortBy] Sort by field. Default sort field is distance from the given point
     * @param {module:model/String} [sortOrder] Sort order - asc or desc. Default sort order is asc
     * @param {Boolean} [provider = false)] boolean param to include site providers name in response
     * @param {String} [facets] The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
     * @param {String} [rangeFacets] The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
     * @param {module:api/DealerAPIApi~dealersRvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealersResponse}
     */
    dealersRvGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'rows': opts['rows'],
        'start': opts['start'],
        'country': opts['country'],
        'dealer_type': opts['dealerType'],
        'city': opts['city'],
        'state': opts['state'],
        'listing_count_range': opts['listingCountRange'],
        'inventory_url': opts['inventoryUrl'],
        'zip': opts['zip'],
        'sort_by': opts['sortBy'],
        'sort_order': opts['sortOrder'],
        'provider': opts['provider'],
        'facets': opts['facets'],
        'range_facets': opts['rangeFacets']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DealersResponse;
      return this.apiClient.callApi(
        '/dealers/rv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDealer operation.
     * @callback module:api/DealerAPIApi~getDealerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dealer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dealer by id
     * Get a particular dealer's information by its id
     * @param {String} id Dealer id to get all the dealer info attributes
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] The API Authentication Key. Mandatory with all API calls.
     * @param {Boolean} [provider = false)] boolean param to include site providers name in response
     * @param {module:api/DealerAPIApi~getDealerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dealer}
     */
    getDealer(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDealer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'api_key': opts['apiKey'],
        'provider': opts['provider']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizeEndpoint'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dealer;
      return this.apiClient.callApi(
        '/dealer/car/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
