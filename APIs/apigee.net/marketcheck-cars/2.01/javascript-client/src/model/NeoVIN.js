/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NeoVIN model module.
 * @module model/NeoVIN
 * @version 2.01
 */
class NeoVIN {
    /**
     * Constructs a new <code>NeoVIN</code>.
     * Describes the NeoVIN specification
     * @alias module:model/NeoVIN
     */
    constructor() { 
        
        NeoVIN.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NeoVIN</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NeoVIN} obj Optional instance to populate.
     * @return {module:model/NeoVIN} The populated <code>NeoVIN</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NeoVIN();

            if (data.hasOwnProperty('available_options_details')) {
                obj['available_options_details'] = ApiClient.convertToType(data['available_options_details'], Object);
            }
            if (data.hasOwnProperty('body_subtype')) {
                obj['body_subtype'] = ApiClient.convertToType(data['body_subtype'], 'String');
            }
            if (data.hasOwnProperty('body_type')) {
                obj['body_type'] = ApiClient.convertToType(data['body_type'], 'String');
            }
            if (data.hasOwnProperty('city_mpg')) {
                obj['city_mpg'] = ApiClient.convertToType(data['city_mpg'], 'Number');
            }
            if (data.hasOwnProperty('combined_msrp')) {
                obj['combined_msrp'] = ApiClient.convertToType(data['combined_msrp'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('created_at_date')) {
                obj['created_at_date'] = ApiClient.convertToType(data['created_at_date'], 'String');
            }
            if (data.hasOwnProperty('decode_version')) {
                obj['decode_version'] = ApiClient.convertToType(data['decode_version'], 'Number');
            }
            if (data.hasOwnProperty('delivery_charges')) {
                obj['delivery_charges'] = ApiClient.convertToType(data['delivery_charges'], 'Number');
            }
            if (data.hasOwnProperty('doors')) {
                obj['doors'] = ApiClient.convertToType(data['doors'], 'Number');
            }
            if (data.hasOwnProperty('drivetrain')) {
                obj['drivetrain'] = ApiClient.convertToType(data['drivetrain'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('exterior_color')) {
                obj['exterior_color'] = ApiClient.convertToType(data['exterior_color'], Object);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], Object);
            }
            if (data.hasOwnProperty('fuel_type')) {
                obj['fuel_type'] = ApiClient.convertToType(data['fuel_type'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('highway_mpg')) {
                obj['highway_mpg'] = ApiClient.convertToType(data['highway_mpg'], 'Number');
            }
            if (data.hasOwnProperty('installed_equipment')) {
                obj['installed_equipment'] = ApiClient.convertToType(data['installed_equipment'], Object);
            }
            if (data.hasOwnProperty('installed_options_details')) {
                obj['installed_options_details'] = ApiClient.convertToType(data['installed_options_details'], Object);
            }
            if (data.hasOwnProperty('installed_options_msrp')) {
                obj['installed_options_msrp'] = ApiClient.convertToType(data['installed_options_msrp'], 'Number');
            }
            if (data.hasOwnProperty('interior_color')) {
                obj['interior_color'] = ApiClient.convertToType(data['interior_color'], Object);
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('listing_confidence')) {
                obj['listing_confidence'] = ApiClient.convertToType(data['listing_confidence'], 'String');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('manufacturer_code')) {
                obj['manufacturer_code'] = ApiClient.convertToType(data['manufacturer_code'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('msrp')) {
                obj['msrp'] = ApiClient.convertToType(data['msrp'], 'Number');
            }
            if (data.hasOwnProperty('options_packages')) {
                obj['options_packages'] = ApiClient.convertToType(data['options_packages'], 'String');
            }
            if (data.hasOwnProperty('package_code')) {
                obj['package_code'] = ApiClient.convertToType(data['package_code'], 'String');
            }
            if (data.hasOwnProperty('package_description')) {
                obj['package_description'] = ApiClient.convertToType(data['package_description'], 'String');
            }
            if (data.hasOwnProperty('seating_capacity')) {
                obj['seating_capacity'] = ApiClient.convertToType(data['seating_capacity'], 'Number');
            }
            if (data.hasOwnProperty('squish_vin')) {
                obj['squish_vin'] = ApiClient.convertToType(data['squish_vin'], 'String');
            }
            if (data.hasOwnProperty('transmission')) {
                obj['transmission'] = ApiClient.convertToType(data['transmission'], 'String');
            }
            if (data.hasOwnProperty('transmission_confidence')) {
                obj['transmission_confidence'] = ApiClient.convertToType(data['transmission_confidence'], 'String');
            }
            if (data.hasOwnProperty('transmission_description')) {
                obj['transmission_description'] = ApiClient.convertToType(data['transmission_description'], 'String');
            }
            if (data.hasOwnProperty('trim')) {
                obj['trim'] = ApiClient.convertToType(data['trim'], 'String');
            }
            if (data.hasOwnProperty('trim_confidence')) {
                obj['trim_confidence'] = ApiClient.convertToType(data['trim_confidence'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Number');
            }
            if (data.hasOwnProperty('updated_at_date')) {
                obj['updated_at_date'] = ApiClient.convertToType(data['updated_at_date'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('version_confidence')) {
                obj['version_confidence'] = ApiClient.convertToType(data['version_confidence'], 'String');
            }
            if (data.hasOwnProperty('vin')) {
                obj['vin'] = ApiClient.convertToType(data['vin'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NeoVIN</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NeoVIN</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body_subtype'] && !(typeof data['body_subtype'] === 'string' || data['body_subtype'] instanceof String)) {
            throw new Error("Expected the field `body_subtype` to be a primitive type in the JSON string but got " + data['body_subtype']);
        }
        // ensure the json data is a string
        if (data['body_type'] && !(typeof data['body_type'] === 'string' || data['body_type'] instanceof String)) {
            throw new Error("Expected the field `body_type` to be a primitive type in the JSON string but got " + data['body_type']);
        }
        // ensure the json data is a string
        if (data['created_at_date'] && !(typeof data['created_at_date'] === 'string' || data['created_at_date'] instanceof String)) {
            throw new Error("Expected the field `created_at_date` to be a primitive type in the JSON string but got " + data['created_at_date']);
        }
        // ensure the json data is a string
        if (data['drivetrain'] && !(typeof data['drivetrain'] === 'string' || data['drivetrain'] instanceof String)) {
            throw new Error("Expected the field `drivetrain` to be a primitive type in the JSON string but got " + data['drivetrain']);
        }
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['fuel_type'] && !(typeof data['fuel_type'] === 'string' || data['fuel_type'] instanceof String)) {
            throw new Error("Expected the field `fuel_type` to be a primitive type in the JSON string but got " + data['fuel_type']);
        }
        // ensure the json data is a string
        if (data['listing_confidence'] && !(typeof data['listing_confidence'] === 'string' || data['listing_confidence'] instanceof String)) {
            throw new Error("Expected the field `listing_confidence` to be a primitive type in the JSON string but got " + data['listing_confidence']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['manufacturer_code'] && !(typeof data['manufacturer_code'] === 'string' || data['manufacturer_code'] instanceof String)) {
            throw new Error("Expected the field `manufacturer_code` to be a primitive type in the JSON string but got " + data['manufacturer_code']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['options_packages'] && !(typeof data['options_packages'] === 'string' || data['options_packages'] instanceof String)) {
            throw new Error("Expected the field `options_packages` to be a primitive type in the JSON string but got " + data['options_packages']);
        }
        // ensure the json data is a string
        if (data['package_code'] && !(typeof data['package_code'] === 'string' || data['package_code'] instanceof String)) {
            throw new Error("Expected the field `package_code` to be a primitive type in the JSON string but got " + data['package_code']);
        }
        // ensure the json data is a string
        if (data['package_description'] && !(typeof data['package_description'] === 'string' || data['package_description'] instanceof String)) {
            throw new Error("Expected the field `package_description` to be a primitive type in the JSON string but got " + data['package_description']);
        }
        // ensure the json data is a string
        if (data['squish_vin'] && !(typeof data['squish_vin'] === 'string' || data['squish_vin'] instanceof String)) {
            throw new Error("Expected the field `squish_vin` to be a primitive type in the JSON string but got " + data['squish_vin']);
        }
        // ensure the json data is a string
        if (data['transmission'] && !(typeof data['transmission'] === 'string' || data['transmission'] instanceof String)) {
            throw new Error("Expected the field `transmission` to be a primitive type in the JSON string but got " + data['transmission']);
        }
        // ensure the json data is a string
        if (data['transmission_confidence'] && !(typeof data['transmission_confidence'] === 'string' || data['transmission_confidence'] instanceof String)) {
            throw new Error("Expected the field `transmission_confidence` to be a primitive type in the JSON string but got " + data['transmission_confidence']);
        }
        // ensure the json data is a string
        if (data['transmission_description'] && !(typeof data['transmission_description'] === 'string' || data['transmission_description'] instanceof String)) {
            throw new Error("Expected the field `transmission_description` to be a primitive type in the JSON string but got " + data['transmission_description']);
        }
        // ensure the json data is a string
        if (data['trim'] && !(typeof data['trim'] === 'string' || data['trim'] instanceof String)) {
            throw new Error("Expected the field `trim` to be a primitive type in the JSON string but got " + data['trim']);
        }
        // ensure the json data is a string
        if (data['trim_confidence'] && !(typeof data['trim_confidence'] === 'string' || data['trim_confidence'] instanceof String)) {
            throw new Error("Expected the field `trim_confidence` to be a primitive type in the JSON string but got " + data['trim_confidence']);
        }
        // ensure the json data is a string
        if (data['updated_at_date'] && !(typeof data['updated_at_date'] === 'string' || data['updated_at_date'] instanceof String)) {
            throw new Error("Expected the field `updated_at_date` to be a primitive type in the JSON string but got " + data['updated_at_date']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['version_confidence'] && !(typeof data['version_confidence'] === 'string' || data['version_confidence'] instanceof String)) {
            throw new Error("Expected the field `version_confidence` to be a primitive type in the JSON string but got " + data['version_confidence']);
        }
        // ensure the json data is a string
        if (data['vin'] && !(typeof data['vin'] === 'string' || data['vin'] instanceof String)) {
            throw new Error("Expected the field `vin` to be a primitive type in the JSON string but got " + data['vin']);
        }

        return true;
    }


}



/**
 * Listing of all options and packages with detailed equipment identified that could have been installed on the vehicle
 * @member {Object} available_options_details
 */
NeoVIN.prototype['available_options_details'] = undefined;

/**
 * Body subtype (cab) of the vehicle
 * @member {String} body_subtype
 */
NeoVIN.prototype['body_subtype'] = undefined;

/**
 * Body type of the vehicle
 * @member {String} body_type
 */
NeoVIN.prototype['body_type'] = undefined;

/**
 * City miles per gallon
 * @member {Number} city_mpg
 */
NeoVIN.prototype['city_mpg'] = undefined;

/**
 * Calculated combination of base MSRP with the delivery charges and the installed options MSRP
 * @member {Number} combined_msrp
 */
NeoVIN.prototype['combined_msrp'] = undefined;

/**
 * vin first decoded at timestamp
 * @member {Number} created_at
 */
NeoVIN.prototype['created_at'] = undefined;

/**
 * vin first decoded at date
 * @member {String} created_at_date
 */
NeoVIN.prototype['created_at_date'] = undefined;

/**
 * This will represent if previous vin decode values are updated
 * @member {Number} decode_version
 */
NeoVIN.prototype['decode_version'] = undefined;

/**
 * Manufacturer defined delivery charges
 * @member {Number} delivery_charges
 */
NeoVIN.prototype['delivery_charges'] = undefined;

/**
 * Number of doors on the vehicle
 * @member {Number} doors
 */
NeoVIN.prototype['doors'] = undefined;

/**
 * Identified drivetrain of the vehicle
 * @member {String} drivetrain
 */
NeoVIN.prototype['drivetrain'] = undefined;

/**
 * Base identification of the number of cylinders and configuration of the installed engine on the vehicle
 * @member {String} engine
 */
NeoVIN.prototype['engine'] = undefined;

/**
 * The manufacturer defined option code and name for the exterior color of the vehicle
 * @member {Object} exterior_color
 */
NeoVIN.prototype['exterior_color'] = undefined;

/**
 * Normalized feature set of equipment identified that have been identified as installed on the vehicle, including whether that item was standard to the version of the vehicle or was added as an installed option
 * @member {Object} features
 */
NeoVIN.prototype['features'] = undefined;

/**
 * Identified Fuel type of the vehicle
 * @member {String} fuel_type
 */
NeoVIN.prototype['fuel_type'] = undefined;

/**
 * Overall height of the vehicle (in)
 * @member {Number} height
 */
NeoVIN.prototype['height'] = undefined;

/**
 * Highway miles per gallon
 * @member {Number} highway_mpg
 */
NeoVIN.prototype['highway_mpg'] = undefined;

/**
 * Detailed equipment identified as installed on the vehicle, including whether that item was standard to the version of the vehicle or was added as an installed option
 * @member {Object} installed_equipment
 */
NeoVIN.prototype['installed_equipment'] = undefined;

/**
 * Listing of all options and packages with detailed equipment identified that have been identified as installed on the vehicle
 * @member {Object} installed_options_details
 */
NeoVIN.prototype['installed_options_details'] = undefined;

/**
 * Calculated combination of the MSRP for the installed options and packages
 * @member {Number} installed_options_msrp
 */
NeoVIN.prototype['installed_options_msrp'] = undefined;

/**
 * The manufacturer defined option code and name for the interior color of the vehicle
 * @member {Object} interior_color
 */
NeoVIN.prototype['interior_color'] = undefined;

/**
 * Overall length of the vehicle (in)
 * @member {Number} length
 */
NeoVIN.prototype['length'] = undefined;

/**
 * Identification of primary source data used for trim and installed colors and options
 * @member {String} listing_confidence
 */
NeoVIN.prototype['listing_confidence'] = undefined;

/**
 * Make of the vehicle
 * @member {String} make
 */
NeoVIN.prototype['make'] = undefined;

/**
 * Manufacturer code of the vehicle
 * @member {String} manufacturer_code
 */
NeoVIN.prototype['manufacturer_code'] = undefined;

/**
 * Model of the vehicle
 * @member {String} model
 */
NeoVIN.prototype['model'] = undefined;

/**
 * Base MSRP as defined for the defined version of that vehicle with no options installed
 * @member {Number} msrp
 */
NeoVIN.prototype['msrp'] = undefined;

/**
 * Option and package codes installed on the vehicle
 * @member {String} options_packages
 */
NeoVIN.prototype['options_packages'] = undefined;

/**
 * Extracted manufacturer package code related to selection of the vehicle version (where available / applicable)
 * @member {String} package_code
 */
NeoVIN.prototype['package_code'] = undefined;

/**
 * Extracted manufacturer package code description (where available / applicable)
 * @member {String} package_description
 */
NeoVIN.prototype['package_description'] = undefined;

/**
 * Identified seating capacity of the vehicle
 * @member {Number} seating_capacity
 */
NeoVIN.prototype['seating_capacity'] = undefined;

/**
 * Vin prefix identification used in the decoding of the vehicle
 * @member {String} squish_vin
 */
NeoVIN.prototype['squish_vin'] = undefined;

/**
 * Identified installed Transmission of the vehicle
 * @member {String} transmission
 */
NeoVIN.prototype['transmission'] = undefined;

/**
 * Identification of confidence related to the selection of the installed transmission
 * @member {String} transmission_confidence
 */
NeoVIN.prototype['transmission_confidence'] = undefined;

/**
 * The description of the installed transmission
 * @member {String} transmission_description
 */
NeoVIN.prototype['transmission_description'] = undefined;

/**
 * Trim of the vehicle
 * @member {String} trim
 */
NeoVIN.prototype['trim'] = undefined;

/**
 * Identification of confidence related to the selection of the trim
 * @member {String} trim_confidence
 */
NeoVIN.prototype['trim_confidence'] = undefined;

/**
 * vin last decoded at timestamp
 * @member {Number} updated_at
 */
NeoVIN.prototype['updated_at'] = undefined;

/**
 * vin last decoded at date
 * @member {String} updated_at_date
 */
NeoVIN.prototype['updated_at_date'] = undefined;

/**
 * Version Name of the vehicle
 * @member {String} version
 */
NeoVIN.prototype['version'] = undefined;

/**
 * Identification of confidence related to the selection of the vehicle version
 * @member {String} version_confidence
 */
NeoVIN.prototype['version_confidence'] = undefined;

/**
 * 17 char long VIN of the vehicle
 * @member {String} vin
 */
NeoVIN.prototype['vin'] = undefined;

/**
 * Gross vehicle weight (lbs)
 * @member {Number} weight
 */
NeoVIN.prototype['weight'] = undefined;

/**
 * Overall width of the vehicle (in)
 * @member {Number} width
 */
NeoVIN.prototype['width'] = undefined;

/**
 * Model Year of the vehicle
 * @member {Number} year
 */
NeoVIN.prototype['year'] = undefined;






export default NeoVIN;

