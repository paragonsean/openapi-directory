/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PredictedSpecs model module.
 * @module model/PredictedSpecs
 * @version 2.01
 */
class PredictedSpecs {
    /**
     * Constructs a new <code>PredictedSpecs</code>.
     * Specs of predicted vehicle
     * @alias module:model/PredictedSpecs
     */
    constructor() { 
        
        PredictedSpecs.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PredictedSpecs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PredictedSpecs} obj Optional instance to populate.
     * @return {module:model/PredictedSpecs} The populated <code>PredictedSpecs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PredictedSpecs();

            if (data.hasOwnProperty('base_exterior_color')) {
                obj['base_exterior_color'] = ApiClient.convertToType(data['base_exterior_color'], 'String');
            }
            if (data.hasOwnProperty('base_interior_color')) {
                obj['base_interior_color'] = ApiClient.convertToType(data['base_interior_color'], 'String');
            }
            if (data.hasOwnProperty('carfax_1_owner')) {
                obj['carfax_1_owner'] = ApiClient.convertToType(data['carfax_1_owner'], 'Boolean');
            }
            if (data.hasOwnProperty('carfax_clean_title')) {
                obj['carfax_clean_title'] = ApiClient.convertToType(data['carfax_clean_title'], 'Boolean');
            }
            if (data.hasOwnProperty('city_mpg')) {
                obj['city_mpg'] = ApiClient.convertToType(data['city_mpg'], 'Number');
            }
            if (data.hasOwnProperty('cylinders')) {
                obj['cylinders'] = ApiClient.convertToType(data['cylinders'], 'Number');
            }
            if (data.hasOwnProperty('doors')) {
                obj['doors'] = ApiClient.convertToType(data['doors'], 'Number');
            }
            if (data.hasOwnProperty('drivetrain')) {
                obj['drivetrain'] = ApiClient.convertToType(data['drivetrain'], 'String');
            }
            if (data.hasOwnProperty('engine_block')) {
                obj['engine_block'] = ApiClient.convertToType(data['engine_block'], 'String');
            }
            if (data.hasOwnProperty('engine_size')) {
                obj['engine_size'] = ApiClient.convertToType(data['engine_size'], 'Number');
            }
            if (data.hasOwnProperty('highway_mpg')) {
                obj['highway_mpg'] = ApiClient.convertToType(data['highway_mpg'], 'Number');
            }
            if (data.hasOwnProperty('is_certified')) {
                obj['is_certified'] = ApiClient.convertToType(data['is_certified'], 'Boolean');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('miles')) {
                obj['miles'] = ApiClient.convertToType(data['miles'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('transmission')) {
                obj['transmission'] = ApiClient.convertToType(data['transmission'], 'String');
            }
            if (data.hasOwnProperty('trim')) {
                obj['trim'] = ApiClient.convertToType(data['trim'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PredictedSpecs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PredictedSpecs</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['base_exterior_color'] && !(typeof data['base_exterior_color'] === 'string' || data['base_exterior_color'] instanceof String)) {
            throw new Error("Expected the field `base_exterior_color` to be a primitive type in the JSON string but got " + data['base_exterior_color']);
        }
        // ensure the json data is a string
        if (data['base_interior_color'] && !(typeof data['base_interior_color'] === 'string' || data['base_interior_color'] instanceof String)) {
            throw new Error("Expected the field `base_interior_color` to be a primitive type in the JSON string but got " + data['base_interior_color']);
        }
        // ensure the json data is a string
        if (data['drivetrain'] && !(typeof data['drivetrain'] === 'string' || data['drivetrain'] instanceof String)) {
            throw new Error("Expected the field `drivetrain` to be a primitive type in the JSON string but got " + data['drivetrain']);
        }
        // ensure the json data is a string
        if (data['engine_block'] && !(typeof data['engine_block'] === 'string' || data['engine_block'] instanceof String)) {
            throw new Error("Expected the field `engine_block` to be a primitive type in the JSON string but got " + data['engine_block']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['transmission'] && !(typeof data['transmission'] === 'string' || data['transmission'] instanceof String)) {
            throw new Error("Expected the field `transmission` to be a primitive type in the JSON string but got " + data['transmission']);
        }
        // ensure the json data is a string
        if (data['trim'] && !(typeof data['trim'] === 'string' || data['trim'] instanceof String)) {
            throw new Error("Expected the field `trim` to be a primitive type in the JSON string but got " + data['trim']);
        }

        return true;
    }


}



/**
 * Base exterior color of vehicle
 * @member {String} base_exterior_color
 */
PredictedSpecs.prototype['base_exterior_color'] = undefined;

/**
 * base interior color of vehicle
 * @member {String} base_interior_color
 */
PredictedSpecs.prototype['base_interior_color'] = undefined;

/**
 * Indicates whether car has had only one owner or not
 * @member {Boolean} carfax_1_owner
 */
PredictedSpecs.prototype['carfax_1_owner'] = undefined;

/**
 * Indicates whether car has clean ownership records
 * @member {Boolean} carfax_clean_title
 */
PredictedSpecs.prototype['carfax_clean_title'] = undefined;

/**
 * City mileage
 * @member {Number} city_mpg
 */
PredictedSpecs.prototype['city_mpg'] = undefined;

/**
 * Number of cylinders
 * @member {Number} cylinders
 */
PredictedSpecs.prototype['cylinders'] = undefined;

/**
 * Number of doors
 * @member {Number} doors
 */
PredictedSpecs.prototype['doors'] = undefined;

/**
 * Drivetrain of the vehicle
 * @member {String} drivetrain
 */
PredictedSpecs.prototype['drivetrain'] = undefined;

/**
 * Engine block of the vehicle
 * @member {String} engine_block
 */
PredictedSpecs.prototype['engine_block'] = undefined;

/**
 * Engine size
 * @member {Number} engine_size
 */
PredictedSpecs.prototype['engine_size'] = undefined;

/**
 * Highway mileage
 * @member {Number} highway_mpg
 */
PredictedSpecs.prototype['highway_mpg'] = undefined;

/**
 * Certified vehicle
 * @member {Boolean} is_certified
 */
PredictedSpecs.prototype['is_certified'] = undefined;

/**
 * Latutide for the vehicle location
 * @member {Number} latitude
 */
PredictedSpecs.prototype['latitude'] = undefined;

/**
 * Longitude for the vehicle location
 * @member {Number} longitude
 */
PredictedSpecs.prototype['longitude'] = undefined;

/**
 * make
 * @member {String} make
 */
PredictedSpecs.prototype['make'] = undefined;

/**
 * Miles
 * @member {Number} miles
 */
PredictedSpecs.prototype['miles'] = undefined;

/**
 * model
 * @member {String} model
 */
PredictedSpecs.prototype['model'] = undefined;

/**
 * transmission
 * @member {String} transmission
 */
PredictedSpecs.prototype['transmission'] = undefined;

/**
 * trim
 * @member {String} trim
 */
PredictedSpecs.prototype['trim'] = undefined;

/**
 * year
 * @member {Number} year
 */
PredictedSpecs.prototype['year'] = undefined;






export default PredictedSpecs;

