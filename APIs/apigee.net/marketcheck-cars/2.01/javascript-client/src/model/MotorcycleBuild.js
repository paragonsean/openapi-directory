/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MotorcycleBuild model module.
 * @module model/MotorcycleBuild
 * @version 2.01
 */
class MotorcycleBuild {
    /**
     * Constructs a new <code>MotorcycleBuild</code>.
     * Describes the Motorcycle specification
     * @alias module:model/MotorcycleBuild
     */
    constructor() { 
        
        MotorcycleBuild.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MotorcycleBuild</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MotorcycleBuild} obj Optional instance to populate.
     * @return {module:model/MotorcycleBuild} The populated <code>MotorcycleBuild</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MotorcycleBuild();

            if (data.hasOwnProperty('body_type')) {
                obj['body_type'] = ApiClient.convertToType(data['body_type'], 'String');
            }
            if (data.hasOwnProperty('cylinders')) {
                obj['cylinders'] = ApiClient.convertToType(data['cylinders'], 'Number');
            }
            if (data.hasOwnProperty('drivetrain')) {
                obj['drivetrain'] = ApiClient.convertToType(data['drivetrain'], 'String');
            }
            if (data.hasOwnProperty('dry_weight')) {
                obj['dry_weight'] = ApiClient.convertToType(data['dry_weight'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('fuel_type')) {
                obj['fuel_type'] = ApiClient.convertToType(data['fuel_type'], 'String');
            }
            if (data.hasOwnProperty('made_in')) {
                obj['made_in'] = ApiClient.convertToType(data['made_in'], 'String');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('transmission')) {
                obj['transmission'] = ApiClient.convertToType(data['transmission'], 'String');
            }
            if (data.hasOwnProperty('trim')) {
                obj['trim'] = ApiClient.convertToType(data['trim'], 'String');
            }
            if (data.hasOwnProperty('vehicle_type')) {
                obj['vehicle_type'] = ApiClient.convertToType(data['vehicle_type'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MotorcycleBuild</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MotorcycleBuild</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body_type'] && !(typeof data['body_type'] === 'string' || data['body_type'] instanceof String)) {
            throw new Error("Expected the field `body_type` to be a primitive type in the JSON string but got " + data['body_type']);
        }
        // ensure the json data is a string
        if (data['drivetrain'] && !(typeof data['drivetrain'] === 'string' || data['drivetrain'] instanceof String)) {
            throw new Error("Expected the field `drivetrain` to be a primitive type in the JSON string but got " + data['drivetrain']);
        }
        // ensure the json data is a string
        if (data['dry_weight'] && !(typeof data['dry_weight'] === 'string' || data['dry_weight'] instanceof String)) {
            throw new Error("Expected the field `dry_weight` to be a primitive type in the JSON string but got " + data['dry_weight']);
        }
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['fuel_type'] && !(typeof data['fuel_type'] === 'string' || data['fuel_type'] instanceof String)) {
            throw new Error("Expected the field `fuel_type` to be a primitive type in the JSON string but got " + data['fuel_type']);
        }
        // ensure the json data is a string
        if (data['made_in'] && !(typeof data['made_in'] === 'string' || data['made_in'] instanceof String)) {
            throw new Error("Expected the field `made_in` to be a primitive type in the JSON string but got " + data['made_in']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['transmission'] && !(typeof data['transmission'] === 'string' || data['transmission'] instanceof String)) {
            throw new Error("Expected the field `transmission` to be a primitive type in the JSON string but got " + data['transmission']);
        }
        // ensure the json data is a string
        if (data['trim'] && !(typeof data['trim'] === 'string' || data['trim'] instanceof String)) {
            throw new Error("Expected the field `trim` to be a primitive type in the JSON string but got " + data['trim']);
        }
        // ensure the json data is a string
        if (data['vehicle_type'] && !(typeof data['vehicle_type'] === 'string' || data['vehicle_type'] instanceof String)) {
            throw new Error("Expected the field `vehicle_type` to be a primitive type in the JSON string but got " + data['vehicle_type']);
        }

        return true;
    }


}



/**
 * Body type of the motorcycle
 * @member {String} body_type
 */
MotorcycleBuild.prototype['body_type'] = undefined;

/**
 * No of cylinders of the motorcycle
 * @member {Number} cylinders
 */
MotorcycleBuild.prototype['cylinders'] = undefined;

/**
 * Drivetrain of the motorcycle
 * @member {String} drivetrain
 */
MotorcycleBuild.prototype['drivetrain'] = undefined;

/**
 * Dry weight of motorcycle
 * @member {String} dry_weight
 */
MotorcycleBuild.prototype['dry_weight'] = undefined;

/**
 * Engine of the motorcycle
 * @member {String} engine
 */
MotorcycleBuild.prototype['engine'] = undefined;

/**
 * Fuel type of the motorcycle
 * @member {String} fuel_type
 */
MotorcycleBuild.prototype['fuel_type'] = undefined;

/**
 * Made in of the motorcycle
 * @member {String} made_in
 */
MotorcycleBuild.prototype['made_in'] = undefined;

/**
 * Motorcycle Make
 * @member {String} make
 */
MotorcycleBuild.prototype['make'] = undefined;

/**
 * Motorcycle model
 * @member {String} model
 */
MotorcycleBuild.prototype['model'] = undefined;

/**
 * Transmission of the motorcycle
 * @member {String} transmission
 */
MotorcycleBuild.prototype['transmission'] = undefined;

/**
 * Trim of the motorcycle
 * @member {String} trim
 */
MotorcycleBuild.prototype['trim'] = undefined;

/**
 * Vehicle type of the motorcycle
 * @member {String} vehicle_type
 */
MotorcycleBuild.prototype['vehicle_type'] = undefined;

/**
 * Year of the motorcycle
 * @member {Number} year
 */
MotorcycleBuild.prototype['year'] = undefined;






export default MotorcycleBuild;

