/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListingNestExtraAttributes model module.
 * @module model/ListingNestExtraAttributes
 * @version 2.01
 */
class ListingNestExtraAttributes {
    /**
     * Constructs a new <code>ListingNestExtraAttributes</code>.
     * @alias module:model/ListingNestExtraAttributes
     */
    constructor() { 
        
        ListingNestExtraAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListingNestExtraAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListingNestExtraAttributes} obj Optional instance to populate.
     * @return {module:model/ListingNestExtraAttributes} The populated <code>ListingNestExtraAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListingNestExtraAttributes();

            if (data.hasOwnProperty('dealer_added_f')) {
                obj['dealer_added_f'] = ApiClient.convertToType(data['dealer_added_f'], ['String']);
            }
            if (data.hasOwnProperty('electronics_f')) {
                obj['electronics_f'] = ApiClient.convertToType(data['electronics_f'], ['String']);
            }
            if (data.hasOwnProperty('exterior_f')) {
                obj['exterior_f'] = ApiClient.convertToType(data['exterior_f'], ['String']);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], ['String']);
            }
            if (data.hasOwnProperty('interior_f')) {
                obj['interior_f'] = ApiClient.convertToType(data['interior_f'], ['String']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], ['String']);
            }
            if (data.hasOwnProperty('safety_f')) {
                obj['safety_f'] = ApiClient.convertToType(data['safety_f'], ['String']);
            }
            if (data.hasOwnProperty('seller_comments')) {
                obj['seller_comments'] = ApiClient.convertToType(data['seller_comments'], 'String');
            }
            if (data.hasOwnProperty('standard_f')) {
                obj['standard_f'] = ApiClient.convertToType(data['standard_f'], ['String']);
            }
            if (data.hasOwnProperty('technical_f')) {
                obj['technical_f'] = ApiClient.convertToType(data['technical_f'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListingNestExtraAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListingNestExtraAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['dealer_added_f'])) {
            throw new Error("Expected the field `dealer_added_f` to be an array in the JSON data but got " + data['dealer_added_f']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['electronics_f'])) {
            throw new Error("Expected the field `electronics_f` to be an array in the JSON data but got " + data['electronics_f']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exterior_f'])) {
            throw new Error("Expected the field `exterior_f` to be an array in the JSON data but got " + data['exterior_f']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['features'])) {
            throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['interior_f'])) {
            throw new Error("Expected the field `interior_f` to be an array in the JSON data but got " + data['interior_f']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['options'])) {
            throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['safety_f'])) {
            throw new Error("Expected the field `safety_f` to be an array in the JSON data but got " + data['safety_f']);
        }
        // ensure the json data is a string
        if (data['seller_comments'] && !(typeof data['seller_comments'] === 'string' || data['seller_comments'] instanceof String)) {
            throw new Error("Expected the field `seller_comments` to be a primitive type in the JSON string but got " + data['seller_comments']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['standard_f'])) {
            throw new Error("Expected the field `standard_f` to be an array in the JSON data but got " + data['standard_f']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['technical_f'])) {
            throw new Error("Expected the field `technical_f` to be an array in the JSON data but got " + data['technical_f']);
        }

        return true;
    }


}



/**
 * List of dealer added features available with the car
 * @member {Array.<String>} dealer_added_f
 */
ListingNestExtraAttributes.prototype['dealer_added_f'] = undefined;

/**
 * List of electronic features available with the car
 * @member {Array.<String>} electronics_f
 */
ListingNestExtraAttributes.prototype['electronics_f'] = undefined;

/**
 * List of exterior features available with the car
 * @member {Array.<String>} exterior_f
 */
ListingNestExtraAttributes.prototype['exterior_f'] = undefined;

/**
 * List of Features available with the car
 * @member {Array.<String>} features
 */
ListingNestExtraAttributes.prototype['features'] = undefined;

/**
 * List of interior features available with the car
 * @member {Array.<String>} interior_f
 */
ListingNestExtraAttributes.prototype['interior_f'] = undefined;

/**
 * Installed Options of the car
 * @member {Array.<String>} options
 */
ListingNestExtraAttributes.prototype['options'] = undefined;

/**
 * List of safety features available with the car
 * @member {Array.<String>} safety_f
 */
ListingNestExtraAttributes.prototype['safety_f'] = undefined;

/**
 * Seller comments for the car
 * @member {String} seller_comments
 */
ListingNestExtraAttributes.prototype['seller_comments'] = undefined;

/**
 * List of standard features available with the car
 * @member {Array.<String>} standard_f
 */
ListingNestExtraAttributes.prototype['standard_f'] = undefined;

/**
 * List of technical features available with the car
 * @member {Array.<String>} technical_f
 */
ListingNestExtraAttributes.prototype['technical_f'] = undefined;






export default ListingNestExtraAttributes;

