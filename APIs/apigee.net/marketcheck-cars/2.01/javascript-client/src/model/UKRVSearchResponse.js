/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MotorcycleSearchStats from './MotorcycleSearchStats';
import UKRVBaseListing from './UKRVBaseListing';
import UKRVSearchFacets from './UKRVSearchFacets';
import UKRVSearchRangeFacets from './UKRVSearchRangeFacets';

/**
 * The UKRVSearchResponse model module.
 * @module model/UKRVSearchResponse
 * @version 2.01
 */
class UKRVSearchResponse {
    /**
     * Constructs a new <code>UKRVSearchResponse</code>.
     * RV search query response
     * @alias module:model/UKRVSearchResponse
     */
    constructor() { 
        
        UKRVSearchResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UKRVSearchResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UKRVSearchResponse} obj Optional instance to populate.
     * @return {module:model/UKRVSearchResponse} The populated <code>UKRVSearchResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UKRVSearchResponse();

            if (data.hasOwnProperty('facets')) {
                obj['facets'] = ApiClient.convertToType(data['facets'], [UKRVSearchFacets]);
            }
            if (data.hasOwnProperty('listings')) {
                obj['listings'] = ApiClient.convertToType(data['listings'], [UKRVBaseListing]);
            }
            if (data.hasOwnProperty('num_found')) {
                obj['num_found'] = ApiClient.convertToType(data['num_found'], 'Number');
            }
            if (data.hasOwnProperty('range_facets')) {
                obj['range_facets'] = ApiClient.convertToType(data['range_facets'], [UKRVSearchRangeFacets]);
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = ApiClient.convertToType(data['stats'], [MotorcycleSearchStats]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UKRVSearchResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UKRVSearchResponse</code>.
     */
    static validateJSON(data) {
        if (data['facets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['facets'])) {
                throw new Error("Expected the field `facets` to be an array in the JSON data but got " + data['facets']);
            }
            // validate the optional field `facets` (array)
            for (const item of data['facets']) {
                UKRVSearchFacets.validateJSON(item);
            };
        }
        if (data['listings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['listings'])) {
                throw new Error("Expected the field `listings` to be an array in the JSON data but got " + data['listings']);
            }
            // validate the optional field `listings` (array)
            for (const item of data['listings']) {
                UKRVBaseListing.validateJSON(item);
            };
        }
        if (data['range_facets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['range_facets'])) {
                throw new Error("Expected the field `range_facets` to be an array in the JSON data but got " + data['range_facets']);
            }
            // validate the optional field `range_facets` (array)
            for (const item of data['range_facets']) {
                UKRVSearchRangeFacets.validateJSON(item);
            };
        }
        if (data['stats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stats'])) {
                throw new Error("Expected the field `stats` to be an array in the JSON data but got " + data['stats']);
            }
            // validate the optional field `stats` (array)
            for (const item of data['stats']) {
                MotorcycleSearchStats.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/UKRVSearchFacets>} facets
 */
UKRVSearchResponse.prototype['facets'] = undefined;

/**
 * @member {Array.<module:model/UKRVBaseListing>} listings
 */
UKRVSearchResponse.prototype['listings'] = undefined;

/**
 * The number of listings found
 * @member {Number} num_found
 */
UKRVSearchResponse.prototype['num_found'] = undefined;

/**
 * @member {Array.<module:model/UKRVSearchRangeFacets>} range_facets
 */
UKRVSearchResponse.prototype['range_facets'] = undefined;

/**
 * @member {Array.<module:model/MotorcycleSearchStats>} stats
 */
UKRVSearchResponse.prototype['stats'] = undefined;






export default UKRVSearchResponse;

