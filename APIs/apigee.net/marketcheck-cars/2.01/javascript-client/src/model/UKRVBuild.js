/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UKRVBuild model module.
 * @module model/UKRVBuild
 * @version 2.01
 */
class UKRVBuild {
    /**
     * Constructs a new <code>UKRVBuild</code>.
     * Describes the RV specification
     * @alias module:model/UKRVBuild
     */
    constructor() { 
        
        UKRVBuild.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UKRVBuild</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UKRVBuild} obj Optional instance to populate.
     * @return {module:model/UKRVBuild} The populated <code>UKRVBuild</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UKRVBuild();

            if (data.hasOwnProperty('area')) {
                obj['area'] = ApiClient.convertToType(data['area'], 'String');
            }
            if (data.hasOwnProperty('berths')) {
                obj['berths'] = ApiClient.convertToType(data['berths'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('chassis')) {
                obj['chassis'] = ApiClient.convertToType(data['chassis'], 'String');
            }
            if (data.hasOwnProperty('drive_type')) {
                obj['drive_type'] = ApiClient.convertToType(data['drive_type'], 'String');
            }
            if (data.hasOwnProperty('drivetrain')) {
                obj['drivetrain'] = ApiClient.convertToType(data['drivetrain'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('engine_size')) {
                obj['engine_size'] = ApiClient.convertToType(data['engine_size'], 'String');
            }
            if (data.hasOwnProperty('exterior_length')) {
                obj['exterior_length'] = ApiClient.convertToType(data['exterior_length'], 'String');
            }
            if (data.hasOwnProperty('floorplan')) {
                obj['floorplan'] = ApiClient.convertToType(data['floorplan'], 'String');
            }
            if (data.hasOwnProperty('floorplan_layout')) {
                obj['floorplan_layout'] = ApiClient.convertToType(data['floorplan_layout'], 'String');
            }
            if (data.hasOwnProperty('fuel_type')) {
                obj['fuel_type'] = ApiClient.convertToType(data['fuel_type'], 'String');
            }
            if (data.hasOwnProperty('gvwr')) {
                obj['gvwr'] = ApiClient.convertToType(data['gvwr'], 'String');
            }
            if (data.hasOwnProperty('interior_length')) {
                obj['interior_length'] = ApiClient.convertToType(data['interior_length'], 'String');
            }
            if (data.hasOwnProperty('inventory_type')) {
                obj['inventory_type'] = ApiClient.convertToType(data['inventory_type'], 'String');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('mtplm')) {
                obj['mtplm'] = ApiClient.convertToType(data['mtplm'], 'String');
            }
            if (data.hasOwnProperty('slideouts')) {
                obj['slideouts'] = ApiClient.convertToType(data['slideouts'], 'String');
            }
            if (data.hasOwnProperty('steering')) {
                obj['steering'] = ApiClient.convertToType(data['steering'], 'String');
            }
            if (data.hasOwnProperty('sub_category')) {
                obj['sub_category'] = ApiClient.convertToType(data['sub_category'], 'String');
            }
            if (data.hasOwnProperty('transmission')) {
                obj['transmission'] = ApiClient.convertToType(data['transmission'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UKRVBuild</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UKRVBuild</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['area'] && !(typeof data['area'] === 'string' || data['area'] instanceof String)) {
            throw new Error("Expected the field `area` to be a primitive type in the JSON string but got " + data['area']);
        }
        // ensure the json data is a string
        if (data['berths'] && !(typeof data['berths'] === 'string' || data['berths'] instanceof String)) {
            throw new Error("Expected the field `berths` to be a primitive type in the JSON string but got " + data['berths']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['chassis'] && !(typeof data['chassis'] === 'string' || data['chassis'] instanceof String)) {
            throw new Error("Expected the field `chassis` to be a primitive type in the JSON string but got " + data['chassis']);
        }
        // ensure the json data is a string
        if (data['drive_type'] && !(typeof data['drive_type'] === 'string' || data['drive_type'] instanceof String)) {
            throw new Error("Expected the field `drive_type` to be a primitive type in the JSON string but got " + data['drive_type']);
        }
        // ensure the json data is a string
        if (data['drivetrain'] && !(typeof data['drivetrain'] === 'string' || data['drivetrain'] instanceof String)) {
            throw new Error("Expected the field `drivetrain` to be a primitive type in the JSON string but got " + data['drivetrain']);
        }
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['engine_size'] && !(typeof data['engine_size'] === 'string' || data['engine_size'] instanceof String)) {
            throw new Error("Expected the field `engine_size` to be a primitive type in the JSON string but got " + data['engine_size']);
        }
        // ensure the json data is a string
        if (data['exterior_length'] && !(typeof data['exterior_length'] === 'string' || data['exterior_length'] instanceof String)) {
            throw new Error("Expected the field `exterior_length` to be a primitive type in the JSON string but got " + data['exterior_length']);
        }
        // ensure the json data is a string
        if (data['floorplan'] && !(typeof data['floorplan'] === 'string' || data['floorplan'] instanceof String)) {
            throw new Error("Expected the field `floorplan` to be a primitive type in the JSON string but got " + data['floorplan']);
        }
        // ensure the json data is a string
        if (data['floorplan_layout'] && !(typeof data['floorplan_layout'] === 'string' || data['floorplan_layout'] instanceof String)) {
            throw new Error("Expected the field `floorplan_layout` to be a primitive type in the JSON string but got " + data['floorplan_layout']);
        }
        // ensure the json data is a string
        if (data['fuel_type'] && !(typeof data['fuel_type'] === 'string' || data['fuel_type'] instanceof String)) {
            throw new Error("Expected the field `fuel_type` to be a primitive type in the JSON string but got " + data['fuel_type']);
        }
        // ensure the json data is a string
        if (data['gvwr'] && !(typeof data['gvwr'] === 'string' || data['gvwr'] instanceof String)) {
            throw new Error("Expected the field `gvwr` to be a primitive type in the JSON string but got " + data['gvwr']);
        }
        // ensure the json data is a string
        if (data['interior_length'] && !(typeof data['interior_length'] === 'string' || data['interior_length'] instanceof String)) {
            throw new Error("Expected the field `interior_length` to be a primitive type in the JSON string but got " + data['interior_length']);
        }
        // ensure the json data is a string
        if (data['inventory_type'] && !(typeof data['inventory_type'] === 'string' || data['inventory_type'] instanceof String)) {
            throw new Error("Expected the field `inventory_type` to be a primitive type in the JSON string but got " + data['inventory_type']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['mtplm'] && !(typeof data['mtplm'] === 'string' || data['mtplm'] instanceof String)) {
            throw new Error("Expected the field `mtplm` to be a primitive type in the JSON string but got " + data['mtplm']);
        }
        // ensure the json data is a string
        if (data['slideouts'] && !(typeof data['slideouts'] === 'string' || data['slideouts'] instanceof String)) {
            throw new Error("Expected the field `slideouts` to be a primitive type in the JSON string but got " + data['slideouts']);
        }
        // ensure the json data is a string
        if (data['steering'] && !(typeof data['steering'] === 'string' || data['steering'] instanceof String)) {
            throw new Error("Expected the field `steering` to be a primitive type in the JSON string but got " + data['steering']);
        }
        // ensure the json data is a string
        if (data['sub_category'] && !(typeof data['sub_category'] === 'string' || data['sub_category'] instanceof String)) {
            throw new Error("Expected the field `sub_category` to be a primitive type in the JSON string but got " + data['sub_category']);
        }
        // ensure the json data is a string
        if (data['transmission'] && !(typeof data['transmission'] === 'string' || data['transmission'] instanceof String)) {
            throw new Error("Expected the field `transmission` to be a primitive type in the JSON string but got " + data['transmission']);
        }
        // ensure the json data is a string
        if (data['width'] && !(typeof data['width'] === 'string' || data['width'] instanceof String)) {
            throw new Error("Expected the field `width` to be a primitive type in the JSON string but got " + data['width']);
        }

        return true;
    }


}



/**
 * Area of the RV
 * @member {String} area
 */
UKRVBuild.prototype['area'] = undefined;

/**
 * berths of RV
 * @member {String} berths
 */
UKRVBuild.prototype['berths'] = undefined;

/**
 * category of the RV
 * @member {String} category
 */
UKRVBuild.prototype['category'] = undefined;

/**
 * chassis of RV
 * @member {String} chassis
 */
UKRVBuild.prototype['chassis'] = undefined;

/**
 * drive_type of RV
 * @member {String} drive_type
 */
UKRVBuild.prototype['drive_type'] = undefined;

/**
 * Drivetrain of the RV
 * @member {String} drivetrain
 */
UKRVBuild.prototype['drivetrain'] = undefined;

/**
 * Engine of the RV
 * @member {String} engine
 */
UKRVBuild.prototype['engine'] = undefined;

/**
 * engine_size of RV
 * @member {String} engine_size
 */
UKRVBuild.prototype['engine_size'] = undefined;

/**
 * exterior_length of RV
 * @member {String} exterior_length
 */
UKRVBuild.prototype['exterior_length'] = undefined;

/**
 * floorplan of RV
 * @member {String} floorplan
 */
UKRVBuild.prototype['floorplan'] = undefined;

/**
 * floorplan_layout of RV
 * @member {String} floorplan_layout
 */
UKRVBuild.prototype['floorplan_layout'] = undefined;

/**
 * Fuel type of the RV
 * @member {String} fuel_type
 */
UKRVBuild.prototype['fuel_type'] = undefined;

/**
 * Gross Vehicle Weight Ratio of RV
 * @member {String} gvwr
 */
UKRVBuild.prototype['gvwr'] = undefined;

/**
 * interior_length of RV
 * @member {String} interior_length
 */
UKRVBuild.prototype['interior_length'] = undefined;

/**
 * Inventory type of the RV
 * @member {String} inventory_type
 */
UKRVBuild.prototype['inventory_type'] = undefined;

/**
 * RV Make
 * @member {String} make
 */
UKRVBuild.prototype['make'] = undefined;

/**
 * RV model
 * @member {String} model
 */
UKRVBuild.prototype['model'] = undefined;

/**
 * mtplm of RV
 * @member {String} mtplm
 */
UKRVBuild.prototype['mtplm'] = undefined;

/**
 * Slideouts of the RV
 * @member {String} slideouts
 */
UKRVBuild.prototype['slideouts'] = undefined;

/**
 * steering of RV
 * @member {String} steering
 */
UKRVBuild.prototype['steering'] = undefined;

/**
 * sub_category of the RV
 * @member {String} sub_category
 */
UKRVBuild.prototype['sub_category'] = undefined;

/**
 * Transmission of the RV
 * @member {String} transmission
 */
UKRVBuild.prototype['transmission'] = undefined;

/**
 * width of RV
 * @member {String} width
 */
UKRVBuild.prototype['width'] = undefined;

/**
 * Year of the RV
 * @member {Number} year
 */
UKRVBuild.prototype['year'] = undefined;






export default UKRVBuild;

