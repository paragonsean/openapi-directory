/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dealer model module.
 * @module model/Dealer
 * @version 2.01
 */
class Dealer {
    /**
     * Constructs a new <code>Dealer</code>.
     * @alias module:model/Dealer
     */
    constructor() { 
        
        Dealer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dealer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dealer} obj Optional instance to populate.
     * @return {module:model/Dealer} The populated <code>Dealer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dealer();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('data_source')) {
                obj['data_source'] = ApiClient.convertToType(data['data_source'], 'String');
            }
            if (data.hasOwnProperty('dealer_type')) {
                obj['dealer_type'] = ApiClient.convertToType(data['dealer_type'], 'String');
            }
            if (data.hasOwnProperty('dealership_group_name')) {
                obj['dealership_group_name'] = ApiClient.convertToType(data['dealership_group_name'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inventory_url')) {
                obj['inventory_url'] = ApiClient.convertToType(data['inventory_url'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('listing_count')) {
                obj['listing_count'] = ApiClient.convertToType(data['listing_count'], 'Number');
            }
            if (data.hasOwnProperty('location_ll')) {
                obj['location_ll'] = ApiClient.convertToType(data['location_ll'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
            if (data.hasOwnProperty('seller_email')) {
                obj['seller_email'] = ApiClient.convertToType(data['seller_email'], 'String');
            }
            if (data.hasOwnProperty('seller_name')) {
                obj['seller_name'] = ApiClient.convertToType(data['seller_name'], 'String');
            }
            if (data.hasOwnProperty('seller_phone')) {
                obj['seller_phone'] = ApiClient.convertToType(data['seller_phone'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dealer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dealer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['data_source'] && !(typeof data['data_source'] === 'string' || data['data_source'] instanceof String)) {
            throw new Error("Expected the field `data_source` to be a primitive type in the JSON string but got " + data['data_source']);
        }
        // ensure the json data is a string
        if (data['dealer_type'] && !(typeof data['dealer_type'] === 'string' || data['dealer_type'] instanceof String)) {
            throw new Error("Expected the field `dealer_type` to be a primitive type in the JSON string but got " + data['dealer_type']);
        }
        // ensure the json data is a string
        if (data['dealership_group_name'] && !(typeof data['dealership_group_name'] === 'string' || data['dealership_group_name'] instanceof String)) {
            throw new Error("Expected the field `dealership_group_name` to be a primitive type in the JSON string but got " + data['dealership_group_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['inventory_url'] && !(typeof data['inventory_url'] === 'string' || data['inventory_url'] instanceof String)) {
            throw new Error("Expected the field `inventory_url` to be a primitive type in the JSON string but got " + data['inventory_url']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        // ensure the json data is a string
        if (data['location_ll'] && !(typeof data['location_ll'] === 'string' || data['location_ll'] instanceof String)) {
            throw new Error("Expected the field `location_ll` to be a primitive type in the JSON string but got " + data['location_ll']);
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }
        // ensure the json data is a string
        if (data['seller_email'] && !(typeof data['seller_email'] === 'string' || data['seller_email'] instanceof String)) {
            throw new Error("Expected the field `seller_email` to be a primitive type in the JSON string but got " + data['seller_email']);
        }
        // ensure the json data is a string
        if (data['seller_name'] && !(typeof data['seller_name'] === 'string' || data['seller_name'] instanceof String)) {
            throw new Error("Expected the field `seller_name` to be a primitive type in the JSON string but got " + data['seller_name']);
        }
        // ensure the json data is a string
        if (data['seller_phone'] && !(typeof data['seller_phone'] === 'string' || data['seller_phone'] instanceof String)) {
            throw new Error("Expected the field `seller_phone` to be a primitive type in the JSON string but got " + data['seller_phone']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}



/**
 * City of the dealer
 * @member {String} city
 */
Dealer.prototype['city'] = undefined;

/**
 * country of the dealer
 * @member {String} country
 */
Dealer.prototype['country'] = undefined;

/**
 * Datasource of the dealer
 * @member {String} data_source
 */
Dealer.prototype['data_source'] = undefined;

/**
 * Type of dealer (franchise/independent)
 * @member {String} dealer_type
 */
Dealer.prototype['dealer_type'] = undefined;

/**
 * Dealership group name of dealer
 * @member {String} dealership_group_name
 */
Dealer.prototype['dealership_group_name'] = undefined;

/**
 * Distance of dealer from given location
 * @member {Number} distance
 */
Dealer.prototype['distance'] = undefined;

/**
 * The unique id associated with the dealer in the Marketcheck database
 * @member {String} id
 */
Dealer.prototype['id'] = undefined;

/**
 * Website of the dealer
 * @member {String} inventory_url
 */
Dealer.prototype['inventory_url'] = undefined;

/**
 * Latutide for the dealer location
 * @member {String} latitude
 */
Dealer.prototype['latitude'] = undefined;

/**
 * Listing count of the dealer
 * @member {Number} listing_count
 */
Dealer.prototype['listing_count'] = undefined;

/**
 * location_ll for the dealer location
 * @member {String} location_ll
 */
Dealer.prototype['location_ll'] = undefined;

/**
 * Longitude for the dealer location
 * @member {String} longitude
 */
Dealer.prototype['longitude'] = undefined;

/**
 * Contact email of the dealer
 * @member {String} seller_email
 */
Dealer.prototype['seller_email'] = undefined;

/**
 * Name of the dealer
 * @member {String} seller_name
 */
Dealer.prototype['seller_name'] = undefined;

/**
 * Contact no of the dealer
 * @member {String} seller_phone
 */
Dealer.prototype['seller_phone'] = undefined;

/**
 * State of the dealer
 * @member {String} state
 */
Dealer.prototype['state'] = undefined;

/**
 * Status of the dealer
 * @member {String} status
 */
Dealer.prototype['status'] = undefined;

/**
 * Street of the dealer
 * @member {String} street
 */
Dealer.prototype['street'] = undefined;

/**
 * Zip of the dealer
 * @member {String} zip
 */
Dealer.prototype['zip'] = undefined;






export default Dealer;

