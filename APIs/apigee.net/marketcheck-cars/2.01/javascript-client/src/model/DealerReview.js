/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReviewComponents from './ReviewComponents';

/**
 * The DealerReview model module.
 * @module model/DealerReview
 * @version 2.01
 */
class DealerReview {
    /**
     * Constructs a new <code>DealerReview</code>.
     * @alias module:model/DealerReview
     */
    constructor() { 
        
        DealerReview.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DealerReview</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DealerReview} obj Optional instance to populate.
     * @return {module:model/DealerReview} The populated <code>DealerReview</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DealerReview();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('overall_reviews')) {
                obj['overall_reviews'] = ApiClient.convertToType(data['overall_reviews'], 'Number');
            }
            if (data.hasOwnProperty('review_components')) {
                obj['review_components'] = ApiClient.convertToType(data['review_components'], [ReviewComponents]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DealerReview</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DealerReview</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['review_components']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['review_components'])) {
                throw new Error("Expected the field `review_components` to be an array in the JSON data but got " + data['review_components']);
            }
            // validate the optional field `review_components` (array)
            for (const item of data['review_components']) {
                ReviewComponents.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}



/**
 * City of the dealer
 * @member {String} city
 */
DealerReview.prototype['city'] = undefined;

/**
 * Latutide for the dealer location
 * @member {String} latitude
 */
DealerReview.prototype['latitude'] = undefined;

/**
 * Longitude for the dealer location
 * @member {String} longitude
 */
DealerReview.prototype['longitude'] = undefined;

/**
 * Name of the dealer
 * @member {String} name
 */
DealerReview.prototype['name'] = undefined;

/**
 * Overall reviews of the dealership
 * @member {Number} overall_reviews
 */
DealerReview.prototype['overall_reviews'] = undefined;

/**
 * @member {Array.<module:model/ReviewComponents>} review_components
 */
DealerReview.prototype['review_components'] = undefined;

/**
 * State of the dealer
 * @member {String} state
 */
DealerReview.prototype['state'] = undefined;

/**
 * Street of the dealer
 * @member {String} street
 */
DealerReview.prototype['street'] = undefined;

/**
 * Zip of the dealer
 * @member {String} zip
 */
DealerReview.prototype['zip'] = undefined;






export default DealerReview;

