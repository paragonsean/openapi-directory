/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RangeFacetItemCountsInner from './RangeFacetItemCountsInner';

/**
 * The RangeFacetItem model module.
 * @module model/RangeFacetItem
 * @version 2.01
 */
class RangeFacetItem {
    /**
     * Constructs a new <code>RangeFacetItem</code>.
     * @alias module:model/RangeFacetItem
     */
    constructor() { 
        
        RangeFacetItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RangeFacetItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RangeFacetItem} obj Optional instance to populate.
     * @return {module:model/RangeFacetItem} The populated <code>RangeFacetItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RangeFacetItem();

            if (data.hasOwnProperty('after')) {
                obj['after'] = ApiClient.convertToType(data['after'], 'Number');
            }
            if (data.hasOwnProperty('before')) {
                obj['before'] = ApiClient.convertToType(data['before'], 'Number');
            }
            if (data.hasOwnProperty('between')) {
                obj['between'] = ApiClient.convertToType(data['between'], 'Number');
            }
            if (data.hasOwnProperty('counts')) {
                obj['counts'] = ApiClient.convertToType(data['counts'], [RangeFacetItemCountsInner]);
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Number');
            }
            if (data.hasOwnProperty('gap')) {
                obj['gap'] = ApiClient.convertToType(data['gap'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RangeFacetItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RangeFacetItem</code>.
     */
    static validateJSON(data) {
        if (data['counts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['counts'])) {
                throw new Error("Expected the field `counts` to be an array in the JSON data but got " + data['counts']);
            }
            // validate the optional field `counts` (array)
            for (const item of data['counts']) {
                RangeFacetItemCountsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Number of listings that have field value after range end
 * @member {Number} after
 */
RangeFacetItem.prototype['after'] = undefined;

/**
 * Number of listings that have field value before range start
 * @member {Number} before
 */
RangeFacetItem.prototype['before'] = undefined;

/**
 * Number of listings that have field value between range start and range end
 * @member {Number} between
 */
RangeFacetItem.prototype['between'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItemCountsInner>} counts
 */
RangeFacetItem.prototype['counts'] = undefined;

/**
 * The end of range
 * @member {Number} end
 */
RangeFacetItem.prototype['end'] = undefined;

/**
 * The range gap applied for range faceting
 * @member {Number} gap
 */
RangeFacetItem.prototype['gap'] = undefined;

/**
 * The start of range
 * @member {Number} start
 */
RangeFacetItem.prototype['start'] = undefined;






export default RangeFacetItem;

