/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SalesStats from './SalesStats';

/**
 * The Sales model module.
 * @module model/Sales
 * @version 2.01
 */
class Sales {
    /**
     * Constructs a new <code>Sales</code>.
     * Sales count query response
     * @alias module:model/Sales
     */
    constructor() { 
        
        Sales.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Sales</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sales} obj Optional instance to populate.
     * @return {module:model/Sales} The populated <code>Sales</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sales();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('counts')) {
                obj['counts'] = ApiClient.convertToType(data['counts'], 'Number');
            }
            if (data.hasOwnProperty('cpo')) {
                obj['cpo'] = ApiClient.convertToType(data['cpo'], 'Number');
            }
            if (data.hasOwnProperty('dom_stats')) {
                obj['dom_stats'] = SalesStats.constructFromObject(data['dom_stats']);
            }
            if (data.hasOwnProperty('inventory_type')) {
                obj['inventory_type'] = ApiClient.convertToType(data['inventory_type'], 'String');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('miles_stats')) {
                obj['miles_stats'] = SalesStats.constructFromObject(data['miles_stats']);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('non-cpo')) {
                obj['non-cpo'] = ApiClient.convertToType(data['non-cpo'], 'Number');
            }
            if (data.hasOwnProperty('price_stats')) {
                obj['price_stats'] = SalesStats.constructFromObject(data['price_stats']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('taxonomy_vin')) {
                obj['taxonomy_vin'] = ApiClient.convertToType(data['taxonomy_vin'], 'String');
            }
            if (data.hasOwnProperty('trim')) {
                obj['trim'] = ApiClient.convertToType(data['trim'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sales</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sales</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // validate the optional field `dom_stats`
        if (data['dom_stats']) { // data not null
          SalesStats.validateJSON(data['dom_stats']);
        }
        // ensure the json data is a string
        if (data['inventory_type'] && !(typeof data['inventory_type'] === 'string' || data['inventory_type'] instanceof String)) {
            throw new Error("Expected the field `inventory_type` to be a primitive type in the JSON string but got " + data['inventory_type']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // validate the optional field `miles_stats`
        if (data['miles_stats']) { // data not null
          SalesStats.validateJSON(data['miles_stats']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // validate the optional field `price_stats`
        if (data['price_stats']) { // data not null
          SalesStats.validateJSON(data['price_stats']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['taxonomy_vin'] && !(typeof data['taxonomy_vin'] === 'string' || data['taxonomy_vin'] instanceof String)) {
            throw new Error("Expected the field `taxonomy_vin` to be a primitive type in the JSON string but got " + data['taxonomy_vin']);
        }
        // ensure the json data is a string
        if (data['trim'] && !(typeof data['trim'] === 'string' || data['trim'] instanceof String)) {
            throw new Error("Expected the field `trim` to be a primitive type in the JSON string but got " + data['trim']);
        }
        // ensure the json data is a string
        if (data['year'] && !(typeof data['year'] === 'string' || data['year'] instanceof String)) {
            throw new Error("Expected the field `year` to be a primitive type in the JSON string but got " + data['year']);
        }

        return true;
    }


}



/**
 * City
 * @member {String} city
 */
Sales.prototype['city'] = undefined;

/**
 * Sales count
 * @member {Number} counts
 */
Sales.prototype['counts'] = undefined;

/**
 * cpo sales count
 * @member {Number} cpo
 */
Sales.prototype['cpo'] = undefined;

/**
 * @member {module:model/SalesStats} dom_stats
 */
Sales.prototype['dom_stats'] = undefined;

/**
 * inventory_type
 * @member {String} inventory_type
 */
Sales.prototype['inventory_type'] = undefined;

/**
 * Make
 * @member {String} make
 */
Sales.prototype['make'] = undefined;

/**
 * @member {module:model/SalesStats} miles_stats
 */
Sales.prototype['miles_stats'] = undefined;

/**
 * model
 * @member {String} model
 */
Sales.prototype['model'] = undefined;

/**
 * Non-cpo sales count
 * @member {Number} non-cpo
 */
Sales.prototype['non-cpo'] = undefined;

/**
 * @member {module:model/SalesStats} price_stats
 */
Sales.prototype['price_stats'] = undefined;

/**
 * State
 * @member {String} state
 */
Sales.prototype['state'] = undefined;

/**
 * taxonomy_vin
 * @member {String} taxonomy_vin
 */
Sales.prototype['taxonomy_vin'] = undefined;

/**
 * trim
 * @member {String} trim
 */
Sales.prototype['trim'] = undefined;

/**
 * year
 * @member {String} year
 */
Sales.prototype['year'] = undefined;






export default Sales;

