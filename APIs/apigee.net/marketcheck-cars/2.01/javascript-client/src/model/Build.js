/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Build model module.
 * @module model/Build
 * @version 2.01
 */
class Build {
    /**
     * Constructs a new <code>Build</code>.
     * Describes the Car specification
     * @alias module:model/Build
     */
    constructor() { 
        
        Build.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Build</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Build} obj Optional instance to populate.
     * @return {module:model/Build} The populated <code>Build</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Build();

            if (data.hasOwnProperty('antibrake_sys')) {
                obj['antibrake_sys'] = ApiClient.convertToType(data['antibrake_sys'], 'String');
            }
            if (data.hasOwnProperty('body_subtype')) {
                obj['body_subtype'] = ApiClient.convertToType(data['body_subtype'], 'String');
            }
            if (data.hasOwnProperty('body_type')) {
                obj['body_type'] = ApiClient.convertToType(data['body_type'], 'String');
            }
            if (data.hasOwnProperty('city_miles')) {
                obj['city_miles'] = ApiClient.convertToType(data['city_miles'], 'String');
            }
            if (data.hasOwnProperty('city_mpg')) {
                obj['city_mpg'] = ApiClient.convertToType(data['city_mpg'], 'Number');
            }
            if (data.hasOwnProperty('cylinders')) {
                obj['cylinders'] = ApiClient.convertToType(data['cylinders'], 'Number');
            }
            if (data.hasOwnProperty('doors')) {
                obj['doors'] = ApiClient.convertToType(data['doors'], 'Number');
            }
            if (data.hasOwnProperty('drivetrain')) {
                obj['drivetrain'] = ApiClient.convertToType(data['drivetrain'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('engine_aspiration')) {
                obj['engine_aspiration'] = ApiClient.convertToType(data['engine_aspiration'], 'String');
            }
            if (data.hasOwnProperty('engine_block')) {
                obj['engine_block'] = ApiClient.convertToType(data['engine_block'], 'String');
            }
            if (data.hasOwnProperty('engine_measure')) {
                obj['engine_measure'] = ApiClient.convertToType(data['engine_measure'], 'String');
            }
            if (data.hasOwnProperty('engine_size')) {
                obj['engine_size'] = ApiClient.convertToType(data['engine_size'], 'Number');
            }
            if (data.hasOwnProperty('fuel_type')) {
                obj['fuel_type'] = ApiClient.convertToType(data['fuel_type'], 'String');
            }
            if (data.hasOwnProperty('highway_miles')) {
                obj['highway_miles'] = ApiClient.convertToType(data['highway_miles'], 'String');
            }
            if (data.hasOwnProperty('highway_mpg')) {
                obj['highway_mpg'] = ApiClient.convertToType(data['highway_mpg'], 'Number');
            }
            if (data.hasOwnProperty('made_in')) {
                obj['made_in'] = ApiClient.convertToType(data['made_in'], 'String');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('opt_seating')) {
                obj['opt_seating'] = ApiClient.convertToType(data['opt_seating'], 'String');
            }
            if (data.hasOwnProperty('overall_height')) {
                obj['overall_height'] = ApiClient.convertToType(data['overall_height'], 'String');
            }
            if (data.hasOwnProperty('overall_length')) {
                obj['overall_length'] = ApiClient.convertToType(data['overall_length'], 'String');
            }
            if (data.hasOwnProperty('overall_width')) {
                obj['overall_width'] = ApiClient.convertToType(data['overall_width'], 'String');
            }
            if (data.hasOwnProperty('powertrain_type')) {
                obj['powertrain_type'] = ApiClient.convertToType(data['powertrain_type'], 'String');
            }
            if (data.hasOwnProperty('short_trim')) {
                obj['short_trim'] = ApiClient.convertToType(data['short_trim'], 'String');
            }
            if (data.hasOwnProperty('std_seating')) {
                obj['std_seating'] = ApiClient.convertToType(data['std_seating'], 'String');
            }
            if (data.hasOwnProperty('steering_type')) {
                obj['steering_type'] = ApiClient.convertToType(data['steering_type'], 'String');
            }
            if (data.hasOwnProperty('tank_size')) {
                obj['tank_size'] = ApiClient.convertToType(data['tank_size'], 'String');
            }
            if (data.hasOwnProperty('transmission')) {
                obj['transmission'] = ApiClient.convertToType(data['transmission'], 'String');
            }
            if (data.hasOwnProperty('trim')) {
                obj['trim'] = ApiClient.convertToType(data['trim'], 'String');
            }
            if (data.hasOwnProperty('trim_r')) {
                obj['trim_r'] = ApiClient.convertToType(data['trim_r'], 'String');
            }
            if (data.hasOwnProperty('vehicle_type')) {
                obj['vehicle_type'] = ApiClient.convertToType(data['vehicle_type'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Build</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Build</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['antibrake_sys'] && !(typeof data['antibrake_sys'] === 'string' || data['antibrake_sys'] instanceof String)) {
            throw new Error("Expected the field `antibrake_sys` to be a primitive type in the JSON string but got " + data['antibrake_sys']);
        }
        // ensure the json data is a string
        if (data['body_subtype'] && !(typeof data['body_subtype'] === 'string' || data['body_subtype'] instanceof String)) {
            throw new Error("Expected the field `body_subtype` to be a primitive type in the JSON string but got " + data['body_subtype']);
        }
        // ensure the json data is a string
        if (data['body_type'] && !(typeof data['body_type'] === 'string' || data['body_type'] instanceof String)) {
            throw new Error("Expected the field `body_type` to be a primitive type in the JSON string but got " + data['body_type']);
        }
        // ensure the json data is a string
        if (data['city_miles'] && !(typeof data['city_miles'] === 'string' || data['city_miles'] instanceof String)) {
            throw new Error("Expected the field `city_miles` to be a primitive type in the JSON string but got " + data['city_miles']);
        }
        // ensure the json data is a string
        if (data['drivetrain'] && !(typeof data['drivetrain'] === 'string' || data['drivetrain'] instanceof String)) {
            throw new Error("Expected the field `drivetrain` to be a primitive type in the JSON string but got " + data['drivetrain']);
        }
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['engine_aspiration'] && !(typeof data['engine_aspiration'] === 'string' || data['engine_aspiration'] instanceof String)) {
            throw new Error("Expected the field `engine_aspiration` to be a primitive type in the JSON string but got " + data['engine_aspiration']);
        }
        // ensure the json data is a string
        if (data['engine_block'] && !(typeof data['engine_block'] === 'string' || data['engine_block'] instanceof String)) {
            throw new Error("Expected the field `engine_block` to be a primitive type in the JSON string but got " + data['engine_block']);
        }
        // ensure the json data is a string
        if (data['engine_measure'] && !(typeof data['engine_measure'] === 'string' || data['engine_measure'] instanceof String)) {
            throw new Error("Expected the field `engine_measure` to be a primitive type in the JSON string but got " + data['engine_measure']);
        }
        // ensure the json data is a string
        if (data['fuel_type'] && !(typeof data['fuel_type'] === 'string' || data['fuel_type'] instanceof String)) {
            throw new Error("Expected the field `fuel_type` to be a primitive type in the JSON string but got " + data['fuel_type']);
        }
        // ensure the json data is a string
        if (data['highway_miles'] && !(typeof data['highway_miles'] === 'string' || data['highway_miles'] instanceof String)) {
            throw new Error("Expected the field `highway_miles` to be a primitive type in the JSON string but got " + data['highway_miles']);
        }
        // ensure the json data is a string
        if (data['made_in'] && !(typeof data['made_in'] === 'string' || data['made_in'] instanceof String)) {
            throw new Error("Expected the field `made_in` to be a primitive type in the JSON string but got " + data['made_in']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['opt_seating'] && !(typeof data['opt_seating'] === 'string' || data['opt_seating'] instanceof String)) {
            throw new Error("Expected the field `opt_seating` to be a primitive type in the JSON string but got " + data['opt_seating']);
        }
        // ensure the json data is a string
        if (data['overall_height'] && !(typeof data['overall_height'] === 'string' || data['overall_height'] instanceof String)) {
            throw new Error("Expected the field `overall_height` to be a primitive type in the JSON string but got " + data['overall_height']);
        }
        // ensure the json data is a string
        if (data['overall_length'] && !(typeof data['overall_length'] === 'string' || data['overall_length'] instanceof String)) {
            throw new Error("Expected the field `overall_length` to be a primitive type in the JSON string but got " + data['overall_length']);
        }
        // ensure the json data is a string
        if (data['overall_width'] && !(typeof data['overall_width'] === 'string' || data['overall_width'] instanceof String)) {
            throw new Error("Expected the field `overall_width` to be a primitive type in the JSON string but got " + data['overall_width']);
        }
        // ensure the json data is a string
        if (data['powertrain_type'] && !(typeof data['powertrain_type'] === 'string' || data['powertrain_type'] instanceof String)) {
            throw new Error("Expected the field `powertrain_type` to be a primitive type in the JSON string but got " + data['powertrain_type']);
        }
        // ensure the json data is a string
        if (data['short_trim'] && !(typeof data['short_trim'] === 'string' || data['short_trim'] instanceof String)) {
            throw new Error("Expected the field `short_trim` to be a primitive type in the JSON string but got " + data['short_trim']);
        }
        // ensure the json data is a string
        if (data['std_seating'] && !(typeof data['std_seating'] === 'string' || data['std_seating'] instanceof String)) {
            throw new Error("Expected the field `std_seating` to be a primitive type in the JSON string but got " + data['std_seating']);
        }
        // ensure the json data is a string
        if (data['steering_type'] && !(typeof data['steering_type'] === 'string' || data['steering_type'] instanceof String)) {
            throw new Error("Expected the field `steering_type` to be a primitive type in the JSON string but got " + data['steering_type']);
        }
        // ensure the json data is a string
        if (data['tank_size'] && !(typeof data['tank_size'] === 'string' || data['tank_size'] instanceof String)) {
            throw new Error("Expected the field `tank_size` to be a primitive type in the JSON string but got " + data['tank_size']);
        }
        // ensure the json data is a string
        if (data['transmission'] && !(typeof data['transmission'] === 'string' || data['transmission'] instanceof String)) {
            throw new Error("Expected the field `transmission` to be a primitive type in the JSON string but got " + data['transmission']);
        }
        // ensure the json data is a string
        if (data['trim'] && !(typeof data['trim'] === 'string' || data['trim'] instanceof String)) {
            throw new Error("Expected the field `trim` to be a primitive type in the JSON string but got " + data['trim']);
        }
        // ensure the json data is a string
        if (data['trim_r'] && !(typeof data['trim_r'] === 'string' || data['trim_r'] instanceof String)) {
            throw new Error("Expected the field `trim_r` to be a primitive type in the JSON string but got " + data['trim_r']);
        }
        // ensure the json data is a string
        if (data['vehicle_type'] && !(typeof data['vehicle_type'] === 'string' || data['vehicle_type'] instanceof String)) {
            throw new Error("Expected the field `vehicle_type` to be a primitive type in the JSON string but got " + data['vehicle_type']);
        }

        return true;
    }


}



/**
 * Antibrake system of the car
 * @member {String} antibrake_sys
 */
Build.prototype['antibrake_sys'] = undefined;

/**
 * Body subtype of the car
 * @member {String} body_subtype
 */
Build.prototype['body_subtype'] = undefined;

/**
 * Body type of the car
 * @member {String} body_type
 */
Build.prototype['body_type'] = undefined;

/**
 * City miles of the car
 * @member {String} city_miles
 */
Build.prototype['city_miles'] = undefined;

/**
 * City Mileage in MPG
 * @member {Number} city_mpg
 */
Build.prototype['city_mpg'] = undefined;

/**
 * No of cylinders of the car
 * @member {Number} cylinders
 */
Build.prototype['cylinders'] = undefined;

/**
 * No of doors of the car
 * @member {Number} doors
 */
Build.prototype['doors'] = undefined;

/**
 * Drivetrain of the car
 * @member {String} drivetrain
 */
Build.prototype['drivetrain'] = undefined;

/**
 * Engine of the car
 * @member {String} engine
 */
Build.prototype['engine'] = undefined;

/**
 * Engine aspiration of the car
 * @member {String} engine_aspiration
 */
Build.prototype['engine_aspiration'] = undefined;

/**
 * Engine block of the car
 * @member {String} engine_block
 */
Build.prototype['engine_block'] = undefined;

/**
 * Engine block of the car
 * @member {String} engine_measure
 */
Build.prototype['engine_measure'] = undefined;

/**
 * Engine size of the car
 * @member {Number} engine_size
 */
Build.prototype['engine_size'] = undefined;

/**
 * Fuel type of the car
 * @member {String} fuel_type
 */
Build.prototype['fuel_type'] = undefined;

/**
 * Highway miles of the car
 * @member {String} highway_miles
 */
Build.prototype['highway_miles'] = undefined;

/**
 * Highway Mileage in MPG
 * @member {Number} highway_mpg
 */
Build.prototype['highway_mpg'] = undefined;

/**
 * Made in of the car
 * @member {String} made_in
 */
Build.prototype['made_in'] = undefined;

/**
 * Car Make
 * @member {String} make
 */
Build.prototype['make'] = undefined;

/**
 * Car model
 * @member {String} model
 */
Build.prototype['model'] = undefined;

/**
 * opt seating of the car
 * @member {String} opt_seating
 */
Build.prototype['opt_seating'] = undefined;

/**
 * Overall height of the car
 * @member {String} overall_height
 */
Build.prototype['overall_height'] = undefined;

/**
 * Overall length of the car
 * @member {String} overall_length
 */
Build.prototype['overall_length'] = undefined;

/**
 * Overall width of the car
 * @member {String} overall_width
 */
Build.prototype['overall_width'] = undefined;

/**
 * powertrain_type of the car
 * @member {String} powertrain_type
 */
Build.prototype['powertrain_type'] = undefined;

/**
 * Short trim of the car
 * @member {String} short_trim
 */
Build.prototype['short_trim'] = undefined;

/**
 * Std seating of the car
 * @member {String} std_seating
 */
Build.prototype['std_seating'] = undefined;

/**
 * Steering type of the car
 * @member {String} steering_type
 */
Build.prototype['steering_type'] = undefined;

/**
 * Tank size of the car
 * @member {String} tank_size
 */
Build.prototype['tank_size'] = undefined;

/**
 * Transmission of the car
 * @member {String} transmission
 */
Build.prototype['transmission'] = undefined;

/**
 * Trim of the car
 * @member {String} trim
 */
Build.prototype['trim'] = undefined;

/**
 * Trim_r of the car
 * @member {String} trim_r
 */
Build.prototype['trim_r'] = undefined;

/**
 * Vehicle type of the car
 * @member {String} vehicle_type
 */
Build.prototype['vehicle_type'] = undefined;

/**
 * Year of the Car
 * @member {Number} year
 */
Build.prototype['year'] = undefined;






export default Build;

