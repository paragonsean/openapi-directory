/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FacetItem from './FacetItem';

/**
 * The UKRVSearchFacets model module.
 * @module model/UKRVSearchFacets
 * @version 2.01
 */
class UKRVSearchFacets {
    /**
     * Constructs a new <code>UKRVSearchFacets</code>.
     * @alias module:model/UKRVSearchFacets
     */
    constructor() { 
        
        UKRVSearchFacets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UKRVSearchFacets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UKRVSearchFacets} obj Optional instance to populate.
     * @return {module:model/UKRVSearchFacets} The populated <code>UKRVSearchFacets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UKRVSearchFacets();

            if (data.hasOwnProperty('berths')) {
                obj['berths'] = ApiClient.convertToType(data['berths'], [FacetItem]);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], [FacetItem]);
            }
            if (data.hasOwnProperty('chassis')) {
                obj['chassis'] = ApiClient.convertToType(data['chassis'], [FacetItem]);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], [FacetItem]);
            }
            if (data.hasOwnProperty('dealer_id')) {
                obj['dealer_id'] = ApiClient.convertToType(data['dealer_id'], [FacetItem]);
            }
            if (data.hasOwnProperty('drive_type')) {
                obj['drive_type'] = ApiClient.convertToType(data['drive_type'], [FacetItem]);
            }
            if (data.hasOwnProperty('drivetrain')) {
                obj['drivetrain'] = ApiClient.convertToType(data['drivetrain'], [FacetItem]);
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], [FacetItem]);
            }
            if (data.hasOwnProperty('exterior_color')) {
                obj['exterior_color'] = ApiClient.convertToType(data['exterior_color'], [FacetItem]);
            }
            if (data.hasOwnProperty('fuel_type')) {
                obj['fuel_type'] = ApiClient.convertToType(data['fuel_type'], [FacetItem]);
            }
            if (data.hasOwnProperty('interior_color')) {
                obj['interior_color'] = ApiClient.convertToType(data['interior_color'], [FacetItem]);
            }
            if (data.hasOwnProperty('inventory_type')) {
                obj['inventory_type'] = ApiClient.convertToType(data['inventory_type'], [FacetItem]);
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], [FacetItem]);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], [FacetItem]);
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], [FacetItem]);
            }
            if (data.hasOwnProperty('seller_name')) {
                obj['seller_name'] = ApiClient.convertToType(data['seller_name'], [FacetItem]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], [FacetItem]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], [FacetItem]);
            }
            if (data.hasOwnProperty('steering')) {
                obj['steering'] = ApiClient.convertToType(data['steering'], [FacetItem]);
            }
            if (data.hasOwnProperty('sub_category')) {
                obj['sub_category'] = ApiClient.convertToType(data['sub_category'], [FacetItem]);
            }
            if (data.hasOwnProperty('transmission')) {
                obj['transmission'] = ApiClient.convertToType(data['transmission'], [FacetItem]);
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], [FacetItem]);
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], [FacetItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UKRVSearchFacets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UKRVSearchFacets</code>.
     */
    static validateJSON(data) {
        if (data['berths']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['berths'])) {
                throw new Error("Expected the field `berths` to be an array in the JSON data but got " + data['berths']);
            }
            // validate the optional field `berths` (array)
            for (const item of data['berths']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['category']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['category'])) {
                throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
            }
            // validate the optional field `category` (array)
            for (const item of data['category']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['chassis']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['chassis'])) {
                throw new Error("Expected the field `chassis` to be an array in the JSON data but got " + data['chassis']);
            }
            // validate the optional field `chassis` (array)
            for (const item of data['chassis']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['city']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['city'])) {
                throw new Error("Expected the field `city` to be an array in the JSON data but got " + data['city']);
            }
            // validate the optional field `city` (array)
            for (const item of data['city']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['dealer_id']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dealer_id'])) {
                throw new Error("Expected the field `dealer_id` to be an array in the JSON data but got " + data['dealer_id']);
            }
            // validate the optional field `dealer_id` (array)
            for (const item of data['dealer_id']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['drive_type']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['drive_type'])) {
                throw new Error("Expected the field `drive_type` to be an array in the JSON data but got " + data['drive_type']);
            }
            // validate the optional field `drive_type` (array)
            for (const item of data['drive_type']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['drivetrain']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['drivetrain'])) {
                throw new Error("Expected the field `drivetrain` to be an array in the JSON data but got " + data['drivetrain']);
            }
            // validate the optional field `drivetrain` (array)
            for (const item of data['drivetrain']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['engine']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['engine'])) {
                throw new Error("Expected the field `engine` to be an array in the JSON data but got " + data['engine']);
            }
            // validate the optional field `engine` (array)
            for (const item of data['engine']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['exterior_color']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exterior_color'])) {
                throw new Error("Expected the field `exterior_color` to be an array in the JSON data but got " + data['exterior_color']);
            }
            // validate the optional field `exterior_color` (array)
            for (const item of data['exterior_color']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['fuel_type']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fuel_type'])) {
                throw new Error("Expected the field `fuel_type` to be an array in the JSON data but got " + data['fuel_type']);
            }
            // validate the optional field `fuel_type` (array)
            for (const item of data['fuel_type']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['interior_color']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['interior_color'])) {
                throw new Error("Expected the field `interior_color` to be an array in the JSON data but got " + data['interior_color']);
            }
            // validate the optional field `interior_color` (array)
            for (const item of data['interior_color']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['inventory_type']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inventory_type'])) {
                throw new Error("Expected the field `inventory_type` to be an array in the JSON data but got " + data['inventory_type']);
            }
            // validate the optional field `inventory_type` (array)
            for (const item of data['inventory_type']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['make']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['make'])) {
                throw new Error("Expected the field `make` to be an array in the JSON data but got " + data['make']);
            }
            // validate the optional field `make` (array)
            for (const item of data['make']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['model']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['model'])) {
                throw new Error("Expected the field `model` to be an array in the JSON data but got " + data['model']);
            }
            // validate the optional field `model` (array)
            for (const item of data['model']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['postal_code']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['postal_code'])) {
                throw new Error("Expected the field `postal_code` to be an array in the JSON data but got " + data['postal_code']);
            }
            // validate the optional field `postal_code` (array)
            for (const item of data['postal_code']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['seller_name']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seller_name'])) {
                throw new Error("Expected the field `seller_name` to be an array in the JSON data but got " + data['seller_name']);
            }
            // validate the optional field `seller_name` (array)
            for (const item of data['seller_name']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['source']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['source'])) {
                throw new Error("Expected the field `source` to be an array in the JSON data but got " + data['source']);
            }
            // validate the optional field `source` (array)
            for (const item of data['source']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['state']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['state'])) {
                throw new Error("Expected the field `state` to be an array in the JSON data but got " + data['state']);
            }
            // validate the optional field `state` (array)
            for (const item of data['state']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['steering']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['steering'])) {
                throw new Error("Expected the field `steering` to be an array in the JSON data but got " + data['steering']);
            }
            // validate the optional field `steering` (array)
            for (const item of data['steering']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['sub_category']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sub_category'])) {
                throw new Error("Expected the field `sub_category` to be an array in the JSON data but got " + data['sub_category']);
            }
            // validate the optional field `sub_category` (array)
            for (const item of data['sub_category']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['transmission']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transmission'])) {
                throw new Error("Expected the field `transmission` to be an array in the JSON data but got " + data['transmission']);
            }
            // validate the optional field `transmission` (array)
            for (const item of data['transmission']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['year']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['year'])) {
                throw new Error("Expected the field `year` to be an array in the JSON data but got " + data['year']);
            }
            // validate the optional field `year` (array)
            for (const item of data['year']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['zip']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['zip'])) {
                throw new Error("Expected the field `zip` to be an array in the JSON data but got " + data['zip']);
            }
            // validate the optional field `zip` (array)
            for (const item of data['zip']) {
                FacetItem.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/FacetItem>} berths
 */
UKRVSearchFacets.prototype['berths'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} category
 */
UKRVSearchFacets.prototype['category'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} chassis
 */
UKRVSearchFacets.prototype['chassis'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} city
 */
UKRVSearchFacets.prototype['city'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} dealer_id
 */
UKRVSearchFacets.prototype['dealer_id'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} drive_type
 */
UKRVSearchFacets.prototype['drive_type'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} drivetrain
 */
UKRVSearchFacets.prototype['drivetrain'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} engine
 */
UKRVSearchFacets.prototype['engine'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} exterior_color
 */
UKRVSearchFacets.prototype['exterior_color'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} fuel_type
 */
UKRVSearchFacets.prototype['fuel_type'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} interior_color
 */
UKRVSearchFacets.prototype['interior_color'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} inventory_type
 */
UKRVSearchFacets.prototype['inventory_type'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} make
 */
UKRVSearchFacets.prototype['make'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} model
 */
UKRVSearchFacets.prototype['model'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} postal_code
 */
UKRVSearchFacets.prototype['postal_code'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} seller_name
 */
UKRVSearchFacets.prototype['seller_name'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} source
 */
UKRVSearchFacets.prototype['source'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} state
 */
UKRVSearchFacets.prototype['state'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} steering
 */
UKRVSearchFacets.prototype['steering'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} sub_category
 */
UKRVSearchFacets.prototype['sub_category'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} transmission
 */
UKRVSearchFacets.prototype['transmission'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} year
 */
UKRVSearchFacets.prototype['year'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} zip
 */
UKRVSearchFacets.prototype['zip'] = undefined;






export default UKRVSearchFacets;

