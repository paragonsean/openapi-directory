/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RVBuild model module.
 * @module model/RVBuild
 * @version 2.01
 */
class RVBuild {
    /**
     * Constructs a new <code>RVBuild</code>.
     * Describes the RV specification
     * @alias module:model/RVBuild
     */
    constructor() { 
        
        RVBuild.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RVBuild</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RVBuild} obj Optional instance to populate.
     * @return {module:model/RVBuild} The populated <code>RVBuild</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RVBuild();

            if (data.hasOwnProperty('area')) {
                obj['area'] = ApiClient.convertToType(data['area'], 'String');
            }
            if (data.hasOwnProperty('class')) {
                obj['class'] = ApiClient.convertToType(data['class'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('fuel_type')) {
                obj['fuel_type'] = ApiClient.convertToType(data['fuel_type'], 'String');
            }
            if (data.hasOwnProperty('gvwr')) {
                obj['gvwr'] = ApiClient.convertToType(data['gvwr'], 'String');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'String');
            }
            if (data.hasOwnProperty('made_in')) {
                obj['made_in'] = ApiClient.convertToType(data['made_in'], 'String');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('sleeps')) {
                obj['sleeps'] = ApiClient.convertToType(data['sleeps'], 'String');
            }
            if (data.hasOwnProperty('slideouts')) {
                obj['slideouts'] = ApiClient.convertToType(data['slideouts'], 'String');
            }
            if (data.hasOwnProperty('transmission')) {
                obj['transmission'] = ApiClient.convertToType(data['transmission'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RVBuild</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RVBuild</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['area'] && !(typeof data['area'] === 'string' || data['area'] instanceof String)) {
            throw new Error("Expected the field `area` to be a primitive type in the JSON string but got " + data['area']);
        }
        // ensure the json data is a string
        if (data['class'] && !(typeof data['class'] === 'string' || data['class'] instanceof String)) {
            throw new Error("Expected the field `class` to be a primitive type in the JSON string but got " + data['class']);
        }
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['fuel_type'] && !(typeof data['fuel_type'] === 'string' || data['fuel_type'] instanceof String)) {
            throw new Error("Expected the field `fuel_type` to be a primitive type in the JSON string but got " + data['fuel_type']);
        }
        // ensure the json data is a string
        if (data['gvwr'] && !(typeof data['gvwr'] === 'string' || data['gvwr'] instanceof String)) {
            throw new Error("Expected the field `gvwr` to be a primitive type in the JSON string but got " + data['gvwr']);
        }
        // ensure the json data is a string
        if (data['length'] && !(typeof data['length'] === 'string' || data['length'] instanceof String)) {
            throw new Error("Expected the field `length` to be a primitive type in the JSON string but got " + data['length']);
        }
        // ensure the json data is a string
        if (data['made_in'] && !(typeof data['made_in'] === 'string' || data['made_in'] instanceof String)) {
            throw new Error("Expected the field `made_in` to be a primitive type in the JSON string but got " + data['made_in']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['sleeps'] && !(typeof data['sleeps'] === 'string' || data['sleeps'] instanceof String)) {
            throw new Error("Expected the field `sleeps` to be a primitive type in the JSON string but got " + data['sleeps']);
        }
        // ensure the json data is a string
        if (data['slideouts'] && !(typeof data['slideouts'] === 'string' || data['slideouts'] instanceof String)) {
            throw new Error("Expected the field `slideouts` to be a primitive type in the JSON string but got " + data['slideouts']);
        }
        // ensure the json data is a string
        if (data['transmission'] && !(typeof data['transmission'] === 'string' || data['transmission'] instanceof String)) {
            throw new Error("Expected the field `transmission` to be a primitive type in the JSON string but got " + data['transmission']);
        }

        return true;
    }


}



/**
 * Area of the RV
 * @member {String} area
 */
RVBuild.prototype['area'] = undefined;

/**
 * Class of the RV
 * @member {String} class
 */
RVBuild.prototype['class'] = undefined;

/**
 * Engine of the RV
 * @member {String} engine
 */
RVBuild.prototype['engine'] = undefined;

/**
 * Fuel type of the RV
 * @member {String} fuel_type
 */
RVBuild.prototype['fuel_type'] = undefined;

/**
 * Gross Vehicle Weight Ratio of RV
 * @member {String} gvwr
 */
RVBuild.prototype['gvwr'] = undefined;

/**
 * Length of the RV
 * @member {String} length
 */
RVBuild.prototype['length'] = undefined;

/**
 * Made in of the RV
 * @member {String} made_in
 */
RVBuild.prototype['made_in'] = undefined;

/**
 * RV Make
 * @member {String} make
 */
RVBuild.prototype['make'] = undefined;

/**
 * RV model
 * @member {String} model
 */
RVBuild.prototype['model'] = undefined;

/**
 * Sleeps of the RV
 * @member {String} sleeps
 */
RVBuild.prototype['sleeps'] = undefined;

/**
 * Slideouts of the RV
 * @member {String} slideouts
 */
RVBuild.prototype['slideouts'] = undefined;

/**
 * Transmission of the RV
 * @member {String} transmission
 */
RVBuild.prototype['transmission'] = undefined;

/**
 * Year of the RV
 * @member {Number} year
 */
RVBuild.prototype['year'] = undefined;






export default RVBuild;

