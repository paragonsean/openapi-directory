/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlotPoint model module.
 * @module model/PlotPoint
 * @version 2.01
 */
class PlotPoint {
    /**
     * Constructs a new <code>PlotPoint</code>.
     * @alias module:model/PlotPoint
     */
    constructor() { 
        
        PlotPoint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlotPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlotPoint} obj Optional instance to populate.
     * @return {module:model/PlotPoint} The populated <code>PlotPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlotPoint();

            if (data.hasOwnProperty('dom')) {
                obj['dom'] = ApiClient.convertToType(data['dom'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('miles')) {
                obj['miles'] = ApiClient.convertToType(data['miles'], 'Number');
            }
            if (data.hasOwnProperty('msrp')) {
                obj['msrp'] = ApiClient.convertToType(data['msrp'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('seller_name')) {
                obj['seller_name'] = ApiClient.convertToType(data['seller_name'], 'String');
            }
            if (data.hasOwnProperty('vin')) {
                obj['vin'] = ApiClient.convertToType(data['vin'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlotPoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlotPoint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['seller_name'] && !(typeof data['seller_name'] === 'string' || data['seller_name'] instanceof String)) {
            throw new Error("Expected the field `seller_name` to be a primitive type in the JSON string but got " + data['seller_name']);
        }
        // ensure the json data is a string
        if (data['vin'] && !(typeof data['vin'] === 'string' || data['vin'] instanceof String)) {
            throw new Error("Expected the field `vin` to be a primitive type in the JSON string but got " + data['vin']);
        }

        return true;
    }


}



/**
 * DOM
 * @member {Number} dom
 */
PlotPoint.prototype['dom'] = undefined;

/**
 * Listing id
 * @member {String} id
 */
PlotPoint.prototype['id'] = undefined;

/**
 * Miles
 * @member {Number} miles
 */
PlotPoint.prototype['miles'] = undefined;

/**
 * Msrp
 * @member {Number} msrp
 */
PlotPoint.prototype['msrp'] = undefined;

/**
 * Price
 * @member {Number} price
 */
PlotPoint.prototype['price'] = undefined;

/**
 * Seller name
 * @member {String} seller_name
 */
PlotPoint.prototype['seller_name'] = undefined;

/**
 * Vin
 * @member {String} vin
 */
PlotPoint.prototype['vin'] = undefined;






export default PlotPoint;

