/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Build from './Build';
import CarLocation from './CarLocation';
import ListingFinance from './ListingFinance';
import ListingLease from './ListingLease';
import ListingNestMedia from './ListingNestMedia';
import NestDealer from './NestDealer';

/**
 * The UKBaseListing model module.
 * @module model/UKBaseListing
 * @version 2.01
 */
class UKBaseListing {
    /**
     * Constructs a new <code>UKBaseListing</code>.
     * Minimal set of attributes describing a listing
     * @alias module:model/UKBaseListing
     */
    constructor() { 
        
        UKBaseListing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UKBaseListing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UKBaseListing} obj Optional instance to populate.
     * @return {module:model/UKBaseListing} The populated <code>UKBaseListing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UKBaseListing();

            if (data.hasOwnProperty('base_ext_color')) {
                obj['base_ext_color'] = ApiClient.convertToType(data['base_ext_color'], 'String');
            }
            if (data.hasOwnProperty('base_int_color')) {
                obj['base_int_color'] = ApiClient.convertToType(data['base_int_color'], 'String');
            }
            if (data.hasOwnProperty('build')) {
                obj['build'] = Build.constructFromObject(data['build']);
            }
            if (data.hasOwnProperty('car_location')) {
                obj['car_location'] = CarLocation.constructFromObject(data['car_location']);
            }
            if (data.hasOwnProperty('carfax_1_owner')) {
                obj['carfax_1_owner'] = ApiClient.convertToType(data['carfax_1_owner'], 'Boolean');
            }
            if (data.hasOwnProperty('carfax_clean_title')) {
                obj['carfax_clean_title'] = ApiClient.convertToType(data['carfax_clean_title'], 'Boolean');
            }
            if (data.hasOwnProperty('co2_emissions')) {
                obj['co2_emissions'] = ApiClient.convertToType(data['co2_emissions'], 'String');
            }
            if (data.hasOwnProperty('data_source')) {
                obj['data_source'] = ApiClient.convertToType(data['data_source'], 'String');
            }
            if (data.hasOwnProperty('dealer')) {
                obj['dealer'] = NestDealer.constructFromObject(data['dealer']);
            }
            if (data.hasOwnProperty('dist')) {
                obj['dist'] = ApiClient.convertToType(data['dist'], 'Number');
            }
            if (data.hasOwnProperty('dom')) {
                obj['dom'] = ApiClient.convertToType(data['dom'], 'Number');
            }
            if (data.hasOwnProperty('dom_180')) {
                obj['dom_180'] = ApiClient.convertToType(data['dom_180'], 'Number');
            }
            if (data.hasOwnProperty('dom_active')) {
                obj['dom_active'] = ApiClient.convertToType(data['dom_active'], 'Number');
            }
            if (data.hasOwnProperty('exterior_color')) {
                obj['exterior_color'] = ApiClient.convertToType(data['exterior_color'], 'String');
            }
            if (data.hasOwnProperty('financing_options')) {
                obj['financing_options'] = ApiClient.convertToType(data['financing_options'], [ListingFinance]);
            }
            if (data.hasOwnProperty('first_seen_at')) {
                obj['first_seen_at'] = ApiClient.convertToType(data['first_seen_at'], 'Number');
            }
            if (data.hasOwnProperty('first_seen_at_date')) {
                obj['first_seen_at_date'] = ApiClient.convertToType(data['first_seen_at_date'], 'String');
            }
            if (data.hasOwnProperty('heading')) {
                obj['heading'] = ApiClient.convertToType(data['heading'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('in_transit')) {
                obj['in_transit'] = ApiClient.convertToType(data['in_transit'], 'Boolean');
            }
            if (data.hasOwnProperty('insurance_group')) {
                obj['insurance_group'] = ApiClient.convertToType(data['insurance_group'], 'String');
            }
            if (data.hasOwnProperty('interior_color')) {
                obj['interior_color'] = ApiClient.convertToType(data['interior_color'], 'String');
            }
            if (data.hasOwnProperty('inventory_type')) {
                obj['inventory_type'] = ApiClient.convertToType(data['inventory_type'], 'String');
            }
            if (data.hasOwnProperty('is_certified')) {
                obj['is_certified'] = ApiClient.convertToType(data['is_certified'], 'Number');
            }
            if (data.hasOwnProperty('is_translated')) {
                obj['is_translated'] = ApiClient.convertToType(data['is_translated'], 'Boolean');
            }
            if (data.hasOwnProperty('last_seen_at')) {
                obj['last_seen_at'] = ApiClient.convertToType(data['last_seen_at'], 'Number');
            }
            if (data.hasOwnProperty('last_seen_at_date')) {
                obj['last_seen_at_date'] = ApiClient.convertToType(data['last_seen_at_date'], 'String');
            }
            if (data.hasOwnProperty('leasing_options')) {
                obj['leasing_options'] = ApiClient.convertToType(data['leasing_options'], [ListingLease]);
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ListingNestMedia.constructFromObject(data['media']);
            }
            if (data.hasOwnProperty('miles')) {
                obj['miles'] = ApiClient.convertToType(data['miles'], 'Number');
            }
            if (data.hasOwnProperty('model_code')) {
                obj['model_code'] = ApiClient.convertToType(data['model_code'], 'String');
            }
            if (data.hasOwnProperty('msrp')) {
                obj['msrp'] = ApiClient.convertToType(data['msrp'], 'Number');
            }
            if (data.hasOwnProperty('num_owners')) {
                obj['num_owners'] = ApiClient.convertToType(data['num_owners'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('price_change_percent')) {
                obj['price_change_percent'] = ApiClient.convertToType(data['price_change_percent'], 'Number');
            }
            if (data.hasOwnProperty('ref_miles')) {
                obj['ref_miles'] = ApiClient.convertToType(data['ref_miles'], 'String');
            }
            if (data.hasOwnProperty('ref_miles_dt')) {
                obj['ref_miles_dt'] = ApiClient.convertToType(data['ref_miles_dt'], 'Number');
            }
            if (data.hasOwnProperty('ref_price')) {
                obj['ref_price'] = ApiClient.convertToType(data['ref_price'], 'String');
            }
            if (data.hasOwnProperty('ref_price_dt')) {
                obj['ref_price_dt'] = ApiClient.convertToType(data['ref_price_dt'], 'Number');
            }
            if (data.hasOwnProperty('scraped_at')) {
                obj['scraped_at'] = ApiClient.convertToType(data['scraped_at'], 'Number');
            }
            if (data.hasOwnProperty('scraped_at_date')) {
                obj['scraped_at_date'] = ApiClient.convertToType(data['scraped_at_date'], 'String');
            }
            if (data.hasOwnProperty('seller_type')) {
                obj['seller_type'] = ApiClient.convertToType(data['seller_type'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('stock_no')) {
                obj['stock_no'] = ApiClient.convertToType(data['stock_no'], 'String');
            }
            if (data.hasOwnProperty('title_type')) {
                obj['title_type'] = ApiClient.convertToType(data['title_type'], 'String');
            }
            if (data.hasOwnProperty('uvc_id')) {
                obj['uvc_id'] = ApiClient.convertToType(data['uvc_id'], 'String');
            }
            if (data.hasOwnProperty('vdp_url')) {
                obj['vdp_url'] = ApiClient.convertToType(data['vdp_url'], 'String');
            }
            if (data.hasOwnProperty('vehicle_registration_mark')) {
                obj['vehicle_registration_mark'] = ApiClient.convertToType(data['vehicle_registration_mark'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UKBaseListing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UKBaseListing</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['base_ext_color'] && !(typeof data['base_ext_color'] === 'string' || data['base_ext_color'] instanceof String)) {
            throw new Error("Expected the field `base_ext_color` to be a primitive type in the JSON string but got " + data['base_ext_color']);
        }
        // ensure the json data is a string
        if (data['base_int_color'] && !(typeof data['base_int_color'] === 'string' || data['base_int_color'] instanceof String)) {
            throw new Error("Expected the field `base_int_color` to be a primitive type in the JSON string but got " + data['base_int_color']);
        }
        // validate the optional field `build`
        if (data['build']) { // data not null
          Build.validateJSON(data['build']);
        }
        // validate the optional field `car_location`
        if (data['car_location']) { // data not null
          CarLocation.validateJSON(data['car_location']);
        }
        // ensure the json data is a string
        if (data['co2_emissions'] && !(typeof data['co2_emissions'] === 'string' || data['co2_emissions'] instanceof String)) {
            throw new Error("Expected the field `co2_emissions` to be a primitive type in the JSON string but got " + data['co2_emissions']);
        }
        // ensure the json data is a string
        if (data['data_source'] && !(typeof data['data_source'] === 'string' || data['data_source'] instanceof String)) {
            throw new Error("Expected the field `data_source` to be a primitive type in the JSON string but got " + data['data_source']);
        }
        // validate the optional field `dealer`
        if (data['dealer']) { // data not null
          NestDealer.validateJSON(data['dealer']);
        }
        // ensure the json data is a string
        if (data['exterior_color'] && !(typeof data['exterior_color'] === 'string' || data['exterior_color'] instanceof String)) {
            throw new Error("Expected the field `exterior_color` to be a primitive type in the JSON string but got " + data['exterior_color']);
        }
        if (data['financing_options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['financing_options'])) {
                throw new Error("Expected the field `financing_options` to be an array in the JSON data but got " + data['financing_options']);
            }
            // validate the optional field `financing_options` (array)
            for (const item of data['financing_options']) {
                ListingFinance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['first_seen_at_date'] && !(typeof data['first_seen_at_date'] === 'string' || data['first_seen_at_date'] instanceof String)) {
            throw new Error("Expected the field `first_seen_at_date` to be a primitive type in the JSON string but got " + data['first_seen_at_date']);
        }
        // ensure the json data is a string
        if (data['heading'] && !(typeof data['heading'] === 'string' || data['heading'] instanceof String)) {
            throw new Error("Expected the field `heading` to be a primitive type in the JSON string but got " + data['heading']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['insurance_group'] && !(typeof data['insurance_group'] === 'string' || data['insurance_group'] instanceof String)) {
            throw new Error("Expected the field `insurance_group` to be a primitive type in the JSON string but got " + data['insurance_group']);
        }
        // ensure the json data is a string
        if (data['interior_color'] && !(typeof data['interior_color'] === 'string' || data['interior_color'] instanceof String)) {
            throw new Error("Expected the field `interior_color` to be a primitive type in the JSON string but got " + data['interior_color']);
        }
        // ensure the json data is a string
        if (data['inventory_type'] && !(typeof data['inventory_type'] === 'string' || data['inventory_type'] instanceof String)) {
            throw new Error("Expected the field `inventory_type` to be a primitive type in the JSON string but got " + data['inventory_type']);
        }
        // ensure the json data is a string
        if (data['last_seen_at_date'] && !(typeof data['last_seen_at_date'] === 'string' || data['last_seen_at_date'] instanceof String)) {
            throw new Error("Expected the field `last_seen_at_date` to be a primitive type in the JSON string but got " + data['last_seen_at_date']);
        }
        if (data['leasing_options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['leasing_options'])) {
                throw new Error("Expected the field `leasing_options` to be an array in the JSON data but got " + data['leasing_options']);
            }
            // validate the optional field `leasing_options` (array)
            for (const item of data['leasing_options']) {
                ListingLease.validateJSON(item);
            };
        }
        // validate the optional field `media`
        if (data['media']) { // data not null
          ListingNestMedia.validateJSON(data['media']);
        }
        // ensure the json data is a string
        if (data['model_code'] && !(typeof data['model_code'] === 'string' || data['model_code'] instanceof String)) {
            throw new Error("Expected the field `model_code` to be a primitive type in the JSON string but got " + data['model_code']);
        }
        // ensure the json data is a string
        if (data['num_owners'] && !(typeof data['num_owners'] === 'string' || data['num_owners'] instanceof String)) {
            throw new Error("Expected the field `num_owners` to be a primitive type in the JSON string but got " + data['num_owners']);
        }
        // ensure the json data is a string
        if (data['ref_miles'] && !(typeof data['ref_miles'] === 'string' || data['ref_miles'] instanceof String)) {
            throw new Error("Expected the field `ref_miles` to be a primitive type in the JSON string but got " + data['ref_miles']);
        }
        // ensure the json data is a string
        if (data['ref_price'] && !(typeof data['ref_price'] === 'string' || data['ref_price'] instanceof String)) {
            throw new Error("Expected the field `ref_price` to be a primitive type in the JSON string but got " + data['ref_price']);
        }
        // ensure the json data is a string
        if (data['scraped_at_date'] && !(typeof data['scraped_at_date'] === 'string' || data['scraped_at_date'] instanceof String)) {
            throw new Error("Expected the field `scraped_at_date` to be a primitive type in the JSON string but got " + data['scraped_at_date']);
        }
        // ensure the json data is a string
        if (data['seller_type'] && !(typeof data['seller_type'] === 'string' || data['seller_type'] instanceof String)) {
            throw new Error("Expected the field `seller_type` to be a primitive type in the JSON string but got " + data['seller_type']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['stock_no'] && !(typeof data['stock_no'] === 'string' || data['stock_no'] instanceof String)) {
            throw new Error("Expected the field `stock_no` to be a primitive type in the JSON string but got " + data['stock_no']);
        }
        // ensure the json data is a string
        if (data['title_type'] && !(typeof data['title_type'] === 'string' || data['title_type'] instanceof String)) {
            throw new Error("Expected the field `title_type` to be a primitive type in the JSON string but got " + data['title_type']);
        }
        // ensure the json data is a string
        if (data['uvc_id'] && !(typeof data['uvc_id'] === 'string' || data['uvc_id'] instanceof String)) {
            throw new Error("Expected the field `uvc_id` to be a primitive type in the JSON string but got " + data['uvc_id']);
        }
        // ensure the json data is a string
        if (data['vdp_url'] && !(typeof data['vdp_url'] === 'string' || data['vdp_url'] instanceof String)) {
            throw new Error("Expected the field `vdp_url` to be a primitive type in the JSON string but got " + data['vdp_url']);
        }
        // ensure the json data is a string
        if (data['vehicle_registration_mark'] && !(typeof data['vehicle_registration_mark'] === 'string' || data['vehicle_registration_mark'] instanceof String)) {
            throw new Error("Expected the field `vehicle_registration_mark` to be a primitive type in the JSON string but got " + data['vehicle_registration_mark']);
        }

        return true;
    }


}



/**
 * Base exterior color of the car
 * @member {String} base_ext_color
 */
UKBaseListing.prototype['base_ext_color'] = undefined;

/**
 * Base interior color of the car
 * @member {String} base_int_color
 */
UKBaseListing.prototype['base_int_color'] = undefined;

/**
 * @member {module:model/Build} build
 */
UKBaseListing.prototype['build'] = undefined;

/**
 * @member {module:model/CarLocation} car_location
 */
UKBaseListing.prototype['car_location'] = undefined;

/**
 * Flag to indicate whether listing is carfax_1_owner
 * @member {Boolean} carfax_1_owner
 */
UKBaseListing.prototype['carfax_1_owner'] = undefined;

/**
 * Flag to indicate whether listing is carfax_clean_title
 * @member {Boolean} carfax_clean_title
 */
UKBaseListing.prototype['carfax_clean_title'] = undefined;

/**
 * CO2 emissions by car
 * @member {String} co2_emissions
 */
UKBaseListing.prototype['co2_emissions'] = undefined;

/**
 * Data source of the listing
 * @member {String} data_source
 */
UKBaseListing.prototype['data_source'] = undefined;

/**
 * @member {module:model/NestDealer} dealer
 */
UKBaseListing.prototype['dealer'] = undefined;

/**
 * Distance of the car's location from the specified user lcoation
 * @member {Number} dist
 */
UKBaseListing.prototype['dist'] = undefined;

/**
 * Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car
 * @member {Number} dom
 */
UKBaseListing.prototype['dom'] = undefined;

/**
 * Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car
 * @member {Number} dom_180
 */
UKBaseListing.prototype['dom_180'] = undefined;

/**
 * Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car
 * @member {Number} dom_active
 */
UKBaseListing.prototype['dom_active'] = undefined;

/**
 * Exterior color of the car
 * @member {String} exterior_color
 */
UKBaseListing.prototype['exterior_color'] = undefined;

/**
 * Array of all finance offers for this listing
 * @member {Array.<module:model/ListingFinance>} financing_options
 */
UKBaseListing.prototype['financing_options'] = undefined;

/**
 * Listing first seen at first scraped timestamp
 * @member {Number} first_seen_at
 */
UKBaseListing.prototype['first_seen_at'] = undefined;

/**
 * Listing first seen at first scraped date
 * @member {String} first_seen_at_date
 */
UKBaseListing.prototype['first_seen_at_date'] = undefined;

/**
 * Listing title as displayed on the source website
 * @member {String} heading
 */
UKBaseListing.prototype['heading'] = undefined;

/**
 * Unique identifier representing a specific listing from the Marketcheck database
 * @member {String} id
 */
UKBaseListing.prototype['id'] = undefined;

/**
 * in_transit of the listing
 * @member {Boolean} in_transit
 */
UKBaseListing.prototype['in_transit'] = undefined;

/**
 * Insurance Group of car
 * @member {String} insurance_group
 */
UKBaseListing.prototype['insurance_group'] = undefined;

/**
 * Interior color of the car
 * @member {String} interior_color
 */
UKBaseListing.prototype['interior_color'] = undefined;

/**
 * Inventory type of car
 * @member {String} inventory_type
 */
UKBaseListing.prototype['inventory_type'] = undefined;

/**
 * Certified car
 * @member {Number} is_certified
 */
UKBaseListing.prototype['is_certified'] = undefined;

/**
 * is_translated of the listing
 * @member {Boolean} is_translated
 */
UKBaseListing.prototype['is_translated'] = undefined;

/**
 * Listing last seen at (most recent) timestamp
 * @member {Number} last_seen_at
 */
UKBaseListing.prototype['last_seen_at'] = undefined;

/**
 * Listing last seen at (most recent) date
 * @member {String} last_seen_at_date
 */
UKBaseListing.prototype['last_seen_at_date'] = undefined;

/**
 * Array of all finance offers for this listing
 * @member {Array.<module:model/ListingLease>} leasing_options
 */
UKBaseListing.prototype['leasing_options'] = undefined;

/**
 * @member {module:model/ListingNestMedia} media
 */
UKBaseListing.prototype['media'] = undefined;

/**
 * Odometer reading / reported miles usage for the car
 * @member {Number} miles
 */
UKBaseListing.prototype['miles'] = undefined;

/**
 * model_code of the listing
 * @member {String} model_code
 */
UKBaseListing.prototype['model_code'] = undefined;

/**
 * MSRP for the car
 * @member {Number} msrp
 */
UKBaseListing.prototype['msrp'] = undefined;

/**
 * Number of owners
 * @member {String} num_owners
 */
UKBaseListing.prototype['num_owners'] = undefined;

/**
 * Asking price for the car
 * @member {Number} price
 */
UKBaseListing.prototype['price'] = undefined;

/**
 * Percentage difference between the cars's current price and ref_price i.e. last reported price
 * @member {Number} price_change_percent
 */
UKBaseListing.prototype['price_change_percent'] = undefined;

/**
 * Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date
 * @member {String} ref_miles
 */
UKBaseListing.prototype['ref_miles'] = undefined;

/**
 * The date at which the last miles was reported online. This is earlier to last_seen_date
 * @member {Number} ref_miles_dt
 */
UKBaseListing.prototype['ref_miles_dt'] = undefined;

/**
 * Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date
 * @member {String} ref_price
 */
UKBaseListing.prototype['ref_price'] = undefined;

/**
 * The date at which the last price was reported online. This is earlier to last_seen_date
 * @member {Number} ref_price_dt
 */
UKBaseListing.prototype['ref_price_dt'] = undefined;

/**
 * Listing last seen at date timestamp
 * @member {Number} scraped_at
 */
UKBaseListing.prototype['scraped_at'] = undefined;

/**
 * Listing last seen at date
 * @member {String} scraped_at_date
 */
UKBaseListing.prototype['scraped_at_date'] = undefined;

/**
 * Seller type for the car
 * @member {String} seller_type
 */
UKBaseListing.prototype['seller_type'] = undefined;

/**
 * Source domain of the listing
 * @member {String} source
 */
UKBaseListing.prototype['source'] = undefined;

/**
 * Stock number of car in dealers inventory
 * @member {String} stock_no
 */
UKBaseListing.prototype['stock_no'] = undefined;

/**
 * title_type of the listing
 * @member {String} title_type
 */
UKBaseListing.prototype['title_type'] = undefined;

/**
 * UVC ID of the car
 * @member {String} uvc_id
 */
UKBaseListing.prototype['uvc_id'] = undefined;

/**
 * Vehicle Details Page url of the specific car
 * @member {String} vdp_url
 */
UKBaseListing.prototype['vdp_url'] = undefined;

/**
 *  Vehicle Registration Mark of the car
 * @member {String} vehicle_registration_mark
 */
UKBaseListing.prototype['vehicle_registration_mark'] = undefined;






export default UKBaseListing;

