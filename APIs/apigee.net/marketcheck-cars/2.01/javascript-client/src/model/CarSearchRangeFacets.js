/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RangeFacetItem from './RangeFacetItem';

/**
 * The CarSearchRangeFacets model module.
 * @module model/CarSearchRangeFacets
 * @version 2.01
 */
class CarSearchRangeFacets {
    /**
     * Constructs a new <code>CarSearchRangeFacets</code>.
     * @alias module:model/CarSearchRangeFacets
     */
    constructor() { 
        
        CarSearchRangeFacets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CarSearchRangeFacets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CarSearchRangeFacets} obj Optional instance to populate.
     * @return {module:model/CarSearchRangeFacets} The populated <code>CarSearchRangeFacets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CarSearchRangeFacets();

            if (data.hasOwnProperty('dom')) {
                obj['dom'] = ApiClient.convertToType(data['dom'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('dom_180')) {
                obj['dom_180'] = ApiClient.convertToType(data['dom_180'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('dom_active')) {
                obj['dom_active'] = ApiClient.convertToType(data['dom_active'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('finance_down_payment')) {
                obj['finance_down_payment'] = ApiClient.convertToType(data['finance_down_payment'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('finance_emp')) {
                obj['finance_emp'] = ApiClient.convertToType(data['finance_emp'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('finance_loan_apr')) {
                obj['finance_loan_apr'] = ApiClient.convertToType(data['finance_loan_apr'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('finance_loan_term')) {
                obj['finance_loan_term'] = ApiClient.convertToType(data['finance_loan_term'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('lease_down_payment')) {
                obj['lease_down_payment'] = ApiClient.convertToType(data['lease_down_payment'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('lease_emp')) {
                obj['lease_emp'] = ApiClient.convertToType(data['lease_emp'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('lease_term')) {
                obj['lease_term'] = ApiClient.convertToType(data['lease_term'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('miles')) {
                obj['miles'] = ApiClient.convertToType(data['miles'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('msrp')) {
                obj['msrp'] = ApiClient.convertToType(data['msrp'], [RangeFacetItem]);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], [RangeFacetItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CarSearchRangeFacets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CarSearchRangeFacets</code>.
     */
    static validateJSON(data) {
        if (data['dom']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dom'])) {
                throw new Error("Expected the field `dom` to be an array in the JSON data but got " + data['dom']);
            }
            // validate the optional field `dom` (array)
            for (const item of data['dom']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['dom_180']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dom_180'])) {
                throw new Error("Expected the field `dom_180` to be an array in the JSON data but got " + data['dom_180']);
            }
            // validate the optional field `dom_180` (array)
            for (const item of data['dom_180']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['dom_active']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dom_active'])) {
                throw new Error("Expected the field `dom_active` to be an array in the JSON data but got " + data['dom_active']);
            }
            // validate the optional field `dom_active` (array)
            for (const item of data['dom_active']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['finance_down_payment']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['finance_down_payment'])) {
                throw new Error("Expected the field `finance_down_payment` to be an array in the JSON data but got " + data['finance_down_payment']);
            }
            // validate the optional field `finance_down_payment` (array)
            for (const item of data['finance_down_payment']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['finance_emp']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['finance_emp'])) {
                throw new Error("Expected the field `finance_emp` to be an array in the JSON data but got " + data['finance_emp']);
            }
            // validate the optional field `finance_emp` (array)
            for (const item of data['finance_emp']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['finance_loan_apr']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['finance_loan_apr'])) {
                throw new Error("Expected the field `finance_loan_apr` to be an array in the JSON data but got " + data['finance_loan_apr']);
            }
            // validate the optional field `finance_loan_apr` (array)
            for (const item of data['finance_loan_apr']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['finance_loan_term']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['finance_loan_term'])) {
                throw new Error("Expected the field `finance_loan_term` to be an array in the JSON data but got " + data['finance_loan_term']);
            }
            // validate the optional field `finance_loan_term` (array)
            for (const item of data['finance_loan_term']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['lease_down_payment']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lease_down_payment'])) {
                throw new Error("Expected the field `lease_down_payment` to be an array in the JSON data but got " + data['lease_down_payment']);
            }
            // validate the optional field `lease_down_payment` (array)
            for (const item of data['lease_down_payment']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['lease_emp']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lease_emp'])) {
                throw new Error("Expected the field `lease_emp` to be an array in the JSON data but got " + data['lease_emp']);
            }
            // validate the optional field `lease_emp` (array)
            for (const item of data['lease_emp']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['lease_term']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lease_term'])) {
                throw new Error("Expected the field `lease_term` to be an array in the JSON data but got " + data['lease_term']);
            }
            // validate the optional field `lease_term` (array)
            for (const item of data['lease_term']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['miles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['miles'])) {
                throw new Error("Expected the field `miles` to be an array in the JSON data but got " + data['miles']);
            }
            // validate the optional field `miles` (array)
            for (const item of data['miles']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['msrp']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['msrp'])) {
                throw new Error("Expected the field `msrp` to be an array in the JSON data but got " + data['msrp']);
            }
            // validate the optional field `msrp` (array)
            for (const item of data['msrp']) {
                RangeFacetItem.validateJSON(item);
            };
        }
        if (data['price']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['price'])) {
                throw new Error("Expected the field `price` to be an array in the JSON data but got " + data['price']);
            }
            // validate the optional field `price` (array)
            for (const item of data['price']) {
                RangeFacetItem.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/RangeFacetItem>} dom
 */
CarSearchRangeFacets.prototype['dom'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} dom_180
 */
CarSearchRangeFacets.prototype['dom_180'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} dom_active
 */
CarSearchRangeFacets.prototype['dom_active'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} finance_down_payment
 */
CarSearchRangeFacets.prototype['finance_down_payment'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} finance_emp
 */
CarSearchRangeFacets.prototype['finance_emp'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} finance_loan_apr
 */
CarSearchRangeFacets.prototype['finance_loan_apr'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} finance_loan_term
 */
CarSearchRangeFacets.prototype['finance_loan_term'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} lease_down_payment
 */
CarSearchRangeFacets.prototype['lease_down_payment'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} lease_emp
 */
CarSearchRangeFacets.prototype['lease_emp'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} lease_term
 */
CarSearchRangeFacets.prototype['lease_term'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} miles
 */
CarSearchRangeFacets.prototype['miles'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} msrp
 */
CarSearchRangeFacets.prototype['msrp'] = undefined;

/**
 * @member {Array.<module:model/RangeFacetItem>} price
 */
CarSearchRangeFacets.prototype['price'] = undefined;






export default CarSearchRangeFacets;

