/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HeavyEquipmentsBuild model module.
 * @module model/HeavyEquipmentsBuild
 * @version 2.01
 */
class HeavyEquipmentsBuild {
    /**
     * Constructs a new <code>HeavyEquipmentsBuild</code>.
     * Describes the Heavy Equipments specification
     * @alias module:model/HeavyEquipmentsBuild
     */
    constructor() { 
        
        HeavyEquipmentsBuild.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HeavyEquipmentsBuild</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HeavyEquipmentsBuild} obj Optional instance to populate.
     * @return {module:model/HeavyEquipmentsBuild} The populated <code>HeavyEquipmentsBuild</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HeavyEquipmentsBuild();

            if (data.hasOwnProperty('body_type')) {
                obj['body_type'] = ApiClient.convertToType(data['body_type'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], 'String');
            }
            if (data.hasOwnProperty('drivetrain')) {
                obj['drivetrain'] = ApiClient.convertToType(data['drivetrain'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('fuel_type')) {
                obj['fuel_type'] = ApiClient.convertToType(data['fuel_type'], 'String');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('sub_category')) {
                obj['sub_category'] = ApiClient.convertToType(data['sub_category'], 'String');
            }
            if (data.hasOwnProperty('transmission')) {
                obj['transmission'] = ApiClient.convertToType(data['transmission'], 'String');
            }
            if (data.hasOwnProperty('trim')) {
                obj['trim'] = ApiClient.convertToType(data['trim'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HeavyEquipmentsBuild</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HeavyEquipmentsBuild</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body_type'] && !(typeof data['body_type'] === 'string' || data['body_type'] instanceof String)) {
            throw new Error("Expected the field `body_type` to be a primitive type in the JSON string but got " + data['body_type']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['condition'] && !(typeof data['condition'] === 'string' || data['condition'] instanceof String)) {
            throw new Error("Expected the field `condition` to be a primitive type in the JSON string but got " + data['condition']);
        }
        // ensure the json data is a string
        if (data['drivetrain'] && !(typeof data['drivetrain'] === 'string' || data['drivetrain'] instanceof String)) {
            throw new Error("Expected the field `drivetrain` to be a primitive type in the JSON string but got " + data['drivetrain']);
        }
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['fuel_type'] && !(typeof data['fuel_type'] === 'string' || data['fuel_type'] instanceof String)) {
            throw new Error("Expected the field `fuel_type` to be a primitive type in the JSON string but got " + data['fuel_type']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['sub_category'] && !(typeof data['sub_category'] === 'string' || data['sub_category'] instanceof String)) {
            throw new Error("Expected the field `sub_category` to be a primitive type in the JSON string but got " + data['sub_category']);
        }
        // ensure the json data is a string
        if (data['transmission'] && !(typeof data['transmission'] === 'string' || data['transmission'] instanceof String)) {
            throw new Error("Expected the field `transmission` to be a primitive type in the JSON string but got " + data['transmission']);
        }
        // ensure the json data is a string
        if (data['trim'] && !(typeof data['trim'] === 'string' || data['trim'] instanceof String)) {
            throw new Error("Expected the field `trim` to be a primitive type in the JSON string but got " + data['trim']);
        }

        return true;
    }


}



/**
 * Body type of the heavy equipment
 * @member {String} body_type
 */
HeavyEquipmentsBuild.prototype['body_type'] = undefined;

/**
 * Heavy equipment category
 * @member {String} category
 */
HeavyEquipmentsBuild.prototype['category'] = undefined;

/**
 * Heavy equipment condition
 * @member {String} condition
 */
HeavyEquipmentsBuild.prototype['condition'] = undefined;

/**
 * Drivetrain of the heavy equipment
 * @member {String} drivetrain
 */
HeavyEquipmentsBuild.prototype['drivetrain'] = undefined;

/**
 * Engine of the heavy equipment
 * @member {String} engine
 */
HeavyEquipmentsBuild.prototype['engine'] = undefined;

/**
 * Fuel type of the heavy equipment
 * @member {String} fuel_type
 */
HeavyEquipmentsBuild.prototype['fuel_type'] = undefined;

/**
 * Heavy equipment Make
 * @member {String} make
 */
HeavyEquipmentsBuild.prototype['make'] = undefined;

/**
 * Heavy equipment model
 * @member {String} model
 */
HeavyEquipmentsBuild.prototype['model'] = undefined;

/**
 * Heavy equipment sub_category
 * @member {String} sub_category
 */
HeavyEquipmentsBuild.prototype['sub_category'] = undefined;

/**
 * Transmission of the heavy equipment
 * @member {String} transmission
 */
HeavyEquipmentsBuild.prototype['transmission'] = undefined;

/**
 * Trim of the heavy equipment
 * @member {String} trim
 */
HeavyEquipmentsBuild.prototype['trim'] = undefined;

/**
 * Year of the heavy equipment
 * @member {Number} year
 */
HeavyEquipmentsBuild.prototype['year'] = undefined;






export default HeavyEquipmentsBuild;

