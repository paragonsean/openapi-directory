/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NestDealer model module.
 * @module model/NestDealer
 * @version 2.01
 */
class NestDealer {
    /**
     * Constructs a new <code>NestDealer</code>.
     * @alias module:model/NestDealer
     */
    constructor() { 
        
        NestDealer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NestDealer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NestDealer} obj Optional instance to populate.
     * @return {module:model/NestDealer} The populated <code>NestDealer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NestDealer();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('dealer_type')) {
                obj['dealer_type'] = ApiClient.convertToType(data['dealer_type'], 'String');
            }
            if (data.hasOwnProperty('dealership_group_name')) {
                obj['dealership_group_name'] = ApiClient.convertToType(data['dealership_group_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
            if (data.hasOwnProperty('msa_code')) {
                obj['msa_code'] = ApiClient.convertToType(data['msa_code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('seller_email')) {
                obj['seller_email'] = ApiClient.convertToType(data['seller_email'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NestDealer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NestDealer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['dealer_type'] && !(typeof data['dealer_type'] === 'string' || data['dealer_type'] instanceof String)) {
            throw new Error("Expected the field `dealer_type` to be a primitive type in the JSON string but got " + data['dealer_type']);
        }
        // ensure the json data is a string
        if (data['dealership_group_name'] && !(typeof data['dealership_group_name'] === 'string' || data['dealership_group_name'] instanceof String)) {
            throw new Error("Expected the field `dealership_group_name` to be a primitive type in the JSON string but got " + data['dealership_group_name']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }
        // ensure the json data is a string
        if (data['msa_code'] && !(typeof data['msa_code'] === 'string' || data['msa_code'] instanceof String)) {
            throw new Error("Expected the field `msa_code` to be a primitive type in the JSON string but got " + data['msa_code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['seller_email'] && !(typeof data['seller_email'] === 'string' || data['seller_email'] instanceof String)) {
            throw new Error("Expected the field `seller_email` to be a primitive type in the JSON string but got " + data['seller_email']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}



/**
 * City of the dealer
 * @member {String} city
 */
NestDealer.prototype['city'] = undefined;

/**
 * country of the dealer
 * @member {String} country
 */
NestDealer.prototype['country'] = undefined;

/**
 * county of the dealer
 * @member {String} county
 */
NestDealer.prototype['county'] = undefined;

/**
 * Type of dealer (franchise/independent)
 * @member {String} dealer_type
 */
NestDealer.prototype['dealer_type'] = undefined;

/**
 * dealership_group_name of dealer
 * @member {String} dealership_group_name
 */
NestDealer.prototype['dealership_group_name'] = undefined;

/**
 * The unique id associated with the dealer in the Marketcheck database
 * @member {Number} id
 */
NestDealer.prototype['id'] = undefined;

/**
 * Latutide for the dealer location
 * @member {String} latitude
 */
NestDealer.prototype['latitude'] = undefined;

/**
 * Longitude for the dealer location
 * @member {String} longitude
 */
NestDealer.prototype['longitude'] = undefined;

/**
 * msa_code of the dealer
 * @member {String} msa_code
 */
NestDealer.prototype['msa_code'] = undefined;

/**
 * Name of the dealer
 * @member {String} name
 */
NestDealer.prototype['name'] = undefined;

/**
 * Contact no of the dealer
 * @member {String} phone
 */
NestDealer.prototype['phone'] = undefined;

/**
 * Contact email of the dealer
 * @member {String} seller_email
 */
NestDealer.prototype['seller_email'] = undefined;

/**
 * State of the dealer
 * @member {String} state
 */
NestDealer.prototype['state'] = undefined;

/**
 * Street of the dealer
 * @member {String} street
 */
NestDealer.prototype['street'] = undefined;

/**
 * Website of the dealer
 * @member {String} website
 */
NestDealer.prototype['website'] = undefined;

/**
 * Zip of the dealer
 * @member {String} zip
 */
NestDealer.prototype['zip'] = undefined;






export default NestDealer;

