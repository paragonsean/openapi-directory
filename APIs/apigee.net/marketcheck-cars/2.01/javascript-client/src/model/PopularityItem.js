/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PopularityItem model module.
 * @module model/PopularityItem
 * @version 2.01
 */
class PopularityItem {
    /**
     * Constructs a new <code>PopularityItem</code>.
     * @alias module:model/PopularityItem
     */
    constructor() { 
        
        PopularityItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PopularityItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PopularityItem} obj Optional instance to populate.
     * @return {module:model/PopularityItem} The populated <code>PopularityItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PopularityItem();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('delta_percent')) {
                obj['delta_percent'] = ApiClient.convertToType(data['delta_percent'], 'Number');
            }
            if (data.hasOwnProperty('difference')) {
                obj['difference'] = ApiClient.convertToType(data['difference'], 'Number');
            }
            if (data.hasOwnProperty('left')) {
                obj['left'] = ApiClient.convertToType(data['left'], 'Number');
            }
            if (data.hasOwnProperty('right')) {
                obj['right'] = ApiClient.convertToType(data['right'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('thumbs')) {
                obj['thumbs'] = ApiClient.convertToType(data['thumbs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PopularityItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PopularityItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['thumbs'] && !(typeof data['thumbs'] === 'string' || data['thumbs'] instanceof String)) {
            throw new Error("Expected the field `thumbs` to be a primitive type in the JSON string but got " + data['thumbs']);
        }

        return true;
    }


}



/**
 * Color depending upon left and right analysis numbers
 * @member {String} color
 */
PopularityItem.prototype['color'] = undefined;

/**
 * Delta percent
 * @member {Number} delta_percent
 */
PopularityItem.prototype['delta_percent'] = undefined;

/**
 * Difference depending upon left and right analysis
 * @member {Number} difference
 */
PopularityItem.prototype['difference'] = undefined;

/**
 * Left side rating for above description (2016 ford F-150 Lariat)
 * @member {Number} left
 */
PopularityItem.prototype['left'] = undefined;

/**
 * Right side rating for above description (All Other Cars)
 * @member {Number} right
 */
PopularityItem.prototype['right'] = undefined;

/**
 * Description for which popularity should be show eg: 2016 ford F-150 Lariat vs All Other Cars
 * @member {String} text
 */
PopularityItem.prototype['text'] = undefined;

/**
 * Thumbs up/down depending upon left and right analysis numbers
 * @member {String} thumbs
 */
PopularityItem.prototype['thumbs'] = undefined;






export default PopularityItem;

