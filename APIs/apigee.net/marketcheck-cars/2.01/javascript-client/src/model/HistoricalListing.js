/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListingFinance from './ListingFinance';
import ListingLease from './ListingLease';

/**
 * The HistoricalListing model module.
 * @module model/HistoricalListing
 * @version 2.01
 */
class HistoricalListing {
    /**
     * Constructs a new <code>HistoricalListing</code>.
     * Represents a car history entry
     * @alias module:model/HistoricalListing
     */
    constructor() { 
        
        HistoricalListing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistoricalListing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoricalListing} obj Optional instance to populate.
     * @return {module:model/HistoricalListing} The populated <code>HistoricalListing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoricalListing();

            if (data.hasOwnProperty('carfax_1_owner')) {
                obj['carfax_1_owner'] = ApiClient.convertToType(data['carfax_1_owner'], 'Boolean');
            }
            if (data.hasOwnProperty('carfax_clean_title')) {
                obj['carfax_clean_title'] = ApiClient.convertToType(data['carfax_clean_title'], 'Boolean');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('data_source')) {
                obj['data_source'] = ApiClient.convertToType(data['data_source'], 'String');
            }
            if (data.hasOwnProperty('dealer_id')) {
                obj['dealer_id'] = ApiClient.convertToType(data['dealer_id'], 'Number');
            }
            if (data.hasOwnProperty('dom')) {
                obj['dom'] = ApiClient.convertToType(data['dom'], 'Number');
            }
            if (data.hasOwnProperty('dom_180')) {
                obj['dom_180'] = ApiClient.convertToType(data['dom_180'], 'Number');
            }
            if (data.hasOwnProperty('dom_active')) {
                obj['dom_active'] = ApiClient.convertToType(data['dom_active'], 'Number');
            }
            if (data.hasOwnProperty('exterior_color')) {
                obj['exterior_color'] = ApiClient.convertToType(data['exterior_color'], 'String');
            }
            if (data.hasOwnProperty('financing_options')) {
                obj['financing_options'] = ApiClient.convertToType(data['financing_options'], [ListingFinance]);
            }
            if (data.hasOwnProperty('first_seen_at')) {
                obj['first_seen_at'] = ApiClient.convertToType(data['first_seen_at'], 'Number');
            }
            if (data.hasOwnProperty('first_seen_at_date')) {
                obj['first_seen_at_date'] = ApiClient.convertToType(data['first_seen_at_date'], 'String');
            }
            if (data.hasOwnProperty('heading')) {
                obj['heading'] = ApiClient.convertToType(data['heading'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('interior_color')) {
                obj['interior_color'] = ApiClient.convertToType(data['interior_color'], 'String');
            }
            if (data.hasOwnProperty('inventory_type')) {
                obj['inventory_type'] = ApiClient.convertToType(data['inventory_type'], 'String');
            }
            if (data.hasOwnProperty('is_certified')) {
                obj['is_certified'] = ApiClient.convertToType(data['is_certified'], 'Number');
            }
            if (data.hasOwnProperty('is_searchable')) {
                obj['is_searchable'] = ApiClient.convertToType(data['is_searchable'], 'String');
            }
            if (data.hasOwnProperty('last_seen_at')) {
                obj['last_seen_at'] = ApiClient.convertToType(data['last_seen_at'], 'Number');
            }
            if (data.hasOwnProperty('last_seen_at_date')) {
                obj['last_seen_at_date'] = ApiClient.convertToType(data['last_seen_at_date'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('leasing_options')) {
                obj['leasing_options'] = ApiClient.convertToType(data['leasing_options'], [ListingLease]);
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
            if (data.hasOwnProperty('miles')) {
                obj['miles'] = ApiClient.convertToType(data['miles'], 'Number');
            }
            if (data.hasOwnProperty('msrp')) {
                obj['msrp'] = ApiClient.convertToType(data['msrp'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('ref_miles')) {
                obj['ref_miles'] = ApiClient.convertToType(data['ref_miles'], 'String');
            }
            if (data.hasOwnProperty('ref_miles_dt')) {
                obj['ref_miles_dt'] = ApiClient.convertToType(data['ref_miles_dt'], 'Number');
            }
            if (data.hasOwnProperty('ref_price')) {
                obj['ref_price'] = ApiClient.convertToType(data['ref_price'], 'String');
            }
            if (data.hasOwnProperty('ref_price_dt')) {
                obj['ref_price_dt'] = ApiClient.convertToType(data['ref_price_dt'], 'Number');
            }
            if (data.hasOwnProperty('scraped_at')) {
                obj['scraped_at'] = ApiClient.convertToType(data['scraped_at'], 'Number');
            }
            if (data.hasOwnProperty('scraped_at_date')) {
                obj['scraped_at_date'] = ApiClient.convertToType(data['scraped_at_date'], 'String');
            }
            if (data.hasOwnProperty('seller_name')) {
                obj['seller_name'] = ApiClient.convertToType(data['seller_name'], 'String');
            }
            if (data.hasOwnProperty('seller_name_o')) {
                obj['seller_name_o'] = ApiClient.convertToType(data['seller_name_o'], 'String');
            }
            if (data.hasOwnProperty('seller_type')) {
                obj['seller_type'] = ApiClient.convertToType(data['seller_type'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status_date')) {
                obj['status_date'] = ApiClient.convertToType(data['status_date'], 'Number');
            }
            if (data.hasOwnProperty('stock_no')) {
                obj['stock_no'] = ApiClient.convertToType(data['stock_no'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('trim_r')) {
                obj['trim_r'] = ApiClient.convertToType(data['trim_r'], 'String');
            }
            if (data.hasOwnProperty('vdp_url')) {
                obj['vdp_url'] = ApiClient.convertToType(data['vdp_url'], 'String');
            }
            if (data.hasOwnProperty('vin')) {
                obj['vin'] = ApiClient.convertToType(data['vin'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistoricalListing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistoricalListing</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['data_source'] && !(typeof data['data_source'] === 'string' || data['data_source'] instanceof String)) {
            throw new Error("Expected the field `data_source` to be a primitive type in the JSON string but got " + data['data_source']);
        }
        // ensure the json data is a string
        if (data['exterior_color'] && !(typeof data['exterior_color'] === 'string' || data['exterior_color'] instanceof String)) {
            throw new Error("Expected the field `exterior_color` to be a primitive type in the JSON string but got " + data['exterior_color']);
        }
        if (data['financing_options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['financing_options'])) {
                throw new Error("Expected the field `financing_options` to be an array in the JSON data but got " + data['financing_options']);
            }
            // validate the optional field `financing_options` (array)
            for (const item of data['financing_options']) {
                ListingFinance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['first_seen_at_date'] && !(typeof data['first_seen_at_date'] === 'string' || data['first_seen_at_date'] instanceof String)) {
            throw new Error("Expected the field `first_seen_at_date` to be a primitive type in the JSON string but got " + data['first_seen_at_date']);
        }
        // ensure the json data is a string
        if (data['heading'] && !(typeof data['heading'] === 'string' || data['heading'] instanceof String)) {
            throw new Error("Expected the field `heading` to be a primitive type in the JSON string but got " + data['heading']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['interior_color'] && !(typeof data['interior_color'] === 'string' || data['interior_color'] instanceof String)) {
            throw new Error("Expected the field `interior_color` to be a primitive type in the JSON string but got " + data['interior_color']);
        }
        // ensure the json data is a string
        if (data['inventory_type'] && !(typeof data['inventory_type'] === 'string' || data['inventory_type'] instanceof String)) {
            throw new Error("Expected the field `inventory_type` to be a primitive type in the JSON string but got " + data['inventory_type']);
        }
        // ensure the json data is a string
        if (data['is_searchable'] && !(typeof data['is_searchable'] === 'string' || data['is_searchable'] instanceof String)) {
            throw new Error("Expected the field `is_searchable` to be a primitive type in the JSON string but got " + data['is_searchable']);
        }
        // ensure the json data is a string
        if (data['last_seen_at_date'] && !(typeof data['last_seen_at_date'] === 'string' || data['last_seen_at_date'] instanceof String)) {
            throw new Error("Expected the field `last_seen_at_date` to be a primitive type in the JSON string but got " + data['last_seen_at_date']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        if (data['leasing_options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['leasing_options'])) {
                throw new Error("Expected the field `leasing_options` to be an array in the JSON data but got " + data['leasing_options']);
            }
            // validate the optional field `leasing_options` (array)
            for (const item of data['leasing_options']) {
                ListingLease.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }
        // ensure the json data is a string
        if (data['ref_miles'] && !(typeof data['ref_miles'] === 'string' || data['ref_miles'] instanceof String)) {
            throw new Error("Expected the field `ref_miles` to be a primitive type in the JSON string but got " + data['ref_miles']);
        }
        // ensure the json data is a string
        if (data['ref_price'] && !(typeof data['ref_price'] === 'string' || data['ref_price'] instanceof String)) {
            throw new Error("Expected the field `ref_price` to be a primitive type in the JSON string but got " + data['ref_price']);
        }
        // ensure the json data is a string
        if (data['scraped_at_date'] && !(typeof data['scraped_at_date'] === 'string' || data['scraped_at_date'] instanceof String)) {
            throw new Error("Expected the field `scraped_at_date` to be a primitive type in the JSON string but got " + data['scraped_at_date']);
        }
        // ensure the json data is a string
        if (data['seller_name'] && !(typeof data['seller_name'] === 'string' || data['seller_name'] instanceof String)) {
            throw new Error("Expected the field `seller_name` to be a primitive type in the JSON string but got " + data['seller_name']);
        }
        // ensure the json data is a string
        if (data['seller_name_o'] && !(typeof data['seller_name_o'] === 'string' || data['seller_name_o'] instanceof String)) {
            throw new Error("Expected the field `seller_name_o` to be a primitive type in the JSON string but got " + data['seller_name_o']);
        }
        // ensure the json data is a string
        if (data['seller_type'] && !(typeof data['seller_type'] === 'string' || data['seller_type'] instanceof String)) {
            throw new Error("Expected the field `seller_type` to be a primitive type in the JSON string but got " + data['seller_type']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stock_no'] && !(typeof data['stock_no'] === 'string' || data['stock_no'] instanceof String)) {
            throw new Error("Expected the field `stock_no` to be a primitive type in the JSON string but got " + data['stock_no']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['trim_r'] && !(typeof data['trim_r'] === 'string' || data['trim_r'] instanceof String)) {
            throw new Error("Expected the field `trim_r` to be a primitive type in the JSON string but got " + data['trim_r']);
        }
        // ensure the json data is a string
        if (data['vdp_url'] && !(typeof data['vdp_url'] === 'string' || data['vdp_url'] instanceof String)) {
            throw new Error("Expected the field `vdp_url` to be a primitive type in the JSON string but got " + data['vdp_url']);
        }
        // ensure the json data is a string
        if (data['vin'] && !(typeof data['vin'] === 'string' || data['vin'] instanceof String)) {
            throw new Error("Expected the field `vin` to be a primitive type in the JSON string but got " + data['vin']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}



/**
 * Flag to indicate whether listing is carfax_1_owner
 * @member {Boolean} carfax_1_owner
 */
HistoricalListing.prototype['carfax_1_owner'] = undefined;

/**
 * Flag to indicate whether listing is carfax_clean_title
 * @member {Boolean} carfax_clean_title
 */
HistoricalListing.prototype['carfax_clean_title'] = undefined;

/**
 * City of the listing
 * @member {String} city
 */
HistoricalListing.prototype['city'] = undefined;

/**
 * Data source of the listing
 * @member {String} data_source
 */
HistoricalListing.prototype['data_source'] = undefined;

/**
 * Unique MC assigned dealers id for the listing
 * @member {Number} dealer_id
 */
HistoricalListing.prototype['dealer_id'] = undefined;

/**
 * Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car
 * @member {Number} dom
 */
HistoricalListing.prototype['dom'] = undefined;

/**
 * Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car
 * @member {Number} dom_180
 */
HistoricalListing.prototype['dom_180'] = undefined;

/**
 * Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car
 * @member {Number} dom_active
 */
HistoricalListing.prototype['dom_active'] = undefined;

/**
 * Exterior color of the car
 * @member {String} exterior_color
 */
HistoricalListing.prototype['exterior_color'] = undefined;

/**
 * Array of all finance offers for this listing
 * @member {Array.<module:model/ListingFinance>} financing_options
 */
HistoricalListing.prototype['financing_options'] = undefined;

/**
 * Listing first seen at first scraped timestamp
 * @member {Number} first_seen_at
 */
HistoricalListing.prototype['first_seen_at'] = undefined;

/**
 * Listing first seen at first scraped date
 * @member {String} first_seen_at_date
 */
HistoricalListing.prototype['first_seen_at_date'] = undefined;

/**
 * Listing title as displayed on the source website
 * @member {String} heading
 */
HistoricalListing.prototype['heading'] = undefined;

/**
 * Unique identifier representing a specific listing from the Marketcheck database
 * @member {String} id
 */
HistoricalListing.prototype['id'] = undefined;

/**
 * Interior color of the car
 * @member {String} interior_color
 */
HistoricalListing.prototype['interior_color'] = undefined;

/**
 * Inventory type of car
 * @member {String} inventory_type
 */
HistoricalListing.prototype['inventory_type'] = undefined;

/**
 * Certified car
 * @member {Number} is_certified
 */
HistoricalListing.prototype['is_certified'] = undefined;

/**
 * Flag to indicate listing is marked searchable or not
 * @member {String} is_searchable
 */
HistoricalListing.prototype['is_searchable'] = undefined;

/**
 * Listing last seen at (most recent) timestamp
 * @member {Number} last_seen_at
 */
HistoricalListing.prototype['last_seen_at'] = undefined;

/**
 * Listing last seen at (most recent) date
 * @member {String} last_seen_at_date
 */
HistoricalListing.prototype['last_seen_at_date'] = undefined;

/**
 * Latitude of the listing
 * @member {String} latitude
 */
HistoricalListing.prototype['latitude'] = undefined;

/**
 * Array of all finance offers for this listing
 * @member {Array.<module:model/ListingLease>} leasing_options
 */
HistoricalListing.prototype['leasing_options'] = undefined;

/**
 * Longitude of the listing
 * @member {String} longitude
 */
HistoricalListing.prototype['longitude'] = undefined;

/**
 * Odometer reading / reported miles usage for the car
 * @member {Number} miles
 */
HistoricalListing.prototype['miles'] = undefined;

/**
 * MSRP for the car
 * @member {Number} msrp
 */
HistoricalListing.prototype['msrp'] = undefined;

/**
 * Asking price for the car
 * @member {Number} price
 */
HistoricalListing.prototype['price'] = undefined;

/**
 * Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date
 * @member {String} ref_miles
 */
HistoricalListing.prototype['ref_miles'] = undefined;

/**
 * The date at which the last miles was reported online. This is earlier to last_seen_date
 * @member {Number} ref_miles_dt
 */
HistoricalListing.prototype['ref_miles_dt'] = undefined;

/**
 * Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date
 * @member {String} ref_price
 */
HistoricalListing.prototype['ref_price'] = undefined;

/**
 * The date at which the last price was reported online. This is earlier to last_seen_date
 * @member {Number} ref_price_dt
 */
HistoricalListing.prototype['ref_price_dt'] = undefined;

/**
 * Listing last seen at date timestamp
 * @member {Number} scraped_at
 */
HistoricalListing.prototype['scraped_at'] = undefined;

/**
 * Listing last seen at date
 * @member {String} scraped_at_date
 */
HistoricalListing.prototype['scraped_at_date'] = undefined;

/**
 * Seller name of the listing from the Marketcheck database
 * @member {String} seller_name
 */
HistoricalListing.prototype['seller_name'] = undefined;

/**
 * Seller name of the listing from the Marketcheck database
 * @member {String} seller_name_o
 */
HistoricalListing.prototype['seller_name_o'] = undefined;

/**
 * Seller type for the car
 * @member {String} seller_type
 */
HistoricalListing.prototype['seller_type'] = undefined;

/**
 * Source domain of the listing
 * @member {String} source
 */
HistoricalListing.prototype['source'] = undefined;

/**
 * State of the listing
 * @member {String} state
 */
HistoricalListing.prototype['state'] = undefined;

/**
 * Timestamp of status date
 * @member {Number} status_date
 */
HistoricalListing.prototype['status_date'] = undefined;

/**
 * Stock number of car in dealers inventory
 * @member {String} stock_no
 */
HistoricalListing.prototype['stock_no'] = undefined;

/**
 * Street of the listing
 * @member {String} street
 */
HistoricalListing.prototype['street'] = undefined;

/**
 * Trim of the car
 * @member {String} trim_r
 */
HistoricalListing.prototype['trim_r'] = undefined;

/**
 * Vehicle Details Page url of the specific car
 * @member {String} vdp_url
 */
HistoricalListing.prototype['vdp_url'] = undefined;

/**
 * VIN for the car
 * @member {String} vin
 */
HistoricalListing.prototype['vin'] = undefined;

/**
 * Zip of the listing
 * @member {String} zip
 */
HistoricalListing.prototype['zip'] = undefined;






export default HistoricalListing;

