/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FacetItem from './FacetItem';

/**
 * The CarSearchFacets model module.
 * @module model/CarSearchFacets
 * @version 2.01
 */
class CarSearchFacets {
    /**
     * Constructs a new <code>CarSearchFacets</code>.
     * @alias module:model/CarSearchFacets
     */
    constructor() { 
        
        CarSearchFacets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CarSearchFacets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CarSearchFacets} obj Optional instance to populate.
     * @return {module:model/CarSearchFacets} The populated <code>CarSearchFacets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CarSearchFacets();

            if (data.hasOwnProperty('base_exterior_color')) {
                obj['base_exterior_color'] = ApiClient.convertToType(data['base_exterior_color'], [FacetItem]);
            }
            if (data.hasOwnProperty('base_interior_color')) {
                obj['base_interior_color'] = ApiClient.convertToType(data['base_interior_color'], [FacetItem]);
            }
            if (data.hasOwnProperty('body_subtype')) {
                obj['body_subtype'] = ApiClient.convertToType(data['body_subtype'], [FacetItem]);
            }
            if (data.hasOwnProperty('body_type')) {
                obj['body_type'] = ApiClient.convertToType(data['body_type'], [FacetItem]);
            }
            if (data.hasOwnProperty('car_type')) {
                obj['car_type'] = ApiClient.convertToType(data['car_type'], [FacetItem]);
            }
            if (data.hasOwnProperty('carfax_1_owner')) {
                obj['carfax_1_owner'] = ApiClient.convertToType(data['carfax_1_owner'], [FacetItem]);
            }
            if (data.hasOwnProperty('carfax_clean_title')) {
                obj['carfax_clean_title'] = ApiClient.convertToType(data['carfax_clean_title'], [FacetItem]);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], [FacetItem]);
            }
            if (data.hasOwnProperty('cylinders')) {
                obj['cylinders'] = ApiClient.convertToType(data['cylinders'], [FacetItem]);
            }
            if (data.hasOwnProperty('data_source')) {
                obj['data_source'] = ApiClient.convertToType(data['data_source'], [FacetItem]);
            }
            if (data.hasOwnProperty('dealer_id')) {
                obj['dealer_id'] = ApiClient.convertToType(data['dealer_id'], [FacetItem]);
            }
            if (data.hasOwnProperty('dealer_type')) {
                obj['dealer_type'] = ApiClient.convertToType(data['dealer_type'], [FacetItem]);
            }
            if (data.hasOwnProperty('doors')) {
                obj['doors'] = ApiClient.convertToType(data['doors'], [FacetItem]);
            }
            if (data.hasOwnProperty('drivetrain')) {
                obj['drivetrain'] = ApiClient.convertToType(data['drivetrain'], [FacetItem]);
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], [FacetItem]);
            }
            if (data.hasOwnProperty('engine_aspiration')) {
                obj['engine_aspiration'] = ApiClient.convertToType(data['engine_aspiration'], [FacetItem]);
            }
            if (data.hasOwnProperty('engine_block')) {
                obj['engine_block'] = ApiClient.convertToType(data['engine_block'], [FacetItem]);
            }
            if (data.hasOwnProperty('engine_size')) {
                obj['engine_size'] = ApiClient.convertToType(data['engine_size'], [FacetItem]);
            }
            if (data.hasOwnProperty('exterior_color')) {
                obj['exterior_color'] = ApiClient.convertToType(data['exterior_color'], [FacetItem]);
            }
            if (data.hasOwnProperty('fuel_type')) {
                obj['fuel_type'] = ApiClient.convertToType(data['fuel_type'], [FacetItem]);
            }
            if (data.hasOwnProperty('interior_color')) {
                obj['interior_color'] = ApiClient.convertToType(data['interior_color'], [FacetItem]);
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], [FacetItem]);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], [FacetItem]);
            }
            if (data.hasOwnProperty('seller_name')) {
                obj['seller_name'] = ApiClient.convertToType(data['seller_name'], [FacetItem]);
            }
            if (data.hasOwnProperty('seller_name_o')) {
                obj['seller_name_o'] = ApiClient.convertToType(data['seller_name_o'], [FacetItem]);
            }
            if (data.hasOwnProperty('seller_type')) {
                obj['seller_type'] = ApiClient.convertToType(data['seller_type'], [FacetItem]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], [FacetItem]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], [FacetItem]);
            }
            if (data.hasOwnProperty('transmission')) {
                obj['transmission'] = ApiClient.convertToType(data['transmission'], [FacetItem]);
            }
            if (data.hasOwnProperty('trim')) {
                obj['trim'] = ApiClient.convertToType(data['trim'], [FacetItem]);
            }
            if (data.hasOwnProperty('trim_o')) {
                obj['trim_o'] = ApiClient.convertToType(data['trim_o'], [FacetItem]);
            }
            if (data.hasOwnProperty('trim_r')) {
                obj['trim_r'] = ApiClient.convertToType(data['trim_r'], [FacetItem]);
            }
            if (data.hasOwnProperty('vehicle_type')) {
                obj['vehicle_type'] = ApiClient.convertToType(data['vehicle_type'], [FacetItem]);
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], [FacetItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CarSearchFacets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CarSearchFacets</code>.
     */
    static validateJSON(data) {
        if (data['base_exterior_color']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['base_exterior_color'])) {
                throw new Error("Expected the field `base_exterior_color` to be an array in the JSON data but got " + data['base_exterior_color']);
            }
            // validate the optional field `base_exterior_color` (array)
            for (const item of data['base_exterior_color']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['base_interior_color']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['base_interior_color'])) {
                throw new Error("Expected the field `base_interior_color` to be an array in the JSON data but got " + data['base_interior_color']);
            }
            // validate the optional field `base_interior_color` (array)
            for (const item of data['base_interior_color']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['body_subtype']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['body_subtype'])) {
                throw new Error("Expected the field `body_subtype` to be an array in the JSON data but got " + data['body_subtype']);
            }
            // validate the optional field `body_subtype` (array)
            for (const item of data['body_subtype']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['body_type']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['body_type'])) {
                throw new Error("Expected the field `body_type` to be an array in the JSON data but got " + data['body_type']);
            }
            // validate the optional field `body_type` (array)
            for (const item of data['body_type']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['car_type']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['car_type'])) {
                throw new Error("Expected the field `car_type` to be an array in the JSON data but got " + data['car_type']);
            }
            // validate the optional field `car_type` (array)
            for (const item of data['car_type']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['carfax_1_owner']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['carfax_1_owner'])) {
                throw new Error("Expected the field `carfax_1_owner` to be an array in the JSON data but got " + data['carfax_1_owner']);
            }
            // validate the optional field `carfax_1_owner` (array)
            for (const item of data['carfax_1_owner']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['carfax_clean_title']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['carfax_clean_title'])) {
                throw new Error("Expected the field `carfax_clean_title` to be an array in the JSON data but got " + data['carfax_clean_title']);
            }
            // validate the optional field `carfax_clean_title` (array)
            for (const item of data['carfax_clean_title']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['city']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['city'])) {
                throw new Error("Expected the field `city` to be an array in the JSON data but got " + data['city']);
            }
            // validate the optional field `city` (array)
            for (const item of data['city']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['cylinders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cylinders'])) {
                throw new Error("Expected the field `cylinders` to be an array in the JSON data but got " + data['cylinders']);
            }
            // validate the optional field `cylinders` (array)
            for (const item of data['cylinders']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['data_source']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data_source'])) {
                throw new Error("Expected the field `data_source` to be an array in the JSON data but got " + data['data_source']);
            }
            // validate the optional field `data_source` (array)
            for (const item of data['data_source']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['dealer_id']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dealer_id'])) {
                throw new Error("Expected the field `dealer_id` to be an array in the JSON data but got " + data['dealer_id']);
            }
            // validate the optional field `dealer_id` (array)
            for (const item of data['dealer_id']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['dealer_type']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dealer_type'])) {
                throw new Error("Expected the field `dealer_type` to be an array in the JSON data but got " + data['dealer_type']);
            }
            // validate the optional field `dealer_type` (array)
            for (const item of data['dealer_type']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['doors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['doors'])) {
                throw new Error("Expected the field `doors` to be an array in the JSON data but got " + data['doors']);
            }
            // validate the optional field `doors` (array)
            for (const item of data['doors']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['drivetrain']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['drivetrain'])) {
                throw new Error("Expected the field `drivetrain` to be an array in the JSON data but got " + data['drivetrain']);
            }
            // validate the optional field `drivetrain` (array)
            for (const item of data['drivetrain']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['engine']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['engine'])) {
                throw new Error("Expected the field `engine` to be an array in the JSON data but got " + data['engine']);
            }
            // validate the optional field `engine` (array)
            for (const item of data['engine']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['engine_aspiration']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['engine_aspiration'])) {
                throw new Error("Expected the field `engine_aspiration` to be an array in the JSON data but got " + data['engine_aspiration']);
            }
            // validate the optional field `engine_aspiration` (array)
            for (const item of data['engine_aspiration']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['engine_block']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['engine_block'])) {
                throw new Error("Expected the field `engine_block` to be an array in the JSON data but got " + data['engine_block']);
            }
            // validate the optional field `engine_block` (array)
            for (const item of data['engine_block']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['engine_size']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['engine_size'])) {
                throw new Error("Expected the field `engine_size` to be an array in the JSON data but got " + data['engine_size']);
            }
            // validate the optional field `engine_size` (array)
            for (const item of data['engine_size']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['exterior_color']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exterior_color'])) {
                throw new Error("Expected the field `exterior_color` to be an array in the JSON data but got " + data['exterior_color']);
            }
            // validate the optional field `exterior_color` (array)
            for (const item of data['exterior_color']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['fuel_type']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fuel_type'])) {
                throw new Error("Expected the field `fuel_type` to be an array in the JSON data but got " + data['fuel_type']);
            }
            // validate the optional field `fuel_type` (array)
            for (const item of data['fuel_type']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['interior_color']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['interior_color'])) {
                throw new Error("Expected the field `interior_color` to be an array in the JSON data but got " + data['interior_color']);
            }
            // validate the optional field `interior_color` (array)
            for (const item of data['interior_color']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['make']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['make'])) {
                throw new Error("Expected the field `make` to be an array in the JSON data but got " + data['make']);
            }
            // validate the optional field `make` (array)
            for (const item of data['make']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['model']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['model'])) {
                throw new Error("Expected the field `model` to be an array in the JSON data but got " + data['model']);
            }
            // validate the optional field `model` (array)
            for (const item of data['model']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['seller_name']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seller_name'])) {
                throw new Error("Expected the field `seller_name` to be an array in the JSON data but got " + data['seller_name']);
            }
            // validate the optional field `seller_name` (array)
            for (const item of data['seller_name']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['seller_name_o']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seller_name_o'])) {
                throw new Error("Expected the field `seller_name_o` to be an array in the JSON data but got " + data['seller_name_o']);
            }
            // validate the optional field `seller_name_o` (array)
            for (const item of data['seller_name_o']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['seller_type']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seller_type'])) {
                throw new Error("Expected the field `seller_type` to be an array in the JSON data but got " + data['seller_type']);
            }
            // validate the optional field `seller_type` (array)
            for (const item of data['seller_type']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['source']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['source'])) {
                throw new Error("Expected the field `source` to be an array in the JSON data but got " + data['source']);
            }
            // validate the optional field `source` (array)
            for (const item of data['source']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['state']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['state'])) {
                throw new Error("Expected the field `state` to be an array in the JSON data but got " + data['state']);
            }
            // validate the optional field `state` (array)
            for (const item of data['state']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['transmission']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transmission'])) {
                throw new Error("Expected the field `transmission` to be an array in the JSON data but got " + data['transmission']);
            }
            // validate the optional field `transmission` (array)
            for (const item of data['transmission']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['trim']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trim'])) {
                throw new Error("Expected the field `trim` to be an array in the JSON data but got " + data['trim']);
            }
            // validate the optional field `trim` (array)
            for (const item of data['trim']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['trim_o']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trim_o'])) {
                throw new Error("Expected the field `trim_o` to be an array in the JSON data but got " + data['trim_o']);
            }
            // validate the optional field `trim_o` (array)
            for (const item of data['trim_o']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['trim_r']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trim_r'])) {
                throw new Error("Expected the field `trim_r` to be an array in the JSON data but got " + data['trim_r']);
            }
            // validate the optional field `trim_r` (array)
            for (const item of data['trim_r']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['vehicle_type']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vehicle_type'])) {
                throw new Error("Expected the field `vehicle_type` to be an array in the JSON data but got " + data['vehicle_type']);
            }
            // validate the optional field `vehicle_type` (array)
            for (const item of data['vehicle_type']) {
                FacetItem.validateJSON(item);
            };
        }
        if (data['year']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['year'])) {
                throw new Error("Expected the field `year` to be an array in the JSON data but got " + data['year']);
            }
            // validate the optional field `year` (array)
            for (const item of data['year']) {
                FacetItem.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/FacetItem>} base_exterior_color
 */
CarSearchFacets.prototype['base_exterior_color'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} base_interior_color
 */
CarSearchFacets.prototype['base_interior_color'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} body_subtype
 */
CarSearchFacets.prototype['body_subtype'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} body_type
 */
CarSearchFacets.prototype['body_type'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} car_type
 */
CarSearchFacets.prototype['car_type'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} carfax_1_owner
 */
CarSearchFacets.prototype['carfax_1_owner'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} carfax_clean_title
 */
CarSearchFacets.prototype['carfax_clean_title'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} city
 */
CarSearchFacets.prototype['city'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} cylinders
 */
CarSearchFacets.prototype['cylinders'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} data_source
 */
CarSearchFacets.prototype['data_source'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} dealer_id
 */
CarSearchFacets.prototype['dealer_id'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} dealer_type
 */
CarSearchFacets.prototype['dealer_type'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} doors
 */
CarSearchFacets.prototype['doors'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} drivetrain
 */
CarSearchFacets.prototype['drivetrain'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} engine
 */
CarSearchFacets.prototype['engine'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} engine_aspiration
 */
CarSearchFacets.prototype['engine_aspiration'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} engine_block
 */
CarSearchFacets.prototype['engine_block'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} engine_size
 */
CarSearchFacets.prototype['engine_size'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} exterior_color
 */
CarSearchFacets.prototype['exterior_color'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} fuel_type
 */
CarSearchFacets.prototype['fuel_type'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} interior_color
 */
CarSearchFacets.prototype['interior_color'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} make
 */
CarSearchFacets.prototype['make'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} model
 */
CarSearchFacets.prototype['model'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} seller_name
 */
CarSearchFacets.prototype['seller_name'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} seller_name_o
 */
CarSearchFacets.prototype['seller_name_o'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} seller_type
 */
CarSearchFacets.prototype['seller_type'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} source
 */
CarSearchFacets.prototype['source'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} state
 */
CarSearchFacets.prototype['state'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} transmission
 */
CarSearchFacets.prototype['transmission'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} trim
 */
CarSearchFacets.prototype['trim'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} trim_o
 */
CarSearchFacets.prototype['trim_o'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} trim_r
 */
CarSearchFacets.prototype['trim_r'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} vehicle_type
 */
CarSearchFacets.prototype['vehicle_type'] = undefined;

/**
 * @member {Array.<module:model/FacetItem>} year
 */
CarSearchFacets.prototype['year'] = undefined;






export default CarSearchFacets;

