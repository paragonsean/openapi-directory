/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealersResponse::OAIDealersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealersResponse::OAIDealersResponse() {
    this->initializeModel();
}

OAIDealersResponse::~OAIDealersResponse() {}

void OAIDealersResponse::initializeModel() {

    m_dealers_isSet = false;
    m_dealers_isValid = false;

    m_num_found_isSet = false;
    m_num_found_isValid = false;
}

void OAIDealersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealersResponse::fromJsonObject(QJsonObject json) {

    m_dealers_isValid = ::OpenAPI::fromJsonValue(m_dealers, json[QString("dealers")]);
    m_dealers_isSet = !json[QString("dealers")].isNull() && m_dealers_isValid;

    m_num_found_isValid = ::OpenAPI::fromJsonValue(m_num_found, json[QString("num_found")]);
    m_num_found_isSet = !json[QString("num_found")].isNull() && m_num_found_isValid;
}

QString OAIDealersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dealers.size() > 0) {
        obj.insert(QString("dealers"), ::OpenAPI::toJsonValue(m_dealers));
    }
    if (m_num_found_isSet) {
        obj.insert(QString("num_found"), ::OpenAPI::toJsonValue(m_num_found));
    }
    return obj;
}

QList<OAIDealer> OAIDealersResponse::getDealers() const {
    return m_dealers;
}
void OAIDealersResponse::setDealers(const QList<OAIDealer> &dealers) {
    m_dealers = dealers;
    m_dealers_isSet = true;
}

bool OAIDealersResponse::is_dealers_Set() const{
    return m_dealers_isSet;
}

bool OAIDealersResponse::is_dealers_Valid() const{
    return m_dealers_isValid;
}

qint32 OAIDealersResponse::getNumFound() const {
    return m_num_found;
}
void OAIDealersResponse::setNumFound(const qint32 &num_found) {
    m_num_found = num_found;
    m_num_found_isSet = true;
}

bool OAIDealersResponse::is_num_found_Set() const{
    return m_num_found_isSet;
}

bool OAIDealersResponse::is_num_found_Valid() const{
    return m_num_found_isValid;
}

bool OAIDealersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dealers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_found_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
