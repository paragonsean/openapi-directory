/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPopularityItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPopularityItem::OAIPopularityItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPopularityItem::OAIPopularityItem() {
    this->initializeModel();
}

OAIPopularityItem::~OAIPopularityItem() {}

void OAIPopularityItem::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_delta_percent_isSet = false;
    m_delta_percent_isValid = false;

    m_difference_isSet = false;
    m_difference_isValid = false;

    m_left_isSet = false;
    m_left_isValid = false;

    m_right_isSet = false;
    m_right_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbs_isSet = false;
    m_thumbs_isValid = false;
}

void OAIPopularityItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPopularityItem::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_delta_percent_isValid = ::OpenAPI::fromJsonValue(m_delta_percent, json[QString("delta_percent")]);
    m_delta_percent_isSet = !json[QString("delta_percent")].isNull() && m_delta_percent_isValid;

    m_difference_isValid = ::OpenAPI::fromJsonValue(m_difference, json[QString("difference")]);
    m_difference_isSet = !json[QString("difference")].isNull() && m_difference_isValid;

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_right_isValid = ::OpenAPI::fromJsonValue(m_right, json[QString("right")]);
    m_right_isSet = !json[QString("right")].isNull() && m_right_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbs_isValid = ::OpenAPI::fromJsonValue(m_thumbs, json[QString("thumbs")]);
    m_thumbs_isSet = !json[QString("thumbs")].isNull() && m_thumbs_isValid;
}

QString OAIPopularityItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPopularityItem::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_delta_percent_isSet) {
        obj.insert(QString("delta_percent"), ::OpenAPI::toJsonValue(m_delta_percent));
    }
    if (m_difference_isSet) {
        obj.insert(QString("difference"), ::OpenAPI::toJsonValue(m_difference));
    }
    if (m_left_isSet) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_right_isSet) {
        obj.insert(QString("right"), ::OpenAPI::toJsonValue(m_right));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbs_isSet) {
        obj.insert(QString("thumbs"), ::OpenAPI::toJsonValue(m_thumbs));
    }
    return obj;
}

QString OAIPopularityItem::getColor() const {
    return m_color;
}
void OAIPopularityItem::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIPopularityItem::is_color_Set() const{
    return m_color_isSet;
}

bool OAIPopularityItem::is_color_Valid() const{
    return m_color_isValid;
}

double OAIPopularityItem::getDeltaPercent() const {
    return m_delta_percent;
}
void OAIPopularityItem::setDeltaPercent(const double &delta_percent) {
    m_delta_percent = delta_percent;
    m_delta_percent_isSet = true;
}

bool OAIPopularityItem::is_delta_percent_Set() const{
    return m_delta_percent_isSet;
}

bool OAIPopularityItem::is_delta_percent_Valid() const{
    return m_delta_percent_isValid;
}

double OAIPopularityItem::getDifference() const {
    return m_difference;
}
void OAIPopularityItem::setDifference(const double &difference) {
    m_difference = difference;
    m_difference_isSet = true;
}

bool OAIPopularityItem::is_difference_Set() const{
    return m_difference_isSet;
}

bool OAIPopularityItem::is_difference_Valid() const{
    return m_difference_isValid;
}

double OAIPopularityItem::getLeft() const {
    return m_left;
}
void OAIPopularityItem::setLeft(const double &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAIPopularityItem::is_left_Set() const{
    return m_left_isSet;
}

bool OAIPopularityItem::is_left_Valid() const{
    return m_left_isValid;
}

double OAIPopularityItem::getRight() const {
    return m_right;
}
void OAIPopularityItem::setRight(const double &right) {
    m_right = right;
    m_right_isSet = true;
}

bool OAIPopularityItem::is_right_Set() const{
    return m_right_isSet;
}

bool OAIPopularityItem::is_right_Valid() const{
    return m_right_isValid;
}

QString OAIPopularityItem::getText() const {
    return m_text;
}
void OAIPopularityItem::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPopularityItem::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPopularityItem::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPopularityItem::getThumbs() const {
    return m_thumbs;
}
void OAIPopularityItem::setThumbs(const QString &thumbs) {
    m_thumbs = thumbs;
    m_thumbs_isSet = true;
}

bool OAIPopularityItem::is_thumbs_Set() const{
    return m_thumbs_isSet;
}

bool OAIPopularityItem::is_thumbs_Valid() const{
    return m_thumbs_isValid;
}

bool OAIPopularityItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delta_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_difference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPopularityItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
