/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealerLandingPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealerLandingPage::OAIDealerLandingPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealerLandingPage::OAIDealerLandingPage() {
    this->initializeModel();
}

OAIDealerLandingPage::~OAIDealerLandingPage() {}

void OAIDealerLandingPage::initializeModel() {

    m_crawled_at_isSet = false;
    m_crawled_at_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_srp_url_isSet = false;
    m_srp_url_isValid = false;
}

void OAIDealerLandingPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealerLandingPage::fromJsonObject(QJsonObject json) {

    m_crawled_at_isValid = ::OpenAPI::fromJsonValue(m_crawled_at, json[QString("crawled_at")]);
    m_crawled_at_isSet = !json[QString("crawled_at")].isNull() && m_crawled_at_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_srp_url_isValid = ::OpenAPI::fromJsonValue(m_srp_url, json[QString("srp_url")]);
    m_srp_url_isSet = !json[QString("srp_url")].isNull() && m_srp_url_isValid;
}

QString OAIDealerLandingPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealerLandingPage::asJsonObject() const {
    QJsonObject obj;
    if (m_crawled_at_isSet) {
        obj.insert(QString("crawled_at"), ::OpenAPI::toJsonValue(m_crawled_at));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_srp_url_isSet) {
        obj.insert(QString("srp_url"), ::OpenAPI::toJsonValue(m_srp_url));
    }
    return obj;
}

double OAIDealerLandingPage::getCrawledAt() const {
    return m_crawled_at;
}
void OAIDealerLandingPage::setCrawledAt(const double &crawled_at) {
    m_crawled_at = crawled_at;
    m_crawled_at_isSet = true;
}

bool OAIDealerLandingPage::is_crawled_at_Set() const{
    return m_crawled_at_isSet;
}

bool OAIDealerLandingPage::is_crawled_at_Valid() const{
    return m_crawled_at_isValid;
}

QString OAIDealerLandingPage::getHtml() const {
    return m_html;
}
void OAIDealerLandingPage::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIDealerLandingPage::is_html_Set() const{
    return m_html_isSet;
}

bool OAIDealerLandingPage::is_html_Valid() const{
    return m_html_isValid;
}

QString OAIDealerLandingPage::getSrpUrl() const {
    return m_srp_url;
}
void OAIDealerLandingPage::setSrpUrl(const QString &srp_url) {
    m_srp_url = srp_url;
    m_srp_url_isSet = true;
}

bool OAIDealerLandingPage::is_srp_url_Set() const{
    return m_srp_url_isSet;
}

bool OAIDealerLandingPage::is_srp_url_Valid() const{
    return m_srp_url_isValid;
}

bool OAIDealerLandingPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crawled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_srp_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealerLandingPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
