/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRVSearchFacets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRVSearchFacets::OAIRVSearchFacets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRVSearchFacets::OAIRVSearchFacets() {
    this->initializeModel();
}

OAIRVSearchFacets::~OAIRVSearchFacets() {}

void OAIRVSearchFacets::initializeModel() {

    m_area_isSet = false;
    m_area_isValid = false;

    m_awnings_isSet = false;
    m_awnings_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_dealer_id_isSet = false;
    m_dealer_id_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_exterior_color_isSet = false;
    m_exterior_color_isValid = false;

    m_fuel_type_isSet = false;
    m_fuel_type_isValid = false;

    m_interior_color_isSet = false;
    m_interior_color_isValid = false;

    m_inventory_type_isSet = false;
    m_inventory_type_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_seller_name_isSet = false;
    m_seller_name_isValid = false;

    m_sleeps_isSet = false;
    m_sleeps_isValid = false;

    m_slideouts_isSet = false;
    m_slideouts_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_transmission_isSet = false;
    m_transmission_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIRVSearchFacets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRVSearchFacets::fromJsonObject(QJsonObject json) {

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_awnings_isValid = ::OpenAPI::fromJsonValue(m_awnings, json[QString("awnings")]);
    m_awnings_isSet = !json[QString("awnings")].isNull() && m_awnings_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_dealer_id_isValid = ::OpenAPI::fromJsonValue(m_dealer_id, json[QString("dealer_id")]);
    m_dealer_id_isSet = !json[QString("dealer_id")].isNull() && m_dealer_id_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_exterior_color_isValid = ::OpenAPI::fromJsonValue(m_exterior_color, json[QString("exterior_color")]);
    m_exterior_color_isSet = !json[QString("exterior_color")].isNull() && m_exterior_color_isValid;

    m_fuel_type_isValid = ::OpenAPI::fromJsonValue(m_fuel_type, json[QString("fuel_type")]);
    m_fuel_type_isSet = !json[QString("fuel_type")].isNull() && m_fuel_type_isValid;

    m_interior_color_isValid = ::OpenAPI::fromJsonValue(m_interior_color, json[QString("interior_color")]);
    m_interior_color_isSet = !json[QString("interior_color")].isNull() && m_interior_color_isValid;

    m_inventory_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_type, json[QString("inventory_type")]);
    m_inventory_type_isSet = !json[QString("inventory_type")].isNull() && m_inventory_type_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_seller_name_isValid = ::OpenAPI::fromJsonValue(m_seller_name, json[QString("seller_name")]);
    m_seller_name_isSet = !json[QString("seller_name")].isNull() && m_seller_name_isValid;

    m_sleeps_isValid = ::OpenAPI::fromJsonValue(m_sleeps, json[QString("sleeps")]);
    m_sleeps_isSet = !json[QString("sleeps")].isNull() && m_sleeps_isValid;

    m_slideouts_isValid = ::OpenAPI::fromJsonValue(m_slideouts, json[QString("slideouts")]);
    m_slideouts_isSet = !json[QString("slideouts")].isNull() && m_slideouts_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_transmission_isValid = ::OpenAPI::fromJsonValue(m_transmission, json[QString("transmission")]);
    m_transmission_isSet = !json[QString("transmission")].isNull() && m_transmission_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIRVSearchFacets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRVSearchFacets::asJsonObject() const {
    QJsonObject obj;
    if (m_area.size() > 0) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_awnings.size() > 0) {
        obj.insert(QString("awnings"), ::OpenAPI::toJsonValue(m_awnings));
    }
    if (m_city.size() > 0) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_r_class.size() > 0) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_dealer_id.size() > 0) {
        obj.insert(QString("dealer_id"), ::OpenAPI::toJsonValue(m_dealer_id));
    }
    if (m_engine.size() > 0) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_exterior_color.size() > 0) {
        obj.insert(QString("exterior_color"), ::OpenAPI::toJsonValue(m_exterior_color));
    }
    if (m_fuel_type.size() > 0) {
        obj.insert(QString("fuel_type"), ::OpenAPI::toJsonValue(m_fuel_type));
    }
    if (m_interior_color.size() > 0) {
        obj.insert(QString("interior_color"), ::OpenAPI::toJsonValue(m_interior_color));
    }
    if (m_inventory_type.size() > 0) {
        obj.insert(QString("inventory_type"), ::OpenAPI::toJsonValue(m_inventory_type));
    }
    if (m_length.size() > 0) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_make.size() > 0) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model.size() > 0) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_seller_name.size() > 0) {
        obj.insert(QString("seller_name"), ::OpenAPI::toJsonValue(m_seller_name));
    }
    if (m_sleeps.size() > 0) {
        obj.insert(QString("sleeps"), ::OpenAPI::toJsonValue(m_sleeps));
    }
    if (m_slideouts.size() > 0) {
        obj.insert(QString("slideouts"), ::OpenAPI::toJsonValue(m_slideouts));
    }
    if (m_source.size() > 0) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state.size() > 0) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_transmission.size() > 0) {
        obj.insert(QString("transmission"), ::OpenAPI::toJsonValue(m_transmission));
    }
    if (m_year.size() > 0) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QList<OAIFacetItem> OAIRVSearchFacets::getArea() const {
    return m_area;
}
void OAIRVSearchFacets::setArea(const QList<OAIFacetItem> &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIRVSearchFacets::is_area_Set() const{
    return m_area_isSet;
}

bool OAIRVSearchFacets::is_area_Valid() const{
    return m_area_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getAwnings() const {
    return m_awnings;
}
void OAIRVSearchFacets::setAwnings(const QList<OAIFacetItem> &awnings) {
    m_awnings = awnings;
    m_awnings_isSet = true;
}

bool OAIRVSearchFacets::is_awnings_Set() const{
    return m_awnings_isSet;
}

bool OAIRVSearchFacets::is_awnings_Valid() const{
    return m_awnings_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getCity() const {
    return m_city;
}
void OAIRVSearchFacets::setCity(const QList<OAIFacetItem> &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIRVSearchFacets::is_city_Set() const{
    return m_city_isSet;
}

bool OAIRVSearchFacets::is_city_Valid() const{
    return m_city_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getRClass() const {
    return m_r_class;
}
void OAIRVSearchFacets::setRClass(const QList<OAIFacetItem> &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIRVSearchFacets::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIRVSearchFacets::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getDealerId() const {
    return m_dealer_id;
}
void OAIRVSearchFacets::setDealerId(const QList<OAIFacetItem> &dealer_id) {
    m_dealer_id = dealer_id;
    m_dealer_id_isSet = true;
}

bool OAIRVSearchFacets::is_dealer_id_Set() const{
    return m_dealer_id_isSet;
}

bool OAIRVSearchFacets::is_dealer_id_Valid() const{
    return m_dealer_id_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getEngine() const {
    return m_engine;
}
void OAIRVSearchFacets::setEngine(const QList<OAIFacetItem> &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIRVSearchFacets::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIRVSearchFacets::is_engine_Valid() const{
    return m_engine_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getExteriorColor() const {
    return m_exterior_color;
}
void OAIRVSearchFacets::setExteriorColor(const QList<OAIFacetItem> &exterior_color) {
    m_exterior_color = exterior_color;
    m_exterior_color_isSet = true;
}

bool OAIRVSearchFacets::is_exterior_color_Set() const{
    return m_exterior_color_isSet;
}

bool OAIRVSearchFacets::is_exterior_color_Valid() const{
    return m_exterior_color_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getFuelType() const {
    return m_fuel_type;
}
void OAIRVSearchFacets::setFuelType(const QList<OAIFacetItem> &fuel_type) {
    m_fuel_type = fuel_type;
    m_fuel_type_isSet = true;
}

bool OAIRVSearchFacets::is_fuel_type_Set() const{
    return m_fuel_type_isSet;
}

bool OAIRVSearchFacets::is_fuel_type_Valid() const{
    return m_fuel_type_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getInteriorColor() const {
    return m_interior_color;
}
void OAIRVSearchFacets::setInteriorColor(const QList<OAIFacetItem> &interior_color) {
    m_interior_color = interior_color;
    m_interior_color_isSet = true;
}

bool OAIRVSearchFacets::is_interior_color_Set() const{
    return m_interior_color_isSet;
}

bool OAIRVSearchFacets::is_interior_color_Valid() const{
    return m_interior_color_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getInventoryType() const {
    return m_inventory_type;
}
void OAIRVSearchFacets::setInventoryType(const QList<OAIFacetItem> &inventory_type) {
    m_inventory_type = inventory_type;
    m_inventory_type_isSet = true;
}

bool OAIRVSearchFacets::is_inventory_type_Set() const{
    return m_inventory_type_isSet;
}

bool OAIRVSearchFacets::is_inventory_type_Valid() const{
    return m_inventory_type_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getLength() const {
    return m_length;
}
void OAIRVSearchFacets::setLength(const QList<OAIFacetItem> &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIRVSearchFacets::is_length_Set() const{
    return m_length_isSet;
}

bool OAIRVSearchFacets::is_length_Valid() const{
    return m_length_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getMake() const {
    return m_make;
}
void OAIRVSearchFacets::setMake(const QList<OAIFacetItem> &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIRVSearchFacets::is_make_Set() const{
    return m_make_isSet;
}

bool OAIRVSearchFacets::is_make_Valid() const{
    return m_make_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getModel() const {
    return m_model;
}
void OAIRVSearchFacets::setModel(const QList<OAIFacetItem> &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIRVSearchFacets::is_model_Set() const{
    return m_model_isSet;
}

bool OAIRVSearchFacets::is_model_Valid() const{
    return m_model_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getSellerName() const {
    return m_seller_name;
}
void OAIRVSearchFacets::setSellerName(const QList<OAIFacetItem> &seller_name) {
    m_seller_name = seller_name;
    m_seller_name_isSet = true;
}

bool OAIRVSearchFacets::is_seller_name_Set() const{
    return m_seller_name_isSet;
}

bool OAIRVSearchFacets::is_seller_name_Valid() const{
    return m_seller_name_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getSleeps() const {
    return m_sleeps;
}
void OAIRVSearchFacets::setSleeps(const QList<OAIFacetItem> &sleeps) {
    m_sleeps = sleeps;
    m_sleeps_isSet = true;
}

bool OAIRVSearchFacets::is_sleeps_Set() const{
    return m_sleeps_isSet;
}

bool OAIRVSearchFacets::is_sleeps_Valid() const{
    return m_sleeps_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getSlideouts() const {
    return m_slideouts;
}
void OAIRVSearchFacets::setSlideouts(const QList<OAIFacetItem> &slideouts) {
    m_slideouts = slideouts;
    m_slideouts_isSet = true;
}

bool OAIRVSearchFacets::is_slideouts_Set() const{
    return m_slideouts_isSet;
}

bool OAIRVSearchFacets::is_slideouts_Valid() const{
    return m_slideouts_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getSource() const {
    return m_source;
}
void OAIRVSearchFacets::setSource(const QList<OAIFacetItem> &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIRVSearchFacets::is_source_Set() const{
    return m_source_isSet;
}

bool OAIRVSearchFacets::is_source_Valid() const{
    return m_source_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getState() const {
    return m_state;
}
void OAIRVSearchFacets::setState(const QList<OAIFacetItem> &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRVSearchFacets::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRVSearchFacets::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getTransmission() const {
    return m_transmission;
}
void OAIRVSearchFacets::setTransmission(const QList<OAIFacetItem> &transmission) {
    m_transmission = transmission;
    m_transmission_isSet = true;
}

bool OAIRVSearchFacets::is_transmission_Set() const{
    return m_transmission_isSet;
}

bool OAIRVSearchFacets::is_transmission_Valid() const{
    return m_transmission_isValid;
}

QList<OAIFacetItem> OAIRVSearchFacets::getYear() const {
    return m_year;
}
void OAIRVSearchFacets::setYear(const QList<OAIFacetItem> &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIRVSearchFacets::is_year_Set() const{
    return m_year_isSet;
}

bool OAIRVSearchFacets::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIRVSearchFacets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_awnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exterior_color.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interior_color.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_length.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_make.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sleeps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slideouts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRVSearchFacets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
