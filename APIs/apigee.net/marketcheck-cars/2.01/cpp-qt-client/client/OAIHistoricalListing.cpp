/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoricalListing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoricalListing::OAIHistoricalListing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoricalListing::OAIHistoricalListing() {
    this->initializeModel();
}

OAIHistoricalListing::~OAIHistoricalListing() {}

void OAIHistoricalListing::initializeModel() {

    m_carfax_1_owner_isSet = false;
    m_carfax_1_owner_isValid = false;

    m_carfax_clean_title_isSet = false;
    m_carfax_clean_title_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_dealer_id_isSet = false;
    m_dealer_id_isValid = false;

    m_dom_isSet = false;
    m_dom_isValid = false;

    m_dom_180_isSet = false;
    m_dom_180_isValid = false;

    m_dom_active_isSet = false;
    m_dom_active_isValid = false;

    m_exterior_color_isSet = false;
    m_exterior_color_isValid = false;

    m_financing_options_isSet = false;
    m_financing_options_isValid = false;

    m_first_seen_at_isSet = false;
    m_first_seen_at_isValid = false;

    m_first_seen_at_date_isSet = false;
    m_first_seen_at_date_isValid = false;

    m_heading_isSet = false;
    m_heading_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interior_color_isSet = false;
    m_interior_color_isValid = false;

    m_inventory_type_isSet = false;
    m_inventory_type_isValid = false;

    m_is_certified_isSet = false;
    m_is_certified_isValid = false;

    m_is_searchable_isSet = false;
    m_is_searchable_isValid = false;

    m_last_seen_at_isSet = false;
    m_last_seen_at_isValid = false;

    m_last_seen_at_date_isSet = false;
    m_last_seen_at_date_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_leasing_options_isSet = false;
    m_leasing_options_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_miles_isSet = false;
    m_miles_isValid = false;

    m_msrp_isSet = false;
    m_msrp_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_ref_miles_isSet = false;
    m_ref_miles_isValid = false;

    m_ref_miles_dt_isSet = false;
    m_ref_miles_dt_isValid = false;

    m_ref_price_isSet = false;
    m_ref_price_isValid = false;

    m_ref_price_dt_isSet = false;
    m_ref_price_dt_isValid = false;

    m_scraped_at_isSet = false;
    m_scraped_at_isValid = false;

    m_scraped_at_date_isSet = false;
    m_scraped_at_date_isValid = false;

    m_seller_name_isSet = false;
    m_seller_name_isValid = false;

    m_seller_name_o_isSet = false;
    m_seller_name_o_isValid = false;

    m_seller_type_isSet = false;
    m_seller_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_date_isSet = false;
    m_status_date_isValid = false;

    m_stock_no_isSet = false;
    m_stock_no_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_trim_r_isSet = false;
    m_trim_r_isValid = false;

    m_vdp_url_isSet = false;
    m_vdp_url_isValid = false;

    m_vin_isSet = false;
    m_vin_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIHistoricalListing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoricalListing::fromJsonObject(QJsonObject json) {

    m_carfax_1_owner_isValid = ::OpenAPI::fromJsonValue(m_carfax_1_owner, json[QString("carfax_1_owner")]);
    m_carfax_1_owner_isSet = !json[QString("carfax_1_owner")].isNull() && m_carfax_1_owner_isValid;

    m_carfax_clean_title_isValid = ::OpenAPI::fromJsonValue(m_carfax_clean_title, json[QString("carfax_clean_title")]);
    m_carfax_clean_title_isSet = !json[QString("carfax_clean_title")].isNull() && m_carfax_clean_title_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("data_source")]);
    m_data_source_isSet = !json[QString("data_source")].isNull() && m_data_source_isValid;

    m_dealer_id_isValid = ::OpenAPI::fromJsonValue(m_dealer_id, json[QString("dealer_id")]);
    m_dealer_id_isSet = !json[QString("dealer_id")].isNull() && m_dealer_id_isValid;

    m_dom_isValid = ::OpenAPI::fromJsonValue(m_dom, json[QString("dom")]);
    m_dom_isSet = !json[QString("dom")].isNull() && m_dom_isValid;

    m_dom_180_isValid = ::OpenAPI::fromJsonValue(m_dom_180, json[QString("dom_180")]);
    m_dom_180_isSet = !json[QString("dom_180")].isNull() && m_dom_180_isValid;

    m_dom_active_isValid = ::OpenAPI::fromJsonValue(m_dom_active, json[QString("dom_active")]);
    m_dom_active_isSet = !json[QString("dom_active")].isNull() && m_dom_active_isValid;

    m_exterior_color_isValid = ::OpenAPI::fromJsonValue(m_exterior_color, json[QString("exterior_color")]);
    m_exterior_color_isSet = !json[QString("exterior_color")].isNull() && m_exterior_color_isValid;

    m_financing_options_isValid = ::OpenAPI::fromJsonValue(m_financing_options, json[QString("financing_options")]);
    m_financing_options_isSet = !json[QString("financing_options")].isNull() && m_financing_options_isValid;

    m_first_seen_at_isValid = ::OpenAPI::fromJsonValue(m_first_seen_at, json[QString("first_seen_at")]);
    m_first_seen_at_isSet = !json[QString("first_seen_at")].isNull() && m_first_seen_at_isValid;

    m_first_seen_at_date_isValid = ::OpenAPI::fromJsonValue(m_first_seen_at_date, json[QString("first_seen_at_date")]);
    m_first_seen_at_date_isSet = !json[QString("first_seen_at_date")].isNull() && m_first_seen_at_date_isValid;

    m_heading_isValid = ::OpenAPI::fromJsonValue(m_heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interior_color_isValid = ::OpenAPI::fromJsonValue(m_interior_color, json[QString("interior_color")]);
    m_interior_color_isSet = !json[QString("interior_color")].isNull() && m_interior_color_isValid;

    m_inventory_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_type, json[QString("inventory_type")]);
    m_inventory_type_isSet = !json[QString("inventory_type")].isNull() && m_inventory_type_isValid;

    m_is_certified_isValid = ::OpenAPI::fromJsonValue(m_is_certified, json[QString("is_certified")]);
    m_is_certified_isSet = !json[QString("is_certified")].isNull() && m_is_certified_isValid;

    m_is_searchable_isValid = ::OpenAPI::fromJsonValue(m_is_searchable, json[QString("is_searchable")]);
    m_is_searchable_isSet = !json[QString("is_searchable")].isNull() && m_is_searchable_isValid;

    m_last_seen_at_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at, json[QString("last_seen_at")]);
    m_last_seen_at_isSet = !json[QString("last_seen_at")].isNull() && m_last_seen_at_isValid;

    m_last_seen_at_date_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at_date, json[QString("last_seen_at_date")]);
    m_last_seen_at_date_isSet = !json[QString("last_seen_at_date")].isNull() && m_last_seen_at_date_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_leasing_options_isValid = ::OpenAPI::fromJsonValue(m_leasing_options, json[QString("leasing_options")]);
    m_leasing_options_isSet = !json[QString("leasing_options")].isNull() && m_leasing_options_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_miles_isValid = ::OpenAPI::fromJsonValue(m_miles, json[QString("miles")]);
    m_miles_isSet = !json[QString("miles")].isNull() && m_miles_isValid;

    m_msrp_isValid = ::OpenAPI::fromJsonValue(m_msrp, json[QString("msrp")]);
    m_msrp_isSet = !json[QString("msrp")].isNull() && m_msrp_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_ref_miles_isValid = ::OpenAPI::fromJsonValue(m_ref_miles, json[QString("ref_miles")]);
    m_ref_miles_isSet = !json[QString("ref_miles")].isNull() && m_ref_miles_isValid;

    m_ref_miles_dt_isValid = ::OpenAPI::fromJsonValue(m_ref_miles_dt, json[QString("ref_miles_dt")]);
    m_ref_miles_dt_isSet = !json[QString("ref_miles_dt")].isNull() && m_ref_miles_dt_isValid;

    m_ref_price_isValid = ::OpenAPI::fromJsonValue(m_ref_price, json[QString("ref_price")]);
    m_ref_price_isSet = !json[QString("ref_price")].isNull() && m_ref_price_isValid;

    m_ref_price_dt_isValid = ::OpenAPI::fromJsonValue(m_ref_price_dt, json[QString("ref_price_dt")]);
    m_ref_price_dt_isSet = !json[QString("ref_price_dt")].isNull() && m_ref_price_dt_isValid;

    m_scraped_at_isValid = ::OpenAPI::fromJsonValue(m_scraped_at, json[QString("scraped_at")]);
    m_scraped_at_isSet = !json[QString("scraped_at")].isNull() && m_scraped_at_isValid;

    m_scraped_at_date_isValid = ::OpenAPI::fromJsonValue(m_scraped_at_date, json[QString("scraped_at_date")]);
    m_scraped_at_date_isSet = !json[QString("scraped_at_date")].isNull() && m_scraped_at_date_isValid;

    m_seller_name_isValid = ::OpenAPI::fromJsonValue(m_seller_name, json[QString("seller_name")]);
    m_seller_name_isSet = !json[QString("seller_name")].isNull() && m_seller_name_isValid;

    m_seller_name_o_isValid = ::OpenAPI::fromJsonValue(m_seller_name_o, json[QString("seller_name_o")]);
    m_seller_name_o_isSet = !json[QString("seller_name_o")].isNull() && m_seller_name_o_isValid;

    m_seller_type_isValid = ::OpenAPI::fromJsonValue(m_seller_type, json[QString("seller_type")]);
    m_seller_type_isSet = !json[QString("seller_type")].isNull() && m_seller_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_date_isValid = ::OpenAPI::fromJsonValue(m_status_date, json[QString("status_date")]);
    m_status_date_isSet = !json[QString("status_date")].isNull() && m_status_date_isValid;

    m_stock_no_isValid = ::OpenAPI::fromJsonValue(m_stock_no, json[QString("stock_no")]);
    m_stock_no_isSet = !json[QString("stock_no")].isNull() && m_stock_no_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_trim_r_isValid = ::OpenAPI::fromJsonValue(m_trim_r, json[QString("trim_r")]);
    m_trim_r_isSet = !json[QString("trim_r")].isNull() && m_trim_r_isValid;

    m_vdp_url_isValid = ::OpenAPI::fromJsonValue(m_vdp_url, json[QString("vdp_url")]);
    m_vdp_url_isSet = !json[QString("vdp_url")].isNull() && m_vdp_url_isValid;

    m_vin_isValid = ::OpenAPI::fromJsonValue(m_vin, json[QString("vin")]);
    m_vin_isSet = !json[QString("vin")].isNull() && m_vin_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIHistoricalListing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoricalListing::asJsonObject() const {
    QJsonObject obj;
    if (m_carfax_1_owner_isSet) {
        obj.insert(QString("carfax_1_owner"), ::OpenAPI::toJsonValue(m_carfax_1_owner));
    }
    if (m_carfax_clean_title_isSet) {
        obj.insert(QString("carfax_clean_title"), ::OpenAPI::toJsonValue(m_carfax_clean_title));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_data_source_isSet) {
        obj.insert(QString("data_source"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_dealer_id_isSet) {
        obj.insert(QString("dealer_id"), ::OpenAPI::toJsonValue(m_dealer_id));
    }
    if (m_dom_isSet) {
        obj.insert(QString("dom"), ::OpenAPI::toJsonValue(m_dom));
    }
    if (m_dom_180_isSet) {
        obj.insert(QString("dom_180"), ::OpenAPI::toJsonValue(m_dom_180));
    }
    if (m_dom_active_isSet) {
        obj.insert(QString("dom_active"), ::OpenAPI::toJsonValue(m_dom_active));
    }
    if (m_exterior_color_isSet) {
        obj.insert(QString("exterior_color"), ::OpenAPI::toJsonValue(m_exterior_color));
    }
    if (m_financing_options.size() > 0) {
        obj.insert(QString("financing_options"), ::OpenAPI::toJsonValue(m_financing_options));
    }
    if (m_first_seen_at_isSet) {
        obj.insert(QString("first_seen_at"), ::OpenAPI::toJsonValue(m_first_seen_at));
    }
    if (m_first_seen_at_date_isSet) {
        obj.insert(QString("first_seen_at_date"), ::OpenAPI::toJsonValue(m_first_seen_at_date));
    }
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(m_heading));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interior_color_isSet) {
        obj.insert(QString("interior_color"), ::OpenAPI::toJsonValue(m_interior_color));
    }
    if (m_inventory_type_isSet) {
        obj.insert(QString("inventory_type"), ::OpenAPI::toJsonValue(m_inventory_type));
    }
    if (m_is_certified_isSet) {
        obj.insert(QString("is_certified"), ::OpenAPI::toJsonValue(m_is_certified));
    }
    if (m_is_searchable_isSet) {
        obj.insert(QString("is_searchable"), ::OpenAPI::toJsonValue(m_is_searchable));
    }
    if (m_last_seen_at_isSet) {
        obj.insert(QString("last_seen_at"), ::OpenAPI::toJsonValue(m_last_seen_at));
    }
    if (m_last_seen_at_date_isSet) {
        obj.insert(QString("last_seen_at_date"), ::OpenAPI::toJsonValue(m_last_seen_at_date));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_leasing_options.size() > 0) {
        obj.insert(QString("leasing_options"), ::OpenAPI::toJsonValue(m_leasing_options));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_miles_isSet) {
        obj.insert(QString("miles"), ::OpenAPI::toJsonValue(m_miles));
    }
    if (m_msrp_isSet) {
        obj.insert(QString("msrp"), ::OpenAPI::toJsonValue(m_msrp));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_ref_miles_isSet) {
        obj.insert(QString("ref_miles"), ::OpenAPI::toJsonValue(m_ref_miles));
    }
    if (m_ref_miles_dt_isSet) {
        obj.insert(QString("ref_miles_dt"), ::OpenAPI::toJsonValue(m_ref_miles_dt));
    }
    if (m_ref_price_isSet) {
        obj.insert(QString("ref_price"), ::OpenAPI::toJsonValue(m_ref_price));
    }
    if (m_ref_price_dt_isSet) {
        obj.insert(QString("ref_price_dt"), ::OpenAPI::toJsonValue(m_ref_price_dt));
    }
    if (m_scraped_at_isSet) {
        obj.insert(QString("scraped_at"), ::OpenAPI::toJsonValue(m_scraped_at));
    }
    if (m_scraped_at_date_isSet) {
        obj.insert(QString("scraped_at_date"), ::OpenAPI::toJsonValue(m_scraped_at_date));
    }
    if (m_seller_name_isSet) {
        obj.insert(QString("seller_name"), ::OpenAPI::toJsonValue(m_seller_name));
    }
    if (m_seller_name_o_isSet) {
        obj.insert(QString("seller_name_o"), ::OpenAPI::toJsonValue(m_seller_name_o));
    }
    if (m_seller_type_isSet) {
        obj.insert(QString("seller_type"), ::OpenAPI::toJsonValue(m_seller_type));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_date_isSet) {
        obj.insert(QString("status_date"), ::OpenAPI::toJsonValue(m_status_date));
    }
    if (m_stock_no_isSet) {
        obj.insert(QString("stock_no"), ::OpenAPI::toJsonValue(m_stock_no));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_trim_r_isSet) {
        obj.insert(QString("trim_r"), ::OpenAPI::toJsonValue(m_trim_r));
    }
    if (m_vdp_url_isSet) {
        obj.insert(QString("vdp_url"), ::OpenAPI::toJsonValue(m_vdp_url));
    }
    if (m_vin_isSet) {
        obj.insert(QString("vin"), ::OpenAPI::toJsonValue(m_vin));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

bool OAIHistoricalListing::isCarfax1Owner() const {
    return m_carfax_1_owner;
}
void OAIHistoricalListing::setCarfax1Owner(const bool &carfax_1_owner) {
    m_carfax_1_owner = carfax_1_owner;
    m_carfax_1_owner_isSet = true;
}

bool OAIHistoricalListing::is_carfax_1_owner_Set() const{
    return m_carfax_1_owner_isSet;
}

bool OAIHistoricalListing::is_carfax_1_owner_Valid() const{
    return m_carfax_1_owner_isValid;
}

bool OAIHistoricalListing::isCarfaxCleanTitle() const {
    return m_carfax_clean_title;
}
void OAIHistoricalListing::setCarfaxCleanTitle(const bool &carfax_clean_title) {
    m_carfax_clean_title = carfax_clean_title;
    m_carfax_clean_title_isSet = true;
}

bool OAIHistoricalListing::is_carfax_clean_title_Set() const{
    return m_carfax_clean_title_isSet;
}

bool OAIHistoricalListing::is_carfax_clean_title_Valid() const{
    return m_carfax_clean_title_isValid;
}

QString OAIHistoricalListing::getCity() const {
    return m_city;
}
void OAIHistoricalListing::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIHistoricalListing::is_city_Set() const{
    return m_city_isSet;
}

bool OAIHistoricalListing::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIHistoricalListing::getDataSource() const {
    return m_data_source;
}
void OAIHistoricalListing::setDataSource(const QString &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIHistoricalListing::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIHistoricalListing::is_data_source_Valid() const{
    return m_data_source_isValid;
}

qint32 OAIHistoricalListing::getDealerId() const {
    return m_dealer_id;
}
void OAIHistoricalListing::setDealerId(const qint32 &dealer_id) {
    m_dealer_id = dealer_id;
    m_dealer_id_isSet = true;
}

bool OAIHistoricalListing::is_dealer_id_Set() const{
    return m_dealer_id_isSet;
}

bool OAIHistoricalListing::is_dealer_id_Valid() const{
    return m_dealer_id_isValid;
}

qint32 OAIHistoricalListing::getDom() const {
    return m_dom;
}
void OAIHistoricalListing::setDom(const qint32 &dom) {
    m_dom = dom;
    m_dom_isSet = true;
}

bool OAIHistoricalListing::is_dom_Set() const{
    return m_dom_isSet;
}

bool OAIHistoricalListing::is_dom_Valid() const{
    return m_dom_isValid;
}

qint32 OAIHistoricalListing::getDom180() const {
    return m_dom_180;
}
void OAIHistoricalListing::setDom180(const qint32 &dom_180) {
    m_dom_180 = dom_180;
    m_dom_180_isSet = true;
}

bool OAIHistoricalListing::is_dom_180_Set() const{
    return m_dom_180_isSet;
}

bool OAIHistoricalListing::is_dom_180_Valid() const{
    return m_dom_180_isValid;
}

qint32 OAIHistoricalListing::getDomActive() const {
    return m_dom_active;
}
void OAIHistoricalListing::setDomActive(const qint32 &dom_active) {
    m_dom_active = dom_active;
    m_dom_active_isSet = true;
}

bool OAIHistoricalListing::is_dom_active_Set() const{
    return m_dom_active_isSet;
}

bool OAIHistoricalListing::is_dom_active_Valid() const{
    return m_dom_active_isValid;
}

QString OAIHistoricalListing::getExteriorColor() const {
    return m_exterior_color;
}
void OAIHistoricalListing::setExteriorColor(const QString &exterior_color) {
    m_exterior_color = exterior_color;
    m_exterior_color_isSet = true;
}

bool OAIHistoricalListing::is_exterior_color_Set() const{
    return m_exterior_color_isSet;
}

bool OAIHistoricalListing::is_exterior_color_Valid() const{
    return m_exterior_color_isValid;
}

QList<OAIListingFinance> OAIHistoricalListing::getFinancingOptions() const {
    return m_financing_options;
}
void OAIHistoricalListing::setFinancingOptions(const QList<OAIListingFinance> &financing_options) {
    m_financing_options = financing_options;
    m_financing_options_isSet = true;
}

bool OAIHistoricalListing::is_financing_options_Set() const{
    return m_financing_options_isSet;
}

bool OAIHistoricalListing::is_financing_options_Valid() const{
    return m_financing_options_isValid;
}

qint32 OAIHistoricalListing::getFirstSeenAt() const {
    return m_first_seen_at;
}
void OAIHistoricalListing::setFirstSeenAt(const qint32 &first_seen_at) {
    m_first_seen_at = first_seen_at;
    m_first_seen_at_isSet = true;
}

bool OAIHistoricalListing::is_first_seen_at_Set() const{
    return m_first_seen_at_isSet;
}

bool OAIHistoricalListing::is_first_seen_at_Valid() const{
    return m_first_seen_at_isValid;
}

QString OAIHistoricalListing::getFirstSeenAtDate() const {
    return m_first_seen_at_date;
}
void OAIHistoricalListing::setFirstSeenAtDate(const QString &first_seen_at_date) {
    m_first_seen_at_date = first_seen_at_date;
    m_first_seen_at_date_isSet = true;
}

bool OAIHistoricalListing::is_first_seen_at_date_Set() const{
    return m_first_seen_at_date_isSet;
}

bool OAIHistoricalListing::is_first_seen_at_date_Valid() const{
    return m_first_seen_at_date_isValid;
}

QString OAIHistoricalListing::getHeading() const {
    return m_heading;
}
void OAIHistoricalListing::setHeading(const QString &heading) {
    m_heading = heading;
    m_heading_isSet = true;
}

bool OAIHistoricalListing::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAIHistoricalListing::is_heading_Valid() const{
    return m_heading_isValid;
}

QString OAIHistoricalListing::getId() const {
    return m_id;
}
void OAIHistoricalListing::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHistoricalListing::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHistoricalListing::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIHistoricalListing::getInteriorColor() const {
    return m_interior_color;
}
void OAIHistoricalListing::setInteriorColor(const QString &interior_color) {
    m_interior_color = interior_color;
    m_interior_color_isSet = true;
}

bool OAIHistoricalListing::is_interior_color_Set() const{
    return m_interior_color_isSet;
}

bool OAIHistoricalListing::is_interior_color_Valid() const{
    return m_interior_color_isValid;
}

QString OAIHistoricalListing::getInventoryType() const {
    return m_inventory_type;
}
void OAIHistoricalListing::setInventoryType(const QString &inventory_type) {
    m_inventory_type = inventory_type;
    m_inventory_type_isSet = true;
}

bool OAIHistoricalListing::is_inventory_type_Set() const{
    return m_inventory_type_isSet;
}

bool OAIHistoricalListing::is_inventory_type_Valid() const{
    return m_inventory_type_isValid;
}

qint32 OAIHistoricalListing::getIsCertified() const {
    return m_is_certified;
}
void OAIHistoricalListing::setIsCertified(const qint32 &is_certified) {
    m_is_certified = is_certified;
    m_is_certified_isSet = true;
}

bool OAIHistoricalListing::is_is_certified_Set() const{
    return m_is_certified_isSet;
}

bool OAIHistoricalListing::is_is_certified_Valid() const{
    return m_is_certified_isValid;
}

QString OAIHistoricalListing::getIsSearchable() const {
    return m_is_searchable;
}
void OAIHistoricalListing::setIsSearchable(const QString &is_searchable) {
    m_is_searchable = is_searchable;
    m_is_searchable_isSet = true;
}

bool OAIHistoricalListing::is_is_searchable_Set() const{
    return m_is_searchable_isSet;
}

bool OAIHistoricalListing::is_is_searchable_Valid() const{
    return m_is_searchable_isValid;
}

qint32 OAIHistoricalListing::getLastSeenAt() const {
    return m_last_seen_at;
}
void OAIHistoricalListing::setLastSeenAt(const qint32 &last_seen_at) {
    m_last_seen_at = last_seen_at;
    m_last_seen_at_isSet = true;
}

bool OAIHistoricalListing::is_last_seen_at_Set() const{
    return m_last_seen_at_isSet;
}

bool OAIHistoricalListing::is_last_seen_at_Valid() const{
    return m_last_seen_at_isValid;
}

QString OAIHistoricalListing::getLastSeenAtDate() const {
    return m_last_seen_at_date;
}
void OAIHistoricalListing::setLastSeenAtDate(const QString &last_seen_at_date) {
    m_last_seen_at_date = last_seen_at_date;
    m_last_seen_at_date_isSet = true;
}

bool OAIHistoricalListing::is_last_seen_at_date_Set() const{
    return m_last_seen_at_date_isSet;
}

bool OAIHistoricalListing::is_last_seen_at_date_Valid() const{
    return m_last_seen_at_date_isValid;
}

QString OAIHistoricalListing::getLatitude() const {
    return m_latitude;
}
void OAIHistoricalListing::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIHistoricalListing::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIHistoricalListing::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QList<OAIListingLease> OAIHistoricalListing::getLeasingOptions() const {
    return m_leasing_options;
}
void OAIHistoricalListing::setLeasingOptions(const QList<OAIListingLease> &leasing_options) {
    m_leasing_options = leasing_options;
    m_leasing_options_isSet = true;
}

bool OAIHistoricalListing::is_leasing_options_Set() const{
    return m_leasing_options_isSet;
}

bool OAIHistoricalListing::is_leasing_options_Valid() const{
    return m_leasing_options_isValid;
}

QString OAIHistoricalListing::getLongitude() const {
    return m_longitude;
}
void OAIHistoricalListing::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIHistoricalListing::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIHistoricalListing::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAIHistoricalListing::getMiles() const {
    return m_miles;
}
void OAIHistoricalListing::setMiles(const qint32 &miles) {
    m_miles = miles;
    m_miles_isSet = true;
}

bool OAIHistoricalListing::is_miles_Set() const{
    return m_miles_isSet;
}

bool OAIHistoricalListing::is_miles_Valid() const{
    return m_miles_isValid;
}

qint32 OAIHistoricalListing::getMsrp() const {
    return m_msrp;
}
void OAIHistoricalListing::setMsrp(const qint32 &msrp) {
    m_msrp = msrp;
    m_msrp_isSet = true;
}

bool OAIHistoricalListing::is_msrp_Set() const{
    return m_msrp_isSet;
}

bool OAIHistoricalListing::is_msrp_Valid() const{
    return m_msrp_isValid;
}

qint32 OAIHistoricalListing::getPrice() const {
    return m_price;
}
void OAIHistoricalListing::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIHistoricalListing::is_price_Set() const{
    return m_price_isSet;
}

bool OAIHistoricalListing::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIHistoricalListing::getRefMiles() const {
    return m_ref_miles;
}
void OAIHistoricalListing::setRefMiles(const QString &ref_miles) {
    m_ref_miles = ref_miles;
    m_ref_miles_isSet = true;
}

bool OAIHistoricalListing::is_ref_miles_Set() const{
    return m_ref_miles_isSet;
}

bool OAIHistoricalListing::is_ref_miles_Valid() const{
    return m_ref_miles_isValid;
}

qint32 OAIHistoricalListing::getRefMilesDt() const {
    return m_ref_miles_dt;
}
void OAIHistoricalListing::setRefMilesDt(const qint32 &ref_miles_dt) {
    m_ref_miles_dt = ref_miles_dt;
    m_ref_miles_dt_isSet = true;
}

bool OAIHistoricalListing::is_ref_miles_dt_Set() const{
    return m_ref_miles_dt_isSet;
}

bool OAIHistoricalListing::is_ref_miles_dt_Valid() const{
    return m_ref_miles_dt_isValid;
}

QString OAIHistoricalListing::getRefPrice() const {
    return m_ref_price;
}
void OAIHistoricalListing::setRefPrice(const QString &ref_price) {
    m_ref_price = ref_price;
    m_ref_price_isSet = true;
}

bool OAIHistoricalListing::is_ref_price_Set() const{
    return m_ref_price_isSet;
}

bool OAIHistoricalListing::is_ref_price_Valid() const{
    return m_ref_price_isValid;
}

qint32 OAIHistoricalListing::getRefPriceDt() const {
    return m_ref_price_dt;
}
void OAIHistoricalListing::setRefPriceDt(const qint32 &ref_price_dt) {
    m_ref_price_dt = ref_price_dt;
    m_ref_price_dt_isSet = true;
}

bool OAIHistoricalListing::is_ref_price_dt_Set() const{
    return m_ref_price_dt_isSet;
}

bool OAIHistoricalListing::is_ref_price_dt_Valid() const{
    return m_ref_price_dt_isValid;
}

qint32 OAIHistoricalListing::getScrapedAt() const {
    return m_scraped_at;
}
void OAIHistoricalListing::setScrapedAt(const qint32 &scraped_at) {
    m_scraped_at = scraped_at;
    m_scraped_at_isSet = true;
}

bool OAIHistoricalListing::is_scraped_at_Set() const{
    return m_scraped_at_isSet;
}

bool OAIHistoricalListing::is_scraped_at_Valid() const{
    return m_scraped_at_isValid;
}

QString OAIHistoricalListing::getScrapedAtDate() const {
    return m_scraped_at_date;
}
void OAIHistoricalListing::setScrapedAtDate(const QString &scraped_at_date) {
    m_scraped_at_date = scraped_at_date;
    m_scraped_at_date_isSet = true;
}

bool OAIHistoricalListing::is_scraped_at_date_Set() const{
    return m_scraped_at_date_isSet;
}

bool OAIHistoricalListing::is_scraped_at_date_Valid() const{
    return m_scraped_at_date_isValid;
}

QString OAIHistoricalListing::getSellerName() const {
    return m_seller_name;
}
void OAIHistoricalListing::setSellerName(const QString &seller_name) {
    m_seller_name = seller_name;
    m_seller_name_isSet = true;
}

bool OAIHistoricalListing::is_seller_name_Set() const{
    return m_seller_name_isSet;
}

bool OAIHistoricalListing::is_seller_name_Valid() const{
    return m_seller_name_isValid;
}

QString OAIHistoricalListing::getSellerNameO() const {
    return m_seller_name_o;
}
void OAIHistoricalListing::setSellerNameO(const QString &seller_name_o) {
    m_seller_name_o = seller_name_o;
    m_seller_name_o_isSet = true;
}

bool OAIHistoricalListing::is_seller_name_o_Set() const{
    return m_seller_name_o_isSet;
}

bool OAIHistoricalListing::is_seller_name_o_Valid() const{
    return m_seller_name_o_isValid;
}

QString OAIHistoricalListing::getSellerType() const {
    return m_seller_type;
}
void OAIHistoricalListing::setSellerType(const QString &seller_type) {
    m_seller_type = seller_type;
    m_seller_type_isSet = true;
}

bool OAIHistoricalListing::is_seller_type_Set() const{
    return m_seller_type_isSet;
}

bool OAIHistoricalListing::is_seller_type_Valid() const{
    return m_seller_type_isValid;
}

QString OAIHistoricalListing::getSource() const {
    return m_source;
}
void OAIHistoricalListing::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIHistoricalListing::is_source_Set() const{
    return m_source_isSet;
}

bool OAIHistoricalListing::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIHistoricalListing::getState() const {
    return m_state;
}
void OAIHistoricalListing::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIHistoricalListing::is_state_Set() const{
    return m_state_isSet;
}

bool OAIHistoricalListing::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIHistoricalListing::getStatusDate() const {
    return m_status_date;
}
void OAIHistoricalListing::setStatusDate(const qint32 &status_date) {
    m_status_date = status_date;
    m_status_date_isSet = true;
}

bool OAIHistoricalListing::is_status_date_Set() const{
    return m_status_date_isSet;
}

bool OAIHistoricalListing::is_status_date_Valid() const{
    return m_status_date_isValid;
}

QString OAIHistoricalListing::getStockNo() const {
    return m_stock_no;
}
void OAIHistoricalListing::setStockNo(const QString &stock_no) {
    m_stock_no = stock_no;
    m_stock_no_isSet = true;
}

bool OAIHistoricalListing::is_stock_no_Set() const{
    return m_stock_no_isSet;
}

bool OAIHistoricalListing::is_stock_no_Valid() const{
    return m_stock_no_isValid;
}

QString OAIHistoricalListing::getStreet() const {
    return m_street;
}
void OAIHistoricalListing::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIHistoricalListing::is_street_Set() const{
    return m_street_isSet;
}

bool OAIHistoricalListing::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIHistoricalListing::getTrimR() const {
    return m_trim_r;
}
void OAIHistoricalListing::setTrimR(const QString &trim_r) {
    m_trim_r = trim_r;
    m_trim_r_isSet = true;
}

bool OAIHistoricalListing::is_trim_r_Set() const{
    return m_trim_r_isSet;
}

bool OAIHistoricalListing::is_trim_r_Valid() const{
    return m_trim_r_isValid;
}

QString OAIHistoricalListing::getVdpUrl() const {
    return m_vdp_url;
}
void OAIHistoricalListing::setVdpUrl(const QString &vdp_url) {
    m_vdp_url = vdp_url;
    m_vdp_url_isSet = true;
}

bool OAIHistoricalListing::is_vdp_url_Set() const{
    return m_vdp_url_isSet;
}

bool OAIHistoricalListing::is_vdp_url_Valid() const{
    return m_vdp_url_isValid;
}

QString OAIHistoricalListing::getVin() const {
    return m_vin;
}
void OAIHistoricalListing::setVin(const QString &vin) {
    m_vin = vin;
    m_vin_isSet = true;
}

bool OAIHistoricalListing::is_vin_Set() const{
    return m_vin_isSet;
}

bool OAIHistoricalListing::is_vin_Valid() const{
    return m_vin_isValid;
}

QString OAIHistoricalListing::getZip() const {
    return m_zip;
}
void OAIHistoricalListing::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIHistoricalListing::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIHistoricalListing::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIHistoricalListing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_carfax_1_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carfax_clean_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_180_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exterior_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financing_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_seen_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interior_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_certified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_searchable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leasing_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_miles_dt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_price_dt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scraped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scraped_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_name_o_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_r_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vdp_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoricalListing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
