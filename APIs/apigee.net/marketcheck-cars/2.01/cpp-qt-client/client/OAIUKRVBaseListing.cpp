/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUKRVBaseListing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUKRVBaseListing::OAIUKRVBaseListing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUKRVBaseListing::OAIUKRVBaseListing() {
    this->initializeModel();
}

OAIUKRVBaseListing::~OAIUKRVBaseListing() {}

void OAIUKRVBaseListing::initializeModel() {

    m_availability_status_isSet = false;
    m_availability_status_isValid = false;

    m_build_isSet = false;
    m_build_isValid = false;

    m_currency_indicator_isSet = false;
    m_currency_indicator_isValid = false;

    m_dealer_isSet = false;
    m_dealer_isValid = false;

    m_dist_isSet = false;
    m_dist_isValid = false;

    m_exterior_color_isSet = false;
    m_exterior_color_isValid = false;

    m_first_seen_at_isSet = false;
    m_first_seen_at_isValid = false;

    m_first_seen_at_date_isSet = false;
    m_first_seen_at_date_isValid = false;

    m_heading_isSet = false;
    m_heading_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interior_color_isSet = false;
    m_interior_color_isValid = false;

    m_inventory_type_isSet = false;
    m_inventory_type_isValid = false;

    m_last_seen_at_isSet = false;
    m_last_seen_at_isValid = false;

    m_last_seen_at_date_isSet = false;
    m_last_seen_at_date_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_miles_isSet = false;
    m_miles_isValid = false;

    m_miles_indicator_isSet = false;
    m_miles_indicator_isValid = false;

    m_mot_expires_isSet = false;
    m_mot_expires_isValid = false;

    m_motorhome_build_isSet = false;
    m_motorhome_build_isValid = false;

    m_msrp_isSet = false;
    m_msrp_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_scraped_at_isSet = false;
    m_scraped_at_isValid = false;

    m_scraped_at_date_isSet = false;
    m_scraped_at_date_isValid = false;

    m_seller_type_isSet = false;
    m_seller_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_stock_no_isSet = false;
    m_stock_no_isValid = false;

    m_vdp_url_isSet = false;
    m_vdp_url_isValid = false;

    m_vin_isSet = false;
    m_vin_isValid = false;
}

void OAIUKRVBaseListing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUKRVBaseListing::fromJsonObject(QJsonObject json) {

    m_availability_status_isValid = ::OpenAPI::fromJsonValue(m_availability_status, json[QString("availability_status")]);
    m_availability_status_isSet = !json[QString("availability_status")].isNull() && m_availability_status_isValid;

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_currency_indicator_isValid = ::OpenAPI::fromJsonValue(m_currency_indicator, json[QString("currency_indicator")]);
    m_currency_indicator_isSet = !json[QString("currency_indicator")].isNull() && m_currency_indicator_isValid;

    m_dealer_isValid = ::OpenAPI::fromJsonValue(m_dealer, json[QString("dealer")]);
    m_dealer_isSet = !json[QString("dealer")].isNull() && m_dealer_isValid;

    m_dist_isValid = ::OpenAPI::fromJsonValue(m_dist, json[QString("dist")]);
    m_dist_isSet = !json[QString("dist")].isNull() && m_dist_isValid;

    m_exterior_color_isValid = ::OpenAPI::fromJsonValue(m_exterior_color, json[QString("exterior_color")]);
    m_exterior_color_isSet = !json[QString("exterior_color")].isNull() && m_exterior_color_isValid;

    m_first_seen_at_isValid = ::OpenAPI::fromJsonValue(m_first_seen_at, json[QString("first_seen_at")]);
    m_first_seen_at_isSet = !json[QString("first_seen_at")].isNull() && m_first_seen_at_isValid;

    m_first_seen_at_date_isValid = ::OpenAPI::fromJsonValue(m_first_seen_at_date, json[QString("first_seen_at_date")]);
    m_first_seen_at_date_isSet = !json[QString("first_seen_at_date")].isNull() && m_first_seen_at_date_isValid;

    m_heading_isValid = ::OpenAPI::fromJsonValue(m_heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interior_color_isValid = ::OpenAPI::fromJsonValue(m_interior_color, json[QString("interior_color")]);
    m_interior_color_isSet = !json[QString("interior_color")].isNull() && m_interior_color_isValid;

    m_inventory_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_type, json[QString("inventory_type")]);
    m_inventory_type_isSet = !json[QString("inventory_type")].isNull() && m_inventory_type_isValid;

    m_last_seen_at_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at, json[QString("last_seen_at")]);
    m_last_seen_at_isSet = !json[QString("last_seen_at")].isNull() && m_last_seen_at_isValid;

    m_last_seen_at_date_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at_date, json[QString("last_seen_at_date")]);
    m_last_seen_at_date_isSet = !json[QString("last_seen_at_date")].isNull() && m_last_seen_at_date_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_miles_isValid = ::OpenAPI::fromJsonValue(m_miles, json[QString("miles")]);
    m_miles_isSet = !json[QString("miles")].isNull() && m_miles_isValid;

    m_miles_indicator_isValid = ::OpenAPI::fromJsonValue(m_miles_indicator, json[QString("miles_indicator")]);
    m_miles_indicator_isSet = !json[QString("miles_indicator")].isNull() && m_miles_indicator_isValid;

    m_mot_expires_isValid = ::OpenAPI::fromJsonValue(m_mot_expires, json[QString("mot_expires")]);
    m_mot_expires_isSet = !json[QString("mot_expires")].isNull() && m_mot_expires_isValid;

    m_motorhome_build_isValid = ::OpenAPI::fromJsonValue(m_motorhome_build, json[QString("motorhome_build")]);
    m_motorhome_build_isSet = !json[QString("motorhome_build")].isNull() && m_motorhome_build_isValid;

    m_msrp_isValid = ::OpenAPI::fromJsonValue(m_msrp, json[QString("msrp")]);
    m_msrp_isSet = !json[QString("msrp")].isNull() && m_msrp_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_scraped_at_isValid = ::OpenAPI::fromJsonValue(m_scraped_at, json[QString("scraped_at")]);
    m_scraped_at_isSet = !json[QString("scraped_at")].isNull() && m_scraped_at_isValid;

    m_scraped_at_date_isValid = ::OpenAPI::fromJsonValue(m_scraped_at_date, json[QString("scraped_at_date")]);
    m_scraped_at_date_isSet = !json[QString("scraped_at_date")].isNull() && m_scraped_at_date_isValid;

    m_seller_type_isValid = ::OpenAPI::fromJsonValue(m_seller_type, json[QString("seller_type")]);
    m_seller_type_isSet = !json[QString("seller_type")].isNull() && m_seller_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_stock_no_isValid = ::OpenAPI::fromJsonValue(m_stock_no, json[QString("stock_no")]);
    m_stock_no_isSet = !json[QString("stock_no")].isNull() && m_stock_no_isValid;

    m_vdp_url_isValid = ::OpenAPI::fromJsonValue(m_vdp_url, json[QString("vdp_url")]);
    m_vdp_url_isSet = !json[QString("vdp_url")].isNull() && m_vdp_url_isValid;

    m_vin_isValid = ::OpenAPI::fromJsonValue(m_vin, json[QString("vin")]);
    m_vin_isSet = !json[QString("vin")].isNull() && m_vin_isValid;
}

QString OAIUKRVBaseListing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUKRVBaseListing::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_status_isSet) {
        obj.insert(QString("availability_status"), ::OpenAPI::toJsonValue(m_availability_status));
    }
    if (m_build.isSet()) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_currency_indicator_isSet) {
        obj.insert(QString("currency_indicator"), ::OpenAPI::toJsonValue(m_currency_indicator));
    }
    if (m_dealer.isSet()) {
        obj.insert(QString("dealer"), ::OpenAPI::toJsonValue(m_dealer));
    }
    if (m_dist_isSet) {
        obj.insert(QString("dist"), ::OpenAPI::toJsonValue(m_dist));
    }
    if (m_exterior_color_isSet) {
        obj.insert(QString("exterior_color"), ::OpenAPI::toJsonValue(m_exterior_color));
    }
    if (m_first_seen_at_isSet) {
        obj.insert(QString("first_seen_at"), ::OpenAPI::toJsonValue(m_first_seen_at));
    }
    if (m_first_seen_at_date_isSet) {
        obj.insert(QString("first_seen_at_date"), ::OpenAPI::toJsonValue(m_first_seen_at_date));
    }
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(m_heading));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interior_color_isSet) {
        obj.insert(QString("interior_color"), ::OpenAPI::toJsonValue(m_interior_color));
    }
    if (m_inventory_type_isSet) {
        obj.insert(QString("inventory_type"), ::OpenAPI::toJsonValue(m_inventory_type));
    }
    if (m_last_seen_at_isSet) {
        obj.insert(QString("last_seen_at"), ::OpenAPI::toJsonValue(m_last_seen_at));
    }
    if (m_last_seen_at_date_isSet) {
        obj.insert(QString("last_seen_at_date"), ::OpenAPI::toJsonValue(m_last_seen_at_date));
    }
    if (m_media.isSet()) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_miles_isSet) {
        obj.insert(QString("miles"), ::OpenAPI::toJsonValue(m_miles));
    }
    if (m_miles_indicator_isSet) {
        obj.insert(QString("miles_indicator"), ::OpenAPI::toJsonValue(m_miles_indicator));
    }
    if (m_mot_expires_isSet) {
        obj.insert(QString("mot_expires"), ::OpenAPI::toJsonValue(m_mot_expires));
    }
    if (m_motorhome_build_isSet) {
        obj.insert(QString("motorhome_build"), ::OpenAPI::toJsonValue(m_motorhome_build));
    }
    if (m_msrp_isSet) {
        obj.insert(QString("msrp"), ::OpenAPI::toJsonValue(m_msrp));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_scraped_at_isSet) {
        obj.insert(QString("scraped_at"), ::OpenAPI::toJsonValue(m_scraped_at));
    }
    if (m_scraped_at_date_isSet) {
        obj.insert(QString("scraped_at_date"), ::OpenAPI::toJsonValue(m_scraped_at_date));
    }
    if (m_seller_type_isSet) {
        obj.insert(QString("seller_type"), ::OpenAPI::toJsonValue(m_seller_type));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_stock_no_isSet) {
        obj.insert(QString("stock_no"), ::OpenAPI::toJsonValue(m_stock_no));
    }
    if (m_vdp_url_isSet) {
        obj.insert(QString("vdp_url"), ::OpenAPI::toJsonValue(m_vdp_url));
    }
    if (m_vin_isSet) {
        obj.insert(QString("vin"), ::OpenAPI::toJsonValue(m_vin));
    }
    return obj;
}

QString OAIUKRVBaseListing::getAvailabilityStatus() const {
    return m_availability_status;
}
void OAIUKRVBaseListing::setAvailabilityStatus(const QString &availability_status) {
    m_availability_status = availability_status;
    m_availability_status_isSet = true;
}

bool OAIUKRVBaseListing::is_availability_status_Set() const{
    return m_availability_status_isSet;
}

bool OAIUKRVBaseListing::is_availability_status_Valid() const{
    return m_availability_status_isValid;
}

OAIUKRVBuild OAIUKRVBaseListing::getBuild() const {
    return m_build;
}
void OAIUKRVBaseListing::setBuild(const OAIUKRVBuild &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIUKRVBaseListing::is_build_Set() const{
    return m_build_isSet;
}

bool OAIUKRVBaseListing::is_build_Valid() const{
    return m_build_isValid;
}

QString OAIUKRVBaseListing::getCurrencyIndicator() const {
    return m_currency_indicator;
}
void OAIUKRVBaseListing::setCurrencyIndicator(const QString &currency_indicator) {
    m_currency_indicator = currency_indicator;
    m_currency_indicator_isSet = true;
}

bool OAIUKRVBaseListing::is_currency_indicator_Set() const{
    return m_currency_indicator_isSet;
}

bool OAIUKRVBaseListing::is_currency_indicator_Valid() const{
    return m_currency_indicator_isValid;
}

OAINestDealer OAIUKRVBaseListing::getDealer() const {
    return m_dealer;
}
void OAIUKRVBaseListing::setDealer(const OAINestDealer &dealer) {
    m_dealer = dealer;
    m_dealer_isSet = true;
}

bool OAIUKRVBaseListing::is_dealer_Set() const{
    return m_dealer_isSet;
}

bool OAIUKRVBaseListing::is_dealer_Valid() const{
    return m_dealer_isValid;
}

double OAIUKRVBaseListing::getDist() const {
    return m_dist;
}
void OAIUKRVBaseListing::setDist(const double &dist) {
    m_dist = dist;
    m_dist_isSet = true;
}

bool OAIUKRVBaseListing::is_dist_Set() const{
    return m_dist_isSet;
}

bool OAIUKRVBaseListing::is_dist_Valid() const{
    return m_dist_isValid;
}

QString OAIUKRVBaseListing::getExteriorColor() const {
    return m_exterior_color;
}
void OAIUKRVBaseListing::setExteriorColor(const QString &exterior_color) {
    m_exterior_color = exterior_color;
    m_exterior_color_isSet = true;
}

bool OAIUKRVBaseListing::is_exterior_color_Set() const{
    return m_exterior_color_isSet;
}

bool OAIUKRVBaseListing::is_exterior_color_Valid() const{
    return m_exterior_color_isValid;
}

qint32 OAIUKRVBaseListing::getFirstSeenAt() const {
    return m_first_seen_at;
}
void OAIUKRVBaseListing::setFirstSeenAt(const qint32 &first_seen_at) {
    m_first_seen_at = first_seen_at;
    m_first_seen_at_isSet = true;
}

bool OAIUKRVBaseListing::is_first_seen_at_Set() const{
    return m_first_seen_at_isSet;
}

bool OAIUKRVBaseListing::is_first_seen_at_Valid() const{
    return m_first_seen_at_isValid;
}

QString OAIUKRVBaseListing::getFirstSeenAtDate() const {
    return m_first_seen_at_date;
}
void OAIUKRVBaseListing::setFirstSeenAtDate(const QString &first_seen_at_date) {
    m_first_seen_at_date = first_seen_at_date;
    m_first_seen_at_date_isSet = true;
}

bool OAIUKRVBaseListing::is_first_seen_at_date_Set() const{
    return m_first_seen_at_date_isSet;
}

bool OAIUKRVBaseListing::is_first_seen_at_date_Valid() const{
    return m_first_seen_at_date_isValid;
}

QString OAIUKRVBaseListing::getHeading() const {
    return m_heading;
}
void OAIUKRVBaseListing::setHeading(const QString &heading) {
    m_heading = heading;
    m_heading_isSet = true;
}

bool OAIUKRVBaseListing::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAIUKRVBaseListing::is_heading_Valid() const{
    return m_heading_isValid;
}

QString OAIUKRVBaseListing::getId() const {
    return m_id;
}
void OAIUKRVBaseListing::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUKRVBaseListing::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUKRVBaseListing::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUKRVBaseListing::getInteriorColor() const {
    return m_interior_color;
}
void OAIUKRVBaseListing::setInteriorColor(const QString &interior_color) {
    m_interior_color = interior_color;
    m_interior_color_isSet = true;
}

bool OAIUKRVBaseListing::is_interior_color_Set() const{
    return m_interior_color_isSet;
}

bool OAIUKRVBaseListing::is_interior_color_Valid() const{
    return m_interior_color_isValid;
}

QString OAIUKRVBaseListing::getInventoryType() const {
    return m_inventory_type;
}
void OAIUKRVBaseListing::setInventoryType(const QString &inventory_type) {
    m_inventory_type = inventory_type;
    m_inventory_type_isSet = true;
}

bool OAIUKRVBaseListing::is_inventory_type_Set() const{
    return m_inventory_type_isSet;
}

bool OAIUKRVBaseListing::is_inventory_type_Valid() const{
    return m_inventory_type_isValid;
}

qint32 OAIUKRVBaseListing::getLastSeenAt() const {
    return m_last_seen_at;
}
void OAIUKRVBaseListing::setLastSeenAt(const qint32 &last_seen_at) {
    m_last_seen_at = last_seen_at;
    m_last_seen_at_isSet = true;
}

bool OAIUKRVBaseListing::is_last_seen_at_Set() const{
    return m_last_seen_at_isSet;
}

bool OAIUKRVBaseListing::is_last_seen_at_Valid() const{
    return m_last_seen_at_isValid;
}

QString OAIUKRVBaseListing::getLastSeenAtDate() const {
    return m_last_seen_at_date;
}
void OAIUKRVBaseListing::setLastSeenAtDate(const QString &last_seen_at_date) {
    m_last_seen_at_date = last_seen_at_date;
    m_last_seen_at_date_isSet = true;
}

bool OAIUKRVBaseListing::is_last_seen_at_date_Set() const{
    return m_last_seen_at_date_isSet;
}

bool OAIUKRVBaseListing::is_last_seen_at_date_Valid() const{
    return m_last_seen_at_date_isValid;
}

OAIListingNestMedia OAIUKRVBaseListing::getMedia() const {
    return m_media;
}
void OAIUKRVBaseListing::setMedia(const OAIListingNestMedia &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIUKRVBaseListing::is_media_Set() const{
    return m_media_isSet;
}

bool OAIUKRVBaseListing::is_media_Valid() const{
    return m_media_isValid;
}

qint32 OAIUKRVBaseListing::getMiles() const {
    return m_miles;
}
void OAIUKRVBaseListing::setMiles(const qint32 &miles) {
    m_miles = miles;
    m_miles_isSet = true;
}

bool OAIUKRVBaseListing::is_miles_Set() const{
    return m_miles_isSet;
}

bool OAIUKRVBaseListing::is_miles_Valid() const{
    return m_miles_isValid;
}

QString OAIUKRVBaseListing::getMilesIndicator() const {
    return m_miles_indicator;
}
void OAIUKRVBaseListing::setMilesIndicator(const QString &miles_indicator) {
    m_miles_indicator = miles_indicator;
    m_miles_indicator_isSet = true;
}

bool OAIUKRVBaseListing::is_miles_indicator_Set() const{
    return m_miles_indicator_isSet;
}

bool OAIUKRVBaseListing::is_miles_indicator_Valid() const{
    return m_miles_indicator_isValid;
}

QString OAIUKRVBaseListing::getMotExpires() const {
    return m_mot_expires;
}
void OAIUKRVBaseListing::setMotExpires(const QString &mot_expires) {
    m_mot_expires = mot_expires;
    m_mot_expires_isSet = true;
}

bool OAIUKRVBaseListing::is_mot_expires_Set() const{
    return m_mot_expires_isSet;
}

bool OAIUKRVBaseListing::is_mot_expires_Valid() const{
    return m_mot_expires_isValid;
}

QString OAIUKRVBaseListing::getMotorhomeBuild() const {
    return m_motorhome_build;
}
void OAIUKRVBaseListing::setMotorhomeBuild(const QString &motorhome_build) {
    m_motorhome_build = motorhome_build;
    m_motorhome_build_isSet = true;
}

bool OAIUKRVBaseListing::is_motorhome_build_Set() const{
    return m_motorhome_build_isSet;
}

bool OAIUKRVBaseListing::is_motorhome_build_Valid() const{
    return m_motorhome_build_isValid;
}

qint32 OAIUKRVBaseListing::getMsrp() const {
    return m_msrp;
}
void OAIUKRVBaseListing::setMsrp(const qint32 &msrp) {
    m_msrp = msrp;
    m_msrp_isSet = true;
}

bool OAIUKRVBaseListing::is_msrp_Set() const{
    return m_msrp_isSet;
}

bool OAIUKRVBaseListing::is_msrp_Valid() const{
    return m_msrp_isValid;
}

QString OAIUKRVBaseListing::getOrigin() const {
    return m_origin;
}
void OAIUKRVBaseListing::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIUKRVBaseListing::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIUKRVBaseListing::is_origin_Valid() const{
    return m_origin_isValid;
}

qint32 OAIUKRVBaseListing::getPrice() const {
    return m_price;
}
void OAIUKRVBaseListing::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIUKRVBaseListing::is_price_Set() const{
    return m_price_isSet;
}

bool OAIUKRVBaseListing::is_price_Valid() const{
    return m_price_isValid;
}

double OAIUKRVBaseListing::getScrapedAt() const {
    return m_scraped_at;
}
void OAIUKRVBaseListing::setScrapedAt(const double &scraped_at) {
    m_scraped_at = scraped_at;
    m_scraped_at_isSet = true;
}

bool OAIUKRVBaseListing::is_scraped_at_Set() const{
    return m_scraped_at_isSet;
}

bool OAIUKRVBaseListing::is_scraped_at_Valid() const{
    return m_scraped_at_isValid;
}

QString OAIUKRVBaseListing::getScrapedAtDate() const {
    return m_scraped_at_date;
}
void OAIUKRVBaseListing::setScrapedAtDate(const QString &scraped_at_date) {
    m_scraped_at_date = scraped_at_date;
    m_scraped_at_date_isSet = true;
}

bool OAIUKRVBaseListing::is_scraped_at_date_Set() const{
    return m_scraped_at_date_isSet;
}

bool OAIUKRVBaseListing::is_scraped_at_date_Valid() const{
    return m_scraped_at_date_isValid;
}

QString OAIUKRVBaseListing::getSellerType() const {
    return m_seller_type;
}
void OAIUKRVBaseListing::setSellerType(const QString &seller_type) {
    m_seller_type = seller_type;
    m_seller_type_isSet = true;
}

bool OAIUKRVBaseListing::is_seller_type_Set() const{
    return m_seller_type_isSet;
}

bool OAIUKRVBaseListing::is_seller_type_Valid() const{
    return m_seller_type_isValid;
}

QString OAIUKRVBaseListing::getSource() const {
    return m_source;
}
void OAIUKRVBaseListing::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIUKRVBaseListing::is_source_Set() const{
    return m_source_isSet;
}

bool OAIUKRVBaseListing::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIUKRVBaseListing::getStockNo() const {
    return m_stock_no;
}
void OAIUKRVBaseListing::setStockNo(const QString &stock_no) {
    m_stock_no = stock_no;
    m_stock_no_isSet = true;
}

bool OAIUKRVBaseListing::is_stock_no_Set() const{
    return m_stock_no_isSet;
}

bool OAIUKRVBaseListing::is_stock_no_Valid() const{
    return m_stock_no_isValid;
}

QString OAIUKRVBaseListing::getVdpUrl() const {
    return m_vdp_url;
}
void OAIUKRVBaseListing::setVdpUrl(const QString &vdp_url) {
    m_vdp_url = vdp_url;
    m_vdp_url_isSet = true;
}

bool OAIUKRVBaseListing::is_vdp_url_Set() const{
    return m_vdp_url_isSet;
}

bool OAIUKRVBaseListing::is_vdp_url_Valid() const{
    return m_vdp_url_isValid;
}

QString OAIUKRVBaseListing::getVin() const {
    return m_vin;
}
void OAIUKRVBaseListing::setVin(const QString &vin) {
    m_vin = vin;
    m_vin_isSet = true;
}

bool OAIUKRVBaseListing::is_vin_Set() const{
    return m_vin_isSet;
}

bool OAIUKRVBaseListing::is_vin_Valid() const{
    return m_vin_isValid;
}

bool OAIUKRVBaseListing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exterior_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_seen_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interior_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mot_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motorhome_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scraped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scraped_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vdp_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUKRVBaseListing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
