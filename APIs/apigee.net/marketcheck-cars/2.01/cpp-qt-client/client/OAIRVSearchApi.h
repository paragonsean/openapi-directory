/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRVSearchApi_H
#define OAI_OAIRVSearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIListingExtraAttributes.h"
#include "OAIListingMedia.h"
#include "OAIRVListing.h"
#include "OAIRVSearchResponse.h"
#include "OAISearchAutoCompleteResponse.h"
#include "OAIUKRVSearchResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRVSearchApi : public QObject {
    Q_OBJECT

public:
    OAIRVSearchApi(const int timeOut = 0);
    ~OAIRVSearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    */
    virtual void listingRvIdExtraGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    */
    virtual void listingRvIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    */
    virtual void listingRvIdMediaGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    */
    virtual void listingRvUkIdExtraGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    */
    virtual void listingRvUkIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    */
    virtual void listingRvUkIdMediaGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  price_range QString [optional]
    * @param[in]  miles_range QString [optional]
    * @param[in]  msrp_range QString [optional]
    * @param[in]  year_range QString [optional]
    * @param[in]  search_text QString [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  year QString [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  model_o QString [optional]
    * @param[in]  vin QString [optional]
    * @param[in]  inventory_type QString [optional]
    * @param[in]  stock_no QString [optional]
    * @param[in]  source QString [optional]
    * @param[in]  dealer_name QString [optional]
    * @param[in]  dealer_id QString [optional]
    * @param[in]  exterior_color QString [optional]
    * @param[in]  interior_color QString [optional]
    * @param[in]  engine QString [optional]
    * @param[in]  fuel_type QString [optional]
    * @param[in]  transmission QString [optional]
    * @param[in]  r_class QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  msa_code QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facets QString [optional]
    * @param[in]  range_facets QString [optional]
    * @param[in]  facet_sort QString [optional]
    * @param[in]  stats QString [optional]
    * @param[in]  last_seen_range QString [optional]
    * @param[in]  first_seen_range QString [optional]
    * @param[in]  last_seen_days QString [optional]
    * @param[in]  first_seen_days QString [optional]
    * @param[in]  slideouts QString [optional]
    * @param[in]  length_range QString [optional]
    * @param[in]  length QString [optional]
    * @param[in]  base_exterior_color QString [optional]
    * @param[in]  base_interior_color QString [optional]
    * @param[in]  seating_capacity QString [optional]
    * @param[in]  fresh_water_capacity QString [optional]
    * @param[in]  sleeps QString [optional]
    * @param[in]  cylinders QString [optional]
    * @param[in]  number_of_awnings QString [optional]
    * @param[in]  doors QString [optional]
    * @param[in]  gvwr QString [optional]
    */
    virtual void searchRvActiveGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &price_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &miles_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &msrp_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &year_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model_o = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stock_no = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exterior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fuel_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transmission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &msa_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facet_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stats = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_seen_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_seen_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slideouts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &length_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &length = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_exterior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_interior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seating_capacity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fresh_water_capacity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sleeps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cylinders = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number_of_awnings = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &doors = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gvwr = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  field QString [required]
    * @param[in]  input QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  year QString [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  trim QString [optional]
    * @param[in]  body_type QString [optional]
    * @param[in]  vehicle_type QString [optional]
    * @param[in]  transmission QString [optional]
    * @param[in]  drivetrain QString [optional]
    * @param[in]  fuel_type QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  engine QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  inventory_type QString [optional]
    * @param[in]  ignore_case bool [optional]
    * @param[in]  term_counts bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  seller_type QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  facet_min_count double [optional]
    */
    virtual void searchRvAutoCompleteGet(const QString &field, const QString &input, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vehicle_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transmission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drivetrain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fuel_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ignore_case = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &term_counts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seller_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &facet_min_count = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  price_range QString [optional]
    * @param[in]  miles_range QString [optional]
    * @param[in]  msrp_range QString [optional]
    * @param[in]  year_range QString [optional]
    * @param[in]  search_text QString [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  year QString [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  vin QString [optional]
    * @param[in]  source QString [optional]
    * @param[in]  dealer_name QString [optional]
    * @param[in]  dealer_id QString [optional]
    * @param[in]  exterior_color QString [optional]
    * @param[in]  interior_color QString [optional]
    * @param[in]  engine_size QString [optional]
    * @param[in]  fuel_type QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  county QString [optional]
    * @param[in]  postal_code QString [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facets QString [optional]
    * @param[in]  range_facets QString [optional]
    * @param[in]  facet_sort QString [optional]
    * @param[in]  stats QString [optional]
    * @param[in]  last_seen_range QString [optional]
    * @param[in]  first_seen_range QString [optional]
    * @param[in]  last_seen_days QString [optional]
    * @param[in]  first_seen_days QString [optional]
    * @param[in]  base_exterior_color QString [optional]
    * @param[in]  base_interior_color QString [optional]
    * @param[in]  seating_capacity QString [optional]
    * @param[in]  cylinders QString [optional]
    * @param[in]  doors QString [optional]
    * @param[in]  mtplm QString [optional]
    * @param[in]  sub_category QString [optional]
    * @param[in]  availability_status QString [optional]
    * @param[in]  berths QString [optional]
    * @param[in]  inventory_type QString [optional]
    * @param[in]  width_range QString [optional]
    * @param[in]  exterior_length_range QString [optional]
    * @param[in]  interior_length_range QString [optional]
    * @param[in]  drive_type QString [optional]
    * @param[in]  steering QString [optional]
    * @param[in]  chassis QString [optional]
    * @param[in]  transmission QString [optional]
    */
    virtual void searchRvUkActiveGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &price_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &miles_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &msrp_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &year_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exterior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fuel_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &county = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facet_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stats = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_seen_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_seen_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_exterior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_interior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seating_capacity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cylinders = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &doors = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtplm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &availability_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &berths = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &width_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exterior_length_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interior_length_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drive_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &steering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transmission = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listingRvIdExtraGetCallback(OAIHttpRequestWorker *worker);
    void listingRvIdGetCallback(OAIHttpRequestWorker *worker);
    void listingRvIdMediaGetCallback(OAIHttpRequestWorker *worker);
    void listingRvUkIdExtraGetCallback(OAIHttpRequestWorker *worker);
    void listingRvUkIdGetCallback(OAIHttpRequestWorker *worker);
    void listingRvUkIdMediaGetCallback(OAIHttpRequestWorker *worker);
    void searchRvActiveGetCallback(OAIHttpRequestWorker *worker);
    void searchRvAutoCompleteGetCallback(OAIHttpRequestWorker *worker);
    void searchRvUkActiveGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listingRvIdExtraGetSignal(OAIListingExtraAttributes summary);
    void listingRvIdGetSignal(OAIRVListing summary);
    void listingRvIdMediaGetSignal(OAIListingMedia summary);
    void listingRvUkIdExtraGetSignal(OAIListingExtraAttributes summary);
    void listingRvUkIdGetSignal(OAIRVListing summary);
    void listingRvUkIdMediaGetSignal(OAIListingMedia summary);
    void searchRvActiveGetSignal(OAIRVSearchResponse summary);
    void searchRvAutoCompleteGetSignal(OAISearchAutoCompleteResponse summary);
    void searchRvUkActiveGetSignal(OAIUKRVSearchResponse summary);


    void listingRvIdExtraGetSignalFull(OAIHttpRequestWorker *worker, OAIListingExtraAttributes summary);
    void listingRvIdGetSignalFull(OAIHttpRequestWorker *worker, OAIRVListing summary);
    void listingRvIdMediaGetSignalFull(OAIHttpRequestWorker *worker, OAIListingMedia summary);
    void listingRvUkIdExtraGetSignalFull(OAIHttpRequestWorker *worker, OAIListingExtraAttributes summary);
    void listingRvUkIdGetSignalFull(OAIHttpRequestWorker *worker, OAIRVListing summary);
    void listingRvUkIdMediaGetSignalFull(OAIHttpRequestWorker *worker, OAIListingMedia summary);
    void searchRvActiveGetSignalFull(OAIHttpRequestWorker *worker, OAIRVSearchResponse summary);
    void searchRvAutoCompleteGetSignalFull(OAIHttpRequestWorker *worker, OAISearchAutoCompleteResponse summary);
    void searchRvUkActiveGetSignalFull(OAIHttpRequestWorker *worker, OAIUKRVSearchResponse summary);

    Q_DECL_DEPRECATED_X("Use listingRvIdExtraGetSignalError() instead")
    void listingRvIdExtraGetSignalE(OAIListingExtraAttributes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvIdExtraGetSignalError(OAIListingExtraAttributes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingRvIdGetSignalError() instead")
    void listingRvIdGetSignalE(OAIRVListing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvIdGetSignalError(OAIRVListing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingRvIdMediaGetSignalError() instead")
    void listingRvIdMediaGetSignalE(OAIListingMedia summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvIdMediaGetSignalError(OAIListingMedia summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingRvUkIdExtraGetSignalError() instead")
    void listingRvUkIdExtraGetSignalE(OAIListingExtraAttributes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvUkIdExtraGetSignalError(OAIListingExtraAttributes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingRvUkIdGetSignalError() instead")
    void listingRvUkIdGetSignalE(OAIRVListing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvUkIdGetSignalError(OAIRVListing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingRvUkIdMediaGetSignalError() instead")
    void listingRvUkIdMediaGetSignalE(OAIListingMedia summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvUkIdMediaGetSignalError(OAIListingMedia summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRvActiveGetSignalError() instead")
    void searchRvActiveGetSignalE(OAIRVSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRvActiveGetSignalError(OAIRVSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRvAutoCompleteGetSignalError() instead")
    void searchRvAutoCompleteGetSignalE(OAISearchAutoCompleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRvAutoCompleteGetSignalError(OAISearchAutoCompleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRvUkActiveGetSignalError() instead")
    void searchRvUkActiveGetSignalE(OAIUKRVSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRvUkActiveGetSignalError(OAIUKRVSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listingRvIdExtraGetSignalErrorFull() instead")
    void listingRvIdExtraGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvIdExtraGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingRvIdGetSignalErrorFull() instead")
    void listingRvIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingRvIdMediaGetSignalErrorFull() instead")
    void listingRvIdMediaGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvIdMediaGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingRvUkIdExtraGetSignalErrorFull() instead")
    void listingRvUkIdExtraGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvUkIdExtraGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingRvUkIdGetSignalErrorFull() instead")
    void listingRvUkIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvUkIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingRvUkIdMediaGetSignalErrorFull() instead")
    void listingRvUkIdMediaGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingRvUkIdMediaGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRvActiveGetSignalErrorFull() instead")
    void searchRvActiveGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRvActiveGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRvAutoCompleteGetSignalErrorFull() instead")
    void searchRvAutoCompleteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRvAutoCompleteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRvUkActiveGetSignalErrorFull() instead")
    void searchRvUkActiveGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRvUkActiveGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
