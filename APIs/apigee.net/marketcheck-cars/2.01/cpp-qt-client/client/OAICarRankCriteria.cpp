/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICarRankCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICarRankCriteria::OAICarRankCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICarRankCriteria::OAICarRankCriteria() {
    this->initializeModel();
}

OAICarRankCriteria::~OAICarRankCriteria() {}

void OAICarRankCriteria::initializeModel() {

    m_carfax_1_owner_isSet = false;
    m_carfax_1_owner_isValid = false;

    m_carfax_clean_title_isSet = false;
    m_carfax_clean_title_isValid = false;

    m_dom_isSet = false;
    m_dom_isValid = false;

    m_dom_180_isSet = false;
    m_dom_180_isValid = false;

    m_dom_active_isSet = false;
    m_dom_active_isValid = false;

    m_is_certified_isSet = false;
    m_is_certified_isValid = false;

    m_miles_isSet = false;
    m_miles_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAICarRankCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICarRankCriteria::fromJsonObject(QJsonObject json) {

    m_carfax_1_owner_isValid = ::OpenAPI::fromJsonValue(m_carfax_1_owner, json[QString("carfax_1_owner")]);
    m_carfax_1_owner_isSet = !json[QString("carfax_1_owner")].isNull() && m_carfax_1_owner_isValid;

    m_carfax_clean_title_isValid = ::OpenAPI::fromJsonValue(m_carfax_clean_title, json[QString("carfax_clean_title")]);
    m_carfax_clean_title_isSet = !json[QString("carfax_clean_title")].isNull() && m_carfax_clean_title_isValid;

    m_dom_isValid = ::OpenAPI::fromJsonValue(m_dom, json[QString("dom")]);
    m_dom_isSet = !json[QString("dom")].isNull() && m_dom_isValid;

    m_dom_180_isValid = ::OpenAPI::fromJsonValue(m_dom_180, json[QString("dom_180")]);
    m_dom_180_isSet = !json[QString("dom_180")].isNull() && m_dom_180_isValid;

    m_dom_active_isValid = ::OpenAPI::fromJsonValue(m_dom_active, json[QString("dom_active")]);
    m_dom_active_isSet = !json[QString("dom_active")].isNull() && m_dom_active_isValid;

    m_is_certified_isValid = ::OpenAPI::fromJsonValue(m_is_certified, json[QString("is_certified")]);
    m_is_certified_isSet = !json[QString("is_certified")].isNull() && m_is_certified_isValid;

    m_miles_isValid = ::OpenAPI::fromJsonValue(m_miles, json[QString("miles")]);
    m_miles_isSet = !json[QString("miles")].isNull() && m_miles_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAICarRankCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICarRankCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_carfax_1_owner_isSet) {
        obj.insert(QString("carfax_1_owner"), ::OpenAPI::toJsonValue(m_carfax_1_owner));
    }
    if (m_carfax_clean_title_isSet) {
        obj.insert(QString("carfax_clean_title"), ::OpenAPI::toJsonValue(m_carfax_clean_title));
    }
    if (m_dom_isSet) {
        obj.insert(QString("dom"), ::OpenAPI::toJsonValue(m_dom));
    }
    if (m_dom_180_isSet) {
        obj.insert(QString("dom_180"), ::OpenAPI::toJsonValue(m_dom_180));
    }
    if (m_dom_active_isSet) {
        obj.insert(QString("dom_active"), ::OpenAPI::toJsonValue(m_dom_active));
    }
    if (m_is_certified_isSet) {
        obj.insert(QString("is_certified"), ::OpenAPI::toJsonValue(m_is_certified));
    }
    if (m_miles_isSet) {
        obj.insert(QString("miles"), ::OpenAPI::toJsonValue(m_miles));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

double OAICarRankCriteria::getCarfax1Owner() const {
    return m_carfax_1_owner;
}
void OAICarRankCriteria::setCarfax1Owner(const double &carfax_1_owner) {
    m_carfax_1_owner = carfax_1_owner;
    m_carfax_1_owner_isSet = true;
}

bool OAICarRankCriteria::is_carfax_1_owner_Set() const{
    return m_carfax_1_owner_isSet;
}

bool OAICarRankCriteria::is_carfax_1_owner_Valid() const{
    return m_carfax_1_owner_isValid;
}

double OAICarRankCriteria::getCarfaxCleanTitle() const {
    return m_carfax_clean_title;
}
void OAICarRankCriteria::setCarfaxCleanTitle(const double &carfax_clean_title) {
    m_carfax_clean_title = carfax_clean_title;
    m_carfax_clean_title_isSet = true;
}

bool OAICarRankCriteria::is_carfax_clean_title_Set() const{
    return m_carfax_clean_title_isSet;
}

bool OAICarRankCriteria::is_carfax_clean_title_Valid() const{
    return m_carfax_clean_title_isValid;
}

double OAICarRankCriteria::getDom() const {
    return m_dom;
}
void OAICarRankCriteria::setDom(const double &dom) {
    m_dom = dom;
    m_dom_isSet = true;
}

bool OAICarRankCriteria::is_dom_Set() const{
    return m_dom_isSet;
}

bool OAICarRankCriteria::is_dom_Valid() const{
    return m_dom_isValid;
}

double OAICarRankCriteria::getDom180() const {
    return m_dom_180;
}
void OAICarRankCriteria::setDom180(const double &dom_180) {
    m_dom_180 = dom_180;
    m_dom_180_isSet = true;
}

bool OAICarRankCriteria::is_dom_180_Set() const{
    return m_dom_180_isSet;
}

bool OAICarRankCriteria::is_dom_180_Valid() const{
    return m_dom_180_isValid;
}

double OAICarRankCriteria::getDomActive() const {
    return m_dom_active;
}
void OAICarRankCriteria::setDomActive(const double &dom_active) {
    m_dom_active = dom_active;
    m_dom_active_isSet = true;
}

bool OAICarRankCriteria::is_dom_active_Set() const{
    return m_dom_active_isSet;
}

bool OAICarRankCriteria::is_dom_active_Valid() const{
    return m_dom_active_isValid;
}

double OAICarRankCriteria::getIsCertified() const {
    return m_is_certified;
}
void OAICarRankCriteria::setIsCertified(const double &is_certified) {
    m_is_certified = is_certified;
    m_is_certified_isSet = true;
}

bool OAICarRankCriteria::is_is_certified_Set() const{
    return m_is_certified_isSet;
}

bool OAICarRankCriteria::is_is_certified_Valid() const{
    return m_is_certified_isValid;
}

double OAICarRankCriteria::getMiles() const {
    return m_miles;
}
void OAICarRankCriteria::setMiles(const double &miles) {
    m_miles = miles;
    m_miles_isSet = true;
}

bool OAICarRankCriteria::is_miles_Set() const{
    return m_miles_isSet;
}

bool OAICarRankCriteria::is_miles_Valid() const{
    return m_miles_isValid;
}

double OAICarRankCriteria::getPrice() const {
    return m_price;
}
void OAICarRankCriteria::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICarRankCriteria::is_price_Set() const{
    return m_price_isSet;
}

bool OAICarRankCriteria::is_price_Valid() const{
    return m_price_isValid;
}

bool OAICarRankCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_carfax_1_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carfax_clean_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_180_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_certified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICarRankCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
