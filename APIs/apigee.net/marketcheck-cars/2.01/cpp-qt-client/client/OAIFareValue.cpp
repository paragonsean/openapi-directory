/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFareValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFareValue::OAIFareValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFareValue::OAIFareValue() {
    this->initializeModel();
}

OAIFareValue::~OAIFareValue() {}

void OAIFareValue::initializeModel() {

    m_avg_days_to_sold_local_isSet = false;
    m_avg_days_to_sold_local_isValid = false;

    m_avg_days_to_sold_national_isSet = false;
    m_avg_days_to_sold_national_isValid = false;

    m_fmv_local_isSet = false;
    m_fmv_local_isValid = false;

    m_fmv_national_isSet = false;
    m_fmv_national_isValid = false;
}

void OAIFareValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFareValue::fromJsonObject(QJsonObject json) {

    m_avg_days_to_sold_local_isValid = ::OpenAPI::fromJsonValue(m_avg_days_to_sold_local, json[QString("avg_days_to_sold_local")]);
    m_avg_days_to_sold_local_isSet = !json[QString("avg_days_to_sold_local")].isNull() && m_avg_days_to_sold_local_isValid;

    m_avg_days_to_sold_national_isValid = ::OpenAPI::fromJsonValue(m_avg_days_to_sold_national, json[QString("avg_days_to_sold_national")]);
    m_avg_days_to_sold_national_isSet = !json[QString("avg_days_to_sold_national")].isNull() && m_avg_days_to_sold_national_isValid;

    m_fmv_local_isValid = ::OpenAPI::fromJsonValue(m_fmv_local, json[QString("fmv_local")]);
    m_fmv_local_isSet = !json[QString("fmv_local")].isNull() && m_fmv_local_isValid;

    m_fmv_national_isValid = ::OpenAPI::fromJsonValue(m_fmv_national, json[QString("fmv_national")]);
    m_fmv_national_isSet = !json[QString("fmv_national")].isNull() && m_fmv_national_isValid;
}

QString OAIFareValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFareValue::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_days_to_sold_local_isSet) {
        obj.insert(QString("avg_days_to_sold_local"), ::OpenAPI::toJsonValue(m_avg_days_to_sold_local));
    }
    if (m_avg_days_to_sold_national_isSet) {
        obj.insert(QString("avg_days_to_sold_national"), ::OpenAPI::toJsonValue(m_avg_days_to_sold_national));
    }
    if (m_fmv_local_isSet) {
        obj.insert(QString("fmv_local"), ::OpenAPI::toJsonValue(m_fmv_local));
    }
    if (m_fmv_national_isSet) {
        obj.insert(QString("fmv_national"), ::OpenAPI::toJsonValue(m_fmv_national));
    }
    return obj;
}

qint32 OAIFareValue::getAvgDaysToSoldLocal() const {
    return m_avg_days_to_sold_local;
}
void OAIFareValue::setAvgDaysToSoldLocal(const qint32 &avg_days_to_sold_local) {
    m_avg_days_to_sold_local = avg_days_to_sold_local;
    m_avg_days_to_sold_local_isSet = true;
}

bool OAIFareValue::is_avg_days_to_sold_local_Set() const{
    return m_avg_days_to_sold_local_isSet;
}

bool OAIFareValue::is_avg_days_to_sold_local_Valid() const{
    return m_avg_days_to_sold_local_isValid;
}

qint32 OAIFareValue::getAvgDaysToSoldNational() const {
    return m_avg_days_to_sold_national;
}
void OAIFareValue::setAvgDaysToSoldNational(const qint32 &avg_days_to_sold_national) {
    m_avg_days_to_sold_national = avg_days_to_sold_national;
    m_avg_days_to_sold_national_isSet = true;
}

bool OAIFareValue::is_avg_days_to_sold_national_Set() const{
    return m_avg_days_to_sold_national_isSet;
}

bool OAIFareValue::is_avg_days_to_sold_national_Valid() const{
    return m_avg_days_to_sold_national_isValid;
}

qint32 OAIFareValue::getFmvLocal() const {
    return m_fmv_local;
}
void OAIFareValue::setFmvLocal(const qint32 &fmv_local) {
    m_fmv_local = fmv_local;
    m_fmv_local_isSet = true;
}

bool OAIFareValue::is_fmv_local_Set() const{
    return m_fmv_local_isSet;
}

bool OAIFareValue::is_fmv_local_Valid() const{
    return m_fmv_local_isValid;
}

qint32 OAIFareValue::getFmvNational() const {
    return m_fmv_national;
}
void OAIFareValue::setFmvNational(const qint32 &fmv_national) {
    m_fmv_national = fmv_national;
    m_fmv_national_isSet = true;
}

bool OAIFareValue::is_fmv_national_Set() const{
    return m_fmv_national_isSet;
}

bool OAIFareValue::is_fmv_national_Valid() const{
    return m_fmv_national_isValid;
}

bool OAIFareValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_days_to_sold_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_days_to_sold_national_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fmv_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fmv_national_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFareValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
