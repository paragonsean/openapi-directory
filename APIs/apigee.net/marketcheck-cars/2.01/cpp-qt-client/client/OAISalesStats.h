/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISalesStats.h
 *
 * Sales stats response
 */

#ifndef OAISalesStats_H
#define OAISalesStats_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISalesStats : public OAIObject {
public:
    OAISalesStats();
    OAISalesStats(QString json);
    ~OAISalesStats() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAbsoluteMeanDeviation() const;
    void setAbsoluteMeanDeviation(const double &absolute_mean_deviation);
    bool is_absolute_mean_deviation_Set() const;
    bool is_absolute_mean_deviation_Valid() const;

    double getIqr() const;
    void setIqr(const double &iqr);
    bool is_iqr_Set() const;
    bool is_iqr_Valid() const;

    double getMean() const;
    void setMean(const double &mean);
    bool is_mean_Set() const;
    bool is_mean_Valid() const;

    double getMedian() const;
    void setMedian(const double &median);
    bool is_median_Set() const;
    bool is_median_Valid() const;

    double getPopulationStandardDeviation() const;
    void setPopulationStandardDeviation(const double &population_standard_deviation);
    bool is_population_standard_deviation_Set() const;
    bool is_population_standard_deviation_Valid() const;

    double getStandardDeviation() const;
    void setStandardDeviation(const double &standard_deviation);
    bool is_standard_deviation_Set() const;
    bool is_standard_deviation_Valid() const;

    double getTrimmedMean() const;
    void setTrimmedMean(const double &trimmed_mean);
    bool is_trimmed_mean_Set() const;
    bool is_trimmed_mean_Valid() const;

    double getVariance() const;
    void setVariance(const double &variance);
    bool is_variance_Set() const;
    bool is_variance_Valid() const;

    double getWeightedMean() const;
    void setWeightedMean(const double &weighted_mean);
    bool is_weighted_mean_Set() const;
    bool is_weighted_mean_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_absolute_mean_deviation;
    bool m_absolute_mean_deviation_isSet;
    bool m_absolute_mean_deviation_isValid;

    double m_iqr;
    bool m_iqr_isSet;
    bool m_iqr_isValid;

    double m_mean;
    bool m_mean_isSet;
    bool m_mean_isValid;

    double m_median;
    bool m_median_isSet;
    bool m_median_isValid;

    double m_population_standard_deviation;
    bool m_population_standard_deviation_isSet;
    bool m_population_standard_deviation_isValid;

    double m_standard_deviation;
    bool m_standard_deviation_isSet;
    bool m_standard_deviation_isValid;

    double m_trimmed_mean;
    bool m_trimmed_mean_isSet;
    bool m_trimmed_mean_isValid;

    double m_variance;
    bool m_variance_isSet;
    bool m_variance_isValid;

    double m_weighted_mean;
    bool m_weighted_mean_isSet;
    bool m_weighted_mean_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISalesStats)

#endif // OAISalesStats_H
