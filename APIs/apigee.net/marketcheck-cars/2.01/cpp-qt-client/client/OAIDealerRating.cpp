/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealerRating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealerRating::OAIDealerRating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealerRating::OAIDealerRating() {
    this->initializeModel();
}

OAIDealerRating::~OAIDealerRating() {}

void OAIDealerRating::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overall_rating_isSet = false;
    m_overall_rating_isValid = false;

    m_rating_components_isSet = false;
    m_rating_components_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIDealerRating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealerRating::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_overall_rating_isValid = ::OpenAPI::fromJsonValue(m_overall_rating, json[QString("overall_rating")]);
    m_overall_rating_isSet = !json[QString("overall_rating")].isNull() && m_overall_rating_isValid;

    m_rating_components_isValid = ::OpenAPI::fromJsonValue(m_rating_components, json[QString("rating_components")]);
    m_rating_components_isSet = !json[QString("rating_components")].isNull() && m_rating_components_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIDealerRating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealerRating::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overall_rating_isSet) {
        obj.insert(QString("overall_rating"), ::OpenAPI::toJsonValue(m_overall_rating));
    }
    if (m_rating_components.size() > 0) {
        obj.insert(QString("rating_components"), ::OpenAPI::toJsonValue(m_rating_components));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIDealerRating::getCity() const {
    return m_city;
}
void OAIDealerRating::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIDealerRating::is_city_Set() const{
    return m_city_isSet;
}

bool OAIDealerRating::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIDealerRating::getLatitude() const {
    return m_latitude;
}
void OAIDealerRating::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIDealerRating::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIDealerRating::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIDealerRating::getLongitude() const {
    return m_longitude;
}
void OAIDealerRating::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIDealerRating::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIDealerRating::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIDealerRating::getName() const {
    return m_name;
}
void OAIDealerRating::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDealerRating::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDealerRating::is_name_Valid() const{
    return m_name_isValid;
}

double OAIDealerRating::getOverallRating() const {
    return m_overall_rating;
}
void OAIDealerRating::setOverallRating(const double &overall_rating) {
    m_overall_rating = overall_rating;
    m_overall_rating_isSet = true;
}

bool OAIDealerRating::is_overall_rating_Set() const{
    return m_overall_rating_isSet;
}

bool OAIDealerRating::is_overall_rating_Valid() const{
    return m_overall_rating_isValid;
}

QList<OAIRatingComponents> OAIDealerRating::getRatingComponents() const {
    return m_rating_components;
}
void OAIDealerRating::setRatingComponents(const QList<OAIRatingComponents> &rating_components) {
    m_rating_components = rating_components;
    m_rating_components_isSet = true;
}

bool OAIDealerRating::is_rating_components_Set() const{
    return m_rating_components_isSet;
}

bool OAIDealerRating::is_rating_components_Valid() const{
    return m_rating_components_isValid;
}

QString OAIDealerRating::getState() const {
    return m_state;
}
void OAIDealerRating::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDealerRating::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDealerRating::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDealerRating::getStreet() const {
    return m_street;
}
void OAIDealerRating::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIDealerRating::is_street_Set() const{
    return m_street_isSet;
}

bool OAIDealerRating::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIDealerRating::getZip() const {
    return m_zip;
}
void OAIDealerRating::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIDealerRating::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIDealerRating::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIDealerRating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealerRating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
