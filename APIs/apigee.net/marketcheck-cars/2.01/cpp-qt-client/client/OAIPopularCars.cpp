/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPopularCars.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPopularCars::OAIPopularCars(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPopularCars::OAIPopularCars() {
    this->initializeModel();
}

OAIPopularCars::~OAIPopularCars() {}

void OAIPopularCars::initializeModel() {

    m_new_top50_isSet = false;
    m_new_top50_isValid = false;

    m_used_top50_isSet = false;
    m_used_top50_isValid = false;
}

void OAIPopularCars::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPopularCars::fromJsonObject(QJsonObject json) {

    m_new_top50_isValid = ::OpenAPI::fromJsonValue(m_new_top50, json[QString("new_top50")]);
    m_new_top50_isSet = !json[QString("new_top50")].isNull() && m_new_top50_isValid;

    m_used_top50_isValid = ::OpenAPI::fromJsonValue(m_used_top50, json[QString("used_top50")]);
    m_used_top50_isSet = !json[QString("used_top50")].isNull() && m_used_top50_isValid;
}

QString OAIPopularCars::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPopularCars::asJsonObject() const {
    QJsonObject obj;
    if (m_new_top50.size() > 0) {
        obj.insert(QString("new_top50"), ::OpenAPI::toJsonValue(m_new_top50));
    }
    if (m_used_top50.size() > 0) {
        obj.insert(QString("used_top50"), ::OpenAPI::toJsonValue(m_used_top50));
    }
    return obj;
}

QList<OAIBasePopular> OAIPopularCars::getNewTop50() const {
    return m_new_top50;
}
void OAIPopularCars::setNewTop50(const QList<OAIBasePopular> &new_top50) {
    m_new_top50 = new_top50;
    m_new_top50_isSet = true;
}

bool OAIPopularCars::is_new_top50_Set() const{
    return m_new_top50_isSet;
}

bool OAIPopularCars::is_new_top50_Valid() const{
    return m_new_top50_isValid;
}

QList<OAIBasePopular> OAIPopularCars::getUsedTop50() const {
    return m_used_top50;
}
void OAIPopularCars::setUsedTop50(const QList<OAIBasePopular> &used_top50) {
    m_used_top50 = used_top50;
    m_used_top50_isSet = true;
}

bool OAIPopularCars::is_used_top50_Set() const{
    return m_used_top50_isSet;
}

bool OAIPopularCars::is_used_top50_Valid() const{
    return m_used_top50_isValid;
}

bool OAIPopularCars::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_top50.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_top50.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPopularCars::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
