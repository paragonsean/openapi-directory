/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListingNestExtraAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListingNestExtraAttributes::OAIListingNestExtraAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListingNestExtraAttributes::OAIListingNestExtraAttributes() {
    this->initializeModel();
}

OAIListingNestExtraAttributes::~OAIListingNestExtraAttributes() {}

void OAIListingNestExtraAttributes::initializeModel() {

    m_dealer_added_f_isSet = false;
    m_dealer_added_f_isValid = false;

    m_electronics_f_isSet = false;
    m_electronics_f_isValid = false;

    m_exterior_f_isSet = false;
    m_exterior_f_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_interior_f_isSet = false;
    m_interior_f_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_safety_f_isSet = false;
    m_safety_f_isValid = false;

    m_seller_comments_isSet = false;
    m_seller_comments_isValid = false;

    m_standard_f_isSet = false;
    m_standard_f_isValid = false;

    m_technical_f_isSet = false;
    m_technical_f_isValid = false;
}

void OAIListingNestExtraAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListingNestExtraAttributes::fromJsonObject(QJsonObject json) {

    m_dealer_added_f_isValid = ::OpenAPI::fromJsonValue(m_dealer_added_f, json[QString("dealer_added_f")]);
    m_dealer_added_f_isSet = !json[QString("dealer_added_f")].isNull() && m_dealer_added_f_isValid;

    m_electronics_f_isValid = ::OpenAPI::fromJsonValue(m_electronics_f, json[QString("electronics_f")]);
    m_electronics_f_isSet = !json[QString("electronics_f")].isNull() && m_electronics_f_isValid;

    m_exterior_f_isValid = ::OpenAPI::fromJsonValue(m_exterior_f, json[QString("exterior_f")]);
    m_exterior_f_isSet = !json[QString("exterior_f")].isNull() && m_exterior_f_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_interior_f_isValid = ::OpenAPI::fromJsonValue(m_interior_f, json[QString("interior_f")]);
    m_interior_f_isSet = !json[QString("interior_f")].isNull() && m_interior_f_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_safety_f_isValid = ::OpenAPI::fromJsonValue(m_safety_f, json[QString("safety_f")]);
    m_safety_f_isSet = !json[QString("safety_f")].isNull() && m_safety_f_isValid;

    m_seller_comments_isValid = ::OpenAPI::fromJsonValue(m_seller_comments, json[QString("seller_comments")]);
    m_seller_comments_isSet = !json[QString("seller_comments")].isNull() && m_seller_comments_isValid;

    m_standard_f_isValid = ::OpenAPI::fromJsonValue(m_standard_f, json[QString("standard_f")]);
    m_standard_f_isSet = !json[QString("standard_f")].isNull() && m_standard_f_isValid;

    m_technical_f_isValid = ::OpenAPI::fromJsonValue(m_technical_f, json[QString("technical_f")]);
    m_technical_f_isSet = !json[QString("technical_f")].isNull() && m_technical_f_isValid;
}

QString OAIListingNestExtraAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListingNestExtraAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_dealer_added_f.size() > 0) {
        obj.insert(QString("dealer_added_f"), ::OpenAPI::toJsonValue(m_dealer_added_f));
    }
    if (m_electronics_f.size() > 0) {
        obj.insert(QString("electronics_f"), ::OpenAPI::toJsonValue(m_electronics_f));
    }
    if (m_exterior_f.size() > 0) {
        obj.insert(QString("exterior_f"), ::OpenAPI::toJsonValue(m_exterior_f));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_interior_f.size() > 0) {
        obj.insert(QString("interior_f"), ::OpenAPI::toJsonValue(m_interior_f));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_safety_f.size() > 0) {
        obj.insert(QString("safety_f"), ::OpenAPI::toJsonValue(m_safety_f));
    }
    if (m_seller_comments_isSet) {
        obj.insert(QString("seller_comments"), ::OpenAPI::toJsonValue(m_seller_comments));
    }
    if (m_standard_f.size() > 0) {
        obj.insert(QString("standard_f"), ::OpenAPI::toJsonValue(m_standard_f));
    }
    if (m_technical_f.size() > 0) {
        obj.insert(QString("technical_f"), ::OpenAPI::toJsonValue(m_technical_f));
    }
    return obj;
}

QList<QString> OAIListingNestExtraAttributes::getDealerAddedF() const {
    return m_dealer_added_f;
}
void OAIListingNestExtraAttributes::setDealerAddedF(const QList<QString> &dealer_added_f) {
    m_dealer_added_f = dealer_added_f;
    m_dealer_added_f_isSet = true;
}

bool OAIListingNestExtraAttributes::is_dealer_added_f_Set() const{
    return m_dealer_added_f_isSet;
}

bool OAIListingNestExtraAttributes::is_dealer_added_f_Valid() const{
    return m_dealer_added_f_isValid;
}

QList<QString> OAIListingNestExtraAttributes::getElectronicsF() const {
    return m_electronics_f;
}
void OAIListingNestExtraAttributes::setElectronicsF(const QList<QString> &electronics_f) {
    m_electronics_f = electronics_f;
    m_electronics_f_isSet = true;
}

bool OAIListingNestExtraAttributes::is_electronics_f_Set() const{
    return m_electronics_f_isSet;
}

bool OAIListingNestExtraAttributes::is_electronics_f_Valid() const{
    return m_electronics_f_isValid;
}

QList<QString> OAIListingNestExtraAttributes::getExteriorF() const {
    return m_exterior_f;
}
void OAIListingNestExtraAttributes::setExteriorF(const QList<QString> &exterior_f) {
    m_exterior_f = exterior_f;
    m_exterior_f_isSet = true;
}

bool OAIListingNestExtraAttributes::is_exterior_f_Set() const{
    return m_exterior_f_isSet;
}

bool OAIListingNestExtraAttributes::is_exterior_f_Valid() const{
    return m_exterior_f_isValid;
}

QList<QString> OAIListingNestExtraAttributes::getFeatures() const {
    return m_features;
}
void OAIListingNestExtraAttributes::setFeatures(const QList<QString> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIListingNestExtraAttributes::is_features_Set() const{
    return m_features_isSet;
}

bool OAIListingNestExtraAttributes::is_features_Valid() const{
    return m_features_isValid;
}

QList<QString> OAIListingNestExtraAttributes::getInteriorF() const {
    return m_interior_f;
}
void OAIListingNestExtraAttributes::setInteriorF(const QList<QString> &interior_f) {
    m_interior_f = interior_f;
    m_interior_f_isSet = true;
}

bool OAIListingNestExtraAttributes::is_interior_f_Set() const{
    return m_interior_f_isSet;
}

bool OAIListingNestExtraAttributes::is_interior_f_Valid() const{
    return m_interior_f_isValid;
}

QList<QString> OAIListingNestExtraAttributes::getOptions() const {
    return m_options;
}
void OAIListingNestExtraAttributes::setOptions(const QList<QString> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIListingNestExtraAttributes::is_options_Set() const{
    return m_options_isSet;
}

bool OAIListingNestExtraAttributes::is_options_Valid() const{
    return m_options_isValid;
}

QList<QString> OAIListingNestExtraAttributes::getSafetyF() const {
    return m_safety_f;
}
void OAIListingNestExtraAttributes::setSafetyF(const QList<QString> &safety_f) {
    m_safety_f = safety_f;
    m_safety_f_isSet = true;
}

bool OAIListingNestExtraAttributes::is_safety_f_Set() const{
    return m_safety_f_isSet;
}

bool OAIListingNestExtraAttributes::is_safety_f_Valid() const{
    return m_safety_f_isValid;
}

QString OAIListingNestExtraAttributes::getSellerComments() const {
    return m_seller_comments;
}
void OAIListingNestExtraAttributes::setSellerComments(const QString &seller_comments) {
    m_seller_comments = seller_comments;
    m_seller_comments_isSet = true;
}

bool OAIListingNestExtraAttributes::is_seller_comments_Set() const{
    return m_seller_comments_isSet;
}

bool OAIListingNestExtraAttributes::is_seller_comments_Valid() const{
    return m_seller_comments_isValid;
}

QList<QString> OAIListingNestExtraAttributes::getStandardF() const {
    return m_standard_f;
}
void OAIListingNestExtraAttributes::setStandardF(const QList<QString> &standard_f) {
    m_standard_f = standard_f;
    m_standard_f_isSet = true;
}

bool OAIListingNestExtraAttributes::is_standard_f_Set() const{
    return m_standard_f_isSet;
}

bool OAIListingNestExtraAttributes::is_standard_f_Valid() const{
    return m_standard_f_isValid;
}

QList<QString> OAIListingNestExtraAttributes::getTechnicalF() const {
    return m_technical_f;
}
void OAIListingNestExtraAttributes::setTechnicalF(const QList<QString> &technical_f) {
    m_technical_f = technical_f;
    m_technical_f_isSet = true;
}

bool OAIListingNestExtraAttributes::is_technical_f_Set() const{
    return m_technical_f_isSet;
}

bool OAIListingNestExtraAttributes::is_technical_f_Valid() const{
    return m_technical_f_isValid;
}

bool OAIListingNestExtraAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dealer_added_f.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_electronics_f.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exterior_f.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interior_f.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_safety_f.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_f.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_technical_f.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListingNestExtraAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
