/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictedSpecs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictedSpecs::OAIPredictedSpecs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictedSpecs::OAIPredictedSpecs() {
    this->initializeModel();
}

OAIPredictedSpecs::~OAIPredictedSpecs() {}

void OAIPredictedSpecs::initializeModel() {

    m_base_exterior_color_isSet = false;
    m_base_exterior_color_isValid = false;

    m_base_interior_color_isSet = false;
    m_base_interior_color_isValid = false;

    m_carfax_1_owner_isSet = false;
    m_carfax_1_owner_isValid = false;

    m_carfax_clean_title_isSet = false;
    m_carfax_clean_title_isValid = false;

    m_city_mpg_isSet = false;
    m_city_mpg_isValid = false;

    m_cylinders_isSet = false;
    m_cylinders_isValid = false;

    m_doors_isSet = false;
    m_doors_isValid = false;

    m_drivetrain_isSet = false;
    m_drivetrain_isValid = false;

    m_engine_block_isSet = false;
    m_engine_block_isValid = false;

    m_engine_size_isSet = false;
    m_engine_size_isValid = false;

    m_highway_mpg_isSet = false;
    m_highway_mpg_isValid = false;

    m_is_certified_isSet = false;
    m_is_certified_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_miles_isSet = false;
    m_miles_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_transmission_isSet = false;
    m_transmission_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIPredictedSpecs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictedSpecs::fromJsonObject(QJsonObject json) {

    m_base_exterior_color_isValid = ::OpenAPI::fromJsonValue(m_base_exterior_color, json[QString("base_exterior_color")]);
    m_base_exterior_color_isSet = !json[QString("base_exterior_color")].isNull() && m_base_exterior_color_isValid;

    m_base_interior_color_isValid = ::OpenAPI::fromJsonValue(m_base_interior_color, json[QString("base_interior_color")]);
    m_base_interior_color_isSet = !json[QString("base_interior_color")].isNull() && m_base_interior_color_isValid;

    m_carfax_1_owner_isValid = ::OpenAPI::fromJsonValue(m_carfax_1_owner, json[QString("carfax_1_owner")]);
    m_carfax_1_owner_isSet = !json[QString("carfax_1_owner")].isNull() && m_carfax_1_owner_isValid;

    m_carfax_clean_title_isValid = ::OpenAPI::fromJsonValue(m_carfax_clean_title, json[QString("carfax_clean_title")]);
    m_carfax_clean_title_isSet = !json[QString("carfax_clean_title")].isNull() && m_carfax_clean_title_isValid;

    m_city_mpg_isValid = ::OpenAPI::fromJsonValue(m_city_mpg, json[QString("city_mpg")]);
    m_city_mpg_isSet = !json[QString("city_mpg")].isNull() && m_city_mpg_isValid;

    m_cylinders_isValid = ::OpenAPI::fromJsonValue(m_cylinders, json[QString("cylinders")]);
    m_cylinders_isSet = !json[QString("cylinders")].isNull() && m_cylinders_isValid;

    m_doors_isValid = ::OpenAPI::fromJsonValue(m_doors, json[QString("doors")]);
    m_doors_isSet = !json[QString("doors")].isNull() && m_doors_isValid;

    m_drivetrain_isValid = ::OpenAPI::fromJsonValue(m_drivetrain, json[QString("drivetrain")]);
    m_drivetrain_isSet = !json[QString("drivetrain")].isNull() && m_drivetrain_isValid;

    m_engine_block_isValid = ::OpenAPI::fromJsonValue(m_engine_block, json[QString("engine_block")]);
    m_engine_block_isSet = !json[QString("engine_block")].isNull() && m_engine_block_isValid;

    m_engine_size_isValid = ::OpenAPI::fromJsonValue(m_engine_size, json[QString("engine_size")]);
    m_engine_size_isSet = !json[QString("engine_size")].isNull() && m_engine_size_isValid;

    m_highway_mpg_isValid = ::OpenAPI::fromJsonValue(m_highway_mpg, json[QString("highway_mpg")]);
    m_highway_mpg_isSet = !json[QString("highway_mpg")].isNull() && m_highway_mpg_isValid;

    m_is_certified_isValid = ::OpenAPI::fromJsonValue(m_is_certified, json[QString("is_certified")]);
    m_is_certified_isSet = !json[QString("is_certified")].isNull() && m_is_certified_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_miles_isValid = ::OpenAPI::fromJsonValue(m_miles, json[QString("miles")]);
    m_miles_isSet = !json[QString("miles")].isNull() && m_miles_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_transmission_isValid = ::OpenAPI::fromJsonValue(m_transmission, json[QString("transmission")]);
    m_transmission_isSet = !json[QString("transmission")].isNull() && m_transmission_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIPredictedSpecs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictedSpecs::asJsonObject() const {
    QJsonObject obj;
    if (m_base_exterior_color_isSet) {
        obj.insert(QString("base_exterior_color"), ::OpenAPI::toJsonValue(m_base_exterior_color));
    }
    if (m_base_interior_color_isSet) {
        obj.insert(QString("base_interior_color"), ::OpenAPI::toJsonValue(m_base_interior_color));
    }
    if (m_carfax_1_owner_isSet) {
        obj.insert(QString("carfax_1_owner"), ::OpenAPI::toJsonValue(m_carfax_1_owner));
    }
    if (m_carfax_clean_title_isSet) {
        obj.insert(QString("carfax_clean_title"), ::OpenAPI::toJsonValue(m_carfax_clean_title));
    }
    if (m_city_mpg_isSet) {
        obj.insert(QString("city_mpg"), ::OpenAPI::toJsonValue(m_city_mpg));
    }
    if (m_cylinders_isSet) {
        obj.insert(QString("cylinders"), ::OpenAPI::toJsonValue(m_cylinders));
    }
    if (m_doors_isSet) {
        obj.insert(QString("doors"), ::OpenAPI::toJsonValue(m_doors));
    }
    if (m_drivetrain_isSet) {
        obj.insert(QString("drivetrain"), ::OpenAPI::toJsonValue(m_drivetrain));
    }
    if (m_engine_block_isSet) {
        obj.insert(QString("engine_block"), ::OpenAPI::toJsonValue(m_engine_block));
    }
    if (m_engine_size_isSet) {
        obj.insert(QString("engine_size"), ::OpenAPI::toJsonValue(m_engine_size));
    }
    if (m_highway_mpg_isSet) {
        obj.insert(QString("highway_mpg"), ::OpenAPI::toJsonValue(m_highway_mpg));
    }
    if (m_is_certified_isSet) {
        obj.insert(QString("is_certified"), ::OpenAPI::toJsonValue(m_is_certified));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_miles_isSet) {
        obj.insert(QString("miles"), ::OpenAPI::toJsonValue(m_miles));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_transmission_isSet) {
        obj.insert(QString("transmission"), ::OpenAPI::toJsonValue(m_transmission));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIPredictedSpecs::getBaseExteriorColor() const {
    return m_base_exterior_color;
}
void OAIPredictedSpecs::setBaseExteriorColor(const QString &base_exterior_color) {
    m_base_exterior_color = base_exterior_color;
    m_base_exterior_color_isSet = true;
}

bool OAIPredictedSpecs::is_base_exterior_color_Set() const{
    return m_base_exterior_color_isSet;
}

bool OAIPredictedSpecs::is_base_exterior_color_Valid() const{
    return m_base_exterior_color_isValid;
}

QString OAIPredictedSpecs::getBaseInteriorColor() const {
    return m_base_interior_color;
}
void OAIPredictedSpecs::setBaseInteriorColor(const QString &base_interior_color) {
    m_base_interior_color = base_interior_color;
    m_base_interior_color_isSet = true;
}

bool OAIPredictedSpecs::is_base_interior_color_Set() const{
    return m_base_interior_color_isSet;
}

bool OAIPredictedSpecs::is_base_interior_color_Valid() const{
    return m_base_interior_color_isValid;
}

bool OAIPredictedSpecs::isCarfax1Owner() const {
    return m_carfax_1_owner;
}
void OAIPredictedSpecs::setCarfax1Owner(const bool &carfax_1_owner) {
    m_carfax_1_owner = carfax_1_owner;
    m_carfax_1_owner_isSet = true;
}

bool OAIPredictedSpecs::is_carfax_1_owner_Set() const{
    return m_carfax_1_owner_isSet;
}

bool OAIPredictedSpecs::is_carfax_1_owner_Valid() const{
    return m_carfax_1_owner_isValid;
}

bool OAIPredictedSpecs::isCarfaxCleanTitle() const {
    return m_carfax_clean_title;
}
void OAIPredictedSpecs::setCarfaxCleanTitle(const bool &carfax_clean_title) {
    m_carfax_clean_title = carfax_clean_title;
    m_carfax_clean_title_isSet = true;
}

bool OAIPredictedSpecs::is_carfax_clean_title_Set() const{
    return m_carfax_clean_title_isSet;
}

bool OAIPredictedSpecs::is_carfax_clean_title_Valid() const{
    return m_carfax_clean_title_isValid;
}

double OAIPredictedSpecs::getCityMpg() const {
    return m_city_mpg;
}
void OAIPredictedSpecs::setCityMpg(const double &city_mpg) {
    m_city_mpg = city_mpg;
    m_city_mpg_isSet = true;
}

bool OAIPredictedSpecs::is_city_mpg_Set() const{
    return m_city_mpg_isSet;
}

bool OAIPredictedSpecs::is_city_mpg_Valid() const{
    return m_city_mpg_isValid;
}

qint32 OAIPredictedSpecs::getCylinders() const {
    return m_cylinders;
}
void OAIPredictedSpecs::setCylinders(const qint32 &cylinders) {
    m_cylinders = cylinders;
    m_cylinders_isSet = true;
}

bool OAIPredictedSpecs::is_cylinders_Set() const{
    return m_cylinders_isSet;
}

bool OAIPredictedSpecs::is_cylinders_Valid() const{
    return m_cylinders_isValid;
}

qint32 OAIPredictedSpecs::getDoors() const {
    return m_doors;
}
void OAIPredictedSpecs::setDoors(const qint32 &doors) {
    m_doors = doors;
    m_doors_isSet = true;
}

bool OAIPredictedSpecs::is_doors_Set() const{
    return m_doors_isSet;
}

bool OAIPredictedSpecs::is_doors_Valid() const{
    return m_doors_isValid;
}

QString OAIPredictedSpecs::getDrivetrain() const {
    return m_drivetrain;
}
void OAIPredictedSpecs::setDrivetrain(const QString &drivetrain) {
    m_drivetrain = drivetrain;
    m_drivetrain_isSet = true;
}

bool OAIPredictedSpecs::is_drivetrain_Set() const{
    return m_drivetrain_isSet;
}

bool OAIPredictedSpecs::is_drivetrain_Valid() const{
    return m_drivetrain_isValid;
}

QString OAIPredictedSpecs::getEngineBlock() const {
    return m_engine_block;
}
void OAIPredictedSpecs::setEngineBlock(const QString &engine_block) {
    m_engine_block = engine_block;
    m_engine_block_isSet = true;
}

bool OAIPredictedSpecs::is_engine_block_Set() const{
    return m_engine_block_isSet;
}

bool OAIPredictedSpecs::is_engine_block_Valid() const{
    return m_engine_block_isValid;
}

double OAIPredictedSpecs::getEngineSize() const {
    return m_engine_size;
}
void OAIPredictedSpecs::setEngineSize(const double &engine_size) {
    m_engine_size = engine_size;
    m_engine_size_isSet = true;
}

bool OAIPredictedSpecs::is_engine_size_Set() const{
    return m_engine_size_isSet;
}

bool OAIPredictedSpecs::is_engine_size_Valid() const{
    return m_engine_size_isValid;
}

double OAIPredictedSpecs::getHighwayMpg() const {
    return m_highway_mpg;
}
void OAIPredictedSpecs::setHighwayMpg(const double &highway_mpg) {
    m_highway_mpg = highway_mpg;
    m_highway_mpg_isSet = true;
}

bool OAIPredictedSpecs::is_highway_mpg_Set() const{
    return m_highway_mpg_isSet;
}

bool OAIPredictedSpecs::is_highway_mpg_Valid() const{
    return m_highway_mpg_isValid;
}

bool OAIPredictedSpecs::isIsCertified() const {
    return m_is_certified;
}
void OAIPredictedSpecs::setIsCertified(const bool &is_certified) {
    m_is_certified = is_certified;
    m_is_certified_isSet = true;
}

bool OAIPredictedSpecs::is_is_certified_Set() const{
    return m_is_certified_isSet;
}

bool OAIPredictedSpecs::is_is_certified_Valid() const{
    return m_is_certified_isValid;
}

double OAIPredictedSpecs::getLatitude() const {
    return m_latitude;
}
void OAIPredictedSpecs::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIPredictedSpecs::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIPredictedSpecs::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIPredictedSpecs::getLongitude() const {
    return m_longitude;
}
void OAIPredictedSpecs::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIPredictedSpecs::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIPredictedSpecs::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIPredictedSpecs::getMake() const {
    return m_make;
}
void OAIPredictedSpecs::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIPredictedSpecs::is_make_Set() const{
    return m_make_isSet;
}

bool OAIPredictedSpecs::is_make_Valid() const{
    return m_make_isValid;
}

qint32 OAIPredictedSpecs::getMiles() const {
    return m_miles;
}
void OAIPredictedSpecs::setMiles(const qint32 &miles) {
    m_miles = miles;
    m_miles_isSet = true;
}

bool OAIPredictedSpecs::is_miles_Set() const{
    return m_miles_isSet;
}

bool OAIPredictedSpecs::is_miles_Valid() const{
    return m_miles_isValid;
}

QString OAIPredictedSpecs::getModel() const {
    return m_model;
}
void OAIPredictedSpecs::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIPredictedSpecs::is_model_Set() const{
    return m_model_isSet;
}

bool OAIPredictedSpecs::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIPredictedSpecs::getTransmission() const {
    return m_transmission;
}
void OAIPredictedSpecs::setTransmission(const QString &transmission) {
    m_transmission = transmission;
    m_transmission_isSet = true;
}

bool OAIPredictedSpecs::is_transmission_Set() const{
    return m_transmission_isSet;
}

bool OAIPredictedSpecs::is_transmission_Valid() const{
    return m_transmission_isValid;
}

QString OAIPredictedSpecs::getTrim() const {
    return m_trim;
}
void OAIPredictedSpecs::setTrim(const QString &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIPredictedSpecs::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIPredictedSpecs::is_trim_Valid() const{
    return m_trim_isValid;
}

qint32 OAIPredictedSpecs::getYear() const {
    return m_year;
}
void OAIPredictedSpecs::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIPredictedSpecs::is_year_Set() const{
    return m_year_isSet;
}

bool OAIPredictedSpecs::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIPredictedSpecs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_exterior_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_interior_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carfax_1_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carfax_clean_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_mpg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cylinders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drivetrain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highway_mpg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_certified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictedSpecs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
