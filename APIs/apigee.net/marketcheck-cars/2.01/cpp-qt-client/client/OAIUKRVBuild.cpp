/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUKRVBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUKRVBuild::OAIUKRVBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUKRVBuild::OAIUKRVBuild() {
    this->initializeModel();
}

OAIUKRVBuild::~OAIUKRVBuild() {}

void OAIUKRVBuild::initializeModel() {

    m_area_isSet = false;
    m_area_isValid = false;

    m_berths_isSet = false;
    m_berths_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_chassis_isSet = false;
    m_chassis_isValid = false;

    m_drive_type_isSet = false;
    m_drive_type_isValid = false;

    m_drivetrain_isSet = false;
    m_drivetrain_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_size_isSet = false;
    m_engine_size_isValid = false;

    m_exterior_length_isSet = false;
    m_exterior_length_isValid = false;

    m_floorplan_isSet = false;
    m_floorplan_isValid = false;

    m_floorplan_layout_isSet = false;
    m_floorplan_layout_isValid = false;

    m_fuel_type_isSet = false;
    m_fuel_type_isValid = false;

    m_gvwr_isSet = false;
    m_gvwr_isValid = false;

    m_interior_length_isSet = false;
    m_interior_length_isValid = false;

    m_inventory_type_isSet = false;
    m_inventory_type_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_mtplm_isSet = false;
    m_mtplm_isValid = false;

    m_slideouts_isSet = false;
    m_slideouts_isValid = false;

    m_steering_isSet = false;
    m_steering_isValid = false;

    m_sub_category_isSet = false;
    m_sub_category_isValid = false;

    m_transmission_isSet = false;
    m_transmission_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIUKRVBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUKRVBuild::fromJsonObject(QJsonObject json) {

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_berths_isValid = ::OpenAPI::fromJsonValue(m_berths, json[QString("berths")]);
    m_berths_isSet = !json[QString("berths")].isNull() && m_berths_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_chassis_isValid = ::OpenAPI::fromJsonValue(m_chassis, json[QString("chassis")]);
    m_chassis_isSet = !json[QString("chassis")].isNull() && m_chassis_isValid;

    m_drive_type_isValid = ::OpenAPI::fromJsonValue(m_drive_type, json[QString("drive_type")]);
    m_drive_type_isSet = !json[QString("drive_type")].isNull() && m_drive_type_isValid;

    m_drivetrain_isValid = ::OpenAPI::fromJsonValue(m_drivetrain, json[QString("drivetrain")]);
    m_drivetrain_isSet = !json[QString("drivetrain")].isNull() && m_drivetrain_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_engine_size_isValid = ::OpenAPI::fromJsonValue(m_engine_size, json[QString("engine_size")]);
    m_engine_size_isSet = !json[QString("engine_size")].isNull() && m_engine_size_isValid;

    m_exterior_length_isValid = ::OpenAPI::fromJsonValue(m_exterior_length, json[QString("exterior_length")]);
    m_exterior_length_isSet = !json[QString("exterior_length")].isNull() && m_exterior_length_isValid;

    m_floorplan_isValid = ::OpenAPI::fromJsonValue(m_floorplan, json[QString("floorplan")]);
    m_floorplan_isSet = !json[QString("floorplan")].isNull() && m_floorplan_isValid;

    m_floorplan_layout_isValid = ::OpenAPI::fromJsonValue(m_floorplan_layout, json[QString("floorplan_layout")]);
    m_floorplan_layout_isSet = !json[QString("floorplan_layout")].isNull() && m_floorplan_layout_isValid;

    m_fuel_type_isValid = ::OpenAPI::fromJsonValue(m_fuel_type, json[QString("fuel_type")]);
    m_fuel_type_isSet = !json[QString("fuel_type")].isNull() && m_fuel_type_isValid;

    m_gvwr_isValid = ::OpenAPI::fromJsonValue(m_gvwr, json[QString("gvwr")]);
    m_gvwr_isSet = !json[QString("gvwr")].isNull() && m_gvwr_isValid;

    m_interior_length_isValid = ::OpenAPI::fromJsonValue(m_interior_length, json[QString("interior_length")]);
    m_interior_length_isSet = !json[QString("interior_length")].isNull() && m_interior_length_isValid;

    m_inventory_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_type, json[QString("inventory_type")]);
    m_inventory_type_isSet = !json[QString("inventory_type")].isNull() && m_inventory_type_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_mtplm_isValid = ::OpenAPI::fromJsonValue(m_mtplm, json[QString("mtplm")]);
    m_mtplm_isSet = !json[QString("mtplm")].isNull() && m_mtplm_isValid;

    m_slideouts_isValid = ::OpenAPI::fromJsonValue(m_slideouts, json[QString("slideouts")]);
    m_slideouts_isSet = !json[QString("slideouts")].isNull() && m_slideouts_isValid;

    m_steering_isValid = ::OpenAPI::fromJsonValue(m_steering, json[QString("steering")]);
    m_steering_isSet = !json[QString("steering")].isNull() && m_steering_isValid;

    m_sub_category_isValid = ::OpenAPI::fromJsonValue(m_sub_category, json[QString("sub_category")]);
    m_sub_category_isSet = !json[QString("sub_category")].isNull() && m_sub_category_isValid;

    m_transmission_isValid = ::OpenAPI::fromJsonValue(m_transmission, json[QString("transmission")]);
    m_transmission_isSet = !json[QString("transmission")].isNull() && m_transmission_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIUKRVBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUKRVBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_area_isSet) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_berths_isSet) {
        obj.insert(QString("berths"), ::OpenAPI::toJsonValue(m_berths));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_chassis_isSet) {
        obj.insert(QString("chassis"), ::OpenAPI::toJsonValue(m_chassis));
    }
    if (m_drive_type_isSet) {
        obj.insert(QString("drive_type"), ::OpenAPI::toJsonValue(m_drive_type));
    }
    if (m_drivetrain_isSet) {
        obj.insert(QString("drivetrain"), ::OpenAPI::toJsonValue(m_drivetrain));
    }
    if (m_engine_isSet) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_size_isSet) {
        obj.insert(QString("engine_size"), ::OpenAPI::toJsonValue(m_engine_size));
    }
    if (m_exterior_length_isSet) {
        obj.insert(QString("exterior_length"), ::OpenAPI::toJsonValue(m_exterior_length));
    }
    if (m_floorplan_isSet) {
        obj.insert(QString("floorplan"), ::OpenAPI::toJsonValue(m_floorplan));
    }
    if (m_floorplan_layout_isSet) {
        obj.insert(QString("floorplan_layout"), ::OpenAPI::toJsonValue(m_floorplan_layout));
    }
    if (m_fuel_type_isSet) {
        obj.insert(QString("fuel_type"), ::OpenAPI::toJsonValue(m_fuel_type));
    }
    if (m_gvwr_isSet) {
        obj.insert(QString("gvwr"), ::OpenAPI::toJsonValue(m_gvwr));
    }
    if (m_interior_length_isSet) {
        obj.insert(QString("interior_length"), ::OpenAPI::toJsonValue(m_interior_length));
    }
    if (m_inventory_type_isSet) {
        obj.insert(QString("inventory_type"), ::OpenAPI::toJsonValue(m_inventory_type));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_mtplm_isSet) {
        obj.insert(QString("mtplm"), ::OpenAPI::toJsonValue(m_mtplm));
    }
    if (m_slideouts_isSet) {
        obj.insert(QString("slideouts"), ::OpenAPI::toJsonValue(m_slideouts));
    }
    if (m_steering_isSet) {
        obj.insert(QString("steering"), ::OpenAPI::toJsonValue(m_steering));
    }
    if (m_sub_category_isSet) {
        obj.insert(QString("sub_category"), ::OpenAPI::toJsonValue(m_sub_category));
    }
    if (m_transmission_isSet) {
        obj.insert(QString("transmission"), ::OpenAPI::toJsonValue(m_transmission));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIUKRVBuild::getArea() const {
    return m_area;
}
void OAIUKRVBuild::setArea(const QString &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIUKRVBuild::is_area_Set() const{
    return m_area_isSet;
}

bool OAIUKRVBuild::is_area_Valid() const{
    return m_area_isValid;
}

QString OAIUKRVBuild::getBerths() const {
    return m_berths;
}
void OAIUKRVBuild::setBerths(const QString &berths) {
    m_berths = berths;
    m_berths_isSet = true;
}

bool OAIUKRVBuild::is_berths_Set() const{
    return m_berths_isSet;
}

bool OAIUKRVBuild::is_berths_Valid() const{
    return m_berths_isValid;
}

QString OAIUKRVBuild::getCategory() const {
    return m_category;
}
void OAIUKRVBuild::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIUKRVBuild::is_category_Set() const{
    return m_category_isSet;
}

bool OAIUKRVBuild::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIUKRVBuild::getChassis() const {
    return m_chassis;
}
void OAIUKRVBuild::setChassis(const QString &chassis) {
    m_chassis = chassis;
    m_chassis_isSet = true;
}

bool OAIUKRVBuild::is_chassis_Set() const{
    return m_chassis_isSet;
}

bool OAIUKRVBuild::is_chassis_Valid() const{
    return m_chassis_isValid;
}

QString OAIUKRVBuild::getDriveType() const {
    return m_drive_type;
}
void OAIUKRVBuild::setDriveType(const QString &drive_type) {
    m_drive_type = drive_type;
    m_drive_type_isSet = true;
}

bool OAIUKRVBuild::is_drive_type_Set() const{
    return m_drive_type_isSet;
}

bool OAIUKRVBuild::is_drive_type_Valid() const{
    return m_drive_type_isValid;
}

QString OAIUKRVBuild::getDrivetrain() const {
    return m_drivetrain;
}
void OAIUKRVBuild::setDrivetrain(const QString &drivetrain) {
    m_drivetrain = drivetrain;
    m_drivetrain_isSet = true;
}

bool OAIUKRVBuild::is_drivetrain_Set() const{
    return m_drivetrain_isSet;
}

bool OAIUKRVBuild::is_drivetrain_Valid() const{
    return m_drivetrain_isValid;
}

QString OAIUKRVBuild::getEngine() const {
    return m_engine;
}
void OAIUKRVBuild::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIUKRVBuild::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIUKRVBuild::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIUKRVBuild::getEngineSize() const {
    return m_engine_size;
}
void OAIUKRVBuild::setEngineSize(const QString &engine_size) {
    m_engine_size = engine_size;
    m_engine_size_isSet = true;
}

bool OAIUKRVBuild::is_engine_size_Set() const{
    return m_engine_size_isSet;
}

bool OAIUKRVBuild::is_engine_size_Valid() const{
    return m_engine_size_isValid;
}

QString OAIUKRVBuild::getExteriorLength() const {
    return m_exterior_length;
}
void OAIUKRVBuild::setExteriorLength(const QString &exterior_length) {
    m_exterior_length = exterior_length;
    m_exterior_length_isSet = true;
}

bool OAIUKRVBuild::is_exterior_length_Set() const{
    return m_exterior_length_isSet;
}

bool OAIUKRVBuild::is_exterior_length_Valid() const{
    return m_exterior_length_isValid;
}

QString OAIUKRVBuild::getFloorplan() const {
    return m_floorplan;
}
void OAIUKRVBuild::setFloorplan(const QString &floorplan) {
    m_floorplan = floorplan;
    m_floorplan_isSet = true;
}

bool OAIUKRVBuild::is_floorplan_Set() const{
    return m_floorplan_isSet;
}

bool OAIUKRVBuild::is_floorplan_Valid() const{
    return m_floorplan_isValid;
}

QString OAIUKRVBuild::getFloorplanLayout() const {
    return m_floorplan_layout;
}
void OAIUKRVBuild::setFloorplanLayout(const QString &floorplan_layout) {
    m_floorplan_layout = floorplan_layout;
    m_floorplan_layout_isSet = true;
}

bool OAIUKRVBuild::is_floorplan_layout_Set() const{
    return m_floorplan_layout_isSet;
}

bool OAIUKRVBuild::is_floorplan_layout_Valid() const{
    return m_floorplan_layout_isValid;
}

QString OAIUKRVBuild::getFuelType() const {
    return m_fuel_type;
}
void OAIUKRVBuild::setFuelType(const QString &fuel_type) {
    m_fuel_type = fuel_type;
    m_fuel_type_isSet = true;
}

bool OAIUKRVBuild::is_fuel_type_Set() const{
    return m_fuel_type_isSet;
}

bool OAIUKRVBuild::is_fuel_type_Valid() const{
    return m_fuel_type_isValid;
}

QString OAIUKRVBuild::getGvwr() const {
    return m_gvwr;
}
void OAIUKRVBuild::setGvwr(const QString &gvwr) {
    m_gvwr = gvwr;
    m_gvwr_isSet = true;
}

bool OAIUKRVBuild::is_gvwr_Set() const{
    return m_gvwr_isSet;
}

bool OAIUKRVBuild::is_gvwr_Valid() const{
    return m_gvwr_isValid;
}

QString OAIUKRVBuild::getInteriorLength() const {
    return m_interior_length;
}
void OAIUKRVBuild::setInteriorLength(const QString &interior_length) {
    m_interior_length = interior_length;
    m_interior_length_isSet = true;
}

bool OAIUKRVBuild::is_interior_length_Set() const{
    return m_interior_length_isSet;
}

bool OAIUKRVBuild::is_interior_length_Valid() const{
    return m_interior_length_isValid;
}

QString OAIUKRVBuild::getInventoryType() const {
    return m_inventory_type;
}
void OAIUKRVBuild::setInventoryType(const QString &inventory_type) {
    m_inventory_type = inventory_type;
    m_inventory_type_isSet = true;
}

bool OAIUKRVBuild::is_inventory_type_Set() const{
    return m_inventory_type_isSet;
}

bool OAIUKRVBuild::is_inventory_type_Valid() const{
    return m_inventory_type_isValid;
}

QString OAIUKRVBuild::getMake() const {
    return m_make;
}
void OAIUKRVBuild::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIUKRVBuild::is_make_Set() const{
    return m_make_isSet;
}

bool OAIUKRVBuild::is_make_Valid() const{
    return m_make_isValid;
}

QString OAIUKRVBuild::getModel() const {
    return m_model;
}
void OAIUKRVBuild::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIUKRVBuild::is_model_Set() const{
    return m_model_isSet;
}

bool OAIUKRVBuild::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIUKRVBuild::getMtplm() const {
    return m_mtplm;
}
void OAIUKRVBuild::setMtplm(const QString &mtplm) {
    m_mtplm = mtplm;
    m_mtplm_isSet = true;
}

bool OAIUKRVBuild::is_mtplm_Set() const{
    return m_mtplm_isSet;
}

bool OAIUKRVBuild::is_mtplm_Valid() const{
    return m_mtplm_isValid;
}

QString OAIUKRVBuild::getSlideouts() const {
    return m_slideouts;
}
void OAIUKRVBuild::setSlideouts(const QString &slideouts) {
    m_slideouts = slideouts;
    m_slideouts_isSet = true;
}

bool OAIUKRVBuild::is_slideouts_Set() const{
    return m_slideouts_isSet;
}

bool OAIUKRVBuild::is_slideouts_Valid() const{
    return m_slideouts_isValid;
}

QString OAIUKRVBuild::getSteering() const {
    return m_steering;
}
void OAIUKRVBuild::setSteering(const QString &steering) {
    m_steering = steering;
    m_steering_isSet = true;
}

bool OAIUKRVBuild::is_steering_Set() const{
    return m_steering_isSet;
}

bool OAIUKRVBuild::is_steering_Valid() const{
    return m_steering_isValid;
}

QString OAIUKRVBuild::getSubCategory() const {
    return m_sub_category;
}
void OAIUKRVBuild::setSubCategory(const QString &sub_category) {
    m_sub_category = sub_category;
    m_sub_category_isSet = true;
}

bool OAIUKRVBuild::is_sub_category_Set() const{
    return m_sub_category_isSet;
}

bool OAIUKRVBuild::is_sub_category_Valid() const{
    return m_sub_category_isValid;
}

QString OAIUKRVBuild::getTransmission() const {
    return m_transmission;
}
void OAIUKRVBuild::setTransmission(const QString &transmission) {
    m_transmission = transmission;
    m_transmission_isSet = true;
}

bool OAIUKRVBuild::is_transmission_Set() const{
    return m_transmission_isSet;
}

bool OAIUKRVBuild::is_transmission_Valid() const{
    return m_transmission_isValid;
}

QString OAIUKRVBuild::getWidth() const {
    return m_width;
}
void OAIUKRVBuild::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIUKRVBuild::is_width_Set() const{
    return m_width_isSet;
}

bool OAIUKRVBuild::is_width_Valid() const{
    return m_width_isValid;
}

qint32 OAIUKRVBuild::getYear() const {
    return m_year;
}
void OAIUKRVBuild::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIUKRVBuild::is_year_Set() const{
    return m_year_isSet;
}

bool OAIUKRVBuild::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIUKRVBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_berths_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chassis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drivetrain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exterior_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floorplan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floorplan_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gvwr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interior_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mtplm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slideouts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUKRVBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
