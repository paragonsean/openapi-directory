/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICarsMarketAPIApi_H
#define OAI_OAICarsMarketAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDailyStats.h"
#include "OAIError.h"
#include "OAIFareValue.h"
#include "OAIMds.h"
#include "OAIPopularCars.h"
#include "OAIPricePrediction.h"
#include "OAISales.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICarsMarketAPIApi : public QObject {
    Q_OBJECT

public:
    OAICarsMarketAPIApi(const int timeOut = 0);
    ~OAICarsMarketAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  vrm QString [optional]
    * @param[in]  year qint32 [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  variant QString [optional]
    * @param[in]  miles qint32 [optional]
    * @param[in]  postal_code QString [optional]
    * @param[in]  radius qint32 [optional]
    */
    virtual void fareValue(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &variant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &miles = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  car_type QString [optional]
    * @param[in]  ymm QString [optional]
    * @param[in]  ymmt QString [optional]
    * @param[in]  taxonomy_vin QString [optional]
    * @param[in]  vin QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  city_state QString [optional]
    */
    virtual void getDailyStats(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &car_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ymm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ymmt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &taxonomy_vin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city_state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  vin QString [optional]
    * @param[in]  exact bool [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  msa_code QString [optional]
    * @param[in]  debug bool [optional]
    * @param[in]  include_sold bool [optional]
    * @param[in]  country QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  ymmt QString [optional]
    * @param[in]  car_type QString [optional]
    * @param[in]  lease_term QString [optional]
    * @param[in]  lease_down_payment QString [optional]
    * @param[in]  lease_emp QString [optional]
    * @param[in]  finance_loan_term QString [optional]
    * @param[in]  finance_loan_apr QString [optional]
    * @param[in]  finance_emp QString [optional]
    * @param[in]  finance_down_payment QString [optional]
    * @param[in]  finance_down_payment_per QString [optional]
    * @param[in]  carfax_1_owner QString [optional]
    * @param[in]  carfax_clean_title QString [optional]
    * @param[in]  year QString [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  trim QString [optional]
    * @param[in]  dealer_id QString [optional]
    * @param[in]  source QString [optional]
    * @param[in]  body_type QString [optional]
    * @param[in]  body_subtype QString [optional]
    * @param[in]  vehicle_type QString [optional]
    * @param[in]  cylinders QString [optional]
    * @param[in]  transmission QString [optional]
    * @param[in]  doors QString [optional]
    * @param[in]  drivetrain QString [optional]
    * @param[in]  exterior_color QString [optional]
    * @param[in]  interior_color QString [optional]
    * @param[in]  base_exterior_color QString [optional]
    * @param[in]  base_interior_color QString [optional]
    * @param[in]  engine QString [optional]
    * @param[in]  engine_size QString [optional]
    * @param[in]  engine_aspiration QString [optional]
    * @param[in]  engine_block QString [optional]
    * @param[in]  highway_mpg_range QString [optional]
    * @param[in]  city_mpg_range QString [optional]
    * @param[in]  miles_range QString [optional]
    * @param[in]  price_range QString [optional]
    * @param[in]  msrp_range QString [optional]
    * @param[in]  dom_range QString [optional]
    * @param[in]  dealership_group_name QString [optional]
    * @param[in]  dom_active_range QString [optional]
    * @param[in]  dom_180_range QString [optional]
    * @param[in]  fuel_type QString [optional]
    * @param[in]  dealer_type QString [optional]
    * @param[in]  engine_size_range QString [optional]
    */
    virtual void getMDS(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exact = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &msa_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &debug = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_sold = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ymmt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &car_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lease_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lease_down_payment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lease_emp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finance_loan_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finance_loan_apr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finance_emp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finance_down_payment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finance_down_payment_per = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &carfax_1_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &carfax_clean_title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body_subtype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vehicle_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cylinders = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transmission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &doors = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drivetrain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exterior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_exterior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_interior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_aspiration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_block = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &highway_mpg_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city_mpg_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &miles_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &price_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &msrp_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dom_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealership_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dom_active_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dom_180_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fuel_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_size_range = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  car_type QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  city_state QString [optional]
    * @param[in]  country QString [optional]
    */
    virtual void getPopularCars(const QString &car_type, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  car_type QString [optional]
    * @param[in]  make QString [optional]
    * @param[in]  mm QString [optional]
    * @param[in]  ymm QString [optional]
    * @param[in]  ymmt QString [optional]
    * @param[in]  taxonomy_vin QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  city_state QString [optional]
    * @param[in]  vin QString [optional]
    * @param[in]  country QString [optional]
    */
    virtual void getSalesCount(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &car_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ymm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ymmt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &taxonomy_vin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  car_type QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  vin QString [optional]
    * @param[in]  year qint32 [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  trim QString [optional]
    * @param[in]  is_certified bool [optional]
    * @param[in]  carfax_1_owner bool [optional]
    * @param[in]  carfax_clean_title bool [optional]
    * @param[in]  base_exterior_color QString [optional]
    * @param[in]  base_interior_color QString [optional]
    * @param[in]  transmission QString [optional]
    * @param[in]  drivetrain QString [optional]
    * @param[in]  engine_size double [optional]
    * @param[in]  engine_block QString [optional]
    * @param[in]  cylinders qint32 [optional]
    * @param[in]  doors qint32 [optional]
    * @param[in]  highway_mpg qint32 [optional]
    * @param[in]  city_mpg qint32 [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  miles qint32 [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  country QString [optional]
    */
    virtual void predictCarPrice(const QString &car_type, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_certified = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &carfax_1_owner = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &carfax_clean_title = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &base_exterior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_interior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transmission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drivetrain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &engine_size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &engine_block = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &cylinders = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &doors = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &highway_mpg = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &city_mpg = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &miles = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  vrm QString [optional]
    * @param[in]  year qint32 [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  trim QString [optional]
    * @param[in]  base_exterior_color QString [optional]
    * @param[in]  transmission QString [optional]
    * @param[in]  drivetrain QString [optional]
    * @param[in]  engine_size double [optional]
    * @param[in]  cylinders qint32 [optional]
    * @param[in]  doors qint32 [optional]
    * @param[in]  fuel_type QString [optional]
    * @param[in]  highway_mpg double [optional]
    * @param[in]  city_mpg double [optional]
    * @param[in]  combined_mpg double [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  miles qint32 [optional]
    * @param[in]  zip QString [optional]
    */
    virtual void predictUkCarPrice(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_exterior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transmission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drivetrain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &engine_size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &cylinders = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &doors = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &fuel_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &highway_mpg = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &city_mpg = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &combined_mpg = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &miles = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fareValueCallback(OAIHttpRequestWorker *worker);
    void getDailyStatsCallback(OAIHttpRequestWorker *worker);
    void getMDSCallback(OAIHttpRequestWorker *worker);
    void getPopularCarsCallback(OAIHttpRequestWorker *worker);
    void getSalesCountCallback(OAIHttpRequestWorker *worker);
    void predictCarPriceCallback(OAIHttpRequestWorker *worker);
    void predictUkCarPriceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fareValueSignal(OAIFareValue summary);
    void getDailyStatsSignal(OAIDailyStats summary);
    void getMDSSignal(OAIMds summary);
    void getPopularCarsSignal(OAIPopularCars summary);
    void getSalesCountSignal(OAISales summary);
    void predictCarPriceSignal(OAIPricePrediction summary);
    void predictUkCarPriceSignal(OAIPricePrediction summary);


    void fareValueSignalFull(OAIHttpRequestWorker *worker, OAIFareValue summary);
    void getDailyStatsSignalFull(OAIHttpRequestWorker *worker, OAIDailyStats summary);
    void getMDSSignalFull(OAIHttpRequestWorker *worker, OAIMds summary);
    void getPopularCarsSignalFull(OAIHttpRequestWorker *worker, OAIPopularCars summary);
    void getSalesCountSignalFull(OAIHttpRequestWorker *worker, OAISales summary);
    void predictCarPriceSignalFull(OAIHttpRequestWorker *worker, OAIPricePrediction summary);
    void predictUkCarPriceSignalFull(OAIHttpRequestWorker *worker, OAIPricePrediction summary);

    Q_DECL_DEPRECATED_X("Use fareValueSignalError() instead")
    void fareValueSignalE(OAIFareValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fareValueSignalError(OAIFareValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDailyStatsSignalError() instead")
    void getDailyStatsSignalE(OAIDailyStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDailyStatsSignalError(OAIDailyStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMDSSignalError() instead")
    void getMDSSignalE(OAIMds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMDSSignalError(OAIMds summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPopularCarsSignalError() instead")
    void getPopularCarsSignalE(OAIPopularCars summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPopularCarsSignalError(OAIPopularCars summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSalesCountSignalError() instead")
    void getSalesCountSignalE(OAISales summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSalesCountSignalError(OAISales summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictCarPriceSignalError() instead")
    void predictCarPriceSignalE(OAIPricePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictCarPriceSignalError(OAIPricePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictUkCarPriceSignalError() instead")
    void predictUkCarPriceSignalE(OAIPricePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictUkCarPriceSignalError(OAIPricePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fareValueSignalErrorFull() instead")
    void fareValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fareValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDailyStatsSignalErrorFull() instead")
    void getDailyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDailyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMDSSignalErrorFull() instead")
    void getMDSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMDSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPopularCarsSignalErrorFull() instead")
    void getPopularCarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPopularCarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSalesCountSignalErrorFull() instead")
    void getSalesCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSalesCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictCarPriceSignalErrorFull() instead")
    void predictCarPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictCarPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictUkCarPriceSignalErrorFull() instead")
    void predictUkCarPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictUkCarPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
