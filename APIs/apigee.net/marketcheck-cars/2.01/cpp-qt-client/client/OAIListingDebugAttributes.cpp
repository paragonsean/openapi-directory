/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListingDebugAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListingDebugAttributes::OAIListingDebugAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListingDebugAttributes::OAIListingDebugAttributes() {
    this->initializeModel();
}

OAIListingDebugAttributes::~OAIListingDebugAttributes() {}

void OAIListingDebugAttributes::initializeModel() {

    m_cycle_id_isSet = false;
    m_cycle_id_isValid = false;

    m_robot_id_isSet = false;
    m_robot_id_isValid = false;

    m_scraped_at_isSet = false;
    m_scraped_at_isValid = false;

    m_taxonomy_vin_isSet = false;
    m_taxonomy_vin_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIListingDebugAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListingDebugAttributes::fromJsonObject(QJsonObject json) {

    m_cycle_id_isValid = ::OpenAPI::fromJsonValue(m_cycle_id, json[QString("cycle_id")]);
    m_cycle_id_isSet = !json[QString("cycle_id")].isNull() && m_cycle_id_isValid;

    m_robot_id_isValid = ::OpenAPI::fromJsonValue(m_robot_id, json[QString("robot_id")]);
    m_robot_id_isSet = !json[QString("robot_id")].isNull() && m_robot_id_isValid;

    m_scraped_at_isValid = ::OpenAPI::fromJsonValue(m_scraped_at, json[QString("scraped_at")]);
    m_scraped_at_isSet = !json[QString("scraped_at")].isNull() && m_scraped_at_isValid;

    m_taxonomy_vin_isValid = ::OpenAPI::fromJsonValue(m_taxonomy_vin, json[QString("taxonomy_vin")]);
    m_taxonomy_vin_isSet = !json[QString("taxonomy_vin")].isNull() && m_taxonomy_vin_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("template_id")]);
    m_template_id_isSet = !json[QString("template_id")].isNull() && m_template_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIListingDebugAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListingDebugAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_cycle_id_isSet) {
        obj.insert(QString("cycle_id"), ::OpenAPI::toJsonValue(m_cycle_id));
    }
    if (m_robot_id_isSet) {
        obj.insert(QString("robot_id"), ::OpenAPI::toJsonValue(m_robot_id));
    }
    if (m_scraped_at_isSet) {
        obj.insert(QString("scraped_at"), ::OpenAPI::toJsonValue(m_scraped_at));
    }
    if (m_taxonomy_vin_isSet) {
        obj.insert(QString("taxonomy_vin"), ::OpenAPI::toJsonValue(m_taxonomy_vin));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("template_id"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

double OAIListingDebugAttributes::getCycleId() const {
    return m_cycle_id;
}
void OAIListingDebugAttributes::setCycleId(const double &cycle_id) {
    m_cycle_id = cycle_id;
    m_cycle_id_isSet = true;
}

bool OAIListingDebugAttributes::is_cycle_id_Set() const{
    return m_cycle_id_isSet;
}

bool OAIListingDebugAttributes::is_cycle_id_Valid() const{
    return m_cycle_id_isValid;
}

double OAIListingDebugAttributes::getRobotId() const {
    return m_robot_id;
}
void OAIListingDebugAttributes::setRobotId(const double &robot_id) {
    m_robot_id = robot_id;
    m_robot_id_isSet = true;
}

bool OAIListingDebugAttributes::is_robot_id_Set() const{
    return m_robot_id_isSet;
}

bool OAIListingDebugAttributes::is_robot_id_Valid() const{
    return m_robot_id_isValid;
}

QString OAIListingDebugAttributes::getScrapedAt() const {
    return m_scraped_at;
}
void OAIListingDebugAttributes::setScrapedAt(const QString &scraped_at) {
    m_scraped_at = scraped_at;
    m_scraped_at_isSet = true;
}

bool OAIListingDebugAttributes::is_scraped_at_Set() const{
    return m_scraped_at_isSet;
}

bool OAIListingDebugAttributes::is_scraped_at_Valid() const{
    return m_scraped_at_isValid;
}

QString OAIListingDebugAttributes::getTaxonomyVin() const {
    return m_taxonomy_vin;
}
void OAIListingDebugAttributes::setTaxonomyVin(const QString &taxonomy_vin) {
    m_taxonomy_vin = taxonomy_vin;
    m_taxonomy_vin_isSet = true;
}

bool OAIListingDebugAttributes::is_taxonomy_vin_Set() const{
    return m_taxonomy_vin_isSet;
}

bool OAIListingDebugAttributes::is_taxonomy_vin_Valid() const{
    return m_taxonomy_vin_isValid;
}

double OAIListingDebugAttributes::getTemplateId() const {
    return m_template_id;
}
void OAIListingDebugAttributes::setTemplateId(const double &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIListingDebugAttributes::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIListingDebugAttributes::is_template_id_Valid() const{
    return m_template_id_isValid;
}

double OAIListingDebugAttributes::getUserId() const {
    return m_user_id;
}
void OAIListingDebugAttributes::setUserId(const double &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIListingDebugAttributes::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIListingDebugAttributes::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIListingDebugAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cycle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scraped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxonomy_vin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListingDebugAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
