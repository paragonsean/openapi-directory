/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRangeFacetItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRangeFacetItem::OAIRangeFacetItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRangeFacetItem::OAIRangeFacetItem() {
    this->initializeModel();
}

OAIRangeFacetItem::~OAIRangeFacetItem() {}

void OAIRangeFacetItem::initializeModel() {

    m_after_isSet = false;
    m_after_isValid = false;

    m_before_isSet = false;
    m_before_isValid = false;

    m_between_isSet = false;
    m_between_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_gap_isSet = false;
    m_gap_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIRangeFacetItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRangeFacetItem::fromJsonObject(QJsonObject json) {

    m_after_isValid = ::OpenAPI::fromJsonValue(m_after, json[QString("after")]);
    m_after_isSet = !json[QString("after")].isNull() && m_after_isValid;

    m_before_isValid = ::OpenAPI::fromJsonValue(m_before, json[QString("before")]);
    m_before_isSet = !json[QString("before")].isNull() && m_before_isValid;

    m_between_isValid = ::OpenAPI::fromJsonValue(m_between, json[QString("between")]);
    m_between_isSet = !json[QString("between")].isNull() && m_between_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_gap_isValid = ::OpenAPI::fromJsonValue(m_gap, json[QString("gap")]);
    m_gap_isSet = !json[QString("gap")].isNull() && m_gap_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIRangeFacetItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRangeFacetItem::asJsonObject() const {
    QJsonObject obj;
    if (m_after_isSet) {
        obj.insert(QString("after"), ::OpenAPI::toJsonValue(m_after));
    }
    if (m_before_isSet) {
        obj.insert(QString("before"), ::OpenAPI::toJsonValue(m_before));
    }
    if (m_between_isSet) {
        obj.insert(QString("between"), ::OpenAPI::toJsonValue(m_between));
    }
    if (m_counts.size() > 0) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_gap_isSet) {
        obj.insert(QString("gap"), ::OpenAPI::toJsonValue(m_gap));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

qint32 OAIRangeFacetItem::getAfter() const {
    return m_after;
}
void OAIRangeFacetItem::setAfter(const qint32 &after) {
    m_after = after;
    m_after_isSet = true;
}

bool OAIRangeFacetItem::is_after_Set() const{
    return m_after_isSet;
}

bool OAIRangeFacetItem::is_after_Valid() const{
    return m_after_isValid;
}

qint32 OAIRangeFacetItem::getBefore() const {
    return m_before;
}
void OAIRangeFacetItem::setBefore(const qint32 &before) {
    m_before = before;
    m_before_isSet = true;
}

bool OAIRangeFacetItem::is_before_Set() const{
    return m_before_isSet;
}

bool OAIRangeFacetItem::is_before_Valid() const{
    return m_before_isValid;
}

qint32 OAIRangeFacetItem::getBetween() const {
    return m_between;
}
void OAIRangeFacetItem::setBetween(const qint32 &between) {
    m_between = between;
    m_between_isSet = true;
}

bool OAIRangeFacetItem::is_between_Set() const{
    return m_between_isSet;
}

bool OAIRangeFacetItem::is_between_Valid() const{
    return m_between_isValid;
}

QList<OAIRangeFacetItem_counts_inner> OAIRangeFacetItem::getCounts() const {
    return m_counts;
}
void OAIRangeFacetItem::setCounts(const QList<OAIRangeFacetItem_counts_inner> &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIRangeFacetItem::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIRangeFacetItem::is_counts_Valid() const{
    return m_counts_isValid;
}

qint32 OAIRangeFacetItem::getEnd() const {
    return m_end;
}
void OAIRangeFacetItem::setEnd(const qint32 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIRangeFacetItem::is_end_Set() const{
    return m_end_isSet;
}

bool OAIRangeFacetItem::is_end_Valid() const{
    return m_end_isValid;
}

qint32 OAIRangeFacetItem::getGap() const {
    return m_gap;
}
void OAIRangeFacetItem::setGap(const qint32 &gap) {
    m_gap = gap;
    m_gap_isSet = true;
}

bool OAIRangeFacetItem::is_gap_Set() const{
    return m_gap_isSet;
}

bool OAIRangeFacetItem::is_gap_Valid() const{
    return m_gap_isValid;
}

qint32 OAIRangeFacetItem::getStart() const {
    return m_start;
}
void OAIRangeFacetItem::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIRangeFacetItem::is_start_Set() const{
    return m_start_isSet;
}

bool OAIRangeFacetItem::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIRangeFacetItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_between_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRangeFacetItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
