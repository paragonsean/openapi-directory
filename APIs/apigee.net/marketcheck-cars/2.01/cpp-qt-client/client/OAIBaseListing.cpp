/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseListing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseListing::OAIBaseListing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseListing::OAIBaseListing() {
    this->initializeModel();
}

OAIBaseListing::~OAIBaseListing() {}

void OAIBaseListing::initializeModel() {

    m_base_ext_color_isSet = false;
    m_base_ext_color_isValid = false;

    m_base_int_color_isSet = false;
    m_base_int_color_isValid = false;

    m_build_isSet = false;
    m_build_isValid = false;

    m_carfax_1_owner_isSet = false;
    m_carfax_1_owner_isValid = false;

    m_carfax_clean_title_isSet = false;
    m_carfax_clean_title_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_dealer_isSet = false;
    m_dealer_isValid = false;

    m_dist_isSet = false;
    m_dist_isValid = false;

    m_dom_isSet = false;
    m_dom_isValid = false;

    m_dom_180_isSet = false;
    m_dom_180_isValid = false;

    m_dom_active_isSet = false;
    m_dom_active_isValid = false;

    m_exterior_color_isSet = false;
    m_exterior_color_isValid = false;

    m_financing_options_isSet = false;
    m_financing_options_isValid = false;

    m_first_seen_at_isSet = false;
    m_first_seen_at_isValid = false;

    m_first_seen_at_date_isSet = false;
    m_first_seen_at_date_isValid = false;

    m_heading_isSet = false;
    m_heading_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_transit_isSet = false;
    m_in_transit_isValid = false;

    m_interior_color_isSet = false;
    m_interior_color_isValid = false;

    m_inventory_type_isSet = false;
    m_inventory_type_isValid = false;

    m_is_certified_isSet = false;
    m_is_certified_isValid = false;

    m_is_translated_isSet = false;
    m_is_translated_isValid = false;

    m_last_seen_at_isSet = false;
    m_last_seen_at_isValid = false;

    m_last_seen_at_date_isSet = false;
    m_last_seen_at_date_isValid = false;

    m_leasing_options_isSet = false;
    m_leasing_options_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_miles_isSet = false;
    m_miles_isValid = false;

    m_model_code_isSet = false;
    m_model_code_isValid = false;

    m_msrp_isSet = false;
    m_msrp_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_change_percent_isSet = false;
    m_price_change_percent_isValid = false;

    m_ref_miles_isSet = false;
    m_ref_miles_isValid = false;

    m_ref_miles_dt_isSet = false;
    m_ref_miles_dt_isValid = false;

    m_ref_price_isSet = false;
    m_ref_price_isValid = false;

    m_ref_price_dt_isSet = false;
    m_ref_price_dt_isValid = false;

    m_scraped_at_isSet = false;
    m_scraped_at_isValid = false;

    m_scraped_at_date_isSet = false;
    m_scraped_at_date_isValid = false;

    m_seller_type_isSet = false;
    m_seller_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_stock_no_isSet = false;
    m_stock_no_isValid = false;

    m_title_type_isSet = false;
    m_title_type_isValid = false;

    m_vdp_url_isSet = false;
    m_vdp_url_isValid = false;

    m_vin_isSet = false;
    m_vin_isValid = false;
}

void OAIBaseListing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseListing::fromJsonObject(QJsonObject json) {

    m_base_ext_color_isValid = ::OpenAPI::fromJsonValue(m_base_ext_color, json[QString("base_ext_color")]);
    m_base_ext_color_isSet = !json[QString("base_ext_color")].isNull() && m_base_ext_color_isValid;

    m_base_int_color_isValid = ::OpenAPI::fromJsonValue(m_base_int_color, json[QString("base_int_color")]);
    m_base_int_color_isSet = !json[QString("base_int_color")].isNull() && m_base_int_color_isValid;

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_carfax_1_owner_isValid = ::OpenAPI::fromJsonValue(m_carfax_1_owner, json[QString("carfax_1_owner")]);
    m_carfax_1_owner_isSet = !json[QString("carfax_1_owner")].isNull() && m_carfax_1_owner_isValid;

    m_carfax_clean_title_isValid = ::OpenAPI::fromJsonValue(m_carfax_clean_title, json[QString("carfax_clean_title")]);
    m_carfax_clean_title_isSet = !json[QString("carfax_clean_title")].isNull() && m_carfax_clean_title_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("data_source")]);
    m_data_source_isSet = !json[QString("data_source")].isNull() && m_data_source_isValid;

    m_dealer_isValid = ::OpenAPI::fromJsonValue(m_dealer, json[QString("dealer")]);
    m_dealer_isSet = !json[QString("dealer")].isNull() && m_dealer_isValid;

    m_dist_isValid = ::OpenAPI::fromJsonValue(m_dist, json[QString("dist")]);
    m_dist_isSet = !json[QString("dist")].isNull() && m_dist_isValid;

    m_dom_isValid = ::OpenAPI::fromJsonValue(m_dom, json[QString("dom")]);
    m_dom_isSet = !json[QString("dom")].isNull() && m_dom_isValid;

    m_dom_180_isValid = ::OpenAPI::fromJsonValue(m_dom_180, json[QString("dom_180")]);
    m_dom_180_isSet = !json[QString("dom_180")].isNull() && m_dom_180_isValid;

    m_dom_active_isValid = ::OpenAPI::fromJsonValue(m_dom_active, json[QString("dom_active")]);
    m_dom_active_isSet = !json[QString("dom_active")].isNull() && m_dom_active_isValid;

    m_exterior_color_isValid = ::OpenAPI::fromJsonValue(m_exterior_color, json[QString("exterior_color")]);
    m_exterior_color_isSet = !json[QString("exterior_color")].isNull() && m_exterior_color_isValid;

    m_financing_options_isValid = ::OpenAPI::fromJsonValue(m_financing_options, json[QString("financing_options")]);
    m_financing_options_isSet = !json[QString("financing_options")].isNull() && m_financing_options_isValid;

    m_first_seen_at_isValid = ::OpenAPI::fromJsonValue(m_first_seen_at, json[QString("first_seen_at")]);
    m_first_seen_at_isSet = !json[QString("first_seen_at")].isNull() && m_first_seen_at_isValid;

    m_first_seen_at_date_isValid = ::OpenAPI::fromJsonValue(m_first_seen_at_date, json[QString("first_seen_at_date")]);
    m_first_seen_at_date_isSet = !json[QString("first_seen_at_date")].isNull() && m_first_seen_at_date_isValid;

    m_heading_isValid = ::OpenAPI::fromJsonValue(m_heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_transit_isValid = ::OpenAPI::fromJsonValue(m_in_transit, json[QString("in_transit")]);
    m_in_transit_isSet = !json[QString("in_transit")].isNull() && m_in_transit_isValid;

    m_interior_color_isValid = ::OpenAPI::fromJsonValue(m_interior_color, json[QString("interior_color")]);
    m_interior_color_isSet = !json[QString("interior_color")].isNull() && m_interior_color_isValid;

    m_inventory_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_type, json[QString("inventory_type")]);
    m_inventory_type_isSet = !json[QString("inventory_type")].isNull() && m_inventory_type_isValid;

    m_is_certified_isValid = ::OpenAPI::fromJsonValue(m_is_certified, json[QString("is_certified")]);
    m_is_certified_isSet = !json[QString("is_certified")].isNull() && m_is_certified_isValid;

    m_is_translated_isValid = ::OpenAPI::fromJsonValue(m_is_translated, json[QString("is_translated")]);
    m_is_translated_isSet = !json[QString("is_translated")].isNull() && m_is_translated_isValid;

    m_last_seen_at_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at, json[QString("last_seen_at")]);
    m_last_seen_at_isSet = !json[QString("last_seen_at")].isNull() && m_last_seen_at_isValid;

    m_last_seen_at_date_isValid = ::OpenAPI::fromJsonValue(m_last_seen_at_date, json[QString("last_seen_at_date")]);
    m_last_seen_at_date_isSet = !json[QString("last_seen_at_date")].isNull() && m_last_seen_at_date_isValid;

    m_leasing_options_isValid = ::OpenAPI::fromJsonValue(m_leasing_options, json[QString("leasing_options")]);
    m_leasing_options_isSet = !json[QString("leasing_options")].isNull() && m_leasing_options_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_miles_isValid = ::OpenAPI::fromJsonValue(m_miles, json[QString("miles")]);
    m_miles_isSet = !json[QString("miles")].isNull() && m_miles_isValid;

    m_model_code_isValid = ::OpenAPI::fromJsonValue(m_model_code, json[QString("model_code")]);
    m_model_code_isSet = !json[QString("model_code")].isNull() && m_model_code_isValid;

    m_msrp_isValid = ::OpenAPI::fromJsonValue(m_msrp, json[QString("msrp")]);
    m_msrp_isSet = !json[QString("msrp")].isNull() && m_msrp_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_change_percent_isValid = ::OpenAPI::fromJsonValue(m_price_change_percent, json[QString("price_change_percent")]);
    m_price_change_percent_isSet = !json[QString("price_change_percent")].isNull() && m_price_change_percent_isValid;

    m_ref_miles_isValid = ::OpenAPI::fromJsonValue(m_ref_miles, json[QString("ref_miles")]);
    m_ref_miles_isSet = !json[QString("ref_miles")].isNull() && m_ref_miles_isValid;

    m_ref_miles_dt_isValid = ::OpenAPI::fromJsonValue(m_ref_miles_dt, json[QString("ref_miles_dt")]);
    m_ref_miles_dt_isSet = !json[QString("ref_miles_dt")].isNull() && m_ref_miles_dt_isValid;

    m_ref_price_isValid = ::OpenAPI::fromJsonValue(m_ref_price, json[QString("ref_price")]);
    m_ref_price_isSet = !json[QString("ref_price")].isNull() && m_ref_price_isValid;

    m_ref_price_dt_isValid = ::OpenAPI::fromJsonValue(m_ref_price_dt, json[QString("ref_price_dt")]);
    m_ref_price_dt_isSet = !json[QString("ref_price_dt")].isNull() && m_ref_price_dt_isValid;

    m_scraped_at_isValid = ::OpenAPI::fromJsonValue(m_scraped_at, json[QString("scraped_at")]);
    m_scraped_at_isSet = !json[QString("scraped_at")].isNull() && m_scraped_at_isValid;

    m_scraped_at_date_isValid = ::OpenAPI::fromJsonValue(m_scraped_at_date, json[QString("scraped_at_date")]);
    m_scraped_at_date_isSet = !json[QString("scraped_at_date")].isNull() && m_scraped_at_date_isValid;

    m_seller_type_isValid = ::OpenAPI::fromJsonValue(m_seller_type, json[QString("seller_type")]);
    m_seller_type_isSet = !json[QString("seller_type")].isNull() && m_seller_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_stock_no_isValid = ::OpenAPI::fromJsonValue(m_stock_no, json[QString("stock_no")]);
    m_stock_no_isSet = !json[QString("stock_no")].isNull() && m_stock_no_isValid;

    m_title_type_isValid = ::OpenAPI::fromJsonValue(m_title_type, json[QString("title_type")]);
    m_title_type_isSet = !json[QString("title_type")].isNull() && m_title_type_isValid;

    m_vdp_url_isValid = ::OpenAPI::fromJsonValue(m_vdp_url, json[QString("vdp_url")]);
    m_vdp_url_isSet = !json[QString("vdp_url")].isNull() && m_vdp_url_isValid;

    m_vin_isValid = ::OpenAPI::fromJsonValue(m_vin, json[QString("vin")]);
    m_vin_isSet = !json[QString("vin")].isNull() && m_vin_isValid;
}

QString OAIBaseListing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseListing::asJsonObject() const {
    QJsonObject obj;
    if (m_base_ext_color_isSet) {
        obj.insert(QString("base_ext_color"), ::OpenAPI::toJsonValue(m_base_ext_color));
    }
    if (m_base_int_color_isSet) {
        obj.insert(QString("base_int_color"), ::OpenAPI::toJsonValue(m_base_int_color));
    }
    if (m_build.isSet()) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_carfax_1_owner_isSet) {
        obj.insert(QString("carfax_1_owner"), ::OpenAPI::toJsonValue(m_carfax_1_owner));
    }
    if (m_carfax_clean_title_isSet) {
        obj.insert(QString("carfax_clean_title"), ::OpenAPI::toJsonValue(m_carfax_clean_title));
    }
    if (m_data_source_isSet) {
        obj.insert(QString("data_source"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_dealer.isSet()) {
        obj.insert(QString("dealer"), ::OpenAPI::toJsonValue(m_dealer));
    }
    if (m_dist_isSet) {
        obj.insert(QString("dist"), ::OpenAPI::toJsonValue(m_dist));
    }
    if (m_dom_isSet) {
        obj.insert(QString("dom"), ::OpenAPI::toJsonValue(m_dom));
    }
    if (m_dom_180_isSet) {
        obj.insert(QString("dom_180"), ::OpenAPI::toJsonValue(m_dom_180));
    }
    if (m_dom_active_isSet) {
        obj.insert(QString("dom_active"), ::OpenAPI::toJsonValue(m_dom_active));
    }
    if (m_exterior_color_isSet) {
        obj.insert(QString("exterior_color"), ::OpenAPI::toJsonValue(m_exterior_color));
    }
    if (m_financing_options.size() > 0) {
        obj.insert(QString("financing_options"), ::OpenAPI::toJsonValue(m_financing_options));
    }
    if (m_first_seen_at_isSet) {
        obj.insert(QString("first_seen_at"), ::OpenAPI::toJsonValue(m_first_seen_at));
    }
    if (m_first_seen_at_date_isSet) {
        obj.insert(QString("first_seen_at_date"), ::OpenAPI::toJsonValue(m_first_seen_at_date));
    }
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(m_heading));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_transit_isSet) {
        obj.insert(QString("in_transit"), ::OpenAPI::toJsonValue(m_in_transit));
    }
    if (m_interior_color_isSet) {
        obj.insert(QString("interior_color"), ::OpenAPI::toJsonValue(m_interior_color));
    }
    if (m_inventory_type_isSet) {
        obj.insert(QString("inventory_type"), ::OpenAPI::toJsonValue(m_inventory_type));
    }
    if (m_is_certified_isSet) {
        obj.insert(QString("is_certified"), ::OpenAPI::toJsonValue(m_is_certified));
    }
    if (m_is_translated_isSet) {
        obj.insert(QString("is_translated"), ::OpenAPI::toJsonValue(m_is_translated));
    }
    if (m_last_seen_at_isSet) {
        obj.insert(QString("last_seen_at"), ::OpenAPI::toJsonValue(m_last_seen_at));
    }
    if (m_last_seen_at_date_isSet) {
        obj.insert(QString("last_seen_at_date"), ::OpenAPI::toJsonValue(m_last_seen_at_date));
    }
    if (m_leasing_options.size() > 0) {
        obj.insert(QString("leasing_options"), ::OpenAPI::toJsonValue(m_leasing_options));
    }
    if (m_media.isSet()) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_miles_isSet) {
        obj.insert(QString("miles"), ::OpenAPI::toJsonValue(m_miles));
    }
    if (m_model_code_isSet) {
        obj.insert(QString("model_code"), ::OpenAPI::toJsonValue(m_model_code));
    }
    if (m_msrp_isSet) {
        obj.insert(QString("msrp"), ::OpenAPI::toJsonValue(m_msrp));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_change_percent_isSet) {
        obj.insert(QString("price_change_percent"), ::OpenAPI::toJsonValue(m_price_change_percent));
    }
    if (m_ref_miles_isSet) {
        obj.insert(QString("ref_miles"), ::OpenAPI::toJsonValue(m_ref_miles));
    }
    if (m_ref_miles_dt_isSet) {
        obj.insert(QString("ref_miles_dt"), ::OpenAPI::toJsonValue(m_ref_miles_dt));
    }
    if (m_ref_price_isSet) {
        obj.insert(QString("ref_price"), ::OpenAPI::toJsonValue(m_ref_price));
    }
    if (m_ref_price_dt_isSet) {
        obj.insert(QString("ref_price_dt"), ::OpenAPI::toJsonValue(m_ref_price_dt));
    }
    if (m_scraped_at_isSet) {
        obj.insert(QString("scraped_at"), ::OpenAPI::toJsonValue(m_scraped_at));
    }
    if (m_scraped_at_date_isSet) {
        obj.insert(QString("scraped_at_date"), ::OpenAPI::toJsonValue(m_scraped_at_date));
    }
    if (m_seller_type_isSet) {
        obj.insert(QString("seller_type"), ::OpenAPI::toJsonValue(m_seller_type));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_stock_no_isSet) {
        obj.insert(QString("stock_no"), ::OpenAPI::toJsonValue(m_stock_no));
    }
    if (m_title_type_isSet) {
        obj.insert(QString("title_type"), ::OpenAPI::toJsonValue(m_title_type));
    }
    if (m_vdp_url_isSet) {
        obj.insert(QString("vdp_url"), ::OpenAPI::toJsonValue(m_vdp_url));
    }
    if (m_vin_isSet) {
        obj.insert(QString("vin"), ::OpenAPI::toJsonValue(m_vin));
    }
    return obj;
}

QString OAIBaseListing::getBaseExtColor() const {
    return m_base_ext_color;
}
void OAIBaseListing::setBaseExtColor(const QString &base_ext_color) {
    m_base_ext_color = base_ext_color;
    m_base_ext_color_isSet = true;
}

bool OAIBaseListing::is_base_ext_color_Set() const{
    return m_base_ext_color_isSet;
}

bool OAIBaseListing::is_base_ext_color_Valid() const{
    return m_base_ext_color_isValid;
}

QString OAIBaseListing::getBaseIntColor() const {
    return m_base_int_color;
}
void OAIBaseListing::setBaseIntColor(const QString &base_int_color) {
    m_base_int_color = base_int_color;
    m_base_int_color_isSet = true;
}

bool OAIBaseListing::is_base_int_color_Set() const{
    return m_base_int_color_isSet;
}

bool OAIBaseListing::is_base_int_color_Valid() const{
    return m_base_int_color_isValid;
}

OAIBuild OAIBaseListing::getBuild() const {
    return m_build;
}
void OAIBaseListing::setBuild(const OAIBuild &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIBaseListing::is_build_Set() const{
    return m_build_isSet;
}

bool OAIBaseListing::is_build_Valid() const{
    return m_build_isValid;
}

bool OAIBaseListing::isCarfax1Owner() const {
    return m_carfax_1_owner;
}
void OAIBaseListing::setCarfax1Owner(const bool &carfax_1_owner) {
    m_carfax_1_owner = carfax_1_owner;
    m_carfax_1_owner_isSet = true;
}

bool OAIBaseListing::is_carfax_1_owner_Set() const{
    return m_carfax_1_owner_isSet;
}

bool OAIBaseListing::is_carfax_1_owner_Valid() const{
    return m_carfax_1_owner_isValid;
}

bool OAIBaseListing::isCarfaxCleanTitle() const {
    return m_carfax_clean_title;
}
void OAIBaseListing::setCarfaxCleanTitle(const bool &carfax_clean_title) {
    m_carfax_clean_title = carfax_clean_title;
    m_carfax_clean_title_isSet = true;
}

bool OAIBaseListing::is_carfax_clean_title_Set() const{
    return m_carfax_clean_title_isSet;
}

bool OAIBaseListing::is_carfax_clean_title_Valid() const{
    return m_carfax_clean_title_isValid;
}

QString OAIBaseListing::getDataSource() const {
    return m_data_source;
}
void OAIBaseListing::setDataSource(const QString &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIBaseListing::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIBaseListing::is_data_source_Valid() const{
    return m_data_source_isValid;
}

OAINestDealer OAIBaseListing::getDealer() const {
    return m_dealer;
}
void OAIBaseListing::setDealer(const OAINestDealer &dealer) {
    m_dealer = dealer;
    m_dealer_isSet = true;
}

bool OAIBaseListing::is_dealer_Set() const{
    return m_dealer_isSet;
}

bool OAIBaseListing::is_dealer_Valid() const{
    return m_dealer_isValid;
}

double OAIBaseListing::getDist() const {
    return m_dist;
}
void OAIBaseListing::setDist(const double &dist) {
    m_dist = dist;
    m_dist_isSet = true;
}

bool OAIBaseListing::is_dist_Set() const{
    return m_dist_isSet;
}

bool OAIBaseListing::is_dist_Valid() const{
    return m_dist_isValid;
}

qint32 OAIBaseListing::getDom() const {
    return m_dom;
}
void OAIBaseListing::setDom(const qint32 &dom) {
    m_dom = dom;
    m_dom_isSet = true;
}

bool OAIBaseListing::is_dom_Set() const{
    return m_dom_isSet;
}

bool OAIBaseListing::is_dom_Valid() const{
    return m_dom_isValid;
}

qint32 OAIBaseListing::getDom180() const {
    return m_dom_180;
}
void OAIBaseListing::setDom180(const qint32 &dom_180) {
    m_dom_180 = dom_180;
    m_dom_180_isSet = true;
}

bool OAIBaseListing::is_dom_180_Set() const{
    return m_dom_180_isSet;
}

bool OAIBaseListing::is_dom_180_Valid() const{
    return m_dom_180_isValid;
}

qint32 OAIBaseListing::getDomActive() const {
    return m_dom_active;
}
void OAIBaseListing::setDomActive(const qint32 &dom_active) {
    m_dom_active = dom_active;
    m_dom_active_isSet = true;
}

bool OAIBaseListing::is_dom_active_Set() const{
    return m_dom_active_isSet;
}

bool OAIBaseListing::is_dom_active_Valid() const{
    return m_dom_active_isValid;
}

QString OAIBaseListing::getExteriorColor() const {
    return m_exterior_color;
}
void OAIBaseListing::setExteriorColor(const QString &exterior_color) {
    m_exterior_color = exterior_color;
    m_exterior_color_isSet = true;
}

bool OAIBaseListing::is_exterior_color_Set() const{
    return m_exterior_color_isSet;
}

bool OAIBaseListing::is_exterior_color_Valid() const{
    return m_exterior_color_isValid;
}

QList<OAIListingFinance> OAIBaseListing::getFinancingOptions() const {
    return m_financing_options;
}
void OAIBaseListing::setFinancingOptions(const QList<OAIListingFinance> &financing_options) {
    m_financing_options = financing_options;
    m_financing_options_isSet = true;
}

bool OAIBaseListing::is_financing_options_Set() const{
    return m_financing_options_isSet;
}

bool OAIBaseListing::is_financing_options_Valid() const{
    return m_financing_options_isValid;
}

qint32 OAIBaseListing::getFirstSeenAt() const {
    return m_first_seen_at;
}
void OAIBaseListing::setFirstSeenAt(const qint32 &first_seen_at) {
    m_first_seen_at = first_seen_at;
    m_first_seen_at_isSet = true;
}

bool OAIBaseListing::is_first_seen_at_Set() const{
    return m_first_seen_at_isSet;
}

bool OAIBaseListing::is_first_seen_at_Valid() const{
    return m_first_seen_at_isValid;
}

QString OAIBaseListing::getFirstSeenAtDate() const {
    return m_first_seen_at_date;
}
void OAIBaseListing::setFirstSeenAtDate(const QString &first_seen_at_date) {
    m_first_seen_at_date = first_seen_at_date;
    m_first_seen_at_date_isSet = true;
}

bool OAIBaseListing::is_first_seen_at_date_Set() const{
    return m_first_seen_at_date_isSet;
}

bool OAIBaseListing::is_first_seen_at_date_Valid() const{
    return m_first_seen_at_date_isValid;
}

QString OAIBaseListing::getHeading() const {
    return m_heading;
}
void OAIBaseListing::setHeading(const QString &heading) {
    m_heading = heading;
    m_heading_isSet = true;
}

bool OAIBaseListing::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAIBaseListing::is_heading_Valid() const{
    return m_heading_isValid;
}

QString OAIBaseListing::getId() const {
    return m_id;
}
void OAIBaseListing::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBaseListing::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBaseListing::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIBaseListing::isInTransit() const {
    return m_in_transit;
}
void OAIBaseListing::setInTransit(const bool &in_transit) {
    m_in_transit = in_transit;
    m_in_transit_isSet = true;
}

bool OAIBaseListing::is_in_transit_Set() const{
    return m_in_transit_isSet;
}

bool OAIBaseListing::is_in_transit_Valid() const{
    return m_in_transit_isValid;
}

QString OAIBaseListing::getInteriorColor() const {
    return m_interior_color;
}
void OAIBaseListing::setInteriorColor(const QString &interior_color) {
    m_interior_color = interior_color;
    m_interior_color_isSet = true;
}

bool OAIBaseListing::is_interior_color_Set() const{
    return m_interior_color_isSet;
}

bool OAIBaseListing::is_interior_color_Valid() const{
    return m_interior_color_isValid;
}

QString OAIBaseListing::getInventoryType() const {
    return m_inventory_type;
}
void OAIBaseListing::setInventoryType(const QString &inventory_type) {
    m_inventory_type = inventory_type;
    m_inventory_type_isSet = true;
}

bool OAIBaseListing::is_inventory_type_Set() const{
    return m_inventory_type_isSet;
}

bool OAIBaseListing::is_inventory_type_Valid() const{
    return m_inventory_type_isValid;
}

qint32 OAIBaseListing::getIsCertified() const {
    return m_is_certified;
}
void OAIBaseListing::setIsCertified(const qint32 &is_certified) {
    m_is_certified = is_certified;
    m_is_certified_isSet = true;
}

bool OAIBaseListing::is_is_certified_Set() const{
    return m_is_certified_isSet;
}

bool OAIBaseListing::is_is_certified_Valid() const{
    return m_is_certified_isValid;
}

bool OAIBaseListing::isIsTranslated() const {
    return m_is_translated;
}
void OAIBaseListing::setIsTranslated(const bool &is_translated) {
    m_is_translated = is_translated;
    m_is_translated_isSet = true;
}

bool OAIBaseListing::is_is_translated_Set() const{
    return m_is_translated_isSet;
}

bool OAIBaseListing::is_is_translated_Valid() const{
    return m_is_translated_isValid;
}

qint32 OAIBaseListing::getLastSeenAt() const {
    return m_last_seen_at;
}
void OAIBaseListing::setLastSeenAt(const qint32 &last_seen_at) {
    m_last_seen_at = last_seen_at;
    m_last_seen_at_isSet = true;
}

bool OAIBaseListing::is_last_seen_at_Set() const{
    return m_last_seen_at_isSet;
}

bool OAIBaseListing::is_last_seen_at_Valid() const{
    return m_last_seen_at_isValid;
}

QString OAIBaseListing::getLastSeenAtDate() const {
    return m_last_seen_at_date;
}
void OAIBaseListing::setLastSeenAtDate(const QString &last_seen_at_date) {
    m_last_seen_at_date = last_seen_at_date;
    m_last_seen_at_date_isSet = true;
}

bool OAIBaseListing::is_last_seen_at_date_Set() const{
    return m_last_seen_at_date_isSet;
}

bool OAIBaseListing::is_last_seen_at_date_Valid() const{
    return m_last_seen_at_date_isValid;
}

QList<OAIListingLease> OAIBaseListing::getLeasingOptions() const {
    return m_leasing_options;
}
void OAIBaseListing::setLeasingOptions(const QList<OAIListingLease> &leasing_options) {
    m_leasing_options = leasing_options;
    m_leasing_options_isSet = true;
}

bool OAIBaseListing::is_leasing_options_Set() const{
    return m_leasing_options_isSet;
}

bool OAIBaseListing::is_leasing_options_Valid() const{
    return m_leasing_options_isValid;
}

OAIListingNestMedia OAIBaseListing::getMedia() const {
    return m_media;
}
void OAIBaseListing::setMedia(const OAIListingNestMedia &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIBaseListing::is_media_Set() const{
    return m_media_isSet;
}

bool OAIBaseListing::is_media_Valid() const{
    return m_media_isValid;
}

qint32 OAIBaseListing::getMiles() const {
    return m_miles;
}
void OAIBaseListing::setMiles(const qint32 &miles) {
    m_miles = miles;
    m_miles_isSet = true;
}

bool OAIBaseListing::is_miles_Set() const{
    return m_miles_isSet;
}

bool OAIBaseListing::is_miles_Valid() const{
    return m_miles_isValid;
}

QString OAIBaseListing::getModelCode() const {
    return m_model_code;
}
void OAIBaseListing::setModelCode(const QString &model_code) {
    m_model_code = model_code;
    m_model_code_isSet = true;
}

bool OAIBaseListing::is_model_code_Set() const{
    return m_model_code_isSet;
}

bool OAIBaseListing::is_model_code_Valid() const{
    return m_model_code_isValid;
}

qint32 OAIBaseListing::getMsrp() const {
    return m_msrp;
}
void OAIBaseListing::setMsrp(const qint32 &msrp) {
    m_msrp = msrp;
    m_msrp_isSet = true;
}

bool OAIBaseListing::is_msrp_Set() const{
    return m_msrp_isSet;
}

bool OAIBaseListing::is_msrp_Valid() const{
    return m_msrp_isValid;
}

qint32 OAIBaseListing::getPrice() const {
    return m_price;
}
void OAIBaseListing::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIBaseListing::is_price_Set() const{
    return m_price_isSet;
}

bool OAIBaseListing::is_price_Valid() const{
    return m_price_isValid;
}

double OAIBaseListing::getPriceChangePercent() const {
    return m_price_change_percent;
}
void OAIBaseListing::setPriceChangePercent(const double &price_change_percent) {
    m_price_change_percent = price_change_percent;
    m_price_change_percent_isSet = true;
}

bool OAIBaseListing::is_price_change_percent_Set() const{
    return m_price_change_percent_isSet;
}

bool OAIBaseListing::is_price_change_percent_Valid() const{
    return m_price_change_percent_isValid;
}

QString OAIBaseListing::getRefMiles() const {
    return m_ref_miles;
}
void OAIBaseListing::setRefMiles(const QString &ref_miles) {
    m_ref_miles = ref_miles;
    m_ref_miles_isSet = true;
}

bool OAIBaseListing::is_ref_miles_Set() const{
    return m_ref_miles_isSet;
}

bool OAIBaseListing::is_ref_miles_Valid() const{
    return m_ref_miles_isValid;
}

qint32 OAIBaseListing::getRefMilesDt() const {
    return m_ref_miles_dt;
}
void OAIBaseListing::setRefMilesDt(const qint32 &ref_miles_dt) {
    m_ref_miles_dt = ref_miles_dt;
    m_ref_miles_dt_isSet = true;
}

bool OAIBaseListing::is_ref_miles_dt_Set() const{
    return m_ref_miles_dt_isSet;
}

bool OAIBaseListing::is_ref_miles_dt_Valid() const{
    return m_ref_miles_dt_isValid;
}

QString OAIBaseListing::getRefPrice() const {
    return m_ref_price;
}
void OAIBaseListing::setRefPrice(const QString &ref_price) {
    m_ref_price = ref_price;
    m_ref_price_isSet = true;
}

bool OAIBaseListing::is_ref_price_Set() const{
    return m_ref_price_isSet;
}

bool OAIBaseListing::is_ref_price_Valid() const{
    return m_ref_price_isValid;
}

qint32 OAIBaseListing::getRefPriceDt() const {
    return m_ref_price_dt;
}
void OAIBaseListing::setRefPriceDt(const qint32 &ref_price_dt) {
    m_ref_price_dt = ref_price_dt;
    m_ref_price_dt_isSet = true;
}

bool OAIBaseListing::is_ref_price_dt_Set() const{
    return m_ref_price_dt_isSet;
}

bool OAIBaseListing::is_ref_price_dt_Valid() const{
    return m_ref_price_dt_isValid;
}

double OAIBaseListing::getScrapedAt() const {
    return m_scraped_at;
}
void OAIBaseListing::setScrapedAt(const double &scraped_at) {
    m_scraped_at = scraped_at;
    m_scraped_at_isSet = true;
}

bool OAIBaseListing::is_scraped_at_Set() const{
    return m_scraped_at_isSet;
}

bool OAIBaseListing::is_scraped_at_Valid() const{
    return m_scraped_at_isValid;
}

QString OAIBaseListing::getScrapedAtDate() const {
    return m_scraped_at_date;
}
void OAIBaseListing::setScrapedAtDate(const QString &scraped_at_date) {
    m_scraped_at_date = scraped_at_date;
    m_scraped_at_date_isSet = true;
}

bool OAIBaseListing::is_scraped_at_date_Set() const{
    return m_scraped_at_date_isSet;
}

bool OAIBaseListing::is_scraped_at_date_Valid() const{
    return m_scraped_at_date_isValid;
}

QString OAIBaseListing::getSellerType() const {
    return m_seller_type;
}
void OAIBaseListing::setSellerType(const QString &seller_type) {
    m_seller_type = seller_type;
    m_seller_type_isSet = true;
}

bool OAIBaseListing::is_seller_type_Set() const{
    return m_seller_type_isSet;
}

bool OAIBaseListing::is_seller_type_Valid() const{
    return m_seller_type_isValid;
}

QString OAIBaseListing::getSource() const {
    return m_source;
}
void OAIBaseListing::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIBaseListing::is_source_Set() const{
    return m_source_isSet;
}

bool OAIBaseListing::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIBaseListing::getStockNo() const {
    return m_stock_no;
}
void OAIBaseListing::setStockNo(const QString &stock_no) {
    m_stock_no = stock_no;
    m_stock_no_isSet = true;
}

bool OAIBaseListing::is_stock_no_Set() const{
    return m_stock_no_isSet;
}

bool OAIBaseListing::is_stock_no_Valid() const{
    return m_stock_no_isValid;
}

QString OAIBaseListing::getTitleType() const {
    return m_title_type;
}
void OAIBaseListing::setTitleType(const QString &title_type) {
    m_title_type = title_type;
    m_title_type_isSet = true;
}

bool OAIBaseListing::is_title_type_Set() const{
    return m_title_type_isSet;
}

bool OAIBaseListing::is_title_type_Valid() const{
    return m_title_type_isValid;
}

QString OAIBaseListing::getVdpUrl() const {
    return m_vdp_url;
}
void OAIBaseListing::setVdpUrl(const QString &vdp_url) {
    m_vdp_url = vdp_url;
    m_vdp_url_isSet = true;
}

bool OAIBaseListing::is_vdp_url_Set() const{
    return m_vdp_url_isSet;
}

bool OAIBaseListing::is_vdp_url_Valid() const{
    return m_vdp_url_isValid;
}

QString OAIBaseListing::getVin() const {
    return m_vin;
}
void OAIBaseListing::setVin(const QString &vin) {
    m_vin = vin;
    m_vin_isSet = true;
}

bool OAIBaseListing::is_vin_Set() const{
    return m_vin_isSet;
}

bool OAIBaseListing::is_vin_Valid() const{
    return m_vin_isValid;
}

bool OAIBaseListing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_ext_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_int_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_carfax_1_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carfax_clean_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_180_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exterior_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financing_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_seen_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_transit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interior_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_certified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_translated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leasing_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_change_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_miles_dt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_price_dt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scraped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scraped_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vdp_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseListing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
