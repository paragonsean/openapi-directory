/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatingComponents.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatingComponents::OAIRatingComponents(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatingComponents::OAIRatingComponents() {
    this->initializeModel();
}

OAIRatingComponents::~OAIRatingComponents() {}

void OAIRatingComponents::initializeModel() {

    m_actual_rating_isSet = false;
    m_actual_rating_isValid = false;

    m_rating_condition_isSet = false;
    m_rating_condition_isValid = false;
}

void OAIRatingComponents::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRatingComponents::fromJsonObject(QJsonObject json) {

    m_actual_rating_isValid = ::OpenAPI::fromJsonValue(m_actual_rating, json[QString("actual_rating")]);
    m_actual_rating_isSet = !json[QString("actual_rating")].isNull() && m_actual_rating_isValid;

    m_rating_condition_isValid = ::OpenAPI::fromJsonValue(m_rating_condition, json[QString("rating_condition")]);
    m_rating_condition_isSet = !json[QString("rating_condition")].isNull() && m_rating_condition_isValid;
}

QString OAIRatingComponents::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRatingComponents::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_rating_isSet) {
        obj.insert(QString("actual_rating"), ::OpenAPI::toJsonValue(m_actual_rating));
    }
    if (m_rating_condition_isSet) {
        obj.insert(QString("rating_condition"), ::OpenAPI::toJsonValue(m_rating_condition));
    }
    return obj;
}

double OAIRatingComponents::getActualRating() const {
    return m_actual_rating;
}
void OAIRatingComponents::setActualRating(const double &actual_rating) {
    m_actual_rating = actual_rating;
    m_actual_rating_isSet = true;
}

bool OAIRatingComponents::is_actual_rating_Set() const{
    return m_actual_rating_isSet;
}

bool OAIRatingComponents::is_actual_rating_Valid() const{
    return m_actual_rating_isValid;
}

QString OAIRatingComponents::getRatingCondition() const {
    return m_rating_condition;
}
void OAIRatingComponents::setRatingCondition(const QString &rating_condition) {
    m_rating_condition = rating_condition;
    m_rating_condition_isSet = true;
}

bool OAIRatingComponents::is_rating_condition_Set() const{
    return m_rating_condition_isSet;
}

bool OAIRatingComponents::is_rating_condition_Valid() const{
    return m_rating_condition_isValid;
}

bool OAIRatingComponents::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_condition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRatingComponents::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
