/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUKRVSearchFacets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUKRVSearchFacets::OAIUKRVSearchFacets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUKRVSearchFacets::OAIUKRVSearchFacets() {
    this->initializeModel();
}

OAIUKRVSearchFacets::~OAIUKRVSearchFacets() {}

void OAIUKRVSearchFacets::initializeModel() {

    m_berths_isSet = false;
    m_berths_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_chassis_isSet = false;
    m_chassis_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_dealer_id_isSet = false;
    m_dealer_id_isValid = false;

    m_drive_type_isSet = false;
    m_drive_type_isValid = false;

    m_drivetrain_isSet = false;
    m_drivetrain_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_exterior_color_isSet = false;
    m_exterior_color_isValid = false;

    m_fuel_type_isSet = false;
    m_fuel_type_isValid = false;

    m_interior_color_isSet = false;
    m_interior_color_isValid = false;

    m_inventory_type_isSet = false;
    m_inventory_type_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_seller_name_isSet = false;
    m_seller_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_steering_isSet = false;
    m_steering_isValid = false;

    m_sub_category_isSet = false;
    m_sub_category_isValid = false;

    m_transmission_isSet = false;
    m_transmission_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIUKRVSearchFacets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUKRVSearchFacets::fromJsonObject(QJsonObject json) {

    m_berths_isValid = ::OpenAPI::fromJsonValue(m_berths, json[QString("berths")]);
    m_berths_isSet = !json[QString("berths")].isNull() && m_berths_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_chassis_isValid = ::OpenAPI::fromJsonValue(m_chassis, json[QString("chassis")]);
    m_chassis_isSet = !json[QString("chassis")].isNull() && m_chassis_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_dealer_id_isValid = ::OpenAPI::fromJsonValue(m_dealer_id, json[QString("dealer_id")]);
    m_dealer_id_isSet = !json[QString("dealer_id")].isNull() && m_dealer_id_isValid;

    m_drive_type_isValid = ::OpenAPI::fromJsonValue(m_drive_type, json[QString("drive_type")]);
    m_drive_type_isSet = !json[QString("drive_type")].isNull() && m_drive_type_isValid;

    m_drivetrain_isValid = ::OpenAPI::fromJsonValue(m_drivetrain, json[QString("drivetrain")]);
    m_drivetrain_isSet = !json[QString("drivetrain")].isNull() && m_drivetrain_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_exterior_color_isValid = ::OpenAPI::fromJsonValue(m_exterior_color, json[QString("exterior_color")]);
    m_exterior_color_isSet = !json[QString("exterior_color")].isNull() && m_exterior_color_isValid;

    m_fuel_type_isValid = ::OpenAPI::fromJsonValue(m_fuel_type, json[QString("fuel_type")]);
    m_fuel_type_isSet = !json[QString("fuel_type")].isNull() && m_fuel_type_isValid;

    m_interior_color_isValid = ::OpenAPI::fromJsonValue(m_interior_color, json[QString("interior_color")]);
    m_interior_color_isSet = !json[QString("interior_color")].isNull() && m_interior_color_isValid;

    m_inventory_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_type, json[QString("inventory_type")]);
    m_inventory_type_isSet = !json[QString("inventory_type")].isNull() && m_inventory_type_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_seller_name_isValid = ::OpenAPI::fromJsonValue(m_seller_name, json[QString("seller_name")]);
    m_seller_name_isSet = !json[QString("seller_name")].isNull() && m_seller_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_steering_isValid = ::OpenAPI::fromJsonValue(m_steering, json[QString("steering")]);
    m_steering_isSet = !json[QString("steering")].isNull() && m_steering_isValid;

    m_sub_category_isValid = ::OpenAPI::fromJsonValue(m_sub_category, json[QString("sub_category")]);
    m_sub_category_isSet = !json[QString("sub_category")].isNull() && m_sub_category_isValid;

    m_transmission_isValid = ::OpenAPI::fromJsonValue(m_transmission, json[QString("transmission")]);
    m_transmission_isSet = !json[QString("transmission")].isNull() && m_transmission_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIUKRVSearchFacets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUKRVSearchFacets::asJsonObject() const {
    QJsonObject obj;
    if (m_berths.size() > 0) {
        obj.insert(QString("berths"), ::OpenAPI::toJsonValue(m_berths));
    }
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_chassis.size() > 0) {
        obj.insert(QString("chassis"), ::OpenAPI::toJsonValue(m_chassis));
    }
    if (m_city.size() > 0) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_dealer_id.size() > 0) {
        obj.insert(QString("dealer_id"), ::OpenAPI::toJsonValue(m_dealer_id));
    }
    if (m_drive_type.size() > 0) {
        obj.insert(QString("drive_type"), ::OpenAPI::toJsonValue(m_drive_type));
    }
    if (m_drivetrain.size() > 0) {
        obj.insert(QString("drivetrain"), ::OpenAPI::toJsonValue(m_drivetrain));
    }
    if (m_engine.size() > 0) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_exterior_color.size() > 0) {
        obj.insert(QString("exterior_color"), ::OpenAPI::toJsonValue(m_exterior_color));
    }
    if (m_fuel_type.size() > 0) {
        obj.insert(QString("fuel_type"), ::OpenAPI::toJsonValue(m_fuel_type));
    }
    if (m_interior_color.size() > 0) {
        obj.insert(QString("interior_color"), ::OpenAPI::toJsonValue(m_interior_color));
    }
    if (m_inventory_type.size() > 0) {
        obj.insert(QString("inventory_type"), ::OpenAPI::toJsonValue(m_inventory_type));
    }
    if (m_make.size() > 0) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model.size() > 0) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_postal_code.size() > 0) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_seller_name.size() > 0) {
        obj.insert(QString("seller_name"), ::OpenAPI::toJsonValue(m_seller_name));
    }
    if (m_source.size() > 0) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state.size() > 0) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_steering.size() > 0) {
        obj.insert(QString("steering"), ::OpenAPI::toJsonValue(m_steering));
    }
    if (m_sub_category.size() > 0) {
        obj.insert(QString("sub_category"), ::OpenAPI::toJsonValue(m_sub_category));
    }
    if (m_transmission.size() > 0) {
        obj.insert(QString("transmission"), ::OpenAPI::toJsonValue(m_transmission));
    }
    if (m_year.size() > 0) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    if (m_zip.size() > 0) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getBerths() const {
    return m_berths;
}
void OAIUKRVSearchFacets::setBerths(const QList<OAIFacetItem> &berths) {
    m_berths = berths;
    m_berths_isSet = true;
}

bool OAIUKRVSearchFacets::is_berths_Set() const{
    return m_berths_isSet;
}

bool OAIUKRVSearchFacets::is_berths_Valid() const{
    return m_berths_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getCategory() const {
    return m_category;
}
void OAIUKRVSearchFacets::setCategory(const QList<OAIFacetItem> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIUKRVSearchFacets::is_category_Set() const{
    return m_category_isSet;
}

bool OAIUKRVSearchFacets::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getChassis() const {
    return m_chassis;
}
void OAIUKRVSearchFacets::setChassis(const QList<OAIFacetItem> &chassis) {
    m_chassis = chassis;
    m_chassis_isSet = true;
}

bool OAIUKRVSearchFacets::is_chassis_Set() const{
    return m_chassis_isSet;
}

bool OAIUKRVSearchFacets::is_chassis_Valid() const{
    return m_chassis_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getCity() const {
    return m_city;
}
void OAIUKRVSearchFacets::setCity(const QList<OAIFacetItem> &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIUKRVSearchFacets::is_city_Set() const{
    return m_city_isSet;
}

bool OAIUKRVSearchFacets::is_city_Valid() const{
    return m_city_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getDealerId() const {
    return m_dealer_id;
}
void OAIUKRVSearchFacets::setDealerId(const QList<OAIFacetItem> &dealer_id) {
    m_dealer_id = dealer_id;
    m_dealer_id_isSet = true;
}

bool OAIUKRVSearchFacets::is_dealer_id_Set() const{
    return m_dealer_id_isSet;
}

bool OAIUKRVSearchFacets::is_dealer_id_Valid() const{
    return m_dealer_id_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getDriveType() const {
    return m_drive_type;
}
void OAIUKRVSearchFacets::setDriveType(const QList<OAIFacetItem> &drive_type) {
    m_drive_type = drive_type;
    m_drive_type_isSet = true;
}

bool OAIUKRVSearchFacets::is_drive_type_Set() const{
    return m_drive_type_isSet;
}

bool OAIUKRVSearchFacets::is_drive_type_Valid() const{
    return m_drive_type_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getDrivetrain() const {
    return m_drivetrain;
}
void OAIUKRVSearchFacets::setDrivetrain(const QList<OAIFacetItem> &drivetrain) {
    m_drivetrain = drivetrain;
    m_drivetrain_isSet = true;
}

bool OAIUKRVSearchFacets::is_drivetrain_Set() const{
    return m_drivetrain_isSet;
}

bool OAIUKRVSearchFacets::is_drivetrain_Valid() const{
    return m_drivetrain_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getEngine() const {
    return m_engine;
}
void OAIUKRVSearchFacets::setEngine(const QList<OAIFacetItem> &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIUKRVSearchFacets::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIUKRVSearchFacets::is_engine_Valid() const{
    return m_engine_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getExteriorColor() const {
    return m_exterior_color;
}
void OAIUKRVSearchFacets::setExteriorColor(const QList<OAIFacetItem> &exterior_color) {
    m_exterior_color = exterior_color;
    m_exterior_color_isSet = true;
}

bool OAIUKRVSearchFacets::is_exterior_color_Set() const{
    return m_exterior_color_isSet;
}

bool OAIUKRVSearchFacets::is_exterior_color_Valid() const{
    return m_exterior_color_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getFuelType() const {
    return m_fuel_type;
}
void OAIUKRVSearchFacets::setFuelType(const QList<OAIFacetItem> &fuel_type) {
    m_fuel_type = fuel_type;
    m_fuel_type_isSet = true;
}

bool OAIUKRVSearchFacets::is_fuel_type_Set() const{
    return m_fuel_type_isSet;
}

bool OAIUKRVSearchFacets::is_fuel_type_Valid() const{
    return m_fuel_type_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getInteriorColor() const {
    return m_interior_color;
}
void OAIUKRVSearchFacets::setInteriorColor(const QList<OAIFacetItem> &interior_color) {
    m_interior_color = interior_color;
    m_interior_color_isSet = true;
}

bool OAIUKRVSearchFacets::is_interior_color_Set() const{
    return m_interior_color_isSet;
}

bool OAIUKRVSearchFacets::is_interior_color_Valid() const{
    return m_interior_color_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getInventoryType() const {
    return m_inventory_type;
}
void OAIUKRVSearchFacets::setInventoryType(const QList<OAIFacetItem> &inventory_type) {
    m_inventory_type = inventory_type;
    m_inventory_type_isSet = true;
}

bool OAIUKRVSearchFacets::is_inventory_type_Set() const{
    return m_inventory_type_isSet;
}

bool OAIUKRVSearchFacets::is_inventory_type_Valid() const{
    return m_inventory_type_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getMake() const {
    return m_make;
}
void OAIUKRVSearchFacets::setMake(const QList<OAIFacetItem> &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIUKRVSearchFacets::is_make_Set() const{
    return m_make_isSet;
}

bool OAIUKRVSearchFacets::is_make_Valid() const{
    return m_make_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getModel() const {
    return m_model;
}
void OAIUKRVSearchFacets::setModel(const QList<OAIFacetItem> &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIUKRVSearchFacets::is_model_Set() const{
    return m_model_isSet;
}

bool OAIUKRVSearchFacets::is_model_Valid() const{
    return m_model_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getPostalCode() const {
    return m_postal_code;
}
void OAIUKRVSearchFacets::setPostalCode(const QList<OAIFacetItem> &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIUKRVSearchFacets::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIUKRVSearchFacets::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getSellerName() const {
    return m_seller_name;
}
void OAIUKRVSearchFacets::setSellerName(const QList<OAIFacetItem> &seller_name) {
    m_seller_name = seller_name;
    m_seller_name_isSet = true;
}

bool OAIUKRVSearchFacets::is_seller_name_Set() const{
    return m_seller_name_isSet;
}

bool OAIUKRVSearchFacets::is_seller_name_Valid() const{
    return m_seller_name_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getSource() const {
    return m_source;
}
void OAIUKRVSearchFacets::setSource(const QList<OAIFacetItem> &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIUKRVSearchFacets::is_source_Set() const{
    return m_source_isSet;
}

bool OAIUKRVSearchFacets::is_source_Valid() const{
    return m_source_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getState() const {
    return m_state;
}
void OAIUKRVSearchFacets::setState(const QList<OAIFacetItem> &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUKRVSearchFacets::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUKRVSearchFacets::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getSteering() const {
    return m_steering;
}
void OAIUKRVSearchFacets::setSteering(const QList<OAIFacetItem> &steering) {
    m_steering = steering;
    m_steering_isSet = true;
}

bool OAIUKRVSearchFacets::is_steering_Set() const{
    return m_steering_isSet;
}

bool OAIUKRVSearchFacets::is_steering_Valid() const{
    return m_steering_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getSubCategory() const {
    return m_sub_category;
}
void OAIUKRVSearchFacets::setSubCategory(const QList<OAIFacetItem> &sub_category) {
    m_sub_category = sub_category;
    m_sub_category_isSet = true;
}

bool OAIUKRVSearchFacets::is_sub_category_Set() const{
    return m_sub_category_isSet;
}

bool OAIUKRVSearchFacets::is_sub_category_Valid() const{
    return m_sub_category_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getTransmission() const {
    return m_transmission;
}
void OAIUKRVSearchFacets::setTransmission(const QList<OAIFacetItem> &transmission) {
    m_transmission = transmission;
    m_transmission_isSet = true;
}

bool OAIUKRVSearchFacets::is_transmission_Set() const{
    return m_transmission_isSet;
}

bool OAIUKRVSearchFacets::is_transmission_Valid() const{
    return m_transmission_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getYear() const {
    return m_year;
}
void OAIUKRVSearchFacets::setYear(const QList<OAIFacetItem> &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIUKRVSearchFacets::is_year_Set() const{
    return m_year_isSet;
}

bool OAIUKRVSearchFacets::is_year_Valid() const{
    return m_year_isValid;
}

QList<OAIFacetItem> OAIUKRVSearchFacets::getZip() const {
    return m_zip;
}
void OAIUKRVSearchFacets::setZip(const QList<OAIFacetItem> &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIUKRVSearchFacets::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIUKRVSearchFacets::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIUKRVSearchFacets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_berths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_chassis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_drivetrain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exterior_color.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interior_color.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_make.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_steering.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUKRVSearchFacets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
