/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatsItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatsItem::OAIStatsItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatsItem::OAIStatsItem() {
    this->initializeModel();
}

OAIStatsItem::~OAIStatsItem() {}

void OAIStatsItem::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_mean_isSet = false;
    m_mean_isValid = false;

    m_median_isSet = false;
    m_median_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_missing_isSet = false;
    m_missing_isValid = false;

    m_stddev_isSet = false;
    m_stddev_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_sum_of_squares_isSet = false;
    m_sum_of_squares_isValid = false;
}

void OAIStatsItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatsItem::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_mean_isValid = ::OpenAPI::fromJsonValue(m_mean, json[QString("mean")]);
    m_mean_isSet = !json[QString("mean")].isNull() && m_mean_isValid;

    m_median_isValid = ::OpenAPI::fromJsonValue(m_median, json[QString("median")]);
    m_median_isSet = !json[QString("median")].isNull() && m_median_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_missing_isValid = ::OpenAPI::fromJsonValue(m_missing, json[QString("missing")]);
    m_missing_isSet = !json[QString("missing")].isNull() && m_missing_isValid;

    m_stddev_isValid = ::OpenAPI::fromJsonValue(m_stddev, json[QString("stddev")]);
    m_stddev_isSet = !json[QString("stddev")].isNull() && m_stddev_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;

    m_sum_of_squares_isValid = ::OpenAPI::fromJsonValue(m_sum_of_squares, json[QString("sum_of_squares")]);
    m_sum_of_squares_isSet = !json[QString("sum_of_squares")].isNull() && m_sum_of_squares_isValid;
}

QString OAIStatsItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatsItem::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_mean_isSet) {
        obj.insert(QString("mean"), ::OpenAPI::toJsonValue(m_mean));
    }
    if (m_median_isSet) {
        obj.insert(QString("median"), ::OpenAPI::toJsonValue(m_median));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_missing_isSet) {
        obj.insert(QString("missing"), ::OpenAPI::toJsonValue(m_missing));
    }
    if (m_stddev_isSet) {
        obj.insert(QString("stddev"), ::OpenAPI::toJsonValue(m_stddev));
    }
    if (m_sum_isSet) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_sum_of_squares_isSet) {
        obj.insert(QString("sum_of_squares"), ::OpenAPI::toJsonValue(m_sum_of_squares));
    }
    return obj;
}

qint32 OAIStatsItem::getCount() const {
    return m_count;
}
void OAIStatsItem::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIStatsItem::is_count_Set() const{
    return m_count_isSet;
}

bool OAIStatsItem::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIStatsItem::getMax() const {
    return m_max;
}
void OAIStatsItem::setMax(const qint32 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIStatsItem::is_max_Set() const{
    return m_max_isSet;
}

bool OAIStatsItem::is_max_Valid() const{
    return m_max_isValid;
}

double OAIStatsItem::getMean() const {
    return m_mean;
}
void OAIStatsItem::setMean(const double &mean) {
    m_mean = mean;
    m_mean_isSet = true;
}

bool OAIStatsItem::is_mean_Set() const{
    return m_mean_isSet;
}

bool OAIStatsItem::is_mean_Valid() const{
    return m_mean_isValid;
}

double OAIStatsItem::getMedian() const {
    return m_median;
}
void OAIStatsItem::setMedian(const double &median) {
    m_median = median;
    m_median_isSet = true;
}

bool OAIStatsItem::is_median_Set() const{
    return m_median_isSet;
}

bool OAIStatsItem::is_median_Valid() const{
    return m_median_isValid;
}

qint32 OAIStatsItem::getMin() const {
    return m_min;
}
void OAIStatsItem::setMin(const qint32 &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIStatsItem::is_min_Set() const{
    return m_min_isSet;
}

bool OAIStatsItem::is_min_Valid() const{
    return m_min_isValid;
}

qint32 OAIStatsItem::getMissing() const {
    return m_missing;
}
void OAIStatsItem::setMissing(const qint32 &missing) {
    m_missing = missing;
    m_missing_isSet = true;
}

bool OAIStatsItem::is_missing_Set() const{
    return m_missing_isSet;
}

bool OAIStatsItem::is_missing_Valid() const{
    return m_missing_isValid;
}

double OAIStatsItem::getStddev() const {
    return m_stddev;
}
void OAIStatsItem::setStddev(const double &stddev) {
    m_stddev = stddev;
    m_stddev_isSet = true;
}

bool OAIStatsItem::is_stddev_Set() const{
    return m_stddev_isSet;
}

bool OAIStatsItem::is_stddev_Valid() const{
    return m_stddev_isValid;
}

qint32 OAIStatsItem::getSum() const {
    return m_sum;
}
void OAIStatsItem::setSum(const qint32 &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIStatsItem::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIStatsItem::is_sum_Valid() const{
    return m_sum_isValid;
}

double OAIStatsItem::getSumOfSquares() const {
    return m_sum_of_squares;
}
void OAIStatsItem::setSumOfSquares(const double &sum_of_squares) {
    m_sum_of_squares = sum_of_squares;
    m_sum_of_squares_isSet = true;
}

bool OAIStatsItem::is_sum_of_squares_Set() const{
    return m_sum_of_squares_isSet;
}

bool OAIStatsItem::is_sum_of_squares_Valid() const{
    return m_sum_of_squares_isValid;
}

bool OAIStatsItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_median_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stddev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_of_squares_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatsItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
