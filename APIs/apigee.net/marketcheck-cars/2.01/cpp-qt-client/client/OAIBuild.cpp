/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild::OAIBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild::OAIBuild() {
    this->initializeModel();
}

OAIBuild::~OAIBuild() {}

void OAIBuild::initializeModel() {

    m_antibrake_sys_isSet = false;
    m_antibrake_sys_isValid = false;

    m_body_subtype_isSet = false;
    m_body_subtype_isValid = false;

    m_body_type_isSet = false;
    m_body_type_isValid = false;

    m_city_miles_isSet = false;
    m_city_miles_isValid = false;

    m_city_mpg_isSet = false;
    m_city_mpg_isValid = false;

    m_cylinders_isSet = false;
    m_cylinders_isValid = false;

    m_doors_isSet = false;
    m_doors_isValid = false;

    m_drivetrain_isSet = false;
    m_drivetrain_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_aspiration_isSet = false;
    m_engine_aspiration_isValid = false;

    m_engine_block_isSet = false;
    m_engine_block_isValid = false;

    m_engine_measure_isSet = false;
    m_engine_measure_isValid = false;

    m_engine_size_isSet = false;
    m_engine_size_isValid = false;

    m_fuel_type_isSet = false;
    m_fuel_type_isValid = false;

    m_highway_miles_isSet = false;
    m_highway_miles_isValid = false;

    m_highway_mpg_isSet = false;
    m_highway_mpg_isValid = false;

    m_made_in_isSet = false;
    m_made_in_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_opt_seating_isSet = false;
    m_opt_seating_isValid = false;

    m_overall_height_isSet = false;
    m_overall_height_isValid = false;

    m_overall_length_isSet = false;
    m_overall_length_isValid = false;

    m_overall_width_isSet = false;
    m_overall_width_isValid = false;

    m_powertrain_type_isSet = false;
    m_powertrain_type_isValid = false;

    m_short_trim_isSet = false;
    m_short_trim_isValid = false;

    m_std_seating_isSet = false;
    m_std_seating_isValid = false;

    m_steering_type_isSet = false;
    m_steering_type_isValid = false;

    m_tank_size_isSet = false;
    m_tank_size_isValid = false;

    m_transmission_isSet = false;
    m_transmission_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;

    m_trim_r_isSet = false;
    m_trim_r_isValid = false;

    m_vehicle_type_isSet = false;
    m_vehicle_type_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild::fromJsonObject(QJsonObject json) {

    m_antibrake_sys_isValid = ::OpenAPI::fromJsonValue(m_antibrake_sys, json[QString("antibrake_sys")]);
    m_antibrake_sys_isSet = !json[QString("antibrake_sys")].isNull() && m_antibrake_sys_isValid;

    m_body_subtype_isValid = ::OpenAPI::fromJsonValue(m_body_subtype, json[QString("body_subtype")]);
    m_body_subtype_isSet = !json[QString("body_subtype")].isNull() && m_body_subtype_isValid;

    m_body_type_isValid = ::OpenAPI::fromJsonValue(m_body_type, json[QString("body_type")]);
    m_body_type_isSet = !json[QString("body_type")].isNull() && m_body_type_isValid;

    m_city_miles_isValid = ::OpenAPI::fromJsonValue(m_city_miles, json[QString("city_miles")]);
    m_city_miles_isSet = !json[QString("city_miles")].isNull() && m_city_miles_isValid;

    m_city_mpg_isValid = ::OpenAPI::fromJsonValue(m_city_mpg, json[QString("city_mpg")]);
    m_city_mpg_isSet = !json[QString("city_mpg")].isNull() && m_city_mpg_isValid;

    m_cylinders_isValid = ::OpenAPI::fromJsonValue(m_cylinders, json[QString("cylinders")]);
    m_cylinders_isSet = !json[QString("cylinders")].isNull() && m_cylinders_isValid;

    m_doors_isValid = ::OpenAPI::fromJsonValue(m_doors, json[QString("doors")]);
    m_doors_isSet = !json[QString("doors")].isNull() && m_doors_isValid;

    m_drivetrain_isValid = ::OpenAPI::fromJsonValue(m_drivetrain, json[QString("drivetrain")]);
    m_drivetrain_isSet = !json[QString("drivetrain")].isNull() && m_drivetrain_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_engine_aspiration_isValid = ::OpenAPI::fromJsonValue(m_engine_aspiration, json[QString("engine_aspiration")]);
    m_engine_aspiration_isSet = !json[QString("engine_aspiration")].isNull() && m_engine_aspiration_isValid;

    m_engine_block_isValid = ::OpenAPI::fromJsonValue(m_engine_block, json[QString("engine_block")]);
    m_engine_block_isSet = !json[QString("engine_block")].isNull() && m_engine_block_isValid;

    m_engine_measure_isValid = ::OpenAPI::fromJsonValue(m_engine_measure, json[QString("engine_measure")]);
    m_engine_measure_isSet = !json[QString("engine_measure")].isNull() && m_engine_measure_isValid;

    m_engine_size_isValid = ::OpenAPI::fromJsonValue(m_engine_size, json[QString("engine_size")]);
    m_engine_size_isSet = !json[QString("engine_size")].isNull() && m_engine_size_isValid;

    m_fuel_type_isValid = ::OpenAPI::fromJsonValue(m_fuel_type, json[QString("fuel_type")]);
    m_fuel_type_isSet = !json[QString("fuel_type")].isNull() && m_fuel_type_isValid;

    m_highway_miles_isValid = ::OpenAPI::fromJsonValue(m_highway_miles, json[QString("highway_miles")]);
    m_highway_miles_isSet = !json[QString("highway_miles")].isNull() && m_highway_miles_isValid;

    m_highway_mpg_isValid = ::OpenAPI::fromJsonValue(m_highway_mpg, json[QString("highway_mpg")]);
    m_highway_mpg_isSet = !json[QString("highway_mpg")].isNull() && m_highway_mpg_isValid;

    m_made_in_isValid = ::OpenAPI::fromJsonValue(m_made_in, json[QString("made_in")]);
    m_made_in_isSet = !json[QString("made_in")].isNull() && m_made_in_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_opt_seating_isValid = ::OpenAPI::fromJsonValue(m_opt_seating, json[QString("opt_seating")]);
    m_opt_seating_isSet = !json[QString("opt_seating")].isNull() && m_opt_seating_isValid;

    m_overall_height_isValid = ::OpenAPI::fromJsonValue(m_overall_height, json[QString("overall_height")]);
    m_overall_height_isSet = !json[QString("overall_height")].isNull() && m_overall_height_isValid;

    m_overall_length_isValid = ::OpenAPI::fromJsonValue(m_overall_length, json[QString("overall_length")]);
    m_overall_length_isSet = !json[QString("overall_length")].isNull() && m_overall_length_isValid;

    m_overall_width_isValid = ::OpenAPI::fromJsonValue(m_overall_width, json[QString("overall_width")]);
    m_overall_width_isSet = !json[QString("overall_width")].isNull() && m_overall_width_isValid;

    m_powertrain_type_isValid = ::OpenAPI::fromJsonValue(m_powertrain_type, json[QString("powertrain_type")]);
    m_powertrain_type_isSet = !json[QString("powertrain_type")].isNull() && m_powertrain_type_isValid;

    m_short_trim_isValid = ::OpenAPI::fromJsonValue(m_short_trim, json[QString("short_trim")]);
    m_short_trim_isSet = !json[QString("short_trim")].isNull() && m_short_trim_isValid;

    m_std_seating_isValid = ::OpenAPI::fromJsonValue(m_std_seating, json[QString("std_seating")]);
    m_std_seating_isSet = !json[QString("std_seating")].isNull() && m_std_seating_isValid;

    m_steering_type_isValid = ::OpenAPI::fromJsonValue(m_steering_type, json[QString("steering_type")]);
    m_steering_type_isSet = !json[QString("steering_type")].isNull() && m_steering_type_isValid;

    m_tank_size_isValid = ::OpenAPI::fromJsonValue(m_tank_size, json[QString("tank_size")]);
    m_tank_size_isSet = !json[QString("tank_size")].isNull() && m_tank_size_isValid;

    m_transmission_isValid = ::OpenAPI::fromJsonValue(m_transmission, json[QString("transmission")]);
    m_transmission_isSet = !json[QString("transmission")].isNull() && m_transmission_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;

    m_trim_r_isValid = ::OpenAPI::fromJsonValue(m_trim_r, json[QString("trim_r")]);
    m_trim_r_isSet = !json[QString("trim_r")].isNull() && m_trim_r_isValid;

    m_vehicle_type_isValid = ::OpenAPI::fromJsonValue(m_vehicle_type, json[QString("vehicle_type")]);
    m_vehicle_type_isSet = !json[QString("vehicle_type")].isNull() && m_vehicle_type_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_antibrake_sys_isSet) {
        obj.insert(QString("antibrake_sys"), ::OpenAPI::toJsonValue(m_antibrake_sys));
    }
    if (m_body_subtype_isSet) {
        obj.insert(QString("body_subtype"), ::OpenAPI::toJsonValue(m_body_subtype));
    }
    if (m_body_type_isSet) {
        obj.insert(QString("body_type"), ::OpenAPI::toJsonValue(m_body_type));
    }
    if (m_city_miles_isSet) {
        obj.insert(QString("city_miles"), ::OpenAPI::toJsonValue(m_city_miles));
    }
    if (m_city_mpg_isSet) {
        obj.insert(QString("city_mpg"), ::OpenAPI::toJsonValue(m_city_mpg));
    }
    if (m_cylinders_isSet) {
        obj.insert(QString("cylinders"), ::OpenAPI::toJsonValue(m_cylinders));
    }
    if (m_doors_isSet) {
        obj.insert(QString("doors"), ::OpenAPI::toJsonValue(m_doors));
    }
    if (m_drivetrain_isSet) {
        obj.insert(QString("drivetrain"), ::OpenAPI::toJsonValue(m_drivetrain));
    }
    if (m_engine_isSet) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_aspiration_isSet) {
        obj.insert(QString("engine_aspiration"), ::OpenAPI::toJsonValue(m_engine_aspiration));
    }
    if (m_engine_block_isSet) {
        obj.insert(QString("engine_block"), ::OpenAPI::toJsonValue(m_engine_block));
    }
    if (m_engine_measure_isSet) {
        obj.insert(QString("engine_measure"), ::OpenAPI::toJsonValue(m_engine_measure));
    }
    if (m_engine_size_isSet) {
        obj.insert(QString("engine_size"), ::OpenAPI::toJsonValue(m_engine_size));
    }
    if (m_fuel_type_isSet) {
        obj.insert(QString("fuel_type"), ::OpenAPI::toJsonValue(m_fuel_type));
    }
    if (m_highway_miles_isSet) {
        obj.insert(QString("highway_miles"), ::OpenAPI::toJsonValue(m_highway_miles));
    }
    if (m_highway_mpg_isSet) {
        obj.insert(QString("highway_mpg"), ::OpenAPI::toJsonValue(m_highway_mpg));
    }
    if (m_made_in_isSet) {
        obj.insert(QString("made_in"), ::OpenAPI::toJsonValue(m_made_in));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_opt_seating_isSet) {
        obj.insert(QString("opt_seating"), ::OpenAPI::toJsonValue(m_opt_seating));
    }
    if (m_overall_height_isSet) {
        obj.insert(QString("overall_height"), ::OpenAPI::toJsonValue(m_overall_height));
    }
    if (m_overall_length_isSet) {
        obj.insert(QString("overall_length"), ::OpenAPI::toJsonValue(m_overall_length));
    }
    if (m_overall_width_isSet) {
        obj.insert(QString("overall_width"), ::OpenAPI::toJsonValue(m_overall_width));
    }
    if (m_powertrain_type_isSet) {
        obj.insert(QString("powertrain_type"), ::OpenAPI::toJsonValue(m_powertrain_type));
    }
    if (m_short_trim_isSet) {
        obj.insert(QString("short_trim"), ::OpenAPI::toJsonValue(m_short_trim));
    }
    if (m_std_seating_isSet) {
        obj.insert(QString("std_seating"), ::OpenAPI::toJsonValue(m_std_seating));
    }
    if (m_steering_type_isSet) {
        obj.insert(QString("steering_type"), ::OpenAPI::toJsonValue(m_steering_type));
    }
    if (m_tank_size_isSet) {
        obj.insert(QString("tank_size"), ::OpenAPI::toJsonValue(m_tank_size));
    }
    if (m_transmission_isSet) {
        obj.insert(QString("transmission"), ::OpenAPI::toJsonValue(m_transmission));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    if (m_trim_r_isSet) {
        obj.insert(QString("trim_r"), ::OpenAPI::toJsonValue(m_trim_r));
    }
    if (m_vehicle_type_isSet) {
        obj.insert(QString("vehicle_type"), ::OpenAPI::toJsonValue(m_vehicle_type));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIBuild::getAntibrakeSys() const {
    return m_antibrake_sys;
}
void OAIBuild::setAntibrakeSys(const QString &antibrake_sys) {
    m_antibrake_sys = antibrake_sys;
    m_antibrake_sys_isSet = true;
}

bool OAIBuild::is_antibrake_sys_Set() const{
    return m_antibrake_sys_isSet;
}

bool OAIBuild::is_antibrake_sys_Valid() const{
    return m_antibrake_sys_isValid;
}

QString OAIBuild::getBodySubtype() const {
    return m_body_subtype;
}
void OAIBuild::setBodySubtype(const QString &body_subtype) {
    m_body_subtype = body_subtype;
    m_body_subtype_isSet = true;
}

bool OAIBuild::is_body_subtype_Set() const{
    return m_body_subtype_isSet;
}

bool OAIBuild::is_body_subtype_Valid() const{
    return m_body_subtype_isValid;
}

QString OAIBuild::getBodyType() const {
    return m_body_type;
}
void OAIBuild::setBodyType(const QString &body_type) {
    m_body_type = body_type;
    m_body_type_isSet = true;
}

bool OAIBuild::is_body_type_Set() const{
    return m_body_type_isSet;
}

bool OAIBuild::is_body_type_Valid() const{
    return m_body_type_isValid;
}

QString OAIBuild::getCityMiles() const {
    return m_city_miles;
}
void OAIBuild::setCityMiles(const QString &city_miles) {
    m_city_miles = city_miles;
    m_city_miles_isSet = true;
}

bool OAIBuild::is_city_miles_Set() const{
    return m_city_miles_isSet;
}

bool OAIBuild::is_city_miles_Valid() const{
    return m_city_miles_isValid;
}

qint32 OAIBuild::getCityMpg() const {
    return m_city_mpg;
}
void OAIBuild::setCityMpg(const qint32 &city_mpg) {
    m_city_mpg = city_mpg;
    m_city_mpg_isSet = true;
}

bool OAIBuild::is_city_mpg_Set() const{
    return m_city_mpg_isSet;
}

bool OAIBuild::is_city_mpg_Valid() const{
    return m_city_mpg_isValid;
}

qint32 OAIBuild::getCylinders() const {
    return m_cylinders;
}
void OAIBuild::setCylinders(const qint32 &cylinders) {
    m_cylinders = cylinders;
    m_cylinders_isSet = true;
}

bool OAIBuild::is_cylinders_Set() const{
    return m_cylinders_isSet;
}

bool OAIBuild::is_cylinders_Valid() const{
    return m_cylinders_isValid;
}

qint32 OAIBuild::getDoors() const {
    return m_doors;
}
void OAIBuild::setDoors(const qint32 &doors) {
    m_doors = doors;
    m_doors_isSet = true;
}

bool OAIBuild::is_doors_Set() const{
    return m_doors_isSet;
}

bool OAIBuild::is_doors_Valid() const{
    return m_doors_isValid;
}

QString OAIBuild::getDrivetrain() const {
    return m_drivetrain;
}
void OAIBuild::setDrivetrain(const QString &drivetrain) {
    m_drivetrain = drivetrain;
    m_drivetrain_isSet = true;
}

bool OAIBuild::is_drivetrain_Set() const{
    return m_drivetrain_isSet;
}

bool OAIBuild::is_drivetrain_Valid() const{
    return m_drivetrain_isValid;
}

QString OAIBuild::getEngine() const {
    return m_engine;
}
void OAIBuild::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIBuild::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIBuild::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIBuild::getEngineAspiration() const {
    return m_engine_aspiration;
}
void OAIBuild::setEngineAspiration(const QString &engine_aspiration) {
    m_engine_aspiration = engine_aspiration;
    m_engine_aspiration_isSet = true;
}

bool OAIBuild::is_engine_aspiration_Set() const{
    return m_engine_aspiration_isSet;
}

bool OAIBuild::is_engine_aspiration_Valid() const{
    return m_engine_aspiration_isValid;
}

QString OAIBuild::getEngineBlock() const {
    return m_engine_block;
}
void OAIBuild::setEngineBlock(const QString &engine_block) {
    m_engine_block = engine_block;
    m_engine_block_isSet = true;
}

bool OAIBuild::is_engine_block_Set() const{
    return m_engine_block_isSet;
}

bool OAIBuild::is_engine_block_Valid() const{
    return m_engine_block_isValid;
}

QString OAIBuild::getEngineMeasure() const {
    return m_engine_measure;
}
void OAIBuild::setEngineMeasure(const QString &engine_measure) {
    m_engine_measure = engine_measure;
    m_engine_measure_isSet = true;
}

bool OAIBuild::is_engine_measure_Set() const{
    return m_engine_measure_isSet;
}

bool OAIBuild::is_engine_measure_Valid() const{
    return m_engine_measure_isValid;
}

double OAIBuild::getEngineSize() const {
    return m_engine_size;
}
void OAIBuild::setEngineSize(const double &engine_size) {
    m_engine_size = engine_size;
    m_engine_size_isSet = true;
}

bool OAIBuild::is_engine_size_Set() const{
    return m_engine_size_isSet;
}

bool OAIBuild::is_engine_size_Valid() const{
    return m_engine_size_isValid;
}

QString OAIBuild::getFuelType() const {
    return m_fuel_type;
}
void OAIBuild::setFuelType(const QString &fuel_type) {
    m_fuel_type = fuel_type;
    m_fuel_type_isSet = true;
}

bool OAIBuild::is_fuel_type_Set() const{
    return m_fuel_type_isSet;
}

bool OAIBuild::is_fuel_type_Valid() const{
    return m_fuel_type_isValid;
}

QString OAIBuild::getHighwayMiles() const {
    return m_highway_miles;
}
void OAIBuild::setHighwayMiles(const QString &highway_miles) {
    m_highway_miles = highway_miles;
    m_highway_miles_isSet = true;
}

bool OAIBuild::is_highway_miles_Set() const{
    return m_highway_miles_isSet;
}

bool OAIBuild::is_highway_miles_Valid() const{
    return m_highway_miles_isValid;
}

qint32 OAIBuild::getHighwayMpg() const {
    return m_highway_mpg;
}
void OAIBuild::setHighwayMpg(const qint32 &highway_mpg) {
    m_highway_mpg = highway_mpg;
    m_highway_mpg_isSet = true;
}

bool OAIBuild::is_highway_mpg_Set() const{
    return m_highway_mpg_isSet;
}

bool OAIBuild::is_highway_mpg_Valid() const{
    return m_highway_mpg_isValid;
}

QString OAIBuild::getMadeIn() const {
    return m_made_in;
}
void OAIBuild::setMadeIn(const QString &made_in) {
    m_made_in = made_in;
    m_made_in_isSet = true;
}

bool OAIBuild::is_made_in_Set() const{
    return m_made_in_isSet;
}

bool OAIBuild::is_made_in_Valid() const{
    return m_made_in_isValid;
}

QString OAIBuild::getMake() const {
    return m_make;
}
void OAIBuild::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIBuild::is_make_Set() const{
    return m_make_isSet;
}

bool OAIBuild::is_make_Valid() const{
    return m_make_isValid;
}

QString OAIBuild::getModel() const {
    return m_model;
}
void OAIBuild::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIBuild::is_model_Set() const{
    return m_model_isSet;
}

bool OAIBuild::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIBuild::getOptSeating() const {
    return m_opt_seating;
}
void OAIBuild::setOptSeating(const QString &opt_seating) {
    m_opt_seating = opt_seating;
    m_opt_seating_isSet = true;
}

bool OAIBuild::is_opt_seating_Set() const{
    return m_opt_seating_isSet;
}

bool OAIBuild::is_opt_seating_Valid() const{
    return m_opt_seating_isValid;
}

QString OAIBuild::getOverallHeight() const {
    return m_overall_height;
}
void OAIBuild::setOverallHeight(const QString &overall_height) {
    m_overall_height = overall_height;
    m_overall_height_isSet = true;
}

bool OAIBuild::is_overall_height_Set() const{
    return m_overall_height_isSet;
}

bool OAIBuild::is_overall_height_Valid() const{
    return m_overall_height_isValid;
}

QString OAIBuild::getOverallLength() const {
    return m_overall_length;
}
void OAIBuild::setOverallLength(const QString &overall_length) {
    m_overall_length = overall_length;
    m_overall_length_isSet = true;
}

bool OAIBuild::is_overall_length_Set() const{
    return m_overall_length_isSet;
}

bool OAIBuild::is_overall_length_Valid() const{
    return m_overall_length_isValid;
}

QString OAIBuild::getOverallWidth() const {
    return m_overall_width;
}
void OAIBuild::setOverallWidth(const QString &overall_width) {
    m_overall_width = overall_width;
    m_overall_width_isSet = true;
}

bool OAIBuild::is_overall_width_Set() const{
    return m_overall_width_isSet;
}

bool OAIBuild::is_overall_width_Valid() const{
    return m_overall_width_isValid;
}

QString OAIBuild::getPowertrainType() const {
    return m_powertrain_type;
}
void OAIBuild::setPowertrainType(const QString &powertrain_type) {
    m_powertrain_type = powertrain_type;
    m_powertrain_type_isSet = true;
}

bool OAIBuild::is_powertrain_type_Set() const{
    return m_powertrain_type_isSet;
}

bool OAIBuild::is_powertrain_type_Valid() const{
    return m_powertrain_type_isValid;
}

QString OAIBuild::getShortTrim() const {
    return m_short_trim;
}
void OAIBuild::setShortTrim(const QString &short_trim) {
    m_short_trim = short_trim;
    m_short_trim_isSet = true;
}

bool OAIBuild::is_short_trim_Set() const{
    return m_short_trim_isSet;
}

bool OAIBuild::is_short_trim_Valid() const{
    return m_short_trim_isValid;
}

QString OAIBuild::getStdSeating() const {
    return m_std_seating;
}
void OAIBuild::setStdSeating(const QString &std_seating) {
    m_std_seating = std_seating;
    m_std_seating_isSet = true;
}

bool OAIBuild::is_std_seating_Set() const{
    return m_std_seating_isSet;
}

bool OAIBuild::is_std_seating_Valid() const{
    return m_std_seating_isValid;
}

QString OAIBuild::getSteeringType() const {
    return m_steering_type;
}
void OAIBuild::setSteeringType(const QString &steering_type) {
    m_steering_type = steering_type;
    m_steering_type_isSet = true;
}

bool OAIBuild::is_steering_type_Set() const{
    return m_steering_type_isSet;
}

bool OAIBuild::is_steering_type_Valid() const{
    return m_steering_type_isValid;
}

QString OAIBuild::getTankSize() const {
    return m_tank_size;
}
void OAIBuild::setTankSize(const QString &tank_size) {
    m_tank_size = tank_size;
    m_tank_size_isSet = true;
}

bool OAIBuild::is_tank_size_Set() const{
    return m_tank_size_isSet;
}

bool OAIBuild::is_tank_size_Valid() const{
    return m_tank_size_isValid;
}

QString OAIBuild::getTransmission() const {
    return m_transmission;
}
void OAIBuild::setTransmission(const QString &transmission) {
    m_transmission = transmission;
    m_transmission_isSet = true;
}

bool OAIBuild::is_transmission_Set() const{
    return m_transmission_isSet;
}

bool OAIBuild::is_transmission_Valid() const{
    return m_transmission_isValid;
}

QString OAIBuild::getTrim() const {
    return m_trim;
}
void OAIBuild::setTrim(const QString &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIBuild::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIBuild::is_trim_Valid() const{
    return m_trim_isValid;
}

QString OAIBuild::getTrimR() const {
    return m_trim_r;
}
void OAIBuild::setTrimR(const QString &trim_r) {
    m_trim_r = trim_r;
    m_trim_r_isSet = true;
}

bool OAIBuild::is_trim_r_Set() const{
    return m_trim_r_isSet;
}

bool OAIBuild::is_trim_r_Valid() const{
    return m_trim_r_isValid;
}

QString OAIBuild::getVehicleType() const {
    return m_vehicle_type;
}
void OAIBuild::setVehicleType(const QString &vehicle_type) {
    m_vehicle_type = vehicle_type;
    m_vehicle_type_isSet = true;
}

bool OAIBuild::is_vehicle_type_Set() const{
    return m_vehicle_type_isSet;
}

bool OAIBuild::is_vehicle_type_Valid() const{
    return m_vehicle_type_isValid;
}

qint32 OAIBuild::getYear() const {
    return m_year;
}
void OAIBuild::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIBuild::is_year_Set() const{
    return m_year_isSet;
}

bool OAIBuild::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antibrake_sys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_mpg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cylinders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drivetrain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_aspiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highway_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highway_mpg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_made_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_seating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_powertrain_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_trim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_std_seating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steering_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tank_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_r_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
