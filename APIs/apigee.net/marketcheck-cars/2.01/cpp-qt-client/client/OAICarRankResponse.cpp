/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICarRankResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICarRankResponse::OAICarRankResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICarRankResponse::OAICarRankResponse() {
    this->initializeModel();
}

OAICarRankResponse::~OAICarRankResponse() {}

void OAICarRankResponse::initializeModel() {

    m_num_ranked_isSet = false;
    m_num_ranked_isValid = false;

    m_ranked_listings_isSet = false;
    m_ranked_listings_isValid = false;
}

void OAICarRankResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICarRankResponse::fromJsonObject(QJsonObject json) {

    m_num_ranked_isValid = ::OpenAPI::fromJsonValue(m_num_ranked, json[QString("num_ranked")]);
    m_num_ranked_isSet = !json[QString("num_ranked")].isNull() && m_num_ranked_isValid;

    m_ranked_listings_isValid = ::OpenAPI::fromJsonValue(m_ranked_listings, json[QString("ranked_listings")]);
    m_ranked_listings_isSet = !json[QString("ranked_listings")].isNull() && m_ranked_listings_isValid;
}

QString OAICarRankResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICarRankResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_num_ranked_isSet) {
        obj.insert(QString("num_ranked"), ::OpenAPI::toJsonValue(m_num_ranked));
    }
    if (m_ranked_listings.size() > 0) {
        obj.insert(QString("ranked_listings"), ::OpenAPI::toJsonValue(m_ranked_listings));
    }
    return obj;
}

qint32 OAICarRankResponse::getNumRanked() const {
    return m_num_ranked;
}
void OAICarRankResponse::setNumRanked(const qint32 &num_ranked) {
    m_num_ranked = num_ranked;
    m_num_ranked_isSet = true;
}

bool OAICarRankResponse::is_num_ranked_Set() const{
    return m_num_ranked_isSet;
}

bool OAICarRankResponse::is_num_ranked_Valid() const{
    return m_num_ranked_isValid;
}

QList<OAICarListingRank> OAICarRankResponse::getRankedListings() const {
    return m_ranked_listings;
}
void OAICarRankResponse::setRankedListings(const QList<OAICarListingRank> &ranked_listings) {
    m_ranked_listings = ranked_listings;
    m_ranked_listings_isSet = true;
}

bool OAICarRankResponse::is_ranked_listings_Set() const{
    return m_ranked_listings_isSet;
}

bool OAICarRankResponse::is_ranked_listings_Valid() const{
    return m_ranked_listings_isValid;
}

bool OAICarRankResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_num_ranked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranked_listings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICarRankResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
