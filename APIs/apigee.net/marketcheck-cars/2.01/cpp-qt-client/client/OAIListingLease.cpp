/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListingLease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListingLease::OAIListingLease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListingLease::OAIListingLease() {
    this->initializeModel();
}

OAIListingLease::~OAIListingLease() {}

void OAIListingLease::initializeModel() {

    m_down_payment_isSet = false;
    m_down_payment_isValid = false;

    m_estimated_monthly_payment_isSet = false;
    m_estimated_monthly_payment_isValid = false;

    m_lease_term_isSet = false;
    m_lease_term_isValid = false;
}

void OAIListingLease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListingLease::fromJsonObject(QJsonObject json) {

    m_down_payment_isValid = ::OpenAPI::fromJsonValue(m_down_payment, json[QString("down_payment")]);
    m_down_payment_isSet = !json[QString("down_payment")].isNull() && m_down_payment_isValid;

    m_estimated_monthly_payment_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_payment, json[QString("estimated_monthly_payment")]);
    m_estimated_monthly_payment_isSet = !json[QString("estimated_monthly_payment")].isNull() && m_estimated_monthly_payment_isValid;

    m_lease_term_isValid = ::OpenAPI::fromJsonValue(m_lease_term, json[QString("lease_term")]);
    m_lease_term_isSet = !json[QString("lease_term")].isNull() && m_lease_term_isValid;
}

QString OAIListingLease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListingLease::asJsonObject() const {
    QJsonObject obj;
    if (m_down_payment_isSet) {
        obj.insert(QString("down_payment"), ::OpenAPI::toJsonValue(m_down_payment));
    }
    if (m_estimated_monthly_payment_isSet) {
        obj.insert(QString("estimated_monthly_payment"), ::OpenAPI::toJsonValue(m_estimated_monthly_payment));
    }
    if (m_lease_term_isSet) {
        obj.insert(QString("lease_term"), ::OpenAPI::toJsonValue(m_lease_term));
    }
    return obj;
}

double OAIListingLease::getDownPayment() const {
    return m_down_payment;
}
void OAIListingLease::setDownPayment(const double &down_payment) {
    m_down_payment = down_payment;
    m_down_payment_isSet = true;
}

bool OAIListingLease::is_down_payment_Set() const{
    return m_down_payment_isSet;
}

bool OAIListingLease::is_down_payment_Valid() const{
    return m_down_payment_isValid;
}

double OAIListingLease::getEstimatedMonthlyPayment() const {
    return m_estimated_monthly_payment;
}
void OAIListingLease::setEstimatedMonthlyPayment(const double &estimated_monthly_payment) {
    m_estimated_monthly_payment = estimated_monthly_payment;
    m_estimated_monthly_payment_isSet = true;
}

bool OAIListingLease::is_estimated_monthly_payment_Set() const{
    return m_estimated_monthly_payment_isSet;
}

bool OAIListingLease::is_estimated_monthly_payment_Valid() const{
    return m_estimated_monthly_payment_isValid;
}

qint32 OAIListingLease::getLeaseTerm() const {
    return m_lease_term;
}
void OAIListingLease::setLeaseTerm(const qint32 &lease_term) {
    m_lease_term = lease_term;
    m_lease_term_isSet = true;
}

bool OAIListingLease::is_lease_term_Set() const{
    return m_lease_term_isSet;
}

bool OAIListingLease::is_lease_term_Valid() const{
    return m_lease_term_isValid;
}

bool OAIListingLease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_down_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_monthly_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_term_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListingLease::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
