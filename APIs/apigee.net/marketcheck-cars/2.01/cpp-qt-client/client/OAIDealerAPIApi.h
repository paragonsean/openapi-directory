/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDealerAPIApi_H
#define OAI_OAIDealerAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDealer.h"
#include "OAIDealersResponse.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDealerAPIApi : public QObject {
    Q_OBJECT

public:
    OAIDealerAPIApi(const int timeOut = 0);
    ~OAIDealerAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  provider bool [optional]
    */
    virtual void dealerCarUkIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &provider = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  provider bool [optional]
    */
    virtual void dealerHeavyEquipmentIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &provider = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  provider bool [optional]
    */
    virtual void dealerMotorcycleIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &provider = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  provider bool [optional]
    */
    virtual void dealerRvIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &provider = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  country QString [optional]
    * @param[in]  dealer_type QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  listing_count_range QString [optional]
    * @param[in]  inventory_url QString [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  provider bool [optional]
    * @param[in]  facets QString [optional]
    * @param[in]  range_facets QString [optional]
    */
    virtual void dealerSearch(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_count_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &provider = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_facets = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  country QString [optional]
    * @param[in]  dealer_type QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  county QString [optional]
    * @param[in]  listing_count_range QString [optional]
    * @param[in]  inventory_url QString [optional]
    * @param[in]  postal_code QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  provider bool [optional]
    * @param[in]  facets QString [optional]
    * @param[in]  range_facets QString [optional]
    */
    virtual void dealersCarUkGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &county = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_count_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &provider = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_facets = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  country QString [optional]
    * @param[in]  dealer_type QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  listing_count_range QString [optional]
    * @param[in]  inventory_url QString [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  provider bool [optional]
    * @param[in]  facets QString [optional]
    * @param[in]  range_facets QString [optional]
    */
    virtual void dealersHeavyEquipmentGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_count_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &provider = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_facets = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  country QString [optional]
    * @param[in]  dealer_type QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  listing_count_range QString [optional]
    * @param[in]  inventory_url QString [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  provider bool [optional]
    * @param[in]  facets QString [optional]
    * @param[in]  range_facets QString [optional]
    */
    virtual void dealersMotorcycleGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_count_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &provider = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_facets = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  country QString [optional]
    * @param[in]  dealer_type QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  listing_count_range QString [optional]
    * @param[in]  inventory_url QString [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  provider bool [optional]
    * @param[in]  facets QString [optional]
    * @param[in]  range_facets QString [optional]
    */
    virtual void dealersRvGet(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_count_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &provider = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_facets = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  provider bool [optional]
    */
    virtual void getDealer(const QString &id, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &provider = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dealerCarUkIdGetCallback(OAIHttpRequestWorker *worker);
    void dealerHeavyEquipmentIdGetCallback(OAIHttpRequestWorker *worker);
    void dealerMotorcycleIdGetCallback(OAIHttpRequestWorker *worker);
    void dealerRvIdGetCallback(OAIHttpRequestWorker *worker);
    void dealerSearchCallback(OAIHttpRequestWorker *worker);
    void dealersCarUkGetCallback(OAIHttpRequestWorker *worker);
    void dealersHeavyEquipmentGetCallback(OAIHttpRequestWorker *worker);
    void dealersMotorcycleGetCallback(OAIHttpRequestWorker *worker);
    void dealersRvGetCallback(OAIHttpRequestWorker *worker);
    void getDealerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dealerCarUkIdGetSignal(OAIDealer summary);
    void dealerHeavyEquipmentIdGetSignal(OAIDealer summary);
    void dealerMotorcycleIdGetSignal(OAIDealer summary);
    void dealerRvIdGetSignal(OAIDealer summary);
    void dealerSearchSignal(OAIDealersResponse summary);
    void dealersCarUkGetSignal(OAIDealersResponse summary);
    void dealersHeavyEquipmentGetSignal(OAIDealersResponse summary);
    void dealersMotorcycleGetSignal(OAIDealersResponse summary);
    void dealersRvGetSignal(OAIDealersResponse summary);
    void getDealerSignal(OAIDealer summary);


    void dealerCarUkIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDealer summary);
    void dealerHeavyEquipmentIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDealer summary);
    void dealerMotorcycleIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDealer summary);
    void dealerRvIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDealer summary);
    void dealerSearchSignalFull(OAIHttpRequestWorker *worker, OAIDealersResponse summary);
    void dealersCarUkGetSignalFull(OAIHttpRequestWorker *worker, OAIDealersResponse summary);
    void dealersHeavyEquipmentGetSignalFull(OAIHttpRequestWorker *worker, OAIDealersResponse summary);
    void dealersMotorcycleGetSignalFull(OAIHttpRequestWorker *worker, OAIDealersResponse summary);
    void dealersRvGetSignalFull(OAIHttpRequestWorker *worker, OAIDealersResponse summary);
    void getDealerSignalFull(OAIHttpRequestWorker *worker, OAIDealer summary);

    Q_DECL_DEPRECATED_X("Use dealerCarUkIdGetSignalError() instead")
    void dealerCarUkIdGetSignalE(OAIDealer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dealerCarUkIdGetSignalError(OAIDealer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealerHeavyEquipmentIdGetSignalError() instead")
    void dealerHeavyEquipmentIdGetSignalE(OAIDealer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dealerHeavyEquipmentIdGetSignalError(OAIDealer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealerMotorcycleIdGetSignalError() instead")
    void dealerMotorcycleIdGetSignalE(OAIDealer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dealerMotorcycleIdGetSignalError(OAIDealer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealerRvIdGetSignalError() instead")
    void dealerRvIdGetSignalE(OAIDealer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dealerRvIdGetSignalError(OAIDealer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealerSearchSignalError() instead")
    void dealerSearchSignalE(OAIDealersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dealerSearchSignalError(OAIDealersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealersCarUkGetSignalError() instead")
    void dealersCarUkGetSignalE(OAIDealersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dealersCarUkGetSignalError(OAIDealersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealersHeavyEquipmentGetSignalError() instead")
    void dealersHeavyEquipmentGetSignalE(OAIDealersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dealersHeavyEquipmentGetSignalError(OAIDealersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealersMotorcycleGetSignalError() instead")
    void dealersMotorcycleGetSignalE(OAIDealersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dealersMotorcycleGetSignalError(OAIDealersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealersRvGetSignalError() instead")
    void dealersRvGetSignalE(OAIDealersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dealersRvGetSignalError(OAIDealersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDealerSignalError() instead")
    void getDealerSignalE(OAIDealer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDealerSignalError(OAIDealer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dealerCarUkIdGetSignalErrorFull() instead")
    void dealerCarUkIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dealerCarUkIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealerHeavyEquipmentIdGetSignalErrorFull() instead")
    void dealerHeavyEquipmentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dealerHeavyEquipmentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealerMotorcycleIdGetSignalErrorFull() instead")
    void dealerMotorcycleIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dealerMotorcycleIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealerRvIdGetSignalErrorFull() instead")
    void dealerRvIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dealerRvIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealerSearchSignalErrorFull() instead")
    void dealerSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dealerSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealersCarUkGetSignalErrorFull() instead")
    void dealersCarUkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dealersCarUkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealersHeavyEquipmentGetSignalErrorFull() instead")
    void dealersHeavyEquipmentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dealersHeavyEquipmentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealersMotorcycleGetSignalErrorFull() instead")
    void dealersMotorcycleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dealersMotorcycleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dealersRvGetSignalErrorFull() instead")
    void dealersRvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dealersRvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDealerSignalErrorFull() instead")
    void getDealerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDealerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
