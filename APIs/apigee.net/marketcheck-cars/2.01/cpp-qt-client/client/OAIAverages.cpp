/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAverages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAverages::OAIAverages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAverages::OAIAverages() {
    this->initializeModel();
}

OAIAverages::~OAIAverages() {}

void OAIAverages::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_dom_isSet = false;
    m_dom_isValid = false;

    m_miles_isSet = false;
    m_miles_isValid = false;

    m_msrp_isSet = false;
    m_msrp_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAIAverages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAverages::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_dom_isValid = ::OpenAPI::fromJsonValue(m_dom, json[QString("dom")]);
    m_dom_isSet = !json[QString("dom")].isNull() && m_dom_isValid;

    m_miles_isValid = ::OpenAPI::fromJsonValue(m_miles, json[QString("miles")]);
    m_miles_isSet = !json[QString("miles")].isNull() && m_miles_isValid;

    m_msrp_isValid = ::OpenAPI::fromJsonValue(m_msrp, json[QString("msrp")]);
    m_msrp_isSet = !json[QString("msrp")].isNull() && m_msrp_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAIAverages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAverages::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_dom_isSet) {
        obj.insert(QString("dom"), ::OpenAPI::toJsonValue(m_dom));
    }
    if (m_miles_isSet) {
        obj.insert(QString("miles"), ::OpenAPI::toJsonValue(m_miles));
    }
    if (m_msrp_isSet) {
        obj.insert(QString("msrp"), ::OpenAPI::toJsonValue(m_msrp));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

double OAIAverages::getAge() const {
    return m_age;
}
void OAIAverages::setAge(const double &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIAverages::is_age_Set() const{
    return m_age_isSet;
}

bool OAIAverages::is_age_Valid() const{
    return m_age_isValid;
}

double OAIAverages::getDom() const {
    return m_dom;
}
void OAIAverages::setDom(const double &dom) {
    m_dom = dom;
    m_dom_isSet = true;
}

bool OAIAverages::is_dom_Set() const{
    return m_dom_isSet;
}

bool OAIAverages::is_dom_Valid() const{
    return m_dom_isValid;
}

double OAIAverages::getMiles() const {
    return m_miles;
}
void OAIAverages::setMiles(const double &miles) {
    m_miles = miles;
    m_miles_isSet = true;
}

bool OAIAverages::is_miles_Set() const{
    return m_miles_isSet;
}

bool OAIAverages::is_miles_Valid() const{
    return m_miles_isValid;
}

double OAIAverages::getMsrp() const {
    return m_msrp;
}
void OAIAverages::setMsrp(const double &msrp) {
    m_msrp = msrp;
    m_msrp_isSet = true;
}

bool OAIAverages::is_msrp_Set() const{
    return m_msrp_isSet;
}

bool OAIAverages::is_msrp_Valid() const{
    return m_msrp_isValid;
}

double OAIAverages::getPrice() const {
    return m_price;
}
void OAIAverages::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIAverages::is_price_Set() const{
    return m_price_isSet;
}

bool OAIAverages::is_price_Valid() const{
    return m_price_isValid;
}

double OAIAverages::getUnits() const {
    return m_units;
}
void OAIAverages::setUnits(const double &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIAverages::is_units_Set() const{
    return m_units_isSet;
}

bool OAIAverages::is_units_Valid() const{
    return m_units_isValid;
}

bool OAIAverages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAverages::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
