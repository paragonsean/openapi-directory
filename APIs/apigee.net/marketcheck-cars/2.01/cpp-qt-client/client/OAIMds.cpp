/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMds::OAIMds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMds::OAIMds() {
    this->initializeModel();
}

OAIMds::~OAIMds() {}

void OAIMds::initializeModel() {

    m_make_isSet = false;
    m_make_isValid = false;

    m_mds_isSet = false;
    m_mds_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_sold_vins_isSet = false;
    m_sold_vins_isValid = false;

    m_total_active_cars_for_ymmt_isSet = false;
    m_total_active_cars_for_ymmt_isValid = false;

    m_total_cars_sold_in_last_45_days_isSet = false;
    m_total_cars_sold_in_last_45_days_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIMds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMds::fromJsonObject(QJsonObject json) {

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_mds_isValid = ::OpenAPI::fromJsonValue(m_mds, json[QString("mds")]);
    m_mds_isSet = !json[QString("mds")].isNull() && m_mds_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_sold_vins_isValid = ::OpenAPI::fromJsonValue(m_sold_vins, json[QString("sold_vins")]);
    m_sold_vins_isSet = !json[QString("sold_vins")].isNull() && m_sold_vins_isValid;

    m_total_active_cars_for_ymmt_isValid = ::OpenAPI::fromJsonValue(m_total_active_cars_for_ymmt, json[QString("total_active_cars_for_ymmt")]);
    m_total_active_cars_for_ymmt_isSet = !json[QString("total_active_cars_for_ymmt")].isNull() && m_total_active_cars_for_ymmt_isValid;

    m_total_cars_sold_in_last_45_days_isValid = ::OpenAPI::fromJsonValue(m_total_cars_sold_in_last_45_days, json[QString("total_cars_sold_in_last_45_days")]);
    m_total_cars_sold_in_last_45_days_isSet = !json[QString("total_cars_sold_in_last_45_days")].isNull() && m_total_cars_sold_in_last_45_days_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIMds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMds::asJsonObject() const {
    QJsonObject obj;
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_mds_isSet) {
        obj.insert(QString("mds"), ::OpenAPI::toJsonValue(m_mds));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_sold_vins.size() > 0) {
        obj.insert(QString("sold_vins"), ::OpenAPI::toJsonValue(m_sold_vins));
    }
    if (m_total_active_cars_for_ymmt_isSet) {
        obj.insert(QString("total_active_cars_for_ymmt"), ::OpenAPI::toJsonValue(m_total_active_cars_for_ymmt));
    }
    if (m_total_cars_sold_in_last_45_days_isSet) {
        obj.insert(QString("total_cars_sold_in_last_45_days"), ::OpenAPI::toJsonValue(m_total_cars_sold_in_last_45_days));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIMds::getMake() const {
    return m_make;
}
void OAIMds::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIMds::is_make_Set() const{
    return m_make_isSet;
}

bool OAIMds::is_make_Valid() const{
    return m_make_isValid;
}

qint32 OAIMds::getMds() const {
    return m_mds;
}
void OAIMds::setMds(const qint32 &mds) {
    m_mds = mds;
    m_mds_isSet = true;
}

bool OAIMds::is_mds_Set() const{
    return m_mds_isSet;
}

bool OAIMds::is_mds_Valid() const{
    return m_mds_isValid;
}

QString OAIMds::getModel() const {
    return m_model;
}
void OAIMds::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIMds::is_model_Set() const{
    return m_model_isSet;
}

bool OAIMds::is_model_Valid() const{
    return m_model_isValid;
}

QList<QString> OAIMds::getSoldVins() const {
    return m_sold_vins;
}
void OAIMds::setSoldVins(const QList<QString> &sold_vins) {
    m_sold_vins = sold_vins;
    m_sold_vins_isSet = true;
}

bool OAIMds::is_sold_vins_Set() const{
    return m_sold_vins_isSet;
}

bool OAIMds::is_sold_vins_Valid() const{
    return m_sold_vins_isValid;
}

qint32 OAIMds::getTotalActiveCarsForYmmt() const {
    return m_total_active_cars_for_ymmt;
}
void OAIMds::setTotalActiveCarsForYmmt(const qint32 &total_active_cars_for_ymmt) {
    m_total_active_cars_for_ymmt = total_active_cars_for_ymmt;
    m_total_active_cars_for_ymmt_isSet = true;
}

bool OAIMds::is_total_active_cars_for_ymmt_Set() const{
    return m_total_active_cars_for_ymmt_isSet;
}

bool OAIMds::is_total_active_cars_for_ymmt_Valid() const{
    return m_total_active_cars_for_ymmt_isValid;
}

qint32 OAIMds::getTotalCarsSoldInLast45Days() const {
    return m_total_cars_sold_in_last_45_days;
}
void OAIMds::setTotalCarsSoldInLast45Days(const qint32 &total_cars_sold_in_last_45_days) {
    m_total_cars_sold_in_last_45_days = total_cars_sold_in_last_45_days;
    m_total_cars_sold_in_last_45_days_isSet = true;
}

bool OAIMds::is_total_cars_sold_in_last_45_days_Set() const{
    return m_total_cars_sold_in_last_45_days_isSet;
}

bool OAIMds::is_total_cars_sold_in_last_45_days_Valid() const{
    return m_total_cars_sold_in_last_45_days_isValid;
}

QString OAIMds::getTrim() const {
    return m_trim;
}
void OAIMds::setTrim(const QString &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIMds::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIMds::is_trim_Valid() const{
    return m_trim_isValid;
}

qint32 OAIMds::getYear() const {
    return m_year;
}
void OAIMds::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIMds::is_year_Set() const{
    return m_year_isSet;
}

bool OAIMds::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIMds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sold_vins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_active_cars_for_ymmt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cars_sold_in_last_45_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
