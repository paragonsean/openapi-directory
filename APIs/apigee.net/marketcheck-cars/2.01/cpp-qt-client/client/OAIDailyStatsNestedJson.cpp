/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDailyStatsNestedJson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDailyStatsNestedJson::OAIDailyStatsNestedJson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDailyStatsNestedJson::OAIDailyStatsNestedJson() {
    this->initializeModel();
}

OAIDailyStatsNestedJson::~OAIDailyStatsNestedJson() {}

void OAIDailyStatsNestedJson::initializeModel() {

    m_interquartile_range_isSet = false;
    m_interquartile_range_isValid = false;

    m_mean_isSet = false;
    m_mean_isValid = false;

    m_median_isSet = false;
    m_median_isValid = false;

    m_population_standard_deviation_isSet = false;
    m_population_standard_deviation_isValid = false;

    m_standard_deviation_isSet = false;
    m_standard_deviation_isValid = false;

    m_trimmed_mean_isSet = false;
    m_trimmed_mean_isValid = false;

    m_variance_isSet = false;
    m_variance_isValid = false;
}

void OAIDailyStatsNestedJson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDailyStatsNestedJson::fromJsonObject(QJsonObject json) {

    m_interquartile_range_isValid = ::OpenAPI::fromJsonValue(m_interquartile_range, json[QString("interquartile_range")]);
    m_interquartile_range_isSet = !json[QString("interquartile_range")].isNull() && m_interquartile_range_isValid;

    m_mean_isValid = ::OpenAPI::fromJsonValue(m_mean, json[QString("mean")]);
    m_mean_isSet = !json[QString("mean")].isNull() && m_mean_isValid;

    m_median_isValid = ::OpenAPI::fromJsonValue(m_median, json[QString("median")]);
    m_median_isSet = !json[QString("median")].isNull() && m_median_isValid;

    m_population_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_population_standard_deviation, json[QString("population_standard_deviation")]);
    m_population_standard_deviation_isSet = !json[QString("population_standard_deviation")].isNull() && m_population_standard_deviation_isValid;

    m_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_standard_deviation, json[QString("standard_deviation")]);
    m_standard_deviation_isSet = !json[QString("standard_deviation")].isNull() && m_standard_deviation_isValid;

    m_trimmed_mean_isValid = ::OpenAPI::fromJsonValue(m_trimmed_mean, json[QString("trimmed_mean")]);
    m_trimmed_mean_isSet = !json[QString("trimmed_mean")].isNull() && m_trimmed_mean_isValid;

    m_variance_isValid = ::OpenAPI::fromJsonValue(m_variance, json[QString("variance")]);
    m_variance_isSet = !json[QString("variance")].isNull() && m_variance_isValid;
}

QString OAIDailyStatsNestedJson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDailyStatsNestedJson::asJsonObject() const {
    QJsonObject obj;
    if (m_interquartile_range_isSet) {
        obj.insert(QString("interquartile_range"), ::OpenAPI::toJsonValue(m_interquartile_range));
    }
    if (m_mean_isSet) {
        obj.insert(QString("mean"), ::OpenAPI::toJsonValue(m_mean));
    }
    if (m_median_isSet) {
        obj.insert(QString("median"), ::OpenAPI::toJsonValue(m_median));
    }
    if (m_population_standard_deviation_isSet) {
        obj.insert(QString("population_standard_deviation"), ::OpenAPI::toJsonValue(m_population_standard_deviation));
    }
    if (m_standard_deviation_isSet) {
        obj.insert(QString("standard_deviation"), ::OpenAPI::toJsonValue(m_standard_deviation));
    }
    if (m_trimmed_mean_isSet) {
        obj.insert(QString("trimmed_mean"), ::OpenAPI::toJsonValue(m_trimmed_mean));
    }
    if (m_variance_isSet) {
        obj.insert(QString("variance"), ::OpenAPI::toJsonValue(m_variance));
    }
    return obj;
}

double OAIDailyStatsNestedJson::getInterquartileRange() const {
    return m_interquartile_range;
}
void OAIDailyStatsNestedJson::setInterquartileRange(const double &interquartile_range) {
    m_interquartile_range = interquartile_range;
    m_interquartile_range_isSet = true;
}

bool OAIDailyStatsNestedJson::is_interquartile_range_Set() const{
    return m_interquartile_range_isSet;
}

bool OAIDailyStatsNestedJson::is_interquartile_range_Valid() const{
    return m_interquartile_range_isValid;
}

double OAIDailyStatsNestedJson::getMean() const {
    return m_mean;
}
void OAIDailyStatsNestedJson::setMean(const double &mean) {
    m_mean = mean;
    m_mean_isSet = true;
}

bool OAIDailyStatsNestedJson::is_mean_Set() const{
    return m_mean_isSet;
}

bool OAIDailyStatsNestedJson::is_mean_Valid() const{
    return m_mean_isValid;
}

double OAIDailyStatsNestedJson::getMedian() const {
    return m_median;
}
void OAIDailyStatsNestedJson::setMedian(const double &median) {
    m_median = median;
    m_median_isSet = true;
}

bool OAIDailyStatsNestedJson::is_median_Set() const{
    return m_median_isSet;
}

bool OAIDailyStatsNestedJson::is_median_Valid() const{
    return m_median_isValid;
}

double OAIDailyStatsNestedJson::getPopulationStandardDeviation() const {
    return m_population_standard_deviation;
}
void OAIDailyStatsNestedJson::setPopulationStandardDeviation(const double &population_standard_deviation) {
    m_population_standard_deviation = population_standard_deviation;
    m_population_standard_deviation_isSet = true;
}

bool OAIDailyStatsNestedJson::is_population_standard_deviation_Set() const{
    return m_population_standard_deviation_isSet;
}

bool OAIDailyStatsNestedJson::is_population_standard_deviation_Valid() const{
    return m_population_standard_deviation_isValid;
}

double OAIDailyStatsNestedJson::getStandardDeviation() const {
    return m_standard_deviation;
}
void OAIDailyStatsNestedJson::setStandardDeviation(const double &standard_deviation) {
    m_standard_deviation = standard_deviation;
    m_standard_deviation_isSet = true;
}

bool OAIDailyStatsNestedJson::is_standard_deviation_Set() const{
    return m_standard_deviation_isSet;
}

bool OAIDailyStatsNestedJson::is_standard_deviation_Valid() const{
    return m_standard_deviation_isValid;
}

double OAIDailyStatsNestedJson::getTrimmedMean() const {
    return m_trimmed_mean;
}
void OAIDailyStatsNestedJson::setTrimmedMean(const double &trimmed_mean) {
    m_trimmed_mean = trimmed_mean;
    m_trimmed_mean_isSet = true;
}

bool OAIDailyStatsNestedJson::is_trimmed_mean_Set() const{
    return m_trimmed_mean_isSet;
}

bool OAIDailyStatsNestedJson::is_trimmed_mean_Valid() const{
    return m_trimmed_mean_isValid;
}

double OAIDailyStatsNestedJson::getVariance() const {
    return m_variance;
}
void OAIDailyStatsNestedJson::setVariance(const double &variance) {
    m_variance = variance;
    m_variance_isSet = true;
}

bool OAIDailyStatsNestedJson::is_variance_Set() const{
    return m_variance_isSet;
}

bool OAIDailyStatsNestedJson::is_variance_Valid() const{
    return m_variance_isValid;
}

bool OAIDailyStatsNestedJson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interquartile_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_median_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_standard_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trimmed_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDailyStatsNestedJson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
