/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFuelEfficiency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFuelEfficiency::OAIFuelEfficiency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFuelEfficiency::OAIFuelEfficiency() {
    this->initializeModel();
}

OAIFuelEfficiency::~OAIFuelEfficiency() {}

void OAIFuelEfficiency::initializeModel() {

    m_annual_miles_isSet = false;
    m_annual_miles_isValid = false;

    m_city_mileage_isSet = false;
    m_city_mileage_isValid = false;

    m_combined_mileage_isSet = false;
    m_combined_mileage_isValid = false;

    m_highway_mileage_isSet = false;
    m_highway_mileage_isValid = false;

    m_monthly_fuel_expense_isSet = false;
    m_monthly_fuel_expense_isValid = false;
}

void OAIFuelEfficiency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFuelEfficiency::fromJsonObject(QJsonObject json) {

    m_annual_miles_isValid = ::OpenAPI::fromJsonValue(m_annual_miles, json[QString("annual_miles")]);
    m_annual_miles_isSet = !json[QString("annual_miles")].isNull() && m_annual_miles_isValid;

    m_city_mileage_isValid = ::OpenAPI::fromJsonValue(m_city_mileage, json[QString("city_mileage")]);
    m_city_mileage_isSet = !json[QString("city_mileage")].isNull() && m_city_mileage_isValid;

    m_combined_mileage_isValid = ::OpenAPI::fromJsonValue(m_combined_mileage, json[QString("combined_mileage")]);
    m_combined_mileage_isSet = !json[QString("combined_mileage")].isNull() && m_combined_mileage_isValid;

    m_highway_mileage_isValid = ::OpenAPI::fromJsonValue(m_highway_mileage, json[QString("highway_mileage")]);
    m_highway_mileage_isSet = !json[QString("highway_mileage")].isNull() && m_highway_mileage_isValid;

    m_monthly_fuel_expense_isValid = ::OpenAPI::fromJsonValue(m_monthly_fuel_expense, json[QString("monthly_fuel_expense")]);
    m_monthly_fuel_expense_isSet = !json[QString("monthly_fuel_expense")].isNull() && m_monthly_fuel_expense_isValid;
}

QString OAIFuelEfficiency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFuelEfficiency::asJsonObject() const {
    QJsonObject obj;
    if (m_annual_miles_isSet) {
        obj.insert(QString("annual_miles"), ::OpenAPI::toJsonValue(m_annual_miles));
    }
    if (m_city_mileage_isSet) {
        obj.insert(QString("city_mileage"), ::OpenAPI::toJsonValue(m_city_mileage));
    }
    if (m_combined_mileage_isSet) {
        obj.insert(QString("combined_mileage"), ::OpenAPI::toJsonValue(m_combined_mileage));
    }
    if (m_highway_mileage_isSet) {
        obj.insert(QString("highway_mileage"), ::OpenAPI::toJsonValue(m_highway_mileage));
    }
    if (m_monthly_fuel_expense_isSet) {
        obj.insert(QString("monthly_fuel_expense"), ::OpenAPI::toJsonValue(m_monthly_fuel_expense));
    }
    return obj;
}

double OAIFuelEfficiency::getAnnualMiles() const {
    return m_annual_miles;
}
void OAIFuelEfficiency::setAnnualMiles(const double &annual_miles) {
    m_annual_miles = annual_miles;
    m_annual_miles_isSet = true;
}

bool OAIFuelEfficiency::is_annual_miles_Set() const{
    return m_annual_miles_isSet;
}

bool OAIFuelEfficiency::is_annual_miles_Valid() const{
    return m_annual_miles_isValid;
}

QString OAIFuelEfficiency::getCityMileage() const {
    return m_city_mileage;
}
void OAIFuelEfficiency::setCityMileage(const QString &city_mileage) {
    m_city_mileage = city_mileage;
    m_city_mileage_isSet = true;
}

bool OAIFuelEfficiency::is_city_mileage_Set() const{
    return m_city_mileage_isSet;
}

bool OAIFuelEfficiency::is_city_mileage_Valid() const{
    return m_city_mileage_isValid;
}

QString OAIFuelEfficiency::getCombinedMileage() const {
    return m_combined_mileage;
}
void OAIFuelEfficiency::setCombinedMileage(const QString &combined_mileage) {
    m_combined_mileage = combined_mileage;
    m_combined_mileage_isSet = true;
}

bool OAIFuelEfficiency::is_combined_mileage_Set() const{
    return m_combined_mileage_isSet;
}

bool OAIFuelEfficiency::is_combined_mileage_Valid() const{
    return m_combined_mileage_isValid;
}

QString OAIFuelEfficiency::getHighwayMileage() const {
    return m_highway_mileage;
}
void OAIFuelEfficiency::setHighwayMileage(const QString &highway_mileage) {
    m_highway_mileage = highway_mileage;
    m_highway_mileage_isSet = true;
}

bool OAIFuelEfficiency::is_highway_mileage_Set() const{
    return m_highway_mileage_isSet;
}

bool OAIFuelEfficiency::is_highway_mileage_Valid() const{
    return m_highway_mileage_isValid;
}

double OAIFuelEfficiency::getMonthlyFuelExpense() const {
    return m_monthly_fuel_expense;
}
void OAIFuelEfficiency::setMonthlyFuelExpense(const double &monthly_fuel_expense) {
    m_monthly_fuel_expense = monthly_fuel_expense;
    m_monthly_fuel_expense_isSet = true;
}

bool OAIFuelEfficiency::is_monthly_fuel_expense_Set() const{
    return m_monthly_fuel_expense_isSet;
}

bool OAIFuelEfficiency::is_monthly_fuel_expense_Valid() const{
    return m_monthly_fuel_expense_isValid;
}

bool OAIFuelEfficiency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annual_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_mileage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_combined_mileage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highway_mileage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_fuel_expense_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFuelEfficiency::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
