/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRankCarListingsApi_H
#define OAI_OAIRankCarListingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICarRankRequest.h"
#include "OAICarRankResponse.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRankCarListingsApi : public QObject {
    Q_OBJECT

public:
    OAIRankCarListingsApi(const int timeOut = 0);
    ~OAIRankCarListingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_car_rank_request OAICarRankRequest [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  append_api_key bool [optional]
    */
    virtual void rankCar(const OAICarRankRequest &oai_car_rank_request, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &append_api_key = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_car_rank_request OAICarRankRequest [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  append_api_key bool [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  include_lease bool [optional]
    * @param[in]  include_finance bool [optional]
    * @param[in]  lease_term QString [optional]
    * @param[in]  lease_down_payment QString [optional]
    * @param[in]  lease_emp QString [optional]
    * @param[in]  finance_loan_term QString [optional]
    * @param[in]  finance_loan_apr QString [optional]
    * @param[in]  finance_emp QString [optional]
    * @param[in]  finance_down_payment QString [optional]
    * @param[in]  finance_down_payment_per QString [optional]
    * @param[in]  car_type QString [optional]
    * @param[in]  carfax_1_owner QString [optional]
    * @param[in]  carfax_clean_title QString [optional]
    * @param[in]  year QString [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  trim QString [optional]
    * @param[in]  vin QString [optional]
    * @param[in]  body_type QString [optional]
    * @param[in]  body_subtype QString [optional]
    * @param[in]  vehicle_type QString [optional]
    * @param[in]  vins QString [optional]
    * @param[in]  taxonomy_vins QString [optional]
    * @param[in]  ymmt QString [optional]
    * @param[in]  match QString [optional]
    * @param[in]  cylinders QString [optional]
    * @param[in]  transmission QString [optional]
    * @param[in]  doors QString [optional]
    * @param[in]  drivetrain QString [optional]
    * @param[in]  exterior_color QString [optional]
    * @param[in]  interior_color QString [optional]
    * @param[in]  base_exterior_color QString [optional]
    * @param[in]  base_interior_color QString [optional]
    * @param[in]  engine QString [optional]
    * @param[in]  engine_size QString [optional]
    * @param[in]  engine_aspiration QString [optional]
    * @param[in]  engine_block QString [optional]
    * @param[in]  highway_mpg_range QString [optional]
    * @param[in]  city_mpg_range QString [optional]
    * @param[in]  miles_range QString [optional]
    * @param[in]  price_range QString [optional]
    * @param[in]  msrp_range QString [optional]
    * @param[in]  dom_range QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  include_non_vin_listings bool [optional]
    * @param[in]  msa_code QString [optional]
    * @param[in]  facets QString [optional]
    * @param[in]  range_facets QString [optional]
    * @param[in]  facet_sort QString [optional]
    * @param[in]  stats QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  plot bool [optional]
    * @param[in]  nodedup bool [optional]
    * @param[in]  dedup bool [optional]
    * @param[in]  owned bool [optional]
    * @param[in]  state QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  trim_o QString [optional]
    * @param[in]  trim_r QString [optional]
    * @param[in]  dom_active_range QString [optional]
    * @param[in]  dom_180_range QString [optional]
    * @param[in]  exclude_certified bool [optional]
    * @param[in]  fuel_type QString [optional]
    * @param[in]  dealer_type QString [optional]
    * @param[in]  photo_links bool [optional]
    * @param[in]  photo_links_cached bool [optional]
    * @param[in]  stock_no QString [optional]
    * @param[in]  last_seen_range QString [optional]
    * @param[in]  first_seen_range QString [optional]
    * @param[in]  first_seen_at_source_range QString [optional]
    * @param[in]  first_seen_at_mc_range QString [optional]
    * @param[in]  last_seen_days QString [optional]
    * @param[in]  first_seen_days QString [optional]
    * @param[in]  first_seen_at_source_days QString [optional]
    * @param[in]  first_seen_at_mc_days QString [optional]
    * @param[in]  inventory_type QString [optional]
    * @param[in]  page double [optional]
    */
    virtual void searchAndRankCar(const OAICarRankRequest &oai_car_rank_request, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &append_api_key = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_lease = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_finance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &lease_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lease_down_payment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lease_emp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finance_loan_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finance_loan_apr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finance_emp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finance_down_payment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finance_down_payment_per = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &car_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &carfax_1_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &carfax_clean_title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body_subtype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vehicle_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vins = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &taxonomy_vins = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ymmt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cylinders = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transmission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &doors = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drivetrain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exterior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_exterior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_interior_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_aspiration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_block = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &highway_mpg_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city_mpg_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &miles_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &price_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &msrp_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dom_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_non_vin_listings = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &msa_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facet_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stats = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &plot = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &nodedup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &dedup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &owned = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim_o = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim_r = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dom_active_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dom_180_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_certified = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &fuel_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &photo_links = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &photo_links_cached = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &stock_no = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_seen_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_at_source_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_at_mc_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_seen_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_at_source_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_at_mc_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void rankCarCallback(OAIHttpRequestWorker *worker);
    void searchAndRankCarCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void rankCarSignal(OAICarRankResponse summary);
    void searchAndRankCarSignal(OAICarRankResponse summary);


    void rankCarSignalFull(OAIHttpRequestWorker *worker, OAICarRankResponse summary);
    void searchAndRankCarSignalFull(OAIHttpRequestWorker *worker, OAICarRankResponse summary);

    Q_DECL_DEPRECATED_X("Use rankCarSignalError() instead")
    void rankCarSignalE(OAICarRankResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rankCarSignalError(OAICarRankResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchAndRankCarSignalError() instead")
    void searchAndRankCarSignalE(OAICarRankResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAndRankCarSignalError(OAICarRankResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use rankCarSignalErrorFull() instead")
    void rankCarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rankCarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchAndRankCarSignalErrorFull() instead")
    void searchAndRankCarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAndRankCarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
