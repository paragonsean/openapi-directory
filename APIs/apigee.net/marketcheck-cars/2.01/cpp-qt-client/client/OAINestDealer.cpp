/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINestDealer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINestDealer::OAINestDealer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINestDealer::OAINestDealer() {
    this->initializeModel();
}

OAINestDealer::~OAINestDealer() {}

void OAINestDealer::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_dealer_type_isSet = false;
    m_dealer_type_isValid = false;

    m_dealership_group_name_isSet = false;
    m_dealership_group_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_msa_code_isSet = false;
    m_msa_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_seller_email_isSet = false;
    m_seller_email_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAINestDealer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINestDealer::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_dealer_type_isValid = ::OpenAPI::fromJsonValue(m_dealer_type, json[QString("dealer_type")]);
    m_dealer_type_isSet = !json[QString("dealer_type")].isNull() && m_dealer_type_isValid;

    m_dealership_group_name_isValid = ::OpenAPI::fromJsonValue(m_dealership_group_name, json[QString("dealership_group_name")]);
    m_dealership_group_name_isSet = !json[QString("dealership_group_name")].isNull() && m_dealership_group_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_msa_code_isValid = ::OpenAPI::fromJsonValue(m_msa_code, json[QString("msa_code")]);
    m_msa_code_isSet = !json[QString("msa_code")].isNull() && m_msa_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_seller_email_isValid = ::OpenAPI::fromJsonValue(m_seller_email, json[QString("seller_email")]);
    m_seller_email_isSet = !json[QString("seller_email")].isNull() && m_seller_email_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAINestDealer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINestDealer::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_dealer_type_isSet) {
        obj.insert(QString("dealer_type"), ::OpenAPI::toJsonValue(m_dealer_type));
    }
    if (m_dealership_group_name_isSet) {
        obj.insert(QString("dealership_group_name"), ::OpenAPI::toJsonValue(m_dealership_group_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_msa_code_isSet) {
        obj.insert(QString("msa_code"), ::OpenAPI::toJsonValue(m_msa_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_seller_email_isSet) {
        obj.insert(QString("seller_email"), ::OpenAPI::toJsonValue(m_seller_email));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAINestDealer::getCity() const {
    return m_city;
}
void OAINestDealer::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAINestDealer::is_city_Set() const{
    return m_city_isSet;
}

bool OAINestDealer::is_city_Valid() const{
    return m_city_isValid;
}

QString OAINestDealer::getCountry() const {
    return m_country;
}
void OAINestDealer::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAINestDealer::is_country_Set() const{
    return m_country_isSet;
}

bool OAINestDealer::is_country_Valid() const{
    return m_country_isValid;
}

QString OAINestDealer::getCounty() const {
    return m_county;
}
void OAINestDealer::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAINestDealer::is_county_Set() const{
    return m_county_isSet;
}

bool OAINestDealer::is_county_Valid() const{
    return m_county_isValid;
}

QString OAINestDealer::getDealerType() const {
    return m_dealer_type;
}
void OAINestDealer::setDealerType(const QString &dealer_type) {
    m_dealer_type = dealer_type;
    m_dealer_type_isSet = true;
}

bool OAINestDealer::is_dealer_type_Set() const{
    return m_dealer_type_isSet;
}

bool OAINestDealer::is_dealer_type_Valid() const{
    return m_dealer_type_isValid;
}

QString OAINestDealer::getDealershipGroupName() const {
    return m_dealership_group_name;
}
void OAINestDealer::setDealershipGroupName(const QString &dealership_group_name) {
    m_dealership_group_name = dealership_group_name;
    m_dealership_group_name_isSet = true;
}

bool OAINestDealer::is_dealership_group_name_Set() const{
    return m_dealership_group_name_isSet;
}

bool OAINestDealer::is_dealership_group_name_Valid() const{
    return m_dealership_group_name_isValid;
}

qint32 OAINestDealer::getId() const {
    return m_id;
}
void OAINestDealer::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINestDealer::is_id_Set() const{
    return m_id_isSet;
}

bool OAINestDealer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINestDealer::getLatitude() const {
    return m_latitude;
}
void OAINestDealer::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAINestDealer::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAINestDealer::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAINestDealer::getLongitude() const {
    return m_longitude;
}
void OAINestDealer::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAINestDealer::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAINestDealer::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAINestDealer::getMsaCode() const {
    return m_msa_code;
}
void OAINestDealer::setMsaCode(const QString &msa_code) {
    m_msa_code = msa_code;
    m_msa_code_isSet = true;
}

bool OAINestDealer::is_msa_code_Set() const{
    return m_msa_code_isSet;
}

bool OAINestDealer::is_msa_code_Valid() const{
    return m_msa_code_isValid;
}

QString OAINestDealer::getName() const {
    return m_name;
}
void OAINestDealer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINestDealer::is_name_Set() const{
    return m_name_isSet;
}

bool OAINestDealer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINestDealer::getPhone() const {
    return m_phone;
}
void OAINestDealer::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAINestDealer::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAINestDealer::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAINestDealer::getSellerEmail() const {
    return m_seller_email;
}
void OAINestDealer::setSellerEmail(const QString &seller_email) {
    m_seller_email = seller_email;
    m_seller_email_isSet = true;
}

bool OAINestDealer::is_seller_email_Set() const{
    return m_seller_email_isSet;
}

bool OAINestDealer::is_seller_email_Valid() const{
    return m_seller_email_isValid;
}

QString OAINestDealer::getState() const {
    return m_state;
}
void OAINestDealer::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAINestDealer::is_state_Set() const{
    return m_state_isSet;
}

bool OAINestDealer::is_state_Valid() const{
    return m_state_isValid;
}

QString OAINestDealer::getStreet() const {
    return m_street;
}
void OAINestDealer::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAINestDealer::is_street_Set() const{
    return m_street_isSet;
}

bool OAINestDealer::is_street_Valid() const{
    return m_street_isValid;
}

QString OAINestDealer::getWebsite() const {
    return m_website;
}
void OAINestDealer::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAINestDealer::is_website_Set() const{
    return m_website_isSet;
}

bool OAINestDealer::is_website_Valid() const{
    return m_website_isValid;
}

QString OAINestDealer::getZip() const {
    return m_zip;
}
void OAINestDealer::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAINestDealer::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAINestDealer::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAINestDealer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealership_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msa_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINestDealer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
