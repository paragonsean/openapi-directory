/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListingMedia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListingMedia::OAIListingMedia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListingMedia::OAIListingMedia() {
    this->initializeModel();
}

OAIListingMedia::~OAIListingMedia() {}

void OAIListingMedia::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_photo_links_isSet = false;
    m_photo_links_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;
}

void OAIListingMedia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListingMedia::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_photo_links_isValid = ::OpenAPI::fromJsonValue(m_photo_links, json[QString("photo_links")]);
    m_photo_links_isSet = !json[QString("photo_links")].isNull() && m_photo_links_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photo_url")]);
    m_photo_url_isSet = !json[QString("photo_url")].isNull() && m_photo_url_isValid;
}

QString OAIListingMedia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListingMedia::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_photo_links.size() > 0) {
        obj.insert(QString("photo_links"), ::OpenAPI::toJsonValue(m_photo_links));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photo_url"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    return obj;
}

QString OAIListingMedia::getId() const {
    return m_id;
}
void OAIListingMedia::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIListingMedia::is_id_Set() const{
    return m_id_isSet;
}

bool OAIListingMedia::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIListingMedia::getPhotoLinks() const {
    return m_photo_links;
}
void OAIListingMedia::setPhotoLinks(const QList<QString> &photo_links) {
    m_photo_links = photo_links;
    m_photo_links_isSet = true;
}

bool OAIListingMedia::is_photo_links_Set() const{
    return m_photo_links_isSet;
}

bool OAIListingMedia::is_photo_links_Valid() const{
    return m_photo_links_isValid;
}

QString OAIListingMedia::getPhotoUrl() const {
    return m_photo_url;
}
void OAIListingMedia::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIListingMedia::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIListingMedia::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

bool OAIListingMedia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListingMedia::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
