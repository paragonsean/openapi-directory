/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUKSearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUKSearchResponse::OAIUKSearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUKSearchResponse::OAIUKSearchResponse() {
    this->initializeModel();
}

OAIUKSearchResponse::~OAIUKSearchResponse() {}

void OAIUKSearchResponse::initializeModel() {

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_listings_isSet = false;
    m_listings_isValid = false;

    m_num_found_isSet = false;
    m_num_found_isValid = false;

    m_range_facets_isSet = false;
    m_range_facets_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAIUKSearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUKSearchResponse::fromJsonObject(QJsonObject json) {

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_listings_isValid = ::OpenAPI::fromJsonValue(m_listings, json[QString("listings")]);
    m_listings_isSet = !json[QString("listings")].isNull() && m_listings_isValid;

    m_num_found_isValid = ::OpenAPI::fromJsonValue(m_num_found, json[QString("num_found")]);
    m_num_found_isSet = !json[QString("num_found")].isNull() && m_num_found_isValid;

    m_range_facets_isValid = ::OpenAPI::fromJsonValue(m_range_facets, json[QString("range_facets")]);
    m_range_facets_isSet = !json[QString("range_facets")].isNull() && m_range_facets_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAIUKSearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUKSearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_facets.isSet()) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_listings.size() > 0) {
        obj.insert(QString("listings"), ::OpenAPI::toJsonValue(m_listings));
    }
    if (m_num_found_isSet) {
        obj.insert(QString("num_found"), ::OpenAPI::toJsonValue(m_num_found));
    }
    if (m_range_facets.isSet()) {
        obj.insert(QString("range_facets"), ::OpenAPI::toJsonValue(m_range_facets));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

OAIUKCarSearchFacets OAIUKSearchResponse::getFacets() const {
    return m_facets;
}
void OAIUKSearchResponse::setFacets(const OAIUKCarSearchFacets &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIUKSearchResponse::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIUKSearchResponse::is_facets_Valid() const{
    return m_facets_isValid;
}

QList<OAIUKBaseListing> OAIUKSearchResponse::getListings() const {
    return m_listings;
}
void OAIUKSearchResponse::setListings(const QList<OAIUKBaseListing> &listings) {
    m_listings = listings;
    m_listings_isSet = true;
}

bool OAIUKSearchResponse::is_listings_Set() const{
    return m_listings_isSet;
}

bool OAIUKSearchResponse::is_listings_Valid() const{
    return m_listings_isValid;
}

qint32 OAIUKSearchResponse::getNumFound() const {
    return m_num_found;
}
void OAIUKSearchResponse::setNumFound(const qint32 &num_found) {
    m_num_found = num_found;
    m_num_found_isSet = true;
}

bool OAIUKSearchResponse::is_num_found_Set() const{
    return m_num_found_isSet;
}

bool OAIUKSearchResponse::is_num_found_Valid() const{
    return m_num_found_isValid;
}

OAICarSearchRangeFacets OAIUKSearchResponse::getRangeFacets() const {
    return m_range_facets;
}
void OAIUKSearchResponse::setRangeFacets(const OAICarSearchRangeFacets &range_facets) {
    m_range_facets = range_facets;
    m_range_facets_isSet = true;
}

bool OAIUKSearchResponse::is_range_facets_Set() const{
    return m_range_facets_isSet;
}

bool OAIUKSearchResponse::is_range_facets_Valid() const{
    return m_range_facets_isValid;
}

OAICarSearchStats OAIUKSearchResponse::getStats() const {
    return m_stats;
}
void OAIUKSearchResponse::setStats(const OAICarSearchStats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIUKSearchResponse::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIUKSearchResponse::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIUKSearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_listings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_facets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUKSearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
