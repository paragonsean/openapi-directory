/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMotorcycleSearchFacets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMotorcycleSearchFacets::OAIMotorcycleSearchFacets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMotorcycleSearchFacets::OAIMotorcycleSearchFacets() {
    this->initializeModel();
}

OAIMotorcycleSearchFacets::~OAIMotorcycleSearchFacets() {}

void OAIMotorcycleSearchFacets::initializeModel() {

    m_body_type_isSet = false;
    m_body_type_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_cylinders_isSet = false;
    m_cylinders_isValid = false;

    m_dealer_id_isSet = false;
    m_dealer_id_isValid = false;

    m_drivetrain_isSet = false;
    m_drivetrain_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_fuel_type_isSet = false;
    m_fuel_type_isValid = false;

    m_inventory_type_isSet = false;
    m_inventory_type_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_seller_name_isSet = false;
    m_seller_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_transmission_isSet = false;
    m_transmission_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;

    m_vehicle_type_isSet = false;
    m_vehicle_type_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIMotorcycleSearchFacets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMotorcycleSearchFacets::fromJsonObject(QJsonObject json) {

    m_body_type_isValid = ::OpenAPI::fromJsonValue(m_body_type, json[QString("body_type")]);
    m_body_type_isSet = !json[QString("body_type")].isNull() && m_body_type_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_cylinders_isValid = ::OpenAPI::fromJsonValue(m_cylinders, json[QString("cylinders")]);
    m_cylinders_isSet = !json[QString("cylinders")].isNull() && m_cylinders_isValid;

    m_dealer_id_isValid = ::OpenAPI::fromJsonValue(m_dealer_id, json[QString("dealer_id")]);
    m_dealer_id_isSet = !json[QString("dealer_id")].isNull() && m_dealer_id_isValid;

    m_drivetrain_isValid = ::OpenAPI::fromJsonValue(m_drivetrain, json[QString("drivetrain")]);
    m_drivetrain_isSet = !json[QString("drivetrain")].isNull() && m_drivetrain_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_fuel_type_isValid = ::OpenAPI::fromJsonValue(m_fuel_type, json[QString("fuel_type")]);
    m_fuel_type_isSet = !json[QString("fuel_type")].isNull() && m_fuel_type_isValid;

    m_inventory_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_type, json[QString("inventory_type")]);
    m_inventory_type_isSet = !json[QString("inventory_type")].isNull() && m_inventory_type_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_seller_name_isValid = ::OpenAPI::fromJsonValue(m_seller_name, json[QString("seller_name")]);
    m_seller_name_isSet = !json[QString("seller_name")].isNull() && m_seller_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_transmission_isValid = ::OpenAPI::fromJsonValue(m_transmission, json[QString("transmission")]);
    m_transmission_isSet = !json[QString("transmission")].isNull() && m_transmission_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;

    m_vehicle_type_isValid = ::OpenAPI::fromJsonValue(m_vehicle_type, json[QString("vehicle_type")]);
    m_vehicle_type_isSet = !json[QString("vehicle_type")].isNull() && m_vehicle_type_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIMotorcycleSearchFacets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMotorcycleSearchFacets::asJsonObject() const {
    QJsonObject obj;
    if (m_body_type.size() > 0) {
        obj.insert(QString("body_type"), ::OpenAPI::toJsonValue(m_body_type));
    }
    if (m_city.size() > 0) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_color.size() > 0) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_cylinders.size() > 0) {
        obj.insert(QString("cylinders"), ::OpenAPI::toJsonValue(m_cylinders));
    }
    if (m_dealer_id.size() > 0) {
        obj.insert(QString("dealer_id"), ::OpenAPI::toJsonValue(m_dealer_id));
    }
    if (m_drivetrain.size() > 0) {
        obj.insert(QString("drivetrain"), ::OpenAPI::toJsonValue(m_drivetrain));
    }
    if (m_engine.size() > 0) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_fuel_type.size() > 0) {
        obj.insert(QString("fuel_type"), ::OpenAPI::toJsonValue(m_fuel_type));
    }
    if (m_inventory_type.size() > 0) {
        obj.insert(QString("inventory_type"), ::OpenAPI::toJsonValue(m_inventory_type));
    }
    if (m_make.size() > 0) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model.size() > 0) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_seller_name.size() > 0) {
        obj.insert(QString("seller_name"), ::OpenAPI::toJsonValue(m_seller_name));
    }
    if (m_source.size() > 0) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state.size() > 0) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_transmission.size() > 0) {
        obj.insert(QString("transmission"), ::OpenAPI::toJsonValue(m_transmission));
    }
    if (m_trim.size() > 0) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    if (m_vehicle_type.size() > 0) {
        obj.insert(QString("vehicle_type"), ::OpenAPI::toJsonValue(m_vehicle_type));
    }
    if (m_year.size() > 0) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getBodyType() const {
    return m_body_type;
}
void OAIMotorcycleSearchFacets::setBodyType(const QList<OAIFacetItem> &body_type) {
    m_body_type = body_type;
    m_body_type_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_body_type_Set() const{
    return m_body_type_isSet;
}

bool OAIMotorcycleSearchFacets::is_body_type_Valid() const{
    return m_body_type_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getCity() const {
    return m_city;
}
void OAIMotorcycleSearchFacets::setCity(const QList<OAIFacetItem> &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_city_Set() const{
    return m_city_isSet;
}

bool OAIMotorcycleSearchFacets::is_city_Valid() const{
    return m_city_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getColor() const {
    return m_color;
}
void OAIMotorcycleSearchFacets::setColor(const QList<OAIFacetItem> &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_color_Set() const{
    return m_color_isSet;
}

bool OAIMotorcycleSearchFacets::is_color_Valid() const{
    return m_color_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getCylinders() const {
    return m_cylinders;
}
void OAIMotorcycleSearchFacets::setCylinders(const QList<OAIFacetItem> &cylinders) {
    m_cylinders = cylinders;
    m_cylinders_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_cylinders_Set() const{
    return m_cylinders_isSet;
}

bool OAIMotorcycleSearchFacets::is_cylinders_Valid() const{
    return m_cylinders_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getDealerId() const {
    return m_dealer_id;
}
void OAIMotorcycleSearchFacets::setDealerId(const QList<OAIFacetItem> &dealer_id) {
    m_dealer_id = dealer_id;
    m_dealer_id_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_dealer_id_Set() const{
    return m_dealer_id_isSet;
}

bool OAIMotorcycleSearchFacets::is_dealer_id_Valid() const{
    return m_dealer_id_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getDrivetrain() const {
    return m_drivetrain;
}
void OAIMotorcycleSearchFacets::setDrivetrain(const QList<OAIFacetItem> &drivetrain) {
    m_drivetrain = drivetrain;
    m_drivetrain_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_drivetrain_Set() const{
    return m_drivetrain_isSet;
}

bool OAIMotorcycleSearchFacets::is_drivetrain_Valid() const{
    return m_drivetrain_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getEngine() const {
    return m_engine;
}
void OAIMotorcycleSearchFacets::setEngine(const QList<OAIFacetItem> &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIMotorcycleSearchFacets::is_engine_Valid() const{
    return m_engine_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getFuelType() const {
    return m_fuel_type;
}
void OAIMotorcycleSearchFacets::setFuelType(const QList<OAIFacetItem> &fuel_type) {
    m_fuel_type = fuel_type;
    m_fuel_type_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_fuel_type_Set() const{
    return m_fuel_type_isSet;
}

bool OAIMotorcycleSearchFacets::is_fuel_type_Valid() const{
    return m_fuel_type_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getInventoryType() const {
    return m_inventory_type;
}
void OAIMotorcycleSearchFacets::setInventoryType(const QList<OAIFacetItem> &inventory_type) {
    m_inventory_type = inventory_type;
    m_inventory_type_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_inventory_type_Set() const{
    return m_inventory_type_isSet;
}

bool OAIMotorcycleSearchFacets::is_inventory_type_Valid() const{
    return m_inventory_type_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getMake() const {
    return m_make;
}
void OAIMotorcycleSearchFacets::setMake(const QList<OAIFacetItem> &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_make_Set() const{
    return m_make_isSet;
}

bool OAIMotorcycleSearchFacets::is_make_Valid() const{
    return m_make_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getModel() const {
    return m_model;
}
void OAIMotorcycleSearchFacets::setModel(const QList<OAIFacetItem> &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_model_Set() const{
    return m_model_isSet;
}

bool OAIMotorcycleSearchFacets::is_model_Valid() const{
    return m_model_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getSellerName() const {
    return m_seller_name;
}
void OAIMotorcycleSearchFacets::setSellerName(const QList<OAIFacetItem> &seller_name) {
    m_seller_name = seller_name;
    m_seller_name_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_seller_name_Set() const{
    return m_seller_name_isSet;
}

bool OAIMotorcycleSearchFacets::is_seller_name_Valid() const{
    return m_seller_name_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getSource() const {
    return m_source;
}
void OAIMotorcycleSearchFacets::setSource(const QList<OAIFacetItem> &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMotorcycleSearchFacets::is_source_Valid() const{
    return m_source_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getState() const {
    return m_state;
}
void OAIMotorcycleSearchFacets::setState(const QList<OAIFacetItem> &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMotorcycleSearchFacets::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getTransmission() const {
    return m_transmission;
}
void OAIMotorcycleSearchFacets::setTransmission(const QList<OAIFacetItem> &transmission) {
    m_transmission = transmission;
    m_transmission_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_transmission_Set() const{
    return m_transmission_isSet;
}

bool OAIMotorcycleSearchFacets::is_transmission_Valid() const{
    return m_transmission_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getTrim() const {
    return m_trim;
}
void OAIMotorcycleSearchFacets::setTrim(const QList<OAIFacetItem> &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIMotorcycleSearchFacets::is_trim_Valid() const{
    return m_trim_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getVehicleType() const {
    return m_vehicle_type;
}
void OAIMotorcycleSearchFacets::setVehicleType(const QList<OAIFacetItem> &vehicle_type) {
    m_vehicle_type = vehicle_type;
    m_vehicle_type_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_vehicle_type_Set() const{
    return m_vehicle_type_isSet;
}

bool OAIMotorcycleSearchFacets::is_vehicle_type_Valid() const{
    return m_vehicle_type_isValid;
}

QList<OAIFacetItem> OAIMotorcycleSearchFacets::getYear() const {
    return m_year;
}
void OAIMotorcycleSearchFacets::setYear(const QList<OAIFacetItem> &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIMotorcycleSearchFacets::is_year_Set() const{
    return m_year_isSet;
}

bool OAIMotorcycleSearchFacets::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIMotorcycleSearchFacets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cylinders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_drivetrain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_make.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMotorcycleSearchFacets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
