/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOEMIncentiveSearchApi_H
#define OAI_OAIOEMIncentiveSearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAISearchResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOEMIncentiveSearchApi : public QObject {
    Q_OBJECT

public:
    OAIOEMIncentiveSearchApi(const int timeOut = 0);
    ~OAIOEMIncentiveSearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [optional]
    * @param[in]  offer_type QString [optional]
    * @param[in]  year QString [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  trim QString [optional]
    * @param[in]  msrp QString [optional]
    * @param[in]  apr QString [optional]
    * @param[in]  monthly QString [optional]
    * @param[in]  monthly_per_thousand QString [optional]
    * @param[in]  down_payment QString [optional]
    * @param[in]  due_at_signing QString [optional]
    * @param[in]  security_deposit QString [optional]
    * @param[in]  disposition_fee QString [optional]
    * @param[in]  acquisition_fee QString [optional]
    * @param[in]  duration QString [optional]
    * @param[in]  dealer_contribution QString [optional]
    * @param[in]  mileage_charge QString [optional]
    * @param[in]  mileage_charge_limit QString [optional]
    * @param[in]  cashback_amount QString [optional]
    * @param[in]  cashback_target_group QString [optional]
    * @param[in]  lease_end_purchase_option QString [optional]
    * @param[in]  net_capitalised_cost QString [optional]
    * @param[in]  gross_capitalised_cost QString [optional]
    * @param[in]  total_monthly_payment QString [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  search_text QString [optional]
    * @param[in]  last_seen_range QString [optional]
    * @param[in]  first_seen_range QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facets QString [optional]
    * @param[in]  range_facets QString [optional]
    * @param[in]  facet_sort QString [optional]
    * @param[in]  stats QString [optional]
    */
    virtual void oemSearch(const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &msrp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &monthly = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &monthly_per_thousand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &down_payment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &due_at_signing = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &security_deposit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disposition_fee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &acquisition_fee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &duration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_contribution = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mileage_charge = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mileage_charge_limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cashback_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cashback_target_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lease_end_purchase_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &net_capitalised_cost = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gross_capitalised_cost = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &total_monthly_payment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_seen_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_seen_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_facets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facet_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stats = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void oemSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void oemSearchSignal(OAISearchResponse summary);


    void oemSearchSignalFull(OAIHttpRequestWorker *worker, OAISearchResponse summary);

    Q_DECL_DEPRECATED_X("Use oemSearchSignalError() instead")
    void oemSearchSignalE(OAISearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oemSearchSignalError(OAISearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use oemSearchSignalErrorFull() instead")
    void oemSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oemSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
