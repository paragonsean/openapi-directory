/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompetitorsPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompetitorsPoint::OAICompetitorsPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompetitorsPoint::OAICompetitorsPoint() {
    this->initializeModel();
}

OAICompetitorsPoint::~OAICompetitorsPoint() {}

void OAICompetitorsPoint::initializeModel() {

    m_current_car_isSet = false;
    m_current_car_isValid = false;

    m_same_car_models_isSet = false;
    m_same_car_models_isValid = false;

    m_similar_car_models_isSet = false;
    m_similar_car_models_isValid = false;
}

void OAICompetitorsPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompetitorsPoint::fromJsonObject(QJsonObject json) {

    m_current_car_isValid = ::OpenAPI::fromJsonValue(m_current_car, json[QString("current_car")]);
    m_current_car_isSet = !json[QString("current_car")].isNull() && m_current_car_isValid;

    m_same_car_models_isValid = ::OpenAPI::fromJsonValue(m_same_car_models, json[QString("same_car_models")]);
    m_same_car_models_isSet = !json[QString("same_car_models")].isNull() && m_same_car_models_isValid;

    m_similar_car_models_isValid = ::OpenAPI::fromJsonValue(m_similar_car_models, json[QString("similar_car_models")]);
    m_similar_car_models_isSet = !json[QString("similar_car_models")].isNull() && m_similar_car_models_isValid;
}

QString OAICompetitorsPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompetitorsPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_current_car.isSet()) {
        obj.insert(QString("current_car"), ::OpenAPI::toJsonValue(m_current_car));
    }
    if (m_same_car_models.size() > 0) {
        obj.insert(QString("same_car_models"), ::OpenAPI::toJsonValue(m_same_car_models));
    }
    if (m_similar_car_models.size() > 0) {
        obj.insert(QString("similar_car_models"), ::OpenAPI::toJsonValue(m_similar_car_models));
    }
    return obj;
}

OAICompetitorsCarDetails OAICompetitorsPoint::getCurrentCar() const {
    return m_current_car;
}
void OAICompetitorsPoint::setCurrentCar(const OAICompetitorsCarDetails &current_car) {
    m_current_car = current_car;
    m_current_car_isSet = true;
}

bool OAICompetitorsPoint::is_current_car_Set() const{
    return m_current_car_isSet;
}

bool OAICompetitorsPoint::is_current_car_Valid() const{
    return m_current_car_isValid;
}

QList<OAICompetitorsSameCars> OAICompetitorsPoint::getSameCarModels() const {
    return m_same_car_models;
}
void OAICompetitorsPoint::setSameCarModels(const QList<OAICompetitorsSameCars> &same_car_models) {
    m_same_car_models = same_car_models;
    m_same_car_models_isSet = true;
}

bool OAICompetitorsPoint::is_same_car_models_Set() const{
    return m_same_car_models_isSet;
}

bool OAICompetitorsPoint::is_same_car_models_Valid() const{
    return m_same_car_models_isValid;
}

QList<OAICompetitorsSimilarCars> OAICompetitorsPoint::getSimilarCarModels() const {
    return m_similar_car_models;
}
void OAICompetitorsPoint::setSimilarCarModels(const QList<OAICompetitorsSimilarCars> &similar_car_models) {
    m_similar_car_models = similar_car_models;
    m_similar_car_models_isSet = true;
}

bool OAICompetitorsPoint::is_similar_car_models_Set() const{
    return m_similar_car_models_isSet;
}

bool OAICompetitorsPoint::is_similar_car_models_Valid() const{
    return m_similar_car_models_isValid;
}

bool OAICompetitorsPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_car.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_same_car_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_similar_car_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompetitorsPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
