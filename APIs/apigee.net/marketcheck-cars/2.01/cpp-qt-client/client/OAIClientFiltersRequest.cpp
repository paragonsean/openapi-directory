/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientFiltersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientFiltersRequest::OAIClientFiltersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientFiltersRequest::OAIClientFiltersRequest() {
    this->initializeModel();
}

OAIClientFiltersRequest::~OAIClientFiltersRequest() {}

void OAIClientFiltersRequest::initializeModel() {

    m_list_isSet = false;
    m_list_isValid = false;
}

void OAIClientFiltersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientFiltersRequest::fromJsonObject(QJsonObject json) {

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("list")]);
    m_list_isSet = !json[QString("list")].isNull() && m_list_isValid;
}

QString OAIClientFiltersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientFiltersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_list.size() > 0) {
        obj.insert(QString("list"), ::OpenAPI::toJsonValue(m_list));
    }
    return obj;
}

QList<QString> OAIClientFiltersRequest::getList() const {
    return m_list;
}
void OAIClientFiltersRequest::setList(const QList<QString> &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIClientFiltersRequest::is_list_Set() const{
    return m_list_isSet;
}

bool OAIClientFiltersRequest::is_list_Valid() const{
    return m_list_isValid;
}

bool OAIClientFiltersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientFiltersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_list_isValid && true;
}

} // namespace OpenAPI
