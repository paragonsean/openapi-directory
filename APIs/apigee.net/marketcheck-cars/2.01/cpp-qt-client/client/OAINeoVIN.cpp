/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINeoVIN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINeoVIN::OAINeoVIN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINeoVIN::OAINeoVIN() {
    this->initializeModel();
}

OAINeoVIN::~OAINeoVIN() {}

void OAINeoVIN::initializeModel() {

    m_available_options_details_isSet = false;
    m_available_options_details_isValid = false;

    m_body_subtype_isSet = false;
    m_body_subtype_isValid = false;

    m_body_type_isSet = false;
    m_body_type_isValid = false;

    m_city_mpg_isSet = false;
    m_city_mpg_isValid = false;

    m_combined_msrp_isSet = false;
    m_combined_msrp_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_at_date_isSet = false;
    m_created_at_date_isValid = false;

    m_decode_version_isSet = false;
    m_decode_version_isValid = false;

    m_delivery_charges_isSet = false;
    m_delivery_charges_isValid = false;

    m_doors_isSet = false;
    m_doors_isValid = false;

    m_drivetrain_isSet = false;
    m_drivetrain_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_exterior_color_isSet = false;
    m_exterior_color_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_fuel_type_isSet = false;
    m_fuel_type_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_highway_mpg_isSet = false;
    m_highway_mpg_isValid = false;

    m_installed_equipment_isSet = false;
    m_installed_equipment_isValid = false;

    m_installed_options_details_isSet = false;
    m_installed_options_details_isValid = false;

    m_installed_options_msrp_isSet = false;
    m_installed_options_msrp_isValid = false;

    m_interior_color_isSet = false;
    m_interior_color_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_listing_confidence_isSet = false;
    m_listing_confidence_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_manufacturer_code_isSet = false;
    m_manufacturer_code_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_msrp_isSet = false;
    m_msrp_isValid = false;

    m_options_packages_isSet = false;
    m_options_packages_isValid = false;

    m_package_code_isSet = false;
    m_package_code_isValid = false;

    m_package_description_isSet = false;
    m_package_description_isValid = false;

    m_seating_capacity_isSet = false;
    m_seating_capacity_isValid = false;

    m_squish_vin_isSet = false;
    m_squish_vin_isValid = false;

    m_transmission_isSet = false;
    m_transmission_isValid = false;

    m_transmission_confidence_isSet = false;
    m_transmission_confidence_isValid = false;

    m_transmission_description_isSet = false;
    m_transmission_description_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;

    m_trim_confidence_isSet = false;
    m_trim_confidence_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_at_date_isSet = false;
    m_updated_at_date_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_version_confidence_isSet = false;
    m_version_confidence_isValid = false;

    m_vin_isSet = false;
    m_vin_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAINeoVIN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINeoVIN::fromJsonObject(QJsonObject json) {

    m_available_options_details_isValid = ::OpenAPI::fromJsonValue(m_available_options_details, json[QString("available_options_details")]);
    m_available_options_details_isSet = !json[QString("available_options_details")].isNull() && m_available_options_details_isValid;

    m_body_subtype_isValid = ::OpenAPI::fromJsonValue(m_body_subtype, json[QString("body_subtype")]);
    m_body_subtype_isSet = !json[QString("body_subtype")].isNull() && m_body_subtype_isValid;

    m_body_type_isValid = ::OpenAPI::fromJsonValue(m_body_type, json[QString("body_type")]);
    m_body_type_isSet = !json[QString("body_type")].isNull() && m_body_type_isValid;

    m_city_mpg_isValid = ::OpenAPI::fromJsonValue(m_city_mpg, json[QString("city_mpg")]);
    m_city_mpg_isSet = !json[QString("city_mpg")].isNull() && m_city_mpg_isValid;

    m_combined_msrp_isValid = ::OpenAPI::fromJsonValue(m_combined_msrp, json[QString("combined_msrp")]);
    m_combined_msrp_isSet = !json[QString("combined_msrp")].isNull() && m_combined_msrp_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_at_date_isValid = ::OpenAPI::fromJsonValue(m_created_at_date, json[QString("created_at_date")]);
    m_created_at_date_isSet = !json[QString("created_at_date")].isNull() && m_created_at_date_isValid;

    m_decode_version_isValid = ::OpenAPI::fromJsonValue(m_decode_version, json[QString("decode_version")]);
    m_decode_version_isSet = !json[QString("decode_version")].isNull() && m_decode_version_isValid;

    m_delivery_charges_isValid = ::OpenAPI::fromJsonValue(m_delivery_charges, json[QString("delivery_charges")]);
    m_delivery_charges_isSet = !json[QString("delivery_charges")].isNull() && m_delivery_charges_isValid;

    m_doors_isValid = ::OpenAPI::fromJsonValue(m_doors, json[QString("doors")]);
    m_doors_isSet = !json[QString("doors")].isNull() && m_doors_isValid;

    m_drivetrain_isValid = ::OpenAPI::fromJsonValue(m_drivetrain, json[QString("drivetrain")]);
    m_drivetrain_isSet = !json[QString("drivetrain")].isNull() && m_drivetrain_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_exterior_color_isValid = ::OpenAPI::fromJsonValue(m_exterior_color, json[QString("exterior_color")]);
    m_exterior_color_isSet = !json[QString("exterior_color")].isNull() && m_exterior_color_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_fuel_type_isValid = ::OpenAPI::fromJsonValue(m_fuel_type, json[QString("fuel_type")]);
    m_fuel_type_isSet = !json[QString("fuel_type")].isNull() && m_fuel_type_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_highway_mpg_isValid = ::OpenAPI::fromJsonValue(m_highway_mpg, json[QString("highway_mpg")]);
    m_highway_mpg_isSet = !json[QString("highway_mpg")].isNull() && m_highway_mpg_isValid;

    m_installed_equipment_isValid = ::OpenAPI::fromJsonValue(m_installed_equipment, json[QString("installed_equipment")]);
    m_installed_equipment_isSet = !json[QString("installed_equipment")].isNull() && m_installed_equipment_isValid;

    m_installed_options_details_isValid = ::OpenAPI::fromJsonValue(m_installed_options_details, json[QString("installed_options_details")]);
    m_installed_options_details_isSet = !json[QString("installed_options_details")].isNull() && m_installed_options_details_isValid;

    m_installed_options_msrp_isValid = ::OpenAPI::fromJsonValue(m_installed_options_msrp, json[QString("installed_options_msrp")]);
    m_installed_options_msrp_isSet = !json[QString("installed_options_msrp")].isNull() && m_installed_options_msrp_isValid;

    m_interior_color_isValid = ::OpenAPI::fromJsonValue(m_interior_color, json[QString("interior_color")]);
    m_interior_color_isSet = !json[QString("interior_color")].isNull() && m_interior_color_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_listing_confidence_isValid = ::OpenAPI::fromJsonValue(m_listing_confidence, json[QString("listing_confidence")]);
    m_listing_confidence_isSet = !json[QString("listing_confidence")].isNull() && m_listing_confidence_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_manufacturer_code_isValid = ::OpenAPI::fromJsonValue(m_manufacturer_code, json[QString("manufacturer_code")]);
    m_manufacturer_code_isSet = !json[QString("manufacturer_code")].isNull() && m_manufacturer_code_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_msrp_isValid = ::OpenAPI::fromJsonValue(m_msrp, json[QString("msrp")]);
    m_msrp_isSet = !json[QString("msrp")].isNull() && m_msrp_isValid;

    m_options_packages_isValid = ::OpenAPI::fromJsonValue(m_options_packages, json[QString("options_packages")]);
    m_options_packages_isSet = !json[QString("options_packages")].isNull() && m_options_packages_isValid;

    m_package_code_isValid = ::OpenAPI::fromJsonValue(m_package_code, json[QString("package_code")]);
    m_package_code_isSet = !json[QString("package_code")].isNull() && m_package_code_isValid;

    m_package_description_isValid = ::OpenAPI::fromJsonValue(m_package_description, json[QString("package_description")]);
    m_package_description_isSet = !json[QString("package_description")].isNull() && m_package_description_isValid;

    m_seating_capacity_isValid = ::OpenAPI::fromJsonValue(m_seating_capacity, json[QString("seating_capacity")]);
    m_seating_capacity_isSet = !json[QString("seating_capacity")].isNull() && m_seating_capacity_isValid;

    m_squish_vin_isValid = ::OpenAPI::fromJsonValue(m_squish_vin, json[QString("squish_vin")]);
    m_squish_vin_isSet = !json[QString("squish_vin")].isNull() && m_squish_vin_isValid;

    m_transmission_isValid = ::OpenAPI::fromJsonValue(m_transmission, json[QString("transmission")]);
    m_transmission_isSet = !json[QString("transmission")].isNull() && m_transmission_isValid;

    m_transmission_confidence_isValid = ::OpenAPI::fromJsonValue(m_transmission_confidence, json[QString("transmission_confidence")]);
    m_transmission_confidence_isSet = !json[QString("transmission_confidence")].isNull() && m_transmission_confidence_isValid;

    m_transmission_description_isValid = ::OpenAPI::fromJsonValue(m_transmission_description, json[QString("transmission_description")]);
    m_transmission_description_isSet = !json[QString("transmission_description")].isNull() && m_transmission_description_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;

    m_trim_confidence_isValid = ::OpenAPI::fromJsonValue(m_trim_confidence, json[QString("trim_confidence")]);
    m_trim_confidence_isSet = !json[QString("trim_confidence")].isNull() && m_trim_confidence_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_at_date_isValid = ::OpenAPI::fromJsonValue(m_updated_at_date, json[QString("updated_at_date")]);
    m_updated_at_date_isSet = !json[QString("updated_at_date")].isNull() && m_updated_at_date_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_version_confidence_isValid = ::OpenAPI::fromJsonValue(m_version_confidence, json[QString("version_confidence")]);
    m_version_confidence_isSet = !json[QString("version_confidence")].isNull() && m_version_confidence_isValid;

    m_vin_isValid = ::OpenAPI::fromJsonValue(m_vin, json[QString("vin")]);
    m_vin_isSet = !json[QString("vin")].isNull() && m_vin_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAINeoVIN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINeoVIN::asJsonObject() const {
    QJsonObject obj;
    if (m_available_options_details_isSet) {
        obj.insert(QString("available_options_details"), ::OpenAPI::toJsonValue(m_available_options_details));
    }
    if (m_body_subtype_isSet) {
        obj.insert(QString("body_subtype"), ::OpenAPI::toJsonValue(m_body_subtype));
    }
    if (m_body_type_isSet) {
        obj.insert(QString("body_type"), ::OpenAPI::toJsonValue(m_body_type));
    }
    if (m_city_mpg_isSet) {
        obj.insert(QString("city_mpg"), ::OpenAPI::toJsonValue(m_city_mpg));
    }
    if (m_combined_msrp_isSet) {
        obj.insert(QString("combined_msrp"), ::OpenAPI::toJsonValue(m_combined_msrp));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_at_date_isSet) {
        obj.insert(QString("created_at_date"), ::OpenAPI::toJsonValue(m_created_at_date));
    }
    if (m_decode_version_isSet) {
        obj.insert(QString("decode_version"), ::OpenAPI::toJsonValue(m_decode_version));
    }
    if (m_delivery_charges_isSet) {
        obj.insert(QString("delivery_charges"), ::OpenAPI::toJsonValue(m_delivery_charges));
    }
    if (m_doors_isSet) {
        obj.insert(QString("doors"), ::OpenAPI::toJsonValue(m_doors));
    }
    if (m_drivetrain_isSet) {
        obj.insert(QString("drivetrain"), ::OpenAPI::toJsonValue(m_drivetrain));
    }
    if (m_engine_isSet) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_exterior_color_isSet) {
        obj.insert(QString("exterior_color"), ::OpenAPI::toJsonValue(m_exterior_color));
    }
    if (m_features_isSet) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_fuel_type_isSet) {
        obj.insert(QString("fuel_type"), ::OpenAPI::toJsonValue(m_fuel_type));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_highway_mpg_isSet) {
        obj.insert(QString("highway_mpg"), ::OpenAPI::toJsonValue(m_highway_mpg));
    }
    if (m_installed_equipment_isSet) {
        obj.insert(QString("installed_equipment"), ::OpenAPI::toJsonValue(m_installed_equipment));
    }
    if (m_installed_options_details_isSet) {
        obj.insert(QString("installed_options_details"), ::OpenAPI::toJsonValue(m_installed_options_details));
    }
    if (m_installed_options_msrp_isSet) {
        obj.insert(QString("installed_options_msrp"), ::OpenAPI::toJsonValue(m_installed_options_msrp));
    }
    if (m_interior_color_isSet) {
        obj.insert(QString("interior_color"), ::OpenAPI::toJsonValue(m_interior_color));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_listing_confidence_isSet) {
        obj.insert(QString("listing_confidence"), ::OpenAPI::toJsonValue(m_listing_confidence));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_manufacturer_code_isSet) {
        obj.insert(QString("manufacturer_code"), ::OpenAPI::toJsonValue(m_manufacturer_code));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_msrp_isSet) {
        obj.insert(QString("msrp"), ::OpenAPI::toJsonValue(m_msrp));
    }
    if (m_options_packages_isSet) {
        obj.insert(QString("options_packages"), ::OpenAPI::toJsonValue(m_options_packages));
    }
    if (m_package_code_isSet) {
        obj.insert(QString("package_code"), ::OpenAPI::toJsonValue(m_package_code));
    }
    if (m_package_description_isSet) {
        obj.insert(QString("package_description"), ::OpenAPI::toJsonValue(m_package_description));
    }
    if (m_seating_capacity_isSet) {
        obj.insert(QString("seating_capacity"), ::OpenAPI::toJsonValue(m_seating_capacity));
    }
    if (m_squish_vin_isSet) {
        obj.insert(QString("squish_vin"), ::OpenAPI::toJsonValue(m_squish_vin));
    }
    if (m_transmission_isSet) {
        obj.insert(QString("transmission"), ::OpenAPI::toJsonValue(m_transmission));
    }
    if (m_transmission_confidence_isSet) {
        obj.insert(QString("transmission_confidence"), ::OpenAPI::toJsonValue(m_transmission_confidence));
    }
    if (m_transmission_description_isSet) {
        obj.insert(QString("transmission_description"), ::OpenAPI::toJsonValue(m_transmission_description));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    if (m_trim_confidence_isSet) {
        obj.insert(QString("trim_confidence"), ::OpenAPI::toJsonValue(m_trim_confidence));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_at_date_isSet) {
        obj.insert(QString("updated_at_date"), ::OpenAPI::toJsonValue(m_updated_at_date));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_version_confidence_isSet) {
        obj.insert(QString("version_confidence"), ::OpenAPI::toJsonValue(m_version_confidence));
    }
    if (m_vin_isSet) {
        obj.insert(QString("vin"), ::OpenAPI::toJsonValue(m_vin));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

OAIObject OAINeoVIN::getAvailableOptionsDetails() const {
    return m_available_options_details;
}
void OAINeoVIN::setAvailableOptionsDetails(const OAIObject &available_options_details) {
    m_available_options_details = available_options_details;
    m_available_options_details_isSet = true;
}

bool OAINeoVIN::is_available_options_details_Set() const{
    return m_available_options_details_isSet;
}

bool OAINeoVIN::is_available_options_details_Valid() const{
    return m_available_options_details_isValid;
}

QString OAINeoVIN::getBodySubtype() const {
    return m_body_subtype;
}
void OAINeoVIN::setBodySubtype(const QString &body_subtype) {
    m_body_subtype = body_subtype;
    m_body_subtype_isSet = true;
}

bool OAINeoVIN::is_body_subtype_Set() const{
    return m_body_subtype_isSet;
}

bool OAINeoVIN::is_body_subtype_Valid() const{
    return m_body_subtype_isValid;
}

QString OAINeoVIN::getBodyType() const {
    return m_body_type;
}
void OAINeoVIN::setBodyType(const QString &body_type) {
    m_body_type = body_type;
    m_body_type_isSet = true;
}

bool OAINeoVIN::is_body_type_Set() const{
    return m_body_type_isSet;
}

bool OAINeoVIN::is_body_type_Valid() const{
    return m_body_type_isValid;
}

double OAINeoVIN::getCityMpg() const {
    return m_city_mpg;
}
void OAINeoVIN::setCityMpg(const double &city_mpg) {
    m_city_mpg = city_mpg;
    m_city_mpg_isSet = true;
}

bool OAINeoVIN::is_city_mpg_Set() const{
    return m_city_mpg_isSet;
}

bool OAINeoVIN::is_city_mpg_Valid() const{
    return m_city_mpg_isValid;
}

double OAINeoVIN::getCombinedMsrp() const {
    return m_combined_msrp;
}
void OAINeoVIN::setCombinedMsrp(const double &combined_msrp) {
    m_combined_msrp = combined_msrp;
    m_combined_msrp_isSet = true;
}

bool OAINeoVIN::is_combined_msrp_Set() const{
    return m_combined_msrp_isSet;
}

bool OAINeoVIN::is_combined_msrp_Valid() const{
    return m_combined_msrp_isValid;
}

qint32 OAINeoVIN::getCreatedAt() const {
    return m_created_at;
}
void OAINeoVIN::setCreatedAt(const qint32 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINeoVIN::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINeoVIN::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAINeoVIN::getCreatedAtDate() const {
    return m_created_at_date;
}
void OAINeoVIN::setCreatedAtDate(const QString &created_at_date) {
    m_created_at_date = created_at_date;
    m_created_at_date_isSet = true;
}

bool OAINeoVIN::is_created_at_date_Set() const{
    return m_created_at_date_isSet;
}

bool OAINeoVIN::is_created_at_date_Valid() const{
    return m_created_at_date_isValid;
}

qint32 OAINeoVIN::getDecodeVersion() const {
    return m_decode_version;
}
void OAINeoVIN::setDecodeVersion(const qint32 &decode_version) {
    m_decode_version = decode_version;
    m_decode_version_isSet = true;
}

bool OAINeoVIN::is_decode_version_Set() const{
    return m_decode_version_isSet;
}

bool OAINeoVIN::is_decode_version_Valid() const{
    return m_decode_version_isValid;
}

double OAINeoVIN::getDeliveryCharges() const {
    return m_delivery_charges;
}
void OAINeoVIN::setDeliveryCharges(const double &delivery_charges) {
    m_delivery_charges = delivery_charges;
    m_delivery_charges_isSet = true;
}

bool OAINeoVIN::is_delivery_charges_Set() const{
    return m_delivery_charges_isSet;
}

bool OAINeoVIN::is_delivery_charges_Valid() const{
    return m_delivery_charges_isValid;
}

qint32 OAINeoVIN::getDoors() const {
    return m_doors;
}
void OAINeoVIN::setDoors(const qint32 &doors) {
    m_doors = doors;
    m_doors_isSet = true;
}

bool OAINeoVIN::is_doors_Set() const{
    return m_doors_isSet;
}

bool OAINeoVIN::is_doors_Valid() const{
    return m_doors_isValid;
}

QString OAINeoVIN::getDrivetrain() const {
    return m_drivetrain;
}
void OAINeoVIN::setDrivetrain(const QString &drivetrain) {
    m_drivetrain = drivetrain;
    m_drivetrain_isSet = true;
}

bool OAINeoVIN::is_drivetrain_Set() const{
    return m_drivetrain_isSet;
}

bool OAINeoVIN::is_drivetrain_Valid() const{
    return m_drivetrain_isValid;
}

QString OAINeoVIN::getEngine() const {
    return m_engine;
}
void OAINeoVIN::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAINeoVIN::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAINeoVIN::is_engine_Valid() const{
    return m_engine_isValid;
}

OAIObject OAINeoVIN::getExteriorColor() const {
    return m_exterior_color;
}
void OAINeoVIN::setExteriorColor(const OAIObject &exterior_color) {
    m_exterior_color = exterior_color;
    m_exterior_color_isSet = true;
}

bool OAINeoVIN::is_exterior_color_Set() const{
    return m_exterior_color_isSet;
}

bool OAINeoVIN::is_exterior_color_Valid() const{
    return m_exterior_color_isValid;
}

OAIObject OAINeoVIN::getFeatures() const {
    return m_features;
}
void OAINeoVIN::setFeatures(const OAIObject &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAINeoVIN::is_features_Set() const{
    return m_features_isSet;
}

bool OAINeoVIN::is_features_Valid() const{
    return m_features_isValid;
}

QString OAINeoVIN::getFuelType() const {
    return m_fuel_type;
}
void OAINeoVIN::setFuelType(const QString &fuel_type) {
    m_fuel_type = fuel_type;
    m_fuel_type_isSet = true;
}

bool OAINeoVIN::is_fuel_type_Set() const{
    return m_fuel_type_isSet;
}

bool OAINeoVIN::is_fuel_type_Valid() const{
    return m_fuel_type_isValid;
}

double OAINeoVIN::getHeight() const {
    return m_height;
}
void OAINeoVIN::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAINeoVIN::is_height_Set() const{
    return m_height_isSet;
}

bool OAINeoVIN::is_height_Valid() const{
    return m_height_isValid;
}

double OAINeoVIN::getHighwayMpg() const {
    return m_highway_mpg;
}
void OAINeoVIN::setHighwayMpg(const double &highway_mpg) {
    m_highway_mpg = highway_mpg;
    m_highway_mpg_isSet = true;
}

bool OAINeoVIN::is_highway_mpg_Set() const{
    return m_highway_mpg_isSet;
}

bool OAINeoVIN::is_highway_mpg_Valid() const{
    return m_highway_mpg_isValid;
}

OAIObject OAINeoVIN::getInstalledEquipment() const {
    return m_installed_equipment;
}
void OAINeoVIN::setInstalledEquipment(const OAIObject &installed_equipment) {
    m_installed_equipment = installed_equipment;
    m_installed_equipment_isSet = true;
}

bool OAINeoVIN::is_installed_equipment_Set() const{
    return m_installed_equipment_isSet;
}

bool OAINeoVIN::is_installed_equipment_Valid() const{
    return m_installed_equipment_isValid;
}

OAIObject OAINeoVIN::getInstalledOptionsDetails() const {
    return m_installed_options_details;
}
void OAINeoVIN::setInstalledOptionsDetails(const OAIObject &installed_options_details) {
    m_installed_options_details = installed_options_details;
    m_installed_options_details_isSet = true;
}

bool OAINeoVIN::is_installed_options_details_Set() const{
    return m_installed_options_details_isSet;
}

bool OAINeoVIN::is_installed_options_details_Valid() const{
    return m_installed_options_details_isValid;
}

double OAINeoVIN::getInstalledOptionsMsrp() const {
    return m_installed_options_msrp;
}
void OAINeoVIN::setInstalledOptionsMsrp(const double &installed_options_msrp) {
    m_installed_options_msrp = installed_options_msrp;
    m_installed_options_msrp_isSet = true;
}

bool OAINeoVIN::is_installed_options_msrp_Set() const{
    return m_installed_options_msrp_isSet;
}

bool OAINeoVIN::is_installed_options_msrp_Valid() const{
    return m_installed_options_msrp_isValid;
}

OAIObject OAINeoVIN::getInteriorColor() const {
    return m_interior_color;
}
void OAINeoVIN::setInteriorColor(const OAIObject &interior_color) {
    m_interior_color = interior_color;
    m_interior_color_isSet = true;
}

bool OAINeoVIN::is_interior_color_Set() const{
    return m_interior_color_isSet;
}

bool OAINeoVIN::is_interior_color_Valid() const{
    return m_interior_color_isValid;
}

double OAINeoVIN::getLength() const {
    return m_length;
}
void OAINeoVIN::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAINeoVIN::is_length_Set() const{
    return m_length_isSet;
}

bool OAINeoVIN::is_length_Valid() const{
    return m_length_isValid;
}

QString OAINeoVIN::getListingConfidence() const {
    return m_listing_confidence;
}
void OAINeoVIN::setListingConfidence(const QString &listing_confidence) {
    m_listing_confidence = listing_confidence;
    m_listing_confidence_isSet = true;
}

bool OAINeoVIN::is_listing_confidence_Set() const{
    return m_listing_confidence_isSet;
}

bool OAINeoVIN::is_listing_confidence_Valid() const{
    return m_listing_confidence_isValid;
}

QString OAINeoVIN::getMake() const {
    return m_make;
}
void OAINeoVIN::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAINeoVIN::is_make_Set() const{
    return m_make_isSet;
}

bool OAINeoVIN::is_make_Valid() const{
    return m_make_isValid;
}

QString OAINeoVIN::getManufacturerCode() const {
    return m_manufacturer_code;
}
void OAINeoVIN::setManufacturerCode(const QString &manufacturer_code) {
    m_manufacturer_code = manufacturer_code;
    m_manufacturer_code_isSet = true;
}

bool OAINeoVIN::is_manufacturer_code_Set() const{
    return m_manufacturer_code_isSet;
}

bool OAINeoVIN::is_manufacturer_code_Valid() const{
    return m_manufacturer_code_isValid;
}

QString OAINeoVIN::getModel() const {
    return m_model;
}
void OAINeoVIN::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAINeoVIN::is_model_Set() const{
    return m_model_isSet;
}

bool OAINeoVIN::is_model_Valid() const{
    return m_model_isValid;
}

double OAINeoVIN::getMsrp() const {
    return m_msrp;
}
void OAINeoVIN::setMsrp(const double &msrp) {
    m_msrp = msrp;
    m_msrp_isSet = true;
}

bool OAINeoVIN::is_msrp_Set() const{
    return m_msrp_isSet;
}

bool OAINeoVIN::is_msrp_Valid() const{
    return m_msrp_isValid;
}

QString OAINeoVIN::getOptionsPackages() const {
    return m_options_packages;
}
void OAINeoVIN::setOptionsPackages(const QString &options_packages) {
    m_options_packages = options_packages;
    m_options_packages_isSet = true;
}

bool OAINeoVIN::is_options_packages_Set() const{
    return m_options_packages_isSet;
}

bool OAINeoVIN::is_options_packages_Valid() const{
    return m_options_packages_isValid;
}

QString OAINeoVIN::getPackageCode() const {
    return m_package_code;
}
void OAINeoVIN::setPackageCode(const QString &package_code) {
    m_package_code = package_code;
    m_package_code_isSet = true;
}

bool OAINeoVIN::is_package_code_Set() const{
    return m_package_code_isSet;
}

bool OAINeoVIN::is_package_code_Valid() const{
    return m_package_code_isValid;
}

QString OAINeoVIN::getPackageDescription() const {
    return m_package_description;
}
void OAINeoVIN::setPackageDescription(const QString &package_description) {
    m_package_description = package_description;
    m_package_description_isSet = true;
}

bool OAINeoVIN::is_package_description_Set() const{
    return m_package_description_isSet;
}

bool OAINeoVIN::is_package_description_Valid() const{
    return m_package_description_isValid;
}

double OAINeoVIN::getSeatingCapacity() const {
    return m_seating_capacity;
}
void OAINeoVIN::setSeatingCapacity(const double &seating_capacity) {
    m_seating_capacity = seating_capacity;
    m_seating_capacity_isSet = true;
}

bool OAINeoVIN::is_seating_capacity_Set() const{
    return m_seating_capacity_isSet;
}

bool OAINeoVIN::is_seating_capacity_Valid() const{
    return m_seating_capacity_isValid;
}

QString OAINeoVIN::getSquishVin() const {
    return m_squish_vin;
}
void OAINeoVIN::setSquishVin(const QString &squish_vin) {
    m_squish_vin = squish_vin;
    m_squish_vin_isSet = true;
}

bool OAINeoVIN::is_squish_vin_Set() const{
    return m_squish_vin_isSet;
}

bool OAINeoVIN::is_squish_vin_Valid() const{
    return m_squish_vin_isValid;
}

QString OAINeoVIN::getTransmission() const {
    return m_transmission;
}
void OAINeoVIN::setTransmission(const QString &transmission) {
    m_transmission = transmission;
    m_transmission_isSet = true;
}

bool OAINeoVIN::is_transmission_Set() const{
    return m_transmission_isSet;
}

bool OAINeoVIN::is_transmission_Valid() const{
    return m_transmission_isValid;
}

QString OAINeoVIN::getTransmissionConfidence() const {
    return m_transmission_confidence;
}
void OAINeoVIN::setTransmissionConfidence(const QString &transmission_confidence) {
    m_transmission_confidence = transmission_confidence;
    m_transmission_confidence_isSet = true;
}

bool OAINeoVIN::is_transmission_confidence_Set() const{
    return m_transmission_confidence_isSet;
}

bool OAINeoVIN::is_transmission_confidence_Valid() const{
    return m_transmission_confidence_isValid;
}

QString OAINeoVIN::getTransmissionDescription() const {
    return m_transmission_description;
}
void OAINeoVIN::setTransmissionDescription(const QString &transmission_description) {
    m_transmission_description = transmission_description;
    m_transmission_description_isSet = true;
}

bool OAINeoVIN::is_transmission_description_Set() const{
    return m_transmission_description_isSet;
}

bool OAINeoVIN::is_transmission_description_Valid() const{
    return m_transmission_description_isValid;
}

QString OAINeoVIN::getTrim() const {
    return m_trim;
}
void OAINeoVIN::setTrim(const QString &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAINeoVIN::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAINeoVIN::is_trim_Valid() const{
    return m_trim_isValid;
}

QString OAINeoVIN::getTrimConfidence() const {
    return m_trim_confidence;
}
void OAINeoVIN::setTrimConfidence(const QString &trim_confidence) {
    m_trim_confidence = trim_confidence;
    m_trim_confidence_isSet = true;
}

bool OAINeoVIN::is_trim_confidence_Set() const{
    return m_trim_confidence_isSet;
}

bool OAINeoVIN::is_trim_confidence_Valid() const{
    return m_trim_confidence_isValid;
}

qint32 OAINeoVIN::getUpdatedAt() const {
    return m_updated_at;
}
void OAINeoVIN::setUpdatedAt(const qint32 &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAINeoVIN::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAINeoVIN::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAINeoVIN::getUpdatedAtDate() const {
    return m_updated_at_date;
}
void OAINeoVIN::setUpdatedAtDate(const QString &updated_at_date) {
    m_updated_at_date = updated_at_date;
    m_updated_at_date_isSet = true;
}

bool OAINeoVIN::is_updated_at_date_Set() const{
    return m_updated_at_date_isSet;
}

bool OAINeoVIN::is_updated_at_date_Valid() const{
    return m_updated_at_date_isValid;
}

QString OAINeoVIN::getVersion() const {
    return m_version;
}
void OAINeoVIN::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAINeoVIN::is_version_Set() const{
    return m_version_isSet;
}

bool OAINeoVIN::is_version_Valid() const{
    return m_version_isValid;
}

QString OAINeoVIN::getVersionConfidence() const {
    return m_version_confidence;
}
void OAINeoVIN::setVersionConfidence(const QString &version_confidence) {
    m_version_confidence = version_confidence;
    m_version_confidence_isSet = true;
}

bool OAINeoVIN::is_version_confidence_Set() const{
    return m_version_confidence_isSet;
}

bool OAINeoVIN::is_version_confidence_Valid() const{
    return m_version_confidence_isValid;
}

QString OAINeoVIN::getVin() const {
    return m_vin;
}
void OAINeoVIN::setVin(const QString &vin) {
    m_vin = vin;
    m_vin_isSet = true;
}

bool OAINeoVIN::is_vin_Set() const{
    return m_vin_isSet;
}

bool OAINeoVIN::is_vin_Valid() const{
    return m_vin_isValid;
}

double OAINeoVIN::getWeight() const {
    return m_weight;
}
void OAINeoVIN::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAINeoVIN::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAINeoVIN::is_weight_Valid() const{
    return m_weight_isValid;
}

double OAINeoVIN::getWidth() const {
    return m_width;
}
void OAINeoVIN::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAINeoVIN::is_width_Set() const{
    return m_width_isSet;
}

bool OAINeoVIN::is_width_Valid() const{
    return m_width_isValid;
}

qint32 OAINeoVIN::getYear() const {
    return m_year;
}
void OAINeoVIN::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAINeoVIN::is_year_Set() const{
    return m_year_isSet;
}

bool OAINeoVIN::is_year_Valid() const{
    return m_year_isValid;
}

bool OAINeoVIN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_options_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_mpg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_combined_msrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decode_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drivetrain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exterior_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highway_mpg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_equipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_options_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_options_msrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interior_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_packages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seating_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_squish_vin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINeoVIN::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
