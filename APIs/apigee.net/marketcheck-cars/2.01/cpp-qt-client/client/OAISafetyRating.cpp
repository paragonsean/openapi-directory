/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISafetyRating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISafetyRating::OAISafetyRating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISafetyRating::OAISafetyRating() {
    this->initializeModel();
}

OAISafetyRating::~OAISafetyRating() {}

void OAISafetyRating::initializeModel() {

    m_driver_front_rating_isSet = false;
    m_driver_front_rating_isValid = false;

    m_driver_side_rating_isSet = false;
    m_driver_side_rating_isValid = false;

    m_overall_rating_isSet = false;
    m_overall_rating_isValid = false;

    m_passenger_front_rating_isSet = false;
    m_passenger_front_rating_isValid = false;

    m_roll_over_rating_isSet = false;
    m_roll_over_rating_isValid = false;
}

void OAISafetyRating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISafetyRating::fromJsonObject(QJsonObject json) {

    m_driver_front_rating_isValid = ::OpenAPI::fromJsonValue(m_driver_front_rating, json[QString("driver_front_rating")]);
    m_driver_front_rating_isSet = !json[QString("driver_front_rating")].isNull() && m_driver_front_rating_isValid;

    m_driver_side_rating_isValid = ::OpenAPI::fromJsonValue(m_driver_side_rating, json[QString("driver_side_rating")]);
    m_driver_side_rating_isSet = !json[QString("driver_side_rating")].isNull() && m_driver_side_rating_isValid;

    m_overall_rating_isValid = ::OpenAPI::fromJsonValue(m_overall_rating, json[QString("overall_rating")]);
    m_overall_rating_isSet = !json[QString("overall_rating")].isNull() && m_overall_rating_isValid;

    m_passenger_front_rating_isValid = ::OpenAPI::fromJsonValue(m_passenger_front_rating, json[QString("passenger_front_rating")]);
    m_passenger_front_rating_isSet = !json[QString("passenger_front_rating")].isNull() && m_passenger_front_rating_isValid;

    m_roll_over_rating_isValid = ::OpenAPI::fromJsonValue(m_roll_over_rating, json[QString("roll_over_rating")]);
    m_roll_over_rating_isSet = !json[QString("roll_over_rating")].isNull() && m_roll_over_rating_isValid;
}

QString OAISafetyRating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISafetyRating::asJsonObject() const {
    QJsonObject obj;
    if (m_driver_front_rating_isSet) {
        obj.insert(QString("driver_front_rating"), ::OpenAPI::toJsonValue(m_driver_front_rating));
    }
    if (m_driver_side_rating_isSet) {
        obj.insert(QString("driver_side_rating"), ::OpenAPI::toJsonValue(m_driver_side_rating));
    }
    if (m_overall_rating_isSet) {
        obj.insert(QString("overall_rating"), ::OpenAPI::toJsonValue(m_overall_rating));
    }
    if (m_passenger_front_rating_isSet) {
        obj.insert(QString("passenger_front_rating"), ::OpenAPI::toJsonValue(m_passenger_front_rating));
    }
    if (m_roll_over_rating_isSet) {
        obj.insert(QString("roll_over_rating"), ::OpenAPI::toJsonValue(m_roll_over_rating));
    }
    return obj;
}

double OAISafetyRating::getDriverFrontRating() const {
    return m_driver_front_rating;
}
void OAISafetyRating::setDriverFrontRating(const double &driver_front_rating) {
    m_driver_front_rating = driver_front_rating;
    m_driver_front_rating_isSet = true;
}

bool OAISafetyRating::is_driver_front_rating_Set() const{
    return m_driver_front_rating_isSet;
}

bool OAISafetyRating::is_driver_front_rating_Valid() const{
    return m_driver_front_rating_isValid;
}

double OAISafetyRating::getDriverSideRating() const {
    return m_driver_side_rating;
}
void OAISafetyRating::setDriverSideRating(const double &driver_side_rating) {
    m_driver_side_rating = driver_side_rating;
    m_driver_side_rating_isSet = true;
}

bool OAISafetyRating::is_driver_side_rating_Set() const{
    return m_driver_side_rating_isSet;
}

bool OAISafetyRating::is_driver_side_rating_Valid() const{
    return m_driver_side_rating_isValid;
}

double OAISafetyRating::getOverallRating() const {
    return m_overall_rating;
}
void OAISafetyRating::setOverallRating(const double &overall_rating) {
    m_overall_rating = overall_rating;
    m_overall_rating_isSet = true;
}

bool OAISafetyRating::is_overall_rating_Set() const{
    return m_overall_rating_isSet;
}

bool OAISafetyRating::is_overall_rating_Valid() const{
    return m_overall_rating_isValid;
}

double OAISafetyRating::getPassengerFrontRating() const {
    return m_passenger_front_rating;
}
void OAISafetyRating::setPassengerFrontRating(const double &passenger_front_rating) {
    m_passenger_front_rating = passenger_front_rating;
    m_passenger_front_rating_isSet = true;
}

bool OAISafetyRating::is_passenger_front_rating_Set() const{
    return m_passenger_front_rating_isSet;
}

bool OAISafetyRating::is_passenger_front_rating_Valid() const{
    return m_passenger_front_rating_isValid;
}

double OAISafetyRating::getRollOverRating() const {
    return m_roll_over_rating;
}
void OAISafetyRating::setRollOverRating(const double &roll_over_rating) {
    m_roll_over_rating = roll_over_rating;
    m_roll_over_rating_isSet = true;
}

bool OAISafetyRating::is_roll_over_rating_Set() const{
    return m_roll_over_rating_isSet;
}

bool OAISafetyRating::is_roll_over_rating_Valid() const{
    return m_roll_over_rating_isValid;
}

bool OAISafetyRating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_driver_front_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_side_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passenger_front_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_over_rating_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISafetyRating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
