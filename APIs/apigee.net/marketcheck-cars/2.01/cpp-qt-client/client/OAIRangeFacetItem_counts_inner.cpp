/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRangeFacetItem_counts_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRangeFacetItem_counts_inner::OAIRangeFacetItem_counts_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRangeFacetItem_counts_inner::OAIRangeFacetItem_counts_inner() {
    this->initializeModel();
}

OAIRangeFacetItem_counts_inner::~OAIRangeFacetItem_counts_inner() {}

void OAIRangeFacetItem_counts_inner::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_lower_bound_isSet = false;
    m_lower_bound_isValid = false;

    m_upper_bound_isSet = false;
    m_upper_bound_isValid = false;
}

void OAIRangeFacetItem_counts_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRangeFacetItem_counts_inner::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_lower_bound, json[QString("lower_bound")]);
    m_lower_bound_isSet = !json[QString("lower_bound")].isNull() && m_lower_bound_isValid;

    m_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_upper_bound, json[QString("upper_bound")]);
    m_upper_bound_isSet = !json[QString("upper_bound")].isNull() && m_upper_bound_isValid;
}

QString OAIRangeFacetItem_counts_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRangeFacetItem_counts_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_lower_bound_isSet) {
        obj.insert(QString("lower_bound"), ::OpenAPI::toJsonValue(m_lower_bound));
    }
    if (m_upper_bound_isSet) {
        obj.insert(QString("upper_bound"), ::OpenAPI::toJsonValue(m_upper_bound));
    }
    return obj;
}

qint32 OAIRangeFacetItem_counts_inner::getCount() const {
    return m_count;
}
void OAIRangeFacetItem_counts_inner::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIRangeFacetItem_counts_inner::is_count_Set() const{
    return m_count_isSet;
}

bool OAIRangeFacetItem_counts_inner::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIRangeFacetItem_counts_inner::getLowerBound() const {
    return m_lower_bound;
}
void OAIRangeFacetItem_counts_inner::setLowerBound(const qint32 &lower_bound) {
    m_lower_bound = lower_bound;
    m_lower_bound_isSet = true;
}

bool OAIRangeFacetItem_counts_inner::is_lower_bound_Set() const{
    return m_lower_bound_isSet;
}

bool OAIRangeFacetItem_counts_inner::is_lower_bound_Valid() const{
    return m_lower_bound_isValid;
}

qint32 OAIRangeFacetItem_counts_inner::getUpperBound() const {
    return m_upper_bound;
}
void OAIRangeFacetItem_counts_inner::setUpperBound(const qint32 &upper_bound) {
    m_upper_bound = upper_bound;
    m_upper_bound_isSet = true;
}

bool OAIRangeFacetItem_counts_inner::is_upper_bound_Set() const{
    return m_upper_bound_isSet;
}

bool OAIRangeFacetItem_counts_inner::is_upper_bound_Valid() const{
    return m_upper_bound_isValid;
}

bool OAIRangeFacetItem_counts_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRangeFacetItem_counts_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
