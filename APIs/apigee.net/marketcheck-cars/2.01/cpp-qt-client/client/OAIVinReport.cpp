/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVinReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVinReport::OAIVinReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVinReport::OAIVinReport() {
    this->initializeModel();
}

OAIVinReport::~OAIVinReport() {}

void OAIVinReport::initializeModel() {

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_some_text_isSet = false;
    m_some_text_isValid = false;
}

void OAIVinReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVinReport::fromJsonObject(QJsonObject json) {

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_some_text_isValid = ::OpenAPI::fromJsonValue(m_some_text, json[QString("some_text")]);
    m_some_text_isSet = !json[QString("some_text")].isNull() && m_some_text_isValid;
}

QString OAIVinReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVinReport::asJsonObject() const {
    QJsonObject obj;
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_some_text_isSet) {
        obj.insert(QString("some_text"), ::OpenAPI::toJsonValue(m_some_text));
    }
    return obj;
}

QString OAIVinReport::getIcon() const {
    return m_icon;
}
void OAIVinReport::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIVinReport::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIVinReport::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIVinReport::getSomeText() const {
    return m_some_text;
}
void OAIVinReport::setSomeText(const QString &some_text) {
    m_some_text = some_text;
    m_some_text_isSet = true;
}

bool OAIVinReport::is_some_text_Set() const{
    return m_some_text_isSet;
}

bool OAIVinReport::is_some_text_Valid() const{
    return m_some_text_isValid;
}

bool OAIVinReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_some_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVinReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
