/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListingNestMedia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListingNestMedia::OAIListingNestMedia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListingNestMedia::OAIListingNestMedia() {
    this->initializeModel();
}

OAIListingNestMedia::~OAIListingNestMedia() {}

void OAIListingNestMedia::initializeModel() {

    m_photo_links_isSet = false;
    m_photo_links_isValid = false;

    m_photo_links_cached_isSet = false;
    m_photo_links_cached_isValid = false;
}

void OAIListingNestMedia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListingNestMedia::fromJsonObject(QJsonObject json) {

    m_photo_links_isValid = ::OpenAPI::fromJsonValue(m_photo_links, json[QString("photo_links")]);
    m_photo_links_isSet = !json[QString("photo_links")].isNull() && m_photo_links_isValid;

    m_photo_links_cached_isValid = ::OpenAPI::fromJsonValue(m_photo_links_cached, json[QString("photo_links_cached")]);
    m_photo_links_cached_isSet = !json[QString("photo_links_cached")].isNull() && m_photo_links_cached_isValid;
}

QString OAIListingNestMedia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListingNestMedia::asJsonObject() const {
    QJsonObject obj;
    if (m_photo_links.size() > 0) {
        obj.insert(QString("photo_links"), ::OpenAPI::toJsonValue(m_photo_links));
    }
    if (m_photo_links_cached.size() > 0) {
        obj.insert(QString("photo_links_cached"), ::OpenAPI::toJsonValue(m_photo_links_cached));
    }
    return obj;
}

QList<QString> OAIListingNestMedia::getPhotoLinks() const {
    return m_photo_links;
}
void OAIListingNestMedia::setPhotoLinks(const QList<QString> &photo_links) {
    m_photo_links = photo_links;
    m_photo_links_isSet = true;
}

bool OAIListingNestMedia::is_photo_links_Set() const{
    return m_photo_links_isSet;
}

bool OAIListingNestMedia::is_photo_links_Valid() const{
    return m_photo_links_isValid;
}

QList<QString> OAIListingNestMedia::getPhotoLinksCached() const {
    return m_photo_links_cached;
}
void OAIListingNestMedia::setPhotoLinksCached(const QList<QString> &photo_links_cached) {
    m_photo_links_cached = photo_links_cached;
    m_photo_links_cached_isSet = true;
}

bool OAIListingNestMedia::is_photo_links_cached_Set() const{
    return m_photo_links_cached_isSet;
}

bool OAIListingNestMedia::is_photo_links_cached_Valid() const{
    return m_photo_links_cached_isValid;
}

bool OAIListingNestMedia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_photo_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_links_cached.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListingNestMedia::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
