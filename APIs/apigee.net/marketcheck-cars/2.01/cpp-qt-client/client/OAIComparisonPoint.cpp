/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComparisonPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComparisonPoint::OAIComparisonPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComparisonPoint::OAIComparisonPoint() {
    this->initializeModel();
}

OAIComparisonPoint::~OAIComparisonPoint() {}

void OAIComparisonPoint::initializeModel() {

    m_dealer_indicator_isSet = false;
    m_dealer_indicator_isValid = false;

    m_fair_deal_price_isSet = false;
    m_fair_deal_price_isValid = false;

    m_similar_vehicles_count_isSet = false;
    m_similar_vehicles_count_isValid = false;

    m_vin_price_isSet = false;
    m_vin_price_isValid = false;
}

void OAIComparisonPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComparisonPoint::fromJsonObject(QJsonObject json) {

    m_dealer_indicator_isValid = ::OpenAPI::fromJsonValue(m_dealer_indicator, json[QString("dealer_indicator")]);
    m_dealer_indicator_isSet = !json[QString("dealer_indicator")].isNull() && m_dealer_indicator_isValid;

    m_fair_deal_price_isValid = ::OpenAPI::fromJsonValue(m_fair_deal_price, json[QString("fair_deal_price")]);
    m_fair_deal_price_isSet = !json[QString("fair_deal_price")].isNull() && m_fair_deal_price_isValid;

    m_similar_vehicles_count_isValid = ::OpenAPI::fromJsonValue(m_similar_vehicles_count, json[QString("similar_vehicles_count")]);
    m_similar_vehicles_count_isSet = !json[QString("similar_vehicles_count")].isNull() && m_similar_vehicles_count_isValid;

    m_vin_price_isValid = ::OpenAPI::fromJsonValue(m_vin_price, json[QString("vin_price")]);
    m_vin_price_isSet = !json[QString("vin_price")].isNull() && m_vin_price_isValid;
}

QString OAIComparisonPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComparisonPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_dealer_indicator_isSet) {
        obj.insert(QString("dealer_indicator"), ::OpenAPI::toJsonValue(m_dealer_indicator));
    }
    if (m_fair_deal_price_isSet) {
        obj.insert(QString("fair_deal_price"), ::OpenAPI::toJsonValue(m_fair_deal_price));
    }
    if (m_similar_vehicles_count_isSet) {
        obj.insert(QString("similar_vehicles_count"), ::OpenAPI::toJsonValue(m_similar_vehicles_count));
    }
    if (m_vin_price_isSet) {
        obj.insert(QString("vin_price"), ::OpenAPI::toJsonValue(m_vin_price));
    }
    return obj;
}

QString OAIComparisonPoint::getDealerIndicator() const {
    return m_dealer_indicator;
}
void OAIComparisonPoint::setDealerIndicator(const QString &dealer_indicator) {
    m_dealer_indicator = dealer_indicator;
    m_dealer_indicator_isSet = true;
}

bool OAIComparisonPoint::is_dealer_indicator_Set() const{
    return m_dealer_indicator_isSet;
}

bool OAIComparisonPoint::is_dealer_indicator_Valid() const{
    return m_dealer_indicator_isValid;
}

double OAIComparisonPoint::getFairDealPrice() const {
    return m_fair_deal_price;
}
void OAIComparisonPoint::setFairDealPrice(const double &fair_deal_price) {
    m_fair_deal_price = fair_deal_price;
    m_fair_deal_price_isSet = true;
}

bool OAIComparisonPoint::is_fair_deal_price_Set() const{
    return m_fair_deal_price_isSet;
}

bool OAIComparisonPoint::is_fair_deal_price_Valid() const{
    return m_fair_deal_price_isValid;
}

double OAIComparisonPoint::getSimilarVehiclesCount() const {
    return m_similar_vehicles_count;
}
void OAIComparisonPoint::setSimilarVehiclesCount(const double &similar_vehicles_count) {
    m_similar_vehicles_count = similar_vehicles_count;
    m_similar_vehicles_count_isSet = true;
}

bool OAIComparisonPoint::is_similar_vehicles_count_Set() const{
    return m_similar_vehicles_count_isSet;
}

bool OAIComparisonPoint::is_similar_vehicles_count_Valid() const{
    return m_similar_vehicles_count_isValid;
}

double OAIComparisonPoint::getVinPrice() const {
    return m_vin_price;
}
void OAIComparisonPoint::setVinPrice(const double &vin_price) {
    m_vin_price = vin_price;
    m_vin_price_isSet = true;
}

bool OAIComparisonPoint::is_vin_price_Set() const{
    return m_vin_price_isSet;
}

bool OAIComparisonPoint::is_vin_price_Valid() const{
    return m_vin_price_isValid;
}

bool OAIComparisonPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dealer_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fair_deal_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_similar_vehicles_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vin_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComparisonPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
