/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesStats::OAISalesStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesStats::OAISalesStats() {
    this->initializeModel();
}

OAISalesStats::~OAISalesStats() {}

void OAISalesStats::initializeModel() {

    m_absolute_mean_deviation_isSet = false;
    m_absolute_mean_deviation_isValid = false;

    m_iqr_isSet = false;
    m_iqr_isValid = false;

    m_mean_isSet = false;
    m_mean_isValid = false;

    m_median_isSet = false;
    m_median_isValid = false;

    m_population_standard_deviation_isSet = false;
    m_population_standard_deviation_isValid = false;

    m_standard_deviation_isSet = false;
    m_standard_deviation_isValid = false;

    m_trimmed_mean_isSet = false;
    m_trimmed_mean_isValid = false;

    m_variance_isSet = false;
    m_variance_isValid = false;

    m_weighted_mean_isSet = false;
    m_weighted_mean_isValid = false;
}

void OAISalesStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesStats::fromJsonObject(QJsonObject json) {

    m_absolute_mean_deviation_isValid = ::OpenAPI::fromJsonValue(m_absolute_mean_deviation, json[QString("absolute_mean_deviation")]);
    m_absolute_mean_deviation_isSet = !json[QString("absolute_mean_deviation")].isNull() && m_absolute_mean_deviation_isValid;

    m_iqr_isValid = ::OpenAPI::fromJsonValue(m_iqr, json[QString("iqr")]);
    m_iqr_isSet = !json[QString("iqr")].isNull() && m_iqr_isValid;

    m_mean_isValid = ::OpenAPI::fromJsonValue(m_mean, json[QString("mean")]);
    m_mean_isSet = !json[QString("mean")].isNull() && m_mean_isValid;

    m_median_isValid = ::OpenAPI::fromJsonValue(m_median, json[QString("median")]);
    m_median_isSet = !json[QString("median")].isNull() && m_median_isValid;

    m_population_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_population_standard_deviation, json[QString("population_standard_deviation")]);
    m_population_standard_deviation_isSet = !json[QString("population_standard_deviation")].isNull() && m_population_standard_deviation_isValid;

    m_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_standard_deviation, json[QString("standard_deviation")]);
    m_standard_deviation_isSet = !json[QString("standard_deviation")].isNull() && m_standard_deviation_isValid;

    m_trimmed_mean_isValid = ::OpenAPI::fromJsonValue(m_trimmed_mean, json[QString("trimmed_mean")]);
    m_trimmed_mean_isSet = !json[QString("trimmed_mean")].isNull() && m_trimmed_mean_isValid;

    m_variance_isValid = ::OpenAPI::fromJsonValue(m_variance, json[QString("variance")]);
    m_variance_isSet = !json[QString("variance")].isNull() && m_variance_isValid;

    m_weighted_mean_isValid = ::OpenAPI::fromJsonValue(m_weighted_mean, json[QString("weighted_mean")]);
    m_weighted_mean_isSet = !json[QString("weighted_mean")].isNull() && m_weighted_mean_isValid;
}

QString OAISalesStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesStats::asJsonObject() const {
    QJsonObject obj;
    if (m_absolute_mean_deviation_isSet) {
        obj.insert(QString("absolute_mean_deviation"), ::OpenAPI::toJsonValue(m_absolute_mean_deviation));
    }
    if (m_iqr_isSet) {
        obj.insert(QString("iqr"), ::OpenAPI::toJsonValue(m_iqr));
    }
    if (m_mean_isSet) {
        obj.insert(QString("mean"), ::OpenAPI::toJsonValue(m_mean));
    }
    if (m_median_isSet) {
        obj.insert(QString("median"), ::OpenAPI::toJsonValue(m_median));
    }
    if (m_population_standard_deviation_isSet) {
        obj.insert(QString("population_standard_deviation"), ::OpenAPI::toJsonValue(m_population_standard_deviation));
    }
    if (m_standard_deviation_isSet) {
        obj.insert(QString("standard_deviation"), ::OpenAPI::toJsonValue(m_standard_deviation));
    }
    if (m_trimmed_mean_isSet) {
        obj.insert(QString("trimmed_mean"), ::OpenAPI::toJsonValue(m_trimmed_mean));
    }
    if (m_variance_isSet) {
        obj.insert(QString("variance"), ::OpenAPI::toJsonValue(m_variance));
    }
    if (m_weighted_mean_isSet) {
        obj.insert(QString("weighted_mean"), ::OpenAPI::toJsonValue(m_weighted_mean));
    }
    return obj;
}

double OAISalesStats::getAbsoluteMeanDeviation() const {
    return m_absolute_mean_deviation;
}
void OAISalesStats::setAbsoluteMeanDeviation(const double &absolute_mean_deviation) {
    m_absolute_mean_deviation = absolute_mean_deviation;
    m_absolute_mean_deviation_isSet = true;
}

bool OAISalesStats::is_absolute_mean_deviation_Set() const{
    return m_absolute_mean_deviation_isSet;
}

bool OAISalesStats::is_absolute_mean_deviation_Valid() const{
    return m_absolute_mean_deviation_isValid;
}

double OAISalesStats::getIqr() const {
    return m_iqr;
}
void OAISalesStats::setIqr(const double &iqr) {
    m_iqr = iqr;
    m_iqr_isSet = true;
}

bool OAISalesStats::is_iqr_Set() const{
    return m_iqr_isSet;
}

bool OAISalesStats::is_iqr_Valid() const{
    return m_iqr_isValid;
}

double OAISalesStats::getMean() const {
    return m_mean;
}
void OAISalesStats::setMean(const double &mean) {
    m_mean = mean;
    m_mean_isSet = true;
}

bool OAISalesStats::is_mean_Set() const{
    return m_mean_isSet;
}

bool OAISalesStats::is_mean_Valid() const{
    return m_mean_isValid;
}

double OAISalesStats::getMedian() const {
    return m_median;
}
void OAISalesStats::setMedian(const double &median) {
    m_median = median;
    m_median_isSet = true;
}

bool OAISalesStats::is_median_Set() const{
    return m_median_isSet;
}

bool OAISalesStats::is_median_Valid() const{
    return m_median_isValid;
}

double OAISalesStats::getPopulationStandardDeviation() const {
    return m_population_standard_deviation;
}
void OAISalesStats::setPopulationStandardDeviation(const double &population_standard_deviation) {
    m_population_standard_deviation = population_standard_deviation;
    m_population_standard_deviation_isSet = true;
}

bool OAISalesStats::is_population_standard_deviation_Set() const{
    return m_population_standard_deviation_isSet;
}

bool OAISalesStats::is_population_standard_deviation_Valid() const{
    return m_population_standard_deviation_isValid;
}

double OAISalesStats::getStandardDeviation() const {
    return m_standard_deviation;
}
void OAISalesStats::setStandardDeviation(const double &standard_deviation) {
    m_standard_deviation = standard_deviation;
    m_standard_deviation_isSet = true;
}

bool OAISalesStats::is_standard_deviation_Set() const{
    return m_standard_deviation_isSet;
}

bool OAISalesStats::is_standard_deviation_Valid() const{
    return m_standard_deviation_isValid;
}

double OAISalesStats::getTrimmedMean() const {
    return m_trimmed_mean;
}
void OAISalesStats::setTrimmedMean(const double &trimmed_mean) {
    m_trimmed_mean = trimmed_mean;
    m_trimmed_mean_isSet = true;
}

bool OAISalesStats::is_trimmed_mean_Set() const{
    return m_trimmed_mean_isSet;
}

bool OAISalesStats::is_trimmed_mean_Valid() const{
    return m_trimmed_mean_isValid;
}

double OAISalesStats::getVariance() const {
    return m_variance;
}
void OAISalesStats::setVariance(const double &variance) {
    m_variance = variance;
    m_variance_isSet = true;
}

bool OAISalesStats::is_variance_Set() const{
    return m_variance_isSet;
}

bool OAISalesStats::is_variance_Valid() const{
    return m_variance_isValid;
}

double OAISalesStats::getWeightedMean() const {
    return m_weighted_mean;
}
void OAISalesStats::setWeightedMean(const double &weighted_mean) {
    m_weighted_mean = weighted_mean;
    m_weighted_mean_isSet = true;
}

bool OAISalesStats::is_weighted_mean_Set() const{
    return m_weighted_mean_isSet;
}

bool OAISalesStats::is_weighted_mean_Valid() const{
    return m_weighted_mean_isValid;
}

bool OAISalesStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolute_mean_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iqr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_median_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_standard_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trimmed_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted_mean_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
