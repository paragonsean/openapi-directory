/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasePopular.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasePopular::OAIBasePopular(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasePopular::OAIBasePopular() {
    this->initializeModel();
}

OAIBasePopular::~OAIBasePopular() {}

void OAIBasePopular::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_dom_stats_isSet = false;
    m_dom_stats_isValid = false;

    m_inventory_type_isSet = false;
    m_inventory_type_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_miles_stats_isSet = false;
    m_miles_stats_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_price_stats_isSet = false;
    m_price_stats_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIBasePopular::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasePopular::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_dom_stats_isValid = ::OpenAPI::fromJsonValue(m_dom_stats, json[QString("dom_stats")]);
    m_dom_stats_isSet = !json[QString("dom_stats")].isNull() && m_dom_stats_isValid;

    m_inventory_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_type, json[QString("inventoryType")]);
    m_inventory_type_isSet = !json[QString("inventoryType")].isNull() && m_inventory_type_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_miles_stats_isValid = ::OpenAPI::fromJsonValue(m_miles_stats, json[QString("miles_stats")]);
    m_miles_stats_isSet = !json[QString("miles_stats")].isNull() && m_miles_stats_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_price_stats_isValid = ::OpenAPI::fromJsonValue(m_price_stats, json[QString("price_stats")]);
    m_price_stats_isSet = !json[QString("price_stats")].isNull() && m_price_stats_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIBasePopular::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasePopular::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_counts_isSet) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_dom_stats.isSet()) {
        obj.insert(QString("dom_stats"), ::OpenAPI::toJsonValue(m_dom_stats));
    }
    if (m_inventory_type_isSet) {
        obj.insert(QString("inventoryType"), ::OpenAPI::toJsonValue(m_inventory_type));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_miles_stats.isSet()) {
        obj.insert(QString("miles_stats"), ::OpenAPI::toJsonValue(m_miles_stats));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_price_stats.isSet()) {
        obj.insert(QString("price_stats"), ::OpenAPI::toJsonValue(m_price_stats));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIBasePopular::getCity() const {
    return m_city;
}
void OAIBasePopular::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIBasePopular::is_city_Set() const{
    return m_city_isSet;
}

bool OAIBasePopular::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIBasePopular::getCounts() const {
    return m_counts;
}
void OAIBasePopular::setCounts(const QString &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIBasePopular::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIBasePopular::is_counts_Valid() const{
    return m_counts_isValid;
}

OAISalesStats OAIBasePopular::getDomStats() const {
    return m_dom_stats;
}
void OAIBasePopular::setDomStats(const OAISalesStats &dom_stats) {
    m_dom_stats = dom_stats;
    m_dom_stats_isSet = true;
}

bool OAIBasePopular::is_dom_stats_Set() const{
    return m_dom_stats_isSet;
}

bool OAIBasePopular::is_dom_stats_Valid() const{
    return m_dom_stats_isValid;
}

QString OAIBasePopular::getInventoryType() const {
    return m_inventory_type;
}
void OAIBasePopular::setInventoryType(const QString &inventory_type) {
    m_inventory_type = inventory_type;
    m_inventory_type_isSet = true;
}

bool OAIBasePopular::is_inventory_type_Set() const{
    return m_inventory_type_isSet;
}

bool OAIBasePopular::is_inventory_type_Valid() const{
    return m_inventory_type_isValid;
}

QString OAIBasePopular::getMake() const {
    return m_make;
}
void OAIBasePopular::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIBasePopular::is_make_Set() const{
    return m_make_isSet;
}

bool OAIBasePopular::is_make_Valid() const{
    return m_make_isValid;
}

OAISalesStats OAIBasePopular::getMilesStats() const {
    return m_miles_stats;
}
void OAIBasePopular::setMilesStats(const OAISalesStats &miles_stats) {
    m_miles_stats = miles_stats;
    m_miles_stats_isSet = true;
}

bool OAIBasePopular::is_miles_stats_Set() const{
    return m_miles_stats_isSet;
}

bool OAIBasePopular::is_miles_stats_Valid() const{
    return m_miles_stats_isValid;
}

QString OAIBasePopular::getModel() const {
    return m_model;
}
void OAIBasePopular::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIBasePopular::is_model_Set() const{
    return m_model_isSet;
}

bool OAIBasePopular::is_model_Valid() const{
    return m_model_isValid;
}

OAISalesStats OAIBasePopular::getPriceStats() const {
    return m_price_stats;
}
void OAIBasePopular::setPriceStats(const OAISalesStats &price_stats) {
    m_price_stats = price_stats;
    m_price_stats_isSet = true;
}

bool OAIBasePopular::is_price_stats_Set() const{
    return m_price_stats_isSet;
}

bool OAIBasePopular::is_price_stats_Valid() const{
    return m_price_stats_isValid;
}

QString OAIBasePopular::getState() const {
    return m_state;
}
void OAIBasePopular::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBasePopular::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBasePopular::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIBasePopular::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasePopular::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
