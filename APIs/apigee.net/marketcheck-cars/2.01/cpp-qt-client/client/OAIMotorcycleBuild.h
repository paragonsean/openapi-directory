/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMotorcycleBuild.h
 *
 * Describes the Motorcycle specification
 */

#ifndef OAIMotorcycleBuild_H
#define OAIMotorcycleBuild_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMotorcycleBuild : public OAIObject {
public:
    OAIMotorcycleBuild();
    OAIMotorcycleBuild(QString json);
    ~OAIMotorcycleBuild() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBodyType() const;
    void setBodyType(const QString &body_type);
    bool is_body_type_Set() const;
    bool is_body_type_Valid() const;

    qint32 getCylinders() const;
    void setCylinders(const qint32 &cylinders);
    bool is_cylinders_Set() const;
    bool is_cylinders_Valid() const;

    QString getDrivetrain() const;
    void setDrivetrain(const QString &drivetrain);
    bool is_drivetrain_Set() const;
    bool is_drivetrain_Valid() const;

    QString getDryWeight() const;
    void setDryWeight(const QString &dry_weight);
    bool is_dry_weight_Set() const;
    bool is_dry_weight_Valid() const;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getFuelType() const;
    void setFuelType(const QString &fuel_type);
    bool is_fuel_type_Set() const;
    bool is_fuel_type_Valid() const;

    QString getMadeIn() const;
    void setMadeIn(const QString &made_in);
    bool is_made_in_Set() const;
    bool is_made_in_Valid() const;

    QString getMake() const;
    void setMake(const QString &make);
    bool is_make_Set() const;
    bool is_make_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getTransmission() const;
    void setTransmission(const QString &transmission);
    bool is_transmission_Set() const;
    bool is_transmission_Valid() const;

    QString getTrim() const;
    void setTrim(const QString &trim);
    bool is_trim_Set() const;
    bool is_trim_Valid() const;

    QString getVehicleType() const;
    void setVehicleType(const QString &vehicle_type);
    bool is_vehicle_type_Set() const;
    bool is_vehicle_type_Valid() const;

    qint32 getYear() const;
    void setYear(const qint32 &year);
    bool is_year_Set() const;
    bool is_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_body_type;
    bool m_body_type_isSet;
    bool m_body_type_isValid;

    qint32 m_cylinders;
    bool m_cylinders_isSet;
    bool m_cylinders_isValid;

    QString m_drivetrain;
    bool m_drivetrain_isSet;
    bool m_drivetrain_isValid;

    QString m_dry_weight;
    bool m_dry_weight_isSet;
    bool m_dry_weight_isValid;

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_fuel_type;
    bool m_fuel_type_isSet;
    bool m_fuel_type_isValid;

    QString m_made_in;
    bool m_made_in_isSet;
    bool m_made_in_isValid;

    QString m_make;
    bool m_make_isSet;
    bool m_make_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString m_transmission;
    bool m_transmission_isSet;
    bool m_transmission_isValid;

    QString m_trim;
    bool m_trim_isSet;
    bool m_trim_isValid;

    QString m_vehicle_type;
    bool m_vehicle_type_isSet;
    bool m_vehicle_type_isValid;

    qint32 m_year;
    bool m_year_isSet;
    bool m_year_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMotorcycleBuild)

#endif // OAIMotorcycleBuild_H
