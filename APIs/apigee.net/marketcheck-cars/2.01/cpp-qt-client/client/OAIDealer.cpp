/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealer::OAIDealer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealer::OAIDealer() {
    this->initializeModel();
}

OAIDealer::~OAIDealer() {}

void OAIDealer::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_dealer_type_isSet = false;
    m_dealer_type_isValid = false;

    m_dealership_group_name_isSet = false;
    m_dealership_group_name_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inventory_url_isSet = false;
    m_inventory_url_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_listing_count_isSet = false;
    m_listing_count_isValid = false;

    m_location_ll_isSet = false;
    m_location_ll_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_seller_email_isSet = false;
    m_seller_email_isValid = false;

    m_seller_name_isSet = false;
    m_seller_name_isValid = false;

    m_seller_phone_isSet = false;
    m_seller_phone_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIDealer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealer::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("data_source")]);
    m_data_source_isSet = !json[QString("data_source")].isNull() && m_data_source_isValid;

    m_dealer_type_isValid = ::OpenAPI::fromJsonValue(m_dealer_type, json[QString("dealer_type")]);
    m_dealer_type_isSet = !json[QString("dealer_type")].isNull() && m_dealer_type_isValid;

    m_dealership_group_name_isValid = ::OpenAPI::fromJsonValue(m_dealership_group_name, json[QString("dealership_group_name")]);
    m_dealership_group_name_isSet = !json[QString("dealership_group_name")].isNull() && m_dealership_group_name_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inventory_url_isValid = ::OpenAPI::fromJsonValue(m_inventory_url, json[QString("inventory_url")]);
    m_inventory_url_isSet = !json[QString("inventory_url")].isNull() && m_inventory_url_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_listing_count_isValid = ::OpenAPI::fromJsonValue(m_listing_count, json[QString("listing_count")]);
    m_listing_count_isSet = !json[QString("listing_count")].isNull() && m_listing_count_isValid;

    m_location_ll_isValid = ::OpenAPI::fromJsonValue(m_location_ll, json[QString("location_ll")]);
    m_location_ll_isSet = !json[QString("location_ll")].isNull() && m_location_ll_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_seller_email_isValid = ::OpenAPI::fromJsonValue(m_seller_email, json[QString("seller_email")]);
    m_seller_email_isSet = !json[QString("seller_email")].isNull() && m_seller_email_isValid;

    m_seller_name_isValid = ::OpenAPI::fromJsonValue(m_seller_name, json[QString("seller_name")]);
    m_seller_name_isSet = !json[QString("seller_name")].isNull() && m_seller_name_isValid;

    m_seller_phone_isValid = ::OpenAPI::fromJsonValue(m_seller_phone, json[QString("seller_phone")]);
    m_seller_phone_isSet = !json[QString("seller_phone")].isNull() && m_seller_phone_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIDealer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealer::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_data_source_isSet) {
        obj.insert(QString("data_source"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_dealer_type_isSet) {
        obj.insert(QString("dealer_type"), ::OpenAPI::toJsonValue(m_dealer_type));
    }
    if (m_dealership_group_name_isSet) {
        obj.insert(QString("dealership_group_name"), ::OpenAPI::toJsonValue(m_dealership_group_name));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inventory_url_isSet) {
        obj.insert(QString("inventory_url"), ::OpenAPI::toJsonValue(m_inventory_url));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_listing_count_isSet) {
        obj.insert(QString("listing_count"), ::OpenAPI::toJsonValue(m_listing_count));
    }
    if (m_location_ll_isSet) {
        obj.insert(QString("location_ll"), ::OpenAPI::toJsonValue(m_location_ll));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_seller_email_isSet) {
        obj.insert(QString("seller_email"), ::OpenAPI::toJsonValue(m_seller_email));
    }
    if (m_seller_name_isSet) {
        obj.insert(QString("seller_name"), ::OpenAPI::toJsonValue(m_seller_name));
    }
    if (m_seller_phone_isSet) {
        obj.insert(QString("seller_phone"), ::OpenAPI::toJsonValue(m_seller_phone));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIDealer::getCity() const {
    return m_city;
}
void OAIDealer::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIDealer::is_city_Set() const{
    return m_city_isSet;
}

bool OAIDealer::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIDealer::getCountry() const {
    return m_country;
}
void OAIDealer::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIDealer::is_country_Set() const{
    return m_country_isSet;
}

bool OAIDealer::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIDealer::getDataSource() const {
    return m_data_source;
}
void OAIDealer::setDataSource(const QString &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIDealer::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIDealer::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAIDealer::getDealerType() const {
    return m_dealer_type;
}
void OAIDealer::setDealerType(const QString &dealer_type) {
    m_dealer_type = dealer_type;
    m_dealer_type_isSet = true;
}

bool OAIDealer::is_dealer_type_Set() const{
    return m_dealer_type_isSet;
}

bool OAIDealer::is_dealer_type_Valid() const{
    return m_dealer_type_isValid;
}

QString OAIDealer::getDealershipGroupName() const {
    return m_dealership_group_name;
}
void OAIDealer::setDealershipGroupName(const QString &dealership_group_name) {
    m_dealership_group_name = dealership_group_name;
    m_dealership_group_name_isSet = true;
}

bool OAIDealer::is_dealership_group_name_Set() const{
    return m_dealership_group_name_isSet;
}

bool OAIDealer::is_dealership_group_name_Valid() const{
    return m_dealership_group_name_isValid;
}

double OAIDealer::getDistance() const {
    return m_distance;
}
void OAIDealer::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIDealer::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIDealer::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAIDealer::getId() const {
    return m_id;
}
void OAIDealer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDealer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDealer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDealer::getInventoryUrl() const {
    return m_inventory_url;
}
void OAIDealer::setInventoryUrl(const QString &inventory_url) {
    m_inventory_url = inventory_url;
    m_inventory_url_isSet = true;
}

bool OAIDealer::is_inventory_url_Set() const{
    return m_inventory_url_isSet;
}

bool OAIDealer::is_inventory_url_Valid() const{
    return m_inventory_url_isValid;
}

QString OAIDealer::getLatitude() const {
    return m_latitude;
}
void OAIDealer::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIDealer::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIDealer::is_latitude_Valid() const{
    return m_latitude_isValid;
}

qint32 OAIDealer::getListingCount() const {
    return m_listing_count;
}
void OAIDealer::setListingCount(const qint32 &listing_count) {
    m_listing_count = listing_count;
    m_listing_count_isSet = true;
}

bool OAIDealer::is_listing_count_Set() const{
    return m_listing_count_isSet;
}

bool OAIDealer::is_listing_count_Valid() const{
    return m_listing_count_isValid;
}

QString OAIDealer::getLocationLl() const {
    return m_location_ll;
}
void OAIDealer::setLocationLl(const QString &location_ll) {
    m_location_ll = location_ll;
    m_location_ll_isSet = true;
}

bool OAIDealer::is_location_ll_Set() const{
    return m_location_ll_isSet;
}

bool OAIDealer::is_location_ll_Valid() const{
    return m_location_ll_isValid;
}

QString OAIDealer::getLongitude() const {
    return m_longitude;
}
void OAIDealer::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIDealer::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIDealer::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIDealer::getSellerEmail() const {
    return m_seller_email;
}
void OAIDealer::setSellerEmail(const QString &seller_email) {
    m_seller_email = seller_email;
    m_seller_email_isSet = true;
}

bool OAIDealer::is_seller_email_Set() const{
    return m_seller_email_isSet;
}

bool OAIDealer::is_seller_email_Valid() const{
    return m_seller_email_isValid;
}

QString OAIDealer::getSellerName() const {
    return m_seller_name;
}
void OAIDealer::setSellerName(const QString &seller_name) {
    m_seller_name = seller_name;
    m_seller_name_isSet = true;
}

bool OAIDealer::is_seller_name_Set() const{
    return m_seller_name_isSet;
}

bool OAIDealer::is_seller_name_Valid() const{
    return m_seller_name_isValid;
}

QString OAIDealer::getSellerPhone() const {
    return m_seller_phone;
}
void OAIDealer::setSellerPhone(const QString &seller_phone) {
    m_seller_phone = seller_phone;
    m_seller_phone_isSet = true;
}

bool OAIDealer::is_seller_phone_Set() const{
    return m_seller_phone_isSet;
}

bool OAIDealer::is_seller_phone_Valid() const{
    return m_seller_phone_isValid;
}

QString OAIDealer::getState() const {
    return m_state;
}
void OAIDealer::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDealer::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDealer::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDealer::getStatus() const {
    return m_status;
}
void OAIDealer::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDealer::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDealer::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDealer::getStreet() const {
    return m_street;
}
void OAIDealer::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIDealer::is_street_Set() const{
    return m_street_isSet;
}

bool OAIDealer::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIDealer::getZip() const {
    return m_zip;
}
void OAIDealer::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIDealer::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIDealer::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIDealer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealership_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_ll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
