/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRangeFacetItem.h
 *
 * 
 */

#ifndef OAIRangeFacetItem_H
#define OAIRangeFacetItem_H

#include <QJsonObject>

#include "OAIRangeFacetItem_counts_inner.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRangeFacetItem_counts_inner;

class OAIRangeFacetItem : public OAIObject {
public:
    OAIRangeFacetItem();
    OAIRangeFacetItem(QString json);
    ~OAIRangeFacetItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAfter() const;
    void setAfter(const qint32 &after);
    bool is_after_Set() const;
    bool is_after_Valid() const;

    qint32 getBefore() const;
    void setBefore(const qint32 &before);
    bool is_before_Set() const;
    bool is_before_Valid() const;

    qint32 getBetween() const;
    void setBetween(const qint32 &between);
    bool is_between_Set() const;
    bool is_between_Valid() const;

    QList<OAIRangeFacetItem_counts_inner> getCounts() const;
    void setCounts(const QList<OAIRangeFacetItem_counts_inner> &counts);
    bool is_counts_Set() const;
    bool is_counts_Valid() const;

    qint32 getEnd() const;
    void setEnd(const qint32 &end);
    bool is_end_Set() const;
    bool is_end_Valid() const;

    qint32 getGap() const;
    void setGap(const qint32 &gap);
    bool is_gap_Set() const;
    bool is_gap_Valid() const;

    qint32 getStart() const;
    void setStart(const qint32 &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_after;
    bool m_after_isSet;
    bool m_after_isValid;

    qint32 m_before;
    bool m_before_isSet;
    bool m_before_isValid;

    qint32 m_between;
    bool m_between_isSet;
    bool m_between_isValid;

    QList<OAIRangeFacetItem_counts_inner> m_counts;
    bool m_counts_isSet;
    bool m_counts_isValid;

    qint32 m_end;
    bool m_end_isSet;
    bool m_end_isValid;

    qint32 m_gap;
    bool m_gap_isSet;
    bool m_gap_isValid;

    qint32 m_start;
    bool m_start_isSet;
    bool m_start_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRangeFacetItem)

#endif // OAIRangeFacetItem_H
