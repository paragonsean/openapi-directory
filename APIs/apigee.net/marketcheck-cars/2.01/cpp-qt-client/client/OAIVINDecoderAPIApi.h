/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVINDecoderAPIApi_H
#define OAI_OAIVINDecoderAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBuild.h"
#include "OAIError.h"
#include "OAINeoVIN.h"
#include "OAISpecsAutoCompleteResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVINDecoderAPIApi : public QObject {
    Q_OBJECT

public:
    OAIVINDecoderAPIApi(const int timeOut = 0);
    ~OAIVINDecoderAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  vin QString [required]
    * @param[in]  api_key QString [optional]
    */
    virtual void decode(const QString &vin, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vin QString [required]
    * @param[in]  api_key QString [optional]
    */
    virtual void decodeViaEPI(const QString &vin, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vin QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  include_generic bool [optional]
    * @param[in]  force_decode bool [optional]
    */
    virtual void decodeViaNeoVIN(const QString &vin, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_generic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &force_decode = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  field QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  year QString [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  trim QString [optional]
    * @param[in]  body_type QString [optional]
    * @param[in]  body_subtype QString [optional]
    * @param[in]  vehicle_type QString [optional]
    * @param[in]  transmission QString [optional]
    * @param[in]  drivetrain QString [optional]
    * @param[in]  fuel_type QString [optional]
    * @param[in]  engine QString [optional]
    * @param[in]  engine_size QString [optional]
    * @param[in]  engine_block QString [optional]
    */
    virtual void getTaxonomyTerms(const QString &field, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body_subtype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vehicle_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transmission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drivetrain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fuel_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_block = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  field QString [required]
    * @param[in]  input QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  year QString [optional]
    * @param[in]  make QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  trim QString [optional]
    * @param[in]  body_type QString [optional]
    * @param[in]  body_subtype QString [optional]
    * @param[in]  vehicle_type QString [optional]
    * @param[in]  transmission QString [optional]
    * @param[in]  drivetrain QString [optional]
    * @param[in]  fuel_type QString [optional]
    * @param[in]  engine QString [optional]
    * @param[in]  engine_size QString [optional]
    * @param[in]  engine_block QString [optional]
    * @param[in]  ignore_case bool [optional]
    * @param[in]  facet_min_count double [optional]
    */
    virtual void specsCarAutoCompleteGet(const QString &field, const QString &input, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &make = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body_subtype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vehicle_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transmission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drivetrain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fuel_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_block = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ignore_case = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &facet_min_count = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void decodeCallback(OAIHttpRequestWorker *worker);
    void decodeViaEPICallback(OAIHttpRequestWorker *worker);
    void decodeViaNeoVINCallback(OAIHttpRequestWorker *worker);
    void getTaxonomyTermsCallback(OAIHttpRequestWorker *worker);
    void specsCarAutoCompleteGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void decodeSignal(OAIBuild summary);
    void decodeViaEPISignal(OAIBuild summary);
    void decodeViaNeoVINSignal(OAINeoVIN summary);
    void getTaxonomyTermsSignal(OAISpecsAutoCompleteResponse summary);
    void specsCarAutoCompleteGetSignal(OAISpecsAutoCompleteResponse summary);


    void decodeSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void decodeViaEPISignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void decodeViaNeoVINSignalFull(OAIHttpRequestWorker *worker, OAINeoVIN summary);
    void getTaxonomyTermsSignalFull(OAIHttpRequestWorker *worker, OAISpecsAutoCompleteResponse summary);
    void specsCarAutoCompleteGetSignalFull(OAIHttpRequestWorker *worker, OAISpecsAutoCompleteResponse summary);

    Q_DECL_DEPRECATED_X("Use decodeSignalError() instead")
    void decodeSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void decodeSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use decodeViaEPISignalError() instead")
    void decodeViaEPISignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void decodeViaEPISignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use decodeViaNeoVINSignalError() instead")
    void decodeViaNeoVINSignalE(OAINeoVIN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void decodeViaNeoVINSignalError(OAINeoVIN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaxonomyTermsSignalError() instead")
    void getTaxonomyTermsSignalE(OAISpecsAutoCompleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaxonomyTermsSignalError(OAISpecsAutoCompleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use specsCarAutoCompleteGetSignalError() instead")
    void specsCarAutoCompleteGetSignalE(OAISpecsAutoCompleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void specsCarAutoCompleteGetSignalError(OAISpecsAutoCompleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use decodeSignalErrorFull() instead")
    void decodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void decodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use decodeViaEPISignalErrorFull() instead")
    void decodeViaEPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void decodeViaEPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use decodeViaNeoVINSignalErrorFull() instead")
    void decodeViaNeoVINSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void decodeViaNeoVINSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaxonomyTermsSignalErrorFull() instead")
    void getTaxonomyTermsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaxonomyTermsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use specsCarAutoCompleteGetSignalErrorFull() instead")
    void specsCarAutoCompleteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void specsCarAutoCompleteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
