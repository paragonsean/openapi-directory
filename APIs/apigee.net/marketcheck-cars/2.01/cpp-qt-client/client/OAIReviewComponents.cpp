/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReviewComponents.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReviewComponents::OAIReviewComponents(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReviewComponents::OAIReviewComponents() {
    this->initializeModel();
}

OAIReviewComponents::~OAIReviewComponents() {}

void OAIReviewComponents::initializeModel() {

    m_actual_review_isSet = false;
    m_actual_review_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_user_rating_isSet = false;
    m_user_rating_isValid = false;
}

void OAIReviewComponents::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReviewComponents::fromJsonObject(QJsonObject json) {

    m_actual_review_isValid = ::OpenAPI::fromJsonValue(m_actual_review, json[QString("actual_review")]);
    m_actual_review_isSet = !json[QString("actual_review")].isNull() && m_actual_review_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;

    m_user_rating_isValid = ::OpenAPI::fromJsonValue(m_user_rating, json[QString("user_rating")]);
    m_user_rating_isSet = !json[QString("user_rating")].isNull() && m_user_rating_isValid;
}

QString OAIReviewComponents::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReviewComponents::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_review_isSet) {
        obj.insert(QString("actual_review"), ::OpenAPI::toJsonValue(m_actual_review));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_user_rating_isSet) {
        obj.insert(QString("user_rating"), ::OpenAPI::toJsonValue(m_user_rating));
    }
    return obj;
}

QString OAIReviewComponents::getActualReview() const {
    return m_actual_review;
}
void OAIReviewComponents::setActualReview(const QString &actual_review) {
    m_actual_review = actual_review;
    m_actual_review_isSet = true;
}

bool OAIReviewComponents::is_actual_review_Set() const{
    return m_actual_review_isSet;
}

bool OAIReviewComponents::is_actual_review_Valid() const{
    return m_actual_review_isValid;
}

QString OAIReviewComponents::getUserName() const {
    return m_user_name;
}
void OAIReviewComponents::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIReviewComponents::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIReviewComponents::is_user_name_Valid() const{
    return m_user_name_isValid;
}

double OAIReviewComponents::getUserRating() const {
    return m_user_rating;
}
void OAIReviewComponents::setUserRating(const double &user_rating) {
    m_user_rating = user_rating;
    m_user_rating_isSet = true;
}

bool OAIReviewComponents::is_user_rating_Set() const{
    return m_user_rating_isSet;
}

bool OAIReviewComponents::is_user_rating_Valid() const{
    return m_user_rating_isValid;
}

bool OAIReviewComponents::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_review_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_rating_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReviewComponents::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
