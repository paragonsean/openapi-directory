/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRVBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRVBuild::OAIRVBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRVBuild::OAIRVBuild() {
    this->initializeModel();
}

OAIRVBuild::~OAIRVBuild() {}

void OAIRVBuild::initializeModel() {

    m_area_isSet = false;
    m_area_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_fuel_type_isSet = false;
    m_fuel_type_isValid = false;

    m_gvwr_isSet = false;
    m_gvwr_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_made_in_isSet = false;
    m_made_in_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_sleeps_isSet = false;
    m_sleeps_isValid = false;

    m_slideouts_isSet = false;
    m_slideouts_isValid = false;

    m_transmission_isSet = false;
    m_transmission_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIRVBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRVBuild::fromJsonObject(QJsonObject json) {

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_fuel_type_isValid = ::OpenAPI::fromJsonValue(m_fuel_type, json[QString("fuel_type")]);
    m_fuel_type_isSet = !json[QString("fuel_type")].isNull() && m_fuel_type_isValid;

    m_gvwr_isValid = ::OpenAPI::fromJsonValue(m_gvwr, json[QString("gvwr")]);
    m_gvwr_isSet = !json[QString("gvwr")].isNull() && m_gvwr_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_made_in_isValid = ::OpenAPI::fromJsonValue(m_made_in, json[QString("made_in")]);
    m_made_in_isSet = !json[QString("made_in")].isNull() && m_made_in_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_sleeps_isValid = ::OpenAPI::fromJsonValue(m_sleeps, json[QString("sleeps")]);
    m_sleeps_isSet = !json[QString("sleeps")].isNull() && m_sleeps_isValid;

    m_slideouts_isValid = ::OpenAPI::fromJsonValue(m_slideouts, json[QString("slideouts")]);
    m_slideouts_isSet = !json[QString("slideouts")].isNull() && m_slideouts_isValid;

    m_transmission_isValid = ::OpenAPI::fromJsonValue(m_transmission, json[QString("transmission")]);
    m_transmission_isSet = !json[QString("transmission")].isNull() && m_transmission_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIRVBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRVBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_area_isSet) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_engine_isSet) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_fuel_type_isSet) {
        obj.insert(QString("fuel_type"), ::OpenAPI::toJsonValue(m_fuel_type));
    }
    if (m_gvwr_isSet) {
        obj.insert(QString("gvwr"), ::OpenAPI::toJsonValue(m_gvwr));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_made_in_isSet) {
        obj.insert(QString("made_in"), ::OpenAPI::toJsonValue(m_made_in));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_sleeps_isSet) {
        obj.insert(QString("sleeps"), ::OpenAPI::toJsonValue(m_sleeps));
    }
    if (m_slideouts_isSet) {
        obj.insert(QString("slideouts"), ::OpenAPI::toJsonValue(m_slideouts));
    }
    if (m_transmission_isSet) {
        obj.insert(QString("transmission"), ::OpenAPI::toJsonValue(m_transmission));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIRVBuild::getArea() const {
    return m_area;
}
void OAIRVBuild::setArea(const QString &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIRVBuild::is_area_Set() const{
    return m_area_isSet;
}

bool OAIRVBuild::is_area_Valid() const{
    return m_area_isValid;
}

QString OAIRVBuild::getRClass() const {
    return m_r_class;
}
void OAIRVBuild::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIRVBuild::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIRVBuild::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QString OAIRVBuild::getEngine() const {
    return m_engine;
}
void OAIRVBuild::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIRVBuild::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIRVBuild::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIRVBuild::getFuelType() const {
    return m_fuel_type;
}
void OAIRVBuild::setFuelType(const QString &fuel_type) {
    m_fuel_type = fuel_type;
    m_fuel_type_isSet = true;
}

bool OAIRVBuild::is_fuel_type_Set() const{
    return m_fuel_type_isSet;
}

bool OAIRVBuild::is_fuel_type_Valid() const{
    return m_fuel_type_isValid;
}

QString OAIRVBuild::getGvwr() const {
    return m_gvwr;
}
void OAIRVBuild::setGvwr(const QString &gvwr) {
    m_gvwr = gvwr;
    m_gvwr_isSet = true;
}

bool OAIRVBuild::is_gvwr_Set() const{
    return m_gvwr_isSet;
}

bool OAIRVBuild::is_gvwr_Valid() const{
    return m_gvwr_isValid;
}

QString OAIRVBuild::getLength() const {
    return m_length;
}
void OAIRVBuild::setLength(const QString &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIRVBuild::is_length_Set() const{
    return m_length_isSet;
}

bool OAIRVBuild::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIRVBuild::getMadeIn() const {
    return m_made_in;
}
void OAIRVBuild::setMadeIn(const QString &made_in) {
    m_made_in = made_in;
    m_made_in_isSet = true;
}

bool OAIRVBuild::is_made_in_Set() const{
    return m_made_in_isSet;
}

bool OAIRVBuild::is_made_in_Valid() const{
    return m_made_in_isValid;
}

QString OAIRVBuild::getMake() const {
    return m_make;
}
void OAIRVBuild::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIRVBuild::is_make_Set() const{
    return m_make_isSet;
}

bool OAIRVBuild::is_make_Valid() const{
    return m_make_isValid;
}

QString OAIRVBuild::getModel() const {
    return m_model;
}
void OAIRVBuild::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIRVBuild::is_model_Set() const{
    return m_model_isSet;
}

bool OAIRVBuild::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIRVBuild::getSleeps() const {
    return m_sleeps;
}
void OAIRVBuild::setSleeps(const QString &sleeps) {
    m_sleeps = sleeps;
    m_sleeps_isSet = true;
}

bool OAIRVBuild::is_sleeps_Set() const{
    return m_sleeps_isSet;
}

bool OAIRVBuild::is_sleeps_Valid() const{
    return m_sleeps_isValid;
}

QString OAIRVBuild::getSlideouts() const {
    return m_slideouts;
}
void OAIRVBuild::setSlideouts(const QString &slideouts) {
    m_slideouts = slideouts;
    m_slideouts_isSet = true;
}

bool OAIRVBuild::is_slideouts_Set() const{
    return m_slideouts_isSet;
}

bool OAIRVBuild::is_slideouts_Valid() const{
    return m_slideouts_isValid;
}

QString OAIRVBuild::getTransmission() const {
    return m_transmission;
}
void OAIRVBuild::setTransmission(const QString &transmission) {
    m_transmission = transmission;
    m_transmission_isSet = true;
}

bool OAIRVBuild::is_transmission_Set() const{
    return m_transmission_isSet;
}

bool OAIRVBuild::is_transmission_Valid() const{
    return m_transmission_isValid;
}

qint32 OAIRVBuild::getYear() const {
    return m_year;
}
void OAIRVBuild::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIRVBuild::is_year_Set() const{
    return m_year_isSet;
}

bool OAIRVBuild::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIRVBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gvwr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_made_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sleeps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slideouts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRVBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
