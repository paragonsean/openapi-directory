/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMotorcycleBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMotorcycleBuild::OAIMotorcycleBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMotorcycleBuild::OAIMotorcycleBuild() {
    this->initializeModel();
}

OAIMotorcycleBuild::~OAIMotorcycleBuild() {}

void OAIMotorcycleBuild::initializeModel() {

    m_body_type_isSet = false;
    m_body_type_isValid = false;

    m_cylinders_isSet = false;
    m_cylinders_isValid = false;

    m_drivetrain_isSet = false;
    m_drivetrain_isValid = false;

    m_dry_weight_isSet = false;
    m_dry_weight_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_fuel_type_isSet = false;
    m_fuel_type_isValid = false;

    m_made_in_isSet = false;
    m_made_in_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_transmission_isSet = false;
    m_transmission_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;

    m_vehicle_type_isSet = false;
    m_vehicle_type_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIMotorcycleBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMotorcycleBuild::fromJsonObject(QJsonObject json) {

    m_body_type_isValid = ::OpenAPI::fromJsonValue(m_body_type, json[QString("body_type")]);
    m_body_type_isSet = !json[QString("body_type")].isNull() && m_body_type_isValid;

    m_cylinders_isValid = ::OpenAPI::fromJsonValue(m_cylinders, json[QString("cylinders")]);
    m_cylinders_isSet = !json[QString("cylinders")].isNull() && m_cylinders_isValid;

    m_drivetrain_isValid = ::OpenAPI::fromJsonValue(m_drivetrain, json[QString("drivetrain")]);
    m_drivetrain_isSet = !json[QString("drivetrain")].isNull() && m_drivetrain_isValid;

    m_dry_weight_isValid = ::OpenAPI::fromJsonValue(m_dry_weight, json[QString("dry_weight")]);
    m_dry_weight_isSet = !json[QString("dry_weight")].isNull() && m_dry_weight_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_fuel_type_isValid = ::OpenAPI::fromJsonValue(m_fuel_type, json[QString("fuel_type")]);
    m_fuel_type_isSet = !json[QString("fuel_type")].isNull() && m_fuel_type_isValid;

    m_made_in_isValid = ::OpenAPI::fromJsonValue(m_made_in, json[QString("made_in")]);
    m_made_in_isSet = !json[QString("made_in")].isNull() && m_made_in_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_transmission_isValid = ::OpenAPI::fromJsonValue(m_transmission, json[QString("transmission")]);
    m_transmission_isSet = !json[QString("transmission")].isNull() && m_transmission_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;

    m_vehicle_type_isValid = ::OpenAPI::fromJsonValue(m_vehicle_type, json[QString("vehicle_type")]);
    m_vehicle_type_isSet = !json[QString("vehicle_type")].isNull() && m_vehicle_type_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIMotorcycleBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMotorcycleBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_body_type_isSet) {
        obj.insert(QString("body_type"), ::OpenAPI::toJsonValue(m_body_type));
    }
    if (m_cylinders_isSet) {
        obj.insert(QString("cylinders"), ::OpenAPI::toJsonValue(m_cylinders));
    }
    if (m_drivetrain_isSet) {
        obj.insert(QString("drivetrain"), ::OpenAPI::toJsonValue(m_drivetrain));
    }
    if (m_dry_weight_isSet) {
        obj.insert(QString("dry_weight"), ::OpenAPI::toJsonValue(m_dry_weight));
    }
    if (m_engine_isSet) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_fuel_type_isSet) {
        obj.insert(QString("fuel_type"), ::OpenAPI::toJsonValue(m_fuel_type));
    }
    if (m_made_in_isSet) {
        obj.insert(QString("made_in"), ::OpenAPI::toJsonValue(m_made_in));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_transmission_isSet) {
        obj.insert(QString("transmission"), ::OpenAPI::toJsonValue(m_transmission));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    if (m_vehicle_type_isSet) {
        obj.insert(QString("vehicle_type"), ::OpenAPI::toJsonValue(m_vehicle_type));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIMotorcycleBuild::getBodyType() const {
    return m_body_type;
}
void OAIMotorcycleBuild::setBodyType(const QString &body_type) {
    m_body_type = body_type;
    m_body_type_isSet = true;
}

bool OAIMotorcycleBuild::is_body_type_Set() const{
    return m_body_type_isSet;
}

bool OAIMotorcycleBuild::is_body_type_Valid() const{
    return m_body_type_isValid;
}

qint32 OAIMotorcycleBuild::getCylinders() const {
    return m_cylinders;
}
void OAIMotorcycleBuild::setCylinders(const qint32 &cylinders) {
    m_cylinders = cylinders;
    m_cylinders_isSet = true;
}

bool OAIMotorcycleBuild::is_cylinders_Set() const{
    return m_cylinders_isSet;
}

bool OAIMotorcycleBuild::is_cylinders_Valid() const{
    return m_cylinders_isValid;
}

QString OAIMotorcycleBuild::getDrivetrain() const {
    return m_drivetrain;
}
void OAIMotorcycleBuild::setDrivetrain(const QString &drivetrain) {
    m_drivetrain = drivetrain;
    m_drivetrain_isSet = true;
}

bool OAIMotorcycleBuild::is_drivetrain_Set() const{
    return m_drivetrain_isSet;
}

bool OAIMotorcycleBuild::is_drivetrain_Valid() const{
    return m_drivetrain_isValid;
}

QString OAIMotorcycleBuild::getDryWeight() const {
    return m_dry_weight;
}
void OAIMotorcycleBuild::setDryWeight(const QString &dry_weight) {
    m_dry_weight = dry_weight;
    m_dry_weight_isSet = true;
}

bool OAIMotorcycleBuild::is_dry_weight_Set() const{
    return m_dry_weight_isSet;
}

bool OAIMotorcycleBuild::is_dry_weight_Valid() const{
    return m_dry_weight_isValid;
}

QString OAIMotorcycleBuild::getEngine() const {
    return m_engine;
}
void OAIMotorcycleBuild::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIMotorcycleBuild::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIMotorcycleBuild::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIMotorcycleBuild::getFuelType() const {
    return m_fuel_type;
}
void OAIMotorcycleBuild::setFuelType(const QString &fuel_type) {
    m_fuel_type = fuel_type;
    m_fuel_type_isSet = true;
}

bool OAIMotorcycleBuild::is_fuel_type_Set() const{
    return m_fuel_type_isSet;
}

bool OAIMotorcycleBuild::is_fuel_type_Valid() const{
    return m_fuel_type_isValid;
}

QString OAIMotorcycleBuild::getMadeIn() const {
    return m_made_in;
}
void OAIMotorcycleBuild::setMadeIn(const QString &made_in) {
    m_made_in = made_in;
    m_made_in_isSet = true;
}

bool OAIMotorcycleBuild::is_made_in_Set() const{
    return m_made_in_isSet;
}

bool OAIMotorcycleBuild::is_made_in_Valid() const{
    return m_made_in_isValid;
}

QString OAIMotorcycleBuild::getMake() const {
    return m_make;
}
void OAIMotorcycleBuild::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIMotorcycleBuild::is_make_Set() const{
    return m_make_isSet;
}

bool OAIMotorcycleBuild::is_make_Valid() const{
    return m_make_isValid;
}

QString OAIMotorcycleBuild::getModel() const {
    return m_model;
}
void OAIMotorcycleBuild::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIMotorcycleBuild::is_model_Set() const{
    return m_model_isSet;
}

bool OAIMotorcycleBuild::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIMotorcycleBuild::getTransmission() const {
    return m_transmission;
}
void OAIMotorcycleBuild::setTransmission(const QString &transmission) {
    m_transmission = transmission;
    m_transmission_isSet = true;
}

bool OAIMotorcycleBuild::is_transmission_Set() const{
    return m_transmission_isSet;
}

bool OAIMotorcycleBuild::is_transmission_Valid() const{
    return m_transmission_isValid;
}

QString OAIMotorcycleBuild::getTrim() const {
    return m_trim;
}
void OAIMotorcycleBuild::setTrim(const QString &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIMotorcycleBuild::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIMotorcycleBuild::is_trim_Valid() const{
    return m_trim_isValid;
}

QString OAIMotorcycleBuild::getVehicleType() const {
    return m_vehicle_type;
}
void OAIMotorcycleBuild::setVehicleType(const QString &vehicle_type) {
    m_vehicle_type = vehicle_type;
    m_vehicle_type_isSet = true;
}

bool OAIMotorcycleBuild::is_vehicle_type_Set() const{
    return m_vehicle_type_isSet;
}

bool OAIMotorcycleBuild::is_vehicle_type_Valid() const{
    return m_vehicle_type_isValid;
}

qint32 OAIMotorcycleBuild::getYear() const {
    return m_year;
}
void OAIMotorcycleBuild::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIMotorcycleBuild::is_year_Set() const{
    return m_year_isSet;
}

bool OAIMotorcycleBuild::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIMotorcycleBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cylinders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drivetrain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_made_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMotorcycleBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
