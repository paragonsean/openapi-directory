/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeavyEquipmentsSearchStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeavyEquipmentsSearchStats::OAIHeavyEquipmentsSearchStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeavyEquipmentsSearchStats::OAIHeavyEquipmentsSearchStats() {
    this->initializeModel();
}

OAIHeavyEquipmentsSearchStats::~OAIHeavyEquipmentsSearchStats() {}

void OAIHeavyEquipmentsSearchStats::initializeModel() {

    m_hours_used_isSet = false;
    m_hours_used_isValid = false;

    m_miles_isSet = false;
    m_miles_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAIHeavyEquipmentsSearchStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeavyEquipmentsSearchStats::fromJsonObject(QJsonObject json) {

    m_hours_used_isValid = ::OpenAPI::fromJsonValue(m_hours_used, json[QString("hours_used")]);
    m_hours_used_isSet = !json[QString("hours_used")].isNull() && m_hours_used_isValid;

    m_miles_isValid = ::OpenAPI::fromJsonValue(m_miles, json[QString("miles")]);
    m_miles_isSet = !json[QString("miles")].isNull() && m_miles_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAIHeavyEquipmentsSearchStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeavyEquipmentsSearchStats::asJsonObject() const {
    QJsonObject obj;
    if (m_hours_used.isSet()) {
        obj.insert(QString("hours_used"), ::OpenAPI::toJsonValue(m_hours_used));
    }
    if (m_miles.isSet()) {
        obj.insert(QString("miles"), ::OpenAPI::toJsonValue(m_miles));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

OAIStatsItem OAIHeavyEquipmentsSearchStats::getHoursUsed() const {
    return m_hours_used;
}
void OAIHeavyEquipmentsSearchStats::setHoursUsed(const OAIStatsItem &hours_used) {
    m_hours_used = hours_used;
    m_hours_used_isSet = true;
}

bool OAIHeavyEquipmentsSearchStats::is_hours_used_Set() const{
    return m_hours_used_isSet;
}

bool OAIHeavyEquipmentsSearchStats::is_hours_used_Valid() const{
    return m_hours_used_isValid;
}

OAIStatsItem OAIHeavyEquipmentsSearchStats::getMiles() const {
    return m_miles;
}
void OAIHeavyEquipmentsSearchStats::setMiles(const OAIStatsItem &miles) {
    m_miles = miles;
    m_miles_isSet = true;
}

bool OAIHeavyEquipmentsSearchStats::is_miles_Set() const{
    return m_miles_isSet;
}

bool OAIHeavyEquipmentsSearchStats::is_miles_Valid() const{
    return m_miles_isValid;
}

OAIStatsItem OAIHeavyEquipmentsSearchStats::getPrice() const {
    return m_price;
}
void OAIHeavyEquipmentsSearchStats::setPrice(const OAIStatsItem &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIHeavyEquipmentsSearchStats::is_price_Set() const{
    return m_price_isSet;
}

bool OAIHeavyEquipmentsSearchStats::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIHeavyEquipmentsSearchStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hours_used.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeavyEquipmentsSearchStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
