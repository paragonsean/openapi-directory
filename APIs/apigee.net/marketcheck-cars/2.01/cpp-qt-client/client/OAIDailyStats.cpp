/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDailyStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDailyStats::OAIDailyStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDailyStats::OAIDailyStats() {
    this->initializeModel();
}

OAIDailyStats::~OAIDailyStats() {}

void OAIDailyStats::initializeModel() {

    m_dom_isSet = false;
    m_dom_isValid = false;

    m_miles_stats_isSet = false;
    m_miles_stats_isValid = false;

    m_price_stats_isSet = false;
    m_price_stats_isValid = false;

    m_units_for_sale_isSet = false;
    m_units_for_sale_isValid = false;
}

void OAIDailyStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDailyStats::fromJsonObject(QJsonObject json) {

    m_dom_isValid = ::OpenAPI::fromJsonValue(m_dom, json[QString("dom")]);
    m_dom_isSet = !json[QString("dom")].isNull() && m_dom_isValid;

    m_miles_stats_isValid = ::OpenAPI::fromJsonValue(m_miles_stats, json[QString("miles_stats")]);
    m_miles_stats_isSet = !json[QString("miles_stats")].isNull() && m_miles_stats_isValid;

    m_price_stats_isValid = ::OpenAPI::fromJsonValue(m_price_stats, json[QString("price_stats")]);
    m_price_stats_isSet = !json[QString("price_stats")].isNull() && m_price_stats_isValid;

    m_units_for_sale_isValid = ::OpenAPI::fromJsonValue(m_units_for_sale, json[QString("units_for_sale")]);
    m_units_for_sale_isSet = !json[QString("units_for_sale")].isNull() && m_units_for_sale_isValid;
}

QString OAIDailyStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDailyStats::asJsonObject() const {
    QJsonObject obj;
    if (m_dom.isSet()) {
        obj.insert(QString("dom"), ::OpenAPI::toJsonValue(m_dom));
    }
    if (m_miles_stats.isSet()) {
        obj.insert(QString("miles_stats"), ::OpenAPI::toJsonValue(m_miles_stats));
    }
    if (m_price_stats.isSet()) {
        obj.insert(QString("price_stats"), ::OpenAPI::toJsonValue(m_price_stats));
    }
    if (m_units_for_sale_isSet) {
        obj.insert(QString("units_for_sale"), ::OpenAPI::toJsonValue(m_units_for_sale));
    }
    return obj;
}

OAIDailyStatsNestedJson OAIDailyStats::getDom() const {
    return m_dom;
}
void OAIDailyStats::setDom(const OAIDailyStatsNestedJson &dom) {
    m_dom = dom;
    m_dom_isSet = true;
}

bool OAIDailyStats::is_dom_Set() const{
    return m_dom_isSet;
}

bool OAIDailyStats::is_dom_Valid() const{
    return m_dom_isValid;
}

OAIDailyStatsNestedJson OAIDailyStats::getMilesStats() const {
    return m_miles_stats;
}
void OAIDailyStats::setMilesStats(const OAIDailyStatsNestedJson &miles_stats) {
    m_miles_stats = miles_stats;
    m_miles_stats_isSet = true;
}

bool OAIDailyStats::is_miles_stats_Set() const{
    return m_miles_stats_isSet;
}

bool OAIDailyStats::is_miles_stats_Valid() const{
    return m_miles_stats_isValid;
}

OAIDailyStatsNestedJson OAIDailyStats::getPriceStats() const {
    return m_price_stats;
}
void OAIDailyStats::setPriceStats(const OAIDailyStatsNestedJson &price_stats) {
    m_price_stats = price_stats;
    m_price_stats_isSet = true;
}

bool OAIDailyStats::is_price_stats_Set() const{
    return m_price_stats_isSet;
}

bool OAIDailyStats::is_price_stats_Valid() const{
    return m_price_stats_isValid;
}

double OAIDailyStats::getUnitsForSale() const {
    return m_units_for_sale;
}
void OAIDailyStats::setUnitsForSale(const double &units_for_sale) {
    m_units_for_sale = units_for_sale;
    m_units_for_sale_isSet = true;
}

bool OAIDailyStats::is_units_for_sale_Set() const{
    return m_units_for_sale_isSet;
}

bool OAIDailyStats::is_units_for_sale_Valid() const{
    return m_units_for_sale_isValid;
}

bool OAIDailyStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_for_sale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDailyStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
