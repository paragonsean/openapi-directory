/**
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPredictedSpecs.h
 *
 * Specs of predicted vehicle
 */

#ifndef OAIPredictedSpecs_H
#define OAIPredictedSpecs_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPredictedSpecs : public OAIObject {
public:
    OAIPredictedSpecs();
    OAIPredictedSpecs(QString json);
    ~OAIPredictedSpecs() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBaseExteriorColor() const;
    void setBaseExteriorColor(const QString &base_exterior_color);
    bool is_base_exterior_color_Set() const;
    bool is_base_exterior_color_Valid() const;

    QString getBaseInteriorColor() const;
    void setBaseInteriorColor(const QString &base_interior_color);
    bool is_base_interior_color_Set() const;
    bool is_base_interior_color_Valid() const;

    bool isCarfax1Owner() const;
    void setCarfax1Owner(const bool &carfax_1_owner);
    bool is_carfax_1_owner_Set() const;
    bool is_carfax_1_owner_Valid() const;

    bool isCarfaxCleanTitle() const;
    void setCarfaxCleanTitle(const bool &carfax_clean_title);
    bool is_carfax_clean_title_Set() const;
    bool is_carfax_clean_title_Valid() const;

    double getCityMpg() const;
    void setCityMpg(const double &city_mpg);
    bool is_city_mpg_Set() const;
    bool is_city_mpg_Valid() const;

    qint32 getCylinders() const;
    void setCylinders(const qint32 &cylinders);
    bool is_cylinders_Set() const;
    bool is_cylinders_Valid() const;

    qint32 getDoors() const;
    void setDoors(const qint32 &doors);
    bool is_doors_Set() const;
    bool is_doors_Valid() const;

    QString getDrivetrain() const;
    void setDrivetrain(const QString &drivetrain);
    bool is_drivetrain_Set() const;
    bool is_drivetrain_Valid() const;

    QString getEngineBlock() const;
    void setEngineBlock(const QString &engine_block);
    bool is_engine_block_Set() const;
    bool is_engine_block_Valid() const;

    double getEngineSize() const;
    void setEngineSize(const double &engine_size);
    bool is_engine_size_Set() const;
    bool is_engine_size_Valid() const;

    double getHighwayMpg() const;
    void setHighwayMpg(const double &highway_mpg);
    bool is_highway_mpg_Set() const;
    bool is_highway_mpg_Valid() const;

    bool isIsCertified() const;
    void setIsCertified(const bool &is_certified);
    bool is_is_certified_Set() const;
    bool is_is_certified_Valid() const;

    double getLatitude() const;
    void setLatitude(const double &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    double getLongitude() const;
    void setLongitude(const double &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    QString getMake() const;
    void setMake(const QString &make);
    bool is_make_Set() const;
    bool is_make_Valid() const;

    qint32 getMiles() const;
    void setMiles(const qint32 &miles);
    bool is_miles_Set() const;
    bool is_miles_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getTransmission() const;
    void setTransmission(const QString &transmission);
    bool is_transmission_Set() const;
    bool is_transmission_Valid() const;

    QString getTrim() const;
    void setTrim(const QString &trim);
    bool is_trim_Set() const;
    bool is_trim_Valid() const;

    qint32 getYear() const;
    void setYear(const qint32 &year);
    bool is_year_Set() const;
    bool is_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_base_exterior_color;
    bool m_base_exterior_color_isSet;
    bool m_base_exterior_color_isValid;

    QString m_base_interior_color;
    bool m_base_interior_color_isSet;
    bool m_base_interior_color_isValid;

    bool m_carfax_1_owner;
    bool m_carfax_1_owner_isSet;
    bool m_carfax_1_owner_isValid;

    bool m_carfax_clean_title;
    bool m_carfax_clean_title_isSet;
    bool m_carfax_clean_title_isValid;

    double m_city_mpg;
    bool m_city_mpg_isSet;
    bool m_city_mpg_isValid;

    qint32 m_cylinders;
    bool m_cylinders_isSet;
    bool m_cylinders_isValid;

    qint32 m_doors;
    bool m_doors_isSet;
    bool m_doors_isValid;

    QString m_drivetrain;
    bool m_drivetrain_isSet;
    bool m_drivetrain_isValid;

    QString m_engine_block;
    bool m_engine_block_isSet;
    bool m_engine_block_isValid;

    double m_engine_size;
    bool m_engine_size_isSet;
    bool m_engine_size_isValid;

    double m_highway_mpg;
    bool m_highway_mpg_isSet;
    bool m_highway_mpg_isValid;

    bool m_is_certified;
    bool m_is_certified_isSet;
    bool m_is_certified_isValid;

    double m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    double m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    QString m_make;
    bool m_make_isSet;
    bool m_make_isValid;

    qint32 m_miles;
    bool m_miles_isSet;
    bool m_miles_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString m_transmission;
    bool m_transmission_isSet;
    bool m_transmission_isValid;

    QString m_trim;
    bool m_trim_isSet;
    bool m_trim_isValid;

    qint32 m_year;
    bool m_year_isSet;
    bool m_year_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPredictedSpecs)

#endif // OAIPredictedSpecs_H
