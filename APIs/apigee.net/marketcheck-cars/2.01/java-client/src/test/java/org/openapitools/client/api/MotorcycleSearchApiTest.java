/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ListingExtraAttributes;
import org.openapitools.client.model.ListingMedia;
import org.openapitools.client.model.MotorcycleListing;
import org.openapitools.client.model.MotorcycleSearchResponse;
import org.openapitools.client.model.SearchAutoCompleteResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MotorcycleSearchApi
 */
@Disabled
public class MotorcycleSearchApiTest {

    private final MotorcycleSearchApi api = new MotorcycleSearchApi();

    /**
     * Long text Motorcycle Listings attributes for Listing with the given id
     *
     * Get Motorcycle listing options, features, seller comments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingMotorcycleIdExtraGetTest() throws ApiException {
        String id = null;
        String apiKey = null;
        ListingExtraAttributes response = api.listingMotorcycleIdExtraGet(id, apiKey);
        // TODO: test validations
    }

    /**
     * Motorcycle listing by id
     *
     * Get a particular Motorcycle listing by its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingMotorcycleIdGetTest() throws ApiException {
        String id = null;
        String apiKey = null;
        MotorcycleListing response = api.listingMotorcycleIdGet(id, apiKey);
        // TODO: test validations
    }

    /**
     * Motorcycle listing media by id
     *
     * Get Motorcycle listing media (photo, photos) by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingMotorcycleIdMediaGetTest() throws ApiException {
        String id = null;
        String apiKey = null;
        ListingMedia response = api.listingMotorcycleIdMediaGet(id, apiKey);
        // TODO: test validations
    }

    /**
     * Gets active motorcycle listings for the given search criteria
     *
     * This endpoint provides search on motorcycle inventory. This API produces a list of currently active motorcycles from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search motorcycles around a given geo-point within a given radius  2. Search motorcycles for a specific year / make / model or combination of these  3. Search motorcycles matching multiple year, make, model combinatins in the same search request 4. Filter results by most motorcycle specification attributes 5. Search for similar motorcycles by VIN or Taxonomy VIN  6. Filter motorcycles within a given price / miles range 7. Specify a sort order for the results on price / miles / listed date  8. Search motorcycles for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles for your search
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchMotorcycleActiveGetTest() throws ApiException {
        String apiKey = null;
        String priceRange = null;
        String milesRange = null;
        String msrpRange = null;
        Double latitude = null;
        Double longitude = null;
        Integer radius = null;
        String searchText = null;
        String year = null;
        String make = null;
        String model = null;
        String trim = null;
        String vin = null;
        String taxonomyVin = null;
        String inventoryType = null;
        String stockNo = null;
        String source = null;
        String dealerId = null;
        String color = null;
        String bodyType = null;
        String vehicleType = null;
        String cylinders = null;
        String drivetrain = null;
        String engine = null;
        String fuelType = null;
        String transmission = null;
        String state = null;
        String city = null;
        String zip = null;
        String msaCode = null;
        String sortBy = null;
        String sortOrder = null;
        Integer rows = null;
        Integer start = null;
        String facets = null;
        String rangeFacets = null;
        String facetSort = null;
        String stats = null;
        String lastSeenRange = null;
        String firstSeenRange = null;
        String lastSeenDays = null;
        String firstSeenDays = null;
        MotorcycleSearchResponse response = api.searchMotorcycleActiveGet(apiKey, priceRange, milesRange, msrpRange, latitude, longitude, radius, searchText, year, make, model, trim, vin, taxonomyVin, inventoryType, stockNo, source, dealerId, color, bodyType, vehicleType, cylinders, drivetrain, engine, fuelType, transmission, state, city, zip, msaCode, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays);
        // TODO: test validations
    }

    /**
     * API for auto-completion of inputs
     *
     * Auto-complete the inputs of your end users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchMotorcycleAutoCompleteGetTest() throws ApiException {
        String field = null;
        String input = null;
        String apiKey = null;
        String year = null;
        String make = null;
        String model = null;
        String trim = null;
        String bodyType = null;
        String vehicleType = null;
        String transmission = null;
        String drivetrain = null;
        String fuelType = null;
        String color = null;
        String engine = null;
        String state = null;
        String city = null;
        String inventoryType = null;
        Boolean ignoreCase = null;
        Boolean termCounts = null;
        String sortBy = null;
        String sellerType = null;
        Integer radius = null;
        String zip = null;
        BigDecimal facetMinCount = null;
        SearchAutoCompleteResponse response = api.searchMotorcycleAutoCompleteGet(field, input, apiKey, year, make, model, trim, bodyType, vehicleType, transmission, drivetrain, fuelType, color, engine, state, city, inventoryType, ignoreCase, termCounts, sortBy, sellerType, radius, zip, facetMinCount);
        // TODO: test validations
    }

}
