/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DailyStats;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FareValue;
import org.openapitools.client.model.Mds;
import org.openapitools.client.model.PopularCars;
import org.openapitools.client.model.PricePrediction;
import org.openapitools.client.model.Sales;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CarsMarketApiApi
 */
@Disabled
public class CarsMarketApiApiTest {

    private final CarsMarketApiApi api = new CarsMarketApiApi();

    /**
     * Predict fare value of car for UK based on YMMT &amp; miles
     *
     * Predict fare value of car for UK based on YMMT &amp; miles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fareValueTest() throws ApiException {
        String apiKey = null;
        String vrm = null;
        Integer year = null;
        String make = null;
        String model = null;
        String variant = null;
        Integer miles = null;
        String postalCode = null;
        Integer radius = null;
        FareValue response = api.fareValue(apiKey, vrm, year, make, model, variant, miles, postalCode, radius);
        // TODO: test validations
    }

    /**
     * Price, Miles and Days on Market stats
     *
     * National, state and city level stats for price, miles and dom
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDailyStatsTest() throws ApiException {
        String apiKey = null;
        String country = null;
        String carType = null;
        String ymm = null;
        String ymmt = null;
        String taxonomyVin = null;
        String vin = null;
        String state = null;
        String cityState = null;
        DailyStats response = api.getDailyStats(apiKey, country, carType, ymm, ymmt, taxonomyVin, vin, state, cityState);
        // TODO: test validations
    }

    /**
     * Market Days Supply
     *
     * Get the basic information on specifications for a car identified by a valid VIN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMDSTest() throws ApiException {
        String apiKey = null;
        String vin = null;
        Boolean exact = null;
        Double latitude = null;
        Double longitude = null;
        Integer radius = null;
        String zip = null;
        String msaCode = null;
        Boolean debug = null;
        Boolean includeSold = null;
        String country = null;
        String state = null;
        String city = null;
        String ymmt = null;
        String carType = null;
        String leaseTerm = null;
        String leaseDownPayment = null;
        String leaseEmp = null;
        String financeLoanTerm = null;
        String financeLoanApr = null;
        String financeEmp = null;
        String financeDownPayment = null;
        String financeDownPaymentPer = null;
        String carfax1Owner = null;
        String carfaxCleanTitle = null;
        String year = null;
        String make = null;
        String model = null;
        String trim = null;
        String dealerId = null;
        String source = null;
        String bodyType = null;
        String bodySubtype = null;
        String vehicleType = null;
        String cylinders = null;
        String transmission = null;
        String doors = null;
        String drivetrain = null;
        String exteriorColor = null;
        String interiorColor = null;
        String baseExteriorColor = null;
        String baseInteriorColor = null;
        String engine = null;
        String engineSize = null;
        String engineAspiration = null;
        String engineBlock = null;
        String highwayMpgRange = null;
        String cityMpgRange = null;
        String milesRange = null;
        String priceRange = null;
        String msrpRange = null;
        String domRange = null;
        String dealershipGroupName = null;
        String domActiveRange = null;
        String dom180Range = null;
        String fuelType = null;
        String dealerType = null;
        String engineSizeRange = null;
        Mds response = api.getMDS(apiKey, vin, exact, latitude, longitude, radius, zip, msaCode, debug, includeSold, country, state, city, ymmt, carType, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carfax1Owner, carfaxCleanTitle, year, make, model, trim, dealerId, source, bodyType, bodySubtype, vehicleType, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, dealershipGroupName, domActiveRange, dom180Range, fuelType, dealerType, engineSizeRange);
        // TODO: test validations
    }

    /**
     * Get make model wise top 50 popular cars on national, state, city level
     *
     * Get make model wise top 50 popular cars on national, state, city level
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPopularCarsTest() throws ApiException {
        String carType = null;
        String apiKey = null;
        String state = null;
        String cityState = null;
        String country = null;
        PopularCars response = api.getPopularCars(carType, apiKey, state, cityState, country);
        // TODO: test validations
    }

    /**
     * Get sales count by make, model, year, trim or taxonomy vin
     *
     * Get a sales count for city, state or national level by make, model, year, trim or taxonomy vin
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSalesCountTest() throws ApiException {
        String apiKey = null;
        String carType = null;
        String make = null;
        String mm = null;
        String ymm = null;
        String ymmt = null;
        String taxonomyVin = null;
        String state = null;
        String cityState = null;
        String vin = null;
        String country = null;
        Sales response = api.getSalesCount(apiKey, carType, make, mm, ymm, ymmt, taxonomyVin, state, cityState, vin, country);
        // TODO: test validations
    }

    /**
     * Predict car price based on it&#39;s specifications
     *
     * Predict car price based on it&#39;s specifications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void predictCarPriceTest() throws ApiException {
        String carType = null;
        String apiKey = null;
        String vin = null;
        Integer year = null;
        String make = null;
        String model = null;
        String trim = null;
        Boolean isCertified = null;
        Boolean carfax1Owner = null;
        Boolean carfaxCleanTitle = null;
        String baseExteriorColor = null;
        String baseInteriorColor = null;
        String transmission = null;
        String drivetrain = null;
        BigDecimal engineSize = null;
        String engineBlock = null;
        Integer cylinders = null;
        Integer doors = null;
        Integer highwayMpg = null;
        Integer cityMpg = null;
        BigDecimal latitude = null;
        BigDecimal longitude = null;
        Integer miles = null;
        String zip = null;
        String country = null;
        PricePrediction response = api.predictCarPrice(carType, apiKey, vin, year, make, model, trim, isCertified, carfax1Owner, carfaxCleanTitle, baseExteriorColor, baseInteriorColor, transmission, drivetrain, engineSize, engineBlock, cylinders, doors, highwayMpg, cityMpg, latitude, longitude, miles, zip, country);
        // TODO: test validations
    }

    /**
     * Predict car price for UK based on it&#39;s specifications
     *
     * Predict car price for UK based on it&#39;s specifications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void predictUkCarPriceTest() throws ApiException {
        String apiKey = null;
        String vrm = null;
        Integer year = null;
        String make = null;
        String model = null;
        String trim = null;
        String baseExteriorColor = null;
        String transmission = null;
        String drivetrain = null;
        Double engineSize = null;
        Integer cylinders = null;
        Integer doors = null;
        String fuelType = null;
        Double highwayMpg = null;
        Double cityMpg = null;
        Double combinedMpg = null;
        BigDecimal latitude = null;
        BigDecimal longitude = null;
        Integer miles = null;
        String zip = null;
        PricePrediction response = api.predictUkCarPrice(apiKey, vrm, year, make, model, trim, baseExteriorColor, transmission, drivetrain, engineSize, cylinders, doors, fuelType, highwayMpg, cityMpg, combinedMpg, latitude, longitude, miles, zip);
        // TODO: test validations
    }

}
