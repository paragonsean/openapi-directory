/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.NeoVIN;
import org.openapitools.client.model.SpecsAutoCompleteResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VinDecoderApiApi
 */
@Disabled
public class VinDecoderApiApiTest {

    private final VinDecoderApiApi api = new VinDecoderApiApi();

    /**
     * VIN Decoder
     *
     * Get the basic information on specifications for a car identified by a valid VIN
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void decodeTest() throws ApiException {
        String vin = null;
        String apiKey = null;
        Build response = api.decode(vin, apiKey);
        // TODO: test validations
    }

    /**
     * EPI VIN Decoder
     *
     * Get the basic information on specifications for a car identified by a valid VIN from EPI&#39;s decoder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void decodeViaEPITest() throws ApiException {
        String vin = null;
        String apiKey = null;
        Build response = api.decodeViaEPI(vin, apiKey);
        // TODO: test validations
    }

    /**
     * NeoVIN Decoder
     *
     * Get the basic information on specifications for a car identified by a valid VIN from NeoVIN decoder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void decodeViaNeoVINTest() throws ApiException {
        String vin = null;
        String apiKey = null;
        Boolean includeGeneric = null;
        Boolean forceDecode = null;
        NeoVIN response = api.decodeViaNeoVIN(vin, apiKey, includeGeneric, forceDecode);
        // TODO: test validations
    }

    /**
     * API for getting terms from taxonomy
     *
     * Facets on taxonomy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxonomyTermsTest() throws ApiException {
        String field = null;
        String apiKey = null;
        String year = null;
        String make = null;
        String model = null;
        String trim = null;
        String bodyType = null;
        String bodySubtype = null;
        String vehicleType = null;
        String transmission = null;
        String drivetrain = null;
        String fuelType = null;
        String engine = null;
        String engineSize = null;
        String engineBlock = null;
        SpecsAutoCompleteResponse response = api.getTaxonomyTerms(field, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, engine, engineSize, engineBlock);
        // TODO: test validations
    }

    /**
     * API for auto-completion of inputs based on taxonomy
     *
     * Auto-complete the inputs of your end users, not from active set but from taxonomy (decoder database)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void specsCarAutoCompleteGetTest() throws ApiException {
        String field = null;
        String input = null;
        String apiKey = null;
        String year = null;
        String make = null;
        String model = null;
        String trim = null;
        String bodyType = null;
        String bodySubtype = null;
        String vehicleType = null;
        String transmission = null;
        String drivetrain = null;
        String fuelType = null;
        String engine = null;
        String engineSize = null;
        String engineBlock = null;
        Boolean ignoreCase = null;
        BigDecimal facetMinCount = null;
        SpecsAutoCompleteResponse response = api.specsCarAutoCompleteGet(field, input, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, engine, engineSize, engineBlock, ignoreCase, facetMinCount);
        // TODO: test validations
    }

}
