/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BaseListing;
import org.openapitools.client.model.CarSearchFacets;
import org.openapitools.client.model.CarSearchRangeFacets;
import org.openapitools.client.model.CarSearchStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Search query response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchResponse {
  public static final String SERIALIZED_NAME_FACETS = "facets";
  @SerializedName(SERIALIZED_NAME_FACETS)
  private CarSearchFacets facets;

  public static final String SERIALIZED_NAME_LISTINGS = "listings";
  @SerializedName(SERIALIZED_NAME_LISTINGS)
  private List<BaseListing> listings = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUM_FOUND = "num_found";
  @SerializedName(SERIALIZED_NAME_NUM_FOUND)
  private Integer numFound;

  public static final String SERIALIZED_NAME_RANGE_FACETS = "range_facets";
  @SerializedName(SERIALIZED_NAME_RANGE_FACETS)
  private CarSearchRangeFacets rangeFacets;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private CarSearchStats stats;

  public SearchResponse() {
  }

  public SearchResponse facets(CarSearchFacets facets) {
    this.facets = facets;
    return this;
  }

  /**
   * Get facets
   * @return facets
   */
  @javax.annotation.Nullable
  public CarSearchFacets getFacets() {
    return facets;
  }

  public void setFacets(CarSearchFacets facets) {
    this.facets = facets;
  }


  public SearchResponse listings(List<BaseListing> listings) {
    this.listings = listings;
    return this;
  }

  public SearchResponse addListingsItem(BaseListing listingsItem) {
    if (this.listings == null) {
      this.listings = new ArrayList<>();
    }
    this.listings.add(listingsItem);
    return this;
  }

  /**
   * Get listings
   * @return listings
   */
  @javax.annotation.Nullable
  public List<BaseListing> getListings() {
    return listings;
  }

  public void setListings(List<BaseListing> listings) {
    this.listings = listings;
  }


  public SearchResponse numFound(Integer numFound) {
    this.numFound = numFound;
    return this;
  }

  /**
   * The number of listings found
   * @return numFound
   */
  @javax.annotation.Nullable
  public Integer getNumFound() {
    return numFound;
  }

  public void setNumFound(Integer numFound) {
    this.numFound = numFound;
  }


  public SearchResponse rangeFacets(CarSearchRangeFacets rangeFacets) {
    this.rangeFacets = rangeFacets;
    return this;
  }

  /**
   * Get rangeFacets
   * @return rangeFacets
   */
  @javax.annotation.Nullable
  public CarSearchRangeFacets getRangeFacets() {
    return rangeFacets;
  }

  public void setRangeFacets(CarSearchRangeFacets rangeFacets) {
    this.rangeFacets = rangeFacets;
  }


  public SearchResponse stats(CarSearchStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public CarSearchStats getStats() {
    return stats;
  }

  public void setStats(CarSearchStats stats) {
    this.stats = stats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResponse searchResponse = (SearchResponse) o;
    return Objects.equals(this.facets, searchResponse.facets) &&
        Objects.equals(this.listings, searchResponse.listings) &&
        Objects.equals(this.numFound, searchResponse.numFound) &&
        Objects.equals(this.rangeFacets, searchResponse.rangeFacets) &&
        Objects.equals(this.stats, searchResponse.stats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facets, listings, numFound, rangeFacets, stats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResponse {\n");
    sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
    sb.append("    listings: ").append(toIndentedString(listings)).append("\n");
    sb.append("    numFound: ").append(toIndentedString(numFound)).append("\n");
    sb.append("    rangeFacets: ").append(toIndentedString(rangeFacets)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facets");
    openapiFields.add("listings");
    openapiFields.add("num_found");
    openapiFields.add("range_facets");
    openapiFields.add("stats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResponse is not found in the empty JSON string", SearchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `facets`
      if (jsonObj.get("facets") != null && !jsonObj.get("facets").isJsonNull()) {
        CarSearchFacets.validateJsonElement(jsonObj.get("facets"));
      }
      if (jsonObj.get("listings") != null && !jsonObj.get("listings").isJsonNull()) {
        JsonArray jsonArraylistings = jsonObj.getAsJsonArray("listings");
        if (jsonArraylistings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listings` to be an array in the JSON string but got `%s`", jsonObj.get("listings").toString()));
          }

          // validate the optional field `listings` (array)
          for (int i = 0; i < jsonArraylistings.size(); i++) {
            BaseListing.validateJsonElement(jsonArraylistings.get(i));
          };
        }
      }
      // validate the optional field `range_facets`
      if (jsonObj.get("range_facets") != null && !jsonObj.get("range_facets").isJsonNull()) {
        CarSearchRangeFacets.validateJsonElement(jsonObj.get("range_facets"));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        CarSearchStats.validateJsonElement(jsonObj.get("stats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResponse>() {
           @Override
           public void write(JsonWriter out, SearchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchResponse
   * @throws IOException if the JSON string is invalid with respect to SearchResponse
   */
  public static SearchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResponse.class);
  }

  /**
   * Convert an instance of SearchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

