/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CarRankRequest;
import org.openapitools.client.model.CarRankResponse;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RankCarListingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RankCarListingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RankCarListingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rankCar
     * @param carRankRequest Inputs needed for ranking a group of car listings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rank listings based on inputs provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankCarCall(CarRankRequest carRankRequest, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = carRankRequest;

        // create path and map variables
        String localVarPath = "/search/car/active/rank/listings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rankCarValidateBeforeCall(CarRankRequest carRankRequest, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carRankRequest' is set
        if (carRankRequest == null) {
            throw new ApiException("Missing the required parameter 'carRankRequest' when calling rankCar(Async)");
        }

        return rankCarCall(carRankRequest, apiKey, appendApiKey, _callback);

    }

    /**
     * Compute relative rank for car listings.
     * Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.
     * @param carRankRequest Inputs needed for ranking a group of car listings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return CarRankResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rank listings based on inputs provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CarRankResponse rankCar(CarRankRequest carRankRequest, String apiKey, Boolean appendApiKey) throws ApiException {
        ApiResponse<CarRankResponse> localVarResp = rankCarWithHttpInfo(carRankRequest, apiKey, appendApiKey);
        return localVarResp.getData();
    }

    /**
     * Compute relative rank for car listings.
     * Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.
     * @param carRankRequest Inputs needed for ranking a group of car listings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return ApiResponse&lt;CarRankResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rank listings based on inputs provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarRankResponse> rankCarWithHttpInfo(CarRankRequest carRankRequest, String apiKey, Boolean appendApiKey) throws ApiException {
        okhttp3.Call localVarCall = rankCarValidateBeforeCall(carRankRequest, apiKey, appendApiKey, null);
        Type localVarReturnType = new TypeToken<CarRankResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compute relative rank for car listings. (asynchronously)
     * Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.
     * @param carRankRequest Inputs needed for ranking a group of car listings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rank listings based on inputs provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rankCarAsync(CarRankRequest carRankRequest, String apiKey, Boolean appendApiKey, final ApiCallback<CarRankResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rankCarValidateBeforeCall(carRankRequest, apiKey, appendApiKey, _callback);
        Type localVarReturnType = new TypeToken<CarRankResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAndRankCar
     * @param carRankRequest Inputs needed for ranking a group of car listings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional, default to 1-)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional, default to 1-)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rank listings based on inputs provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAndRankCarCall(CarRankRequest carRankRequest, String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String inventoryType, BigDecimal page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = carRankRequest;

        // create path and map variables
        String localVarPath = "/search/car/active/rank";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (includeLease != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_lease", includeLease));
        }

        if (includeFinance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_finance", includeFinance));
        }

        if (leaseTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_term", leaseTerm));
        }

        if (leaseDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_down_payment", leaseDownPayment));
        }

        if (leaseEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_emp", leaseEmp));
        }

        if (financeLoanTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_term", financeLoanTerm));
        }

        if (financeLoanApr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_apr", financeLoanApr));
        }

        if (financeEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_emp", financeEmp));
        }

        if (financeDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment", financeDownPayment));
        }

        if (financeDownPaymentPer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment_per", financeDownPaymentPer));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (carfax1Owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_1_owner", carfax1Owner));
        }

        if (carfaxCleanTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_clean_title", carfaxCleanTitle));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (vins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vins", vins));
        }

        if (taxonomyVins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxonomy_vins", taxonomyVins));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineAspiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_aspiration", engineAspiration));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (highwayMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg_range", highwayMpgRange));
        }

        if (cityMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg_range", cityMpgRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (domRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_range", domRange));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (includeNonVinListings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_non_vin_listings", includeNonVinListings));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (plot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plot", plot));
        }

        if (nodedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodedup", nodedup));
        }

        if (dedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedup", dedup));
        }

        if (owned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owned", owned));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (trimO != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_o", trimO));
        }

        if (trimR != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_r", trimR));
        }

        if (domActiveRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_active_range", domActiveRange));
        }

        if (dom180Range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_180_range", dom180Range));
        }

        if (excludeCertified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_certified", excludeCertified));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (photoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links", photoLinks));
        }

        if (photoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links_cached", photoLinksCached));
        }

        if (stockNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_no", stockNo));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (firstSeenAtSourceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_range", firstSeenAtSourceRange));
        }

        if (firstSeenAtMcRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_range", firstSeenAtMcRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        if (firstSeenAtSourceDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_days", firstSeenAtSourceDays));
        }

        if (firstSeenAtMcDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_days", firstSeenAtMcDays));
        }

        if (inventoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_type", inventoryType));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAndRankCarValidateBeforeCall(CarRankRequest carRankRequest, String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String inventoryType, BigDecimal page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carRankRequest' is set
        if (carRankRequest == null) {
            throw new ApiException("Missing the required parameter 'carRankRequest' when calling searchAndRankCar(Async)");
        }

        return searchAndRankCarCall(carRankRequest, apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, inventoryType, page, _callback);

    }

    /**
     * Compute relative rank for car listings.
     * Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.
     * @param carRankRequest Inputs needed for ranking a group of car listings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional, default to 1-)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional, default to 1-)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @return CarRankResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rank listings based on inputs provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CarRankResponse searchAndRankCar(CarRankRequest carRankRequest, String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String inventoryType, BigDecimal page) throws ApiException {
        ApiResponse<CarRankResponse> localVarResp = searchAndRankCarWithHttpInfo(carRankRequest, apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, inventoryType, page);
        return localVarResp.getData();
    }

    /**
     * Compute relative rank for car listings.
     * Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.
     * @param carRankRequest Inputs needed for ranking a group of car listings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional, default to 1-)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional, default to 1-)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @return ApiResponse&lt;CarRankResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rank listings based on inputs provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarRankResponse> searchAndRankCarWithHttpInfo(CarRankRequest carRankRequest, String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String inventoryType, BigDecimal page) throws ApiException {
        okhttp3.Call localVarCall = searchAndRankCarValidateBeforeCall(carRankRequest, apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, inventoryType, page, null);
        Type localVarReturnType = new TypeToken<CarRankResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compute relative rank for car listings. (asynchronously)
     * Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.
     * @param carRankRequest Inputs needed for ranking a group of car listings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional, default to 1-)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional, default to 1-)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rank listings based on inputs provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAndRankCarAsync(CarRankRequest carRankRequest, String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String inventoryType, BigDecimal page, final ApiCallback<CarRankResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAndRankCarValidateBeforeCall(carRankRequest, apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, inventoryType, page, _callback);
        Type localVarReturnType = new TypeToken<CarRankResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
