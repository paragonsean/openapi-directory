/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DepreciationStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DepreciationStats {
  public static final String SERIALIZED_NAME_CURRENT_VALUE = "current_value";
  @SerializedName(SERIALIZED_NAME_CURRENT_VALUE)
  private BigDecimal currentValue;

  public static final String SERIALIZED_NAME_FIVE_YEAR_FROM_NOW = "five_year_from_now";
  @SerializedName(SERIALIZED_NAME_FIVE_YEAR_FROM_NOW)
  private BigDecimal fiveYearFromNow;

  public static final String SERIALIZED_NAME_FIVE_YEAR_FROM_NOW_PERCENT = "five_year_from_now_percent";
  @SerializedName(SERIALIZED_NAME_FIVE_YEAR_FROM_NOW_PERCENT)
  private BigDecimal fiveYearFromNowPercent;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONE_YEAR_FROM_NOW = "one_year_from_now";
  @SerializedName(SERIALIZED_NAME_ONE_YEAR_FROM_NOW)
  private BigDecimal oneYearFromNow;

  public static final String SERIALIZED_NAME_ONE_YEAR_FROM_NOW_PERCENT = "one_year_from_now_percent";
  @SerializedName(SERIALIZED_NAME_ONE_YEAR_FROM_NOW_PERCENT)
  private BigDecimal oneYearFromNowPercent;

  public static final String SERIALIZED_NAME_TWO_YEAR_FROM_NOW = "two_year_from_now";
  @SerializedName(SERIALIZED_NAME_TWO_YEAR_FROM_NOW)
  private BigDecimal twoYearFromNow;

  public static final String SERIALIZED_NAME_TWO_YEAR_FROM_NOW_PERCENT = "two_year_from_now_percent";
  @SerializedName(SERIALIZED_NAME_TWO_YEAR_FROM_NOW_PERCENT)
  private BigDecimal twoYearFromNowPercent;

  public DepreciationStats() {
  }

  public DepreciationStats currentValue(BigDecimal currentValue) {
    this.currentValue = currentValue;
    return this;
  }

  /**
   * Price of year make model combination
   * @return currentValue
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentValue() {
    return currentValue;
  }

  public void setCurrentValue(BigDecimal currentValue) {
    this.currentValue = currentValue;
  }


  public DepreciationStats fiveYearFromNow(BigDecimal fiveYearFromNow) {
    this.fiveYearFromNow = fiveYearFromNow;
    return this;
  }

  /**
   * price after five year from now
   * @return fiveYearFromNow
   */
  @javax.annotation.Nullable
  public BigDecimal getFiveYearFromNow() {
    return fiveYearFromNow;
  }

  public void setFiveYearFromNow(BigDecimal fiveYearFromNow) {
    this.fiveYearFromNow = fiveYearFromNow;
  }


  public DepreciationStats fiveYearFromNowPercent(BigDecimal fiveYearFromNowPercent) {
    this.fiveYearFromNowPercent = fiveYearFromNowPercent;
    return this;
  }

  /**
   * price depreciation percent after five year from now
   * @return fiveYearFromNowPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getFiveYearFromNowPercent() {
    return fiveYearFromNowPercent;
  }

  public void setFiveYearFromNowPercent(BigDecimal fiveYearFromNowPercent) {
    this.fiveYearFromNowPercent = fiveYearFromNowPercent;
  }


  public DepreciationStats name(String name) {
    this.name = name;
    return this;
  }

  /**
   * ymm_comb_name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DepreciationStats oneYearFromNow(BigDecimal oneYearFromNow) {
    this.oneYearFromNow = oneYearFromNow;
    return this;
  }

  /**
   * price after one year from now
   * @return oneYearFromNow
   */
  @javax.annotation.Nullable
  public BigDecimal getOneYearFromNow() {
    return oneYearFromNow;
  }

  public void setOneYearFromNow(BigDecimal oneYearFromNow) {
    this.oneYearFromNow = oneYearFromNow;
  }


  public DepreciationStats oneYearFromNowPercent(BigDecimal oneYearFromNowPercent) {
    this.oneYearFromNowPercent = oneYearFromNowPercent;
    return this;
  }

  /**
   * price depreciation percent after one year from now
   * @return oneYearFromNowPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getOneYearFromNowPercent() {
    return oneYearFromNowPercent;
  }

  public void setOneYearFromNowPercent(BigDecimal oneYearFromNowPercent) {
    this.oneYearFromNowPercent = oneYearFromNowPercent;
  }


  public DepreciationStats twoYearFromNow(BigDecimal twoYearFromNow) {
    this.twoYearFromNow = twoYearFromNow;
    return this;
  }

  /**
   * price after two year from now
   * @return twoYearFromNow
   */
  @javax.annotation.Nullable
  public BigDecimal getTwoYearFromNow() {
    return twoYearFromNow;
  }

  public void setTwoYearFromNow(BigDecimal twoYearFromNow) {
    this.twoYearFromNow = twoYearFromNow;
  }


  public DepreciationStats twoYearFromNowPercent(BigDecimal twoYearFromNowPercent) {
    this.twoYearFromNowPercent = twoYearFromNowPercent;
    return this;
  }

  /**
   * price depreciation percent after two year from now
   * @return twoYearFromNowPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getTwoYearFromNowPercent() {
    return twoYearFromNowPercent;
  }

  public void setTwoYearFromNowPercent(BigDecimal twoYearFromNowPercent) {
    this.twoYearFromNowPercent = twoYearFromNowPercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepreciationStats depreciationStats = (DepreciationStats) o;
    return Objects.equals(this.currentValue, depreciationStats.currentValue) &&
        Objects.equals(this.fiveYearFromNow, depreciationStats.fiveYearFromNow) &&
        Objects.equals(this.fiveYearFromNowPercent, depreciationStats.fiveYearFromNowPercent) &&
        Objects.equals(this.name, depreciationStats.name) &&
        Objects.equals(this.oneYearFromNow, depreciationStats.oneYearFromNow) &&
        Objects.equals(this.oneYearFromNowPercent, depreciationStats.oneYearFromNowPercent) &&
        Objects.equals(this.twoYearFromNow, depreciationStats.twoYearFromNow) &&
        Objects.equals(this.twoYearFromNowPercent, depreciationStats.twoYearFromNowPercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentValue, fiveYearFromNow, fiveYearFromNowPercent, name, oneYearFromNow, oneYearFromNowPercent, twoYearFromNow, twoYearFromNowPercent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepreciationStats {\n");
    sb.append("    currentValue: ").append(toIndentedString(currentValue)).append("\n");
    sb.append("    fiveYearFromNow: ").append(toIndentedString(fiveYearFromNow)).append("\n");
    sb.append("    fiveYearFromNowPercent: ").append(toIndentedString(fiveYearFromNowPercent)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oneYearFromNow: ").append(toIndentedString(oneYearFromNow)).append("\n");
    sb.append("    oneYearFromNowPercent: ").append(toIndentedString(oneYearFromNowPercent)).append("\n");
    sb.append("    twoYearFromNow: ").append(toIndentedString(twoYearFromNow)).append("\n");
    sb.append("    twoYearFromNowPercent: ").append(toIndentedString(twoYearFromNowPercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("current_value");
    openapiFields.add("five_year_from_now");
    openapiFields.add("five_year_from_now_percent");
    openapiFields.add("name");
    openapiFields.add("one_year_from_now");
    openapiFields.add("one_year_from_now_percent");
    openapiFields.add("two_year_from_now");
    openapiFields.add("two_year_from_now_percent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DepreciationStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DepreciationStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DepreciationStats is not found in the empty JSON string", DepreciationStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DepreciationStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DepreciationStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DepreciationStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DepreciationStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DepreciationStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DepreciationStats.class));

       return (TypeAdapter<T>) new TypeAdapter<DepreciationStats>() {
           @Override
           public void write(JsonWriter out, DepreciationStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DepreciationStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DepreciationStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DepreciationStats
   * @throws IOException if the JSON string is invalid with respect to DepreciationStats
   */
  public static DepreciationStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DepreciationStats.class);
  }

  /**
   * Convert an instance of DepreciationStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

