/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PopularityItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PopularityItem {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_DELTA_PERCENT = "delta_percent";
  @SerializedName(SERIALIZED_NAME_DELTA_PERCENT)
  private BigDecimal deltaPercent;

  public static final String SERIALIZED_NAME_DIFFERENCE = "difference";
  @SerializedName(SERIALIZED_NAME_DIFFERENCE)
  private BigDecimal difference;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private BigDecimal left;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private BigDecimal right;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_THUMBS = "thumbs";
  @SerializedName(SERIALIZED_NAME_THUMBS)
  private String thumbs;

  public PopularityItem() {
  }

  public PopularityItem color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Color depending upon left and right analysis numbers
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public PopularityItem deltaPercent(BigDecimal deltaPercent) {
    this.deltaPercent = deltaPercent;
    return this;
  }

  /**
   * Delta percent
   * @return deltaPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getDeltaPercent() {
    return deltaPercent;
  }

  public void setDeltaPercent(BigDecimal deltaPercent) {
    this.deltaPercent = deltaPercent;
  }


  public PopularityItem difference(BigDecimal difference) {
    this.difference = difference;
    return this;
  }

  /**
   * Difference depending upon left and right analysis
   * @return difference
   */
  @javax.annotation.Nullable
  public BigDecimal getDifference() {
    return difference;
  }

  public void setDifference(BigDecimal difference) {
    this.difference = difference;
  }


  public PopularityItem left(BigDecimal left) {
    this.left = left;
    return this;
  }

  /**
   * Left side rating for above description (2016 ford F-150 Lariat)
   * @return left
   */
  @javax.annotation.Nullable
  public BigDecimal getLeft() {
    return left;
  }

  public void setLeft(BigDecimal left) {
    this.left = left;
  }


  public PopularityItem right(BigDecimal right) {
    this.right = right;
    return this;
  }

  /**
   * Right side rating for above description (All Other Cars)
   * @return right
   */
  @javax.annotation.Nullable
  public BigDecimal getRight() {
    return right;
  }

  public void setRight(BigDecimal right) {
    this.right = right;
  }


  public PopularityItem text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Description for which popularity should be show eg: 2016 ford F-150 Lariat vs All Other Cars
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public PopularityItem thumbs(String thumbs) {
    this.thumbs = thumbs;
    return this;
  }

  /**
   * Thumbs up/down depending upon left and right analysis numbers
   * @return thumbs
   */
  @javax.annotation.Nullable
  public String getThumbs() {
    return thumbs;
  }

  public void setThumbs(String thumbs) {
    this.thumbs = thumbs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PopularityItem popularityItem = (PopularityItem) o;
    return Objects.equals(this.color, popularityItem.color) &&
        Objects.equals(this.deltaPercent, popularityItem.deltaPercent) &&
        Objects.equals(this.difference, popularityItem.difference) &&
        Objects.equals(this.left, popularityItem.left) &&
        Objects.equals(this.right, popularityItem.right) &&
        Objects.equals(this.text, popularityItem.text) &&
        Objects.equals(this.thumbs, popularityItem.thumbs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, deltaPercent, difference, left, right, text, thumbs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PopularityItem {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    deltaPercent: ").append(toIndentedString(deltaPercent)).append("\n");
    sb.append("    difference: ").append(toIndentedString(difference)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    thumbs: ").append(toIndentedString(thumbs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color");
    openapiFields.add("delta_percent");
    openapiFields.add("difference");
    openapiFields.add("left");
    openapiFields.add("right");
    openapiFields.add("text");
    openapiFields.add("thumbs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PopularityItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PopularityItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PopularityItem is not found in the empty JSON string", PopularityItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PopularityItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PopularityItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("thumbs") != null && !jsonObj.get("thumbs").isJsonNull()) && !jsonObj.get("thumbs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PopularityItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PopularityItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PopularityItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PopularityItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PopularityItem>() {
           @Override
           public void write(JsonWriter out, PopularityItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PopularityItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PopularityItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PopularityItem
   * @throws IOException if the JSON string is invalid with respect to PopularityItem
   */
  public static PopularityItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PopularityItem.class);
  }

  /**
   * Convert an instance of PopularityItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

