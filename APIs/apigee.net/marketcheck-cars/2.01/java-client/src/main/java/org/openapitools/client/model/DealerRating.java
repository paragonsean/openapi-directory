/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RatingComponents;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DealerRating
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DealerRating {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private String latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private String longitude;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERALL_RATING = "overall_rating";
  @SerializedName(SERIALIZED_NAME_OVERALL_RATING)
  private BigDecimal overallRating;

  public static final String SERIALIZED_NAME_RATING_COMPONENTS = "rating_components";
  @SerializedName(SERIALIZED_NAME_RATING_COMPONENTS)
  private List<RatingComponents> ratingComponents = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public DealerRating() {
  }

  public DealerRating city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City of the dealer
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public DealerRating latitude(String latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Latutide for the dealer location
   * @return latitude
   */
  @javax.annotation.Nullable
  public String getLatitude() {
    return latitude;
  }

  public void setLatitude(String latitude) {
    this.latitude = latitude;
  }


  public DealerRating longitude(String longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Longitude for the dealer location
   * @return longitude
   */
  @javax.annotation.Nullable
  public String getLongitude() {
    return longitude;
  }

  public void setLongitude(String longitude) {
    this.longitude = longitude;
  }


  public DealerRating name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the dealer
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DealerRating overallRating(BigDecimal overallRating) {
    this.overallRating = overallRating;
    return this;
  }

  /**
   * Overall rating of the dealership on scale 1-5
   * @return overallRating
   */
  @javax.annotation.Nullable
  public BigDecimal getOverallRating() {
    return overallRating;
  }

  public void setOverallRating(BigDecimal overallRating) {
    this.overallRating = overallRating;
  }


  public DealerRating ratingComponents(List<RatingComponents> ratingComponents) {
    this.ratingComponents = ratingComponents;
    return this;
  }

  public DealerRating addRatingComponentsItem(RatingComponents ratingComponentsItem) {
    if (this.ratingComponents == null) {
      this.ratingComponents = new ArrayList<>();
    }
    this.ratingComponents.add(ratingComponentsItem);
    return this;
  }

  /**
   * Get ratingComponents
   * @return ratingComponents
   */
  @javax.annotation.Nullable
  public List<RatingComponents> getRatingComponents() {
    return ratingComponents;
  }

  public void setRatingComponents(List<RatingComponents> ratingComponents) {
    this.ratingComponents = ratingComponents;
  }


  public DealerRating state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State of the dealer
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public DealerRating street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Street of the dealer
   * @return street
   */
  @javax.annotation.Nullable
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public DealerRating zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * Zip of the dealer
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealerRating dealerRating = (DealerRating) o;
    return Objects.equals(this.city, dealerRating.city) &&
        Objects.equals(this.latitude, dealerRating.latitude) &&
        Objects.equals(this.longitude, dealerRating.longitude) &&
        Objects.equals(this.name, dealerRating.name) &&
        Objects.equals(this.overallRating, dealerRating.overallRating) &&
        Objects.equals(this.ratingComponents, dealerRating.ratingComponents) &&
        Objects.equals(this.state, dealerRating.state) &&
        Objects.equals(this.street, dealerRating.street) &&
        Objects.equals(this.zip, dealerRating.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, latitude, longitude, name, overallRating, ratingComponents, state, street, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealerRating {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overallRating: ").append(toIndentedString(overallRating)).append("\n");
    sb.append("    ratingComponents: ").append(toIndentedString(ratingComponents)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("name");
    openapiFields.add("overall_rating");
    openapiFields.add("rating_components");
    openapiFields.add("state");
    openapiFields.add("street");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DealerRating
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DealerRating.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DealerRating is not found in the empty JSON string", DealerRating.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DealerRating.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DealerRating` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if ((jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("rating_components") != null && !jsonObj.get("rating_components").isJsonNull()) {
        JsonArray jsonArrayratingComponents = jsonObj.getAsJsonArray("rating_components");
        if (jsonArrayratingComponents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rating_components").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rating_components` to be an array in the JSON string but got `%s`", jsonObj.get("rating_components").toString()));
          }

          // validate the optional field `rating_components` (array)
          for (int i = 0; i < jsonArrayratingComponents.size(); i++) {
            RatingComponents.validateJsonElement(jsonArrayratingComponents.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DealerRating.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DealerRating' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DealerRating> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DealerRating.class));

       return (TypeAdapter<T>) new TypeAdapter<DealerRating>() {
           @Override
           public void write(JsonWriter out, DealerRating value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DealerRating read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DealerRating given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DealerRating
   * @throws IOException if the JSON string is invalid with respect to DealerRating
   */
  public static DealerRating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DealerRating.class);
  }

  /**
   * Convert an instance of DealerRating to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

