/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.NeoVIN;
import org.openapitools.client.model.SpecsAutoCompleteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VinDecoderApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VinDecoderApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VinDecoderApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for decode
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decodeCall(String vin, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decode/car/{vin}/specs"
            .replace("{" + "vin" + "}", localVarApiClient.escapeString(vin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decodeValidateBeforeCall(String vin, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling decode(Async)");
        }

        return decodeCall(vin, apiKey, _callback);

    }

    /**
     * VIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Build decode(String vin, String apiKey) throws ApiException {
        ApiResponse<Build> localVarResp = decodeWithHttpInfo(vin, apiKey);
        return localVarResp.getData();
    }

    /**
     * VIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> decodeWithHttpInfo(String vin, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = decodeValidateBeforeCall(vin, apiKey, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * VIN Decoder (asynchronously)
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decodeAsync(String vin, String apiKey, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = decodeValidateBeforeCall(vin, apiKey, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decodeViaEPI
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decodeViaEPICall(String vin, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decode/car/epi/{vin}/specs"
            .replace("{" + "vin" + "}", localVarApiClient.escapeString(vin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decodeViaEPIValidateBeforeCall(String vin, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling decodeViaEPI(Async)");
        }

        return decodeViaEPICall(vin, apiKey, _callback);

    }

    /**
     * EPI VIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN from EPI&#39;s decoder
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Build decodeViaEPI(String vin, String apiKey) throws ApiException {
        ApiResponse<Build> localVarResp = decodeViaEPIWithHttpInfo(vin, apiKey);
        return localVarResp.getData();
    }

    /**
     * EPI VIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN from EPI&#39;s decoder
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> decodeViaEPIWithHttpInfo(String vin, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = decodeViaEPIValidateBeforeCall(vin, apiKey, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EPI VIN Decoder (asynchronously)
     * Get the basic information on specifications for a car identified by a valid VIN from EPI&#39;s decoder
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decodeViaEPIAsync(String vin, String apiKey, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = decodeViaEPIValidateBeforeCall(vin, apiKey, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decodeViaNeoVIN
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param includeGeneric Boolean variable to indicate wheather to include generic data as well in response (optional, default to false)
     * @param forceDecode Decode VIN on the fly instead of cached response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decodeViaNeoVINCall(String vin, String apiKey, Boolean includeGeneric, Boolean forceDecode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decode/car/neovin/{vin}/specs"
            .replace("{" + "vin" + "}", localVarApiClient.escapeString(vin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (includeGeneric != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_generic", includeGeneric));
        }

        if (forceDecode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_decode", forceDecode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decodeViaNeoVINValidateBeforeCall(String vin, String apiKey, Boolean includeGeneric, Boolean forceDecode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling decodeViaNeoVIN(Async)");
        }

        return decodeViaNeoVINCall(vin, apiKey, includeGeneric, forceDecode, _callback);

    }

    /**
     * NeoVIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN from NeoVIN decoder
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param includeGeneric Boolean variable to indicate wheather to include generic data as well in response (optional, default to false)
     * @param forceDecode Decode VIN on the fly instead of cached response (optional, default to false)
     * @return NeoVIN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NeoVIN decodeViaNeoVIN(String vin, String apiKey, Boolean includeGeneric, Boolean forceDecode) throws ApiException {
        ApiResponse<NeoVIN> localVarResp = decodeViaNeoVINWithHttpInfo(vin, apiKey, includeGeneric, forceDecode);
        return localVarResp.getData();
    }

    /**
     * NeoVIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN from NeoVIN decoder
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param includeGeneric Boolean variable to indicate wheather to include generic data as well in response (optional, default to false)
     * @param forceDecode Decode VIN on the fly instead of cached response (optional, default to false)
     * @return ApiResponse&lt;NeoVIN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NeoVIN> decodeViaNeoVINWithHttpInfo(String vin, String apiKey, Boolean includeGeneric, Boolean forceDecode) throws ApiException {
        okhttp3.Call localVarCall = decodeViaNeoVINValidateBeforeCall(vin, apiKey, includeGeneric, forceDecode, null);
        Type localVarReturnType = new TypeToken<NeoVIN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * NeoVIN Decoder (asynchronously)
     * Get the basic information on specifications for a car identified by a valid VIN from NeoVIN decoder
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param includeGeneric Boolean variable to indicate wheather to include generic data as well in response (optional, default to false)
     * @param forceDecode Decode VIN on the fly instead of cached response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic sepcifications details about the car </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decodeViaNeoVINAsync(String vin, String apiKey, Boolean includeGeneric, Boolean forceDecode, final ApiCallback<NeoVIN> _callback) throws ApiException {

        okhttp3.Call localVarCall = decodeViaNeoVINValidateBeforeCall(vin, apiKey, includeGeneric, forceDecode, _callback);
        Type localVarReturnType = new TypeToken<NeoVIN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaxonomyTerms
     * @param field Comma separated list of fields to get terms for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unique terms for specified fields </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxonomyTermsCall(String field, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String engine, String engineSize, String engineBlock, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/specs/car/terms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxonomyTermsValidateBeforeCall(String field, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String engine, String engineSize, String engineBlock, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getTaxonomyTerms(Async)");
        }

        return getTaxonomyTermsCall(field, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, engine, engineSize, engineBlock, _callback);

    }

    /**
     * API for getting terms from taxonomy
     * Facets on taxonomy
     * @param field Comma separated list of fields to get terms for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @return SpecsAutoCompleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unique terms for specified fields </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SpecsAutoCompleteResponse getTaxonomyTerms(String field, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String engine, String engineSize, String engineBlock) throws ApiException {
        ApiResponse<SpecsAutoCompleteResponse> localVarResp = getTaxonomyTermsWithHttpInfo(field, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, engine, engineSize, engineBlock);
        return localVarResp.getData();
    }

    /**
     * API for getting terms from taxonomy
     * Facets on taxonomy
     * @param field Comma separated list of fields to get terms for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @return ApiResponse&lt;SpecsAutoCompleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unique terms for specified fields </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpecsAutoCompleteResponse> getTaxonomyTermsWithHttpInfo(String field, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String engine, String engineSize, String engineBlock) throws ApiException {
        okhttp3.Call localVarCall = getTaxonomyTermsValidateBeforeCall(field, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, engine, engineSize, engineBlock, null);
        Type localVarReturnType = new TypeToken<SpecsAutoCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * API for getting terms from taxonomy (asynchronously)
     * Facets on taxonomy
     * @param field Comma separated list of fields to get terms for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unique terms for specified fields </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxonomyTermsAsync(String field, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String engine, String engineSize, String engineBlock, final ApiCallback<SpecsAutoCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxonomyTermsValidateBeforeCall(field, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, engine, engineSize, engineBlock, _callback);
        Type localVarReturnType = new TypeToken<SpecsAutoCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for specsCarAutoCompleteGet
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call specsCarAutoCompleteGetCall(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String engine, String engineSize, String engineBlock, Boolean ignoreCase, BigDecimal facetMinCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/specs/car/auto-complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (input != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("input", input));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (ignoreCase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignore_case", ignoreCase));
        }

        if (facetMinCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_min_count", facetMinCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specsCarAutoCompleteGetValidateBeforeCall(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String engine, String engineSize, String engineBlock, Boolean ignoreCase, BigDecimal facetMinCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling specsCarAutoCompleteGet(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling specsCarAutoCompleteGet(Async)");
        }

        return specsCarAutoCompleteGetCall(field, input, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, engine, engineSize, engineBlock, ignoreCase, facetMinCount, _callback);

    }

    /**
     * API for auto-completion of inputs based on taxonomy
     * Auto-complete the inputs of your end users, not from active set but from taxonomy (decoder database)
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @return SpecsAutoCompleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SpecsAutoCompleteResponse specsCarAutoCompleteGet(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String engine, String engineSize, String engineBlock, Boolean ignoreCase, BigDecimal facetMinCount) throws ApiException {
        ApiResponse<SpecsAutoCompleteResponse> localVarResp = specsCarAutoCompleteGetWithHttpInfo(field, input, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, engine, engineSize, engineBlock, ignoreCase, facetMinCount);
        return localVarResp.getData();
    }

    /**
     * API for auto-completion of inputs based on taxonomy
     * Auto-complete the inputs of your end users, not from active set but from taxonomy (decoder database)
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @return ApiResponse&lt;SpecsAutoCompleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpecsAutoCompleteResponse> specsCarAutoCompleteGetWithHttpInfo(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String engine, String engineSize, String engineBlock, Boolean ignoreCase, BigDecimal facetMinCount) throws ApiException {
        okhttp3.Call localVarCall = specsCarAutoCompleteGetValidateBeforeCall(field, input, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, engine, engineSize, engineBlock, ignoreCase, facetMinCount, null);
        Type localVarReturnType = new TypeToken<SpecsAutoCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * API for auto-completion of inputs based on taxonomy (asynchronously)
     * Auto-complete the inputs of your end users, not from active set but from taxonomy (decoder database)
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call specsCarAutoCompleteGetAsync(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String engine, String engineSize, String engineBlock, Boolean ignoreCase, BigDecimal facetMinCount, final ApiCallback<SpecsAutoCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = specsCarAutoCompleteGetValidateBeforeCall(field, input, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, engine, engineSize, engineBlock, ignoreCase, facetMinCount, _callback);
        Type localVarReturnType = new TypeToken<SpecsAutoCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
