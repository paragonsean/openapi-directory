/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FacetItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MotorcycleSearchFacets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MotorcycleSearchFacets {
  public static final String SERIALIZED_NAME_BODY_TYPE = "body_type";
  @SerializedName(SERIALIZED_NAME_BODY_TYPE)
  private List<FacetItem> bodyType = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private List<FacetItem> city = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private List<FacetItem> color = new ArrayList<>();

  public static final String SERIALIZED_NAME_CYLINDERS = "cylinders";
  @SerializedName(SERIALIZED_NAME_CYLINDERS)
  private List<FacetItem> cylinders = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEALER_ID = "dealer_id";
  @SerializedName(SERIALIZED_NAME_DEALER_ID)
  private List<FacetItem> dealerId = new ArrayList<>();

  public static final String SERIALIZED_NAME_DRIVETRAIN = "drivetrain";
  @SerializedName(SERIALIZED_NAME_DRIVETRAIN)
  private List<FacetItem> drivetrain = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private List<FacetItem> engine = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuel_type";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private List<FacetItem> fuelType = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORY_TYPE = "inventory_type";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TYPE)
  private List<FacetItem> inventoryType = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private List<FacetItem> make = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private List<FacetItem> model = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_NAME = "seller_name";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private List<FacetItem> sellerName = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private List<FacetItem> source = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private List<FacetItem> state = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private List<FacetItem> transmission = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private List<FacetItem> trim = new ArrayList<>();

  public static final String SERIALIZED_NAME_VEHICLE_TYPE = "vehicle_type";
  @SerializedName(SERIALIZED_NAME_VEHICLE_TYPE)
  private List<FacetItem> vehicleType = new ArrayList<>();

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private List<FacetItem> year = new ArrayList<>();

  public MotorcycleSearchFacets() {
  }

  public MotorcycleSearchFacets bodyType(List<FacetItem> bodyType) {
    this.bodyType = bodyType;
    return this;
  }

  public MotorcycleSearchFacets addBodyTypeItem(FacetItem bodyTypeItem) {
    if (this.bodyType == null) {
      this.bodyType = new ArrayList<>();
    }
    this.bodyType.add(bodyTypeItem);
    return this;
  }

  /**
   * Get bodyType
   * @return bodyType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getBodyType() {
    return bodyType;
  }

  public void setBodyType(List<FacetItem> bodyType) {
    this.bodyType = bodyType;
  }


  public MotorcycleSearchFacets city(List<FacetItem> city) {
    this.city = city;
    return this;
  }

  public MotorcycleSearchFacets addCityItem(FacetItem cityItem) {
    if (this.city == null) {
      this.city = new ArrayList<>();
    }
    this.city.add(cityItem);
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCity() {
    return city;
  }

  public void setCity(List<FacetItem> city) {
    this.city = city;
  }


  public MotorcycleSearchFacets color(List<FacetItem> color) {
    this.color = color;
    return this;
  }

  public MotorcycleSearchFacets addColorItem(FacetItem colorItem) {
    if (this.color == null) {
      this.color = new ArrayList<>();
    }
    this.color.add(colorItem);
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public List<FacetItem> getColor() {
    return color;
  }

  public void setColor(List<FacetItem> color) {
    this.color = color;
  }


  public MotorcycleSearchFacets cylinders(List<FacetItem> cylinders) {
    this.cylinders = cylinders;
    return this;
  }

  public MotorcycleSearchFacets addCylindersItem(FacetItem cylindersItem) {
    if (this.cylinders == null) {
      this.cylinders = new ArrayList<>();
    }
    this.cylinders.add(cylindersItem);
    return this;
  }

  /**
   * Get cylinders
   * @return cylinders
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCylinders() {
    return cylinders;
  }

  public void setCylinders(List<FacetItem> cylinders) {
    this.cylinders = cylinders;
  }


  public MotorcycleSearchFacets dealerId(List<FacetItem> dealerId) {
    this.dealerId = dealerId;
    return this;
  }

  public MotorcycleSearchFacets addDealerIdItem(FacetItem dealerIdItem) {
    if (this.dealerId == null) {
      this.dealerId = new ArrayList<>();
    }
    this.dealerId.add(dealerIdItem);
    return this;
  }

  /**
   * Get dealerId
   * @return dealerId
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDealerId() {
    return dealerId;
  }

  public void setDealerId(List<FacetItem> dealerId) {
    this.dealerId = dealerId;
  }


  public MotorcycleSearchFacets drivetrain(List<FacetItem> drivetrain) {
    this.drivetrain = drivetrain;
    return this;
  }

  public MotorcycleSearchFacets addDrivetrainItem(FacetItem drivetrainItem) {
    if (this.drivetrain == null) {
      this.drivetrain = new ArrayList<>();
    }
    this.drivetrain.add(drivetrainItem);
    return this;
  }

  /**
   * Get drivetrain
   * @return drivetrain
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDrivetrain() {
    return drivetrain;
  }

  public void setDrivetrain(List<FacetItem> drivetrain) {
    this.drivetrain = drivetrain;
  }


  public MotorcycleSearchFacets engine(List<FacetItem> engine) {
    this.engine = engine;
    return this;
  }

  public MotorcycleSearchFacets addEngineItem(FacetItem engineItem) {
    if (this.engine == null) {
      this.engine = new ArrayList<>();
    }
    this.engine.add(engineItem);
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngine() {
    return engine;
  }

  public void setEngine(List<FacetItem> engine) {
    this.engine = engine;
  }


  public MotorcycleSearchFacets fuelType(List<FacetItem> fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  public MotorcycleSearchFacets addFuelTypeItem(FacetItem fuelTypeItem) {
    if (this.fuelType == null) {
      this.fuelType = new ArrayList<>();
    }
    this.fuelType.add(fuelTypeItem);
    return this;
  }

  /**
   * Get fuelType
   * @return fuelType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getFuelType() {
    return fuelType;
  }

  public void setFuelType(List<FacetItem> fuelType) {
    this.fuelType = fuelType;
  }


  public MotorcycleSearchFacets inventoryType(List<FacetItem> inventoryType) {
    this.inventoryType = inventoryType;
    return this;
  }

  public MotorcycleSearchFacets addInventoryTypeItem(FacetItem inventoryTypeItem) {
    if (this.inventoryType == null) {
      this.inventoryType = new ArrayList<>();
    }
    this.inventoryType.add(inventoryTypeItem);
    return this;
  }

  /**
   * Get inventoryType
   * @return inventoryType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getInventoryType() {
    return inventoryType;
  }

  public void setInventoryType(List<FacetItem> inventoryType) {
    this.inventoryType = inventoryType;
  }


  public MotorcycleSearchFacets make(List<FacetItem> make) {
    this.make = make;
    return this;
  }

  public MotorcycleSearchFacets addMakeItem(FacetItem makeItem) {
    if (this.make == null) {
      this.make = new ArrayList<>();
    }
    this.make.add(makeItem);
    return this;
  }

  /**
   * Get make
   * @return make
   */
  @javax.annotation.Nullable
  public List<FacetItem> getMake() {
    return make;
  }

  public void setMake(List<FacetItem> make) {
    this.make = make;
  }


  public MotorcycleSearchFacets model(List<FacetItem> model) {
    this.model = model;
    return this;
  }

  public MotorcycleSearchFacets addModelItem(FacetItem modelItem) {
    if (this.model == null) {
      this.model = new ArrayList<>();
    }
    this.model.add(modelItem);
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public List<FacetItem> getModel() {
    return model;
  }

  public void setModel(List<FacetItem> model) {
    this.model = model;
  }


  public MotorcycleSearchFacets sellerName(List<FacetItem> sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public MotorcycleSearchFacets addSellerNameItem(FacetItem sellerNameItem) {
    if (this.sellerName == null) {
      this.sellerName = new ArrayList<>();
    }
    this.sellerName.add(sellerNameItem);
    return this;
  }

  /**
   * Get sellerName
   * @return sellerName
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSellerName() {
    return sellerName;
  }

  public void setSellerName(List<FacetItem> sellerName) {
    this.sellerName = sellerName;
  }


  public MotorcycleSearchFacets source(List<FacetItem> source) {
    this.source = source;
    return this;
  }

  public MotorcycleSearchFacets addSourceItem(FacetItem sourceItem) {
    if (this.source == null) {
      this.source = new ArrayList<>();
    }
    this.source.add(sourceItem);
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSource() {
    return source;
  }

  public void setSource(List<FacetItem> source) {
    this.source = source;
  }


  public MotorcycleSearchFacets state(List<FacetItem> state) {
    this.state = state;
    return this;
  }

  public MotorcycleSearchFacets addStateItem(FacetItem stateItem) {
    if (this.state == null) {
      this.state = new ArrayList<>();
    }
    this.state.add(stateItem);
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public List<FacetItem> getState() {
    return state;
  }

  public void setState(List<FacetItem> state) {
    this.state = state;
  }


  public MotorcycleSearchFacets transmission(List<FacetItem> transmission) {
    this.transmission = transmission;
    return this;
  }

  public MotorcycleSearchFacets addTransmissionItem(FacetItem transmissionItem) {
    if (this.transmission == null) {
      this.transmission = new ArrayList<>();
    }
    this.transmission.add(transmissionItem);
    return this;
  }

  /**
   * Get transmission
   * @return transmission
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTransmission() {
    return transmission;
  }

  public void setTransmission(List<FacetItem> transmission) {
    this.transmission = transmission;
  }


  public MotorcycleSearchFacets trim(List<FacetItem> trim) {
    this.trim = trim;
    return this;
  }

  public MotorcycleSearchFacets addTrimItem(FacetItem trimItem) {
    if (this.trim == null) {
      this.trim = new ArrayList<>();
    }
    this.trim.add(trimItem);
    return this;
  }

  /**
   * Get trim
   * @return trim
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTrim() {
    return trim;
  }

  public void setTrim(List<FacetItem> trim) {
    this.trim = trim;
  }


  public MotorcycleSearchFacets vehicleType(List<FacetItem> vehicleType) {
    this.vehicleType = vehicleType;
    return this;
  }

  public MotorcycleSearchFacets addVehicleTypeItem(FacetItem vehicleTypeItem) {
    if (this.vehicleType == null) {
      this.vehicleType = new ArrayList<>();
    }
    this.vehicleType.add(vehicleTypeItem);
    return this;
  }

  /**
   * Get vehicleType
   * @return vehicleType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getVehicleType() {
    return vehicleType;
  }

  public void setVehicleType(List<FacetItem> vehicleType) {
    this.vehicleType = vehicleType;
  }


  public MotorcycleSearchFacets year(List<FacetItem> year) {
    this.year = year;
    return this;
  }

  public MotorcycleSearchFacets addYearItem(FacetItem yearItem) {
    if (this.year == null) {
      this.year = new ArrayList<>();
    }
    this.year.add(yearItem);
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public List<FacetItem> getYear() {
    return year;
  }

  public void setYear(List<FacetItem> year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MotorcycleSearchFacets motorcycleSearchFacets = (MotorcycleSearchFacets) o;
    return Objects.equals(this.bodyType, motorcycleSearchFacets.bodyType) &&
        Objects.equals(this.city, motorcycleSearchFacets.city) &&
        Objects.equals(this.color, motorcycleSearchFacets.color) &&
        Objects.equals(this.cylinders, motorcycleSearchFacets.cylinders) &&
        Objects.equals(this.dealerId, motorcycleSearchFacets.dealerId) &&
        Objects.equals(this.drivetrain, motorcycleSearchFacets.drivetrain) &&
        Objects.equals(this.engine, motorcycleSearchFacets.engine) &&
        Objects.equals(this.fuelType, motorcycleSearchFacets.fuelType) &&
        Objects.equals(this.inventoryType, motorcycleSearchFacets.inventoryType) &&
        Objects.equals(this.make, motorcycleSearchFacets.make) &&
        Objects.equals(this.model, motorcycleSearchFacets.model) &&
        Objects.equals(this.sellerName, motorcycleSearchFacets.sellerName) &&
        Objects.equals(this.source, motorcycleSearchFacets.source) &&
        Objects.equals(this.state, motorcycleSearchFacets.state) &&
        Objects.equals(this.transmission, motorcycleSearchFacets.transmission) &&
        Objects.equals(this.trim, motorcycleSearchFacets.trim) &&
        Objects.equals(this.vehicleType, motorcycleSearchFacets.vehicleType) &&
        Objects.equals(this.year, motorcycleSearchFacets.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyType, city, color, cylinders, dealerId, drivetrain, engine, fuelType, inventoryType, make, model, sellerName, source, state, transmission, trim, vehicleType, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MotorcycleSearchFacets {\n");
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    cylinders: ").append(toIndentedString(cylinders)).append("\n");
    sb.append("    dealerId: ").append(toIndentedString(dealerId)).append("\n");
    sb.append("    drivetrain: ").append(toIndentedString(drivetrain)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    inventoryType: ").append(toIndentedString(inventoryType)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    vehicleType: ").append(toIndentedString(vehicleType)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body_type");
    openapiFields.add("city");
    openapiFields.add("color");
    openapiFields.add("cylinders");
    openapiFields.add("dealer_id");
    openapiFields.add("drivetrain");
    openapiFields.add("engine");
    openapiFields.add("fuel_type");
    openapiFields.add("inventory_type");
    openapiFields.add("make");
    openapiFields.add("model");
    openapiFields.add("seller_name");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("transmission");
    openapiFields.add("trim");
    openapiFields.add("vehicle_type");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MotorcycleSearchFacets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MotorcycleSearchFacets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MotorcycleSearchFacets is not found in the empty JSON string", MotorcycleSearchFacets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MotorcycleSearchFacets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MotorcycleSearchFacets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("body_type") != null && !jsonObj.get("body_type").isJsonNull()) {
        JsonArray jsonArraybodyType = jsonObj.getAsJsonArray("body_type");
        if (jsonArraybodyType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("body_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `body_type` to be an array in the JSON string but got `%s`", jsonObj.get("body_type").toString()));
          }

          // validate the optional field `body_type` (array)
          for (int i = 0; i < jsonArraybodyType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraybodyType.get(i));
          };
        }
      }
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        JsonArray jsonArraycity = jsonObj.getAsJsonArray("city");
        if (jsonArraycity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("city").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `city` to be an array in the JSON string but got `%s`", jsonObj.get("city").toString()));
          }

          // validate the optional field `city` (array)
          for (int i = 0; i < jsonArraycity.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycity.get(i));
          };
        }
      }
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        JsonArray jsonArraycolor = jsonObj.getAsJsonArray("color");
        if (jsonArraycolor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `color` to be an array in the JSON string but got `%s`", jsonObj.get("color").toString()));
          }

          // validate the optional field `color` (array)
          for (int i = 0; i < jsonArraycolor.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycolor.get(i));
          };
        }
      }
      if (jsonObj.get("cylinders") != null && !jsonObj.get("cylinders").isJsonNull()) {
        JsonArray jsonArraycylinders = jsonObj.getAsJsonArray("cylinders");
        if (jsonArraycylinders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cylinders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cylinders` to be an array in the JSON string but got `%s`", jsonObj.get("cylinders").toString()));
          }

          // validate the optional field `cylinders` (array)
          for (int i = 0; i < jsonArraycylinders.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycylinders.get(i));
          };
        }
      }
      if (jsonObj.get("dealer_id") != null && !jsonObj.get("dealer_id").isJsonNull()) {
        JsonArray jsonArraydealerId = jsonObj.getAsJsonArray("dealer_id");
        if (jsonArraydealerId != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dealer_id").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dealer_id` to be an array in the JSON string but got `%s`", jsonObj.get("dealer_id").toString()));
          }

          // validate the optional field `dealer_id` (array)
          for (int i = 0; i < jsonArraydealerId.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydealerId.get(i));
          };
        }
      }
      if (jsonObj.get("drivetrain") != null && !jsonObj.get("drivetrain").isJsonNull()) {
        JsonArray jsonArraydrivetrain = jsonObj.getAsJsonArray("drivetrain");
        if (jsonArraydrivetrain != null) {
          // ensure the json data is an array
          if (!jsonObj.get("drivetrain").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `drivetrain` to be an array in the JSON string but got `%s`", jsonObj.get("drivetrain").toString()));
          }

          // validate the optional field `drivetrain` (array)
          for (int i = 0; i < jsonArraydrivetrain.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydrivetrain.get(i));
          };
        }
      }
      if (jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) {
        JsonArray jsonArrayengine = jsonObj.getAsJsonArray("engine");
        if (jsonArrayengine != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine` to be an array in the JSON string but got `%s`", jsonObj.get("engine").toString()));
          }

          // validate the optional field `engine` (array)
          for (int i = 0; i < jsonArrayengine.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengine.get(i));
          };
        }
      }
      if (jsonObj.get("fuel_type") != null && !jsonObj.get("fuel_type").isJsonNull()) {
        JsonArray jsonArrayfuelType = jsonObj.getAsJsonArray("fuel_type");
        if (jsonArrayfuelType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fuel_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fuel_type` to be an array in the JSON string but got `%s`", jsonObj.get("fuel_type").toString()));
          }

          // validate the optional field `fuel_type` (array)
          for (int i = 0; i < jsonArrayfuelType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayfuelType.get(i));
          };
        }
      }
      if (jsonObj.get("inventory_type") != null && !jsonObj.get("inventory_type").isJsonNull()) {
        JsonArray jsonArrayinventoryType = jsonObj.getAsJsonArray("inventory_type");
        if (jsonArrayinventoryType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inventory_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inventory_type` to be an array in the JSON string but got `%s`", jsonObj.get("inventory_type").toString()));
          }

          // validate the optional field `inventory_type` (array)
          for (int i = 0; i < jsonArrayinventoryType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayinventoryType.get(i));
          };
        }
      }
      if (jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) {
        JsonArray jsonArraymake = jsonObj.getAsJsonArray("make");
        if (jsonArraymake != null) {
          // ensure the json data is an array
          if (!jsonObj.get("make").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `make` to be an array in the JSON string but got `%s`", jsonObj.get("make").toString()));
          }

          // validate the optional field `make` (array)
          for (int i = 0; i < jsonArraymake.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymake.get(i));
          };
        }
      }
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        JsonArray jsonArraymodel = jsonObj.getAsJsonArray("model");
        if (jsonArraymodel != null) {
          // ensure the json data is an array
          if (!jsonObj.get("model").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `model` to be an array in the JSON string but got `%s`", jsonObj.get("model").toString()));
          }

          // validate the optional field `model` (array)
          for (int i = 0; i < jsonArraymodel.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymodel.get(i));
          };
        }
      }
      if (jsonObj.get("seller_name") != null && !jsonObj.get("seller_name").isJsonNull()) {
        JsonArray jsonArraysellerName = jsonObj.getAsJsonArray("seller_name");
        if (jsonArraysellerName != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seller_name").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_name` to be an array in the JSON string but got `%s`", jsonObj.get("seller_name").toString()));
          }

          // validate the optional field `seller_name` (array)
          for (int i = 0; i < jsonArraysellerName.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysellerName.get(i));
          };
        }
      }
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        JsonArray jsonArraysource = jsonObj.getAsJsonArray("source");
        if (jsonArraysource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("source").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `source` to be an array in the JSON string but got `%s`", jsonObj.get("source").toString()));
          }

          // validate the optional field `source` (array)
          for (int i = 0; i < jsonArraysource.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysource.get(i));
          };
        }
      }
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        JsonArray jsonArraystate = jsonObj.getAsJsonArray("state");
        if (jsonArraystate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("state").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `state` to be an array in the JSON string but got `%s`", jsonObj.get("state").toString()));
          }

          // validate the optional field `state` (array)
          for (int i = 0; i < jsonArraystate.size(); i++) {
            FacetItem.validateJsonElement(jsonArraystate.get(i));
          };
        }
      }
      if (jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) {
        JsonArray jsonArraytransmission = jsonObj.getAsJsonArray("transmission");
        if (jsonArraytransmission != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transmission").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transmission` to be an array in the JSON string but got `%s`", jsonObj.get("transmission").toString()));
          }

          // validate the optional field `transmission` (array)
          for (int i = 0; i < jsonArraytransmission.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytransmission.get(i));
          };
        }
      }
      if (jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) {
        JsonArray jsonArraytrim = jsonObj.getAsJsonArray("trim");
        if (jsonArraytrim != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trim").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trim` to be an array in the JSON string but got `%s`", jsonObj.get("trim").toString()));
          }

          // validate the optional field `trim` (array)
          for (int i = 0; i < jsonArraytrim.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytrim.get(i));
          };
        }
      }
      if (jsonObj.get("vehicle_type") != null && !jsonObj.get("vehicle_type").isJsonNull()) {
        JsonArray jsonArrayvehicleType = jsonObj.getAsJsonArray("vehicle_type");
        if (jsonArrayvehicleType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vehicle_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vehicle_type` to be an array in the JSON string but got `%s`", jsonObj.get("vehicle_type").toString()));
          }

          // validate the optional field `vehicle_type` (array)
          for (int i = 0; i < jsonArrayvehicleType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayvehicleType.get(i));
          };
        }
      }
      if (jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) {
        JsonArray jsonArrayyear = jsonObj.getAsJsonArray("year");
        if (jsonArrayyear != null) {
          // ensure the json data is an array
          if (!jsonObj.get("year").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `year` to be an array in the JSON string but got `%s`", jsonObj.get("year").toString()));
          }

          // validate the optional field `year` (array)
          for (int i = 0; i < jsonArrayyear.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayyear.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MotorcycleSearchFacets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MotorcycleSearchFacets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MotorcycleSearchFacets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MotorcycleSearchFacets.class));

       return (TypeAdapter<T>) new TypeAdapter<MotorcycleSearchFacets>() {
           @Override
           public void write(JsonWriter out, MotorcycleSearchFacets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MotorcycleSearchFacets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MotorcycleSearchFacets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MotorcycleSearchFacets
   * @throws IOException if the JSON string is invalid with respect to MotorcycleSearchFacets
   */
  public static MotorcycleSearchFacets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MotorcycleSearchFacets.class);
  }

  /**
   * Convert an instance of MotorcycleSearchFacets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

