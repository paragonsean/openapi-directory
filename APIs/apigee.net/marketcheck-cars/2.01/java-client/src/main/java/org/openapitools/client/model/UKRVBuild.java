/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the RV specification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UKRVBuild {
  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private String area;

  public static final String SERIALIZED_NAME_BERTHS = "berths";
  @SerializedName(SERIALIZED_NAME_BERTHS)
  private String berths;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CHASSIS = "chassis";
  @SerializedName(SERIALIZED_NAME_CHASSIS)
  private String chassis;

  public static final String SERIALIZED_NAME_DRIVE_TYPE = "drive_type";
  @SerializedName(SERIALIZED_NAME_DRIVE_TYPE)
  private String driveType;

  public static final String SERIALIZED_NAME_DRIVETRAIN = "drivetrain";
  @SerializedName(SERIALIZED_NAME_DRIVETRAIN)
  private String drivetrain;

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_SIZE = "engine_size";
  @SerializedName(SERIALIZED_NAME_ENGINE_SIZE)
  private String engineSize;

  public static final String SERIALIZED_NAME_EXTERIOR_LENGTH = "exterior_length";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_LENGTH)
  private String exteriorLength;

  public static final String SERIALIZED_NAME_FLOORPLAN = "floorplan";
  @SerializedName(SERIALIZED_NAME_FLOORPLAN)
  private String floorplan;

  public static final String SERIALIZED_NAME_FLOORPLAN_LAYOUT = "floorplan_layout";
  @SerializedName(SERIALIZED_NAME_FLOORPLAN_LAYOUT)
  private String floorplanLayout;

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuel_type";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private String fuelType;

  public static final String SERIALIZED_NAME_GVWR = "gvwr";
  @SerializedName(SERIALIZED_NAME_GVWR)
  private String gvwr;

  public static final String SERIALIZED_NAME_INTERIOR_LENGTH = "interior_length";
  @SerializedName(SERIALIZED_NAME_INTERIOR_LENGTH)
  private String interiorLength;

  public static final String SERIALIZED_NAME_INVENTORY_TYPE = "inventory_type";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TYPE)
  private String inventoryType;

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private String make;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_MTPLM = "mtplm";
  @SerializedName(SERIALIZED_NAME_MTPLM)
  private String mtplm;

  public static final String SERIALIZED_NAME_SLIDEOUTS = "slideouts";
  @SerializedName(SERIALIZED_NAME_SLIDEOUTS)
  private String slideouts;

  public static final String SERIALIZED_NAME_STEERING = "steering";
  @SerializedName(SERIALIZED_NAME_STEERING)
  private String steering;

  public static final String SERIALIZED_NAME_SUB_CATEGORY = "sub_category";
  @SerializedName(SERIALIZED_NAME_SUB_CATEGORY)
  private String subCategory;

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private String transmission;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private String width;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public UKRVBuild() {
  }

  public UKRVBuild area(String area) {
    this.area = area;
    return this;
  }

  /**
   * Area of the RV
   * @return area
   */
  @javax.annotation.Nullable
  public String getArea() {
    return area;
  }

  public void setArea(String area) {
    this.area = area;
  }


  public UKRVBuild berths(String berths) {
    this.berths = berths;
    return this;
  }

  /**
   * berths of RV
   * @return berths
   */
  @javax.annotation.Nullable
  public String getBerths() {
    return berths;
  }

  public void setBerths(String berths) {
    this.berths = berths;
  }


  public UKRVBuild category(String category) {
    this.category = category;
    return this;
  }

  /**
   * category of the RV
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public UKRVBuild chassis(String chassis) {
    this.chassis = chassis;
    return this;
  }

  /**
   * chassis of RV
   * @return chassis
   */
  @javax.annotation.Nullable
  public String getChassis() {
    return chassis;
  }

  public void setChassis(String chassis) {
    this.chassis = chassis;
  }


  public UKRVBuild driveType(String driveType) {
    this.driveType = driveType;
    return this;
  }

  /**
   * drive_type of RV
   * @return driveType
   */
  @javax.annotation.Nullable
  public String getDriveType() {
    return driveType;
  }

  public void setDriveType(String driveType) {
    this.driveType = driveType;
  }


  public UKRVBuild drivetrain(String drivetrain) {
    this.drivetrain = drivetrain;
    return this;
  }

  /**
   * Drivetrain of the RV
   * @return drivetrain
   */
  @javax.annotation.Nullable
  public String getDrivetrain() {
    return drivetrain;
  }

  public void setDrivetrain(String drivetrain) {
    this.drivetrain = drivetrain;
  }


  public UKRVBuild engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Engine of the RV
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public UKRVBuild engineSize(String engineSize) {
    this.engineSize = engineSize;
    return this;
  }

  /**
   * engine_size of RV
   * @return engineSize
   */
  @javax.annotation.Nullable
  public String getEngineSize() {
    return engineSize;
  }

  public void setEngineSize(String engineSize) {
    this.engineSize = engineSize;
  }


  public UKRVBuild exteriorLength(String exteriorLength) {
    this.exteriorLength = exteriorLength;
    return this;
  }

  /**
   * exterior_length of RV
   * @return exteriorLength
   */
  @javax.annotation.Nullable
  public String getExteriorLength() {
    return exteriorLength;
  }

  public void setExteriorLength(String exteriorLength) {
    this.exteriorLength = exteriorLength;
  }


  public UKRVBuild floorplan(String floorplan) {
    this.floorplan = floorplan;
    return this;
  }

  /**
   * floorplan of RV
   * @return floorplan
   */
  @javax.annotation.Nullable
  public String getFloorplan() {
    return floorplan;
  }

  public void setFloorplan(String floorplan) {
    this.floorplan = floorplan;
  }


  public UKRVBuild floorplanLayout(String floorplanLayout) {
    this.floorplanLayout = floorplanLayout;
    return this;
  }

  /**
   * floorplan_layout of RV
   * @return floorplanLayout
   */
  @javax.annotation.Nullable
  public String getFloorplanLayout() {
    return floorplanLayout;
  }

  public void setFloorplanLayout(String floorplanLayout) {
    this.floorplanLayout = floorplanLayout;
  }


  public UKRVBuild fuelType(String fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  /**
   * Fuel type of the RV
   * @return fuelType
   */
  @javax.annotation.Nullable
  public String getFuelType() {
    return fuelType;
  }

  public void setFuelType(String fuelType) {
    this.fuelType = fuelType;
  }


  public UKRVBuild gvwr(String gvwr) {
    this.gvwr = gvwr;
    return this;
  }

  /**
   * Gross Vehicle Weight Ratio of RV
   * @return gvwr
   */
  @javax.annotation.Nullable
  public String getGvwr() {
    return gvwr;
  }

  public void setGvwr(String gvwr) {
    this.gvwr = gvwr;
  }


  public UKRVBuild interiorLength(String interiorLength) {
    this.interiorLength = interiorLength;
    return this;
  }

  /**
   * interior_length of RV
   * @return interiorLength
   */
  @javax.annotation.Nullable
  public String getInteriorLength() {
    return interiorLength;
  }

  public void setInteriorLength(String interiorLength) {
    this.interiorLength = interiorLength;
  }


  public UKRVBuild inventoryType(String inventoryType) {
    this.inventoryType = inventoryType;
    return this;
  }

  /**
   * Inventory type of the RV
   * @return inventoryType
   */
  @javax.annotation.Nullable
  public String getInventoryType() {
    return inventoryType;
  }

  public void setInventoryType(String inventoryType) {
    this.inventoryType = inventoryType;
  }


  public UKRVBuild make(String make) {
    this.make = make;
    return this;
  }

  /**
   * RV Make
   * @return make
   */
  @javax.annotation.Nullable
  public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }


  public UKRVBuild model(String model) {
    this.model = model;
    return this;
  }

  /**
   * RV model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public UKRVBuild mtplm(String mtplm) {
    this.mtplm = mtplm;
    return this;
  }

  /**
   * mtplm of RV
   * @return mtplm
   */
  @javax.annotation.Nullable
  public String getMtplm() {
    return mtplm;
  }

  public void setMtplm(String mtplm) {
    this.mtplm = mtplm;
  }


  public UKRVBuild slideouts(String slideouts) {
    this.slideouts = slideouts;
    return this;
  }

  /**
   * Slideouts of the RV
   * @return slideouts
   */
  @javax.annotation.Nullable
  public String getSlideouts() {
    return slideouts;
  }

  public void setSlideouts(String slideouts) {
    this.slideouts = slideouts;
  }


  public UKRVBuild steering(String steering) {
    this.steering = steering;
    return this;
  }

  /**
   * steering of RV
   * @return steering
   */
  @javax.annotation.Nullable
  public String getSteering() {
    return steering;
  }

  public void setSteering(String steering) {
    this.steering = steering;
  }


  public UKRVBuild subCategory(String subCategory) {
    this.subCategory = subCategory;
    return this;
  }

  /**
   * sub_category of the RV
   * @return subCategory
   */
  @javax.annotation.Nullable
  public String getSubCategory() {
    return subCategory;
  }

  public void setSubCategory(String subCategory) {
    this.subCategory = subCategory;
  }


  public UKRVBuild transmission(String transmission) {
    this.transmission = transmission;
    return this;
  }

  /**
   * Transmission of the RV
   * @return transmission
   */
  @javax.annotation.Nullable
  public String getTransmission() {
    return transmission;
  }

  public void setTransmission(String transmission) {
    this.transmission = transmission;
  }


  public UKRVBuild width(String width) {
    this.width = width;
    return this;
  }

  /**
   * width of RV
   * @return width
   */
  @javax.annotation.Nullable
  public String getWidth() {
    return width;
  }

  public void setWidth(String width) {
    this.width = width;
  }


  public UKRVBuild year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Year of the RV
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UKRVBuild ukRVBuild = (UKRVBuild) o;
    return Objects.equals(this.area, ukRVBuild.area) &&
        Objects.equals(this.berths, ukRVBuild.berths) &&
        Objects.equals(this.category, ukRVBuild.category) &&
        Objects.equals(this.chassis, ukRVBuild.chassis) &&
        Objects.equals(this.driveType, ukRVBuild.driveType) &&
        Objects.equals(this.drivetrain, ukRVBuild.drivetrain) &&
        Objects.equals(this.engine, ukRVBuild.engine) &&
        Objects.equals(this.engineSize, ukRVBuild.engineSize) &&
        Objects.equals(this.exteriorLength, ukRVBuild.exteriorLength) &&
        Objects.equals(this.floorplan, ukRVBuild.floorplan) &&
        Objects.equals(this.floorplanLayout, ukRVBuild.floorplanLayout) &&
        Objects.equals(this.fuelType, ukRVBuild.fuelType) &&
        Objects.equals(this.gvwr, ukRVBuild.gvwr) &&
        Objects.equals(this.interiorLength, ukRVBuild.interiorLength) &&
        Objects.equals(this.inventoryType, ukRVBuild.inventoryType) &&
        Objects.equals(this.make, ukRVBuild.make) &&
        Objects.equals(this.model, ukRVBuild.model) &&
        Objects.equals(this.mtplm, ukRVBuild.mtplm) &&
        Objects.equals(this.slideouts, ukRVBuild.slideouts) &&
        Objects.equals(this.steering, ukRVBuild.steering) &&
        Objects.equals(this.subCategory, ukRVBuild.subCategory) &&
        Objects.equals(this.transmission, ukRVBuild.transmission) &&
        Objects.equals(this.width, ukRVBuild.width) &&
        Objects.equals(this.year, ukRVBuild.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(area, berths, category, chassis, driveType, drivetrain, engine, engineSize, exteriorLength, floorplan, floorplanLayout, fuelType, gvwr, interiorLength, inventoryType, make, model, mtplm, slideouts, steering, subCategory, transmission, width, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UKRVBuild {\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    berths: ").append(toIndentedString(berths)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    chassis: ").append(toIndentedString(chassis)).append("\n");
    sb.append("    driveType: ").append(toIndentedString(driveType)).append("\n");
    sb.append("    drivetrain: ").append(toIndentedString(drivetrain)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineSize: ").append(toIndentedString(engineSize)).append("\n");
    sb.append("    exteriorLength: ").append(toIndentedString(exteriorLength)).append("\n");
    sb.append("    floorplan: ").append(toIndentedString(floorplan)).append("\n");
    sb.append("    floorplanLayout: ").append(toIndentedString(floorplanLayout)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    gvwr: ").append(toIndentedString(gvwr)).append("\n");
    sb.append("    interiorLength: ").append(toIndentedString(interiorLength)).append("\n");
    sb.append("    inventoryType: ").append(toIndentedString(inventoryType)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    mtplm: ").append(toIndentedString(mtplm)).append("\n");
    sb.append("    slideouts: ").append(toIndentedString(slideouts)).append("\n");
    sb.append("    steering: ").append(toIndentedString(steering)).append("\n");
    sb.append("    subCategory: ").append(toIndentedString(subCategory)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("area");
    openapiFields.add("berths");
    openapiFields.add("category");
    openapiFields.add("chassis");
    openapiFields.add("drive_type");
    openapiFields.add("drivetrain");
    openapiFields.add("engine");
    openapiFields.add("engine_size");
    openapiFields.add("exterior_length");
    openapiFields.add("floorplan");
    openapiFields.add("floorplan_layout");
    openapiFields.add("fuel_type");
    openapiFields.add("gvwr");
    openapiFields.add("interior_length");
    openapiFields.add("inventory_type");
    openapiFields.add("make");
    openapiFields.add("model");
    openapiFields.add("mtplm");
    openapiFields.add("slideouts");
    openapiFields.add("steering");
    openapiFields.add("sub_category");
    openapiFields.add("transmission");
    openapiFields.add("width");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UKRVBuild
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UKRVBuild.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UKRVBuild is not found in the empty JSON string", UKRVBuild.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UKRVBuild.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UKRVBuild` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("area") != null && !jsonObj.get("area").isJsonNull()) && !jsonObj.get("area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("area").toString()));
      }
      if ((jsonObj.get("berths") != null && !jsonObj.get("berths").isJsonNull()) && !jsonObj.get("berths").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `berths` to be a primitive type in the JSON string but got `%s`", jsonObj.get("berths").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("chassis") != null && !jsonObj.get("chassis").isJsonNull()) && !jsonObj.get("chassis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chassis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chassis").toString()));
      }
      if ((jsonObj.get("drive_type") != null && !jsonObj.get("drive_type").isJsonNull()) && !jsonObj.get("drive_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drive_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drive_type").toString()));
      }
      if ((jsonObj.get("drivetrain") != null && !jsonObj.get("drivetrain").isJsonNull()) && !jsonObj.get("drivetrain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drivetrain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drivetrain").toString()));
      }
      if ((jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) && !jsonObj.get("engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine").toString()));
      }
      if ((jsonObj.get("engine_size") != null && !jsonObj.get("engine_size").isJsonNull()) && !jsonObj.get("engine_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_size").toString()));
      }
      if ((jsonObj.get("exterior_length") != null && !jsonObj.get("exterior_length").isJsonNull()) && !jsonObj.get("exterior_length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exterior_length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exterior_length").toString()));
      }
      if ((jsonObj.get("floorplan") != null && !jsonObj.get("floorplan").isJsonNull()) && !jsonObj.get("floorplan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floorplan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floorplan").toString()));
      }
      if ((jsonObj.get("floorplan_layout") != null && !jsonObj.get("floorplan_layout").isJsonNull()) && !jsonObj.get("floorplan_layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floorplan_layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floorplan_layout").toString()));
      }
      if ((jsonObj.get("fuel_type") != null && !jsonObj.get("fuel_type").isJsonNull()) && !jsonObj.get("fuel_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fuel_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fuel_type").toString()));
      }
      if ((jsonObj.get("gvwr") != null && !jsonObj.get("gvwr").isJsonNull()) && !jsonObj.get("gvwr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gvwr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gvwr").toString()));
      }
      if ((jsonObj.get("interior_length") != null && !jsonObj.get("interior_length").isJsonNull()) && !jsonObj.get("interior_length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interior_length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interior_length").toString()));
      }
      if ((jsonObj.get("inventory_type") != null && !jsonObj.get("inventory_type").isJsonNull()) && !jsonObj.get("inventory_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventory_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventory_type").toString()));
      }
      if ((jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) && !jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("mtplm") != null && !jsonObj.get("mtplm").isJsonNull()) && !jsonObj.get("mtplm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mtplm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mtplm").toString()));
      }
      if ((jsonObj.get("slideouts") != null && !jsonObj.get("slideouts").isJsonNull()) && !jsonObj.get("slideouts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slideouts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slideouts").toString()));
      }
      if ((jsonObj.get("steering") != null && !jsonObj.get("steering").isJsonNull()) && !jsonObj.get("steering").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `steering` to be a primitive type in the JSON string but got `%s`", jsonObj.get("steering").toString()));
      }
      if ((jsonObj.get("sub_category") != null && !jsonObj.get("sub_category").isJsonNull()) && !jsonObj.get("sub_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_category").toString()));
      }
      if ((jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) && !jsonObj.get("transmission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission").toString()));
      }
      if ((jsonObj.get("width") != null && !jsonObj.get("width").isJsonNull()) && !jsonObj.get("width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("width").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UKRVBuild.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UKRVBuild' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UKRVBuild> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UKRVBuild.class));

       return (TypeAdapter<T>) new TypeAdapter<UKRVBuild>() {
           @Override
           public void write(JsonWriter out, UKRVBuild value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UKRVBuild read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UKRVBuild given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UKRVBuild
   * @throws IOException if the JSON string is invalid with respect to UKRVBuild
   */
  public static UKRVBuild fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UKRVBuild.class);
  }

  /**
   * Convert an instance of UKRVBuild to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

