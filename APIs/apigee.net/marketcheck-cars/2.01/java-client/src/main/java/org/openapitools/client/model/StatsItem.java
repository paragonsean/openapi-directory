/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StatsItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StatsItem {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Integer max;

  public static final String SERIALIZED_NAME_MEAN = "mean";
  @SerializedName(SERIALIZED_NAME_MEAN)
  private BigDecimal mean;

  public static final String SERIALIZED_NAME_MEDIAN = "median";
  @SerializedName(SERIALIZED_NAME_MEDIAN)
  private BigDecimal median;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Integer min;

  public static final String SERIALIZED_NAME_MISSING = "missing";
  @SerializedName(SERIALIZED_NAME_MISSING)
  private Integer missing;

  public static final String SERIALIZED_NAME_STDDEV = "stddev";
  @SerializedName(SERIALIZED_NAME_STDDEV)
  private BigDecimal stddev;

  public static final String SERIALIZED_NAME_SUM = "sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Integer sum;

  public static final String SERIALIZED_NAME_SUM_OF_SQUARES = "sum_of_squares";
  @SerializedName(SERIALIZED_NAME_SUM_OF_SQUARES)
  private BigDecimal sumOfSquares;

  public StatsItem() {
  }

  public StatsItem count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public StatsItem max(Integer max) {
    this.max = max;
    return this;
  }

  /**
   * Maximum value of the field
   * @return max
   */
  @javax.annotation.Nullable
  public Integer getMax() {
    return max;
  }

  public void setMax(Integer max) {
    this.max = max;
  }


  public StatsItem mean(BigDecimal mean) {
    this.mean = mean;
    return this;
  }

  /**
   * Mean of the field
   * @return mean
   */
  @javax.annotation.Nullable
  public BigDecimal getMean() {
    return mean;
  }

  public void setMean(BigDecimal mean) {
    this.mean = mean;
  }


  public StatsItem median(BigDecimal median) {
    this.median = median;
    return this;
  }

  /**
   * median of the field
   * @return median
   */
  @javax.annotation.Nullable
  public BigDecimal getMedian() {
    return median;
  }

  public void setMedian(BigDecimal median) {
    this.median = median;
  }


  public StatsItem min(Integer min) {
    this.min = min;
    return this;
  }

  /**
   * Minimum value of the field
   * @return min
   */
  @javax.annotation.Nullable
  public Integer getMin() {
    return min;
  }

  public void setMin(Integer min) {
    this.min = min;
  }


  public StatsItem missing(Integer missing) {
    this.missing = missing;
    return this;
  }

  /**
   * count of listings missing particular field
   * @return missing
   */
  @javax.annotation.Nullable
  public Integer getMissing() {
    return missing;
  }

  public void setMissing(Integer missing) {
    this.missing = missing;
  }


  public StatsItem stddev(BigDecimal stddev) {
    this.stddev = stddev;
    return this;
  }

  /**
   * stddev of the field
   * @return stddev
   */
  @javax.annotation.Nullable
  public BigDecimal getStddev() {
    return stddev;
  }

  public void setStddev(BigDecimal stddev) {
    this.stddev = stddev;
  }


  public StatsItem sum(Integer sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Summation of all values of the field
   * @return sum
   */
  @javax.annotation.Nullable
  public Integer getSum() {
    return sum;
  }

  public void setSum(Integer sum) {
    this.sum = sum;
  }


  public StatsItem sumOfSquares(BigDecimal sumOfSquares) {
    this.sumOfSquares = sumOfSquares;
    return this;
  }

  /**
   * sum_of_squares of the field
   * @return sumOfSquares
   */
  @javax.annotation.Nullable
  public BigDecimal getSumOfSquares() {
    return sumOfSquares;
  }

  public void setSumOfSquares(BigDecimal sumOfSquares) {
    this.sumOfSquares = sumOfSquares;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatsItem statsItem = (StatsItem) o;
    return Objects.equals(this.count, statsItem.count) &&
        Objects.equals(this.max, statsItem.max) &&
        Objects.equals(this.mean, statsItem.mean) &&
        Objects.equals(this.median, statsItem.median) &&
        Objects.equals(this.min, statsItem.min) &&
        Objects.equals(this.missing, statsItem.missing) &&
        Objects.equals(this.stddev, statsItem.stddev) &&
        Objects.equals(this.sum, statsItem.sum) &&
        Objects.equals(this.sumOfSquares, statsItem.sumOfSquares);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, max, mean, median, min, missing, stddev, sum, sumOfSquares);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatsItem {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    median: ").append(toIndentedString(median)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    missing: ").append(toIndentedString(missing)).append("\n");
    sb.append("    stddev: ").append(toIndentedString(stddev)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    sumOfSquares: ").append(toIndentedString(sumOfSquares)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("max");
    openapiFields.add("mean");
    openapiFields.add("median");
    openapiFields.add("min");
    openapiFields.add("missing");
    openapiFields.add("stddev");
    openapiFields.add("sum");
    openapiFields.add("sum_of_squares");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatsItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatsItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatsItem is not found in the empty JSON string", StatsItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatsItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatsItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatsItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatsItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatsItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatsItem.class));

       return (TypeAdapter<T>) new TypeAdapter<StatsItem>() {
           @Override
           public void write(JsonWriter out, StatsItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatsItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatsItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatsItem
   * @throws IOException if the JSON string is invalid with respect to StatsItem
   */
  public static StatsItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatsItem.class);
  }

  /**
   * Convert an instance of StatsItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

