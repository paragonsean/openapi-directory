/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes Market days supply results for year make model trim combination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Mds {
  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private String make;

  public static final String SERIALIZED_NAME_MDS = "mds";
  @SerializedName(SERIALIZED_NAME_MDS)
  private Integer mds;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_SOLD_VINS = "sold_vins";
  @SerializedName(SERIALIZED_NAME_SOLD_VINS)
  private List<String> soldVins = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_ACTIVE_CARS_FOR_YMMT = "total_active_cars_for_ymmt";
  @SerializedName(SERIALIZED_NAME_TOTAL_ACTIVE_CARS_FOR_YMMT)
  private Integer totalActiveCarsForYmmt;

  public static final String SERIALIZED_NAME_TOTAL_CARS_SOLD_IN_LAST45_DAYS = "total_cars_sold_in_last_45_days";
  @SerializedName(SERIALIZED_NAME_TOTAL_CARS_SOLD_IN_LAST45_DAYS)
  private Integer totalCarsSoldInLast45Days;

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private String trim;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public Mds() {
  }

  public Mds make(String make) {
    this.make = make;
    return this;
  }

  /**
   * Make of vin provided
   * @return make
   */
  @javax.annotation.Nullable
  public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }


  public Mds mds(Integer mds) {
    this.mds = mds;
    return this;
  }

  /**
   * Provides Market days supply count
   * @return mds
   */
  @javax.annotation.Nullable
  public Integer getMds() {
    return mds;
  }

  public void setMds(Integer mds) {
    this.mds = mds;
  }


  public Mds model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Model of vin provided
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public Mds soldVins(List<String> soldVins) {
    this.soldVins = soldVins;
    return this;
  }

  public Mds addSoldVinsItem(String soldVinsItem) {
    if (this.soldVins == null) {
      this.soldVins = new ArrayList<>();
    }
    this.soldVins.add(soldVinsItem);
    return this;
  }

  /**
   * Sold vins array
   * @return soldVins
   */
  @javax.annotation.Nullable
  public List<String> getSoldVins() {
    return soldVins;
  }

  public void setSoldVins(List<String> soldVins) {
    this.soldVins = soldVins;
  }


  public Mds totalActiveCarsForYmmt(Integer totalActiveCarsForYmmt) {
    this.totalActiveCarsForYmmt = totalActiveCarsForYmmt;
    return this;
  }

  /**
   * Active cars for ymmt combination
   * @return totalActiveCarsForYmmt
   */
  @javax.annotation.Nullable
  public Integer getTotalActiveCarsForYmmt() {
    return totalActiveCarsForYmmt;
  }

  public void setTotalActiveCarsForYmmt(Integer totalActiveCarsForYmmt) {
    this.totalActiveCarsForYmmt = totalActiveCarsForYmmt;
  }


  public Mds totalCarsSoldInLast45Days(Integer totalCarsSoldInLast45Days) {
    this.totalCarsSoldInLast45Days = totalCarsSoldInLast45Days;
    return this;
  }

  /**
   * Cars sold in last 45 days
   * @return totalCarsSoldInLast45Days
   */
  @javax.annotation.Nullable
  public Integer getTotalCarsSoldInLast45Days() {
    return totalCarsSoldInLast45Days;
  }

  public void setTotalCarsSoldInLast45Days(Integer totalCarsSoldInLast45Days) {
    this.totalCarsSoldInLast45Days = totalCarsSoldInLast45Days;
  }


  public Mds trim(String trim) {
    this.trim = trim;
    return this;
  }

  /**
   * Trim of vin provided
   * @return trim
   */
  @javax.annotation.Nullable
  public String getTrim() {
    return trim;
  }

  public void setTrim(String trim) {
    this.trim = trim;
  }


  public Mds year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Year of vin provided
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mds mds = (Mds) o;
    return Objects.equals(this.make, mds.make) &&
        Objects.equals(this.mds, mds.mds) &&
        Objects.equals(this.model, mds.model) &&
        Objects.equals(this.soldVins, mds.soldVins) &&
        Objects.equals(this.totalActiveCarsForYmmt, mds.totalActiveCarsForYmmt) &&
        Objects.equals(this.totalCarsSoldInLast45Days, mds.totalCarsSoldInLast45Days) &&
        Objects.equals(this.trim, mds.trim) &&
        Objects.equals(this.year, mds.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(make, mds, model, soldVins, totalActiveCarsForYmmt, totalCarsSoldInLast45Days, trim, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mds {\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    mds: ").append(toIndentedString(mds)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    soldVins: ").append(toIndentedString(soldVins)).append("\n");
    sb.append("    totalActiveCarsForYmmt: ").append(toIndentedString(totalActiveCarsForYmmt)).append("\n");
    sb.append("    totalCarsSoldInLast45Days: ").append(toIndentedString(totalCarsSoldInLast45Days)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("make");
    openapiFields.add("mds");
    openapiFields.add("model");
    openapiFields.add("sold_vins");
    openapiFields.add("total_active_cars_for_ymmt");
    openapiFields.add("total_cars_sold_in_last_45_days");
    openapiFields.add("trim");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Mds
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Mds.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Mds is not found in the empty JSON string", Mds.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Mds.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Mds` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) && !jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sold_vins") != null && !jsonObj.get("sold_vins").isJsonNull() && !jsonObj.get("sold_vins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sold_vins` to be an array in the JSON string but got `%s`", jsonObj.get("sold_vins").toString()));
      }
      if ((jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) && !jsonObj.get("trim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trim").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Mds.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Mds' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Mds> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Mds.class));

       return (TypeAdapter<T>) new TypeAdapter<Mds>() {
           @Override
           public void write(JsonWriter out, Mds value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Mds read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Mds given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Mds
   * @throws IOException if the JSON string is invalid with respect to Mds
   */
  public static Mds fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Mds.class);
  }

  /**
   * Convert an instance of Mds to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

