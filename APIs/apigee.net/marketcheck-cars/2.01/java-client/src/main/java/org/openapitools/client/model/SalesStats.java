/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sales stats response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesStats {
  public static final String SERIALIZED_NAME_ABSOLUTE_MEAN_DEVIATION = "absolute_mean_deviation";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_MEAN_DEVIATION)
  private BigDecimal absoluteMeanDeviation;

  public static final String SERIALIZED_NAME_IQR = "iqr";
  @SerializedName(SERIALIZED_NAME_IQR)
  private BigDecimal iqr;

  public static final String SERIALIZED_NAME_MEAN = "mean";
  @SerializedName(SERIALIZED_NAME_MEAN)
  private BigDecimal mean;

  public static final String SERIALIZED_NAME_MEDIAN = "median";
  @SerializedName(SERIALIZED_NAME_MEDIAN)
  private BigDecimal median;

  public static final String SERIALIZED_NAME_POPULATION_STANDARD_DEVIATION = "population_standard_deviation";
  @SerializedName(SERIALIZED_NAME_POPULATION_STANDARD_DEVIATION)
  private BigDecimal populationStandardDeviation;

  public static final String SERIALIZED_NAME_STANDARD_DEVIATION = "standard_deviation";
  @SerializedName(SERIALIZED_NAME_STANDARD_DEVIATION)
  private BigDecimal standardDeviation;

  public static final String SERIALIZED_NAME_TRIMMED_MEAN = "trimmed_mean";
  @SerializedName(SERIALIZED_NAME_TRIMMED_MEAN)
  private BigDecimal trimmedMean;

  public static final String SERIALIZED_NAME_VARIANCE = "variance";
  @SerializedName(SERIALIZED_NAME_VARIANCE)
  private BigDecimal variance;

  public static final String SERIALIZED_NAME_WEIGHTED_MEAN = "weighted_mean";
  @SerializedName(SERIALIZED_NAME_WEIGHTED_MEAN)
  private BigDecimal weightedMean;

  public SalesStats() {
  }

  public SalesStats absoluteMeanDeviation(BigDecimal absoluteMeanDeviation) {
    this.absoluteMeanDeviation = absoluteMeanDeviation;
    return this;
  }

  /**
   * absolute_mean_deviation
   * @return absoluteMeanDeviation
   */
  @javax.annotation.Nullable
  public BigDecimal getAbsoluteMeanDeviation() {
    return absoluteMeanDeviation;
  }

  public void setAbsoluteMeanDeviation(BigDecimal absoluteMeanDeviation) {
    this.absoluteMeanDeviation = absoluteMeanDeviation;
  }


  public SalesStats iqr(BigDecimal iqr) {
    this.iqr = iqr;
    return this;
  }

  /**
   * iqr
   * @return iqr
   */
  @javax.annotation.Nullable
  public BigDecimal getIqr() {
    return iqr;
  }

  public void setIqr(BigDecimal iqr) {
    this.iqr = iqr;
  }


  public SalesStats mean(BigDecimal mean) {
    this.mean = mean;
    return this;
  }

  /**
   * mean
   * @return mean
   */
  @javax.annotation.Nullable
  public BigDecimal getMean() {
    return mean;
  }

  public void setMean(BigDecimal mean) {
    this.mean = mean;
  }


  public SalesStats median(BigDecimal median) {
    this.median = median;
    return this;
  }

  /**
   * median
   * @return median
   */
  @javax.annotation.Nullable
  public BigDecimal getMedian() {
    return median;
  }

  public void setMedian(BigDecimal median) {
    this.median = median;
  }


  public SalesStats populationStandardDeviation(BigDecimal populationStandardDeviation) {
    this.populationStandardDeviation = populationStandardDeviation;
    return this;
  }

  /**
   * population_standard_deviation
   * @return populationStandardDeviation
   */
  @javax.annotation.Nullable
  public BigDecimal getPopulationStandardDeviation() {
    return populationStandardDeviation;
  }

  public void setPopulationStandardDeviation(BigDecimal populationStandardDeviation) {
    this.populationStandardDeviation = populationStandardDeviation;
  }


  public SalesStats standardDeviation(BigDecimal standardDeviation) {
    this.standardDeviation = standardDeviation;
    return this;
  }

  /**
   * standard_deviation
   * @return standardDeviation
   */
  @javax.annotation.Nullable
  public BigDecimal getStandardDeviation() {
    return standardDeviation;
  }

  public void setStandardDeviation(BigDecimal standardDeviation) {
    this.standardDeviation = standardDeviation;
  }


  public SalesStats trimmedMean(BigDecimal trimmedMean) {
    this.trimmedMean = trimmedMean;
    return this;
  }

  /**
   * trimmed_mean
   * @return trimmedMean
   */
  @javax.annotation.Nullable
  public BigDecimal getTrimmedMean() {
    return trimmedMean;
  }

  public void setTrimmedMean(BigDecimal trimmedMean) {
    this.trimmedMean = trimmedMean;
  }


  public SalesStats variance(BigDecimal variance) {
    this.variance = variance;
    return this;
  }

  /**
   * variance
   * @return variance
   */
  @javax.annotation.Nullable
  public BigDecimal getVariance() {
    return variance;
  }

  public void setVariance(BigDecimal variance) {
    this.variance = variance;
  }


  public SalesStats weightedMean(BigDecimal weightedMean) {
    this.weightedMean = weightedMean;
    return this;
  }

  /**
   * weighted_mean
   * @return weightedMean
   */
  @javax.annotation.Nullable
  public BigDecimal getWeightedMean() {
    return weightedMean;
  }

  public void setWeightedMean(BigDecimal weightedMean) {
    this.weightedMean = weightedMean;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesStats salesStats = (SalesStats) o;
    return Objects.equals(this.absoluteMeanDeviation, salesStats.absoluteMeanDeviation) &&
        Objects.equals(this.iqr, salesStats.iqr) &&
        Objects.equals(this.mean, salesStats.mean) &&
        Objects.equals(this.median, salesStats.median) &&
        Objects.equals(this.populationStandardDeviation, salesStats.populationStandardDeviation) &&
        Objects.equals(this.standardDeviation, salesStats.standardDeviation) &&
        Objects.equals(this.trimmedMean, salesStats.trimmedMean) &&
        Objects.equals(this.variance, salesStats.variance) &&
        Objects.equals(this.weightedMean, salesStats.weightedMean);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteMeanDeviation, iqr, mean, median, populationStandardDeviation, standardDeviation, trimmedMean, variance, weightedMean);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesStats {\n");
    sb.append("    absoluteMeanDeviation: ").append(toIndentedString(absoluteMeanDeviation)).append("\n");
    sb.append("    iqr: ").append(toIndentedString(iqr)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    median: ").append(toIndentedString(median)).append("\n");
    sb.append("    populationStandardDeviation: ").append(toIndentedString(populationStandardDeviation)).append("\n");
    sb.append("    standardDeviation: ").append(toIndentedString(standardDeviation)).append("\n");
    sb.append("    trimmedMean: ").append(toIndentedString(trimmedMean)).append("\n");
    sb.append("    variance: ").append(toIndentedString(variance)).append("\n");
    sb.append("    weightedMean: ").append(toIndentedString(weightedMean)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absolute_mean_deviation");
    openapiFields.add("iqr");
    openapiFields.add("mean");
    openapiFields.add("median");
    openapiFields.add("population_standard_deviation");
    openapiFields.add("standard_deviation");
    openapiFields.add("trimmed_mean");
    openapiFields.add("variance");
    openapiFields.add("weighted_mean");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesStats is not found in the empty JSON string", SalesStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesStats.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesStats>() {
           @Override
           public void write(JsonWriter out, SalesStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesStats
   * @throws IOException if the JSON string is invalid with respect to SalesStats
   */
  public static SalesStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesStats.class);
  }

  /**
   * Convert an instance of SalesStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

