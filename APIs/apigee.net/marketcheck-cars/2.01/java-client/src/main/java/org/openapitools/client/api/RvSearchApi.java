/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ListingExtraAttributes;
import org.openapitools.client.model.ListingMedia;
import org.openapitools.client.model.RVListing;
import org.openapitools.client.model.RVSearchResponse;
import org.openapitools.client.model.SearchAutoCompleteResponse;
import org.openapitools.client.model.UKRVSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RvSearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RvSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RvSearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listingRvIdExtraGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvIdExtraGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/rv/{id}/extra"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingRvIdExtraGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingRvIdExtraGet(Async)");
        }

        return listingRvIdExtraGetCall(id, apiKey, _callback);

    }

    /**
     * Long text RV Listings attributes for Listing with the given id
     * Get RV listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ListingExtraAttributes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingExtraAttributes listingRvIdExtraGet(String id, String apiKey) throws ApiException {
        ApiResponse<ListingExtraAttributes> localVarResp = listingRvIdExtraGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Long text RV Listings attributes for Listing with the given id
     * Get RV listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ListingExtraAttributes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingExtraAttributes> listingRvIdExtraGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingRvIdExtraGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Long text RV Listings attributes for Listing with the given id (asynchronously)
     * Get RV listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvIdExtraGetAsync(String id, String apiKey, final ApiCallback<ListingExtraAttributes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingRvIdExtraGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingRvIdGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvIdGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/rv/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingRvIdGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingRvIdGet(Async)");
        }

        return listingRvIdGetCall(id, apiKey, _callback);

    }

    /**
     * RV listing by id
     * Get a particular RV listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return RVListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RVListing listingRvIdGet(String id, String apiKey) throws ApiException {
        ApiResponse<RVListing> localVarResp = listingRvIdGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * RV listing by id
     * Get a particular RV listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;RVListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RVListing> listingRvIdGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingRvIdGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<RVListing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RV listing by id (asynchronously)
     * Get a particular RV listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvIdGetAsync(String id, String apiKey, final ApiCallback<RVListing> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingRvIdGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<RVListing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingRvIdMediaGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvIdMediaGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/rv/{id}/media"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingRvIdMediaGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingRvIdMediaGet(Async)");
        }

        return listingRvIdMediaGetCall(id, apiKey, _callback);

    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ListingMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingMedia listingRvIdMediaGet(String id, String apiKey) throws ApiException {
        ApiResponse<ListingMedia> localVarResp = listingRvIdMediaGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ListingMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingMedia> listingRvIdMediaGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingRvIdMediaGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing media by id (asynchronously)
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvIdMediaGetAsync(String id, String apiKey, final ApiCallback<ListingMedia> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingRvIdMediaGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingRvUkIdExtraGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvUkIdExtraGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/rv/uk/{id}/extra"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingRvUkIdExtraGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingRvUkIdExtraGet(Async)");
        }

        return listingRvUkIdExtraGetCall(id, apiKey, _callback);

    }

    /**
     * Long text RV Listings attributes for Listing with the given id
     * Get RV listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ListingExtraAttributes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingExtraAttributes listingRvUkIdExtraGet(String id, String apiKey) throws ApiException {
        ApiResponse<ListingExtraAttributes> localVarResp = listingRvUkIdExtraGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Long text RV Listings attributes for Listing with the given id
     * Get RV listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ListingExtraAttributes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingExtraAttributes> listingRvUkIdExtraGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingRvUkIdExtraGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Long text RV Listings attributes for Listing with the given id (asynchronously)
     * Get RV listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvUkIdExtraGetAsync(String id, String apiKey, final ApiCallback<ListingExtraAttributes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingRvUkIdExtraGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingRvUkIdGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvUkIdGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/rv/uk/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingRvUkIdGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingRvUkIdGet(Async)");
        }

        return listingRvUkIdGetCall(id, apiKey, _callback);

    }

    /**
     * RV listing by id
     * Get a particular RV listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return RVListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RVListing listingRvUkIdGet(String id, String apiKey) throws ApiException {
        ApiResponse<RVListing> localVarResp = listingRvUkIdGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * RV listing by id
     * Get a particular RV listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;RVListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RVListing> listingRvUkIdGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingRvUkIdGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<RVListing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RV listing by id (asynchronously)
     * Get a particular RV listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RV listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvUkIdGetAsync(String id, String apiKey, final ApiCallback<RVListing> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingRvUkIdGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<RVListing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingRvUkIdMediaGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvUkIdMediaGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/rv/uk/{id}/media"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingRvUkIdMediaGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingRvUkIdMediaGet(Async)");
        }

        return listingRvUkIdMediaGetCall(id, apiKey, _callback);

    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ListingMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingMedia listingRvUkIdMediaGet(String id, String apiKey) throws ApiException {
        ApiResponse<ListingMedia> localVarResp = listingRvUkIdMediaGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ListingMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingMedia> listingRvUkIdMediaGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingRvUkIdMediaGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing media by id (asynchronously)
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingRvUkIdMediaGetAsync(String id, String apiKey, final ApiCallback<ListingMedia> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingRvUkIdMediaGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRvActiveGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param modelO To filter listings on their model orig (as described on the webpage) (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param propertyClass Filter RV listings on class (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param slideouts Filter RV listings on slideouts (optional)
     * @param lengthRange length range to filter listings with the length in the range given. Range to be given in the format - min-max e.g. 50-200 (optional)
     * @param length Filter RV listings on length (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param freshWaterCapacity To filter on fresh water capacity of vehicle (optional)
     * @param sleeps To filter data based on sleeps (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param numberOfAwnings To filter on number_of_awnings (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param gvwr To filter on the maximum total weight of your vehicle (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all RV listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRvActiveGetCall(String apiKey, String priceRange, String milesRange, String msrpRange, String yearRange, String searchText, Double latitude, Double longitude, Integer radius, String year, String make, String model, String modelO, String vin, String inventoryType, String stockNo, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engine, String fuelType, String transmission, String propertyClass, String state, String city, String zip, String msaCode, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, String slideouts, String lengthRange, String length, String baseExteriorColor, String baseInteriorColor, String seatingCapacity, String freshWaterCapacity, String sleeps, String cylinders, String numberOfAwnings, String doors, String gvwr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/rv/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (yearRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_range", yearRange));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_text", searchText));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (modelO != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_o", modelO));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (inventoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_type", inventoryType));
        }

        if (stockNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_no", stockNo));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (dealerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_name", dealerName));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (propertyClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("class", propertyClass));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        if (slideouts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slideouts", slideouts));
        }

        if (lengthRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length_range", lengthRange));
        }

        if (length != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (seatingCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seating_capacity", seatingCapacity));
        }

        if (freshWaterCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fresh_water_capacity", freshWaterCapacity));
        }

        if (sleeps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sleeps", sleeps));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (numberOfAwnings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number_of_awnings", numberOfAwnings));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (gvwr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gvwr", gvwr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRvActiveGetValidateBeforeCall(String apiKey, String priceRange, String milesRange, String msrpRange, String yearRange, String searchText, Double latitude, Double longitude, Integer radius, String year, String make, String model, String modelO, String vin, String inventoryType, String stockNo, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engine, String fuelType, String transmission, String propertyClass, String state, String city, String zip, String msaCode, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, String slideouts, String lengthRange, String length, String baseExteriorColor, String baseInteriorColor, String seatingCapacity, String freshWaterCapacity, String sleeps, String cylinders, String numberOfAwnings, String doors, String gvwr, final ApiCallback _callback) throws ApiException {
        return searchRvActiveGetCall(apiKey, priceRange, milesRange, msrpRange, yearRange, searchText, latitude, longitude, radius, year, make, model, modelO, vin, inventoryType, stockNo, source, dealerName, dealerId, exteriorColor, interiorColor, engine, fuelType, transmission, propertyClass, state, city, zip, msaCode, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, slideouts, lengthRange, length, baseExteriorColor, baseInteriorColor, seatingCapacity, freshWaterCapacity, sleeps, cylinders, numberOfAwnings, doors, gvwr, _callback);

    }

    /**
     * Gets active RV listings for the given search criteria
     * This endpoint provides search on RV inventory. This API produces a list of currently active RV from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search RV around a given geo-point within a given radius  2. Search RV for a specific year / make / model or combination of these  3. Search RV matching multiple year, make, model combinatins in the same search request 4. Filter results by most RV specification attributes 5. Filter RV within a given price / miles range 6. Specify a sort order for the results on price / miles / listed date  7. Search RV for a given City / State combination  8. Get Facets to build the search drill downs  9. Get Market averages for price/miles for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param modelO To filter listings on their model orig (as described on the webpage) (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param propertyClass Filter RV listings on class (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param slideouts Filter RV listings on slideouts (optional)
     * @param lengthRange length range to filter listings with the length in the range given. Range to be given in the format - min-max e.g. 50-200 (optional)
     * @param length Filter RV listings on length (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param freshWaterCapacity To filter on fresh water capacity of vehicle (optional)
     * @param sleeps To filter data based on sleeps (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param numberOfAwnings To filter on number_of_awnings (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param gvwr To filter on the maximum total weight of your vehicle (optional)
     * @return RVSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all RV listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RVSearchResponse searchRvActiveGet(String apiKey, String priceRange, String milesRange, String msrpRange, String yearRange, String searchText, Double latitude, Double longitude, Integer radius, String year, String make, String model, String modelO, String vin, String inventoryType, String stockNo, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engine, String fuelType, String transmission, String propertyClass, String state, String city, String zip, String msaCode, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, String slideouts, String lengthRange, String length, String baseExteriorColor, String baseInteriorColor, String seatingCapacity, String freshWaterCapacity, String sleeps, String cylinders, String numberOfAwnings, String doors, String gvwr) throws ApiException {
        ApiResponse<RVSearchResponse> localVarResp = searchRvActiveGetWithHttpInfo(apiKey, priceRange, milesRange, msrpRange, yearRange, searchText, latitude, longitude, radius, year, make, model, modelO, vin, inventoryType, stockNo, source, dealerName, dealerId, exteriorColor, interiorColor, engine, fuelType, transmission, propertyClass, state, city, zip, msaCode, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, slideouts, lengthRange, length, baseExteriorColor, baseInteriorColor, seatingCapacity, freshWaterCapacity, sleeps, cylinders, numberOfAwnings, doors, gvwr);
        return localVarResp.getData();
    }

    /**
     * Gets active RV listings for the given search criteria
     * This endpoint provides search on RV inventory. This API produces a list of currently active RV from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search RV around a given geo-point within a given radius  2. Search RV for a specific year / make / model or combination of these  3. Search RV matching multiple year, make, model combinatins in the same search request 4. Filter results by most RV specification attributes 5. Filter RV within a given price / miles range 6. Specify a sort order for the results on price / miles / listed date  7. Search RV for a given City / State combination  8. Get Facets to build the search drill downs  9. Get Market averages for price/miles for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param modelO To filter listings on their model orig (as described on the webpage) (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param propertyClass Filter RV listings on class (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param slideouts Filter RV listings on slideouts (optional)
     * @param lengthRange length range to filter listings with the length in the range given. Range to be given in the format - min-max e.g. 50-200 (optional)
     * @param length Filter RV listings on length (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param freshWaterCapacity To filter on fresh water capacity of vehicle (optional)
     * @param sleeps To filter data based on sleeps (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param numberOfAwnings To filter on number_of_awnings (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param gvwr To filter on the maximum total weight of your vehicle (optional)
     * @return ApiResponse&lt;RVSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all RV listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RVSearchResponse> searchRvActiveGetWithHttpInfo(String apiKey, String priceRange, String milesRange, String msrpRange, String yearRange, String searchText, Double latitude, Double longitude, Integer radius, String year, String make, String model, String modelO, String vin, String inventoryType, String stockNo, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engine, String fuelType, String transmission, String propertyClass, String state, String city, String zip, String msaCode, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, String slideouts, String lengthRange, String length, String baseExteriorColor, String baseInteriorColor, String seatingCapacity, String freshWaterCapacity, String sleeps, String cylinders, String numberOfAwnings, String doors, String gvwr) throws ApiException {
        okhttp3.Call localVarCall = searchRvActiveGetValidateBeforeCall(apiKey, priceRange, milesRange, msrpRange, yearRange, searchText, latitude, longitude, radius, year, make, model, modelO, vin, inventoryType, stockNo, source, dealerName, dealerId, exteriorColor, interiorColor, engine, fuelType, transmission, propertyClass, state, city, zip, msaCode, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, slideouts, lengthRange, length, baseExteriorColor, baseInteriorColor, seatingCapacity, freshWaterCapacity, sleeps, cylinders, numberOfAwnings, doors, gvwr, null);
        Type localVarReturnType = new TypeToken<RVSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets active RV listings for the given search criteria (asynchronously)
     * This endpoint provides search on RV inventory. This API produces a list of currently active RV from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search RV around a given geo-point within a given radius  2. Search RV for a specific year / make / model or combination of these  3. Search RV matching multiple year, make, model combinatins in the same search request 4. Filter results by most RV specification attributes 5. Filter RV within a given price / miles range 6. Specify a sort order for the results on price / miles / listed date  7. Search RV for a given City / State combination  8. Get Facets to build the search drill downs  9. Get Market averages for price/miles for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param modelO To filter listings on their model orig (as described on the webpage) (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param propertyClass Filter RV listings on class (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param slideouts Filter RV listings on slideouts (optional)
     * @param lengthRange length range to filter listings with the length in the range given. Range to be given in the format - min-max e.g. 50-200 (optional)
     * @param length Filter RV listings on length (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param freshWaterCapacity To filter on fresh water capacity of vehicle (optional)
     * @param sleeps To filter data based on sleeps (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param numberOfAwnings To filter on number_of_awnings (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param gvwr To filter on the maximum total weight of your vehicle (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all RV listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRvActiveGetAsync(String apiKey, String priceRange, String milesRange, String msrpRange, String yearRange, String searchText, Double latitude, Double longitude, Integer radius, String year, String make, String model, String modelO, String vin, String inventoryType, String stockNo, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engine, String fuelType, String transmission, String propertyClass, String state, String city, String zip, String msaCode, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, String slideouts, String lengthRange, String length, String baseExteriorColor, String baseInteriorColor, String seatingCapacity, String freshWaterCapacity, String sleeps, String cylinders, String numberOfAwnings, String doors, String gvwr, final ApiCallback<RVSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRvActiveGetValidateBeforeCall(apiKey, priceRange, milesRange, msrpRange, yearRange, searchText, latitude, longitude, radius, year, make, model, modelO, vin, inventoryType, stockNo, source, dealerName, dealerId, exteriorColor, interiorColor, engine, fuelType, transmission, propertyClass, state, city, zip, msaCode, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, slideouts, lengthRange, length, baseExteriorColor, baseInteriorColor, seatingCapacity, freshWaterCapacity, sleeps, cylinders, numberOfAwnings, doors, gvwr, _callback);
        Type localVarReturnType = new TypeToken<RVSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRvAutoCompleteGet
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param color Color of the vehicle (optional)
     * @param engine To filter listing on their engine (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRvAutoCompleteGetCall(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String vehicleType, String transmission, String drivetrain, String fuelType, String color, String engine, String state, String city, String inventoryType, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, BigDecimal facetMinCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/rv/auto-complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (input != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("input", input));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (inventoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_type", inventoryType));
        }

        if (ignoreCase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignore_case", ignoreCase));
        }

        if (termCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term_counts", termCounts));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sellerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_type", sellerType));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (facetMinCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_min_count", facetMinCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRvAutoCompleteGetValidateBeforeCall(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String vehicleType, String transmission, String drivetrain, String fuelType, String color, String engine, String state, String city, String inventoryType, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, BigDecimal facetMinCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling searchRvAutoCompleteGet(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling searchRvAutoCompleteGet(Async)");
        }

        return searchRvAutoCompleteGetCall(field, input, apiKey, year, make, model, trim, bodyType, vehicleType, transmission, drivetrain, fuelType, color, engine, state, city, inventoryType, ignoreCase, termCounts, sortBy, sellerType, radius, zip, facetMinCount, _callback);

    }

    /**
     * API for auto-completion of inputs
     * Auto-complete the inputs of your end users
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param color Color of the vehicle (optional)
     * @param engine To filter listing on their engine (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @return SearchAutoCompleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SearchAutoCompleteResponse searchRvAutoCompleteGet(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String vehicleType, String transmission, String drivetrain, String fuelType, String color, String engine, String state, String city, String inventoryType, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, BigDecimal facetMinCount) throws ApiException {
        ApiResponse<SearchAutoCompleteResponse> localVarResp = searchRvAutoCompleteGetWithHttpInfo(field, input, apiKey, year, make, model, trim, bodyType, vehicleType, transmission, drivetrain, fuelType, color, engine, state, city, inventoryType, ignoreCase, termCounts, sortBy, sellerType, radius, zip, facetMinCount);
        return localVarResp.getData();
    }

    /**
     * API for auto-completion of inputs
     * Auto-complete the inputs of your end users
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param color Color of the vehicle (optional)
     * @param engine To filter listing on their engine (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @return ApiResponse&lt;SearchAutoCompleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchAutoCompleteResponse> searchRvAutoCompleteGetWithHttpInfo(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String vehicleType, String transmission, String drivetrain, String fuelType, String color, String engine, String state, String city, String inventoryType, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, BigDecimal facetMinCount) throws ApiException {
        okhttp3.Call localVarCall = searchRvAutoCompleteGetValidateBeforeCall(field, input, apiKey, year, make, model, trim, bodyType, vehicleType, transmission, drivetrain, fuelType, color, engine, state, city, inventoryType, ignoreCase, termCounts, sortBy, sellerType, radius, zip, facetMinCount, null);
        Type localVarReturnType = new TypeToken<SearchAutoCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * API for auto-completion of inputs (asynchronously)
     * Auto-complete the inputs of your end users
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param color Color of the vehicle (optional)
     * @param engine To filter listing on their engine (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRvAutoCompleteGetAsync(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String vehicleType, String transmission, String drivetrain, String fuelType, String color, String engine, String state, String city, String inventoryType, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, BigDecimal facetMinCount, final ApiCallback<SearchAutoCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRvAutoCompleteGetValidateBeforeCall(field, input, apiKey, year, make, model, trim, bodyType, vehicleType, transmission, drivetrain, fuelType, color, engine, state, city, inventoryType, ignoreCase, termCounts, sortBy, sellerType, radius, zip, facetMinCount, _callback);
        Type localVarReturnType = new TypeToken<SearchAutoCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRvUkActiveGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param category Filter RV listings on category (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param mtplm To filter rv on mtplm (optional)
     * @param subCategory To filter rv on their sub-category (optional)
     * @param availabilityStatus To filter rv on their availability_status (optional)
     * @param berths To filter rv on their berths (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param widthRange width range to filter listings on width in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param exteriorLengthRange width range to filter listings on exterior_length in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param interiorLengthRange width range to filter listings on interior_length in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param driveType To filter rv on their drive_type (optional)
     * @param steering To filter rv on their steering (optional)
     * @param chassis To filter rv on their chassis (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all RV listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRvUkActiveGetCall(String apiKey, String priceRange, String milesRange, String msrpRange, String yearRange, String searchText, Double latitude, Double longitude, Integer radius, String year, String make, String model, String vin, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engineSize, String fuelType, String category, String state, String city, String county, String postalCode, String zip, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, String baseExteriorColor, String baseInteriorColor, String seatingCapacity, String cylinders, String doors, String mtplm, String subCategory, String availabilityStatus, String berths, String inventoryType, String widthRange, String exteriorLengthRange, String interiorLengthRange, String driveType, String steering, String chassis, String transmission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/rv/uk/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (yearRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_range", yearRange));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_text", searchText));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (dealerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_name", dealerName));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (county != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("county", county));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postal_code", postalCode));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (seatingCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seating_capacity", seatingCapacity));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (mtplm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtplm", mtplm));
        }

        if (subCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_category", subCategory));
        }

        if (availabilityStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("availability_status", availabilityStatus));
        }

        if (berths != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("berths", berths));
        }

        if (inventoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_type", inventoryType));
        }

        if (widthRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width_range", widthRange));
        }

        if (exteriorLengthRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_length_range", exteriorLengthRange));
        }

        if (interiorLengthRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_length_range", interiorLengthRange));
        }

        if (driveType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drive_type", driveType));
        }

        if (steering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("steering", steering));
        }

        if (chassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chassis", chassis));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRvUkActiveGetValidateBeforeCall(String apiKey, String priceRange, String milesRange, String msrpRange, String yearRange, String searchText, Double latitude, Double longitude, Integer radius, String year, String make, String model, String vin, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engineSize, String fuelType, String category, String state, String city, String county, String postalCode, String zip, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, String baseExteriorColor, String baseInteriorColor, String seatingCapacity, String cylinders, String doors, String mtplm, String subCategory, String availabilityStatus, String berths, String inventoryType, String widthRange, String exteriorLengthRange, String interiorLengthRange, String driveType, String steering, String chassis, String transmission, final ApiCallback _callback) throws ApiException {
        return searchRvUkActiveGetCall(apiKey, priceRange, milesRange, msrpRange, yearRange, searchText, latitude, longitude, radius, year, make, model, vin, source, dealerName, dealerId, exteriorColor, interiorColor, engineSize, fuelType, category, state, city, county, postalCode, zip, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, baseExteriorColor, baseInteriorColor, seatingCapacity, cylinders, doors, mtplm, subCategory, availabilityStatus, berths, inventoryType, widthRange, exteriorLengthRange, interiorLengthRange, driveType, steering, chassis, transmission, _callback);

    }

    /**
     * Gets active RV listings for the given search criteria
     * This endpoint provides search on RV inventory. This API produces a list of currently active RV from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search RV around a given geo-point within a given radius  2. Search RV for a specific year / make / model or combination of these  3. Search RV matching multiple year, make, model combinatins in the same search request 4. Filter results by most RV specification attributes 5. Filter RV within a given price / miles range 6. Specify a sort order for the results on price / miles / listed date  7. Search RV for a given City / State combination  8. Get Facets to build the search drill downs  9. Get Market averages for price/miles for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param category Filter RV listings on category (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param mtplm To filter rv on mtplm (optional)
     * @param subCategory To filter rv on their sub-category (optional)
     * @param availabilityStatus To filter rv on their availability_status (optional)
     * @param berths To filter rv on their berths (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param widthRange width range to filter listings on width in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param exteriorLengthRange width range to filter listings on exterior_length in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param interiorLengthRange width range to filter listings on interior_length in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param driveType To filter rv on their drive_type (optional)
     * @param steering To filter rv on their steering (optional)
     * @param chassis To filter rv on their chassis (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @return UKRVSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all RV listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UKRVSearchResponse searchRvUkActiveGet(String apiKey, String priceRange, String milesRange, String msrpRange, String yearRange, String searchText, Double latitude, Double longitude, Integer radius, String year, String make, String model, String vin, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engineSize, String fuelType, String category, String state, String city, String county, String postalCode, String zip, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, String baseExteriorColor, String baseInteriorColor, String seatingCapacity, String cylinders, String doors, String mtplm, String subCategory, String availabilityStatus, String berths, String inventoryType, String widthRange, String exteriorLengthRange, String interiorLengthRange, String driveType, String steering, String chassis, String transmission) throws ApiException {
        ApiResponse<UKRVSearchResponse> localVarResp = searchRvUkActiveGetWithHttpInfo(apiKey, priceRange, milesRange, msrpRange, yearRange, searchText, latitude, longitude, radius, year, make, model, vin, source, dealerName, dealerId, exteriorColor, interiorColor, engineSize, fuelType, category, state, city, county, postalCode, zip, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, baseExteriorColor, baseInteriorColor, seatingCapacity, cylinders, doors, mtplm, subCategory, availabilityStatus, berths, inventoryType, widthRange, exteriorLengthRange, interiorLengthRange, driveType, steering, chassis, transmission);
        return localVarResp.getData();
    }

    /**
     * Gets active RV listings for the given search criteria
     * This endpoint provides search on RV inventory. This API produces a list of currently active RV from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search RV around a given geo-point within a given radius  2. Search RV for a specific year / make / model or combination of these  3. Search RV matching multiple year, make, model combinatins in the same search request 4. Filter results by most RV specification attributes 5. Filter RV within a given price / miles range 6. Specify a sort order for the results on price / miles / listed date  7. Search RV for a given City / State combination  8. Get Facets to build the search drill downs  9. Get Market averages for price/miles for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param category Filter RV listings on category (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param mtplm To filter rv on mtplm (optional)
     * @param subCategory To filter rv on their sub-category (optional)
     * @param availabilityStatus To filter rv on their availability_status (optional)
     * @param berths To filter rv on their berths (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param widthRange width range to filter listings on width in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param exteriorLengthRange width range to filter listings on exterior_length in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param interiorLengthRange width range to filter listings on interior_length in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param driveType To filter rv on their drive_type (optional)
     * @param steering To filter rv on their steering (optional)
     * @param chassis To filter rv on their chassis (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @return ApiResponse&lt;UKRVSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all RV listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UKRVSearchResponse> searchRvUkActiveGetWithHttpInfo(String apiKey, String priceRange, String milesRange, String msrpRange, String yearRange, String searchText, Double latitude, Double longitude, Integer radius, String year, String make, String model, String vin, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engineSize, String fuelType, String category, String state, String city, String county, String postalCode, String zip, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, String baseExteriorColor, String baseInteriorColor, String seatingCapacity, String cylinders, String doors, String mtplm, String subCategory, String availabilityStatus, String berths, String inventoryType, String widthRange, String exteriorLengthRange, String interiorLengthRange, String driveType, String steering, String chassis, String transmission) throws ApiException {
        okhttp3.Call localVarCall = searchRvUkActiveGetValidateBeforeCall(apiKey, priceRange, milesRange, msrpRange, yearRange, searchText, latitude, longitude, radius, year, make, model, vin, source, dealerName, dealerId, exteriorColor, interiorColor, engineSize, fuelType, category, state, city, county, postalCode, zip, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, baseExteriorColor, baseInteriorColor, seatingCapacity, cylinders, doors, mtplm, subCategory, availabilityStatus, berths, inventoryType, widthRange, exteriorLengthRange, interiorLengthRange, driveType, steering, chassis, transmission, null);
        Type localVarReturnType = new TypeToken<UKRVSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets active RV listings for the given search criteria (asynchronously)
     * This endpoint provides search on RV inventory. This API produces a list of currently active RV from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search RV around a given geo-point within a given radius  2. Search RV for a specific year / make / model or combination of these  3. Search RV matching multiple year, make, model combinatins in the same search request 4. Filter results by most RV specification attributes 5. Filter RV within a given price / miles range 6. Specify a sort order for the results on price / miles / listed date  7. Search RV for a given City / State combination  8. Get Facets to build the search drill downs  9. Get Market averages for price/miles for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param category Filter RV listings on category (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param mtplm To filter rv on mtplm (optional)
     * @param subCategory To filter rv on their sub-category (optional)
     * @param availabilityStatus To filter rv on their availability_status (optional)
     * @param berths To filter rv on their berths (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param widthRange width range to filter listings on width in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param exteriorLengthRange width range to filter listings on exterior_length in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param interiorLengthRange width range to filter listings on interior_length in the range given. Range to be given in the format - min-max e.g. 4-8 (optional)
     * @param driveType To filter rv on their drive_type (optional)
     * @param steering To filter rv on their steering (optional)
     * @param chassis To filter rv on their chassis (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all RV listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRvUkActiveGetAsync(String apiKey, String priceRange, String milesRange, String msrpRange, String yearRange, String searchText, Double latitude, Double longitude, Integer radius, String year, String make, String model, String vin, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engineSize, String fuelType, String category, String state, String city, String county, String postalCode, String zip, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, String baseExteriorColor, String baseInteriorColor, String seatingCapacity, String cylinders, String doors, String mtplm, String subCategory, String availabilityStatus, String berths, String inventoryType, String widthRange, String exteriorLengthRange, String interiorLengthRange, String driveType, String steering, String chassis, String transmission, final ApiCallback<UKRVSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRvUkActiveGetValidateBeforeCall(apiKey, priceRange, milesRange, msrpRange, yearRange, searchText, latitude, longitude, radius, year, make, model, vin, source, dealerName, dealerId, exteriorColor, interiorColor, engineSize, fuelType, category, state, city, county, postalCode, zip, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, baseExteriorColor, baseInteriorColor, seatingCapacity, cylinders, doors, mtplm, subCategory, availabilityStatus, berths, inventoryType, widthRange, exteriorLengthRange, interiorLengthRange, driveType, steering, chassis, transmission, _callback);
        Type localVarReturnType = new TypeToken<UKRVSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
