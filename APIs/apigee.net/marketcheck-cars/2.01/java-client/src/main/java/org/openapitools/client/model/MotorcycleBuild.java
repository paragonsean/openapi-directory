/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the Motorcycle specification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MotorcycleBuild {
  public static final String SERIALIZED_NAME_BODY_TYPE = "body_type";
  @SerializedName(SERIALIZED_NAME_BODY_TYPE)
  private String bodyType;

  public static final String SERIALIZED_NAME_CYLINDERS = "cylinders";
  @SerializedName(SERIALIZED_NAME_CYLINDERS)
  private Integer cylinders;

  public static final String SERIALIZED_NAME_DRIVETRAIN = "drivetrain";
  @SerializedName(SERIALIZED_NAME_DRIVETRAIN)
  private String drivetrain;

  public static final String SERIALIZED_NAME_DRY_WEIGHT = "dry_weight";
  @SerializedName(SERIALIZED_NAME_DRY_WEIGHT)
  private String dryWeight;

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuel_type";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private String fuelType;

  public static final String SERIALIZED_NAME_MADE_IN = "made_in";
  @SerializedName(SERIALIZED_NAME_MADE_IN)
  private String madeIn;

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private String make;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private String transmission;

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private String trim;

  public static final String SERIALIZED_NAME_VEHICLE_TYPE = "vehicle_type";
  @SerializedName(SERIALIZED_NAME_VEHICLE_TYPE)
  private String vehicleType;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public MotorcycleBuild() {
  }

  public MotorcycleBuild bodyType(String bodyType) {
    this.bodyType = bodyType;
    return this;
  }

  /**
   * Body type of the motorcycle
   * @return bodyType
   */
  @javax.annotation.Nullable
  public String getBodyType() {
    return bodyType;
  }

  public void setBodyType(String bodyType) {
    this.bodyType = bodyType;
  }


  public MotorcycleBuild cylinders(Integer cylinders) {
    this.cylinders = cylinders;
    return this;
  }

  /**
   * No of cylinders of the motorcycle
   * @return cylinders
   */
  @javax.annotation.Nullable
  public Integer getCylinders() {
    return cylinders;
  }

  public void setCylinders(Integer cylinders) {
    this.cylinders = cylinders;
  }


  public MotorcycleBuild drivetrain(String drivetrain) {
    this.drivetrain = drivetrain;
    return this;
  }

  /**
   * Drivetrain of the motorcycle
   * @return drivetrain
   */
  @javax.annotation.Nullable
  public String getDrivetrain() {
    return drivetrain;
  }

  public void setDrivetrain(String drivetrain) {
    this.drivetrain = drivetrain;
  }


  public MotorcycleBuild dryWeight(String dryWeight) {
    this.dryWeight = dryWeight;
    return this;
  }

  /**
   * Dry weight of motorcycle
   * @return dryWeight
   */
  @javax.annotation.Nullable
  public String getDryWeight() {
    return dryWeight;
  }

  public void setDryWeight(String dryWeight) {
    this.dryWeight = dryWeight;
  }


  public MotorcycleBuild engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Engine of the motorcycle
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public MotorcycleBuild fuelType(String fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  /**
   * Fuel type of the motorcycle
   * @return fuelType
   */
  @javax.annotation.Nullable
  public String getFuelType() {
    return fuelType;
  }

  public void setFuelType(String fuelType) {
    this.fuelType = fuelType;
  }


  public MotorcycleBuild madeIn(String madeIn) {
    this.madeIn = madeIn;
    return this;
  }

  /**
   * Made in of the motorcycle
   * @return madeIn
   */
  @javax.annotation.Nullable
  public String getMadeIn() {
    return madeIn;
  }

  public void setMadeIn(String madeIn) {
    this.madeIn = madeIn;
  }


  public MotorcycleBuild make(String make) {
    this.make = make;
    return this;
  }

  /**
   * Motorcycle Make
   * @return make
   */
  @javax.annotation.Nullable
  public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }


  public MotorcycleBuild model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Motorcycle model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public MotorcycleBuild transmission(String transmission) {
    this.transmission = transmission;
    return this;
  }

  /**
   * Transmission of the motorcycle
   * @return transmission
   */
  @javax.annotation.Nullable
  public String getTransmission() {
    return transmission;
  }

  public void setTransmission(String transmission) {
    this.transmission = transmission;
  }


  public MotorcycleBuild trim(String trim) {
    this.trim = trim;
    return this;
  }

  /**
   * Trim of the motorcycle
   * @return trim
   */
  @javax.annotation.Nullable
  public String getTrim() {
    return trim;
  }

  public void setTrim(String trim) {
    this.trim = trim;
  }


  public MotorcycleBuild vehicleType(String vehicleType) {
    this.vehicleType = vehicleType;
    return this;
  }

  /**
   * Vehicle type of the motorcycle
   * @return vehicleType
   */
  @javax.annotation.Nullable
  public String getVehicleType() {
    return vehicleType;
  }

  public void setVehicleType(String vehicleType) {
    this.vehicleType = vehicleType;
  }


  public MotorcycleBuild year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Year of the motorcycle
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MotorcycleBuild motorcycleBuild = (MotorcycleBuild) o;
    return Objects.equals(this.bodyType, motorcycleBuild.bodyType) &&
        Objects.equals(this.cylinders, motorcycleBuild.cylinders) &&
        Objects.equals(this.drivetrain, motorcycleBuild.drivetrain) &&
        Objects.equals(this.dryWeight, motorcycleBuild.dryWeight) &&
        Objects.equals(this.engine, motorcycleBuild.engine) &&
        Objects.equals(this.fuelType, motorcycleBuild.fuelType) &&
        Objects.equals(this.madeIn, motorcycleBuild.madeIn) &&
        Objects.equals(this.make, motorcycleBuild.make) &&
        Objects.equals(this.model, motorcycleBuild.model) &&
        Objects.equals(this.transmission, motorcycleBuild.transmission) &&
        Objects.equals(this.trim, motorcycleBuild.trim) &&
        Objects.equals(this.vehicleType, motorcycleBuild.vehicleType) &&
        Objects.equals(this.year, motorcycleBuild.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyType, cylinders, drivetrain, dryWeight, engine, fuelType, madeIn, make, model, transmission, trim, vehicleType, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MotorcycleBuild {\n");
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    cylinders: ").append(toIndentedString(cylinders)).append("\n");
    sb.append("    drivetrain: ").append(toIndentedString(drivetrain)).append("\n");
    sb.append("    dryWeight: ").append(toIndentedString(dryWeight)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    madeIn: ").append(toIndentedString(madeIn)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    vehicleType: ").append(toIndentedString(vehicleType)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body_type");
    openapiFields.add("cylinders");
    openapiFields.add("drivetrain");
    openapiFields.add("dry_weight");
    openapiFields.add("engine");
    openapiFields.add("fuel_type");
    openapiFields.add("made_in");
    openapiFields.add("make");
    openapiFields.add("model");
    openapiFields.add("transmission");
    openapiFields.add("trim");
    openapiFields.add("vehicle_type");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MotorcycleBuild
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MotorcycleBuild.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MotorcycleBuild is not found in the empty JSON string", MotorcycleBuild.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MotorcycleBuild.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MotorcycleBuild` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body_type") != null && !jsonObj.get("body_type").isJsonNull()) && !jsonObj.get("body_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_type").toString()));
      }
      if ((jsonObj.get("drivetrain") != null && !jsonObj.get("drivetrain").isJsonNull()) && !jsonObj.get("drivetrain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drivetrain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drivetrain").toString()));
      }
      if ((jsonObj.get("dry_weight") != null && !jsonObj.get("dry_weight").isJsonNull()) && !jsonObj.get("dry_weight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dry_weight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dry_weight").toString()));
      }
      if ((jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) && !jsonObj.get("engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine").toString()));
      }
      if ((jsonObj.get("fuel_type") != null && !jsonObj.get("fuel_type").isJsonNull()) && !jsonObj.get("fuel_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fuel_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fuel_type").toString()));
      }
      if ((jsonObj.get("made_in") != null && !jsonObj.get("made_in").isJsonNull()) && !jsonObj.get("made_in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `made_in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("made_in").toString()));
      }
      if ((jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) && !jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) && !jsonObj.get("transmission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission").toString()));
      }
      if ((jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) && !jsonObj.get("trim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trim").toString()));
      }
      if ((jsonObj.get("vehicle_type") != null && !jsonObj.get("vehicle_type").isJsonNull()) && !jsonObj.get("vehicle_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MotorcycleBuild.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MotorcycleBuild' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MotorcycleBuild> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MotorcycleBuild.class));

       return (TypeAdapter<T>) new TypeAdapter<MotorcycleBuild>() {
           @Override
           public void write(JsonWriter out, MotorcycleBuild value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MotorcycleBuild read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MotorcycleBuild given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MotorcycleBuild
   * @throws IOException if the JSON string is invalid with respect to MotorcycleBuild
   */
  public static MotorcycleBuild fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MotorcycleBuild.class);
  }

  /**
   * Convert an instance of MotorcycleBuild to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

