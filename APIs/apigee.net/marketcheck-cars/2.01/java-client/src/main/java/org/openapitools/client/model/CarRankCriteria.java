/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ranking query request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CarRankCriteria {
  public static final String SERIALIZED_NAME_CARFAX1_OWNER = "carfax_1_owner";
  @SerializedName(SERIALIZED_NAME_CARFAX1_OWNER)
  private BigDecimal carfax1Owner = new BigDecimal("0.9");

  public static final String SERIALIZED_NAME_CARFAX_CLEAN_TITLE = "carfax_clean_title";
  @SerializedName(SERIALIZED_NAME_CARFAX_CLEAN_TITLE)
  private BigDecimal carfaxCleanTitle = new BigDecimal("0.9");

  public static final String SERIALIZED_NAME_DOM = "dom";
  @SerializedName(SERIALIZED_NAME_DOM)
  private BigDecimal dom = new BigDecimal("0.9");

  public static final String SERIALIZED_NAME_DOM180 = "dom_180";
  @SerializedName(SERIALIZED_NAME_DOM180)
  private BigDecimal dom180 = new BigDecimal("0.9");

  public static final String SERIALIZED_NAME_DOM_ACTIVE = "dom_active";
  @SerializedName(SERIALIZED_NAME_DOM_ACTIVE)
  private BigDecimal domActive = new BigDecimal("0.9");

  public static final String SERIALIZED_NAME_IS_CERTIFIED = "is_certified";
  @SerializedName(SERIALIZED_NAME_IS_CERTIFIED)
  private BigDecimal isCertified = new BigDecimal("1");

  public static final String SERIALIZED_NAME_MILES = "miles";
  @SerializedName(SERIALIZED_NAME_MILES)
  private BigDecimal miles = new BigDecimal("0.9");

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price = new BigDecimal("0.9");

  public CarRankCriteria() {
  }

  public CarRankCriteria carfax1Owner(BigDecimal carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
    return this;
  }

  /**
   * Flag to indicate whether listing is carfax_1_owner.Weight for this is ranking process between 0-1.
   * @return carfax1Owner
   */
  @javax.annotation.Nullable
  public BigDecimal getCarfax1Owner() {
    return carfax1Owner;
  }

  public void setCarfax1Owner(BigDecimal carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
  }


  public CarRankCriteria carfaxCleanTitle(BigDecimal carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
    return this;
  }

  /**
   * Flag to indicate whether listing is carfax_clean_title.Weight for this is ranking process between 0-1
   * @return carfaxCleanTitle
   */
  @javax.annotation.Nullable
  public BigDecimal getCarfaxCleanTitle() {
    return carfaxCleanTitle;
  }

  public void setCarfaxCleanTitle(BigDecimal carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
  }


  public CarRankCriteria dom(BigDecimal dom) {
    this.dom = dom;
    return this;
  }

  /**
   * Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1
   * @return dom
   */
  @javax.annotation.Nullable
  public BigDecimal getDom() {
    return dom;
  }

  public void setDom(BigDecimal dom) {
    this.dom = dom;
  }


  public CarRankCriteria dom180(BigDecimal dom180) {
    this.dom180 = dom180;
    return this;
  }

  /**
   * Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1
   * @return dom180
   */
  @javax.annotation.Nullable
  public BigDecimal getDom180() {
    return dom180;
  }

  public void setDom180(BigDecimal dom180) {
    this.dom180 = dom180;
  }


  public CarRankCriteria domActive(BigDecimal domActive) {
    this.domActive = domActive;
    return this;
  }

  /**
   * Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1
   * @return domActive
   */
  @javax.annotation.Nullable
  public BigDecimal getDomActive() {
    return domActive;
  }

  public void setDomActive(BigDecimal domActive) {
    this.domActive = domActive;
  }


  public CarRankCriteria isCertified(BigDecimal isCertified) {
    this.isCertified = isCertified;
    return this;
  }

  /**
   * Certified car.Weight for this is ranking process between 0-1
   * @return isCertified
   */
  @javax.annotation.Nullable
  public BigDecimal getIsCertified() {
    return isCertified;
  }

  public void setIsCertified(BigDecimal isCertified) {
    this.isCertified = isCertified;
  }


  public CarRankCriteria miles(BigDecimal miles) {
    this.miles = miles;
    return this;
  }

  /**
   * Odometer reading / reported miles usage for the car.Weight for this is ranking process between 0-1
   * @return miles
   */
  @javax.annotation.Nullable
  public BigDecimal getMiles() {
    return miles;
  }

  public void setMiles(BigDecimal miles) {
    this.miles = miles;
  }


  public CarRankCriteria price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Asking price for the vehicle. Weight for this is ranking process between 0-1.
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarRankCriteria carRankCriteria = (CarRankCriteria) o;
    return Objects.equals(this.carfax1Owner, carRankCriteria.carfax1Owner) &&
        Objects.equals(this.carfaxCleanTitle, carRankCriteria.carfaxCleanTitle) &&
        Objects.equals(this.dom, carRankCriteria.dom) &&
        Objects.equals(this.dom180, carRankCriteria.dom180) &&
        Objects.equals(this.domActive, carRankCriteria.domActive) &&
        Objects.equals(this.isCertified, carRankCriteria.isCertified) &&
        Objects.equals(this.miles, carRankCriteria.miles) &&
        Objects.equals(this.price, carRankCriteria.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carfax1Owner, carfaxCleanTitle, dom, dom180, domActive, isCertified, miles, price);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarRankCriteria {\n");
    sb.append("    carfax1Owner: ").append(toIndentedString(carfax1Owner)).append("\n");
    sb.append("    carfaxCleanTitle: ").append(toIndentedString(carfaxCleanTitle)).append("\n");
    sb.append("    dom: ").append(toIndentedString(dom)).append("\n");
    sb.append("    dom180: ").append(toIndentedString(dom180)).append("\n");
    sb.append("    domActive: ").append(toIndentedString(domActive)).append("\n");
    sb.append("    isCertified: ").append(toIndentedString(isCertified)).append("\n");
    sb.append("    miles: ").append(toIndentedString(miles)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carfax_1_owner");
    openapiFields.add("carfax_clean_title");
    openapiFields.add("dom");
    openapiFields.add("dom_180");
    openapiFields.add("dom_active");
    openapiFields.add("is_certified");
    openapiFields.add("miles");
    openapiFields.add("price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CarRankCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CarRankCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CarRankCriteria is not found in the empty JSON string", CarRankCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CarRankCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CarRankCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CarRankCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CarRankCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CarRankCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CarRankCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<CarRankCriteria>() {
           @Override
           public void write(JsonWriter out, CarRankCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CarRankCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CarRankCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CarRankCriteria
   * @throws IOException if the JSON string is invalid with respect to CarRankCriteria
   */
  public static CarRankCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CarRankCriteria.class);
  }

  /**
   * Convert an instance of CarRankCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

