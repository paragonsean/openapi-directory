/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Dealer;
import org.openapitools.client.model.DealersResponse;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DealerApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DealerApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DealerApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dealerCarUkIdGet
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealerCarUkIdGetCall(String id, String apiKey, Boolean provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/car/uk/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dealerCarUkIdGetValidateBeforeCall(String id, String apiKey, Boolean provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dealerCarUkIdGet(Async)");
        }

        return dealerCarUkIdGetCall(id, apiKey, provider, _callback);

    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @return Dealer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Dealer dealerCarUkIdGet(String id, String apiKey, Boolean provider) throws ApiException {
        ApiResponse<Dealer> localVarResp = dealerCarUkIdGetWithHttpInfo(id, apiKey, provider);
        return localVarResp.getData();
    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @return ApiResponse&lt;Dealer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dealer> dealerCarUkIdGetWithHttpInfo(String id, String apiKey, Boolean provider) throws ApiException {
        okhttp3.Call localVarCall = dealerCarUkIdGetValidateBeforeCall(id, apiKey, provider, null);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dealer by id (asynchronously)
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealerCarUkIdGetAsync(String id, String apiKey, Boolean provider, final ApiCallback<Dealer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dealerCarUkIdGetValidateBeforeCall(id, apiKey, provider, _callback);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dealerHeavyEquipmentIdGet
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealerHeavyEquipmentIdGetCall(String id, String apiKey, Boolean provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/heavy-equipment/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dealerHeavyEquipmentIdGetValidateBeforeCall(String id, String apiKey, Boolean provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dealerHeavyEquipmentIdGet(Async)");
        }

        return dealerHeavyEquipmentIdGetCall(id, apiKey, provider, _callback);

    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @return Dealer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Dealer dealerHeavyEquipmentIdGet(String id, String apiKey, Boolean provider) throws ApiException {
        ApiResponse<Dealer> localVarResp = dealerHeavyEquipmentIdGetWithHttpInfo(id, apiKey, provider);
        return localVarResp.getData();
    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @return ApiResponse&lt;Dealer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dealer> dealerHeavyEquipmentIdGetWithHttpInfo(String id, String apiKey, Boolean provider) throws ApiException {
        okhttp3.Call localVarCall = dealerHeavyEquipmentIdGetValidateBeforeCall(id, apiKey, provider, null);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dealer by id (asynchronously)
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealerHeavyEquipmentIdGetAsync(String id, String apiKey, Boolean provider, final ApiCallback<Dealer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dealerHeavyEquipmentIdGetValidateBeforeCall(id, apiKey, provider, _callback);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dealerMotorcycleIdGet
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealerMotorcycleIdGetCall(String id, String apiKey, Boolean provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/motorcycle/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dealerMotorcycleIdGetValidateBeforeCall(String id, String apiKey, Boolean provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dealerMotorcycleIdGet(Async)");
        }

        return dealerMotorcycleIdGetCall(id, apiKey, provider, _callback);

    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @return Dealer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Dealer dealerMotorcycleIdGet(String id, String apiKey, Boolean provider) throws ApiException {
        ApiResponse<Dealer> localVarResp = dealerMotorcycleIdGetWithHttpInfo(id, apiKey, provider);
        return localVarResp.getData();
    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @return ApiResponse&lt;Dealer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dealer> dealerMotorcycleIdGetWithHttpInfo(String id, String apiKey, Boolean provider) throws ApiException {
        okhttp3.Call localVarCall = dealerMotorcycleIdGetValidateBeforeCall(id, apiKey, provider, null);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dealer by id (asynchronously)
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealerMotorcycleIdGetAsync(String id, String apiKey, Boolean provider, final ApiCallback<Dealer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dealerMotorcycleIdGetValidateBeforeCall(id, apiKey, provider, _callback);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dealerRvIdGet
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealerRvIdGetCall(String id, String apiKey, Boolean provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/rv/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dealerRvIdGetValidateBeforeCall(String id, String apiKey, Boolean provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dealerRvIdGet(Async)");
        }

        return dealerRvIdGetCall(id, apiKey, provider, _callback);

    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @return Dealer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Dealer dealerRvIdGet(String id, String apiKey, Boolean provider) throws ApiException {
        ApiResponse<Dealer> localVarResp = dealerRvIdGetWithHttpInfo(id, apiKey, provider);
        return localVarResp.getData();
    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @return ApiResponse&lt;Dealer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dealer> dealerRvIdGetWithHttpInfo(String id, String apiKey, Boolean provider) throws ApiException {
        okhttp3.Call localVarCall = dealerRvIdGetValidateBeforeCall(id, apiKey, provider, null);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dealer by id (asynchronously)
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealerRvIdGetAsync(String id, String apiKey, Boolean provider, final ApiCallback<Dealer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dealerRvIdGetValidateBeforeCall(id, apiKey, provider, _callback);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dealerSearch
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealerSearchCall(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealers/car";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (listingCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listing_count_range", listingCountRange));
        }

        if (inventoryUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_url", inventoryUrl));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dealerSearchValidateBeforeCall(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback _callback) throws ApiException {
        return dealerSearchCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, _callback);

    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @return DealersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DealersResponse dealerSearch(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets) throws ApiException {
        ApiResponse<DealersResponse> localVarResp = dealerSearchWithHttpInfo(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets);
        return localVarResp.getData();
    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @return ApiResponse&lt;DealersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealersResponse> dealerSearchWithHttpInfo(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets) throws ApiException {
        okhttp3.Call localVarCall = dealerSearchValidateBeforeCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, null);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find car dealers around (asynchronously)
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealerSearchAsync(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback<DealersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dealerSearchValidateBeforeCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, _callback);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dealersCarUkGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealersCarUkGetCall(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String county, String listingCountRange, String inventoryUrl, String postalCode, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealers/car/uk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (county != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("county", county));
        }

        if (listingCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listing_count_range", listingCountRange));
        }

        if (inventoryUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_url", inventoryUrl));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postal_code", postalCode));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dealersCarUkGetValidateBeforeCall(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String county, String listingCountRange, String inventoryUrl, String postalCode, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback _callback) throws ApiException {
        return dealersCarUkGetCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, county, listingCountRange, inventoryUrl, postalCode, sortBy, sortOrder, provider, facets, rangeFacets, _callback);

    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @return DealersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DealersResponse dealersCarUkGet(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String county, String listingCountRange, String inventoryUrl, String postalCode, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets) throws ApiException {
        ApiResponse<DealersResponse> localVarResp = dealersCarUkGetWithHttpInfo(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, county, listingCountRange, inventoryUrl, postalCode, sortBy, sortOrder, provider, facets, rangeFacets);
        return localVarResp.getData();
    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @return ApiResponse&lt;DealersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealersResponse> dealersCarUkGetWithHttpInfo(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String county, String listingCountRange, String inventoryUrl, String postalCode, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets) throws ApiException {
        okhttp3.Call localVarCall = dealersCarUkGetValidateBeforeCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, county, listingCountRange, inventoryUrl, postalCode, sortBy, sortOrder, provider, facets, rangeFacets, null);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find car dealers around (asynchronously)
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealersCarUkGetAsync(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String county, String listingCountRange, String inventoryUrl, String postalCode, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback<DealersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dealersCarUkGetValidateBeforeCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, county, listingCountRange, inventoryUrl, postalCode, sortBy, sortOrder, provider, facets, rangeFacets, _callback);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dealersHeavyEquipmentGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealersHeavyEquipmentGetCall(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealers/heavy-equipment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (listingCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listing_count_range", listingCountRange));
        }

        if (inventoryUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_url", inventoryUrl));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dealersHeavyEquipmentGetValidateBeforeCall(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback _callback) throws ApiException {
        return dealersHeavyEquipmentGetCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, _callback);

    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @return DealersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DealersResponse dealersHeavyEquipmentGet(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets) throws ApiException {
        ApiResponse<DealersResponse> localVarResp = dealersHeavyEquipmentGetWithHttpInfo(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets);
        return localVarResp.getData();
    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @return ApiResponse&lt;DealersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealersResponse> dealersHeavyEquipmentGetWithHttpInfo(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets) throws ApiException {
        okhttp3.Call localVarCall = dealersHeavyEquipmentGetValidateBeforeCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, null);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find car dealers around (asynchronously)
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealersHeavyEquipmentGetAsync(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback<DealersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dealersHeavyEquipmentGetValidateBeforeCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, _callback);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dealersMotorcycleGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealersMotorcycleGetCall(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealers/motorcycle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (listingCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listing_count_range", listingCountRange));
        }

        if (inventoryUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_url", inventoryUrl));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dealersMotorcycleGetValidateBeforeCall(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback _callback) throws ApiException {
        return dealersMotorcycleGetCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, _callback);

    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @return DealersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DealersResponse dealersMotorcycleGet(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets) throws ApiException {
        ApiResponse<DealersResponse> localVarResp = dealersMotorcycleGetWithHttpInfo(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets);
        return localVarResp.getData();
    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @return ApiResponse&lt;DealersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealersResponse> dealersMotorcycleGetWithHttpInfo(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets) throws ApiException {
        okhttp3.Call localVarCall = dealersMotorcycleGetValidateBeforeCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, null);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find car dealers around (asynchronously)
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealersMotorcycleGetAsync(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback<DealersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dealersMotorcycleGetValidateBeforeCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, _callback);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dealersRvGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealersRvGetCall(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealers/rv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (listingCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listing_count_range", listingCountRange));
        }

        if (inventoryUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_url", inventoryUrl));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dealersRvGetValidateBeforeCall(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback _callback) throws ApiException {
        return dealersRvGetCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, _callback);

    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @return DealersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DealersResponse dealersRvGet(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets) throws ApiException {
        ApiResponse<DealersResponse> localVarResp = dealersRvGetWithHttpInfo(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets);
        return localVarResp.getData();
    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @return ApiResponse&lt;DealersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealersResponse> dealersRvGetWithHttpInfo(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets) throws ApiException {
        okhttp3.Call localVarCall = dealersRvGetValidateBeforeCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, null);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find car dealers around (asynchronously)
     * The dealers API returns a list of dealers around a given point and radius.
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param country To filter listing on Country in which they are listed (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param listingCountRange To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100 (optional)
     * @param inventoryUrl inventory_url of dealer to be searched (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dealers for the search </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dealersRvGetAsync(String apiKey, Double latitude, Double longitude, Integer radius, Integer rows, Integer start, String country, String dealerType, String city, String state, String listingCountRange, String inventoryUrl, String zip, String sortBy, String sortOrder, Boolean provider, String facets, String rangeFacets, final ApiCallback<DealersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dealersRvGetValidateBeforeCall(apiKey, latitude, longitude, radius, rows, start, country, dealerType, city, state, listingCountRange, inventoryUrl, zip, sortBy, sortOrder, provider, facets, rangeFacets, _callback);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDealer
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDealerCall(String id, String apiKey, Boolean provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/car/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDealerValidateBeforeCall(String id, String apiKey, Boolean provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDealer(Async)");
        }

        return getDealerCall(id, apiKey, provider, _callback);

    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @return Dealer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Dealer getDealer(String id, String apiKey, Boolean provider) throws ApiException {
        ApiResponse<Dealer> localVarResp = getDealerWithHttpInfo(id, apiKey, provider);
        return localVarResp.getData();
    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @return ApiResponse&lt;Dealer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dealer> getDealerWithHttpInfo(String id, String apiKey, Boolean provider) throws ApiException {
        okhttp3.Call localVarCall = getDealerValidateBeforeCall(id, apiKey, provider, null);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dealer by id (asynchronously)
     * Get a particular dealer&#39;s information by its id
     * @param id Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param provider boolean param to include site providers name in response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dealer for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDealerAsync(String id, String apiKey, Boolean provider, final ApiCallback<Dealer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDealerValidateBeforeCall(id, apiKey, provider, _callback);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
