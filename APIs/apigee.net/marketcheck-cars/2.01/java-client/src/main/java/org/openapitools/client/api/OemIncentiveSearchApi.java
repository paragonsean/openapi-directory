/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.SearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OemIncentiveSearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OemIncentiveSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OemIncentiveSearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for oemSearch
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param offerType The type of the incentive (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param msrp MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param apr APR range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param monthly To filter listing on Monthly payment amount, usually populated in Lease offers (optional)
     * @param monthlyPerThousand To filter listing on monthly amount to be paid by customer for every $1000 financed at the advertised APR rate (optional)
     * @param downPayment To filter listing on down payment offer on car (optional)
     * @param dueAtSigning To filter listing on total amount due at signing, that usually includes first month payment, down payment, acquisition fee etc (optional)
     * @param securityDeposit To filter listing on security deposit required for the offer (optional)
     * @param dispositionFee To filter listing on disposition fee of the car (optional)
     * @param acquisitionFee To filter listing on acquisition fee of the car (optional)
     * @param duration To filter listing on offer duration in months (optional)
     * @param dealerContribution To filter listing on any contribution from dealer&#39;s side (optional)
     * @param mileageCharge Mileage Charge Range range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 100-1000 (optional)
     * @param mileageChargeLimit To filter listing on mileage charge limit the offer is valid up to under the default clauses (optional)
     * @param cashbackAmount To filter listing on cashback amounts listed in offer (optional)
     * @param cashbackTargetGroup To filter listing on the demographic or any other entity for whom this cashback offer is for. Not all target groups are identified but the most common ones are tagged like Military, Grad students Current owners etc (optional)
     * @param leaseEndPurchaseOption To filter listing on amount at the lease end to pay for buying the car (optional)
     * @param netCapitalisedCost To filter listing on net capitalised cost of the car (optional)
     * @param grossCapitalisedCost To filter listing on gross capitalised cost of the car (optional)
     * @param totalMonthlyPayment To filter listing on gross capitalised cost of the car (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all oem incentive listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oemSearchCall(String apiKey, String offerType, String year, String make, String model, String trim, String msrp, String apr, String monthly, String monthlyPerThousand, String downPayment, String dueAtSigning, String securityDeposit, String dispositionFee, String acquisitionFee, String duration, String dealerContribution, String mileageCharge, String mileageChargeLimit, String cashbackAmount, String cashbackTargetGroup, String leaseEndPurchaseOption, String netCapitalisedCost, String grossCapitalisedCost, String totalMonthlyPayment, String zip, String city, String state, String country, Double latitude, Double longitude, Integer radius, String searchText, String lastSeenRange, String firstSeenRange, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/car/incentive/oem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (offerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offer_type", offerType));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (msrp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp", msrp));
        }

        if (apr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apr", apr));
        }

        if (monthly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monthly", monthly));
        }

        if (monthlyPerThousand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monthly_per_thousand", monthlyPerThousand));
        }

        if (downPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("down_payment", downPayment));
        }

        if (dueAtSigning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_at_signing", dueAtSigning));
        }

        if (securityDeposit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("security_deposit", securityDeposit));
        }

        if (dispositionFee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disposition_fee", dispositionFee));
        }

        if (acquisitionFee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acquisition_fee", acquisitionFee));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (dealerContribution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_contribution", dealerContribution));
        }

        if (mileageCharge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mileage_charge", mileageCharge));
        }

        if (mileageChargeLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mileage_charge_limit", mileageChargeLimit));
        }

        if (cashbackAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cashback_amount", cashbackAmount));
        }

        if (cashbackTargetGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cashback_target_group", cashbackTargetGroup));
        }

        if (leaseEndPurchaseOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_end_purchase_option", leaseEndPurchaseOption));
        }

        if (netCapitalisedCost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("net_capitalised_cost", netCapitalisedCost));
        }

        if (grossCapitalisedCost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gross_capitalised_cost", grossCapitalisedCost));
        }

        if (totalMonthlyPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("total_monthly_payment", totalMonthlyPayment));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_text", searchText));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oemSearchValidateBeforeCall(String apiKey, String offerType, String year, String make, String model, String trim, String msrp, String apr, String monthly, String monthlyPerThousand, String downPayment, String dueAtSigning, String securityDeposit, String dispositionFee, String acquisitionFee, String duration, String dealerContribution, String mileageCharge, String mileageChargeLimit, String cashbackAmount, String cashbackTargetGroup, String leaseEndPurchaseOption, String netCapitalisedCost, String grossCapitalisedCost, String totalMonthlyPayment, String zip, String city, String state, String country, Double latitude, Double longitude, Integer radius, String searchText, String lastSeenRange, String firstSeenRange, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, final ApiCallback _callback) throws ApiException {
        return oemSearchCall(apiKey, offerType, year, make, model, trim, msrp, apr, monthly, monthlyPerThousand, downPayment, dueAtSigning, securityDeposit, dispositionFee, acquisitionFee, duration, dealerContribution, mileageCharge, mileageChargeLimit, cashbackAmount, cashbackTargetGroup, leaseEndPurchaseOption, netCapitalisedCost, grossCapitalisedCost, totalMonthlyPayment, zip, city, state, country, latitude, longitude, radius, searchText, lastSeenRange, firstSeenRange, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, _callback);

    }

    /**
     * Gets oem incentive listings for the given search criteria
     * This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active oem incentive from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param offerType The type of the incentive (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param msrp MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param apr APR range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param monthly To filter listing on Monthly payment amount, usually populated in Lease offers (optional)
     * @param monthlyPerThousand To filter listing on monthly amount to be paid by customer for every $1000 financed at the advertised APR rate (optional)
     * @param downPayment To filter listing on down payment offer on car (optional)
     * @param dueAtSigning To filter listing on total amount due at signing, that usually includes first month payment, down payment, acquisition fee etc (optional)
     * @param securityDeposit To filter listing on security deposit required for the offer (optional)
     * @param dispositionFee To filter listing on disposition fee of the car (optional)
     * @param acquisitionFee To filter listing on acquisition fee of the car (optional)
     * @param duration To filter listing on offer duration in months (optional)
     * @param dealerContribution To filter listing on any contribution from dealer&#39;s side (optional)
     * @param mileageCharge Mileage Charge Range range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 100-1000 (optional)
     * @param mileageChargeLimit To filter listing on mileage charge limit the offer is valid up to under the default clauses (optional)
     * @param cashbackAmount To filter listing on cashback amounts listed in offer (optional)
     * @param cashbackTargetGroup To filter listing on the demographic or any other entity for whom this cashback offer is for. Not all target groups are identified but the most common ones are tagged like Military, Grad students Current owners etc (optional)
     * @param leaseEndPurchaseOption To filter listing on amount at the lease end to pay for buying the car (optional)
     * @param netCapitalisedCost To filter listing on net capitalised cost of the car (optional)
     * @param grossCapitalisedCost To filter listing on gross capitalised cost of the car (optional)
     * @param totalMonthlyPayment To filter listing on gross capitalised cost of the car (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all oem incentive listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SearchResponse oemSearch(String apiKey, String offerType, String year, String make, String model, String trim, String msrp, String apr, String monthly, String monthlyPerThousand, String downPayment, String dueAtSigning, String securityDeposit, String dispositionFee, String acquisitionFee, String duration, String dealerContribution, String mileageCharge, String mileageChargeLimit, String cashbackAmount, String cashbackTargetGroup, String leaseEndPurchaseOption, String netCapitalisedCost, String grossCapitalisedCost, String totalMonthlyPayment, String zip, String city, String state, String country, Double latitude, Double longitude, Integer radius, String searchText, String lastSeenRange, String firstSeenRange, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats) throws ApiException {
        ApiResponse<SearchResponse> localVarResp = oemSearchWithHttpInfo(apiKey, offerType, year, make, model, trim, msrp, apr, monthly, monthlyPerThousand, downPayment, dueAtSigning, securityDeposit, dispositionFee, acquisitionFee, duration, dealerContribution, mileageCharge, mileageChargeLimit, cashbackAmount, cashbackTargetGroup, leaseEndPurchaseOption, netCapitalisedCost, grossCapitalisedCost, totalMonthlyPayment, zip, city, state, country, latitude, longitude, radius, searchText, lastSeenRange, firstSeenRange, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats);
        return localVarResp.getData();
    }

    /**
     * Gets oem incentive listings for the given search criteria
     * This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active oem incentive from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param offerType The type of the incentive (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param msrp MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param apr APR range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param monthly To filter listing on Monthly payment amount, usually populated in Lease offers (optional)
     * @param monthlyPerThousand To filter listing on monthly amount to be paid by customer for every $1000 financed at the advertised APR rate (optional)
     * @param downPayment To filter listing on down payment offer on car (optional)
     * @param dueAtSigning To filter listing on total amount due at signing, that usually includes first month payment, down payment, acquisition fee etc (optional)
     * @param securityDeposit To filter listing on security deposit required for the offer (optional)
     * @param dispositionFee To filter listing on disposition fee of the car (optional)
     * @param acquisitionFee To filter listing on acquisition fee of the car (optional)
     * @param duration To filter listing on offer duration in months (optional)
     * @param dealerContribution To filter listing on any contribution from dealer&#39;s side (optional)
     * @param mileageCharge Mileage Charge Range range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 100-1000 (optional)
     * @param mileageChargeLimit To filter listing on mileage charge limit the offer is valid up to under the default clauses (optional)
     * @param cashbackAmount To filter listing on cashback amounts listed in offer (optional)
     * @param cashbackTargetGroup To filter listing on the demographic or any other entity for whom this cashback offer is for. Not all target groups are identified but the most common ones are tagged like Military, Grad students Current owners etc (optional)
     * @param leaseEndPurchaseOption To filter listing on amount at the lease end to pay for buying the car (optional)
     * @param netCapitalisedCost To filter listing on net capitalised cost of the car (optional)
     * @param grossCapitalisedCost To filter listing on gross capitalised cost of the car (optional)
     * @param totalMonthlyPayment To filter listing on gross capitalised cost of the car (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all oem incentive listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResponse> oemSearchWithHttpInfo(String apiKey, String offerType, String year, String make, String model, String trim, String msrp, String apr, String monthly, String monthlyPerThousand, String downPayment, String dueAtSigning, String securityDeposit, String dispositionFee, String acquisitionFee, String duration, String dealerContribution, String mileageCharge, String mileageChargeLimit, String cashbackAmount, String cashbackTargetGroup, String leaseEndPurchaseOption, String netCapitalisedCost, String grossCapitalisedCost, String totalMonthlyPayment, String zip, String city, String state, String country, Double latitude, Double longitude, Integer radius, String searchText, String lastSeenRange, String firstSeenRange, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats) throws ApiException {
        okhttp3.Call localVarCall = oemSearchValidateBeforeCall(apiKey, offerType, year, make, model, trim, msrp, apr, monthly, monthlyPerThousand, downPayment, dueAtSigning, securityDeposit, dispositionFee, acquisitionFee, duration, dealerContribution, mileageCharge, mileageChargeLimit, cashbackAmount, cashbackTargetGroup, leaseEndPurchaseOption, netCapitalisedCost, grossCapitalisedCost, totalMonthlyPayment, zip, city, state, country, latitude, longitude, radius, searchText, lastSeenRange, firstSeenRange, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets oem incentive listings for the given search criteria (asynchronously)
     * This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active oem incentive from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param offerType The type of the incentive (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param msrp MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param apr APR range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param monthly To filter listing on Monthly payment amount, usually populated in Lease offers (optional)
     * @param monthlyPerThousand To filter listing on monthly amount to be paid by customer for every $1000 financed at the advertised APR rate (optional)
     * @param downPayment To filter listing on down payment offer on car (optional)
     * @param dueAtSigning To filter listing on total amount due at signing, that usually includes first month payment, down payment, acquisition fee etc (optional)
     * @param securityDeposit To filter listing on security deposit required for the offer (optional)
     * @param dispositionFee To filter listing on disposition fee of the car (optional)
     * @param acquisitionFee To filter listing on acquisition fee of the car (optional)
     * @param duration To filter listing on offer duration in months (optional)
     * @param dealerContribution To filter listing on any contribution from dealer&#39;s side (optional)
     * @param mileageCharge Mileage Charge Range range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 100-1000 (optional)
     * @param mileageChargeLimit To filter listing on mileage charge limit the offer is valid up to under the default clauses (optional)
     * @param cashbackAmount To filter listing on cashback amounts listed in offer (optional)
     * @param cashbackTargetGroup To filter listing on the demographic or any other entity for whom this cashback offer is for. Not all target groups are identified but the most common ones are tagged like Military, Grad students Current owners etc (optional)
     * @param leaseEndPurchaseOption To filter listing on amount at the lease end to pay for buying the car (optional)
     * @param netCapitalisedCost To filter listing on net capitalised cost of the car (optional)
     * @param grossCapitalisedCost To filter listing on gross capitalised cost of the car (optional)
     * @param totalMonthlyPayment To filter listing on gross capitalised cost of the car (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all oem incentive listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oemSearchAsync(String apiKey, String offerType, String year, String make, String model, String trim, String msrp, String apr, String monthly, String monthlyPerThousand, String downPayment, String dueAtSigning, String securityDeposit, String dispositionFee, String acquisitionFee, String duration, String dealerContribution, String mileageCharge, String mileageChargeLimit, String cashbackAmount, String cashbackTargetGroup, String leaseEndPurchaseOption, String netCapitalisedCost, String grossCapitalisedCost, String totalMonthlyPayment, String zip, String city, String state, String country, Double latitude, Double longitude, Integer radius, String searchText, String lastSeenRange, String firstSeenRange, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, final ApiCallback<SearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = oemSearchValidateBeforeCall(apiKey, offerType, year, make, model, trim, msrp, apr, monthly, monthlyPerThousand, downPayment, dueAtSigning, securityDeposit, dispositionFee, acquisitionFee, duration, dealerContribution, mileageCharge, mileageChargeLimit, cashbackAmount, cashbackTargetGroup, leaseEndPurchaseOption, netCapitalisedCost, grossCapitalisedCost, totalMonthlyPayment, zip, city, state, country, latitude, longitude, radius, searchText, lastSeenRange, firstSeenRange, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, _callback);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
