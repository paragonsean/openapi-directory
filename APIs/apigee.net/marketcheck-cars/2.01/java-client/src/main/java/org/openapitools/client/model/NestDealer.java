/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NestDealer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NestDealer {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_DEALER_TYPE = "dealer_type";
  @SerializedName(SERIALIZED_NAME_DEALER_TYPE)
  private String dealerType;

  public static final String SERIALIZED_NAME_DEALERSHIP_GROUP_NAME = "dealership_group_name";
  @SerializedName(SERIALIZED_NAME_DEALERSHIP_GROUP_NAME)
  private String dealershipGroupName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private String latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private String longitude;

  public static final String SERIALIZED_NAME_MSA_CODE = "msa_code";
  @SerializedName(SERIALIZED_NAME_MSA_CODE)
  private String msaCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_SELLER_EMAIL = "seller_email";
  @SerializedName(SERIALIZED_NAME_SELLER_EMAIL)
  private String sellerEmail;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public NestDealer() {
  }

  public NestDealer city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City of the dealer
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public NestDealer country(String country) {
    this.country = country;
    return this;
  }

  /**
   * country of the dealer
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public NestDealer county(String county) {
    this.county = county;
    return this;
  }

  /**
   * county of the dealer
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public NestDealer dealerType(String dealerType) {
    this.dealerType = dealerType;
    return this;
  }

  /**
   * Type of dealer (franchise/independent)
   * @return dealerType
   */
  @javax.annotation.Nullable
  public String getDealerType() {
    return dealerType;
  }

  public void setDealerType(String dealerType) {
    this.dealerType = dealerType;
  }


  public NestDealer dealershipGroupName(String dealershipGroupName) {
    this.dealershipGroupName = dealershipGroupName;
    return this;
  }

  /**
   * dealership_group_name of dealer
   * @return dealershipGroupName
   */
  @javax.annotation.Nullable
  public String getDealershipGroupName() {
    return dealershipGroupName;
  }

  public void setDealershipGroupName(String dealershipGroupName) {
    this.dealershipGroupName = dealershipGroupName;
  }


  public NestDealer id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The unique id associated with the dealer in the Marketcheck database
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public NestDealer latitude(String latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Latutide for the dealer location
   * @return latitude
   */
  @javax.annotation.Nullable
  public String getLatitude() {
    return latitude;
  }

  public void setLatitude(String latitude) {
    this.latitude = latitude;
  }


  public NestDealer longitude(String longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Longitude for the dealer location
   * @return longitude
   */
  @javax.annotation.Nullable
  public String getLongitude() {
    return longitude;
  }

  public void setLongitude(String longitude) {
    this.longitude = longitude;
  }


  public NestDealer msaCode(String msaCode) {
    this.msaCode = msaCode;
    return this;
  }

  /**
   * msa_code of the dealer
   * @return msaCode
   */
  @javax.annotation.Nullable
  public String getMsaCode() {
    return msaCode;
  }

  public void setMsaCode(String msaCode) {
    this.msaCode = msaCode;
  }


  public NestDealer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the dealer
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NestDealer phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Contact no of the dealer
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public NestDealer sellerEmail(String sellerEmail) {
    this.sellerEmail = sellerEmail;
    return this;
  }

  /**
   * Contact email of the dealer
   * @return sellerEmail
   */
  @javax.annotation.Nullable
  public String getSellerEmail() {
    return sellerEmail;
  }

  public void setSellerEmail(String sellerEmail) {
    this.sellerEmail = sellerEmail;
  }


  public NestDealer state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State of the dealer
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public NestDealer street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Street of the dealer
   * @return street
   */
  @javax.annotation.Nullable
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public NestDealer website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Website of the dealer
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public NestDealer zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * Zip of the dealer
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NestDealer nestDealer = (NestDealer) o;
    return Objects.equals(this.city, nestDealer.city) &&
        Objects.equals(this.country, nestDealer.country) &&
        Objects.equals(this.county, nestDealer.county) &&
        Objects.equals(this.dealerType, nestDealer.dealerType) &&
        Objects.equals(this.dealershipGroupName, nestDealer.dealershipGroupName) &&
        Objects.equals(this.id, nestDealer.id) &&
        Objects.equals(this.latitude, nestDealer.latitude) &&
        Objects.equals(this.longitude, nestDealer.longitude) &&
        Objects.equals(this.msaCode, nestDealer.msaCode) &&
        Objects.equals(this.name, nestDealer.name) &&
        Objects.equals(this.phone, nestDealer.phone) &&
        Objects.equals(this.sellerEmail, nestDealer.sellerEmail) &&
        Objects.equals(this.state, nestDealer.state) &&
        Objects.equals(this.street, nestDealer.street) &&
        Objects.equals(this.website, nestDealer.website) &&
        Objects.equals(this.zip, nestDealer.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, country, county, dealerType, dealershipGroupName, id, latitude, longitude, msaCode, name, phone, sellerEmail, state, street, website, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NestDealer {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    dealerType: ").append(toIndentedString(dealerType)).append("\n");
    sb.append("    dealershipGroupName: ").append(toIndentedString(dealershipGroupName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    msaCode: ").append(toIndentedString(msaCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    sellerEmail: ").append(toIndentedString(sellerEmail)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("county");
    openapiFields.add("dealer_type");
    openapiFields.add("dealership_group_name");
    openapiFields.add("id");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("msa_code");
    openapiFields.add("name");
    openapiFields.add("phone");
    openapiFields.add("seller_email");
    openapiFields.add("state");
    openapiFields.add("street");
    openapiFields.add("website");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NestDealer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NestDealer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NestDealer is not found in the empty JSON string", NestDealer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NestDealer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NestDealer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if ((jsonObj.get("dealer_type") != null && !jsonObj.get("dealer_type").isJsonNull()) && !jsonObj.get("dealer_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealer_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealer_type").toString()));
      }
      if ((jsonObj.get("dealership_group_name") != null && !jsonObj.get("dealership_group_name").isJsonNull()) && !jsonObj.get("dealership_group_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealership_group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealership_group_name").toString()));
      }
      if ((jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if ((jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if ((jsonObj.get("msa_code") != null && !jsonObj.get("msa_code").isJsonNull()) && !jsonObj.get("msa_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msa_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msa_code").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("seller_email") != null && !jsonObj.get("seller_email").isJsonNull()) && !jsonObj.get("seller_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_email").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NestDealer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NestDealer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NestDealer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NestDealer.class));

       return (TypeAdapter<T>) new TypeAdapter<NestDealer>() {
           @Override
           public void write(JsonWriter out, NestDealer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NestDealer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NestDealer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NestDealer
   * @throws IOException if the JSON string is invalid with respect to NestDealer
   */
  public static NestDealer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NestDealer.class);
  }

  /**
   * Convert an instance of NestDealer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

