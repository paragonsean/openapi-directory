/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FuelEfficiency
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FuelEfficiency {
  public static final String SERIALIZED_NAME_ANNUAL_MILES = "annual_miles";
  @SerializedName(SERIALIZED_NAME_ANNUAL_MILES)
  private BigDecimal annualMiles;

  public static final String SERIALIZED_NAME_CITY_MILEAGE = "city_mileage";
  @SerializedName(SERIALIZED_NAME_CITY_MILEAGE)
  private String cityMileage;

  public static final String SERIALIZED_NAME_COMBINED_MILEAGE = "combined_mileage";
  @SerializedName(SERIALIZED_NAME_COMBINED_MILEAGE)
  private String combinedMileage;

  public static final String SERIALIZED_NAME_HIGHWAY_MILEAGE = "highway_mileage";
  @SerializedName(SERIALIZED_NAME_HIGHWAY_MILEAGE)
  private String highwayMileage;

  public static final String SERIALIZED_NAME_MONTHLY_FUEL_EXPENSE = "monthly_fuel_expense";
  @SerializedName(SERIALIZED_NAME_MONTHLY_FUEL_EXPENSE)
  private BigDecimal monthlyFuelExpense;

  public FuelEfficiency() {
  }

  public FuelEfficiency annualMiles(BigDecimal annualMiles) {
    this.annualMiles = annualMiles;
    return this;
  }

  /**
   * Annual Miles of Car
   * @return annualMiles
   */
  @javax.annotation.Nullable
  public BigDecimal getAnnualMiles() {
    return annualMiles;
  }

  public void setAnnualMiles(BigDecimal annualMiles) {
    this.annualMiles = annualMiles;
  }


  public FuelEfficiency cityMileage(String cityMileage) {
    this.cityMileage = cityMileage;
    return this;
  }

  /**
   * City Mileage in MPG
   * @return cityMileage
   */
  @javax.annotation.Nullable
  public String getCityMileage() {
    return cityMileage;
  }

  public void setCityMileage(String cityMileage) {
    this.cityMileage = cityMileage;
  }


  public FuelEfficiency combinedMileage(String combinedMileage) {
    this.combinedMileage = combinedMileage;
    return this;
  }

  /**
   * Combined Mileage
   * @return combinedMileage
   */
  @javax.annotation.Nullable
  public String getCombinedMileage() {
    return combinedMileage;
  }

  public void setCombinedMileage(String combinedMileage) {
    this.combinedMileage = combinedMileage;
  }


  public FuelEfficiency highwayMileage(String highwayMileage) {
    this.highwayMileage = highwayMileage;
    return this;
  }

  /**
   * Highway Mileage in MPG
   * @return highwayMileage
   */
  @javax.annotation.Nullable
  public String getHighwayMileage() {
    return highwayMileage;
  }

  public void setHighwayMileage(String highwayMileage) {
    this.highwayMileage = highwayMileage;
  }


  public FuelEfficiency monthlyFuelExpense(BigDecimal monthlyFuelExpense) {
    this.monthlyFuelExpense = monthlyFuelExpense;
    return this;
  }

  /**
   * Monthly fuel expense
   * @return monthlyFuelExpense
   */
  @javax.annotation.Nullable
  public BigDecimal getMonthlyFuelExpense() {
    return monthlyFuelExpense;
  }

  public void setMonthlyFuelExpense(BigDecimal monthlyFuelExpense) {
    this.monthlyFuelExpense = monthlyFuelExpense;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FuelEfficiency fuelEfficiency = (FuelEfficiency) o;
    return Objects.equals(this.annualMiles, fuelEfficiency.annualMiles) &&
        Objects.equals(this.cityMileage, fuelEfficiency.cityMileage) &&
        Objects.equals(this.combinedMileage, fuelEfficiency.combinedMileage) &&
        Objects.equals(this.highwayMileage, fuelEfficiency.highwayMileage) &&
        Objects.equals(this.monthlyFuelExpense, fuelEfficiency.monthlyFuelExpense);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualMiles, cityMileage, combinedMileage, highwayMileage, monthlyFuelExpense);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FuelEfficiency {\n");
    sb.append("    annualMiles: ").append(toIndentedString(annualMiles)).append("\n");
    sb.append("    cityMileage: ").append(toIndentedString(cityMileage)).append("\n");
    sb.append("    combinedMileage: ").append(toIndentedString(combinedMileage)).append("\n");
    sb.append("    highwayMileage: ").append(toIndentedString(highwayMileage)).append("\n");
    sb.append("    monthlyFuelExpense: ").append(toIndentedString(monthlyFuelExpense)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annual_miles");
    openapiFields.add("city_mileage");
    openapiFields.add("combined_mileage");
    openapiFields.add("highway_mileage");
    openapiFields.add("monthly_fuel_expense");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FuelEfficiency
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FuelEfficiency.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FuelEfficiency is not found in the empty JSON string", FuelEfficiency.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FuelEfficiency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FuelEfficiency` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city_mileage") != null && !jsonObj.get("city_mileage").isJsonNull()) && !jsonObj.get("city_mileage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city_mileage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city_mileage").toString()));
      }
      if ((jsonObj.get("combined_mileage") != null && !jsonObj.get("combined_mileage").isJsonNull()) && !jsonObj.get("combined_mileage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `combined_mileage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("combined_mileage").toString()));
      }
      if ((jsonObj.get("highway_mileage") != null && !jsonObj.get("highway_mileage").isJsonNull()) && !jsonObj.get("highway_mileage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highway_mileage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highway_mileage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FuelEfficiency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FuelEfficiency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FuelEfficiency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FuelEfficiency.class));

       return (TypeAdapter<T>) new TypeAdapter<FuelEfficiency>() {
           @Override
           public void write(JsonWriter out, FuelEfficiency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FuelEfficiency read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FuelEfficiency given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FuelEfficiency
   * @throws IOException if the JSON string is invalid with respect to FuelEfficiency
   */
  public static FuelEfficiency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FuelEfficiency.class);
  }

  /**
   * Convert an instance of FuelEfficiency to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

