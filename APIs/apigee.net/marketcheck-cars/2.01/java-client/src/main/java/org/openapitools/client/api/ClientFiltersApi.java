/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientFiltersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientFiltersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientFiltersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for get
     * @param country To filter listing on Country in which they are listed (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get client filters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String country, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/configure/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String country, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling get(Async)");
        }

        return getCall(country, apiKey, _callback);

    }

    /**
     * get client filters
     * get client filters
     * @param country To filter listing on Country in which they are listed (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get client filters </td><td>  -  </td></tr>
     </table>
     */
    public void get(String country, String apiKey) throws ApiException {
        getWithHttpInfo(country, apiKey);
    }

    /**
     * get client filters
     * get client filters
     * @param country To filter listing on Country in which they are listed (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get client filters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getWithHttpInfo(String country, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(country, apiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * get client filters (asynchronously)
     * get client filters
     * @param country To filter listing on Country in which they are listed (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get client filters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String country, String apiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(country, apiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for set
     * @param country To filter listing on Country in which they are listed (required)
     * @param csvfile csv file with filters (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set client filters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCall(String country, File csvfile, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/configure/set";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (csvfile != null) {
            localVarFormParams.put("csvfile", csvfile);
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setValidateBeforeCall(String country, File csvfile, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling set(Async)");
        }

        // verify the required parameter 'csvfile' is set
        if (csvfile == null) {
            throw new ApiException("Missing the required parameter 'csvfile' when calling set(Async)");
        }

        return setCall(country, csvfile, apiKey, _callback);

    }

    /**
     * set client filters
     * set client filters
     * @param country To filter listing on Country in which they are listed (required)
     * @param csvfile csv file with filters (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set client filters </td><td>  -  </td></tr>
     </table>
     */
    public void set(String country, File csvfile, String apiKey) throws ApiException {
        setWithHttpInfo(country, csvfile, apiKey);
    }

    /**
     * set client filters
     * set client filters
     * @param country To filter listing on Country in which they are listed (required)
     * @param csvfile csv file with filters (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set client filters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setWithHttpInfo(String country, File csvfile, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = setValidateBeforeCall(country, csvfile, apiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * set client filters (asynchronously)
     * set client filters
     * @param country To filter listing on Country in which they are listed (required)
     * @param csvfile csv file with filters (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set client filters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAsync(String country, File csvfile, String apiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setValidateBeforeCall(country, csvfile, apiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
