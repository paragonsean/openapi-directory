/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RangeFacetItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CarSearchRangeFacets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CarSearchRangeFacets {
  public static final String SERIALIZED_NAME_DOM = "dom";
  @SerializedName(SERIALIZED_NAME_DOM)
  private List<RangeFacetItem> dom = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOM180 = "dom_180";
  @SerializedName(SERIALIZED_NAME_DOM180)
  private List<RangeFacetItem> dom180 = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOM_ACTIVE = "dom_active";
  @SerializedName(SERIALIZED_NAME_DOM_ACTIVE)
  private List<RangeFacetItem> domActive = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINANCE_DOWN_PAYMENT = "finance_down_payment";
  @SerializedName(SERIALIZED_NAME_FINANCE_DOWN_PAYMENT)
  private List<RangeFacetItem> financeDownPayment = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINANCE_EMP = "finance_emp";
  @SerializedName(SERIALIZED_NAME_FINANCE_EMP)
  private List<RangeFacetItem> financeEmp = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINANCE_LOAN_APR = "finance_loan_apr";
  @SerializedName(SERIALIZED_NAME_FINANCE_LOAN_APR)
  private List<RangeFacetItem> financeLoanApr = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINANCE_LOAN_TERM = "finance_loan_term";
  @SerializedName(SERIALIZED_NAME_FINANCE_LOAN_TERM)
  private List<RangeFacetItem> financeLoanTerm = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEASE_DOWN_PAYMENT = "lease_down_payment";
  @SerializedName(SERIALIZED_NAME_LEASE_DOWN_PAYMENT)
  private List<RangeFacetItem> leaseDownPayment = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEASE_EMP = "lease_emp";
  @SerializedName(SERIALIZED_NAME_LEASE_EMP)
  private List<RangeFacetItem> leaseEmp = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEASE_TERM = "lease_term";
  @SerializedName(SERIALIZED_NAME_LEASE_TERM)
  private List<RangeFacetItem> leaseTerm = new ArrayList<>();

  public static final String SERIALIZED_NAME_MILES = "miles";
  @SerializedName(SERIALIZED_NAME_MILES)
  private List<RangeFacetItem> miles = new ArrayList<>();

  public static final String SERIALIZED_NAME_MSRP = "msrp";
  @SerializedName(SERIALIZED_NAME_MSRP)
  private List<RangeFacetItem> msrp = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private List<RangeFacetItem> price = new ArrayList<>();

  public CarSearchRangeFacets() {
  }

  public CarSearchRangeFacets dom(List<RangeFacetItem> dom) {
    this.dom = dom;
    return this;
  }

  public CarSearchRangeFacets addDomItem(RangeFacetItem domItem) {
    if (this.dom == null) {
      this.dom = new ArrayList<>();
    }
    this.dom.add(domItem);
    return this;
  }

  /**
   * Get dom
   * @return dom
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getDom() {
    return dom;
  }

  public void setDom(List<RangeFacetItem> dom) {
    this.dom = dom;
  }


  public CarSearchRangeFacets dom180(List<RangeFacetItem> dom180) {
    this.dom180 = dom180;
    return this;
  }

  public CarSearchRangeFacets addDom180Item(RangeFacetItem dom180Item) {
    if (this.dom180 == null) {
      this.dom180 = new ArrayList<>();
    }
    this.dom180.add(dom180Item);
    return this;
  }

  /**
   * Get dom180
   * @return dom180
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getDom180() {
    return dom180;
  }

  public void setDom180(List<RangeFacetItem> dom180) {
    this.dom180 = dom180;
  }


  public CarSearchRangeFacets domActive(List<RangeFacetItem> domActive) {
    this.domActive = domActive;
    return this;
  }

  public CarSearchRangeFacets addDomActiveItem(RangeFacetItem domActiveItem) {
    if (this.domActive == null) {
      this.domActive = new ArrayList<>();
    }
    this.domActive.add(domActiveItem);
    return this;
  }

  /**
   * Get domActive
   * @return domActive
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getDomActive() {
    return domActive;
  }

  public void setDomActive(List<RangeFacetItem> domActive) {
    this.domActive = domActive;
  }


  public CarSearchRangeFacets financeDownPayment(List<RangeFacetItem> financeDownPayment) {
    this.financeDownPayment = financeDownPayment;
    return this;
  }

  public CarSearchRangeFacets addFinanceDownPaymentItem(RangeFacetItem financeDownPaymentItem) {
    if (this.financeDownPayment == null) {
      this.financeDownPayment = new ArrayList<>();
    }
    this.financeDownPayment.add(financeDownPaymentItem);
    return this;
  }

  /**
   * Get financeDownPayment
   * @return financeDownPayment
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getFinanceDownPayment() {
    return financeDownPayment;
  }

  public void setFinanceDownPayment(List<RangeFacetItem> financeDownPayment) {
    this.financeDownPayment = financeDownPayment;
  }


  public CarSearchRangeFacets financeEmp(List<RangeFacetItem> financeEmp) {
    this.financeEmp = financeEmp;
    return this;
  }

  public CarSearchRangeFacets addFinanceEmpItem(RangeFacetItem financeEmpItem) {
    if (this.financeEmp == null) {
      this.financeEmp = new ArrayList<>();
    }
    this.financeEmp.add(financeEmpItem);
    return this;
  }

  /**
   * Get financeEmp
   * @return financeEmp
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getFinanceEmp() {
    return financeEmp;
  }

  public void setFinanceEmp(List<RangeFacetItem> financeEmp) {
    this.financeEmp = financeEmp;
  }


  public CarSearchRangeFacets financeLoanApr(List<RangeFacetItem> financeLoanApr) {
    this.financeLoanApr = financeLoanApr;
    return this;
  }

  public CarSearchRangeFacets addFinanceLoanAprItem(RangeFacetItem financeLoanAprItem) {
    if (this.financeLoanApr == null) {
      this.financeLoanApr = new ArrayList<>();
    }
    this.financeLoanApr.add(financeLoanAprItem);
    return this;
  }

  /**
   * Get financeLoanApr
   * @return financeLoanApr
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getFinanceLoanApr() {
    return financeLoanApr;
  }

  public void setFinanceLoanApr(List<RangeFacetItem> financeLoanApr) {
    this.financeLoanApr = financeLoanApr;
  }


  public CarSearchRangeFacets financeLoanTerm(List<RangeFacetItem> financeLoanTerm) {
    this.financeLoanTerm = financeLoanTerm;
    return this;
  }

  public CarSearchRangeFacets addFinanceLoanTermItem(RangeFacetItem financeLoanTermItem) {
    if (this.financeLoanTerm == null) {
      this.financeLoanTerm = new ArrayList<>();
    }
    this.financeLoanTerm.add(financeLoanTermItem);
    return this;
  }

  /**
   * Get financeLoanTerm
   * @return financeLoanTerm
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getFinanceLoanTerm() {
    return financeLoanTerm;
  }

  public void setFinanceLoanTerm(List<RangeFacetItem> financeLoanTerm) {
    this.financeLoanTerm = financeLoanTerm;
  }


  public CarSearchRangeFacets leaseDownPayment(List<RangeFacetItem> leaseDownPayment) {
    this.leaseDownPayment = leaseDownPayment;
    return this;
  }

  public CarSearchRangeFacets addLeaseDownPaymentItem(RangeFacetItem leaseDownPaymentItem) {
    if (this.leaseDownPayment == null) {
      this.leaseDownPayment = new ArrayList<>();
    }
    this.leaseDownPayment.add(leaseDownPaymentItem);
    return this;
  }

  /**
   * Get leaseDownPayment
   * @return leaseDownPayment
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getLeaseDownPayment() {
    return leaseDownPayment;
  }

  public void setLeaseDownPayment(List<RangeFacetItem> leaseDownPayment) {
    this.leaseDownPayment = leaseDownPayment;
  }


  public CarSearchRangeFacets leaseEmp(List<RangeFacetItem> leaseEmp) {
    this.leaseEmp = leaseEmp;
    return this;
  }

  public CarSearchRangeFacets addLeaseEmpItem(RangeFacetItem leaseEmpItem) {
    if (this.leaseEmp == null) {
      this.leaseEmp = new ArrayList<>();
    }
    this.leaseEmp.add(leaseEmpItem);
    return this;
  }

  /**
   * Get leaseEmp
   * @return leaseEmp
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getLeaseEmp() {
    return leaseEmp;
  }

  public void setLeaseEmp(List<RangeFacetItem> leaseEmp) {
    this.leaseEmp = leaseEmp;
  }


  public CarSearchRangeFacets leaseTerm(List<RangeFacetItem> leaseTerm) {
    this.leaseTerm = leaseTerm;
    return this;
  }

  public CarSearchRangeFacets addLeaseTermItem(RangeFacetItem leaseTermItem) {
    if (this.leaseTerm == null) {
      this.leaseTerm = new ArrayList<>();
    }
    this.leaseTerm.add(leaseTermItem);
    return this;
  }

  /**
   * Get leaseTerm
   * @return leaseTerm
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getLeaseTerm() {
    return leaseTerm;
  }

  public void setLeaseTerm(List<RangeFacetItem> leaseTerm) {
    this.leaseTerm = leaseTerm;
  }


  public CarSearchRangeFacets miles(List<RangeFacetItem> miles) {
    this.miles = miles;
    return this;
  }

  public CarSearchRangeFacets addMilesItem(RangeFacetItem milesItem) {
    if (this.miles == null) {
      this.miles = new ArrayList<>();
    }
    this.miles.add(milesItem);
    return this;
  }

  /**
   * Get miles
   * @return miles
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getMiles() {
    return miles;
  }

  public void setMiles(List<RangeFacetItem> miles) {
    this.miles = miles;
  }


  public CarSearchRangeFacets msrp(List<RangeFacetItem> msrp) {
    this.msrp = msrp;
    return this;
  }

  public CarSearchRangeFacets addMsrpItem(RangeFacetItem msrpItem) {
    if (this.msrp == null) {
      this.msrp = new ArrayList<>();
    }
    this.msrp.add(msrpItem);
    return this;
  }

  /**
   * Get msrp
   * @return msrp
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getMsrp() {
    return msrp;
  }

  public void setMsrp(List<RangeFacetItem> msrp) {
    this.msrp = msrp;
  }


  public CarSearchRangeFacets price(List<RangeFacetItem> price) {
    this.price = price;
    return this;
  }

  public CarSearchRangeFacets addPriceItem(RangeFacetItem priceItem) {
    if (this.price == null) {
      this.price = new ArrayList<>();
    }
    this.price.add(priceItem);
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getPrice() {
    return price;
  }

  public void setPrice(List<RangeFacetItem> price) {
    this.price = price;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarSearchRangeFacets carSearchRangeFacets = (CarSearchRangeFacets) o;
    return Objects.equals(this.dom, carSearchRangeFacets.dom) &&
        Objects.equals(this.dom180, carSearchRangeFacets.dom180) &&
        Objects.equals(this.domActive, carSearchRangeFacets.domActive) &&
        Objects.equals(this.financeDownPayment, carSearchRangeFacets.financeDownPayment) &&
        Objects.equals(this.financeEmp, carSearchRangeFacets.financeEmp) &&
        Objects.equals(this.financeLoanApr, carSearchRangeFacets.financeLoanApr) &&
        Objects.equals(this.financeLoanTerm, carSearchRangeFacets.financeLoanTerm) &&
        Objects.equals(this.leaseDownPayment, carSearchRangeFacets.leaseDownPayment) &&
        Objects.equals(this.leaseEmp, carSearchRangeFacets.leaseEmp) &&
        Objects.equals(this.leaseTerm, carSearchRangeFacets.leaseTerm) &&
        Objects.equals(this.miles, carSearchRangeFacets.miles) &&
        Objects.equals(this.msrp, carSearchRangeFacets.msrp) &&
        Objects.equals(this.price, carSearchRangeFacets.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dom, dom180, domActive, financeDownPayment, financeEmp, financeLoanApr, financeLoanTerm, leaseDownPayment, leaseEmp, leaseTerm, miles, msrp, price);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarSearchRangeFacets {\n");
    sb.append("    dom: ").append(toIndentedString(dom)).append("\n");
    sb.append("    dom180: ").append(toIndentedString(dom180)).append("\n");
    sb.append("    domActive: ").append(toIndentedString(domActive)).append("\n");
    sb.append("    financeDownPayment: ").append(toIndentedString(financeDownPayment)).append("\n");
    sb.append("    financeEmp: ").append(toIndentedString(financeEmp)).append("\n");
    sb.append("    financeLoanApr: ").append(toIndentedString(financeLoanApr)).append("\n");
    sb.append("    financeLoanTerm: ").append(toIndentedString(financeLoanTerm)).append("\n");
    sb.append("    leaseDownPayment: ").append(toIndentedString(leaseDownPayment)).append("\n");
    sb.append("    leaseEmp: ").append(toIndentedString(leaseEmp)).append("\n");
    sb.append("    leaseTerm: ").append(toIndentedString(leaseTerm)).append("\n");
    sb.append("    miles: ").append(toIndentedString(miles)).append("\n");
    sb.append("    msrp: ").append(toIndentedString(msrp)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dom");
    openapiFields.add("dom_180");
    openapiFields.add("dom_active");
    openapiFields.add("finance_down_payment");
    openapiFields.add("finance_emp");
    openapiFields.add("finance_loan_apr");
    openapiFields.add("finance_loan_term");
    openapiFields.add("lease_down_payment");
    openapiFields.add("lease_emp");
    openapiFields.add("lease_term");
    openapiFields.add("miles");
    openapiFields.add("msrp");
    openapiFields.add("price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CarSearchRangeFacets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CarSearchRangeFacets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CarSearchRangeFacets is not found in the empty JSON string", CarSearchRangeFacets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CarSearchRangeFacets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CarSearchRangeFacets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dom") != null && !jsonObj.get("dom").isJsonNull()) {
        JsonArray jsonArraydom = jsonObj.getAsJsonArray("dom");
        if (jsonArraydom != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dom").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dom` to be an array in the JSON string but got `%s`", jsonObj.get("dom").toString()));
          }

          // validate the optional field `dom` (array)
          for (int i = 0; i < jsonArraydom.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArraydom.get(i));
          };
        }
      }
      if (jsonObj.get("dom_180") != null && !jsonObj.get("dom_180").isJsonNull()) {
        JsonArray jsonArraydom180 = jsonObj.getAsJsonArray("dom_180");
        if (jsonArraydom180 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dom_180").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dom_180` to be an array in the JSON string but got `%s`", jsonObj.get("dom_180").toString()));
          }

          // validate the optional field `dom_180` (array)
          for (int i = 0; i < jsonArraydom180.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArraydom180.get(i));
          };
        }
      }
      if (jsonObj.get("dom_active") != null && !jsonObj.get("dom_active").isJsonNull()) {
        JsonArray jsonArraydomActive = jsonObj.getAsJsonArray("dom_active");
        if (jsonArraydomActive != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dom_active").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dom_active` to be an array in the JSON string but got `%s`", jsonObj.get("dom_active").toString()));
          }

          // validate the optional field `dom_active` (array)
          for (int i = 0; i < jsonArraydomActive.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArraydomActive.get(i));
          };
        }
      }
      if (jsonObj.get("finance_down_payment") != null && !jsonObj.get("finance_down_payment").isJsonNull()) {
        JsonArray jsonArrayfinanceDownPayment = jsonObj.getAsJsonArray("finance_down_payment");
        if (jsonArrayfinanceDownPayment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("finance_down_payment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `finance_down_payment` to be an array in the JSON string but got `%s`", jsonObj.get("finance_down_payment").toString()));
          }

          // validate the optional field `finance_down_payment` (array)
          for (int i = 0; i < jsonArrayfinanceDownPayment.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayfinanceDownPayment.get(i));
          };
        }
      }
      if (jsonObj.get("finance_emp") != null && !jsonObj.get("finance_emp").isJsonNull()) {
        JsonArray jsonArrayfinanceEmp = jsonObj.getAsJsonArray("finance_emp");
        if (jsonArrayfinanceEmp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("finance_emp").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `finance_emp` to be an array in the JSON string but got `%s`", jsonObj.get("finance_emp").toString()));
          }

          // validate the optional field `finance_emp` (array)
          for (int i = 0; i < jsonArrayfinanceEmp.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayfinanceEmp.get(i));
          };
        }
      }
      if (jsonObj.get("finance_loan_apr") != null && !jsonObj.get("finance_loan_apr").isJsonNull()) {
        JsonArray jsonArrayfinanceLoanApr = jsonObj.getAsJsonArray("finance_loan_apr");
        if (jsonArrayfinanceLoanApr != null) {
          // ensure the json data is an array
          if (!jsonObj.get("finance_loan_apr").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `finance_loan_apr` to be an array in the JSON string but got `%s`", jsonObj.get("finance_loan_apr").toString()));
          }

          // validate the optional field `finance_loan_apr` (array)
          for (int i = 0; i < jsonArrayfinanceLoanApr.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayfinanceLoanApr.get(i));
          };
        }
      }
      if (jsonObj.get("finance_loan_term") != null && !jsonObj.get("finance_loan_term").isJsonNull()) {
        JsonArray jsonArrayfinanceLoanTerm = jsonObj.getAsJsonArray("finance_loan_term");
        if (jsonArrayfinanceLoanTerm != null) {
          // ensure the json data is an array
          if (!jsonObj.get("finance_loan_term").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `finance_loan_term` to be an array in the JSON string but got `%s`", jsonObj.get("finance_loan_term").toString()));
          }

          // validate the optional field `finance_loan_term` (array)
          for (int i = 0; i < jsonArrayfinanceLoanTerm.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayfinanceLoanTerm.get(i));
          };
        }
      }
      if (jsonObj.get("lease_down_payment") != null && !jsonObj.get("lease_down_payment").isJsonNull()) {
        JsonArray jsonArrayleaseDownPayment = jsonObj.getAsJsonArray("lease_down_payment");
        if (jsonArrayleaseDownPayment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lease_down_payment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lease_down_payment` to be an array in the JSON string but got `%s`", jsonObj.get("lease_down_payment").toString()));
          }

          // validate the optional field `lease_down_payment` (array)
          for (int i = 0; i < jsonArrayleaseDownPayment.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayleaseDownPayment.get(i));
          };
        }
      }
      if (jsonObj.get("lease_emp") != null && !jsonObj.get("lease_emp").isJsonNull()) {
        JsonArray jsonArrayleaseEmp = jsonObj.getAsJsonArray("lease_emp");
        if (jsonArrayleaseEmp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lease_emp").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lease_emp` to be an array in the JSON string but got `%s`", jsonObj.get("lease_emp").toString()));
          }

          // validate the optional field `lease_emp` (array)
          for (int i = 0; i < jsonArrayleaseEmp.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayleaseEmp.get(i));
          };
        }
      }
      if (jsonObj.get("lease_term") != null && !jsonObj.get("lease_term").isJsonNull()) {
        JsonArray jsonArrayleaseTerm = jsonObj.getAsJsonArray("lease_term");
        if (jsonArrayleaseTerm != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lease_term").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lease_term` to be an array in the JSON string but got `%s`", jsonObj.get("lease_term").toString()));
          }

          // validate the optional field `lease_term` (array)
          for (int i = 0; i < jsonArrayleaseTerm.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayleaseTerm.get(i));
          };
        }
      }
      if (jsonObj.get("miles") != null && !jsonObj.get("miles").isJsonNull()) {
        JsonArray jsonArraymiles = jsonObj.getAsJsonArray("miles");
        if (jsonArraymiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("miles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `miles` to be an array in the JSON string but got `%s`", jsonObj.get("miles").toString()));
          }

          // validate the optional field `miles` (array)
          for (int i = 0; i < jsonArraymiles.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArraymiles.get(i));
          };
        }
      }
      if (jsonObj.get("msrp") != null && !jsonObj.get("msrp").isJsonNull()) {
        JsonArray jsonArraymsrp = jsonObj.getAsJsonArray("msrp");
        if (jsonArraymsrp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("msrp").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `msrp` to be an array in the JSON string but got `%s`", jsonObj.get("msrp").toString()));
          }

          // validate the optional field `msrp` (array)
          for (int i = 0; i < jsonArraymsrp.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArraymsrp.get(i));
          };
        }
      }
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        JsonArray jsonArrayprice = jsonObj.getAsJsonArray("price");
        if (jsonArrayprice != null) {
          // ensure the json data is an array
          if (!jsonObj.get("price").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `price` to be an array in the JSON string but got `%s`", jsonObj.get("price").toString()));
          }

          // validate the optional field `price` (array)
          for (int i = 0; i < jsonArrayprice.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayprice.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CarSearchRangeFacets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CarSearchRangeFacets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CarSearchRangeFacets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CarSearchRangeFacets.class));

       return (TypeAdapter<T>) new TypeAdapter<CarSearchRangeFacets>() {
           @Override
           public void write(JsonWriter out, CarSearchRangeFacets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CarSearchRangeFacets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CarSearchRangeFacets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CarSearchRangeFacets
   * @throws IOException if the JSON string is invalid with respect to CarSearchRangeFacets
   */
  public static CarSearchRangeFacets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CarSearchRangeFacets.class);
  }

  /**
   * Convert an instance of CarSearchRangeFacets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

