/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompetitorsCarDetails;
import org.openapitools.client.model.CompetitorsSameCars;
import org.openapitools.client.model.CompetitorsSimilarCars;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompetitorsPoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompetitorsPoint {
  public static final String SERIALIZED_NAME_CURRENT_CAR = "current_car";
  @SerializedName(SERIALIZED_NAME_CURRENT_CAR)
  private CompetitorsCarDetails currentCar;

  public static final String SERIALIZED_NAME_SAME_CAR_MODELS = "same_car_models";
  @SerializedName(SERIALIZED_NAME_SAME_CAR_MODELS)
  private List<CompetitorsSameCars> sameCarModels = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIMILAR_CAR_MODELS = "similar_car_models";
  @SerializedName(SERIALIZED_NAME_SIMILAR_CAR_MODELS)
  private List<CompetitorsSimilarCars> similarCarModels = new ArrayList<>();

  public CompetitorsPoint() {
  }

  public CompetitorsPoint currentCar(CompetitorsCarDetails currentCar) {
    this.currentCar = currentCar;
    return this;
  }

  /**
   * Get currentCar
   * @return currentCar
   */
  @javax.annotation.Nullable
  public CompetitorsCarDetails getCurrentCar() {
    return currentCar;
  }

  public void setCurrentCar(CompetitorsCarDetails currentCar) {
    this.currentCar = currentCar;
  }


  public CompetitorsPoint sameCarModels(List<CompetitorsSameCars> sameCarModels) {
    this.sameCarModels = sameCarModels;
    return this;
  }

  public CompetitorsPoint addSameCarModelsItem(CompetitorsSameCars sameCarModelsItem) {
    if (this.sameCarModels == null) {
      this.sameCarModels = new ArrayList<>();
    }
    this.sameCarModels.add(sameCarModelsItem);
    return this;
  }

  /**
   * Get sameCarModels
   * @return sameCarModels
   */
  @javax.annotation.Nullable
  public List<CompetitorsSameCars> getSameCarModels() {
    return sameCarModels;
  }

  public void setSameCarModels(List<CompetitorsSameCars> sameCarModels) {
    this.sameCarModels = sameCarModels;
  }


  public CompetitorsPoint similarCarModels(List<CompetitorsSimilarCars> similarCarModels) {
    this.similarCarModels = similarCarModels;
    return this;
  }

  public CompetitorsPoint addSimilarCarModelsItem(CompetitorsSimilarCars similarCarModelsItem) {
    if (this.similarCarModels == null) {
      this.similarCarModels = new ArrayList<>();
    }
    this.similarCarModels.add(similarCarModelsItem);
    return this;
  }

  /**
   * Get similarCarModels
   * @return similarCarModels
   */
  @javax.annotation.Nullable
  public List<CompetitorsSimilarCars> getSimilarCarModels() {
    return similarCarModels;
  }

  public void setSimilarCarModels(List<CompetitorsSimilarCars> similarCarModels) {
    this.similarCarModels = similarCarModels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompetitorsPoint competitorsPoint = (CompetitorsPoint) o;
    return Objects.equals(this.currentCar, competitorsPoint.currentCar) &&
        Objects.equals(this.sameCarModels, competitorsPoint.sameCarModels) &&
        Objects.equals(this.similarCarModels, competitorsPoint.similarCarModels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentCar, sameCarModels, similarCarModels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompetitorsPoint {\n");
    sb.append("    currentCar: ").append(toIndentedString(currentCar)).append("\n");
    sb.append("    sameCarModels: ").append(toIndentedString(sameCarModels)).append("\n");
    sb.append("    similarCarModels: ").append(toIndentedString(similarCarModels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("current_car");
    openapiFields.add("same_car_models");
    openapiFields.add("similar_car_models");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompetitorsPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompetitorsPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompetitorsPoint is not found in the empty JSON string", CompetitorsPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompetitorsPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompetitorsPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `current_car`
      if (jsonObj.get("current_car") != null && !jsonObj.get("current_car").isJsonNull()) {
        CompetitorsCarDetails.validateJsonElement(jsonObj.get("current_car"));
      }
      if (jsonObj.get("same_car_models") != null && !jsonObj.get("same_car_models").isJsonNull()) {
        JsonArray jsonArraysameCarModels = jsonObj.getAsJsonArray("same_car_models");
        if (jsonArraysameCarModels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("same_car_models").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `same_car_models` to be an array in the JSON string but got `%s`", jsonObj.get("same_car_models").toString()));
          }

          // validate the optional field `same_car_models` (array)
          for (int i = 0; i < jsonArraysameCarModels.size(); i++) {
            CompetitorsSameCars.validateJsonElement(jsonArraysameCarModels.get(i));
          };
        }
      }
      if (jsonObj.get("similar_car_models") != null && !jsonObj.get("similar_car_models").isJsonNull()) {
        JsonArray jsonArraysimilarCarModels = jsonObj.getAsJsonArray("similar_car_models");
        if (jsonArraysimilarCarModels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("similar_car_models").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `similar_car_models` to be an array in the JSON string but got `%s`", jsonObj.get("similar_car_models").toString()));
          }

          // validate the optional field `similar_car_models` (array)
          for (int i = 0; i < jsonArraysimilarCarModels.size(); i++) {
            CompetitorsSimilarCars.validateJsonElement(jsonArraysimilarCarModels.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompetitorsPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompetitorsPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompetitorsPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompetitorsPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<CompetitorsPoint>() {
           @Override
           public void write(JsonWriter out, CompetitorsPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompetitorsPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompetitorsPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompetitorsPoint
   * @throws IOException if the JSON string is invalid with respect to CompetitorsPoint
   */
  public static CompetitorsPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompetitorsPoint.class);
  }

  /**
   * Convert an instance of CompetitorsPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

