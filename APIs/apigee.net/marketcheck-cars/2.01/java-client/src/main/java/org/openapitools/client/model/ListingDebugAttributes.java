/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListingDebugAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListingDebugAttributes {
  public static final String SERIALIZED_NAME_CYCLE_ID = "cycle_id";
  @SerializedName(SERIALIZED_NAME_CYCLE_ID)
  private BigDecimal cycleId;

  public static final String SERIALIZED_NAME_ROBOT_ID = "robot_id";
  @SerializedName(SERIALIZED_NAME_ROBOT_ID)
  private BigDecimal robotId;

  public static final String SERIALIZED_NAME_SCRAPED_AT = "scraped_at";
  @SerializedName(SERIALIZED_NAME_SCRAPED_AT)
  private String scrapedAt;

  public static final String SERIALIZED_NAME_TAXONOMY_VIN = "taxonomy_vin";
  @SerializedName(SERIALIZED_NAME_TAXONOMY_VIN)
  private String taxonomyVin;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private BigDecimal templateId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private BigDecimal userId;

  public ListingDebugAttributes() {
  }

  public ListingDebugAttributes cycleId(BigDecimal cycleId) {
    this.cycleId = cycleId;
    return this;
  }

  /**
   * Cycle id
   * @return cycleId
   */
  @javax.annotation.Nullable
  public BigDecimal getCycleId() {
    return cycleId;
  }

  public void setCycleId(BigDecimal cycleId) {
    this.cycleId = cycleId;
  }


  public ListingDebugAttributes robotId(BigDecimal robotId) {
    this.robotId = robotId;
    return this;
  }

  /**
   * Robot id
   * @return robotId
   */
  @javax.annotation.Nullable
  public BigDecimal getRobotId() {
    return robotId;
  }

  public void setRobotId(BigDecimal robotId) {
    this.robotId = robotId;
  }


  public ListingDebugAttributes scrapedAt(String scrapedAt) {
    this.scrapedAt = scrapedAt;
    return this;
  }

  /**
   * Scraped date and time
   * @return scrapedAt
   */
  @javax.annotation.Nullable
  public String getScrapedAt() {
    return scrapedAt;
  }

  public void setScrapedAt(String scrapedAt) {
    this.scrapedAt = scrapedAt;
  }


  public ListingDebugAttributes taxonomyVin(String taxonomyVin) {
    this.taxonomyVin = taxonomyVin;
    return this;
  }

  /**
   * Taxonomy vin
   * @return taxonomyVin
   */
  @javax.annotation.Nullable
  public String getTaxonomyVin() {
    return taxonomyVin;
  }

  public void setTaxonomyVin(String taxonomyVin) {
    this.taxonomyVin = taxonomyVin;
  }


  public ListingDebugAttributes templateId(BigDecimal templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Template id
   * @return templateId
   */
  @javax.annotation.Nullable
  public BigDecimal getTemplateId() {
    return templateId;
  }

  public void setTemplateId(BigDecimal templateId) {
    this.templateId = templateId;
  }


  public ListingDebugAttributes userId(BigDecimal userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User id
   * @return userId
   */
  @javax.annotation.Nullable
  public BigDecimal getUserId() {
    return userId;
  }

  public void setUserId(BigDecimal userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingDebugAttributes listingDebugAttributes = (ListingDebugAttributes) o;
    return Objects.equals(this.cycleId, listingDebugAttributes.cycleId) &&
        Objects.equals(this.robotId, listingDebugAttributes.robotId) &&
        Objects.equals(this.scrapedAt, listingDebugAttributes.scrapedAt) &&
        Objects.equals(this.taxonomyVin, listingDebugAttributes.taxonomyVin) &&
        Objects.equals(this.templateId, listingDebugAttributes.templateId) &&
        Objects.equals(this.userId, listingDebugAttributes.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cycleId, robotId, scrapedAt, taxonomyVin, templateId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingDebugAttributes {\n");
    sb.append("    cycleId: ").append(toIndentedString(cycleId)).append("\n");
    sb.append("    robotId: ").append(toIndentedString(robotId)).append("\n");
    sb.append("    scrapedAt: ").append(toIndentedString(scrapedAt)).append("\n");
    sb.append("    taxonomyVin: ").append(toIndentedString(taxonomyVin)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cycle_id");
    openapiFields.add("robot_id");
    openapiFields.add("scraped_at");
    openapiFields.add("taxonomy_vin");
    openapiFields.add("template_id");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListingDebugAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListingDebugAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingDebugAttributes is not found in the empty JSON string", ListingDebugAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListingDebugAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingDebugAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("scraped_at") != null && !jsonObj.get("scraped_at").isJsonNull()) && !jsonObj.get("scraped_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scraped_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scraped_at").toString()));
      }
      if ((jsonObj.get("taxonomy_vin") != null && !jsonObj.get("taxonomy_vin").isJsonNull()) && !jsonObj.get("taxonomy_vin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxonomy_vin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxonomy_vin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingDebugAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingDebugAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingDebugAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingDebugAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingDebugAttributes>() {
           @Override
           public void write(JsonWriter out, ListingDebugAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingDebugAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListingDebugAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListingDebugAttributes
   * @throws IOException if the JSON string is invalid with respect to ListingDebugAttributes
   */
  public static ListingDebugAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingDebugAttributes.class);
  }

  /**
   * Convert an instance of ListingDebugAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

