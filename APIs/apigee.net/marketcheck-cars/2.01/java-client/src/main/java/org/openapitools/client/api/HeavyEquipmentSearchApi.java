/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.HeavyEquipmentsListing;
import org.openapitools.client.model.HeavyEquipmentsSearchResponse;
import org.openapitools.client.model.ListingExtraAttributes;
import org.openapitools.client.model.ListingMedia;
import org.openapitools.client.model.SearchAutoCompleteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HeavyEquipmentSearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HeavyEquipmentSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HeavyEquipmentSearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listingHeavyEquipmentIdExtraGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heavy equipment ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingHeavyEquipmentIdExtraGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/heavy-equipment/{id}/extra"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingHeavyEquipmentIdExtraGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingHeavyEquipmentIdExtraGet(Async)");
        }

        return listingHeavyEquipmentIdExtraGetCall(id, apiKey, _callback);

    }

    /**
     * Long text Heavy equipment Listings attributes for Listing with the given id
     * Get Heavy equipment listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ListingExtraAttributes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heavy equipment ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingExtraAttributes listingHeavyEquipmentIdExtraGet(String id, String apiKey) throws ApiException {
        ApiResponse<ListingExtraAttributes> localVarResp = listingHeavyEquipmentIdExtraGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Long text Heavy equipment Listings attributes for Listing with the given id
     * Get Heavy equipment listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ListingExtraAttributes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heavy equipment ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingExtraAttributes> listingHeavyEquipmentIdExtraGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingHeavyEquipmentIdExtraGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Long text Heavy equipment Listings attributes for Listing with the given id (asynchronously)
     * Get Heavy equipment listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heavy equipment ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingHeavyEquipmentIdExtraGetAsync(String id, String apiKey, final ApiCallback<ListingExtraAttributes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingHeavyEquipmentIdExtraGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingHeavyEquipmentIdGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heavy equipment listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingHeavyEquipmentIdGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/heavy-equipment/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingHeavyEquipmentIdGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingHeavyEquipmentIdGet(Async)");
        }

        return listingHeavyEquipmentIdGetCall(id, apiKey, _callback);

    }

    /**
     * Heavy equipment listing by id
     * Get a particular Heavy equipment listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return HeavyEquipmentsListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heavy equipment listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public HeavyEquipmentsListing listingHeavyEquipmentIdGet(String id, String apiKey) throws ApiException {
        ApiResponse<HeavyEquipmentsListing> localVarResp = listingHeavyEquipmentIdGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Heavy equipment listing by id
     * Get a particular Heavy equipment listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;HeavyEquipmentsListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heavy equipment listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeavyEquipmentsListing> listingHeavyEquipmentIdGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingHeavyEquipmentIdGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<HeavyEquipmentsListing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Heavy equipment listing by id (asynchronously)
     * Get a particular Heavy equipment listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heavy equipment listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingHeavyEquipmentIdGetAsync(String id, String apiKey, final ApiCallback<HeavyEquipmentsListing> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingHeavyEquipmentIdGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<HeavyEquipmentsListing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingHeavyEquipmentIdMediaGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingHeavyEquipmentIdMediaGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/heavy-equipment/{id}/media"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingHeavyEquipmentIdMediaGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingHeavyEquipmentIdMediaGet(Async)");
        }

        return listingHeavyEquipmentIdMediaGetCall(id, apiKey, _callback);

    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ListingMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingMedia listingHeavyEquipmentIdMediaGet(String id, String apiKey) throws ApiException {
        ApiResponse<ListingMedia> localVarResp = listingHeavyEquipmentIdMediaGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ListingMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingMedia> listingHeavyEquipmentIdMediaGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingHeavyEquipmentIdMediaGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing media by id (asynchronously)
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing Media for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingHeavyEquipmentIdMediaGetAsync(String id, String apiKey, final ApiCallback<ListingMedia> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingHeavyEquipmentIdMediaGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchHeavyEquipmentActiveGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param category To filter heavy equipments on their category (optional)
     * @param subCategory To filter heavy equipments on their sub-category (optional)
     * @param hoursUsedRange Hours used range to filter heavy equipments with the their usage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all heavy equipment listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHeavyEquipmentActiveGetCall(String apiKey, String priceRange, String milesRange, String msrpRange, Double latitude, Double longitude, Integer radius, String searchText, String year, String make, String model, String trim, String vin, String inventoryType, String stockNo, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engine, String fuelType, String transmission, String drivetrain, String bodyType, String category, String subCategory, String hoursUsedRange, String state, String city, String zip, String msaCode, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/heavy-equipment/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_text", searchText));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (inventoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_type", inventoryType));
        }

        if (stockNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_no", stockNo));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (dealerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_name", dealerName));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (subCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_category", subCategory));
        }

        if (hoursUsedRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hours_used_range", hoursUsedRange));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchHeavyEquipmentActiveGetValidateBeforeCall(String apiKey, String priceRange, String milesRange, String msrpRange, Double latitude, Double longitude, Integer radius, String searchText, String year, String make, String model, String trim, String vin, String inventoryType, String stockNo, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engine, String fuelType, String transmission, String drivetrain, String bodyType, String category, String subCategory, String hoursUsedRange, String state, String city, String zip, String msaCode, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, final ApiCallback _callback) throws ApiException {
        return searchHeavyEquipmentActiveGetCall(apiKey, priceRange, milesRange, msrpRange, latitude, longitude, radius, searchText, year, make, model, trim, vin, inventoryType, stockNo, source, dealerName, dealerId, exteriorColor, interiorColor, engine, fuelType, transmission, drivetrain, bodyType, category, subCategory, hoursUsedRange, state, city, zip, msaCode, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, _callback);

    }

    /**
     * Gets active heavy equipment listings for the given search criteria
     * This endpoint provides search on heavy equipment inventory. This API produces a list of currently active heavy equipments from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search heavy equipments around a given geo-point within a given radius  2. Search heavy equipments for a specific year / make / model or combination of these  3. Search heavy equipments matching multiple year, make, model combinatins in the same search request 4. Filter results by most heavy equipment specification attributes 5. Filter heavy equipments within a given price / miles range 6. Specify a sort order for the results on price / miles / listed date  7. Search heavy equipments for a given City / State combination  8. Get Facets to build the search drill downs  9. Get Market averages for price/miles for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param category To filter heavy equipments on their category (optional)
     * @param subCategory To filter heavy equipments on their sub-category (optional)
     * @param hoursUsedRange Hours used range to filter heavy equipments with the their usage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @return HeavyEquipmentsSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all heavy equipment listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public HeavyEquipmentsSearchResponse searchHeavyEquipmentActiveGet(String apiKey, String priceRange, String milesRange, String msrpRange, Double latitude, Double longitude, Integer radius, String searchText, String year, String make, String model, String trim, String vin, String inventoryType, String stockNo, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engine, String fuelType, String transmission, String drivetrain, String bodyType, String category, String subCategory, String hoursUsedRange, String state, String city, String zip, String msaCode, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays) throws ApiException {
        ApiResponse<HeavyEquipmentsSearchResponse> localVarResp = searchHeavyEquipmentActiveGetWithHttpInfo(apiKey, priceRange, milesRange, msrpRange, latitude, longitude, radius, searchText, year, make, model, trim, vin, inventoryType, stockNo, source, dealerName, dealerId, exteriorColor, interiorColor, engine, fuelType, transmission, drivetrain, bodyType, category, subCategory, hoursUsedRange, state, city, zip, msaCode, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays);
        return localVarResp.getData();
    }

    /**
     * Gets active heavy equipment listings for the given search criteria
     * This endpoint provides search on heavy equipment inventory. This API produces a list of currently active heavy equipments from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search heavy equipments around a given geo-point within a given radius  2. Search heavy equipments for a specific year / make / model or combination of these  3. Search heavy equipments matching multiple year, make, model combinatins in the same search request 4. Filter results by most heavy equipment specification attributes 5. Filter heavy equipments within a given price / miles range 6. Specify a sort order for the results on price / miles / listed date  7. Search heavy equipments for a given City / State combination  8. Get Facets to build the search drill downs  9. Get Market averages for price/miles for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param category To filter heavy equipments on their category (optional)
     * @param subCategory To filter heavy equipments on their sub-category (optional)
     * @param hoursUsedRange Hours used range to filter heavy equipments with the their usage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @return ApiResponse&lt;HeavyEquipmentsSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all heavy equipment listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeavyEquipmentsSearchResponse> searchHeavyEquipmentActiveGetWithHttpInfo(String apiKey, String priceRange, String milesRange, String msrpRange, Double latitude, Double longitude, Integer radius, String searchText, String year, String make, String model, String trim, String vin, String inventoryType, String stockNo, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engine, String fuelType, String transmission, String drivetrain, String bodyType, String category, String subCategory, String hoursUsedRange, String state, String city, String zip, String msaCode, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays) throws ApiException {
        okhttp3.Call localVarCall = searchHeavyEquipmentActiveGetValidateBeforeCall(apiKey, priceRange, milesRange, msrpRange, latitude, longitude, radius, searchText, year, make, model, trim, vin, inventoryType, stockNo, source, dealerName, dealerId, exteriorColor, interiorColor, engine, fuelType, transmission, drivetrain, bodyType, category, subCategory, hoursUsedRange, state, city, zip, msaCode, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, null);
        Type localVarReturnType = new TypeToken<HeavyEquipmentsSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets active heavy equipment listings for the given search criteria (asynchronously)
     * This endpoint provides search on heavy equipment inventory. This API produces a list of currently active heavy equipments from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search heavy equipments around a given geo-point within a given radius  2. Search heavy equipments for a specific year / make / model or combination of these  3. Search heavy equipments matching multiple year, make, model combinatins in the same search request 4. Filter results by most heavy equipment specification attributes 5. Filter heavy equipments within a given price / miles range 6. Specify a sort order for the results on price / miles / listed date  7. Search heavy equipments for a given City / State combination  8. Get Facets to build the search drill downs  9. Get Market averages for price/miles for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param searchText To search a substring across entire document (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param source To filter listing on their source (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param category To filter heavy equipments on their category (optional)
     * @param subCategory To filter heavy equipments on their sub-category (optional)
     * @param hoursUsedRange Hours used range to filter heavy equipments with the their usage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all heavy equipment listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHeavyEquipmentActiveGetAsync(String apiKey, String priceRange, String milesRange, String msrpRange, Double latitude, Double longitude, Integer radius, String searchText, String year, String make, String model, String trim, String vin, String inventoryType, String stockNo, String source, String dealerName, String dealerId, String exteriorColor, String interiorColor, String engine, String fuelType, String transmission, String drivetrain, String bodyType, String category, String subCategory, String hoursUsedRange, String state, String city, String zip, String msaCode, String sortBy, String sortOrder, Integer rows, Integer start, String facets, String rangeFacets, String facetSort, String stats, String lastSeenRange, String firstSeenRange, String lastSeenDays, String firstSeenDays, final ApiCallback<HeavyEquipmentsSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchHeavyEquipmentActiveGetValidateBeforeCall(apiKey, priceRange, milesRange, msrpRange, latitude, longitude, radius, searchText, year, make, model, trim, vin, inventoryType, stockNo, source, dealerName, dealerId, exteriorColor, interiorColor, engine, fuelType, transmission, drivetrain, bodyType, category, subCategory, hoursUsedRange, state, city, zip, msaCode, sortBy, sortOrder, rows, start, facets, rangeFacets, facetSort, stats, lastSeenRange, firstSeenRange, lastSeenDays, firstSeenDays, _callback);
        Type localVarReturnType = new TypeToken<HeavyEquipmentsSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchHeavyEquipmentAutoCompleteGet
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param color Color of the vehicle (optional)
     * @param engine To filter listing on their engine (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHeavyEquipmentAutoCompleteGetCall(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String vehicleType, String transmission, String drivetrain, String fuelType, String color, String engine, String state, String city, String inventoryType, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, BigDecimal facetMinCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/heavy-equipment/auto-complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (input != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("input", input));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (inventoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_type", inventoryType));
        }

        if (ignoreCase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignore_case", ignoreCase));
        }

        if (termCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term_counts", termCounts));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sellerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_type", sellerType));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (facetMinCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_min_count", facetMinCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchHeavyEquipmentAutoCompleteGetValidateBeforeCall(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String vehicleType, String transmission, String drivetrain, String fuelType, String color, String engine, String state, String city, String inventoryType, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, BigDecimal facetMinCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling searchHeavyEquipmentAutoCompleteGet(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling searchHeavyEquipmentAutoCompleteGet(Async)");
        }

        return searchHeavyEquipmentAutoCompleteGetCall(field, input, apiKey, year, make, model, trim, bodyType, vehicleType, transmission, drivetrain, fuelType, color, engine, state, city, inventoryType, ignoreCase, termCounts, sortBy, sellerType, radius, zip, facetMinCount, _callback);

    }

    /**
     * API for auto-completion of inputs
     * Auto-complete the inputs of your end users
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param color Color of the vehicle (optional)
     * @param engine To filter listing on their engine (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @return SearchAutoCompleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SearchAutoCompleteResponse searchHeavyEquipmentAutoCompleteGet(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String vehicleType, String transmission, String drivetrain, String fuelType, String color, String engine, String state, String city, String inventoryType, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, BigDecimal facetMinCount) throws ApiException {
        ApiResponse<SearchAutoCompleteResponse> localVarResp = searchHeavyEquipmentAutoCompleteGetWithHttpInfo(field, input, apiKey, year, make, model, trim, bodyType, vehicleType, transmission, drivetrain, fuelType, color, engine, state, city, inventoryType, ignoreCase, termCounts, sortBy, sellerType, radius, zip, facetMinCount);
        return localVarResp.getData();
    }

    /**
     * API for auto-completion of inputs
     * Auto-complete the inputs of your end users
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param color Color of the vehicle (optional)
     * @param engine To filter listing on their engine (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @return ApiResponse&lt;SearchAutoCompleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchAutoCompleteResponse> searchHeavyEquipmentAutoCompleteGetWithHttpInfo(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String vehicleType, String transmission, String drivetrain, String fuelType, String color, String engine, String state, String city, String inventoryType, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, BigDecimal facetMinCount) throws ApiException {
        okhttp3.Call localVarCall = searchHeavyEquipmentAutoCompleteGetValidateBeforeCall(field, input, apiKey, year, make, model, trim, bodyType, vehicleType, transmission, drivetrain, fuelType, color, engine, state, city, inventoryType, ignoreCase, termCounts, sortBy, sellerType, radius, zip, facetMinCount, null);
        Type localVarReturnType = new TypeToken<SearchAutoCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * API for auto-completion of inputs (asynchronously)
     * Auto-complete the inputs of your end users
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param color Color of the vehicle (optional)
     * @param engine To filter listing on their engine (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param inventoryType To filter listing on their condition. Either used or new (optional)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHeavyEquipmentAutoCompleteGetAsync(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String vehicleType, String transmission, String drivetrain, String fuelType, String color, String engine, String state, String city, String inventoryType, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, BigDecimal facetMinCount, final ApiCallback<SearchAutoCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchHeavyEquipmentAutoCompleteGetValidateBeforeCall(field, input, apiKey, year, make, model, trim, bodyType, vehicleType, transmission, drivetrain, fuelType, color, engine, state, city, inventoryType, ignoreCase, termCounts, sortBy, sellerType, radius, zip, facetMinCount, _callback);
        Type localVarReturnType = new TypeToken<SearchAutoCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
