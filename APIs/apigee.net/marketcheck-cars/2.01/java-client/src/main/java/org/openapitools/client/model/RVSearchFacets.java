/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FacetItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RVSearchFacets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RVSearchFacets {
  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private List<FacetItem> area = new ArrayList<>();

  public static final String SERIALIZED_NAME_AWNINGS = "awnings";
  @SerializedName(SERIALIZED_NAME_AWNINGS)
  private List<FacetItem> awnings = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private List<FacetItem> city = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private List<FacetItem> propertyClass = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEALER_ID = "dealer_id";
  @SerializedName(SERIALIZED_NAME_DEALER_ID)
  private List<FacetItem> dealerId = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private List<FacetItem> engine = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERIOR_COLOR = "exterior_color";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_COLOR)
  private List<FacetItem> exteriorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuel_type";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private List<FacetItem> fuelType = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERIOR_COLOR = "interior_color";
  @SerializedName(SERIALIZED_NAME_INTERIOR_COLOR)
  private List<FacetItem> interiorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORY_TYPE = "inventory_type";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TYPE)
  private List<FacetItem> inventoryType = new ArrayList<>();

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private List<FacetItem> length = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private List<FacetItem> make = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private List<FacetItem> model = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_NAME = "seller_name";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private List<FacetItem> sellerName = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLEEPS = "sleeps";
  @SerializedName(SERIALIZED_NAME_SLEEPS)
  private List<FacetItem> sleeps = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLIDEOUTS = "slideouts";
  @SerializedName(SERIALIZED_NAME_SLIDEOUTS)
  private List<FacetItem> slideouts = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private List<FacetItem> source = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private List<FacetItem> state = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private List<FacetItem> transmission = new ArrayList<>();

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private List<FacetItem> year = new ArrayList<>();

  public RVSearchFacets() {
  }

  public RVSearchFacets area(List<FacetItem> area) {
    this.area = area;
    return this;
  }

  public RVSearchFacets addAreaItem(FacetItem areaItem) {
    if (this.area == null) {
      this.area = new ArrayList<>();
    }
    this.area.add(areaItem);
    return this;
  }

  /**
   * Get area
   * @return area
   */
  @javax.annotation.Nullable
  public List<FacetItem> getArea() {
    return area;
  }

  public void setArea(List<FacetItem> area) {
    this.area = area;
  }


  public RVSearchFacets awnings(List<FacetItem> awnings) {
    this.awnings = awnings;
    return this;
  }

  public RVSearchFacets addAwningsItem(FacetItem awningsItem) {
    if (this.awnings == null) {
      this.awnings = new ArrayList<>();
    }
    this.awnings.add(awningsItem);
    return this;
  }

  /**
   * Get awnings
   * @return awnings
   */
  @javax.annotation.Nullable
  public List<FacetItem> getAwnings() {
    return awnings;
  }

  public void setAwnings(List<FacetItem> awnings) {
    this.awnings = awnings;
  }


  public RVSearchFacets city(List<FacetItem> city) {
    this.city = city;
    return this;
  }

  public RVSearchFacets addCityItem(FacetItem cityItem) {
    if (this.city == null) {
      this.city = new ArrayList<>();
    }
    this.city.add(cityItem);
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCity() {
    return city;
  }

  public void setCity(List<FacetItem> city) {
    this.city = city;
  }


  public RVSearchFacets propertyClass(List<FacetItem> propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  public RVSearchFacets addPropertyClassItem(FacetItem propertyClassItem) {
    if (this.propertyClass == null) {
      this.propertyClass = new ArrayList<>();
    }
    this.propertyClass.add(propertyClassItem);
    return this;
  }

  /**
   * Get propertyClass
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public List<FacetItem> getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(List<FacetItem> propertyClass) {
    this.propertyClass = propertyClass;
  }


  public RVSearchFacets dealerId(List<FacetItem> dealerId) {
    this.dealerId = dealerId;
    return this;
  }

  public RVSearchFacets addDealerIdItem(FacetItem dealerIdItem) {
    if (this.dealerId == null) {
      this.dealerId = new ArrayList<>();
    }
    this.dealerId.add(dealerIdItem);
    return this;
  }

  /**
   * Get dealerId
   * @return dealerId
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDealerId() {
    return dealerId;
  }

  public void setDealerId(List<FacetItem> dealerId) {
    this.dealerId = dealerId;
  }


  public RVSearchFacets engine(List<FacetItem> engine) {
    this.engine = engine;
    return this;
  }

  public RVSearchFacets addEngineItem(FacetItem engineItem) {
    if (this.engine == null) {
      this.engine = new ArrayList<>();
    }
    this.engine.add(engineItem);
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngine() {
    return engine;
  }

  public void setEngine(List<FacetItem> engine) {
    this.engine = engine;
  }


  public RVSearchFacets exteriorColor(List<FacetItem> exteriorColor) {
    this.exteriorColor = exteriorColor;
    return this;
  }

  public RVSearchFacets addExteriorColorItem(FacetItem exteriorColorItem) {
    if (this.exteriorColor == null) {
      this.exteriorColor = new ArrayList<>();
    }
    this.exteriorColor.add(exteriorColorItem);
    return this;
  }

  /**
   * Get exteriorColor
   * @return exteriorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getExteriorColor() {
    return exteriorColor;
  }

  public void setExteriorColor(List<FacetItem> exteriorColor) {
    this.exteriorColor = exteriorColor;
  }


  public RVSearchFacets fuelType(List<FacetItem> fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  public RVSearchFacets addFuelTypeItem(FacetItem fuelTypeItem) {
    if (this.fuelType == null) {
      this.fuelType = new ArrayList<>();
    }
    this.fuelType.add(fuelTypeItem);
    return this;
  }

  /**
   * Get fuelType
   * @return fuelType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getFuelType() {
    return fuelType;
  }

  public void setFuelType(List<FacetItem> fuelType) {
    this.fuelType = fuelType;
  }


  public RVSearchFacets interiorColor(List<FacetItem> interiorColor) {
    this.interiorColor = interiorColor;
    return this;
  }

  public RVSearchFacets addInteriorColorItem(FacetItem interiorColorItem) {
    if (this.interiorColor == null) {
      this.interiorColor = new ArrayList<>();
    }
    this.interiorColor.add(interiorColorItem);
    return this;
  }

  /**
   * Get interiorColor
   * @return interiorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getInteriorColor() {
    return interiorColor;
  }

  public void setInteriorColor(List<FacetItem> interiorColor) {
    this.interiorColor = interiorColor;
  }


  public RVSearchFacets inventoryType(List<FacetItem> inventoryType) {
    this.inventoryType = inventoryType;
    return this;
  }

  public RVSearchFacets addInventoryTypeItem(FacetItem inventoryTypeItem) {
    if (this.inventoryType == null) {
      this.inventoryType = new ArrayList<>();
    }
    this.inventoryType.add(inventoryTypeItem);
    return this;
  }

  /**
   * Get inventoryType
   * @return inventoryType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getInventoryType() {
    return inventoryType;
  }

  public void setInventoryType(List<FacetItem> inventoryType) {
    this.inventoryType = inventoryType;
  }


  public RVSearchFacets length(List<FacetItem> length) {
    this.length = length;
    return this;
  }

  public RVSearchFacets addLengthItem(FacetItem lengthItem) {
    if (this.length == null) {
      this.length = new ArrayList<>();
    }
    this.length.add(lengthItem);
    return this;
  }

  /**
   * Get length
   * @return length
   */
  @javax.annotation.Nullable
  public List<FacetItem> getLength() {
    return length;
  }

  public void setLength(List<FacetItem> length) {
    this.length = length;
  }


  public RVSearchFacets make(List<FacetItem> make) {
    this.make = make;
    return this;
  }

  public RVSearchFacets addMakeItem(FacetItem makeItem) {
    if (this.make == null) {
      this.make = new ArrayList<>();
    }
    this.make.add(makeItem);
    return this;
  }

  /**
   * Get make
   * @return make
   */
  @javax.annotation.Nullable
  public List<FacetItem> getMake() {
    return make;
  }

  public void setMake(List<FacetItem> make) {
    this.make = make;
  }


  public RVSearchFacets model(List<FacetItem> model) {
    this.model = model;
    return this;
  }

  public RVSearchFacets addModelItem(FacetItem modelItem) {
    if (this.model == null) {
      this.model = new ArrayList<>();
    }
    this.model.add(modelItem);
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public List<FacetItem> getModel() {
    return model;
  }

  public void setModel(List<FacetItem> model) {
    this.model = model;
  }


  public RVSearchFacets sellerName(List<FacetItem> sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public RVSearchFacets addSellerNameItem(FacetItem sellerNameItem) {
    if (this.sellerName == null) {
      this.sellerName = new ArrayList<>();
    }
    this.sellerName.add(sellerNameItem);
    return this;
  }

  /**
   * Get sellerName
   * @return sellerName
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSellerName() {
    return sellerName;
  }

  public void setSellerName(List<FacetItem> sellerName) {
    this.sellerName = sellerName;
  }


  public RVSearchFacets sleeps(List<FacetItem> sleeps) {
    this.sleeps = sleeps;
    return this;
  }

  public RVSearchFacets addSleepsItem(FacetItem sleepsItem) {
    if (this.sleeps == null) {
      this.sleeps = new ArrayList<>();
    }
    this.sleeps.add(sleepsItem);
    return this;
  }

  /**
   * Get sleeps
   * @return sleeps
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSleeps() {
    return sleeps;
  }

  public void setSleeps(List<FacetItem> sleeps) {
    this.sleeps = sleeps;
  }


  public RVSearchFacets slideouts(List<FacetItem> slideouts) {
    this.slideouts = slideouts;
    return this;
  }

  public RVSearchFacets addSlideoutsItem(FacetItem slideoutsItem) {
    if (this.slideouts == null) {
      this.slideouts = new ArrayList<>();
    }
    this.slideouts.add(slideoutsItem);
    return this;
  }

  /**
   * Get slideouts
   * @return slideouts
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSlideouts() {
    return slideouts;
  }

  public void setSlideouts(List<FacetItem> slideouts) {
    this.slideouts = slideouts;
  }


  public RVSearchFacets source(List<FacetItem> source) {
    this.source = source;
    return this;
  }

  public RVSearchFacets addSourceItem(FacetItem sourceItem) {
    if (this.source == null) {
      this.source = new ArrayList<>();
    }
    this.source.add(sourceItem);
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSource() {
    return source;
  }

  public void setSource(List<FacetItem> source) {
    this.source = source;
  }


  public RVSearchFacets state(List<FacetItem> state) {
    this.state = state;
    return this;
  }

  public RVSearchFacets addStateItem(FacetItem stateItem) {
    if (this.state == null) {
      this.state = new ArrayList<>();
    }
    this.state.add(stateItem);
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public List<FacetItem> getState() {
    return state;
  }

  public void setState(List<FacetItem> state) {
    this.state = state;
  }


  public RVSearchFacets transmission(List<FacetItem> transmission) {
    this.transmission = transmission;
    return this;
  }

  public RVSearchFacets addTransmissionItem(FacetItem transmissionItem) {
    if (this.transmission == null) {
      this.transmission = new ArrayList<>();
    }
    this.transmission.add(transmissionItem);
    return this;
  }

  /**
   * Get transmission
   * @return transmission
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTransmission() {
    return transmission;
  }

  public void setTransmission(List<FacetItem> transmission) {
    this.transmission = transmission;
  }


  public RVSearchFacets year(List<FacetItem> year) {
    this.year = year;
    return this;
  }

  public RVSearchFacets addYearItem(FacetItem yearItem) {
    if (this.year == null) {
      this.year = new ArrayList<>();
    }
    this.year.add(yearItem);
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public List<FacetItem> getYear() {
    return year;
  }

  public void setYear(List<FacetItem> year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RVSearchFacets rvSearchFacets = (RVSearchFacets) o;
    return Objects.equals(this.area, rvSearchFacets.area) &&
        Objects.equals(this.awnings, rvSearchFacets.awnings) &&
        Objects.equals(this.city, rvSearchFacets.city) &&
        Objects.equals(this.propertyClass, rvSearchFacets.propertyClass) &&
        Objects.equals(this.dealerId, rvSearchFacets.dealerId) &&
        Objects.equals(this.engine, rvSearchFacets.engine) &&
        Objects.equals(this.exteriorColor, rvSearchFacets.exteriorColor) &&
        Objects.equals(this.fuelType, rvSearchFacets.fuelType) &&
        Objects.equals(this.interiorColor, rvSearchFacets.interiorColor) &&
        Objects.equals(this.inventoryType, rvSearchFacets.inventoryType) &&
        Objects.equals(this.length, rvSearchFacets.length) &&
        Objects.equals(this.make, rvSearchFacets.make) &&
        Objects.equals(this.model, rvSearchFacets.model) &&
        Objects.equals(this.sellerName, rvSearchFacets.sellerName) &&
        Objects.equals(this.sleeps, rvSearchFacets.sleeps) &&
        Objects.equals(this.slideouts, rvSearchFacets.slideouts) &&
        Objects.equals(this.source, rvSearchFacets.source) &&
        Objects.equals(this.state, rvSearchFacets.state) &&
        Objects.equals(this.transmission, rvSearchFacets.transmission) &&
        Objects.equals(this.year, rvSearchFacets.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(area, awnings, city, propertyClass, dealerId, engine, exteriorColor, fuelType, interiorColor, inventoryType, length, make, model, sellerName, sleeps, slideouts, source, state, transmission, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RVSearchFacets {\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    awnings: ").append(toIndentedString(awnings)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    dealerId: ").append(toIndentedString(dealerId)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    exteriorColor: ").append(toIndentedString(exteriorColor)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    interiorColor: ").append(toIndentedString(interiorColor)).append("\n");
    sb.append("    inventoryType: ").append(toIndentedString(inventoryType)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    sleeps: ").append(toIndentedString(sleeps)).append("\n");
    sb.append("    slideouts: ").append(toIndentedString(slideouts)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("area");
    openapiFields.add("awnings");
    openapiFields.add("city");
    openapiFields.add("class");
    openapiFields.add("dealer_id");
    openapiFields.add("engine");
    openapiFields.add("exterior_color");
    openapiFields.add("fuel_type");
    openapiFields.add("interior_color");
    openapiFields.add("inventory_type");
    openapiFields.add("length");
    openapiFields.add("make");
    openapiFields.add("model");
    openapiFields.add("seller_name");
    openapiFields.add("sleeps");
    openapiFields.add("slideouts");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("transmission");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RVSearchFacets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RVSearchFacets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RVSearchFacets is not found in the empty JSON string", RVSearchFacets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RVSearchFacets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RVSearchFacets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("area") != null && !jsonObj.get("area").isJsonNull()) {
        JsonArray jsonArrayarea = jsonObj.getAsJsonArray("area");
        if (jsonArrayarea != null) {
          // ensure the json data is an array
          if (!jsonObj.get("area").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `area` to be an array in the JSON string but got `%s`", jsonObj.get("area").toString()));
          }

          // validate the optional field `area` (array)
          for (int i = 0; i < jsonArrayarea.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayarea.get(i));
          };
        }
      }
      if (jsonObj.get("awnings") != null && !jsonObj.get("awnings").isJsonNull()) {
        JsonArray jsonArrayawnings = jsonObj.getAsJsonArray("awnings");
        if (jsonArrayawnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("awnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `awnings` to be an array in the JSON string but got `%s`", jsonObj.get("awnings").toString()));
          }

          // validate the optional field `awnings` (array)
          for (int i = 0; i < jsonArrayawnings.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayawnings.get(i));
          };
        }
      }
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        JsonArray jsonArraycity = jsonObj.getAsJsonArray("city");
        if (jsonArraycity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("city").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `city` to be an array in the JSON string but got `%s`", jsonObj.get("city").toString()));
          }

          // validate the optional field `city` (array)
          for (int i = 0; i < jsonArraycity.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycity.get(i));
          };
        }
      }
      if (jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) {
        JsonArray jsonArraypropertyClass = jsonObj.getAsJsonArray("class");
        if (jsonArraypropertyClass != null) {
          // ensure the json data is an array
          if (!jsonObj.get("class").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `class` to be an array in the JSON string but got `%s`", jsonObj.get("class").toString()));
          }

          // validate the optional field `class` (array)
          for (int i = 0; i < jsonArraypropertyClass.size(); i++) {
            FacetItem.validateJsonElement(jsonArraypropertyClass.get(i));
          };
        }
      }
      if (jsonObj.get("dealer_id") != null && !jsonObj.get("dealer_id").isJsonNull()) {
        JsonArray jsonArraydealerId = jsonObj.getAsJsonArray("dealer_id");
        if (jsonArraydealerId != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dealer_id").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dealer_id` to be an array in the JSON string but got `%s`", jsonObj.get("dealer_id").toString()));
          }

          // validate the optional field `dealer_id` (array)
          for (int i = 0; i < jsonArraydealerId.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydealerId.get(i));
          };
        }
      }
      if (jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) {
        JsonArray jsonArrayengine = jsonObj.getAsJsonArray("engine");
        if (jsonArrayengine != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine` to be an array in the JSON string but got `%s`", jsonObj.get("engine").toString()));
          }

          // validate the optional field `engine` (array)
          for (int i = 0; i < jsonArrayengine.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengine.get(i));
          };
        }
      }
      if (jsonObj.get("exterior_color") != null && !jsonObj.get("exterior_color").isJsonNull()) {
        JsonArray jsonArrayexteriorColor = jsonObj.getAsJsonArray("exterior_color");
        if (jsonArrayexteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exterior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exterior_color` to be an array in the JSON string but got `%s`", jsonObj.get("exterior_color").toString()));
          }

          // validate the optional field `exterior_color` (array)
          for (int i = 0; i < jsonArrayexteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayexteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("fuel_type") != null && !jsonObj.get("fuel_type").isJsonNull()) {
        JsonArray jsonArrayfuelType = jsonObj.getAsJsonArray("fuel_type");
        if (jsonArrayfuelType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fuel_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fuel_type` to be an array in the JSON string but got `%s`", jsonObj.get("fuel_type").toString()));
          }

          // validate the optional field `fuel_type` (array)
          for (int i = 0; i < jsonArrayfuelType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayfuelType.get(i));
          };
        }
      }
      if (jsonObj.get("interior_color") != null && !jsonObj.get("interior_color").isJsonNull()) {
        JsonArray jsonArrayinteriorColor = jsonObj.getAsJsonArray("interior_color");
        if (jsonArrayinteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interior_color` to be an array in the JSON string but got `%s`", jsonObj.get("interior_color").toString()));
          }

          // validate the optional field `interior_color` (array)
          for (int i = 0; i < jsonArrayinteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayinteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("inventory_type") != null && !jsonObj.get("inventory_type").isJsonNull()) {
        JsonArray jsonArrayinventoryType = jsonObj.getAsJsonArray("inventory_type");
        if (jsonArrayinventoryType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inventory_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inventory_type` to be an array in the JSON string but got `%s`", jsonObj.get("inventory_type").toString()));
          }

          // validate the optional field `inventory_type` (array)
          for (int i = 0; i < jsonArrayinventoryType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayinventoryType.get(i));
          };
        }
      }
      if (jsonObj.get("length") != null && !jsonObj.get("length").isJsonNull()) {
        JsonArray jsonArraylength = jsonObj.getAsJsonArray("length");
        if (jsonArraylength != null) {
          // ensure the json data is an array
          if (!jsonObj.get("length").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `length` to be an array in the JSON string but got `%s`", jsonObj.get("length").toString()));
          }

          // validate the optional field `length` (array)
          for (int i = 0; i < jsonArraylength.size(); i++) {
            FacetItem.validateJsonElement(jsonArraylength.get(i));
          };
        }
      }
      if (jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) {
        JsonArray jsonArraymake = jsonObj.getAsJsonArray("make");
        if (jsonArraymake != null) {
          // ensure the json data is an array
          if (!jsonObj.get("make").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `make` to be an array in the JSON string but got `%s`", jsonObj.get("make").toString()));
          }

          // validate the optional field `make` (array)
          for (int i = 0; i < jsonArraymake.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymake.get(i));
          };
        }
      }
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        JsonArray jsonArraymodel = jsonObj.getAsJsonArray("model");
        if (jsonArraymodel != null) {
          // ensure the json data is an array
          if (!jsonObj.get("model").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `model` to be an array in the JSON string but got `%s`", jsonObj.get("model").toString()));
          }

          // validate the optional field `model` (array)
          for (int i = 0; i < jsonArraymodel.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymodel.get(i));
          };
        }
      }
      if (jsonObj.get("seller_name") != null && !jsonObj.get("seller_name").isJsonNull()) {
        JsonArray jsonArraysellerName = jsonObj.getAsJsonArray("seller_name");
        if (jsonArraysellerName != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seller_name").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_name` to be an array in the JSON string but got `%s`", jsonObj.get("seller_name").toString()));
          }

          // validate the optional field `seller_name` (array)
          for (int i = 0; i < jsonArraysellerName.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysellerName.get(i));
          };
        }
      }
      if (jsonObj.get("sleeps") != null && !jsonObj.get("sleeps").isJsonNull()) {
        JsonArray jsonArraysleeps = jsonObj.getAsJsonArray("sleeps");
        if (jsonArraysleeps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sleeps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sleeps` to be an array in the JSON string but got `%s`", jsonObj.get("sleeps").toString()));
          }

          // validate the optional field `sleeps` (array)
          for (int i = 0; i < jsonArraysleeps.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysleeps.get(i));
          };
        }
      }
      if (jsonObj.get("slideouts") != null && !jsonObj.get("slideouts").isJsonNull()) {
        JsonArray jsonArrayslideouts = jsonObj.getAsJsonArray("slideouts");
        if (jsonArrayslideouts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("slideouts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `slideouts` to be an array in the JSON string but got `%s`", jsonObj.get("slideouts").toString()));
          }

          // validate the optional field `slideouts` (array)
          for (int i = 0; i < jsonArrayslideouts.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayslideouts.get(i));
          };
        }
      }
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        JsonArray jsonArraysource = jsonObj.getAsJsonArray("source");
        if (jsonArraysource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("source").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `source` to be an array in the JSON string but got `%s`", jsonObj.get("source").toString()));
          }

          // validate the optional field `source` (array)
          for (int i = 0; i < jsonArraysource.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysource.get(i));
          };
        }
      }
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        JsonArray jsonArraystate = jsonObj.getAsJsonArray("state");
        if (jsonArraystate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("state").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `state` to be an array in the JSON string but got `%s`", jsonObj.get("state").toString()));
          }

          // validate the optional field `state` (array)
          for (int i = 0; i < jsonArraystate.size(); i++) {
            FacetItem.validateJsonElement(jsonArraystate.get(i));
          };
        }
      }
      if (jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) {
        JsonArray jsonArraytransmission = jsonObj.getAsJsonArray("transmission");
        if (jsonArraytransmission != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transmission").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transmission` to be an array in the JSON string but got `%s`", jsonObj.get("transmission").toString()));
          }

          // validate the optional field `transmission` (array)
          for (int i = 0; i < jsonArraytransmission.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytransmission.get(i));
          };
        }
      }
      if (jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) {
        JsonArray jsonArrayyear = jsonObj.getAsJsonArray("year");
        if (jsonArrayyear != null) {
          // ensure the json data is an array
          if (!jsonObj.get("year").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `year` to be an array in the JSON string but got `%s`", jsonObj.get("year").toString()));
          }

          // validate the optional field `year` (array)
          for (int i = 0; i < jsonArrayyear.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayyear.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RVSearchFacets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RVSearchFacets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RVSearchFacets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RVSearchFacets.class));

       return (TypeAdapter<T>) new TypeAdapter<RVSearchFacets>() {
           @Override
           public void write(JsonWriter out, RVSearchFacets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RVSearchFacets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RVSearchFacets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RVSearchFacets
   * @throws IOException if the JSON string is invalid with respect to RVSearchFacets
   */
  public static RVSearchFacets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RVSearchFacets.class);
  }

  /**
   * Convert an instance of RVSearchFacets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

