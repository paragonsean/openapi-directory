/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.ListingFinance;
import org.openapitools.client.model.ListingLease;
import org.openapitools.client.model.ListingNestExtraAttributes;
import org.openapitools.client.model.ListingNestMedia;
import org.openapitools.client.model.NestDealer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a full list of attributes available with Marketcheck for a car
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Listing {
  public static final String SERIALIZED_NAME_BASE_EXT_COLOR = "base_ext_color";
  @SerializedName(SERIALIZED_NAME_BASE_EXT_COLOR)
  private String baseExtColor;

  public static final String SERIALIZED_NAME_BASE_INT_COLOR = "base_int_color";
  @SerializedName(SERIALIZED_NAME_BASE_INT_COLOR)
  private String baseIntColor;

  public static final String SERIALIZED_NAME_BUILD = "build";
  @SerializedName(SERIALIZED_NAME_BUILD)
  private Build build;

  public static final String SERIALIZED_NAME_CARFAX1_OWNER = "carfax_1_owner";
  @SerializedName(SERIALIZED_NAME_CARFAX1_OWNER)
  private Boolean carfax1Owner;

  public static final String SERIALIZED_NAME_CARFAX_CLEAN_TITLE = "carfax_clean_title";
  @SerializedName(SERIALIZED_NAME_CARFAX_CLEAN_TITLE)
  private Boolean carfaxCleanTitle;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "data_source";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private String dataSource;

  public static final String SERIALIZED_NAME_DEALER = "dealer";
  @SerializedName(SERIALIZED_NAME_DEALER)
  private NestDealer dealer;

  public static final String SERIALIZED_NAME_DOM = "dom";
  @SerializedName(SERIALIZED_NAME_DOM)
  private Integer dom;

  public static final String SERIALIZED_NAME_DOM180 = "dom_180";
  @SerializedName(SERIALIZED_NAME_DOM180)
  private Integer dom180;

  public static final String SERIALIZED_NAME_DOM_ACTIVE = "dom_active";
  @SerializedName(SERIALIZED_NAME_DOM_ACTIVE)
  private Integer domActive;

  public static final String SERIALIZED_NAME_EXTERIOR_COLOR = "exterior_color";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_COLOR)
  private String exteriorColor;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private ListingNestExtraAttributes extra;

  public static final String SERIALIZED_NAME_FINANCING_OPTIONS = "financing_options";
  @SerializedName(SERIALIZED_NAME_FINANCING_OPTIONS)
  private List<ListingFinance> financingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_SEEN_AT = "first_seen_at";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN_AT)
  private Integer firstSeenAt;

  public static final String SERIALIZED_NAME_FIRST_SEEN_AT_DATE = "first_seen_at_date";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN_AT_DATE)
  private String firstSeenAtDate;

  public static final String SERIALIZED_NAME_FIRST_SEEN_AT_MC = "first_seen_at_mc";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN_AT_MC)
  private Integer firstSeenAtMc;

  public static final String SERIALIZED_NAME_FIRST_SEEN_AT_MC_DATE = "first_seen_at_mc_date";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN_AT_MC_DATE)
  private String firstSeenAtMcDate;

  public static final String SERIALIZED_NAME_FIRST_SEEN_AT_SOURCE = "first_seen_at_source";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN_AT_SOURCE)
  private Integer firstSeenAtSource;

  public static final String SERIALIZED_NAME_FIRST_SEEN_AT_SOURCE_DATE = "first_seen_at_source_date";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN_AT_SOURCE_DATE)
  private String firstSeenAtSourceDate;

  public static final String SERIALIZED_NAME_HEADING = "heading";
  @SerializedName(SERIALIZED_NAME_HEADING)
  private String heading;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERIOR_COLOR = "interior_color";
  @SerializedName(SERIALIZED_NAME_INTERIOR_COLOR)
  private String interiorColor;

  public static final String SERIALIZED_NAME_INVENTORY_TYPE = "inventory_type";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TYPE)
  private String inventoryType;

  public static final String SERIALIZED_NAME_IS_CERTIFIED = "is_certified";
  @SerializedName(SERIALIZED_NAME_IS_CERTIFIED)
  private Integer isCertified;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT = "last_seen_at";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT)
  private Integer lastSeenAt;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT_DATE = "last_seen_at_date";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT_DATE)
  private String lastSeenAtDate;

  public static final String SERIALIZED_NAME_LEASING_OPTIONS = "leasing_options";
  @SerializedName(SERIALIZED_NAME_LEASING_OPTIONS)
  private List<ListingLease> leasingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private ListingNestMedia media;

  public static final String SERIALIZED_NAME_MILES = "miles";
  @SerializedName(SERIALIZED_NAME_MILES)
  private Integer miles;

  public static final String SERIALIZED_NAME_MSRP = "msrp";
  @SerializedName(SERIALIZED_NAME_MSRP)
  private Integer msrp;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_PRICE_CHANGE_PERCENT = "price_change_percent";
  @SerializedName(SERIALIZED_NAME_PRICE_CHANGE_PERCENT)
  private Double priceChangePercent;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_REF_MILES = "ref_miles";
  @SerializedName(SERIALIZED_NAME_REF_MILES)
  private String refMiles;

  public static final String SERIALIZED_NAME_REF_MILES_DT = "ref_miles_dt";
  @SerializedName(SERIALIZED_NAME_REF_MILES_DT)
  private Integer refMilesDt;

  public static final String SERIALIZED_NAME_REF_PRICE = "ref_price";
  @SerializedName(SERIALIZED_NAME_REF_PRICE)
  private String refPrice;

  public static final String SERIALIZED_NAME_REF_PRICE_DT = "ref_price_dt";
  @SerializedName(SERIALIZED_NAME_REF_PRICE_DT)
  private Integer refPriceDt;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_SCRAPED_AT = "scraped_at";
  @SerializedName(SERIALIZED_NAME_SCRAPED_AT)
  private Integer scrapedAt;

  public static final String SERIALIZED_NAME_SCRAPED_AT_DATE = "scraped_at_date";
  @SerializedName(SERIALIZED_NAME_SCRAPED_AT_DATE)
  private String scrapedAtDate;

  public static final String SERIALIZED_NAME_SELLER_TYPE = "seller_type";
  @SerializedName(SERIALIZED_NAME_SELLER_TYPE)
  private String sellerType;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_STOCK_NO = "stock_no";
  @SerializedName(SERIALIZED_NAME_STOCK_NO)
  private String stockNo;

  public static final String SERIALIZED_NAME_VDP_URL = "vdp_url";
  @SerializedName(SERIALIZED_NAME_VDP_URL)
  private String vdpUrl;

  public static final String SERIALIZED_NAME_VEHICLE_REGISTRATION_MARK = "vehicle_registration_mark";
  @SerializedName(SERIALIZED_NAME_VEHICLE_REGISTRATION_MARK)
  private String vehicleRegistrationMark;

  public static final String SERIALIZED_NAME_VIN = "vin";
  @SerializedName(SERIALIZED_NAME_VIN)
  private String vin;

  public Listing() {
  }

  public Listing baseExtColor(String baseExtColor) {
    this.baseExtColor = baseExtColor;
    return this;
  }

  /**
   * Base exterior color of the car
   * @return baseExtColor
   */
  @javax.annotation.Nullable
  public String getBaseExtColor() {
    return baseExtColor;
  }

  public void setBaseExtColor(String baseExtColor) {
    this.baseExtColor = baseExtColor;
  }


  public Listing baseIntColor(String baseIntColor) {
    this.baseIntColor = baseIntColor;
    return this;
  }

  /**
   * Base interior color of the car
   * @return baseIntColor
   */
  @javax.annotation.Nullable
  public String getBaseIntColor() {
    return baseIntColor;
  }

  public void setBaseIntColor(String baseIntColor) {
    this.baseIntColor = baseIntColor;
  }


  public Listing build(Build build) {
    this.build = build;
    return this;
  }

  /**
   * Get build
   * @return build
   */
  @javax.annotation.Nullable
  public Build getBuild() {
    return build;
  }

  public void setBuild(Build build) {
    this.build = build;
  }


  public Listing carfax1Owner(Boolean carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
    return this;
  }

  /**
   * Flag to indicate whether listing is carfax_1_owner
   * @return carfax1Owner
   */
  @javax.annotation.Nullable
  public Boolean getCarfax1Owner() {
    return carfax1Owner;
  }

  public void setCarfax1Owner(Boolean carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
  }


  public Listing carfaxCleanTitle(Boolean carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
    return this;
  }

  /**
   * Flag to indicate whether listing is carfax_clean_title
   * @return carfaxCleanTitle
   */
  @javax.annotation.Nullable
  public Boolean getCarfaxCleanTitle() {
    return carfaxCleanTitle;
  }

  public void setCarfaxCleanTitle(Boolean carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
  }


  public Listing dataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Data source of the listing
   * @return dataSource
   */
  @javax.annotation.Nullable
  public String getDataSource() {
    return dataSource;
  }

  public void setDataSource(String dataSource) {
    this.dataSource = dataSource;
  }


  public Listing dealer(NestDealer dealer) {
    this.dealer = dealer;
    return this;
  }

  /**
   * Get dealer
   * @return dealer
   */
  @javax.annotation.Nullable
  public NestDealer getDealer() {
    return dealer;
  }

  public void setDealer(NestDealer dealer) {
    this.dealer = dealer;
  }


  public Listing dom(Integer dom) {
    this.dom = dom;
    return this;
  }

  /**
   * Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car
   * @return dom
   */
  @javax.annotation.Nullable
  public Integer getDom() {
    return dom;
  }

  public void setDom(Integer dom) {
    this.dom = dom;
  }


  public Listing dom180(Integer dom180) {
    this.dom180 = dom180;
    return this;
  }

  /**
   * Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car
   * @return dom180
   */
  @javax.annotation.Nullable
  public Integer getDom180() {
    return dom180;
  }

  public void setDom180(Integer dom180) {
    this.dom180 = dom180;
  }


  public Listing domActive(Integer domActive) {
    this.domActive = domActive;
    return this;
  }

  /**
   * Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car
   * @return domActive
   */
  @javax.annotation.Nullable
  public Integer getDomActive() {
    return domActive;
  }

  public void setDomActive(Integer domActive) {
    this.domActive = domActive;
  }


  public Listing exteriorColor(String exteriorColor) {
    this.exteriorColor = exteriorColor;
    return this;
  }

  /**
   * Exterior color of the car
   * @return exteriorColor
   */
  @javax.annotation.Nullable
  public String getExteriorColor() {
    return exteriorColor;
  }

  public void setExteriorColor(String exteriorColor) {
    this.exteriorColor = exteriorColor;
  }


  public Listing extra(ListingNestExtraAttributes extra) {
    this.extra = extra;
    return this;
  }

  /**
   * Get extra
   * @return extra
   */
  @javax.annotation.Nullable
  public ListingNestExtraAttributes getExtra() {
    return extra;
  }

  public void setExtra(ListingNestExtraAttributes extra) {
    this.extra = extra;
  }


  public Listing financingOptions(List<ListingFinance> financingOptions) {
    this.financingOptions = financingOptions;
    return this;
  }

  public Listing addFinancingOptionsItem(ListingFinance financingOptionsItem) {
    if (this.financingOptions == null) {
      this.financingOptions = new ArrayList<>();
    }
    this.financingOptions.add(financingOptionsItem);
    return this;
  }

  /**
   * Array of all finance offers for this listing
   * @return financingOptions
   */
  @javax.annotation.Nullable
  public List<ListingFinance> getFinancingOptions() {
    return financingOptions;
  }

  public void setFinancingOptions(List<ListingFinance> financingOptions) {
    this.financingOptions = financingOptions;
  }


  public Listing firstSeenAt(Integer firstSeenAt) {
    this.firstSeenAt = firstSeenAt;
    return this;
  }

  /**
   * Listing first seen at first scraped timestamp
   * @return firstSeenAt
   */
  @javax.annotation.Nullable
  public Integer getFirstSeenAt() {
    return firstSeenAt;
  }

  public void setFirstSeenAt(Integer firstSeenAt) {
    this.firstSeenAt = firstSeenAt;
  }


  public Listing firstSeenAtDate(String firstSeenAtDate) {
    this.firstSeenAtDate = firstSeenAtDate;
    return this;
  }

  /**
   * Listing first seen at first scraped date
   * @return firstSeenAtDate
   */
  @javax.annotation.Nullable
  public String getFirstSeenAtDate() {
    return firstSeenAtDate;
  }

  public void setFirstSeenAtDate(String firstSeenAtDate) {
    this.firstSeenAtDate = firstSeenAtDate;
  }


  public Listing firstSeenAtMc(Integer firstSeenAtMc) {
    this.firstSeenAtMc = firstSeenAtMc;
    return this;
  }

  /**
   * Listing first seen at first scraped at MC timestamp
   * @return firstSeenAtMc
   */
  @javax.annotation.Nullable
  public Integer getFirstSeenAtMc() {
    return firstSeenAtMc;
  }

  public void setFirstSeenAtMc(Integer firstSeenAtMc) {
    this.firstSeenAtMc = firstSeenAtMc;
  }


  public Listing firstSeenAtMcDate(String firstSeenAtMcDate) {
    this.firstSeenAtMcDate = firstSeenAtMcDate;
    return this;
  }

  /**
   * Listing first seen at first scraped at MC date
   * @return firstSeenAtMcDate
   */
  @javax.annotation.Nullable
  public String getFirstSeenAtMcDate() {
    return firstSeenAtMcDate;
  }

  public void setFirstSeenAtMcDate(String firstSeenAtMcDate) {
    this.firstSeenAtMcDate = firstSeenAtMcDate;
  }


  public Listing firstSeenAtSource(Integer firstSeenAtSource) {
    this.firstSeenAtSource = firstSeenAtSource;
    return this;
  }

  /**
   * Listing first seen at source relisted timestamp
   * @return firstSeenAtSource
   */
  @javax.annotation.Nullable
  public Integer getFirstSeenAtSource() {
    return firstSeenAtSource;
  }

  public void setFirstSeenAtSource(Integer firstSeenAtSource) {
    this.firstSeenAtSource = firstSeenAtSource;
  }


  public Listing firstSeenAtSourceDate(String firstSeenAtSourceDate) {
    this.firstSeenAtSourceDate = firstSeenAtSourceDate;
    return this;
  }

  /**
   * Listing first seen at source relisted date
   * @return firstSeenAtSourceDate
   */
  @javax.annotation.Nullable
  public String getFirstSeenAtSourceDate() {
    return firstSeenAtSourceDate;
  }

  public void setFirstSeenAtSourceDate(String firstSeenAtSourceDate) {
    this.firstSeenAtSourceDate = firstSeenAtSourceDate;
  }


  public Listing heading(String heading) {
    this.heading = heading;
    return this;
  }

  /**
   * Listing title as displayed on the source website
   * @return heading
   */
  @javax.annotation.Nullable
  public String getHeading() {
    return heading;
  }

  public void setHeading(String heading) {
    this.heading = heading;
  }


  public Listing id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier representing a specific listing from the Marketcheck database
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Listing interiorColor(String interiorColor) {
    this.interiorColor = interiorColor;
    return this;
  }

  /**
   * Interior color of the car
   * @return interiorColor
   */
  @javax.annotation.Nullable
  public String getInteriorColor() {
    return interiorColor;
  }

  public void setInteriorColor(String interiorColor) {
    this.interiorColor = interiorColor;
  }


  public Listing inventoryType(String inventoryType) {
    this.inventoryType = inventoryType;
    return this;
  }

  /**
   * Inventory type of car
   * @return inventoryType
   */
  @javax.annotation.Nullable
  public String getInventoryType() {
    return inventoryType;
  }

  public void setInventoryType(String inventoryType) {
    this.inventoryType = inventoryType;
  }


  public Listing isCertified(Integer isCertified) {
    this.isCertified = isCertified;
    return this;
  }

  /**
   * Certified car
   * @return isCertified
   */
  @javax.annotation.Nullable
  public Integer getIsCertified() {
    return isCertified;
  }

  public void setIsCertified(Integer isCertified) {
    this.isCertified = isCertified;
  }


  public Listing lastSeenAt(Integer lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
    return this;
  }

  /**
   * Listing last seen at (most recent) timestamp
   * @return lastSeenAt
   */
  @javax.annotation.Nullable
  public Integer getLastSeenAt() {
    return lastSeenAt;
  }

  public void setLastSeenAt(Integer lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
  }


  public Listing lastSeenAtDate(String lastSeenAtDate) {
    this.lastSeenAtDate = lastSeenAtDate;
    return this;
  }

  /**
   * Listing last seen at (most recent) date
   * @return lastSeenAtDate
   */
  @javax.annotation.Nullable
  public String getLastSeenAtDate() {
    return lastSeenAtDate;
  }

  public void setLastSeenAtDate(String lastSeenAtDate) {
    this.lastSeenAtDate = lastSeenAtDate;
  }


  public Listing leasingOptions(List<ListingLease> leasingOptions) {
    this.leasingOptions = leasingOptions;
    return this;
  }

  public Listing addLeasingOptionsItem(ListingLease leasingOptionsItem) {
    if (this.leasingOptions == null) {
      this.leasingOptions = new ArrayList<>();
    }
    this.leasingOptions.add(leasingOptionsItem);
    return this;
  }

  /**
   * Array of all finance offers for this listing
   * @return leasingOptions
   */
  @javax.annotation.Nullable
  public List<ListingLease> getLeasingOptions() {
    return leasingOptions;
  }

  public void setLeasingOptions(List<ListingLease> leasingOptions) {
    this.leasingOptions = leasingOptions;
  }


  public Listing media(ListingNestMedia media) {
    this.media = media;
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nullable
  public ListingNestMedia getMedia() {
    return media;
  }

  public void setMedia(ListingNestMedia media) {
    this.media = media;
  }


  public Listing miles(Integer miles) {
    this.miles = miles;
    return this;
  }

  /**
   * Odometer reading / reported miles usage for the car
   * @return miles
   */
  @javax.annotation.Nullable
  public Integer getMiles() {
    return miles;
  }

  public void setMiles(Integer miles) {
    this.miles = miles;
  }


  public Listing msrp(Integer msrp) {
    this.msrp = msrp;
    return this;
  }

  /**
   * MSRP for the car
   * @return msrp
   */
  @javax.annotation.Nullable
  public Integer getMsrp() {
    return msrp;
  }

  public void setMsrp(Integer msrp) {
    this.msrp = msrp;
  }


  public Listing price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * Asking price for the car
   * @return price
   */
  @javax.annotation.Nullable
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public Listing priceChangePercent(Double priceChangePercent) {
    this.priceChangePercent = priceChangePercent;
    return this;
  }

  /**
   * Percentage difference between the cars&#39;s current price and ref_price i.e. last reported price
   * @return priceChangePercent
   */
  @javax.annotation.Nullable
  public Double getPriceChangePercent() {
    return priceChangePercent;
  }

  public void setPriceChangePercent(Double priceChangePercent) {
    this.priceChangePercent = priceChangePercent;
  }


  public Listing rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Relative rank of the listing determined by ranking service
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public Listing refMiles(String refMiles) {
    this.refMiles = refMiles;
    return this;
  }

  /**
   * Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date
   * @return refMiles
   */
  @javax.annotation.Nullable
  public String getRefMiles() {
    return refMiles;
  }

  public void setRefMiles(String refMiles) {
    this.refMiles = refMiles;
  }


  public Listing refMilesDt(Integer refMilesDt) {
    this.refMilesDt = refMilesDt;
    return this;
  }

  /**
   * The date at which the last miles was reported online. This is earlier to last_seen_date
   * @return refMilesDt
   */
  @javax.annotation.Nullable
  public Integer getRefMilesDt() {
    return refMilesDt;
  }

  public void setRefMilesDt(Integer refMilesDt) {
    this.refMilesDt = refMilesDt;
  }


  public Listing refPrice(String refPrice) {
    this.refPrice = refPrice;
    return this;
  }

  /**
   * Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date
   * @return refPrice
   */
  @javax.annotation.Nullable
  public String getRefPrice() {
    return refPrice;
  }

  public void setRefPrice(String refPrice) {
    this.refPrice = refPrice;
  }


  public Listing refPriceDt(Integer refPriceDt) {
    this.refPriceDt = refPriceDt;
    return this;
  }

  /**
   * The date at which the last price was reported online. This is earlier to last_seen_date
   * @return refPriceDt
   */
  @javax.annotation.Nullable
  public Integer getRefPriceDt() {
    return refPriceDt;
  }

  public void setRefPriceDt(Integer refPriceDt) {
    this.refPriceDt = refPriceDt;
  }


  public Listing score(Double score) {
    this.score = score;
    return this;
  }

  /**
   * Score of the ranked listing as per the ranking criteria determined by ranking service
   * @return score
   */
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }


  public Listing scrapedAt(Integer scrapedAt) {
    this.scrapedAt = scrapedAt;
    return this;
  }

  /**
   * Listing last seen at date timestamp
   * @return scrapedAt
   */
  @javax.annotation.Nullable
  public Integer getScrapedAt() {
    return scrapedAt;
  }

  public void setScrapedAt(Integer scrapedAt) {
    this.scrapedAt = scrapedAt;
  }


  public Listing scrapedAtDate(String scrapedAtDate) {
    this.scrapedAtDate = scrapedAtDate;
    return this;
  }

  /**
   * Listing last seen at date
   * @return scrapedAtDate
   */
  @javax.annotation.Nullable
  public String getScrapedAtDate() {
    return scrapedAtDate;
  }

  public void setScrapedAtDate(String scrapedAtDate) {
    this.scrapedAtDate = scrapedAtDate;
  }


  public Listing sellerType(String sellerType) {
    this.sellerType = sellerType;
    return this;
  }

  /**
   * Seller type for the car
   * @return sellerType
   */
  @javax.annotation.Nullable
  public String getSellerType() {
    return sellerType;
  }

  public void setSellerType(String sellerType) {
    this.sellerType = sellerType;
  }


  public Listing source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Source domain of the listing
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Listing stockNo(String stockNo) {
    this.stockNo = stockNo;
    return this;
  }

  /**
   * Stock number of car in dealers inventory
   * @return stockNo
   */
  @javax.annotation.Nullable
  public String getStockNo() {
    return stockNo;
  }

  public void setStockNo(String stockNo) {
    this.stockNo = stockNo;
  }


  public Listing vdpUrl(String vdpUrl) {
    this.vdpUrl = vdpUrl;
    return this;
  }

  /**
   * Vehicle Details Page url of the specific car
   * @return vdpUrl
   */
  @javax.annotation.Nullable
  public String getVdpUrl() {
    return vdpUrl;
  }

  public void setVdpUrl(String vdpUrl) {
    this.vdpUrl = vdpUrl;
  }


  public Listing vehicleRegistrationMark(String vehicleRegistrationMark) {
    this.vehicleRegistrationMark = vehicleRegistrationMark;
    return this;
  }

  /**
   *  Vehicle Registration Mark of the car
   * @return vehicleRegistrationMark
   */
  @javax.annotation.Nullable
  public String getVehicleRegistrationMark() {
    return vehicleRegistrationMark;
  }

  public void setVehicleRegistrationMark(String vehicleRegistrationMark) {
    this.vehicleRegistrationMark = vehicleRegistrationMark;
  }


  public Listing vin(String vin) {
    this.vin = vin;
    return this;
  }

  /**
   * VIN for the car
   * @return vin
   */
  @javax.annotation.Nullable
  public String getVin() {
    return vin;
  }

  public void setVin(String vin) {
    this.vin = vin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Listing listing = (Listing) o;
    return Objects.equals(this.baseExtColor, listing.baseExtColor) &&
        Objects.equals(this.baseIntColor, listing.baseIntColor) &&
        Objects.equals(this.build, listing.build) &&
        Objects.equals(this.carfax1Owner, listing.carfax1Owner) &&
        Objects.equals(this.carfaxCleanTitle, listing.carfaxCleanTitle) &&
        Objects.equals(this.dataSource, listing.dataSource) &&
        Objects.equals(this.dealer, listing.dealer) &&
        Objects.equals(this.dom, listing.dom) &&
        Objects.equals(this.dom180, listing.dom180) &&
        Objects.equals(this.domActive, listing.domActive) &&
        Objects.equals(this.exteriorColor, listing.exteriorColor) &&
        Objects.equals(this.extra, listing.extra) &&
        Objects.equals(this.financingOptions, listing.financingOptions) &&
        Objects.equals(this.firstSeenAt, listing.firstSeenAt) &&
        Objects.equals(this.firstSeenAtDate, listing.firstSeenAtDate) &&
        Objects.equals(this.firstSeenAtMc, listing.firstSeenAtMc) &&
        Objects.equals(this.firstSeenAtMcDate, listing.firstSeenAtMcDate) &&
        Objects.equals(this.firstSeenAtSource, listing.firstSeenAtSource) &&
        Objects.equals(this.firstSeenAtSourceDate, listing.firstSeenAtSourceDate) &&
        Objects.equals(this.heading, listing.heading) &&
        Objects.equals(this.id, listing.id) &&
        Objects.equals(this.interiorColor, listing.interiorColor) &&
        Objects.equals(this.inventoryType, listing.inventoryType) &&
        Objects.equals(this.isCertified, listing.isCertified) &&
        Objects.equals(this.lastSeenAt, listing.lastSeenAt) &&
        Objects.equals(this.lastSeenAtDate, listing.lastSeenAtDate) &&
        Objects.equals(this.leasingOptions, listing.leasingOptions) &&
        Objects.equals(this.media, listing.media) &&
        Objects.equals(this.miles, listing.miles) &&
        Objects.equals(this.msrp, listing.msrp) &&
        Objects.equals(this.price, listing.price) &&
        Objects.equals(this.priceChangePercent, listing.priceChangePercent) &&
        Objects.equals(this.rank, listing.rank) &&
        Objects.equals(this.refMiles, listing.refMiles) &&
        Objects.equals(this.refMilesDt, listing.refMilesDt) &&
        Objects.equals(this.refPrice, listing.refPrice) &&
        Objects.equals(this.refPriceDt, listing.refPriceDt) &&
        Objects.equals(this.score, listing.score) &&
        Objects.equals(this.scrapedAt, listing.scrapedAt) &&
        Objects.equals(this.scrapedAtDate, listing.scrapedAtDate) &&
        Objects.equals(this.sellerType, listing.sellerType) &&
        Objects.equals(this.source, listing.source) &&
        Objects.equals(this.stockNo, listing.stockNo) &&
        Objects.equals(this.vdpUrl, listing.vdpUrl) &&
        Objects.equals(this.vehicleRegistrationMark, listing.vehicleRegistrationMark) &&
        Objects.equals(this.vin, listing.vin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseExtColor, baseIntColor, build, carfax1Owner, carfaxCleanTitle, dataSource, dealer, dom, dom180, domActive, exteriorColor, extra, financingOptions, firstSeenAt, firstSeenAtDate, firstSeenAtMc, firstSeenAtMcDate, firstSeenAtSource, firstSeenAtSourceDate, heading, id, interiorColor, inventoryType, isCertified, lastSeenAt, lastSeenAtDate, leasingOptions, media, miles, msrp, price, priceChangePercent, rank, refMiles, refMilesDt, refPrice, refPriceDt, score, scrapedAt, scrapedAtDate, sellerType, source, stockNo, vdpUrl, vehicleRegistrationMark, vin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Listing {\n");
    sb.append("    baseExtColor: ").append(toIndentedString(baseExtColor)).append("\n");
    sb.append("    baseIntColor: ").append(toIndentedString(baseIntColor)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    carfax1Owner: ").append(toIndentedString(carfax1Owner)).append("\n");
    sb.append("    carfaxCleanTitle: ").append(toIndentedString(carfaxCleanTitle)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    dealer: ").append(toIndentedString(dealer)).append("\n");
    sb.append("    dom: ").append(toIndentedString(dom)).append("\n");
    sb.append("    dom180: ").append(toIndentedString(dom180)).append("\n");
    sb.append("    domActive: ").append(toIndentedString(domActive)).append("\n");
    sb.append("    exteriorColor: ").append(toIndentedString(exteriorColor)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    financingOptions: ").append(toIndentedString(financingOptions)).append("\n");
    sb.append("    firstSeenAt: ").append(toIndentedString(firstSeenAt)).append("\n");
    sb.append("    firstSeenAtDate: ").append(toIndentedString(firstSeenAtDate)).append("\n");
    sb.append("    firstSeenAtMc: ").append(toIndentedString(firstSeenAtMc)).append("\n");
    sb.append("    firstSeenAtMcDate: ").append(toIndentedString(firstSeenAtMcDate)).append("\n");
    sb.append("    firstSeenAtSource: ").append(toIndentedString(firstSeenAtSource)).append("\n");
    sb.append("    firstSeenAtSourceDate: ").append(toIndentedString(firstSeenAtSourceDate)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interiorColor: ").append(toIndentedString(interiorColor)).append("\n");
    sb.append("    inventoryType: ").append(toIndentedString(inventoryType)).append("\n");
    sb.append("    isCertified: ").append(toIndentedString(isCertified)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("    lastSeenAtDate: ").append(toIndentedString(lastSeenAtDate)).append("\n");
    sb.append("    leasingOptions: ").append(toIndentedString(leasingOptions)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    miles: ").append(toIndentedString(miles)).append("\n");
    sb.append("    msrp: ").append(toIndentedString(msrp)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceChangePercent: ").append(toIndentedString(priceChangePercent)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    refMiles: ").append(toIndentedString(refMiles)).append("\n");
    sb.append("    refMilesDt: ").append(toIndentedString(refMilesDt)).append("\n");
    sb.append("    refPrice: ").append(toIndentedString(refPrice)).append("\n");
    sb.append("    refPriceDt: ").append(toIndentedString(refPriceDt)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    scrapedAt: ").append(toIndentedString(scrapedAt)).append("\n");
    sb.append("    scrapedAtDate: ").append(toIndentedString(scrapedAtDate)).append("\n");
    sb.append("    sellerType: ").append(toIndentedString(sellerType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    stockNo: ").append(toIndentedString(stockNo)).append("\n");
    sb.append("    vdpUrl: ").append(toIndentedString(vdpUrl)).append("\n");
    sb.append("    vehicleRegistrationMark: ").append(toIndentedString(vehicleRegistrationMark)).append("\n");
    sb.append("    vin: ").append(toIndentedString(vin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_ext_color");
    openapiFields.add("base_int_color");
    openapiFields.add("build");
    openapiFields.add("carfax_1_owner");
    openapiFields.add("carfax_clean_title");
    openapiFields.add("data_source");
    openapiFields.add("dealer");
    openapiFields.add("dom");
    openapiFields.add("dom_180");
    openapiFields.add("dom_active");
    openapiFields.add("exterior_color");
    openapiFields.add("extra");
    openapiFields.add("financing_options");
    openapiFields.add("first_seen_at");
    openapiFields.add("first_seen_at_date");
    openapiFields.add("first_seen_at_mc");
    openapiFields.add("first_seen_at_mc_date");
    openapiFields.add("first_seen_at_source");
    openapiFields.add("first_seen_at_source_date");
    openapiFields.add("heading");
    openapiFields.add("id");
    openapiFields.add("interior_color");
    openapiFields.add("inventory_type");
    openapiFields.add("is_certified");
    openapiFields.add("last_seen_at");
    openapiFields.add("last_seen_at_date");
    openapiFields.add("leasing_options");
    openapiFields.add("media");
    openapiFields.add("miles");
    openapiFields.add("msrp");
    openapiFields.add("price");
    openapiFields.add("price_change_percent");
    openapiFields.add("rank");
    openapiFields.add("ref_miles");
    openapiFields.add("ref_miles_dt");
    openapiFields.add("ref_price");
    openapiFields.add("ref_price_dt");
    openapiFields.add("score");
    openapiFields.add("scraped_at");
    openapiFields.add("scraped_at_date");
    openapiFields.add("seller_type");
    openapiFields.add("source");
    openapiFields.add("stock_no");
    openapiFields.add("vdp_url");
    openapiFields.add("vehicle_registration_mark");
    openapiFields.add("vin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Listing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Listing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Listing is not found in the empty JSON string", Listing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Listing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Listing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base_ext_color") != null && !jsonObj.get("base_ext_color").isJsonNull()) && !jsonObj.get("base_ext_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_ext_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_ext_color").toString()));
      }
      if ((jsonObj.get("base_int_color") != null && !jsonObj.get("base_int_color").isJsonNull()) && !jsonObj.get("base_int_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_int_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_int_color").toString()));
      }
      // validate the optional field `build`
      if (jsonObj.get("build") != null && !jsonObj.get("build").isJsonNull()) {
        Build.validateJsonElement(jsonObj.get("build"));
      }
      if ((jsonObj.get("data_source") != null && !jsonObj.get("data_source").isJsonNull()) && !jsonObj.get("data_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_source").toString()));
      }
      // validate the optional field `dealer`
      if (jsonObj.get("dealer") != null && !jsonObj.get("dealer").isJsonNull()) {
        NestDealer.validateJsonElement(jsonObj.get("dealer"));
      }
      if ((jsonObj.get("exterior_color") != null && !jsonObj.get("exterior_color").isJsonNull()) && !jsonObj.get("exterior_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exterior_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exterior_color").toString()));
      }
      // validate the optional field `extra`
      if (jsonObj.get("extra") != null && !jsonObj.get("extra").isJsonNull()) {
        ListingNestExtraAttributes.validateJsonElement(jsonObj.get("extra"));
      }
      if (jsonObj.get("financing_options") != null && !jsonObj.get("financing_options").isJsonNull()) {
        JsonArray jsonArrayfinancingOptions = jsonObj.getAsJsonArray("financing_options");
        if (jsonArrayfinancingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("financing_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `financing_options` to be an array in the JSON string but got `%s`", jsonObj.get("financing_options").toString()));
          }

          // validate the optional field `financing_options` (array)
          for (int i = 0; i < jsonArrayfinancingOptions.size(); i++) {
            ListingFinance.validateJsonElement(jsonArrayfinancingOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("first_seen_at_date") != null && !jsonObj.get("first_seen_at_date").isJsonNull()) && !jsonObj.get("first_seen_at_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_seen_at_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_seen_at_date").toString()));
      }
      if ((jsonObj.get("first_seen_at_mc_date") != null && !jsonObj.get("first_seen_at_mc_date").isJsonNull()) && !jsonObj.get("first_seen_at_mc_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_seen_at_mc_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_seen_at_mc_date").toString()));
      }
      if ((jsonObj.get("first_seen_at_source_date") != null && !jsonObj.get("first_seen_at_source_date").isJsonNull()) && !jsonObj.get("first_seen_at_source_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_seen_at_source_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_seen_at_source_date").toString()));
      }
      if ((jsonObj.get("heading") != null && !jsonObj.get("heading").isJsonNull()) && !jsonObj.get("heading").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heading` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heading").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("interior_color") != null && !jsonObj.get("interior_color").isJsonNull()) && !jsonObj.get("interior_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interior_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interior_color").toString()));
      }
      if ((jsonObj.get("inventory_type") != null && !jsonObj.get("inventory_type").isJsonNull()) && !jsonObj.get("inventory_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventory_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventory_type").toString()));
      }
      if ((jsonObj.get("last_seen_at_date") != null && !jsonObj.get("last_seen_at_date").isJsonNull()) && !jsonObj.get("last_seen_at_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_seen_at_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_seen_at_date").toString()));
      }
      if (jsonObj.get("leasing_options") != null && !jsonObj.get("leasing_options").isJsonNull()) {
        JsonArray jsonArrayleasingOptions = jsonObj.getAsJsonArray("leasing_options");
        if (jsonArrayleasingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("leasing_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `leasing_options` to be an array in the JSON string but got `%s`", jsonObj.get("leasing_options").toString()));
          }

          // validate the optional field `leasing_options` (array)
          for (int i = 0; i < jsonArrayleasingOptions.size(); i++) {
            ListingLease.validateJsonElement(jsonArrayleasingOptions.get(i));
          };
        }
      }
      // validate the optional field `media`
      if (jsonObj.get("media") != null && !jsonObj.get("media").isJsonNull()) {
        ListingNestMedia.validateJsonElement(jsonObj.get("media"));
      }
      if ((jsonObj.get("ref_miles") != null && !jsonObj.get("ref_miles").isJsonNull()) && !jsonObj.get("ref_miles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref_miles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref_miles").toString()));
      }
      if ((jsonObj.get("ref_price") != null && !jsonObj.get("ref_price").isJsonNull()) && !jsonObj.get("ref_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref_price").toString()));
      }
      if ((jsonObj.get("scraped_at_date") != null && !jsonObj.get("scraped_at_date").isJsonNull()) && !jsonObj.get("scraped_at_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scraped_at_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scraped_at_date").toString()));
      }
      if ((jsonObj.get("seller_type") != null && !jsonObj.get("seller_type").isJsonNull()) && !jsonObj.get("seller_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_type").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("stock_no") != null && !jsonObj.get("stock_no").isJsonNull()) && !jsonObj.get("stock_no").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stock_no` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stock_no").toString()));
      }
      if ((jsonObj.get("vdp_url") != null && !jsonObj.get("vdp_url").isJsonNull()) && !jsonObj.get("vdp_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vdp_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vdp_url").toString()));
      }
      if ((jsonObj.get("vehicle_registration_mark") != null && !jsonObj.get("vehicle_registration_mark").isJsonNull()) && !jsonObj.get("vehicle_registration_mark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_registration_mark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_registration_mark").toString()));
      }
      if ((jsonObj.get("vin") != null && !jsonObj.get("vin").isJsonNull()) && !jsonObj.get("vin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Listing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Listing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Listing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Listing.class));

       return (TypeAdapter<T>) new TypeAdapter<Listing>() {
           @Override
           public void write(JsonWriter out, Listing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Listing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Listing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Listing
   * @throws IOException if the JSON string is invalid with respect to Listing
   */
  public static Listing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Listing.class);
  }

  /**
   * Convert an instance of Listing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

