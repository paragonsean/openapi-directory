/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the NeoVIN specification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NeoVIN {
  public static final String SERIALIZED_NAME_AVAILABLE_OPTIONS_DETAILS = "available_options_details";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_OPTIONS_DETAILS)
  private Object availableOptionsDetails;

  public static final String SERIALIZED_NAME_BODY_SUBTYPE = "body_subtype";
  @SerializedName(SERIALIZED_NAME_BODY_SUBTYPE)
  private String bodySubtype;

  public static final String SERIALIZED_NAME_BODY_TYPE = "body_type";
  @SerializedName(SERIALIZED_NAME_BODY_TYPE)
  private String bodyType;

  public static final String SERIALIZED_NAME_CITY_MPG = "city_mpg";
  @SerializedName(SERIALIZED_NAME_CITY_MPG)
  private Double cityMpg;

  public static final String SERIALIZED_NAME_COMBINED_MSRP = "combined_msrp";
  @SerializedName(SERIALIZED_NAME_COMBINED_MSRP)
  private Double combinedMsrp;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Integer createdAt;

  public static final String SERIALIZED_NAME_CREATED_AT_DATE = "created_at_date";
  @SerializedName(SERIALIZED_NAME_CREATED_AT_DATE)
  private String createdAtDate;

  public static final String SERIALIZED_NAME_DECODE_VERSION = "decode_version";
  @SerializedName(SERIALIZED_NAME_DECODE_VERSION)
  private Integer decodeVersion;

  public static final String SERIALIZED_NAME_DELIVERY_CHARGES = "delivery_charges";
  @SerializedName(SERIALIZED_NAME_DELIVERY_CHARGES)
  private Double deliveryCharges;

  public static final String SERIALIZED_NAME_DOORS = "doors";
  @SerializedName(SERIALIZED_NAME_DOORS)
  private Integer doors;

  public static final String SERIALIZED_NAME_DRIVETRAIN = "drivetrain";
  @SerializedName(SERIALIZED_NAME_DRIVETRAIN)
  private String drivetrain;

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_EXTERIOR_COLOR = "exterior_color";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_COLOR)
  private Object exteriorColor;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private Object features;

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuel_type";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private String fuelType;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Double height;

  public static final String SERIALIZED_NAME_HIGHWAY_MPG = "highway_mpg";
  @SerializedName(SERIALIZED_NAME_HIGHWAY_MPG)
  private Double highwayMpg;

  public static final String SERIALIZED_NAME_INSTALLED_EQUIPMENT = "installed_equipment";
  @SerializedName(SERIALIZED_NAME_INSTALLED_EQUIPMENT)
  private Object installedEquipment;

  public static final String SERIALIZED_NAME_INSTALLED_OPTIONS_DETAILS = "installed_options_details";
  @SerializedName(SERIALIZED_NAME_INSTALLED_OPTIONS_DETAILS)
  private Object installedOptionsDetails;

  public static final String SERIALIZED_NAME_INSTALLED_OPTIONS_MSRP = "installed_options_msrp";
  @SerializedName(SERIALIZED_NAME_INSTALLED_OPTIONS_MSRP)
  private Double installedOptionsMsrp;

  public static final String SERIALIZED_NAME_INTERIOR_COLOR = "interior_color";
  @SerializedName(SERIALIZED_NAME_INTERIOR_COLOR)
  private Object interiorColor;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Double length;

  public static final String SERIALIZED_NAME_LISTING_CONFIDENCE = "listing_confidence";
  @SerializedName(SERIALIZED_NAME_LISTING_CONFIDENCE)
  private String listingConfidence;

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private String make;

  public static final String SERIALIZED_NAME_MANUFACTURER_CODE = "manufacturer_code";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_CODE)
  private String manufacturerCode;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_MSRP = "msrp";
  @SerializedName(SERIALIZED_NAME_MSRP)
  private Double msrp;

  public static final String SERIALIZED_NAME_OPTIONS_PACKAGES = "options_packages";
  @SerializedName(SERIALIZED_NAME_OPTIONS_PACKAGES)
  private String optionsPackages;

  public static final String SERIALIZED_NAME_PACKAGE_CODE = "package_code";
  @SerializedName(SERIALIZED_NAME_PACKAGE_CODE)
  private String packageCode;

  public static final String SERIALIZED_NAME_PACKAGE_DESCRIPTION = "package_description";
  @SerializedName(SERIALIZED_NAME_PACKAGE_DESCRIPTION)
  private String packageDescription;

  public static final String SERIALIZED_NAME_SEATING_CAPACITY = "seating_capacity";
  @SerializedName(SERIALIZED_NAME_SEATING_CAPACITY)
  private Double seatingCapacity;

  public static final String SERIALIZED_NAME_SQUISH_VIN = "squish_vin";
  @SerializedName(SERIALIZED_NAME_SQUISH_VIN)
  private String squishVin;

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private String transmission;

  public static final String SERIALIZED_NAME_TRANSMISSION_CONFIDENCE = "transmission_confidence";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_CONFIDENCE)
  private String transmissionConfidence;

  public static final String SERIALIZED_NAME_TRANSMISSION_DESCRIPTION = "transmission_description";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_DESCRIPTION)
  private String transmissionDescription;

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private String trim;

  public static final String SERIALIZED_NAME_TRIM_CONFIDENCE = "trim_confidence";
  @SerializedName(SERIALIZED_NAME_TRIM_CONFIDENCE)
  private String trimConfidence;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Integer updatedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT_DATE = "updated_at_date";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT_DATE)
  private String updatedAtDate;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VERSION_CONFIDENCE = "version_confidence";
  @SerializedName(SERIALIZED_NAME_VERSION_CONFIDENCE)
  private String versionConfidence;

  public static final String SERIALIZED_NAME_VIN = "vin";
  @SerializedName(SERIALIZED_NAME_VIN)
  private String vin;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Double width;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public NeoVIN() {
  }

  public NeoVIN availableOptionsDetails(Object availableOptionsDetails) {
    this.availableOptionsDetails = availableOptionsDetails;
    return this;
  }

  /**
   * Listing of all options and packages with detailed equipment identified that could have been installed on the vehicle
   * @return availableOptionsDetails
   */
  @javax.annotation.Nullable
  public Object getAvailableOptionsDetails() {
    return availableOptionsDetails;
  }

  public void setAvailableOptionsDetails(Object availableOptionsDetails) {
    this.availableOptionsDetails = availableOptionsDetails;
  }


  public NeoVIN bodySubtype(String bodySubtype) {
    this.bodySubtype = bodySubtype;
    return this;
  }

  /**
   * Body subtype (cab) of the vehicle
   * @return bodySubtype
   */
  @javax.annotation.Nullable
  public String getBodySubtype() {
    return bodySubtype;
  }

  public void setBodySubtype(String bodySubtype) {
    this.bodySubtype = bodySubtype;
  }


  public NeoVIN bodyType(String bodyType) {
    this.bodyType = bodyType;
    return this;
  }

  /**
   * Body type of the vehicle
   * @return bodyType
   */
  @javax.annotation.Nullable
  public String getBodyType() {
    return bodyType;
  }

  public void setBodyType(String bodyType) {
    this.bodyType = bodyType;
  }


  public NeoVIN cityMpg(Double cityMpg) {
    this.cityMpg = cityMpg;
    return this;
  }

  /**
   * City miles per gallon
   * @return cityMpg
   */
  @javax.annotation.Nullable
  public Double getCityMpg() {
    return cityMpg;
  }

  public void setCityMpg(Double cityMpg) {
    this.cityMpg = cityMpg;
  }


  public NeoVIN combinedMsrp(Double combinedMsrp) {
    this.combinedMsrp = combinedMsrp;
    return this;
  }

  /**
   * Calculated combination of base MSRP with the delivery charges and the installed options MSRP
   * @return combinedMsrp
   */
  @javax.annotation.Nullable
  public Double getCombinedMsrp() {
    return combinedMsrp;
  }

  public void setCombinedMsrp(Double combinedMsrp) {
    this.combinedMsrp = combinedMsrp;
  }


  public NeoVIN createdAt(Integer createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * vin first decoded at timestamp
   * @return createdAt
   */
  @javax.annotation.Nullable
  public Integer getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public NeoVIN createdAtDate(String createdAtDate) {
    this.createdAtDate = createdAtDate;
    return this;
  }

  /**
   * vin first decoded at date
   * @return createdAtDate
   */
  @javax.annotation.Nullable
  public String getCreatedAtDate() {
    return createdAtDate;
  }

  public void setCreatedAtDate(String createdAtDate) {
    this.createdAtDate = createdAtDate;
  }


  public NeoVIN decodeVersion(Integer decodeVersion) {
    this.decodeVersion = decodeVersion;
    return this;
  }

  /**
   * This will represent if previous vin decode values are updated
   * @return decodeVersion
   */
  @javax.annotation.Nullable
  public Integer getDecodeVersion() {
    return decodeVersion;
  }

  public void setDecodeVersion(Integer decodeVersion) {
    this.decodeVersion = decodeVersion;
  }


  public NeoVIN deliveryCharges(Double deliveryCharges) {
    this.deliveryCharges = deliveryCharges;
    return this;
  }

  /**
   * Manufacturer defined delivery charges
   * @return deliveryCharges
   */
  @javax.annotation.Nullable
  public Double getDeliveryCharges() {
    return deliveryCharges;
  }

  public void setDeliveryCharges(Double deliveryCharges) {
    this.deliveryCharges = deliveryCharges;
  }


  public NeoVIN doors(Integer doors) {
    this.doors = doors;
    return this;
  }

  /**
   * Number of doors on the vehicle
   * @return doors
   */
  @javax.annotation.Nullable
  public Integer getDoors() {
    return doors;
  }

  public void setDoors(Integer doors) {
    this.doors = doors;
  }


  public NeoVIN drivetrain(String drivetrain) {
    this.drivetrain = drivetrain;
    return this;
  }

  /**
   * Identified drivetrain of the vehicle
   * @return drivetrain
   */
  @javax.annotation.Nullable
  public String getDrivetrain() {
    return drivetrain;
  }

  public void setDrivetrain(String drivetrain) {
    this.drivetrain = drivetrain;
  }


  public NeoVIN engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Base identification of the number of cylinders and configuration of the installed engine on the vehicle
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public NeoVIN exteriorColor(Object exteriorColor) {
    this.exteriorColor = exteriorColor;
    return this;
  }

  /**
   * The manufacturer defined option code and name for the exterior color of the vehicle
   * @return exteriorColor
   */
  @javax.annotation.Nullable
  public Object getExteriorColor() {
    return exteriorColor;
  }

  public void setExteriorColor(Object exteriorColor) {
    this.exteriorColor = exteriorColor;
  }


  public NeoVIN features(Object features) {
    this.features = features;
    return this;
  }

  /**
   * Normalized feature set of equipment identified that have been identified as installed on the vehicle, including whether that item was standard to the version of the vehicle or was added as an installed option
   * @return features
   */
  @javax.annotation.Nullable
  public Object getFeatures() {
    return features;
  }

  public void setFeatures(Object features) {
    this.features = features;
  }


  public NeoVIN fuelType(String fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  /**
   * Identified Fuel type of the vehicle
   * @return fuelType
   */
  @javax.annotation.Nullable
  public String getFuelType() {
    return fuelType;
  }

  public void setFuelType(String fuelType) {
    this.fuelType = fuelType;
  }


  public NeoVIN height(Double height) {
    this.height = height;
    return this;
  }

  /**
   * Overall height of the vehicle (in)
   * @return height
   */
  @javax.annotation.Nullable
  public Double getHeight() {
    return height;
  }

  public void setHeight(Double height) {
    this.height = height;
  }


  public NeoVIN highwayMpg(Double highwayMpg) {
    this.highwayMpg = highwayMpg;
    return this;
  }

  /**
   * Highway miles per gallon
   * @return highwayMpg
   */
  @javax.annotation.Nullable
  public Double getHighwayMpg() {
    return highwayMpg;
  }

  public void setHighwayMpg(Double highwayMpg) {
    this.highwayMpg = highwayMpg;
  }


  public NeoVIN installedEquipment(Object installedEquipment) {
    this.installedEquipment = installedEquipment;
    return this;
  }

  /**
   * Detailed equipment identified as installed on the vehicle, including whether that item was standard to the version of the vehicle or was added as an installed option
   * @return installedEquipment
   */
  @javax.annotation.Nullable
  public Object getInstalledEquipment() {
    return installedEquipment;
  }

  public void setInstalledEquipment(Object installedEquipment) {
    this.installedEquipment = installedEquipment;
  }


  public NeoVIN installedOptionsDetails(Object installedOptionsDetails) {
    this.installedOptionsDetails = installedOptionsDetails;
    return this;
  }

  /**
   * Listing of all options and packages with detailed equipment identified that have been identified as installed on the vehicle
   * @return installedOptionsDetails
   */
  @javax.annotation.Nullable
  public Object getInstalledOptionsDetails() {
    return installedOptionsDetails;
  }

  public void setInstalledOptionsDetails(Object installedOptionsDetails) {
    this.installedOptionsDetails = installedOptionsDetails;
  }


  public NeoVIN installedOptionsMsrp(Double installedOptionsMsrp) {
    this.installedOptionsMsrp = installedOptionsMsrp;
    return this;
  }

  /**
   * Calculated combination of the MSRP for the installed options and packages
   * @return installedOptionsMsrp
   */
  @javax.annotation.Nullable
  public Double getInstalledOptionsMsrp() {
    return installedOptionsMsrp;
  }

  public void setInstalledOptionsMsrp(Double installedOptionsMsrp) {
    this.installedOptionsMsrp = installedOptionsMsrp;
  }


  public NeoVIN interiorColor(Object interiorColor) {
    this.interiorColor = interiorColor;
    return this;
  }

  /**
   * The manufacturer defined option code and name for the interior color of the vehicle
   * @return interiorColor
   */
  @javax.annotation.Nullable
  public Object getInteriorColor() {
    return interiorColor;
  }

  public void setInteriorColor(Object interiorColor) {
    this.interiorColor = interiorColor;
  }


  public NeoVIN length(Double length) {
    this.length = length;
    return this;
  }

  /**
   * Overall length of the vehicle (in)
   * @return length
   */
  @javax.annotation.Nullable
  public Double getLength() {
    return length;
  }

  public void setLength(Double length) {
    this.length = length;
  }


  public NeoVIN listingConfidence(String listingConfidence) {
    this.listingConfidence = listingConfidence;
    return this;
  }

  /**
   * Identification of primary source data used for trim and installed colors and options
   * @return listingConfidence
   */
  @javax.annotation.Nullable
  public String getListingConfidence() {
    return listingConfidence;
  }

  public void setListingConfidence(String listingConfidence) {
    this.listingConfidence = listingConfidence;
  }


  public NeoVIN make(String make) {
    this.make = make;
    return this;
  }

  /**
   * Make of the vehicle
   * @return make
   */
  @javax.annotation.Nullable
  public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }


  public NeoVIN manufacturerCode(String manufacturerCode) {
    this.manufacturerCode = manufacturerCode;
    return this;
  }

  /**
   * Manufacturer code of the vehicle
   * @return manufacturerCode
   */
  @javax.annotation.Nullable
  public String getManufacturerCode() {
    return manufacturerCode;
  }

  public void setManufacturerCode(String manufacturerCode) {
    this.manufacturerCode = manufacturerCode;
  }


  public NeoVIN model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Model of the vehicle
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public NeoVIN msrp(Double msrp) {
    this.msrp = msrp;
    return this;
  }

  /**
   * Base MSRP as defined for the defined version of that vehicle with no options installed
   * @return msrp
   */
  @javax.annotation.Nullable
  public Double getMsrp() {
    return msrp;
  }

  public void setMsrp(Double msrp) {
    this.msrp = msrp;
  }


  public NeoVIN optionsPackages(String optionsPackages) {
    this.optionsPackages = optionsPackages;
    return this;
  }

  /**
   * Option and package codes installed on the vehicle
   * @return optionsPackages
   */
  @javax.annotation.Nullable
  public String getOptionsPackages() {
    return optionsPackages;
  }

  public void setOptionsPackages(String optionsPackages) {
    this.optionsPackages = optionsPackages;
  }


  public NeoVIN packageCode(String packageCode) {
    this.packageCode = packageCode;
    return this;
  }

  /**
   * Extracted manufacturer package code related to selection of the vehicle version (where available / applicable)
   * @return packageCode
   */
  @javax.annotation.Nullable
  public String getPackageCode() {
    return packageCode;
  }

  public void setPackageCode(String packageCode) {
    this.packageCode = packageCode;
  }


  public NeoVIN packageDescription(String packageDescription) {
    this.packageDescription = packageDescription;
    return this;
  }

  /**
   * Extracted manufacturer package code description (where available / applicable)
   * @return packageDescription
   */
  @javax.annotation.Nullable
  public String getPackageDescription() {
    return packageDescription;
  }

  public void setPackageDescription(String packageDescription) {
    this.packageDescription = packageDescription;
  }


  public NeoVIN seatingCapacity(Double seatingCapacity) {
    this.seatingCapacity = seatingCapacity;
    return this;
  }

  /**
   * Identified seating capacity of the vehicle
   * @return seatingCapacity
   */
  @javax.annotation.Nullable
  public Double getSeatingCapacity() {
    return seatingCapacity;
  }

  public void setSeatingCapacity(Double seatingCapacity) {
    this.seatingCapacity = seatingCapacity;
  }


  public NeoVIN squishVin(String squishVin) {
    this.squishVin = squishVin;
    return this;
  }

  /**
   * Vin prefix identification used in the decoding of the vehicle
   * @return squishVin
   */
  @javax.annotation.Nullable
  public String getSquishVin() {
    return squishVin;
  }

  public void setSquishVin(String squishVin) {
    this.squishVin = squishVin;
  }


  public NeoVIN transmission(String transmission) {
    this.transmission = transmission;
    return this;
  }

  /**
   * Identified installed Transmission of the vehicle
   * @return transmission
   */
  @javax.annotation.Nullable
  public String getTransmission() {
    return transmission;
  }

  public void setTransmission(String transmission) {
    this.transmission = transmission;
  }


  public NeoVIN transmissionConfidence(String transmissionConfidence) {
    this.transmissionConfidence = transmissionConfidence;
    return this;
  }

  /**
   * Identification of confidence related to the selection of the installed transmission
   * @return transmissionConfidence
   */
  @javax.annotation.Nullable
  public String getTransmissionConfidence() {
    return transmissionConfidence;
  }

  public void setTransmissionConfidence(String transmissionConfidence) {
    this.transmissionConfidence = transmissionConfidence;
  }


  public NeoVIN transmissionDescription(String transmissionDescription) {
    this.transmissionDescription = transmissionDescription;
    return this;
  }

  /**
   * The description of the installed transmission
   * @return transmissionDescription
   */
  @javax.annotation.Nullable
  public String getTransmissionDescription() {
    return transmissionDescription;
  }

  public void setTransmissionDescription(String transmissionDescription) {
    this.transmissionDescription = transmissionDescription;
  }


  public NeoVIN trim(String trim) {
    this.trim = trim;
    return this;
  }

  /**
   * Trim of the vehicle
   * @return trim
   */
  @javax.annotation.Nullable
  public String getTrim() {
    return trim;
  }

  public void setTrim(String trim) {
    this.trim = trim;
  }


  public NeoVIN trimConfidence(String trimConfidence) {
    this.trimConfidence = trimConfidence;
    return this;
  }

  /**
   * Identification of confidence related to the selection of the trim
   * @return trimConfidence
   */
  @javax.annotation.Nullable
  public String getTrimConfidence() {
    return trimConfidence;
  }

  public void setTrimConfidence(String trimConfidence) {
    this.trimConfidence = trimConfidence;
  }


  public NeoVIN updatedAt(Integer updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * vin last decoded at timestamp
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public Integer getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Integer updatedAt) {
    this.updatedAt = updatedAt;
  }


  public NeoVIN updatedAtDate(String updatedAtDate) {
    this.updatedAtDate = updatedAtDate;
    return this;
  }

  /**
   * vin last decoded at date
   * @return updatedAtDate
   */
  @javax.annotation.Nullable
  public String getUpdatedAtDate() {
    return updatedAtDate;
  }

  public void setUpdatedAtDate(String updatedAtDate) {
    this.updatedAtDate = updatedAtDate;
  }


  public NeoVIN version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version Name of the vehicle
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public NeoVIN versionConfidence(String versionConfidence) {
    this.versionConfidence = versionConfidence;
    return this;
  }

  /**
   * Identification of confidence related to the selection of the vehicle version
   * @return versionConfidence
   */
  @javax.annotation.Nullable
  public String getVersionConfidence() {
    return versionConfidence;
  }

  public void setVersionConfidence(String versionConfidence) {
    this.versionConfidence = versionConfidence;
  }


  public NeoVIN vin(String vin) {
    this.vin = vin;
    return this;
  }

  /**
   * 17 char long VIN of the vehicle
   * @return vin
   */
  @javax.annotation.Nullable
  public String getVin() {
    return vin;
  }

  public void setVin(String vin) {
    this.vin = vin;
  }


  public NeoVIN weight(Double weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Gross vehicle weight (lbs)
   * @return weight
   */
  @javax.annotation.Nullable
  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }


  public NeoVIN width(Double width) {
    this.width = width;
    return this;
  }

  /**
   * Overall width of the vehicle (in)
   * @return width
   */
  @javax.annotation.Nullable
  public Double getWidth() {
    return width;
  }

  public void setWidth(Double width) {
    this.width = width;
  }


  public NeoVIN year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Model Year of the vehicle
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NeoVIN neoVIN = (NeoVIN) o;
    return Objects.equals(this.availableOptionsDetails, neoVIN.availableOptionsDetails) &&
        Objects.equals(this.bodySubtype, neoVIN.bodySubtype) &&
        Objects.equals(this.bodyType, neoVIN.bodyType) &&
        Objects.equals(this.cityMpg, neoVIN.cityMpg) &&
        Objects.equals(this.combinedMsrp, neoVIN.combinedMsrp) &&
        Objects.equals(this.createdAt, neoVIN.createdAt) &&
        Objects.equals(this.createdAtDate, neoVIN.createdAtDate) &&
        Objects.equals(this.decodeVersion, neoVIN.decodeVersion) &&
        Objects.equals(this.deliveryCharges, neoVIN.deliveryCharges) &&
        Objects.equals(this.doors, neoVIN.doors) &&
        Objects.equals(this.drivetrain, neoVIN.drivetrain) &&
        Objects.equals(this.engine, neoVIN.engine) &&
        Objects.equals(this.exteriorColor, neoVIN.exteriorColor) &&
        Objects.equals(this.features, neoVIN.features) &&
        Objects.equals(this.fuelType, neoVIN.fuelType) &&
        Objects.equals(this.height, neoVIN.height) &&
        Objects.equals(this.highwayMpg, neoVIN.highwayMpg) &&
        Objects.equals(this.installedEquipment, neoVIN.installedEquipment) &&
        Objects.equals(this.installedOptionsDetails, neoVIN.installedOptionsDetails) &&
        Objects.equals(this.installedOptionsMsrp, neoVIN.installedOptionsMsrp) &&
        Objects.equals(this.interiorColor, neoVIN.interiorColor) &&
        Objects.equals(this.length, neoVIN.length) &&
        Objects.equals(this.listingConfidence, neoVIN.listingConfidence) &&
        Objects.equals(this.make, neoVIN.make) &&
        Objects.equals(this.manufacturerCode, neoVIN.manufacturerCode) &&
        Objects.equals(this.model, neoVIN.model) &&
        Objects.equals(this.msrp, neoVIN.msrp) &&
        Objects.equals(this.optionsPackages, neoVIN.optionsPackages) &&
        Objects.equals(this.packageCode, neoVIN.packageCode) &&
        Objects.equals(this.packageDescription, neoVIN.packageDescription) &&
        Objects.equals(this.seatingCapacity, neoVIN.seatingCapacity) &&
        Objects.equals(this.squishVin, neoVIN.squishVin) &&
        Objects.equals(this.transmission, neoVIN.transmission) &&
        Objects.equals(this.transmissionConfidence, neoVIN.transmissionConfidence) &&
        Objects.equals(this.transmissionDescription, neoVIN.transmissionDescription) &&
        Objects.equals(this.trim, neoVIN.trim) &&
        Objects.equals(this.trimConfidence, neoVIN.trimConfidence) &&
        Objects.equals(this.updatedAt, neoVIN.updatedAt) &&
        Objects.equals(this.updatedAtDate, neoVIN.updatedAtDate) &&
        Objects.equals(this.version, neoVIN.version) &&
        Objects.equals(this.versionConfidence, neoVIN.versionConfidence) &&
        Objects.equals(this.vin, neoVIN.vin) &&
        Objects.equals(this.weight, neoVIN.weight) &&
        Objects.equals(this.width, neoVIN.width) &&
        Objects.equals(this.year, neoVIN.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableOptionsDetails, bodySubtype, bodyType, cityMpg, combinedMsrp, createdAt, createdAtDate, decodeVersion, deliveryCharges, doors, drivetrain, engine, exteriorColor, features, fuelType, height, highwayMpg, installedEquipment, installedOptionsDetails, installedOptionsMsrp, interiorColor, length, listingConfidence, make, manufacturerCode, model, msrp, optionsPackages, packageCode, packageDescription, seatingCapacity, squishVin, transmission, transmissionConfidence, transmissionDescription, trim, trimConfidence, updatedAt, updatedAtDate, version, versionConfidence, vin, weight, width, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NeoVIN {\n");
    sb.append("    availableOptionsDetails: ").append(toIndentedString(availableOptionsDetails)).append("\n");
    sb.append("    bodySubtype: ").append(toIndentedString(bodySubtype)).append("\n");
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    cityMpg: ").append(toIndentedString(cityMpg)).append("\n");
    sb.append("    combinedMsrp: ").append(toIndentedString(combinedMsrp)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdAtDate: ").append(toIndentedString(createdAtDate)).append("\n");
    sb.append("    decodeVersion: ").append(toIndentedString(decodeVersion)).append("\n");
    sb.append("    deliveryCharges: ").append(toIndentedString(deliveryCharges)).append("\n");
    sb.append("    doors: ").append(toIndentedString(doors)).append("\n");
    sb.append("    drivetrain: ").append(toIndentedString(drivetrain)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    exteriorColor: ").append(toIndentedString(exteriorColor)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    highwayMpg: ").append(toIndentedString(highwayMpg)).append("\n");
    sb.append("    installedEquipment: ").append(toIndentedString(installedEquipment)).append("\n");
    sb.append("    installedOptionsDetails: ").append(toIndentedString(installedOptionsDetails)).append("\n");
    sb.append("    installedOptionsMsrp: ").append(toIndentedString(installedOptionsMsrp)).append("\n");
    sb.append("    interiorColor: ").append(toIndentedString(interiorColor)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    listingConfidence: ").append(toIndentedString(listingConfidence)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    manufacturerCode: ").append(toIndentedString(manufacturerCode)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    msrp: ").append(toIndentedString(msrp)).append("\n");
    sb.append("    optionsPackages: ").append(toIndentedString(optionsPackages)).append("\n");
    sb.append("    packageCode: ").append(toIndentedString(packageCode)).append("\n");
    sb.append("    packageDescription: ").append(toIndentedString(packageDescription)).append("\n");
    sb.append("    seatingCapacity: ").append(toIndentedString(seatingCapacity)).append("\n");
    sb.append("    squishVin: ").append(toIndentedString(squishVin)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    transmissionConfidence: ").append(toIndentedString(transmissionConfidence)).append("\n");
    sb.append("    transmissionDescription: ").append(toIndentedString(transmissionDescription)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    trimConfidence: ").append(toIndentedString(trimConfidence)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedAtDate: ").append(toIndentedString(updatedAtDate)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionConfidence: ").append(toIndentedString(versionConfidence)).append("\n");
    sb.append("    vin: ").append(toIndentedString(vin)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_options_details");
    openapiFields.add("body_subtype");
    openapiFields.add("body_type");
    openapiFields.add("city_mpg");
    openapiFields.add("combined_msrp");
    openapiFields.add("created_at");
    openapiFields.add("created_at_date");
    openapiFields.add("decode_version");
    openapiFields.add("delivery_charges");
    openapiFields.add("doors");
    openapiFields.add("drivetrain");
    openapiFields.add("engine");
    openapiFields.add("exterior_color");
    openapiFields.add("features");
    openapiFields.add("fuel_type");
    openapiFields.add("height");
    openapiFields.add("highway_mpg");
    openapiFields.add("installed_equipment");
    openapiFields.add("installed_options_details");
    openapiFields.add("installed_options_msrp");
    openapiFields.add("interior_color");
    openapiFields.add("length");
    openapiFields.add("listing_confidence");
    openapiFields.add("make");
    openapiFields.add("manufacturer_code");
    openapiFields.add("model");
    openapiFields.add("msrp");
    openapiFields.add("options_packages");
    openapiFields.add("package_code");
    openapiFields.add("package_description");
    openapiFields.add("seating_capacity");
    openapiFields.add("squish_vin");
    openapiFields.add("transmission");
    openapiFields.add("transmission_confidence");
    openapiFields.add("transmission_description");
    openapiFields.add("trim");
    openapiFields.add("trim_confidence");
    openapiFields.add("updated_at");
    openapiFields.add("updated_at_date");
    openapiFields.add("version");
    openapiFields.add("version_confidence");
    openapiFields.add("vin");
    openapiFields.add("weight");
    openapiFields.add("width");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NeoVIN
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NeoVIN.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NeoVIN is not found in the empty JSON string", NeoVIN.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NeoVIN.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NeoVIN` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body_subtype") != null && !jsonObj.get("body_subtype").isJsonNull()) && !jsonObj.get("body_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_subtype").toString()));
      }
      if ((jsonObj.get("body_type") != null && !jsonObj.get("body_type").isJsonNull()) && !jsonObj.get("body_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_type").toString()));
      }
      if ((jsonObj.get("created_at_date") != null && !jsonObj.get("created_at_date").isJsonNull()) && !jsonObj.get("created_at_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at_date").toString()));
      }
      if ((jsonObj.get("drivetrain") != null && !jsonObj.get("drivetrain").isJsonNull()) && !jsonObj.get("drivetrain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drivetrain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drivetrain").toString()));
      }
      if ((jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) && !jsonObj.get("engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine").toString()));
      }
      if ((jsonObj.get("fuel_type") != null && !jsonObj.get("fuel_type").isJsonNull()) && !jsonObj.get("fuel_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fuel_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fuel_type").toString()));
      }
      if ((jsonObj.get("listing_confidence") != null && !jsonObj.get("listing_confidence").isJsonNull()) && !jsonObj.get("listing_confidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_confidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_confidence").toString()));
      }
      if ((jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) && !jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      if ((jsonObj.get("manufacturer_code") != null && !jsonObj.get("manufacturer_code").isJsonNull()) && !jsonObj.get("manufacturer_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer_code").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("options_packages") != null && !jsonObj.get("options_packages").isJsonNull()) && !jsonObj.get("options_packages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `options_packages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("options_packages").toString()));
      }
      if ((jsonObj.get("package_code") != null && !jsonObj.get("package_code").isJsonNull()) && !jsonObj.get("package_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_code").toString()));
      }
      if ((jsonObj.get("package_description") != null && !jsonObj.get("package_description").isJsonNull()) && !jsonObj.get("package_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_description").toString()));
      }
      if ((jsonObj.get("squish_vin") != null && !jsonObj.get("squish_vin").isJsonNull()) && !jsonObj.get("squish_vin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squish_vin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squish_vin").toString()));
      }
      if ((jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) && !jsonObj.get("transmission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission").toString()));
      }
      if ((jsonObj.get("transmission_confidence") != null && !jsonObj.get("transmission_confidence").isJsonNull()) && !jsonObj.get("transmission_confidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission_confidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission_confidence").toString()));
      }
      if ((jsonObj.get("transmission_description") != null && !jsonObj.get("transmission_description").isJsonNull()) && !jsonObj.get("transmission_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission_description").toString()));
      }
      if ((jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) && !jsonObj.get("trim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trim").toString()));
      }
      if ((jsonObj.get("trim_confidence") != null && !jsonObj.get("trim_confidence").isJsonNull()) && !jsonObj.get("trim_confidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trim_confidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trim_confidence").toString()));
      }
      if ((jsonObj.get("updated_at_date") != null && !jsonObj.get("updated_at_date").isJsonNull()) && !jsonObj.get("updated_at_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at_date").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("version_confidence") != null && !jsonObj.get("version_confidence").isJsonNull()) && !jsonObj.get("version_confidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_confidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_confidence").toString()));
      }
      if ((jsonObj.get("vin") != null && !jsonObj.get("vin").isJsonNull()) && !jsonObj.get("vin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NeoVIN.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NeoVIN' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NeoVIN> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NeoVIN.class));

       return (TypeAdapter<T>) new TypeAdapter<NeoVIN>() {
           @Override
           public void write(JsonWriter out, NeoVIN value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NeoVIN read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NeoVIN given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NeoVIN
   * @throws IOException if the JSON string is invalid with respect to NeoVIN
   */
  public static NeoVIN fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NeoVIN.class);
  }

  /**
   * Convert an instance of NeoVIN to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

