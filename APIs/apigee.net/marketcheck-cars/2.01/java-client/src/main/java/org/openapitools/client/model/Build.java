/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the Car specification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Build {
  public static final String SERIALIZED_NAME_ANTIBRAKE_SYS = "antibrake_sys";
  @SerializedName(SERIALIZED_NAME_ANTIBRAKE_SYS)
  private String antibrakeSys;

  public static final String SERIALIZED_NAME_BODY_SUBTYPE = "body_subtype";
  @SerializedName(SERIALIZED_NAME_BODY_SUBTYPE)
  private String bodySubtype;

  public static final String SERIALIZED_NAME_BODY_TYPE = "body_type";
  @SerializedName(SERIALIZED_NAME_BODY_TYPE)
  private String bodyType;

  public static final String SERIALIZED_NAME_CITY_MILES = "city_miles";
  @SerializedName(SERIALIZED_NAME_CITY_MILES)
  private String cityMiles;

  public static final String SERIALIZED_NAME_CITY_MPG = "city_mpg";
  @SerializedName(SERIALIZED_NAME_CITY_MPG)
  private Integer cityMpg;

  public static final String SERIALIZED_NAME_CYLINDERS = "cylinders";
  @SerializedName(SERIALIZED_NAME_CYLINDERS)
  private Integer cylinders;

  public static final String SERIALIZED_NAME_DOORS = "doors";
  @SerializedName(SERIALIZED_NAME_DOORS)
  private Integer doors;

  public static final String SERIALIZED_NAME_DRIVETRAIN = "drivetrain";
  @SerializedName(SERIALIZED_NAME_DRIVETRAIN)
  private String drivetrain;

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_ASPIRATION = "engine_aspiration";
  @SerializedName(SERIALIZED_NAME_ENGINE_ASPIRATION)
  private String engineAspiration;

  public static final String SERIALIZED_NAME_ENGINE_BLOCK = "engine_block";
  @SerializedName(SERIALIZED_NAME_ENGINE_BLOCK)
  private String engineBlock;

  public static final String SERIALIZED_NAME_ENGINE_MEASURE = "engine_measure";
  @SerializedName(SERIALIZED_NAME_ENGINE_MEASURE)
  private String engineMeasure;

  public static final String SERIALIZED_NAME_ENGINE_SIZE = "engine_size";
  @SerializedName(SERIALIZED_NAME_ENGINE_SIZE)
  private Double engineSize;

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuel_type";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private String fuelType;

  public static final String SERIALIZED_NAME_HIGHWAY_MILES = "highway_miles";
  @SerializedName(SERIALIZED_NAME_HIGHWAY_MILES)
  private String highwayMiles;

  public static final String SERIALIZED_NAME_HIGHWAY_MPG = "highway_mpg";
  @SerializedName(SERIALIZED_NAME_HIGHWAY_MPG)
  private Integer highwayMpg;

  public static final String SERIALIZED_NAME_MADE_IN = "made_in";
  @SerializedName(SERIALIZED_NAME_MADE_IN)
  private String madeIn;

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private String make;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_OPT_SEATING = "opt_seating";
  @SerializedName(SERIALIZED_NAME_OPT_SEATING)
  private String optSeating;

  public static final String SERIALIZED_NAME_OVERALL_HEIGHT = "overall_height";
  @SerializedName(SERIALIZED_NAME_OVERALL_HEIGHT)
  private String overallHeight;

  public static final String SERIALIZED_NAME_OVERALL_LENGTH = "overall_length";
  @SerializedName(SERIALIZED_NAME_OVERALL_LENGTH)
  private String overallLength;

  public static final String SERIALIZED_NAME_OVERALL_WIDTH = "overall_width";
  @SerializedName(SERIALIZED_NAME_OVERALL_WIDTH)
  private String overallWidth;

  public static final String SERIALIZED_NAME_POWERTRAIN_TYPE = "powertrain_type";
  @SerializedName(SERIALIZED_NAME_POWERTRAIN_TYPE)
  private String powertrainType;

  public static final String SERIALIZED_NAME_SHORT_TRIM = "short_trim";
  @SerializedName(SERIALIZED_NAME_SHORT_TRIM)
  private String shortTrim;

  public static final String SERIALIZED_NAME_STD_SEATING = "std_seating";
  @SerializedName(SERIALIZED_NAME_STD_SEATING)
  private String stdSeating;

  public static final String SERIALIZED_NAME_STEERING_TYPE = "steering_type";
  @SerializedName(SERIALIZED_NAME_STEERING_TYPE)
  private String steeringType;

  public static final String SERIALIZED_NAME_TANK_SIZE = "tank_size";
  @SerializedName(SERIALIZED_NAME_TANK_SIZE)
  private String tankSize;

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private String transmission;

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private String trim;

  public static final String SERIALIZED_NAME_TRIM_R = "trim_r";
  @SerializedName(SERIALIZED_NAME_TRIM_R)
  private String trimR;

  public static final String SERIALIZED_NAME_VEHICLE_TYPE = "vehicle_type";
  @SerializedName(SERIALIZED_NAME_VEHICLE_TYPE)
  private String vehicleType;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public Build() {
  }

  public Build antibrakeSys(String antibrakeSys) {
    this.antibrakeSys = antibrakeSys;
    return this;
  }

  /**
   * Antibrake system of the car
   * @return antibrakeSys
   */
  @javax.annotation.Nullable
  public String getAntibrakeSys() {
    return antibrakeSys;
  }

  public void setAntibrakeSys(String antibrakeSys) {
    this.antibrakeSys = antibrakeSys;
  }


  public Build bodySubtype(String bodySubtype) {
    this.bodySubtype = bodySubtype;
    return this;
  }

  /**
   * Body subtype of the car
   * @return bodySubtype
   */
  @javax.annotation.Nullable
  public String getBodySubtype() {
    return bodySubtype;
  }

  public void setBodySubtype(String bodySubtype) {
    this.bodySubtype = bodySubtype;
  }


  public Build bodyType(String bodyType) {
    this.bodyType = bodyType;
    return this;
  }

  /**
   * Body type of the car
   * @return bodyType
   */
  @javax.annotation.Nullable
  public String getBodyType() {
    return bodyType;
  }

  public void setBodyType(String bodyType) {
    this.bodyType = bodyType;
  }


  public Build cityMiles(String cityMiles) {
    this.cityMiles = cityMiles;
    return this;
  }

  /**
   * City miles of the car
   * @return cityMiles
   */
  @javax.annotation.Nullable
  public String getCityMiles() {
    return cityMiles;
  }

  public void setCityMiles(String cityMiles) {
    this.cityMiles = cityMiles;
  }


  public Build cityMpg(Integer cityMpg) {
    this.cityMpg = cityMpg;
    return this;
  }

  /**
   * City Mileage in MPG
   * @return cityMpg
   */
  @javax.annotation.Nullable
  public Integer getCityMpg() {
    return cityMpg;
  }

  public void setCityMpg(Integer cityMpg) {
    this.cityMpg = cityMpg;
  }


  public Build cylinders(Integer cylinders) {
    this.cylinders = cylinders;
    return this;
  }

  /**
   * No of cylinders of the car
   * @return cylinders
   */
  @javax.annotation.Nullable
  public Integer getCylinders() {
    return cylinders;
  }

  public void setCylinders(Integer cylinders) {
    this.cylinders = cylinders;
  }


  public Build doors(Integer doors) {
    this.doors = doors;
    return this;
  }

  /**
   * No of doors of the car
   * @return doors
   */
  @javax.annotation.Nullable
  public Integer getDoors() {
    return doors;
  }

  public void setDoors(Integer doors) {
    this.doors = doors;
  }


  public Build drivetrain(String drivetrain) {
    this.drivetrain = drivetrain;
    return this;
  }

  /**
   * Drivetrain of the car
   * @return drivetrain
   */
  @javax.annotation.Nullable
  public String getDrivetrain() {
    return drivetrain;
  }

  public void setDrivetrain(String drivetrain) {
    this.drivetrain = drivetrain;
  }


  public Build engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Engine of the car
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public Build engineAspiration(String engineAspiration) {
    this.engineAspiration = engineAspiration;
    return this;
  }

  /**
   * Engine aspiration of the car
   * @return engineAspiration
   */
  @javax.annotation.Nullable
  public String getEngineAspiration() {
    return engineAspiration;
  }

  public void setEngineAspiration(String engineAspiration) {
    this.engineAspiration = engineAspiration;
  }


  public Build engineBlock(String engineBlock) {
    this.engineBlock = engineBlock;
    return this;
  }

  /**
   * Engine block of the car
   * @return engineBlock
   */
  @javax.annotation.Nullable
  public String getEngineBlock() {
    return engineBlock;
  }

  public void setEngineBlock(String engineBlock) {
    this.engineBlock = engineBlock;
  }


  public Build engineMeasure(String engineMeasure) {
    this.engineMeasure = engineMeasure;
    return this;
  }

  /**
   * Engine block of the car
   * @return engineMeasure
   */
  @javax.annotation.Nullable
  public String getEngineMeasure() {
    return engineMeasure;
  }

  public void setEngineMeasure(String engineMeasure) {
    this.engineMeasure = engineMeasure;
  }


  public Build engineSize(Double engineSize) {
    this.engineSize = engineSize;
    return this;
  }

  /**
   * Engine size of the car
   * @return engineSize
   */
  @javax.annotation.Nullable
  public Double getEngineSize() {
    return engineSize;
  }

  public void setEngineSize(Double engineSize) {
    this.engineSize = engineSize;
  }


  public Build fuelType(String fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  /**
   * Fuel type of the car
   * @return fuelType
   */
  @javax.annotation.Nullable
  public String getFuelType() {
    return fuelType;
  }

  public void setFuelType(String fuelType) {
    this.fuelType = fuelType;
  }


  public Build highwayMiles(String highwayMiles) {
    this.highwayMiles = highwayMiles;
    return this;
  }

  /**
   * Highway miles of the car
   * @return highwayMiles
   */
  @javax.annotation.Nullable
  public String getHighwayMiles() {
    return highwayMiles;
  }

  public void setHighwayMiles(String highwayMiles) {
    this.highwayMiles = highwayMiles;
  }


  public Build highwayMpg(Integer highwayMpg) {
    this.highwayMpg = highwayMpg;
    return this;
  }

  /**
   * Highway Mileage in MPG
   * @return highwayMpg
   */
  @javax.annotation.Nullable
  public Integer getHighwayMpg() {
    return highwayMpg;
  }

  public void setHighwayMpg(Integer highwayMpg) {
    this.highwayMpg = highwayMpg;
  }


  public Build madeIn(String madeIn) {
    this.madeIn = madeIn;
    return this;
  }

  /**
   * Made in of the car
   * @return madeIn
   */
  @javax.annotation.Nullable
  public String getMadeIn() {
    return madeIn;
  }

  public void setMadeIn(String madeIn) {
    this.madeIn = madeIn;
  }


  public Build make(String make) {
    this.make = make;
    return this;
  }

  /**
   * Car Make
   * @return make
   */
  @javax.annotation.Nullable
  public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }


  public Build model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Car model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public Build optSeating(String optSeating) {
    this.optSeating = optSeating;
    return this;
  }

  /**
   * opt seating of the car
   * @return optSeating
   */
  @javax.annotation.Nullable
  public String getOptSeating() {
    return optSeating;
  }

  public void setOptSeating(String optSeating) {
    this.optSeating = optSeating;
  }


  public Build overallHeight(String overallHeight) {
    this.overallHeight = overallHeight;
    return this;
  }

  /**
   * Overall height of the car
   * @return overallHeight
   */
  @javax.annotation.Nullable
  public String getOverallHeight() {
    return overallHeight;
  }

  public void setOverallHeight(String overallHeight) {
    this.overallHeight = overallHeight;
  }


  public Build overallLength(String overallLength) {
    this.overallLength = overallLength;
    return this;
  }

  /**
   * Overall length of the car
   * @return overallLength
   */
  @javax.annotation.Nullable
  public String getOverallLength() {
    return overallLength;
  }

  public void setOverallLength(String overallLength) {
    this.overallLength = overallLength;
  }


  public Build overallWidth(String overallWidth) {
    this.overallWidth = overallWidth;
    return this;
  }

  /**
   * Overall width of the car
   * @return overallWidth
   */
  @javax.annotation.Nullable
  public String getOverallWidth() {
    return overallWidth;
  }

  public void setOverallWidth(String overallWidth) {
    this.overallWidth = overallWidth;
  }


  public Build powertrainType(String powertrainType) {
    this.powertrainType = powertrainType;
    return this;
  }

  /**
   * powertrain_type of the car
   * @return powertrainType
   */
  @javax.annotation.Nullable
  public String getPowertrainType() {
    return powertrainType;
  }

  public void setPowertrainType(String powertrainType) {
    this.powertrainType = powertrainType;
  }


  public Build shortTrim(String shortTrim) {
    this.shortTrim = shortTrim;
    return this;
  }

  /**
   * Short trim of the car
   * @return shortTrim
   */
  @javax.annotation.Nullable
  public String getShortTrim() {
    return shortTrim;
  }

  public void setShortTrim(String shortTrim) {
    this.shortTrim = shortTrim;
  }


  public Build stdSeating(String stdSeating) {
    this.stdSeating = stdSeating;
    return this;
  }

  /**
   * Std seating of the car
   * @return stdSeating
   */
  @javax.annotation.Nullable
  public String getStdSeating() {
    return stdSeating;
  }

  public void setStdSeating(String stdSeating) {
    this.stdSeating = stdSeating;
  }


  public Build steeringType(String steeringType) {
    this.steeringType = steeringType;
    return this;
  }

  /**
   * Steering type of the car
   * @return steeringType
   */
  @javax.annotation.Nullable
  public String getSteeringType() {
    return steeringType;
  }

  public void setSteeringType(String steeringType) {
    this.steeringType = steeringType;
  }


  public Build tankSize(String tankSize) {
    this.tankSize = tankSize;
    return this;
  }

  /**
   * Tank size of the car
   * @return tankSize
   */
  @javax.annotation.Nullable
  public String getTankSize() {
    return tankSize;
  }

  public void setTankSize(String tankSize) {
    this.tankSize = tankSize;
  }


  public Build transmission(String transmission) {
    this.transmission = transmission;
    return this;
  }

  /**
   * Transmission of the car
   * @return transmission
   */
  @javax.annotation.Nullable
  public String getTransmission() {
    return transmission;
  }

  public void setTransmission(String transmission) {
    this.transmission = transmission;
  }


  public Build trim(String trim) {
    this.trim = trim;
    return this;
  }

  /**
   * Trim of the car
   * @return trim
   */
  @javax.annotation.Nullable
  public String getTrim() {
    return trim;
  }

  public void setTrim(String trim) {
    this.trim = trim;
  }


  public Build trimR(String trimR) {
    this.trimR = trimR;
    return this;
  }

  /**
   * Trim_r of the car
   * @return trimR
   */
  @javax.annotation.Nullable
  public String getTrimR() {
    return trimR;
  }

  public void setTrimR(String trimR) {
    this.trimR = trimR;
  }


  public Build vehicleType(String vehicleType) {
    this.vehicleType = vehicleType;
    return this;
  }

  /**
   * Vehicle type of the car
   * @return vehicleType
   */
  @javax.annotation.Nullable
  public String getVehicleType() {
    return vehicleType;
  }

  public void setVehicleType(String vehicleType) {
    this.vehicleType = vehicleType;
  }


  public Build year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Year of the Car
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Build build = (Build) o;
    return Objects.equals(this.antibrakeSys, build.antibrakeSys) &&
        Objects.equals(this.bodySubtype, build.bodySubtype) &&
        Objects.equals(this.bodyType, build.bodyType) &&
        Objects.equals(this.cityMiles, build.cityMiles) &&
        Objects.equals(this.cityMpg, build.cityMpg) &&
        Objects.equals(this.cylinders, build.cylinders) &&
        Objects.equals(this.doors, build.doors) &&
        Objects.equals(this.drivetrain, build.drivetrain) &&
        Objects.equals(this.engine, build.engine) &&
        Objects.equals(this.engineAspiration, build.engineAspiration) &&
        Objects.equals(this.engineBlock, build.engineBlock) &&
        Objects.equals(this.engineMeasure, build.engineMeasure) &&
        Objects.equals(this.engineSize, build.engineSize) &&
        Objects.equals(this.fuelType, build.fuelType) &&
        Objects.equals(this.highwayMiles, build.highwayMiles) &&
        Objects.equals(this.highwayMpg, build.highwayMpg) &&
        Objects.equals(this.madeIn, build.madeIn) &&
        Objects.equals(this.make, build.make) &&
        Objects.equals(this.model, build.model) &&
        Objects.equals(this.optSeating, build.optSeating) &&
        Objects.equals(this.overallHeight, build.overallHeight) &&
        Objects.equals(this.overallLength, build.overallLength) &&
        Objects.equals(this.overallWidth, build.overallWidth) &&
        Objects.equals(this.powertrainType, build.powertrainType) &&
        Objects.equals(this.shortTrim, build.shortTrim) &&
        Objects.equals(this.stdSeating, build.stdSeating) &&
        Objects.equals(this.steeringType, build.steeringType) &&
        Objects.equals(this.tankSize, build.tankSize) &&
        Objects.equals(this.transmission, build.transmission) &&
        Objects.equals(this.trim, build.trim) &&
        Objects.equals(this.trimR, build.trimR) &&
        Objects.equals(this.vehicleType, build.vehicleType) &&
        Objects.equals(this.year, build.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antibrakeSys, bodySubtype, bodyType, cityMiles, cityMpg, cylinders, doors, drivetrain, engine, engineAspiration, engineBlock, engineMeasure, engineSize, fuelType, highwayMiles, highwayMpg, madeIn, make, model, optSeating, overallHeight, overallLength, overallWidth, powertrainType, shortTrim, stdSeating, steeringType, tankSize, transmission, trim, trimR, vehicleType, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Build {\n");
    sb.append("    antibrakeSys: ").append(toIndentedString(antibrakeSys)).append("\n");
    sb.append("    bodySubtype: ").append(toIndentedString(bodySubtype)).append("\n");
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    cityMiles: ").append(toIndentedString(cityMiles)).append("\n");
    sb.append("    cityMpg: ").append(toIndentedString(cityMpg)).append("\n");
    sb.append("    cylinders: ").append(toIndentedString(cylinders)).append("\n");
    sb.append("    doors: ").append(toIndentedString(doors)).append("\n");
    sb.append("    drivetrain: ").append(toIndentedString(drivetrain)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineAspiration: ").append(toIndentedString(engineAspiration)).append("\n");
    sb.append("    engineBlock: ").append(toIndentedString(engineBlock)).append("\n");
    sb.append("    engineMeasure: ").append(toIndentedString(engineMeasure)).append("\n");
    sb.append("    engineSize: ").append(toIndentedString(engineSize)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    highwayMiles: ").append(toIndentedString(highwayMiles)).append("\n");
    sb.append("    highwayMpg: ").append(toIndentedString(highwayMpg)).append("\n");
    sb.append("    madeIn: ").append(toIndentedString(madeIn)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    optSeating: ").append(toIndentedString(optSeating)).append("\n");
    sb.append("    overallHeight: ").append(toIndentedString(overallHeight)).append("\n");
    sb.append("    overallLength: ").append(toIndentedString(overallLength)).append("\n");
    sb.append("    overallWidth: ").append(toIndentedString(overallWidth)).append("\n");
    sb.append("    powertrainType: ").append(toIndentedString(powertrainType)).append("\n");
    sb.append("    shortTrim: ").append(toIndentedString(shortTrim)).append("\n");
    sb.append("    stdSeating: ").append(toIndentedString(stdSeating)).append("\n");
    sb.append("    steeringType: ").append(toIndentedString(steeringType)).append("\n");
    sb.append("    tankSize: ").append(toIndentedString(tankSize)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    trimR: ").append(toIndentedString(trimR)).append("\n");
    sb.append("    vehicleType: ").append(toIndentedString(vehicleType)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("antibrake_sys");
    openapiFields.add("body_subtype");
    openapiFields.add("body_type");
    openapiFields.add("city_miles");
    openapiFields.add("city_mpg");
    openapiFields.add("cylinders");
    openapiFields.add("doors");
    openapiFields.add("drivetrain");
    openapiFields.add("engine");
    openapiFields.add("engine_aspiration");
    openapiFields.add("engine_block");
    openapiFields.add("engine_measure");
    openapiFields.add("engine_size");
    openapiFields.add("fuel_type");
    openapiFields.add("highway_miles");
    openapiFields.add("highway_mpg");
    openapiFields.add("made_in");
    openapiFields.add("make");
    openapiFields.add("model");
    openapiFields.add("opt_seating");
    openapiFields.add("overall_height");
    openapiFields.add("overall_length");
    openapiFields.add("overall_width");
    openapiFields.add("powertrain_type");
    openapiFields.add("short_trim");
    openapiFields.add("std_seating");
    openapiFields.add("steering_type");
    openapiFields.add("tank_size");
    openapiFields.add("transmission");
    openapiFields.add("trim");
    openapiFields.add("trim_r");
    openapiFields.add("vehicle_type");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Build
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Build.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Build is not found in the empty JSON string", Build.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Build.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Build` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("antibrake_sys") != null && !jsonObj.get("antibrake_sys").isJsonNull()) && !jsonObj.get("antibrake_sys").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `antibrake_sys` to be a primitive type in the JSON string but got `%s`", jsonObj.get("antibrake_sys").toString()));
      }
      if ((jsonObj.get("body_subtype") != null && !jsonObj.get("body_subtype").isJsonNull()) && !jsonObj.get("body_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_subtype").toString()));
      }
      if ((jsonObj.get("body_type") != null && !jsonObj.get("body_type").isJsonNull()) && !jsonObj.get("body_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_type").toString()));
      }
      if ((jsonObj.get("city_miles") != null && !jsonObj.get("city_miles").isJsonNull()) && !jsonObj.get("city_miles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city_miles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city_miles").toString()));
      }
      if ((jsonObj.get("drivetrain") != null && !jsonObj.get("drivetrain").isJsonNull()) && !jsonObj.get("drivetrain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drivetrain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drivetrain").toString()));
      }
      if ((jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) && !jsonObj.get("engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine").toString()));
      }
      if ((jsonObj.get("engine_aspiration") != null && !jsonObj.get("engine_aspiration").isJsonNull()) && !jsonObj.get("engine_aspiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_aspiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_aspiration").toString()));
      }
      if ((jsonObj.get("engine_block") != null && !jsonObj.get("engine_block").isJsonNull()) && !jsonObj.get("engine_block").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_block` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_block").toString()));
      }
      if ((jsonObj.get("engine_measure") != null && !jsonObj.get("engine_measure").isJsonNull()) && !jsonObj.get("engine_measure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_measure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_measure").toString()));
      }
      if ((jsonObj.get("fuel_type") != null && !jsonObj.get("fuel_type").isJsonNull()) && !jsonObj.get("fuel_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fuel_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fuel_type").toString()));
      }
      if ((jsonObj.get("highway_miles") != null && !jsonObj.get("highway_miles").isJsonNull()) && !jsonObj.get("highway_miles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highway_miles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highway_miles").toString()));
      }
      if ((jsonObj.get("made_in") != null && !jsonObj.get("made_in").isJsonNull()) && !jsonObj.get("made_in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `made_in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("made_in").toString()));
      }
      if ((jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) && !jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("opt_seating") != null && !jsonObj.get("opt_seating").isJsonNull()) && !jsonObj.get("opt_seating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opt_seating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opt_seating").toString()));
      }
      if ((jsonObj.get("overall_height") != null && !jsonObj.get("overall_height").isJsonNull()) && !jsonObj.get("overall_height").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overall_height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overall_height").toString()));
      }
      if ((jsonObj.get("overall_length") != null && !jsonObj.get("overall_length").isJsonNull()) && !jsonObj.get("overall_length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overall_length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overall_length").toString()));
      }
      if ((jsonObj.get("overall_width") != null && !jsonObj.get("overall_width").isJsonNull()) && !jsonObj.get("overall_width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overall_width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overall_width").toString()));
      }
      if ((jsonObj.get("powertrain_type") != null && !jsonObj.get("powertrain_type").isJsonNull()) && !jsonObj.get("powertrain_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `powertrain_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("powertrain_type").toString()));
      }
      if ((jsonObj.get("short_trim") != null && !jsonObj.get("short_trim").isJsonNull()) && !jsonObj.get("short_trim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_trim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_trim").toString()));
      }
      if ((jsonObj.get("std_seating") != null && !jsonObj.get("std_seating").isJsonNull()) && !jsonObj.get("std_seating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `std_seating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("std_seating").toString()));
      }
      if ((jsonObj.get("steering_type") != null && !jsonObj.get("steering_type").isJsonNull()) && !jsonObj.get("steering_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `steering_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("steering_type").toString()));
      }
      if ((jsonObj.get("tank_size") != null && !jsonObj.get("tank_size").isJsonNull()) && !jsonObj.get("tank_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tank_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tank_size").toString()));
      }
      if ((jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) && !jsonObj.get("transmission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission").toString()));
      }
      if ((jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) && !jsonObj.get("trim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trim").toString()));
      }
      if ((jsonObj.get("trim_r") != null && !jsonObj.get("trim_r").isJsonNull()) && !jsonObj.get("trim_r").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trim_r` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trim_r").toString()));
      }
      if ((jsonObj.get("vehicle_type") != null && !jsonObj.get("vehicle_type").isJsonNull()) && !jsonObj.get("vehicle_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Build.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Build' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Build> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Build.class));

       return (TypeAdapter<T>) new TypeAdapter<Build>() {
           @Override
           public void write(JsonWriter out, Build value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Build read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Build given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Build
   * @throws IOException if the JSON string is invalid with respect to Build
   */
  public static Build fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Build.class);
  }

  /**
   * Convert an instance of Build to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

