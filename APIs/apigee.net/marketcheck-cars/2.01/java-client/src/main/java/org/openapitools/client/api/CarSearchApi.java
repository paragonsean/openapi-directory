/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Listing;
import org.openapitools.client.model.ListingExtraAttributes;
import org.openapitools.client.model.ListingMedia;
import org.openapitools.client.model.SearchAutoCompleteResponse;
import org.openapitools.client.model.SearchResponse;
import org.openapitools.client.model.UKSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CarSearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CarSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CarSearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autoComplete
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param carType Car type. Allowed values are - new / used (optional)
     * @param includeNonVinListings Flag to indicate whether to include non vin listing terms in results or not. Default is false to avoid un-normalised terms from non vin listings out of results (optional, default to false)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoCompleteCall(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String exteriorColor, String interiorColor, String engine, String engineSize, String engineBlock, String state, String city, String source, String dealerId, String country, String carType, String includeNonVinListings, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, String inventoryCountRange, String excludeDealerIds, String excludeSources, String inTransit, BigDecimal facetMinCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/car/auto-complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (input != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("input", input));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (includeNonVinListings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_non_vin_listings", includeNonVinListings));
        }

        if (ignoreCase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignore_case", ignoreCase));
        }

        if (termCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term_counts", termCounts));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sellerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_type", sellerType));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (inventoryCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_count_range", inventoryCountRange));
        }

        if (excludeDealerIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_dealer_ids", excludeDealerIds));
        }

        if (excludeSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_sources", excludeSources));
        }

        if (inTransit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_transit", inTransit));
        }

        if (facetMinCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_min_count", facetMinCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoCompleteValidateBeforeCall(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String exteriorColor, String interiorColor, String engine, String engineSize, String engineBlock, String state, String city, String source, String dealerId, String country, String carType, String includeNonVinListings, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, String inventoryCountRange, String excludeDealerIds, String excludeSources, String inTransit, BigDecimal facetMinCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling autoComplete(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling autoComplete(Async)");
        }

        return autoCompleteCall(field, input, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, exteriorColor, interiorColor, engine, engineSize, engineBlock, state, city, source, dealerId, country, carType, includeNonVinListings, ignoreCase, termCounts, sortBy, sellerType, radius, zip, inventoryCountRange, excludeDealerIds, excludeSources, inTransit, facetMinCount, _callback);

    }

    /**
     * API for auto-completion of inputs
     * Auto-complete the inputs of your end users
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param carType Car type. Allowed values are - new / used (optional)
     * @param includeNonVinListings Flag to indicate whether to include non vin listing terms in results or not. Default is false to avoid un-normalised terms from non vin listings out of results (optional, default to false)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @return SearchAutoCompleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SearchAutoCompleteResponse autoComplete(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String exteriorColor, String interiorColor, String engine, String engineSize, String engineBlock, String state, String city, String source, String dealerId, String country, String carType, String includeNonVinListings, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, String inventoryCountRange, String excludeDealerIds, String excludeSources, String inTransit, BigDecimal facetMinCount) throws ApiException {
        ApiResponse<SearchAutoCompleteResponse> localVarResp = autoCompleteWithHttpInfo(field, input, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, exteriorColor, interiorColor, engine, engineSize, engineBlock, state, city, source, dealerId, country, carType, includeNonVinListings, ignoreCase, termCounts, sortBy, sellerType, radius, zip, inventoryCountRange, excludeDealerIds, excludeSources, inTransit, facetMinCount);
        return localVarResp.getData();
    }

    /**
     * API for auto-completion of inputs
     * Auto-complete the inputs of your end users
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param carType Car type. Allowed values are - new / used (optional)
     * @param includeNonVinListings Flag to indicate whether to include non vin listing terms in results or not. Default is false to avoid un-normalised terms from non vin listings out of results (optional, default to false)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @return ApiResponse&lt;SearchAutoCompleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchAutoCompleteResponse> autoCompleteWithHttpInfo(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String exteriorColor, String interiorColor, String engine, String engineSize, String engineBlock, String state, String city, String source, String dealerId, String country, String carType, String includeNonVinListings, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, String inventoryCountRange, String excludeDealerIds, String excludeSources, String inTransit, BigDecimal facetMinCount) throws ApiException {
        okhttp3.Call localVarCall = autoCompleteValidateBeforeCall(field, input, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, exteriorColor, interiorColor, engine, engineSize, engineBlock, state, city, source, dealerId, country, carType, includeNonVinListings, ignoreCase, termCounts, sortBy, sellerType, radius, zip, inventoryCountRange, excludeDealerIds, excludeSources, inTransit, facetMinCount, null);
        Type localVarReturnType = new TypeToken<SearchAutoCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * API for auto-completion of inputs (asynchronously)
     * Auto-complete the inputs of your end users
     * @param field Field name for which you want auto-completion (required)
     * @param input Input entered so far (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param carType Car type. Allowed values are - new / used (optional)
     * @param includeNonVinListings Flag to indicate whether to include non vin listing terms in results or not. Default is false to avoid un-normalised terms from non vin listings out of results (optional, default to false)
     * @param ignoreCase Boolean variable to indicate ignore case of current input (optional, default to true)
     * @param termCounts Boolean variable to indicate wheather to include term counts as well in response (optional, default to false)
     * @param sortBy Sort the response, either by index or count(default) (optional, default to index)
     * @param sellerType seller type for autocomplete (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param facetMinCount Provide minimum count value for facets (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unique terms available in given field for auto completion </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoCompleteAsync(String field, String input, String apiKey, String year, String make, String model, String trim, String bodyType, String bodySubtype, String vehicleType, String transmission, String drivetrain, String fuelType, String exteriorColor, String interiorColor, String engine, String engineSize, String engineBlock, String state, String city, String source, String dealerId, String country, String carType, String includeNonVinListings, Boolean ignoreCase, Boolean termCounts, String sortBy, String sellerType, Integer radius, String zip, String inventoryCountRange, String excludeDealerIds, String excludeSources, String inTransit, BigDecimal facetMinCount, final ApiCallback<SearchAutoCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoCompleteValidateBeforeCall(field, input, apiKey, year, make, model, trim, bodyType, bodySubtype, vehicleType, transmission, drivetrain, fuelType, exteriorColor, interiorColor, engine, engineSize, engineBlock, state, city, source, dealerId, country, carType, includeNonVinListings, ignoreCase, termCounts, sortBy, sellerType, radius, zip, inventoryCountRange, excludeDealerIds, excludeSources, inTransit, facetMinCount, _callback);
        Type localVarReturnType = new TypeToken<SearchAutoCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for carDealerInventoryActiveGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call carDealerInventoryActiveGetCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String vin, String source, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String inTransit, String seatingCapacity, String engineSizeRange, String powertrainType, String minPhotoLinks, String minPhotoLinksCached, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/car/dealer/inventory/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (includeLease != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_lease", includeLease));
        }

        if (includeFinance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_finance", includeFinance));
        }

        if (leaseTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_term", leaseTerm));
        }

        if (leaseDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_down_payment", leaseDownPayment));
        }

        if (leaseEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_emp", leaseEmp));
        }

        if (financeLoanTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_term", financeLoanTerm));
        }

        if (financeLoanApr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_apr", financeLoanApr));
        }

        if (financeEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_emp", financeEmp));
        }

        if (financeDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment", financeDownPayment));
        }

        if (financeDownPaymentPer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment_per", financeDownPaymentPer));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (carfax1Owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_1_owner", carfax1Owner));
        }

        if (carfaxCleanTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_clean_title", carfaxCleanTitle));
        }

        if (yearRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_range", yearRange));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (vins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vins", vins));
        }

        if (taxonomyVins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxonomy_vins", taxonomyVins));
        }

        if (mm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mm", mm));
        }

        if (ymm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymm", ymm));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineAspiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_aspiration", engineAspiration));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (highwayMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg_range", highwayMpgRange));
        }

        if (cityMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg_range", cityMpgRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (domRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_range", domRange));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (includeNonVinListings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_non_vin_listings", includeNonVinListings));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (plot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plot", plot));
        }

        if (nodedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodedup", nodedup));
        }

        if (dedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedup", dedup));
        }

        if (owned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owned", owned));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (dealerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_name", dealerName));
        }

        if (dealershipGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealership_group_name", dealershipGroupName));
        }

        if (trimO != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_o", trimO));
        }

        if (trimR != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_r", trimR));
        }

        if (domActiveRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_active_range", domActiveRange));
        }

        if (dom180Range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_180_range", dom180Range));
        }

        if (excludeCertified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_certified", excludeCertified));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (photoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links", photoLinks));
        }

        if (photoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links_cached", photoLinksCached));
        }

        if (stockNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_no", stockNo));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (firstSeenAtSourceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_range", firstSeenAtSourceRange));
        }

        if (firstSeenAtMcRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_range", firstSeenAtMcRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        if (firstSeenAtSourceDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_days", firstSeenAtSourceDays));
        }

        if (firstSeenAtMcDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_days", firstSeenAtMcDays));
        }

        if (includeRelevantLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_relevant_links", includeRelevantLinks));
        }

        if (inventoryCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_count_range", inventoryCountRange));
        }

        if (inTransit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_transit", inTransit));
        }

        if (seatingCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seating_capacity", seatingCapacity));
        }

        if (engineSizeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size_range", engineSizeRange));
        }

        if (powertrainType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("powertrain_type", powertrainType));
        }

        if (minPhotoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_photo_links", minPhotoLinks));
        }

        if (minPhotoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_photo_links_cached", minPhotoLinksCached));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call carDealerInventoryActiveGetValidateBeforeCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String vin, String source, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String inTransit, String seatingCapacity, String engineSizeRange, String powertrainType, String minPhotoLinks, String minPhotoLinksCached, final ApiCallback _callback) throws ApiException {
        return carDealerInventoryActiveGetCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, vin, source, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, inTransit, seatingCapacity, engineSizeRange, powertrainType, minPhotoLinks, minPhotoLinksCached, _callback);

    }

    /**
     * Get dealers active inventory
     * Get dealers active inventory
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SearchResponse carDealerInventoryActiveGet(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String vin, String source, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String inTransit, String seatingCapacity, String engineSizeRange, String powertrainType, String minPhotoLinks, String minPhotoLinksCached) throws ApiException {
        ApiResponse<SearchResponse> localVarResp = carDealerInventoryActiveGetWithHttpInfo(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, vin, source, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, inTransit, seatingCapacity, engineSizeRange, powertrainType, minPhotoLinks, minPhotoLinksCached);
        return localVarResp.getData();
    }

    /**
     * Get dealers active inventory
     * Get dealers active inventory
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResponse> carDealerInventoryActiveGetWithHttpInfo(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String vin, String source, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String inTransit, String seatingCapacity, String engineSizeRange, String powertrainType, String minPhotoLinks, String minPhotoLinksCached) throws ApiException {
        okhttp3.Call localVarCall = carDealerInventoryActiveGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, vin, source, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, inTransit, seatingCapacity, engineSizeRange, powertrainType, minPhotoLinks, minPhotoLinksCached, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get dealers active inventory (asynchronously)
     * Get dealers active inventory
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call carDealerInventoryActiveGetAsync(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String vin, String source, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String inTransit, String seatingCapacity, String engineSizeRange, String powertrainType, String minPhotoLinks, String minPhotoLinksCached, final ApiCallback<SearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = carDealerInventoryActiveGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, vin, source, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, inTransit, seatingCapacity, engineSizeRange, powertrainType, minPhotoLinks, minPhotoLinksCached, _callback);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListing
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListingCall(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (includeRelevantLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_relevant_links", includeRelevantLinks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListingValidateBeforeCall(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getListing(Async)");
        }

        return getListingCall(id, apiKey, appendApiKey, includeRelevantLinks, _callback);

    }

    /**
     * Listing by id
     * Get a particular dealer listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @return Listing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Listing getListing(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks) throws ApiException {
        ApiResponse<Listing> localVarResp = getListingWithHttpInfo(id, apiKey, appendApiKey, includeRelevantLinks);
        return localVarResp.getData();
    }

    /**
     * Listing by id
     * Get a particular dealer listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @return ApiResponse&lt;Listing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Listing> getListingWithHttpInfo(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks) throws ApiException {
        okhttp3.Call localVarCall = getListingValidateBeforeCall(id, apiKey, appendApiKey, includeRelevantLinks, null);
        Type localVarReturnType = new TypeToken<Listing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing by id (asynchronously)
     * Get a particular dealer listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListingAsync(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks, final ApiCallback<Listing> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListingValidateBeforeCall(id, apiKey, appendApiKey, includeRelevantLinks, _callback);
        Type localVarReturnType = new TypeToken<Listing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarAuctionIdExtraGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarAuctionIdExtraGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/auction/{id}/extra"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarAuctionIdExtraGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarAuctionIdExtraGet(Async)");
        }

        return listingCarAuctionIdExtraGetCall(id, apiKey, _callback);

    }

    /**
     * Long text Listings attributes for Listing with the given id
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ListingExtraAttributes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingExtraAttributes listingCarAuctionIdExtraGet(String id, String apiKey) throws ApiException {
        ApiResponse<ListingExtraAttributes> localVarResp = listingCarAuctionIdExtraGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Long text Listings attributes for Listing with the given id
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ListingExtraAttributes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingExtraAttributes> listingCarAuctionIdExtraGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingCarAuctionIdExtraGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Long text Listings attributes for Listing with the given id (asynchronously)
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarAuctionIdExtraGetAsync(String id, String apiKey, final ApiCallback<ListingExtraAttributes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarAuctionIdExtraGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarAuctionIdGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarAuctionIdGetCall(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/auction/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (includeRelevantLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_relevant_links", includeRelevantLinks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarAuctionIdGetValidateBeforeCall(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarAuctionIdGet(Async)");
        }

        return listingCarAuctionIdGetCall(id, apiKey, appendApiKey, includeRelevantLinks, _callback);

    }

    /**
     * Listing by id
     * Get a particular auction listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @return Listing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Listing listingCarAuctionIdGet(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks) throws ApiException {
        ApiResponse<Listing> localVarResp = listingCarAuctionIdGetWithHttpInfo(id, apiKey, appendApiKey, includeRelevantLinks);
        return localVarResp.getData();
    }

    /**
     * Listing by id
     * Get a particular auction listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @return ApiResponse&lt;Listing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Listing> listingCarAuctionIdGetWithHttpInfo(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks) throws ApiException {
        okhttp3.Call localVarCall = listingCarAuctionIdGetValidateBeforeCall(id, apiKey, appendApiKey, includeRelevantLinks, null);
        Type localVarReturnType = new TypeToken<Listing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing by id (asynchronously)
     * Get a particular auction listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarAuctionIdGetAsync(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks, final ApiCallback<Listing> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarAuctionIdGetValidateBeforeCall(id, apiKey, appendApiKey, includeRelevantLinks, _callback);
        Type localVarReturnType = new TypeToken<Listing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarAuctionIdMediaGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarAuctionIdMediaGetCall(String id, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/auction/{id}/media"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarAuctionIdMediaGetValidateBeforeCall(String id, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarAuctionIdMediaGet(Async)");
        }

        return listingCarAuctionIdMediaGetCall(id, apiKey, appendApiKey, _callback);

    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return ListingMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingMedia listingCarAuctionIdMediaGet(String id, String apiKey, Boolean appendApiKey) throws ApiException {
        ApiResponse<ListingMedia> localVarResp = listingCarAuctionIdMediaGetWithHttpInfo(id, apiKey, appendApiKey);
        return localVarResp.getData();
    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return ApiResponse&lt;ListingMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingMedia> listingCarAuctionIdMediaGetWithHttpInfo(String id, String apiKey, Boolean appendApiKey) throws ApiException {
        okhttp3.Call localVarCall = listingCarAuctionIdMediaGetValidateBeforeCall(id, apiKey, appendApiKey, null);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing media by id (asynchronously)
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarAuctionIdMediaGetAsync(String id, String apiKey, Boolean appendApiKey, final ApiCallback<ListingMedia> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarAuctionIdMediaGetValidateBeforeCall(id, apiKey, appendApiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarFsboIdExtraGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarFsboIdExtraGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/fsbo/{id}/extra"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarFsboIdExtraGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarFsboIdExtraGet(Async)");
        }

        return listingCarFsboIdExtraGetCall(id, apiKey, _callback);

    }

    /**
     * Long text Listings attributes for Listing with the given id
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ListingExtraAttributes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingExtraAttributes listingCarFsboIdExtraGet(String id, String apiKey) throws ApiException {
        ApiResponse<ListingExtraAttributes> localVarResp = listingCarFsboIdExtraGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Long text Listings attributes for Listing with the given id
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ListingExtraAttributes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingExtraAttributes> listingCarFsboIdExtraGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingCarFsboIdExtraGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Long text Listings attributes for Listing with the given id (asynchronously)
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarFsboIdExtraGetAsync(String id, String apiKey, final ApiCallback<ListingExtraAttributes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarFsboIdExtraGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarFsboIdGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarFsboIdGetCall(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/fsbo/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (includeRelevantLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_relevant_links", includeRelevantLinks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarFsboIdGetValidateBeforeCall(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarFsboIdGet(Async)");
        }

        return listingCarFsboIdGetCall(id, apiKey, appendApiKey, includeRelevantLinks, _callback);

    }

    /**
     * Listing by id
     * Get a particular private party listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @return Listing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Listing listingCarFsboIdGet(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks) throws ApiException {
        ApiResponse<Listing> localVarResp = listingCarFsboIdGetWithHttpInfo(id, apiKey, appendApiKey, includeRelevantLinks);
        return localVarResp.getData();
    }

    /**
     * Listing by id
     * Get a particular private party listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @return ApiResponse&lt;Listing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Listing> listingCarFsboIdGetWithHttpInfo(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks) throws ApiException {
        okhttp3.Call localVarCall = listingCarFsboIdGetValidateBeforeCall(id, apiKey, appendApiKey, includeRelevantLinks, null);
        Type localVarReturnType = new TypeToken<Listing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing by id (asynchronously)
     * Get a particular private party listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarFsboIdGetAsync(String id, String apiKey, Boolean appendApiKey, Boolean includeRelevantLinks, final ApiCallback<Listing> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarFsboIdGetValidateBeforeCall(id, apiKey, appendApiKey, includeRelevantLinks, _callback);
        Type localVarReturnType = new TypeToken<Listing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarFsboIdMediaGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarFsboIdMediaGetCall(String id, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/fsbo/{id}/media"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarFsboIdMediaGetValidateBeforeCall(String id, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarFsboIdMediaGet(Async)");
        }

        return listingCarFsboIdMediaGetCall(id, apiKey, appendApiKey, _callback);

    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return ListingMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingMedia listingCarFsboIdMediaGet(String id, String apiKey, Boolean appendApiKey) throws ApiException {
        ApiResponse<ListingMedia> localVarResp = listingCarFsboIdMediaGetWithHttpInfo(id, apiKey, appendApiKey);
        return localVarResp.getData();
    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return ApiResponse&lt;ListingMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingMedia> listingCarFsboIdMediaGetWithHttpInfo(String id, String apiKey, Boolean appendApiKey) throws ApiException {
        okhttp3.Call localVarCall = listingCarFsboIdMediaGetValidateBeforeCall(id, apiKey, appendApiKey, null);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing media by id (asynchronously)
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarFsboIdMediaGetAsync(String id, String apiKey, Boolean appendApiKey, final ApiCallback<ListingMedia> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarFsboIdMediaGetValidateBeforeCall(id, apiKey, appendApiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarIdExtraGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarIdExtraGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/{id}/extra"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarIdExtraGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarIdExtraGet(Async)");
        }

        return listingCarIdExtraGetCall(id, apiKey, _callback);

    }

    /**
     * Long text Listings attributes for Listing with the given id
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ListingExtraAttributes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingExtraAttributes listingCarIdExtraGet(String id, String apiKey) throws ApiException {
        ApiResponse<ListingExtraAttributes> localVarResp = listingCarIdExtraGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Long text Listings attributes for Listing with the given id
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ListingExtraAttributes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingExtraAttributes> listingCarIdExtraGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingCarIdExtraGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Long text Listings attributes for Listing with the given id (asynchronously)
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarIdExtraGetAsync(String id, String apiKey, final ApiCallback<ListingExtraAttributes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarIdExtraGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarIdMediaGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarIdMediaGetCall(String id, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/{id}/media"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarIdMediaGetValidateBeforeCall(String id, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarIdMediaGet(Async)");
        }

        return listingCarIdMediaGetCall(id, apiKey, appendApiKey, _callback);

    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return ListingMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingMedia listingCarIdMediaGet(String id, String apiKey, Boolean appendApiKey) throws ApiException {
        ApiResponse<ListingMedia> localVarResp = listingCarIdMediaGetWithHttpInfo(id, apiKey, appendApiKey);
        return localVarResp.getData();
    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return ApiResponse&lt;ListingMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingMedia> listingCarIdMediaGetWithHttpInfo(String id, String apiKey, Boolean appendApiKey) throws ApiException {
        okhttp3.Call localVarCall = listingCarIdMediaGetValidateBeforeCall(id, apiKey, appendApiKey, null);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing media by id (asynchronously)
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarIdMediaGetAsync(String id, String apiKey, Boolean appendApiKey, final ApiCallback<ListingMedia> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarIdMediaGetValidateBeforeCall(id, apiKey, appendApiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarUkIdExtraGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarUkIdExtraGetCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/uk/{id}/extra"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarUkIdExtraGetValidateBeforeCall(String id, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarUkIdExtraGet(Async)");
        }

        return listingCarUkIdExtraGetCall(id, apiKey, _callback);

    }

    /**
     * Long text Listings attributes for Listing with the given id
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ListingExtraAttributes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingExtraAttributes listingCarUkIdExtraGet(String id, String apiKey) throws ApiException {
        ApiResponse<ListingExtraAttributes> localVarResp = listingCarUkIdExtraGetWithHttpInfo(id, apiKey);
        return localVarResp.getData();
    }

    /**
     * Long text Listings attributes for Listing with the given id
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ListingExtraAttributes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingExtraAttributes> listingCarUkIdExtraGetWithHttpInfo(String id, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = listingCarUkIdExtraGetValidateBeforeCall(id, apiKey, null);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Long text Listings attributes for Listing with the given id (asynchronously)
     * Get listing options, features, seller comments
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingAttributes for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarUkIdExtraGetAsync(String id, String apiKey, final ApiCallback<ListingExtraAttributes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarUkIdExtraGetValidateBeforeCall(id, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingExtraAttributes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarUkIdGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarUkIdGetCall(String id, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/uk/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarUkIdGetValidateBeforeCall(String id, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarUkIdGet(Async)");
        }

        return listingCarUkIdGetCall(id, apiKey, appendApiKey, _callback);

    }

    /**
     * Listing by id
     * Get a particular dealer listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return Listing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Listing listingCarUkIdGet(String id, String apiKey, Boolean appendApiKey) throws ApiException {
        ApiResponse<Listing> localVarResp = listingCarUkIdGetWithHttpInfo(id, apiKey, appendApiKey);
        return localVarResp.getData();
    }

    /**
     * Listing by id
     * Get a particular dealer listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return ApiResponse&lt;Listing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Listing> listingCarUkIdGetWithHttpInfo(String id, String apiKey, Boolean appendApiKey) throws ApiException {
        okhttp3.Call localVarCall = listingCarUkIdGetValidateBeforeCall(id, apiKey, appendApiKey, null);
        Type localVarReturnType = new TypeToken<Listing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing by id (asynchronously)
     * Get a particular dealer listing by its id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing for the given id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarUkIdGetAsync(String id, String apiKey, Boolean appendApiKey, final ApiCallback<Listing> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarUkIdGetValidateBeforeCall(id, apiKey, appendApiKey, _callback);
        Type localVarReturnType = new TypeToken<Listing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingCarUkIdMediaGet
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarUkIdMediaGetCall(String id, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listing/car/uk/{id}/media"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingCarUkIdMediaGetValidateBeforeCall(String id, String apiKey, Boolean appendApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingCarUkIdMediaGet(Async)");
        }

        return listingCarUkIdMediaGetCall(id, apiKey, appendApiKey, _callback);

    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return ListingMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListingMedia listingCarUkIdMediaGet(String id, String apiKey, Boolean appendApiKey) throws ApiException {
        ApiResponse<ListingMedia> localVarResp = listingCarUkIdMediaGetWithHttpInfo(id, apiKey, appendApiKey);
        return localVarResp.getData();
    }

    /**
     * Listing media by id
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @return ApiResponse&lt;ListingMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingMedia> listingCarUkIdMediaGetWithHttpInfo(String id, String apiKey, Boolean appendApiKey) throws ApiException {
        okhttp3.Call localVarCall = listingCarUkIdMediaGetValidateBeforeCall(id, apiKey, appendApiKey, null);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing media by id (asynchronously)
     * Get listing media (photo, photos) by id
     * @param id Listing id to get all the listing attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ListingMedia for the given listing id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingCarUkIdMediaGetAsync(String id, String apiKey, Boolean appendApiKey, final ApiCallback<ListingMedia> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingCarUkIdMediaGetValidateBeforeCall(id, apiKey, appendApiKey, _callback);
        Type localVarReturnType = new TypeToken<ListingMedia>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to false)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param carType Car type. Allowed values are - new / used (optional)
     * @param year To filter listing on their year (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param variant To filter listing on their variant (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to uk)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param co2Emissions CO2 emissions (optional)
     * @param insuranceGroup Insurance Group (optional)
     * @param vehicleRegistrationMark Vehicle Registration Mark (optional)
     * @param vehicleRegistrationDateRange Vehicle registration date range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param numOwners Number of owners. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param writeOffCategory write off category (optional)
     * @param excludeWriteOffCategory To exclude write off category (optional)
     * @param fcaStatus To filter on fca status (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param vrm To filter on vrm (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param clientFilters Flag to add explicit filters set on client level in solr (optional, default to true)
     * @param boost Flag to sort listings based on client filter score in solr (optional, default to true)
     * @param carLocationSellerName Filter cars on seller name (optional)
     * @param carLocationStreet Filter cars on street name (optional)
     * @param carLocationCity Filter cars on city (optional)
     * @param carLocationCounty Filter cars on county (optional)
     * @param carLocationZip To filter listing on car ZIP around which they are listed (optional)
     * @param carLocationLatitude Latitude component of car location (optional)
     * @param carLocationLongitude Longitude component of car location (optional)
     * @param priceChange Query to filter listings based on their positive and negative price change (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param uvcId To filter on uvc id (optional)
     * @param highwayMpgRange Highway mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param combinedMpgRange Combined mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param ulezCompliant Filter listings based on drive into ultra low emmition zone (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String postalCode, String zip, String carType, String year, String yearRange, String make, String model, String variant, String trim, String bodyType, String ymmt, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String engine, String milesRange, String priceRange, String msrpRange, String sortBy, String sortOrder, Integer rows, Integer start, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, String county, String state, String city, String fuelType, String stockNo, String domRange, String domActiveRange, String dom180Range, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String co2Emissions, String insuranceGroup, String vehicleRegistrationMark, String vehicleRegistrationDateRange, String numOwners, String inventoryCountRange, String source, String dealerId, String excludeSources, String excludeDealerIds, String inTransit, Boolean includeNonVinListings, String cylinders, Boolean photoLinks, Boolean photoLinksCached, String baseExteriorColor, String baseInteriorColor, String writeOffCategory, String excludeWriteOffCategory, String fcaStatus, String seatingCapacity, String vrm, String powertrainType, Boolean clientFilters, Boolean boost, String carLocationSellerName, String carLocationStreet, String carLocationCity, String carLocationCounty, String carLocationZip, Double carLocationLatitude, Double carLocationLongitude, String priceChange, String priceChangeRange, String activeInventoryDateRange, String engineSize, String engineSizeRange, String uvcId, String highwayMpgRange, String cityMpgRange, String combinedMpgRange, Boolean owned, String minPhotoLinks, String minPhotoLinksCached, String match, Boolean ulezCompliant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/car/uk/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postal_code", postalCode));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (yearRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_range", yearRange));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (variant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variant", variant));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (plot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plot", plot));
        }

        if (nodedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodedup", nodedup));
        }

        if (dedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedup", dedup));
        }

        if (county != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("county", county));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (stockNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_no", stockNo));
        }

        if (domRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_range", domRange));
        }

        if (domActiveRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_active_range", domActiveRange));
        }

        if (dom180Range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_180_range", dom180Range));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (firstSeenAtSourceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_range", firstSeenAtSourceRange));
        }

        if (firstSeenAtMcRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_range", firstSeenAtMcRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        if (firstSeenAtSourceDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_days", firstSeenAtSourceDays));
        }

        if (firstSeenAtMcDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_days", firstSeenAtMcDays));
        }

        if (co2Emissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("co2_emissions", co2Emissions));
        }

        if (insuranceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("insurance_group", insuranceGroup));
        }

        if (vehicleRegistrationMark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_registration_mark", vehicleRegistrationMark));
        }

        if (vehicleRegistrationDateRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_registration_date_range", vehicleRegistrationDateRange));
        }

        if (numOwners != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num_owners", numOwners));
        }

        if (inventoryCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_count_range", inventoryCountRange));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (excludeSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_sources", excludeSources));
        }

        if (excludeDealerIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_dealer_ids", excludeDealerIds));
        }

        if (inTransit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_transit", inTransit));
        }

        if (includeNonVinListings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_non_vin_listings", includeNonVinListings));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (photoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links", photoLinks));
        }

        if (photoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links_cached", photoLinksCached));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (writeOffCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("write_off_category", writeOffCategory));
        }

        if (excludeWriteOffCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_write_off_category", excludeWriteOffCategory));
        }

        if (fcaStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fca_status", fcaStatus));
        }

        if (seatingCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seating_capacity", seatingCapacity));
        }

        if (vrm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrm", vrm));
        }

        if (powertrainType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("powertrain_type", powertrainType));
        }

        if (clientFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_filters", clientFilters));
        }

        if (boost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boost", boost));
        }

        if (carLocationSellerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_location_seller_name", carLocationSellerName));
        }

        if (carLocationStreet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_location_street", carLocationStreet));
        }

        if (carLocationCity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_location_city", carLocationCity));
        }

        if (carLocationCounty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_location_county", carLocationCounty));
        }

        if (carLocationZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_location_zip", carLocationZip));
        }

        if (carLocationLatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_location_latitude", carLocationLatitude));
        }

        if (carLocationLongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_location_longitude", carLocationLongitude));
        }

        if (priceChange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_change", priceChange));
        }

        if (priceChangeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_change_range", priceChangeRange));
        }

        if (activeInventoryDateRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active_inventory_date_range", activeInventoryDateRange));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineSizeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size_range", engineSizeRange));
        }

        if (uvcId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uvc_id", uvcId));
        }

        if (highwayMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg_range", highwayMpgRange));
        }

        if (cityMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg_range", cityMpgRange));
        }

        if (combinedMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("combined_mpg_range", combinedMpgRange));
        }

        if (owned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owned", owned));
        }

        if (minPhotoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_photo_links", minPhotoLinks));
        }

        if (minPhotoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_photo_links_cached", minPhotoLinksCached));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (ulezCompliant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ulez_compliant", ulezCompliant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String postalCode, String zip, String carType, String year, String yearRange, String make, String model, String variant, String trim, String bodyType, String ymmt, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String engine, String milesRange, String priceRange, String msrpRange, String sortBy, String sortOrder, Integer rows, Integer start, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, String county, String state, String city, String fuelType, String stockNo, String domRange, String domActiveRange, String dom180Range, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String co2Emissions, String insuranceGroup, String vehicleRegistrationMark, String vehicleRegistrationDateRange, String numOwners, String inventoryCountRange, String source, String dealerId, String excludeSources, String excludeDealerIds, String inTransit, Boolean includeNonVinListings, String cylinders, Boolean photoLinks, Boolean photoLinksCached, String baseExteriorColor, String baseInteriorColor, String writeOffCategory, String excludeWriteOffCategory, String fcaStatus, String seatingCapacity, String vrm, String powertrainType, Boolean clientFilters, Boolean boost, String carLocationSellerName, String carLocationStreet, String carLocationCity, String carLocationCounty, String carLocationZip, Double carLocationLatitude, Double carLocationLongitude, String priceChange, String priceChangeRange, String activeInventoryDateRange, String engineSize, String engineSizeRange, String uvcId, String highwayMpgRange, String cityMpgRange, String combinedMpgRange, Boolean owned, String minPhotoLinks, String minPhotoLinksCached, String match, Boolean ulezCompliant, final ApiCallback _callback) throws ApiException {
        return searchCall(apiKey, appendApiKey, latitude, longitude, radius, postalCode, zip, carType, year, yearRange, make, model, variant, trim, bodyType, ymmt, transmission, doors, drivetrain, exteriorColor, interiorColor, engine, milesRange, priceRange, msrpRange, sortBy, sortOrder, rows, start, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, county, state, city, fuelType, stockNo, domRange, domActiveRange, dom180Range, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, co2Emissions, insuranceGroup, vehicleRegistrationMark, vehicleRegistrationDateRange, numOwners, inventoryCountRange, source, dealerId, excludeSources, excludeDealerIds, inTransit, includeNonVinListings, cylinders, photoLinks, photoLinksCached, baseExteriorColor, baseInteriorColor, writeOffCategory, excludeWriteOffCategory, fcaStatus, seatingCapacity, vrm, powertrainType, clientFilters, boost, carLocationSellerName, carLocationStreet, carLocationCity, carLocationCounty, carLocationZip, carLocationLatitude, carLocationLongitude, priceChange, priceChangeRange, activeInventoryDateRange, engineSize, engineSizeRange, uvcId, highwayMpgRange, cityMpgRange, combinedMpgRange, owned, minPhotoLinks, minPhotoLinksCached, match, ulezCompliant, _callback);

    }

    /**
     * Gets active car listings in UK for the given search criteria
     * Search cars for sale in UK
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to false)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param carType Car type. Allowed values are - new / used (optional)
     * @param year To filter listing on their year (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param variant To filter listing on their variant (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to uk)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param co2Emissions CO2 emissions (optional)
     * @param insuranceGroup Insurance Group (optional)
     * @param vehicleRegistrationMark Vehicle Registration Mark (optional)
     * @param vehicleRegistrationDateRange Vehicle registration date range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param numOwners Number of owners. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param writeOffCategory write off category (optional)
     * @param excludeWriteOffCategory To exclude write off category (optional)
     * @param fcaStatus To filter on fca status (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param vrm To filter on vrm (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param clientFilters Flag to add explicit filters set on client level in solr (optional, default to true)
     * @param boost Flag to sort listings based on client filter score in solr (optional, default to true)
     * @param carLocationSellerName Filter cars on seller name (optional)
     * @param carLocationStreet Filter cars on street name (optional)
     * @param carLocationCity Filter cars on city (optional)
     * @param carLocationCounty Filter cars on county (optional)
     * @param carLocationZip To filter listing on car ZIP around which they are listed (optional)
     * @param carLocationLatitude Latitude component of car location (optional)
     * @param carLocationLongitude Longitude component of car location (optional)
     * @param priceChange Query to filter listings based on their positive and negative price change (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param uvcId To filter on uvc id (optional)
     * @param highwayMpgRange Highway mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param combinedMpgRange Combined mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param ulezCompliant Filter listings based on drive into ultra low emmition zone (optional)
     * @return UKSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UKSearchResponse search(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String postalCode, String zip, String carType, String year, String yearRange, String make, String model, String variant, String trim, String bodyType, String ymmt, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String engine, String milesRange, String priceRange, String msrpRange, String sortBy, String sortOrder, Integer rows, Integer start, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, String county, String state, String city, String fuelType, String stockNo, String domRange, String domActiveRange, String dom180Range, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String co2Emissions, String insuranceGroup, String vehicleRegistrationMark, String vehicleRegistrationDateRange, String numOwners, String inventoryCountRange, String source, String dealerId, String excludeSources, String excludeDealerIds, String inTransit, Boolean includeNonVinListings, String cylinders, Boolean photoLinks, Boolean photoLinksCached, String baseExteriorColor, String baseInteriorColor, String writeOffCategory, String excludeWriteOffCategory, String fcaStatus, String seatingCapacity, String vrm, String powertrainType, Boolean clientFilters, Boolean boost, String carLocationSellerName, String carLocationStreet, String carLocationCity, String carLocationCounty, String carLocationZip, Double carLocationLatitude, Double carLocationLongitude, String priceChange, String priceChangeRange, String activeInventoryDateRange, String engineSize, String engineSizeRange, String uvcId, String highwayMpgRange, String cityMpgRange, String combinedMpgRange, Boolean owned, String minPhotoLinks, String minPhotoLinksCached, String match, Boolean ulezCompliant) throws ApiException {
        ApiResponse<UKSearchResponse> localVarResp = searchWithHttpInfo(apiKey, appendApiKey, latitude, longitude, radius, postalCode, zip, carType, year, yearRange, make, model, variant, trim, bodyType, ymmt, transmission, doors, drivetrain, exteriorColor, interiorColor, engine, milesRange, priceRange, msrpRange, sortBy, sortOrder, rows, start, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, county, state, city, fuelType, stockNo, domRange, domActiveRange, dom180Range, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, co2Emissions, insuranceGroup, vehicleRegistrationMark, vehicleRegistrationDateRange, numOwners, inventoryCountRange, source, dealerId, excludeSources, excludeDealerIds, inTransit, includeNonVinListings, cylinders, photoLinks, photoLinksCached, baseExteriorColor, baseInteriorColor, writeOffCategory, excludeWriteOffCategory, fcaStatus, seatingCapacity, vrm, powertrainType, clientFilters, boost, carLocationSellerName, carLocationStreet, carLocationCity, carLocationCounty, carLocationZip, carLocationLatitude, carLocationLongitude, priceChange, priceChangeRange, activeInventoryDateRange, engineSize, engineSizeRange, uvcId, highwayMpgRange, cityMpgRange, combinedMpgRange, owned, minPhotoLinks, minPhotoLinksCached, match, ulezCompliant);
        return localVarResp.getData();
    }

    /**
     * Gets active car listings in UK for the given search criteria
     * Search cars for sale in UK
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to false)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param carType Car type. Allowed values are - new / used (optional)
     * @param year To filter listing on their year (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param variant To filter listing on their variant (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to uk)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param co2Emissions CO2 emissions (optional)
     * @param insuranceGroup Insurance Group (optional)
     * @param vehicleRegistrationMark Vehicle Registration Mark (optional)
     * @param vehicleRegistrationDateRange Vehicle registration date range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param numOwners Number of owners. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param writeOffCategory write off category (optional)
     * @param excludeWriteOffCategory To exclude write off category (optional)
     * @param fcaStatus To filter on fca status (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param vrm To filter on vrm (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param clientFilters Flag to add explicit filters set on client level in solr (optional, default to true)
     * @param boost Flag to sort listings based on client filter score in solr (optional, default to true)
     * @param carLocationSellerName Filter cars on seller name (optional)
     * @param carLocationStreet Filter cars on street name (optional)
     * @param carLocationCity Filter cars on city (optional)
     * @param carLocationCounty Filter cars on county (optional)
     * @param carLocationZip To filter listing on car ZIP around which they are listed (optional)
     * @param carLocationLatitude Latitude component of car location (optional)
     * @param carLocationLongitude Longitude component of car location (optional)
     * @param priceChange Query to filter listings based on their positive and negative price change (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param uvcId To filter on uvc id (optional)
     * @param highwayMpgRange Highway mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param combinedMpgRange Combined mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param ulezCompliant Filter listings based on drive into ultra low emmition zone (optional)
     * @return ApiResponse&lt;UKSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UKSearchResponse> searchWithHttpInfo(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String postalCode, String zip, String carType, String year, String yearRange, String make, String model, String variant, String trim, String bodyType, String ymmt, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String engine, String milesRange, String priceRange, String msrpRange, String sortBy, String sortOrder, Integer rows, Integer start, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, String county, String state, String city, String fuelType, String stockNo, String domRange, String domActiveRange, String dom180Range, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String co2Emissions, String insuranceGroup, String vehicleRegistrationMark, String vehicleRegistrationDateRange, String numOwners, String inventoryCountRange, String source, String dealerId, String excludeSources, String excludeDealerIds, String inTransit, Boolean includeNonVinListings, String cylinders, Boolean photoLinks, Boolean photoLinksCached, String baseExteriorColor, String baseInteriorColor, String writeOffCategory, String excludeWriteOffCategory, String fcaStatus, String seatingCapacity, String vrm, String powertrainType, Boolean clientFilters, Boolean boost, String carLocationSellerName, String carLocationStreet, String carLocationCity, String carLocationCounty, String carLocationZip, Double carLocationLatitude, Double carLocationLongitude, String priceChange, String priceChangeRange, String activeInventoryDateRange, String engineSize, String engineSizeRange, String uvcId, String highwayMpgRange, String cityMpgRange, String combinedMpgRange, Boolean owned, String minPhotoLinks, String minPhotoLinksCached, String match, Boolean ulezCompliant) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, postalCode, zip, carType, year, yearRange, make, model, variant, trim, bodyType, ymmt, transmission, doors, drivetrain, exteriorColor, interiorColor, engine, milesRange, priceRange, msrpRange, sortBy, sortOrder, rows, start, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, county, state, city, fuelType, stockNo, domRange, domActiveRange, dom180Range, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, co2Emissions, insuranceGroup, vehicleRegistrationMark, vehicleRegistrationDateRange, numOwners, inventoryCountRange, source, dealerId, excludeSources, excludeDealerIds, inTransit, includeNonVinListings, cylinders, photoLinks, photoLinksCached, baseExteriorColor, baseInteriorColor, writeOffCategory, excludeWriteOffCategory, fcaStatus, seatingCapacity, vrm, powertrainType, clientFilters, boost, carLocationSellerName, carLocationStreet, carLocationCity, carLocationCounty, carLocationZip, carLocationLatitude, carLocationLongitude, priceChange, priceChangeRange, activeInventoryDateRange, engineSize, engineSizeRange, uvcId, highwayMpgRange, cityMpgRange, combinedMpgRange, owned, minPhotoLinks, minPhotoLinksCached, match, ulezCompliant, null);
        Type localVarReturnType = new TypeToken<UKSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets active car listings in UK for the given search criteria (asynchronously)
     * Search cars for sale in UK
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to false)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param carType Car type. Allowed values are - new / used (optional)
     * @param year To filter listing on their year (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param variant To filter listing on their variant (optional)
     * @param trim To filter listing on their trim (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to uk)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param county To filter listing on county in which they are listed (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param co2Emissions CO2 emissions (optional)
     * @param insuranceGroup Insurance Group (optional)
     * @param vehicleRegistrationMark Vehicle Registration Mark (optional)
     * @param vehicleRegistrationDateRange Vehicle registration date range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param numOwners Number of owners. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param writeOffCategory write off category (optional)
     * @param excludeWriteOffCategory To exclude write off category (optional)
     * @param fcaStatus To filter on fca status (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param vrm To filter on vrm (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param clientFilters Flag to add explicit filters set on client level in solr (optional, default to true)
     * @param boost Flag to sort listings based on client filter score in solr (optional, default to true)
     * @param carLocationSellerName Filter cars on seller name (optional)
     * @param carLocationStreet Filter cars on street name (optional)
     * @param carLocationCity Filter cars on city (optional)
     * @param carLocationCounty Filter cars on county (optional)
     * @param carLocationZip To filter listing on car ZIP around which they are listed (optional)
     * @param carLocationLatitude Latitude component of car location (optional)
     * @param carLocationLongitude Longitude component of car location (optional)
     * @param priceChange Query to filter listings based on their positive and negative price change (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param uvcId To filter on uvc id (optional)
     * @param highwayMpgRange Highway mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param combinedMpgRange Combined mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param ulezCompliant Filter listings based on drive into ultra low emmition zone (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String postalCode, String zip, String carType, String year, String yearRange, String make, String model, String variant, String trim, String bodyType, String ymmt, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String engine, String milesRange, String priceRange, String msrpRange, String sortBy, String sortOrder, Integer rows, Integer start, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, String county, String state, String city, String fuelType, String stockNo, String domRange, String domActiveRange, String dom180Range, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String co2Emissions, String insuranceGroup, String vehicleRegistrationMark, String vehicleRegistrationDateRange, String numOwners, String inventoryCountRange, String source, String dealerId, String excludeSources, String excludeDealerIds, String inTransit, Boolean includeNonVinListings, String cylinders, Boolean photoLinks, Boolean photoLinksCached, String baseExteriorColor, String baseInteriorColor, String writeOffCategory, String excludeWriteOffCategory, String fcaStatus, String seatingCapacity, String vrm, String powertrainType, Boolean clientFilters, Boolean boost, String carLocationSellerName, String carLocationStreet, String carLocationCity, String carLocationCounty, String carLocationZip, Double carLocationLatitude, Double carLocationLongitude, String priceChange, String priceChangeRange, String activeInventoryDateRange, String engineSize, String engineSizeRange, String uvcId, String highwayMpgRange, String cityMpgRange, String combinedMpgRange, Boolean owned, String minPhotoLinks, String minPhotoLinksCached, String match, Boolean ulezCompliant, final ApiCallback<UKSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, postalCode, zip, carType, year, yearRange, make, model, variant, trim, bodyType, ymmt, transmission, doors, drivetrain, exteriorColor, interiorColor, engine, milesRange, priceRange, msrpRange, sortBy, sortOrder, rows, start, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, county, state, city, fuelType, stockNo, domRange, domActiveRange, dom180Range, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, co2Emissions, insuranceGroup, vehicleRegistrationMark, vehicleRegistrationDateRange, numOwners, inventoryCountRange, source, dealerId, excludeSources, excludeDealerIds, inTransit, includeNonVinListings, cylinders, photoLinks, photoLinksCached, baseExteriorColor, baseInteriorColor, writeOffCategory, excludeWriteOffCategory, fcaStatus, seatingCapacity, vrm, powertrainType, clientFilters, boost, carLocationSellerName, carLocationStreet, carLocationCity, carLocationCounty, carLocationZip, carLocationLatitude, carLocationLongitude, priceChange, priceChangeRange, activeInventoryDateRange, engineSize, engineSizeRange, uvcId, highwayMpgRange, cityMpgRange, combinedMpgRange, owned, minPhotoLinks, minPhotoLinksCached, match, ulezCompliant, _callback);
        Type localVarReturnType = new TypeToken<UKSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCarActiveGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param priceChange Query to filter listings based on their positive and negative price change (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param highValueFeatures To filter listings on their high_value_features. Results will be intersection of provided HVFs (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param clientFilters Flag to add explicit filters set on client level in solr (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCarActiveGetCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String source, String state, String city, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String dealerId, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String powertrainType, String priceChange, String priceChangeRange, String activeInventoryDateRange, String engineSizeRange, String highValueFeatures, String minPhotoLinks, String minPhotoLinksCached, Boolean clientFilters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/car/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (includeLease != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_lease", includeLease));
        }

        if (includeFinance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_finance", includeFinance));
        }

        if (leaseTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_term", leaseTerm));
        }

        if (leaseDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_down_payment", leaseDownPayment));
        }

        if (leaseEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_emp", leaseEmp));
        }

        if (financeLoanTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_term", financeLoanTerm));
        }

        if (financeLoanApr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_apr", financeLoanApr));
        }

        if (financeEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_emp", financeEmp));
        }

        if (financeDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment", financeDownPayment));
        }

        if (financeDownPaymentPer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment_per", financeDownPaymentPer));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (carfax1Owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_1_owner", carfax1Owner));
        }

        if (carfaxCleanTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_clean_title", carfaxCleanTitle));
        }

        if (yearRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_range", yearRange));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (vins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vins", vins));
        }

        if (taxonomyVins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxonomy_vins", taxonomyVins));
        }

        if (mm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mm", mm));
        }

        if (ymm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymm", ymm));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineAspiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_aspiration", engineAspiration));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (highwayMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg_range", highwayMpgRange));
        }

        if (cityMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg_range", cityMpgRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (domRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_range", domRange));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (includeNonVinListings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_non_vin_listings", includeNonVinListings));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (plot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plot", plot));
        }

        if (nodedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodedup", nodedup));
        }

        if (dedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedup", dedup));
        }

        if (owned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owned", owned));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (trimO != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_o", trimO));
        }

        if (trimR != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_r", trimR));
        }

        if (domActiveRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_active_range", domActiveRange));
        }

        if (dom180Range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_180_range", dom180Range));
        }

        if (excludeCertified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_certified", excludeCertified));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (photoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links", photoLinks));
        }

        if (photoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links_cached", photoLinksCached));
        }

        if (stockNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_no", stockNo));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (firstSeenAtSourceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_range", firstSeenAtSourceRange));
        }

        if (firstSeenAtMcRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_range", firstSeenAtMcRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        if (firstSeenAtSourceDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_days", firstSeenAtSourceDays));
        }

        if (firstSeenAtMcDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_days", firstSeenAtMcDays));
        }

        if (includeRelevantLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_relevant_links", includeRelevantLinks));
        }

        if (inventoryCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_count_range", inventoryCountRange));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (excludeDealerIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_dealer_ids", excludeDealerIds));
        }

        if (excludeSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_sources", excludeSources));
        }

        if (inTransit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_transit", inTransit));
        }

        if (seatingCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seating_capacity", seatingCapacity));
        }

        if (powertrainType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("powertrain_type", powertrainType));
        }

        if (priceChange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_change", priceChange));
        }

        if (priceChangeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_change_range", priceChangeRange));
        }

        if (activeInventoryDateRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active_inventory_date_range", activeInventoryDateRange));
        }

        if (engineSizeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size_range", engineSizeRange));
        }

        if (highValueFeatures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("high_value_features", highValueFeatures));
        }

        if (minPhotoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_photo_links", minPhotoLinks));
        }

        if (minPhotoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_photo_links_cached", minPhotoLinksCached));
        }

        if (clientFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_filters", clientFilters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCarActiveGetValidateBeforeCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String source, String state, String city, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String dealerId, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String powertrainType, String priceChange, String priceChangeRange, String activeInventoryDateRange, String engineSizeRange, String highValueFeatures, String minPhotoLinks, String minPhotoLinksCached, Boolean clientFilters, final ApiCallback _callback) throws ApiException {
        return searchCarActiveGetCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, source, state, city, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, dealerId, excludeDealerIds, excludeSources, inTransit, seatingCapacity, powertrainType, priceChange, priceChangeRange, activeInventoryDateRange, engineSizeRange, highValueFeatures, minPhotoLinks, minPhotoLinksCached, clientFilters, _callback);

    }

    /**
     * Gets active car listings for the given search criteria
     * This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param priceChange Query to filter listings based on their positive and negative price change (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param highValueFeatures To filter listings on their high_value_features. Results will be intersection of provided HVFs (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param clientFilters Flag to add explicit filters set on client level in solr (optional, default to true)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SearchResponse searchCarActiveGet(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String source, String state, String city, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String dealerId, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String powertrainType, String priceChange, String priceChangeRange, String activeInventoryDateRange, String engineSizeRange, String highValueFeatures, String minPhotoLinks, String minPhotoLinksCached, Boolean clientFilters) throws ApiException {
        ApiResponse<SearchResponse> localVarResp = searchCarActiveGetWithHttpInfo(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, source, state, city, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, dealerId, excludeDealerIds, excludeSources, inTransit, seatingCapacity, powertrainType, priceChange, priceChangeRange, activeInventoryDateRange, engineSizeRange, highValueFeatures, minPhotoLinks, minPhotoLinksCached, clientFilters);
        return localVarResp.getData();
    }

    /**
     * Gets active car listings for the given search criteria
     * This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param priceChange Query to filter listings based on their positive and negative price change (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param highValueFeatures To filter listings on their high_value_features. Results will be intersection of provided HVFs (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param clientFilters Flag to add explicit filters set on client level in solr (optional, default to true)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResponse> searchCarActiveGetWithHttpInfo(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String source, String state, String city, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String dealerId, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String powertrainType, String priceChange, String priceChangeRange, String activeInventoryDateRange, String engineSizeRange, String highValueFeatures, String minPhotoLinks, String minPhotoLinksCached, Boolean clientFilters) throws ApiException {
        okhttp3.Call localVarCall = searchCarActiveGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, source, state, city, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, dealerId, excludeDealerIds, excludeSources, inTransit, seatingCapacity, powertrainType, priceChange, priceChangeRange, activeInventoryDateRange, engineSizeRange, highValueFeatures, minPhotoLinks, minPhotoLinksCached, clientFilters, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets active car listings for the given search criteria (asynchronously)
     * This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param powertrainType To filter on powertrain_type (optional)
     * @param priceChange Query to filter listings based on their positive and negative price change (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param highValueFeatures To filter listings on their high_value_features. Results will be intersection of provided HVFs (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param clientFilters Flag to add explicit filters set on client level in solr (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCarActiveGetAsync(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String source, String state, String city, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String dealerId, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String powertrainType, String priceChange, String priceChangeRange, String activeInventoryDateRange, String engineSizeRange, String highValueFeatures, String minPhotoLinks, String minPhotoLinksCached, Boolean clientFilters, final ApiCallback<SearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCarActiveGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, source, state, city, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, dealerId, excludeDealerIds, excludeSources, inTransit, seatingCapacity, powertrainType, priceChange, priceChangeRange, activeInventoryDateRange, engineSizeRange, highValueFeatures, minPhotoLinks, minPhotoLinksCached, clientFilters, _callback);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCarAuctionActiveGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param titleType To filter on title type (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all auction cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCarAuctionActiveGetCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String source, String dealerId, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String excludeDealerIds, String excludeSources, String inTransit, String titleType, String seatingCapacity, String engineSizeRange, String minPhotoLinks, String minPhotoLinksCached, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/car/auction/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (includeLease != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_lease", includeLease));
        }

        if (includeFinance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_finance", includeFinance));
        }

        if (leaseTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_term", leaseTerm));
        }

        if (leaseDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_down_payment", leaseDownPayment));
        }

        if (leaseEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_emp", leaseEmp));
        }

        if (financeLoanTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_term", financeLoanTerm));
        }

        if (financeLoanApr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_apr", financeLoanApr));
        }

        if (financeEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_emp", financeEmp));
        }

        if (financeDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment", financeDownPayment));
        }

        if (financeDownPaymentPer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment_per", financeDownPaymentPer));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (carfax1Owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_1_owner", carfax1Owner));
        }

        if (carfaxCleanTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_clean_title", carfaxCleanTitle));
        }

        if (yearRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_range", yearRange));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (vins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vins", vins));
        }

        if (taxonomyVins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxonomy_vins", taxonomyVins));
        }

        if (mm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mm", mm));
        }

        if (ymm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymm", ymm));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineAspiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_aspiration", engineAspiration));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (highwayMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg_range", highwayMpgRange));
        }

        if (cityMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg_range", cityMpgRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (domRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_range", domRange));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (includeNonVinListings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_non_vin_listings", includeNonVinListings));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (plot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plot", plot));
        }

        if (nodedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodedup", nodedup));
        }

        if (dedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedup", dedup));
        }

        if (owned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owned", owned));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (trimO != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_o", trimO));
        }

        if (trimR != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_r", trimR));
        }

        if (domActiveRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_active_range", domActiveRange));
        }

        if (dom180Range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_180_range", dom180Range));
        }

        if (excludeCertified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_certified", excludeCertified));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (photoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links", photoLinks));
        }

        if (photoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links_cached", photoLinksCached));
        }

        if (stockNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_no", stockNo));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (firstSeenAtSourceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_range", firstSeenAtSourceRange));
        }

        if (firstSeenAtMcRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_range", firstSeenAtMcRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        if (firstSeenAtSourceDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_days", firstSeenAtSourceDays));
        }

        if (firstSeenAtMcDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_days", firstSeenAtMcDays));
        }

        if (includeRelevantLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_relevant_links", includeRelevantLinks));
        }

        if (inventoryCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_count_range", inventoryCountRange));
        }

        if (excludeDealerIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_dealer_ids", excludeDealerIds));
        }

        if (excludeSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_sources", excludeSources));
        }

        if (inTransit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_transit", inTransit));
        }

        if (titleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_type", titleType));
        }

        if (seatingCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seating_capacity", seatingCapacity));
        }

        if (engineSizeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size_range", engineSizeRange));
        }

        if (minPhotoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_photo_links", minPhotoLinks));
        }

        if (minPhotoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_photo_links_cached", minPhotoLinksCached));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCarAuctionActiveGetValidateBeforeCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String source, String dealerId, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String excludeDealerIds, String excludeSources, String inTransit, String titleType, String seatingCapacity, String engineSizeRange, String minPhotoLinks, String minPhotoLinksCached, final ApiCallback _callback) throws ApiException {
        return searchCarAuctionActiveGetCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, source, dealerId, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, excludeDealerIds, excludeSources, inTransit, titleType, seatingCapacity, engineSizeRange, minPhotoLinks, minPhotoLinksCached, _callback);

    }

    /**
     * Gets active auction car listings for the given search criteria
     * This API produces a list of currently active auction cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param titleType To filter on title type (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all auction cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SearchResponse searchCarAuctionActiveGet(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String source, String dealerId, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String excludeDealerIds, String excludeSources, String inTransit, String titleType, String seatingCapacity, String engineSizeRange, String minPhotoLinks, String minPhotoLinksCached) throws ApiException {
        ApiResponse<SearchResponse> localVarResp = searchCarAuctionActiveGetWithHttpInfo(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, source, dealerId, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, excludeDealerIds, excludeSources, inTransit, titleType, seatingCapacity, engineSizeRange, minPhotoLinks, minPhotoLinksCached);
        return localVarResp.getData();
    }

    /**
     * Gets active auction car listings for the given search criteria
     * This API produces a list of currently active auction cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param titleType To filter on title type (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all auction cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResponse> searchCarAuctionActiveGetWithHttpInfo(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String source, String dealerId, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String excludeDealerIds, String excludeSources, String inTransit, String titleType, String seatingCapacity, String engineSizeRange, String minPhotoLinks, String minPhotoLinksCached) throws ApiException {
        okhttp3.Call localVarCall = searchCarAuctionActiveGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, source, dealerId, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, excludeDealerIds, excludeSources, inTransit, titleType, seatingCapacity, engineSizeRange, minPhotoLinks, minPhotoLinksCached, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets active auction car listings for the given search criteria (asynchronously)
     * This API produces a list of currently active auction cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param titleType To filter on title type (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all auction cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCarAuctionActiveGetAsync(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String source, String dealerId, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String excludeDealerIds, String excludeSources, String inTransit, String titleType, String seatingCapacity, String engineSizeRange, String minPhotoLinks, String minPhotoLinksCached, final ApiCallback<SearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCarAuctionActiveGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, source, dealerId, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, excludeDealerIds, excludeSources, inTransit, titleType, seatingCapacity, engineSizeRange, minPhotoLinks, minPhotoLinksCached, _callback);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCarFsboActiveGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param excludeDealerListings A list of fsbo listings to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all FSBO cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCarFsboActiveGetCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String source, String dealerId, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String excludeDealerIds, String excludeSources, Boolean excludeDealerListings, String inTransit, String seatingCapacity, String engineSizeRange, String minPhotoLinks, String minPhotoLinksCached, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/car/fsbo/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (includeLease != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_lease", includeLease));
        }

        if (includeFinance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_finance", includeFinance));
        }

        if (leaseTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_term", leaseTerm));
        }

        if (leaseDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_down_payment", leaseDownPayment));
        }

        if (leaseEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_emp", leaseEmp));
        }

        if (financeLoanTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_term", financeLoanTerm));
        }

        if (financeLoanApr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_apr", financeLoanApr));
        }

        if (financeEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_emp", financeEmp));
        }

        if (financeDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment", financeDownPayment));
        }

        if (financeDownPaymentPer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment_per", financeDownPaymentPer));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (carfax1Owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_1_owner", carfax1Owner));
        }

        if (carfaxCleanTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_clean_title", carfaxCleanTitle));
        }

        if (yearRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_range", yearRange));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (vins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vins", vins));
        }

        if (taxonomyVins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxonomy_vins", taxonomyVins));
        }

        if (mm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mm", mm));
        }

        if (ymm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymm", ymm));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineAspiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_aspiration", engineAspiration));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (highwayMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg_range", highwayMpgRange));
        }

        if (cityMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg_range", cityMpgRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (domRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_range", domRange));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (includeNonVinListings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_non_vin_listings", includeNonVinListings));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (plot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plot", plot));
        }

        if (nodedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodedup", nodedup));
        }

        if (dedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedup", dedup));
        }

        if (owned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owned", owned));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (trimO != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_o", trimO));
        }

        if (trimR != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_r", trimR));
        }

        if (domActiveRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_active_range", domActiveRange));
        }

        if (dom180Range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_180_range", dom180Range));
        }

        if (excludeCertified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_certified", excludeCertified));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (photoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links", photoLinks));
        }

        if (photoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links_cached", photoLinksCached));
        }

        if (stockNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_no", stockNo));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (firstSeenAtSourceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_range", firstSeenAtSourceRange));
        }

        if (firstSeenAtMcRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_range", firstSeenAtMcRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        if (firstSeenAtSourceDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_days", firstSeenAtSourceDays));
        }

        if (firstSeenAtMcDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_days", firstSeenAtMcDays));
        }

        if (includeRelevantLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_relevant_links", includeRelevantLinks));
        }

        if (inventoryCountRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_count_range", inventoryCountRange));
        }

        if (excludeDealerIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_dealer_ids", excludeDealerIds));
        }

        if (excludeSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_sources", excludeSources));
        }

        if (excludeDealerListings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_dealer_listings", excludeDealerListings));
        }

        if (inTransit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_transit", inTransit));
        }

        if (seatingCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seating_capacity", seatingCapacity));
        }

        if (engineSizeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size_range", engineSizeRange));
        }

        if (minPhotoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_photo_links", minPhotoLinks));
        }

        if (minPhotoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_photo_links_cached", minPhotoLinksCached));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCarFsboActiveGetValidateBeforeCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String source, String dealerId, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String excludeDealerIds, String excludeSources, Boolean excludeDealerListings, String inTransit, String seatingCapacity, String engineSizeRange, String minPhotoLinks, String minPhotoLinksCached, final ApiCallback _callback) throws ApiException {
        return searchCarFsboActiveGetCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, source, dealerId, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, excludeDealerIds, excludeSources, excludeDealerListings, inTransit, seatingCapacity, engineSizeRange, minPhotoLinks, minPhotoLinksCached, _callback);

    }

    /**
     * Gets active private party car listings for the given search criteria
     * This API produces a list of currently active FSBO cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param excludeDealerListings A list of fsbo listings to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all FSBO cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SearchResponse searchCarFsboActiveGet(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String source, String dealerId, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String excludeDealerIds, String excludeSources, Boolean excludeDealerListings, String inTransit, String seatingCapacity, String engineSizeRange, String minPhotoLinks, String minPhotoLinksCached) throws ApiException {
        ApiResponse<SearchResponse> localVarResp = searchCarFsboActiveGetWithHttpInfo(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, source, dealerId, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, excludeDealerIds, excludeSources, excludeDealerListings, inTransit, seatingCapacity, engineSizeRange, minPhotoLinks, minPhotoLinksCached);
        return localVarResp.getData();
    }

    /**
     * Gets active private party car listings for the given search criteria
     * This API produces a list of currently active FSBO cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param excludeDealerListings A list of fsbo listings to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all FSBO cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResponse> searchCarFsboActiveGetWithHttpInfo(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String source, String dealerId, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String excludeDealerIds, String excludeSources, Boolean excludeDealerListings, String inTransit, String seatingCapacity, String engineSizeRange, String minPhotoLinks, String minPhotoLinksCached) throws ApiException {
        okhttp3.Call localVarCall = searchCarFsboActiveGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, source, dealerId, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, excludeDealerIds, excludeSources, excludeDealerListings, inTransit, seatingCapacity, engineSizeRange, minPhotoLinks, minPhotoLinksCached, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets active private party car listings for the given search criteria (asynchronously)
     * This API produces a list of currently active FSBO cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param mm Make-Model concatenated string. To help passing the results of auto-complete API on mm field, use this parameter and pass in the selected value as is (optional)
     * @param ymm Year-Make-Model concatenated string. To help passing the results of auto-complete API on ymm field, use this parameter and pass in the selected value as is (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param source To filter listing on their source only for widget requests (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param inventoryCountRange Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param excludeDealerListings A list of fsbo listings to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param minPhotoLinks Filter listings based by number of photo links within given range (optional)
     * @param minPhotoLinksCached Filter listings based by number of cached photo links within given range (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all FSBO cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCarFsboActiveGetAsync(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String vin, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String mm, String ymm, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String msaCode, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String source, String dealerId, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, Boolean includeRelevantLinks, String inventoryCountRange, String excludeDealerIds, String excludeSources, Boolean excludeDealerListings, String inTransit, String seatingCapacity, String engineSizeRange, String minPhotoLinks, String minPhotoLinksCached, final ApiCallback<SearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCarFsboActiveGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, vin, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, mm, ymm, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, sortBy, sortOrder, rows, start, includeNonVinListings, msaCode, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, source, dealerId, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, includeRelevantLinks, inventoryCountRange, excludeDealerIds, excludeSources, excludeDealerListings, inTransit, seatingCapacity, engineSizeRange, minPhotoLinks, minPhotoLinksCached, _callback);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCarRecentsGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param sold sold parameter to fetch only sold listings (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param expired Boolean falg to either fetch only the expired listings or active ones (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCarRecentsGetCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String vin, String source, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String msaCode, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, Boolean sold, Boolean includeRelevantLinks, String expired, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String activeInventoryDateRange, String engineSizeRange, String priceChangeRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/car/recents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (includeLease != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_lease", includeLease));
        }

        if (includeFinance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_finance", includeFinance));
        }

        if (leaseTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_term", leaseTerm));
        }

        if (leaseDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_down_payment", leaseDownPayment));
        }

        if (leaseEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_emp", leaseEmp));
        }

        if (financeLoanTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_term", financeLoanTerm));
        }

        if (financeLoanApr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_apr", financeLoanApr));
        }

        if (financeEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_emp", financeEmp));
        }

        if (financeDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment", financeDownPayment));
        }

        if (financeDownPaymentPer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment_per", financeDownPaymentPer));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (carfax1Owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_1_owner", carfax1Owner));
        }

        if (carfaxCleanTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_clean_title", carfaxCleanTitle));
        }

        if (yearRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_range", yearRange));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (vins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vins", vins));
        }

        if (taxonomyVins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxonomy_vins", taxonomyVins));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineAspiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_aspiration", engineAspiration));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (highwayMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg_range", highwayMpgRange));
        }

        if (cityMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg_range", cityMpgRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (domRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_range", domRange));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (firstSeenAtSourceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_range", firstSeenAtSourceRange));
        }

        if (firstSeenAtMcRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_range", firstSeenAtMcRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        if (firstSeenAtSourceDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_days", firstSeenAtSourceDays));
        }

        if (firstSeenAtMcDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_days", firstSeenAtMcDays));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (includeNonVinListings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_non_vin_listings", includeNonVinListings));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (plot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plot", plot));
        }

        if (nodedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodedup", nodedup));
        }

        if (dedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedup", dedup));
        }

        if (owned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owned", owned));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (dealerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_name", dealerName));
        }

        if (dealershipGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealership_group_name", dealershipGroupName));
        }

        if (trimO != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_o", trimO));
        }

        if (trimR != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_r", trimR));
        }

        if (domActiveRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_active_range", domActiveRange));
        }

        if (dom180Range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_180_range", dom180Range));
        }

        if (excludeCertified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_certified", excludeCertified));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (photoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links", photoLinks));
        }

        if (photoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links_cached", photoLinksCached));
        }

        if (stockNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_no", stockNo));
        }

        if (sold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sold", sold));
        }

        if (includeRelevantLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_relevant_links", includeRelevantLinks));
        }

        if (expired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expired", expired));
        }

        if (excludeDealerIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_dealer_ids", excludeDealerIds));
        }

        if (excludeSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_sources", excludeSources));
        }

        if (inTransit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_transit", inTransit));
        }

        if (seatingCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seating_capacity", seatingCapacity));
        }

        if (activeInventoryDateRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active_inventory_date_range", activeInventoryDateRange));
        }

        if (engineSizeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size_range", engineSizeRange));
        }

        if (priceChangeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_change_range", priceChangeRange));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCarRecentsGetValidateBeforeCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String vin, String source, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String msaCode, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, Boolean sold, Boolean includeRelevantLinks, String expired, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String activeInventoryDateRange, String engineSizeRange, String priceChangeRange, final ApiCallback _callback) throws ApiException {
        return searchCarRecentsGetCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, vin, source, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, sortBy, sortOrder, rows, start, includeNonVinListings, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, msaCode, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, sold, includeRelevantLinks, expired, excludeDealerIds, excludeSources, inTransit, seatingCapacity, activeInventoryDateRange, engineSizeRange, priceChangeRange, _callback);

    }

    /**
     * Gets Recent car listings for the given search criteria
     * This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param sold sold parameter to fetch only sold listings (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param expired Boolean falg to either fetch only the expired listings or active ones (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public SearchResponse searchCarRecentsGet(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String vin, String source, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String msaCode, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, Boolean sold, Boolean includeRelevantLinks, String expired, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String activeInventoryDateRange, String engineSizeRange, String priceChangeRange) throws ApiException {
        ApiResponse<SearchResponse> localVarResp = searchCarRecentsGetWithHttpInfo(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, vin, source, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, sortBy, sortOrder, rows, start, includeNonVinListings, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, msaCode, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, sold, includeRelevantLinks, expired, excludeDealerIds, excludeSources, inTransit, seatingCapacity, activeInventoryDateRange, engineSizeRange, priceChangeRange);
        return localVarResp.getData();
    }

    /**
     * Gets Recent car listings for the given search criteria
     * This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param sold sold parameter to fetch only sold listings (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param expired Boolean falg to either fetch only the expired listings or active ones (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResponse> searchCarRecentsGetWithHttpInfo(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String vin, String source, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String msaCode, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, Boolean sold, Boolean includeRelevantLinks, String expired, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String activeInventoryDateRange, String engineSizeRange, String priceChangeRange) throws ApiException {
        okhttp3.Call localVarCall = searchCarRecentsGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, vin, source, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, sortBy, sortOrder, rows, start, includeNonVinListings, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, msaCode, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, sold, includeRelevantLinks, expired, excludeDealerIds, excludeSources, inTransit, seatingCapacity, activeInventoryDateRange, engineSizeRange, priceChangeRange, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets Recent car listings for the given search criteria (asynchronously)
     * This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param vin To filter listing on their VIN (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param taxonomyVins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param sold sold parameter to fetch only sold listings (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param expired Boolean falg to either fetch only the expired listings or active ones (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCarRecentsGetAsync(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String vin, String source, String bodyType, String bodySubtype, String vehicleType, String vins, String taxonomyVins, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String msaCode, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, Boolean sold, Boolean includeRelevantLinks, String expired, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String activeInventoryDateRange, String engineSizeRange, String priceChangeRange, final ApiCallback<SearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCarRecentsGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, vin, source, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, sortBy, sortOrder, rows, start, includeNonVinListings, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, msaCode, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, sold, includeRelevantLinks, expired, excludeDealerIds, excludeSources, inTransit, seatingCapacity, activeInventoryDateRange, engineSizeRange, priceChangeRange, _callback);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCarUkRecentsGet
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param combinedMpgRange Combined mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to uk)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param sold sold parameter to fetch only sold listings (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param expired Boolean falg to either fetch only the expired listings or active ones (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param insuranceGroup Insurance Group (optional)
     * @param vrm To filter on vrm (optional)
     * @param numOwners Number of owners. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param variant To filter listing on their variant (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param writeOffCategory write off category (optional)
     * @param fcaStatus To filter on fca status (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCarUkRecentsGetCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String source, String bodyType, String bodySubtype, String vehicleType, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String combinedMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String msaCode, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, Boolean sold, Boolean includeRelevantLinks, String expired, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String insuranceGroup, String vrm, String numOwners, String variant, String postalCode, String writeOffCategory, String fcaStatus, String activeInventoryDateRange, String engineSizeRange, String priceChangeRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/car/uk/recents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (appendApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append_api_key", appendApiKey));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (includeLease != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_lease", includeLease));
        }

        if (includeFinance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_finance", includeFinance));
        }

        if (leaseTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_term", leaseTerm));
        }

        if (leaseDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_down_payment", leaseDownPayment));
        }

        if (leaseEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_emp", leaseEmp));
        }

        if (financeLoanTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_term", financeLoanTerm));
        }

        if (financeLoanApr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_apr", financeLoanApr));
        }

        if (financeEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_emp", financeEmp));
        }

        if (financeDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment", financeDownPayment));
        }

        if (financeDownPaymentPer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment_per", financeDownPaymentPer));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (carfax1Owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_1_owner", carfax1Owner));
        }

        if (carfaxCleanTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_clean_title", carfaxCleanTitle));
        }

        if (yearRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_range", yearRange));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineAspiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_aspiration", engineAspiration));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (highwayMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg_range", highwayMpgRange));
        }

        if (cityMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg_range", cityMpgRange));
        }

        if (combinedMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("combined_mpg_range", combinedMpgRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (domRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_range", domRange));
        }

        if (lastSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_range", lastSeenRange));
        }

        if (firstSeenRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_range", firstSeenRange));
        }

        if (firstSeenAtSourceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_range", firstSeenAtSourceRange));
        }

        if (firstSeenAtMcRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_range", firstSeenAtMcRange));
        }

        if (lastSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_seen_days", lastSeenDays));
        }

        if (firstSeenDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_days", firstSeenDays));
        }

        if (firstSeenAtSourceDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_source_days", firstSeenAtSourceDays));
        }

        if (firstSeenAtMcDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_seen_at_mc_days", firstSeenAtMcDays));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (includeNonVinListings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_non_vin_listings", includeNonVinListings));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (rangeFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range_facets", rangeFacets));
        }

        if (facetSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_sort", facetSort));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (plot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plot", plot));
        }

        if (nodedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodedup", nodedup));
        }

        if (dedup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dedup", dedup));
        }

        if (owned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owned", owned));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (dealerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_name", dealerName));
        }

        if (dealershipGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealership_group_name", dealershipGroupName));
        }

        if (trimO != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_o", trimO));
        }

        if (trimR != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_r", trimR));
        }

        if (domActiveRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_active_range", domActiveRange));
        }

        if (dom180Range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_180_range", dom180Range));
        }

        if (excludeCertified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_certified", excludeCertified));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (photoLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links", photoLinks));
        }

        if (photoLinksCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_links_cached", photoLinksCached));
        }

        if (stockNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_no", stockNo));
        }

        if (sold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sold", sold));
        }

        if (includeRelevantLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_relevant_links", includeRelevantLinks));
        }

        if (expired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expired", expired));
        }

        if (excludeDealerIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_dealer_ids", excludeDealerIds));
        }

        if (excludeSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_sources", excludeSources));
        }

        if (inTransit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_transit", inTransit));
        }

        if (seatingCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seating_capacity", seatingCapacity));
        }

        if (insuranceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("insurance_group", insuranceGroup));
        }

        if (vrm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrm", vrm));
        }

        if (numOwners != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num_owners", numOwners));
        }

        if (variant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variant", variant));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postal_code", postalCode));
        }

        if (writeOffCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("write_off_category", writeOffCategory));
        }

        if (fcaStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fca_status", fcaStatus));
        }

        if (activeInventoryDateRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active_inventory_date_range", activeInventoryDateRange));
        }

        if (engineSizeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size_range", engineSizeRange));
        }

        if (priceChangeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_change_range", priceChangeRange));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCarUkRecentsGetValidateBeforeCall(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String source, String bodyType, String bodySubtype, String vehicleType, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String combinedMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String msaCode, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, Boolean sold, Boolean includeRelevantLinks, String expired, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String insuranceGroup, String vrm, String numOwners, String variant, String postalCode, String writeOffCategory, String fcaStatus, String activeInventoryDateRange, String engineSizeRange, String priceChangeRange, final ApiCallback _callback) throws ApiException {
        return searchCarUkRecentsGetCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, source, bodyType, bodySubtype, vehicleType, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, combinedMpgRange, milesRange, priceRange, msrpRange, domRange, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, sortBy, sortOrder, rows, start, includeNonVinListings, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, msaCode, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, sold, includeRelevantLinks, expired, excludeDealerIds, excludeSources, inTransit, seatingCapacity, insuranceGroup, vrm, numOwners, variant, postalCode, writeOffCategory, fcaStatus, activeInventoryDateRange, engineSizeRange, priceChangeRange, _callback);

    }

    /**
     * Gets Recent UK car listings for the given search criteria
     * This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param combinedMpgRange Combined mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to uk)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param sold sold parameter to fetch only sold listings (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param expired Boolean falg to either fetch only the expired listings or active ones (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param insuranceGroup Insurance Group (optional)
     * @param vrm To filter on vrm (optional)
     * @param numOwners Number of owners. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param variant To filter listing on their variant (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param writeOffCategory write off category (optional)
     * @param fcaStatus To filter on fca status (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @return UKSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UKSearchResponse searchCarUkRecentsGet(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String source, String bodyType, String bodySubtype, String vehicleType, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String combinedMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String msaCode, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, Boolean sold, Boolean includeRelevantLinks, String expired, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String insuranceGroup, String vrm, String numOwners, String variant, String postalCode, String writeOffCategory, String fcaStatus, String activeInventoryDateRange, String engineSizeRange, String priceChangeRange) throws ApiException {
        ApiResponse<UKSearchResponse> localVarResp = searchCarUkRecentsGetWithHttpInfo(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, source, bodyType, bodySubtype, vehicleType, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, combinedMpgRange, milesRange, priceRange, msrpRange, domRange, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, sortBy, sortOrder, rows, start, includeNonVinListings, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, msaCode, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, sold, includeRelevantLinks, expired, excludeDealerIds, excludeSources, inTransit, seatingCapacity, insuranceGroup, vrm, numOwners, variant, postalCode, writeOffCategory, fcaStatus, activeInventoryDateRange, engineSizeRange, priceChangeRange);
        return localVarResp.getData();
    }

    /**
     * Gets Recent UK car listings for the given search criteria
     * This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param combinedMpgRange Combined mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to uk)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param sold sold parameter to fetch only sold listings (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param expired Boolean falg to either fetch only the expired listings or active ones (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param insuranceGroup Insurance Group (optional)
     * @param vrm To filter on vrm (optional)
     * @param numOwners Number of owners. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param variant To filter listing on their variant (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param writeOffCategory write off category (optional)
     * @param fcaStatus To filter on fca status (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @return ApiResponse&lt;UKSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UKSearchResponse> searchCarUkRecentsGetWithHttpInfo(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String source, String bodyType, String bodySubtype, String vehicleType, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String combinedMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String msaCode, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, Boolean sold, Boolean includeRelevantLinks, String expired, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String insuranceGroup, String vrm, String numOwners, String variant, String postalCode, String writeOffCategory, String fcaStatus, String activeInventoryDateRange, String engineSizeRange, String priceChangeRange) throws ApiException {
        okhttp3.Call localVarCall = searchCarUkRecentsGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, source, bodyType, bodySubtype, vehicleType, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, combinedMpgRange, milesRange, priceRange, msrpRange, domRange, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, sortBy, sortOrder, rows, start, includeNonVinListings, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, msaCode, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, sold, includeRelevantLinks, expired, excludeDealerIds, excludeSources, inTransit, seatingCapacity, insuranceGroup, vrm, numOwners, variant, postalCode, writeOffCategory, fcaStatus, activeInventoryDateRange, engineSizeRange, priceChangeRange, null);
        Type localVarReturnType = new TypeToken<UKSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets Recent UK car listings for the given search criteria (asynchronously)
     * This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param appendApiKey Flag on whether to include api_key in response API urls (if any) (optional, default to true)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param includeLease Boolean param to search for listings that include leasing options in them (optional)
     * @param includeFinance Boolean param to search for listings that include finance options in them (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param yearRange Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021 (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param combinedMpgRange Combined mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param lastSeenRange Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenRange First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtSourceRange First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param firstSeenAtMcRange First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param lastSeenDays Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenDays First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtSourceDays First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param firstSeenAtMcDays First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12 (optional)
     * @param sortBy Sort by field. Default sort field is distance from the given point (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional, default to 10)
     * @param start Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows (optional, default to 0)
     * @param includeNonVinListings To include non vin listings. Default is false (optional, default to false)
     * @param facets The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param rangeFacets The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond. (optional)
     * @param facetSort Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param (optional, default to count)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param country To filter listing on Country in which they are listed (optional, default to uk)
     * @param plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param nodedup If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param dedup If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source (optional)
     * @param owned Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself (optional)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param dealerName Filter listings on dealer_name (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param trimO Filter listings on web scraped trim (optional)
     * @param trimR Filter trim on custom possible matches (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param excludeCertified Boolean param to exclude certified cars from search results (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param photoLinks A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don&#39;t have them (optional)
     * @param photoLinksCached A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don&#39;t have them (optional)
     * @param stockNo To filter listing on their stock number on lot (optional)
     * @param sold sold parameter to fetch only sold listings (optional)
     * @param includeRelevantLinks To include_relevant_links. Default is true (optional, default to false)
     * @param expired Boolean falg to either fetch only the expired listings or active ones (optional)
     * @param excludeDealerIds A list of dealer ids to exclude from result (optional)
     * @param excludeSources A list of sources to exclude from result (optional)
     * @param inTransit A boolean to filter in transit vehicles (optional)
     * @param seatingCapacity To filter on vehicle seating capacity (optional)
     * @param insuranceGroup Insurance Group (optional)
     * @param vrm To filter on vrm (optional)
     * @param numOwners Number of owners. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param variant To filter listing on their variant (optional)
     * @param postalCode To filter listing on postal code around which they are listed (optional)
     * @param writeOffCategory write off category (optional)
     * @param fcaStatus To filter on fca status (optional)
     * @param activeInventoryDateRange date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623 (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param priceChangeRange Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all cars listings matching the search &amp; filter criteria </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCarUkRecentsGetAsync(String apiKey, Boolean appendApiKey, Double latitude, Double longitude, Integer radius, String zip, Boolean includeLease, Boolean includeFinance, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carType, String carfax1Owner, String carfaxCleanTitle, String yearRange, String year, String make, String model, String trim, String dealerId, String source, String bodyType, String bodySubtype, String vehicleType, String ymmt, String match, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String combinedMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String lastSeenRange, String firstSeenRange, String firstSeenAtSourceRange, String firstSeenAtMcRange, String lastSeenDays, String firstSeenDays, String firstSeenAtSourceDays, String firstSeenAtMcDays, String sortBy, String sortOrder, Integer rows, Integer start, Boolean includeNonVinListings, String facets, String rangeFacets, String facetSort, String stats, String country, Boolean plot, Boolean nodedup, Boolean dedup, Boolean owned, String state, String city, String msaCode, String dealerName, String dealershipGroupName, String trimO, String trimR, String domActiveRange, String dom180Range, Boolean excludeCertified, String fuelType, String dealerType, Boolean photoLinks, Boolean photoLinksCached, String stockNo, Boolean sold, Boolean includeRelevantLinks, String expired, String excludeDealerIds, String excludeSources, String inTransit, String seatingCapacity, String insuranceGroup, String vrm, String numOwners, String variant, String postalCode, String writeOffCategory, String fcaStatus, String activeInventoryDateRange, String engineSizeRange, String priceChangeRange, final ApiCallback<UKSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCarUkRecentsGetValidateBeforeCall(apiKey, appendApiKey, latitude, longitude, radius, zip, includeLease, includeFinance, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carType, carfax1Owner, carfaxCleanTitle, yearRange, year, make, model, trim, dealerId, source, bodyType, bodySubtype, vehicleType, ymmt, match, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, combinedMpgRange, milesRange, priceRange, msrpRange, domRange, lastSeenRange, firstSeenRange, firstSeenAtSourceRange, firstSeenAtMcRange, lastSeenDays, firstSeenDays, firstSeenAtSourceDays, firstSeenAtMcDays, sortBy, sortOrder, rows, start, includeNonVinListings, facets, rangeFacets, facetSort, stats, country, plot, nodedup, dedup, owned, state, city, msaCode, dealerName, dealershipGroupName, trimO, trimR, domActiveRange, dom180Range, excludeCertified, fuelType, dealerType, photoLinks, photoLinksCached, stockNo, sold, includeRelevantLinks, expired, excludeDealerIds, excludeSources, inTransit, seatingCapacity, insuranceGroup, vrm, numOwners, variant, postalCode, writeOffCategory, fcaStatus, activeInventoryDateRange, engineSizeRange, priceChangeRange, _callback);
        Type localVarReturnType = new TypeToken<UKSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
