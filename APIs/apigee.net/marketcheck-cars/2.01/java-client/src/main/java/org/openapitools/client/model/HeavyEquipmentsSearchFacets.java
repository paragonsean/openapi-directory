/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FacetItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HeavyEquipmentsSearchFacets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HeavyEquipmentsSearchFacets {
  public static final String SERIALIZED_NAME_BODY_TYPE = "body_type";
  @SerializedName(SERIALIZED_NAME_BODY_TYPE)
  private List<FacetItem> bodyType = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<FacetItem> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private List<FacetItem> city = new ArrayList<>();

  public static final String SERIALIZED_NAME_CYLINDERS = "cylinders";
  @SerializedName(SERIALIZED_NAME_CYLINDERS)
  private List<FacetItem> cylinders = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEALER_ID = "dealer_id";
  @SerializedName(SERIALIZED_NAME_DEALER_ID)
  private List<FacetItem> dealerId = new ArrayList<>();

  public static final String SERIALIZED_NAME_DRIVETRAIN = "drivetrain";
  @SerializedName(SERIALIZED_NAME_DRIVETRAIN)
  private List<FacetItem> drivetrain = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private List<FacetItem> engine = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERIOR_COLOR = "exterior_color";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_COLOR)
  private List<FacetItem> exteriorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuel_type";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private List<FacetItem> fuelType = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERIOR_COLOR = "interior_color";
  @SerializedName(SERIALIZED_NAME_INTERIOR_COLOR)
  private List<FacetItem> interiorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORY_TYPE = "inventory_type";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TYPE)
  private List<FacetItem> inventoryType = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private List<FacetItem> make = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private List<FacetItem> model = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_NAME = "seller_name";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private List<FacetItem> sellerName = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private List<FacetItem> source = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private List<FacetItem> state = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUB_CATEGORY = "sub_category";
  @SerializedName(SERIALIZED_NAME_SUB_CATEGORY)
  private List<FacetItem> subCategory = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private List<FacetItem> transmission = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private List<FacetItem> trim = new ArrayList<>();

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private List<FacetItem> year = new ArrayList<>();

  public HeavyEquipmentsSearchFacets() {
  }

  public HeavyEquipmentsSearchFacets bodyType(List<FacetItem> bodyType) {
    this.bodyType = bodyType;
    return this;
  }

  public HeavyEquipmentsSearchFacets addBodyTypeItem(FacetItem bodyTypeItem) {
    if (this.bodyType == null) {
      this.bodyType = new ArrayList<>();
    }
    this.bodyType.add(bodyTypeItem);
    return this;
  }

  /**
   * Get bodyType
   * @return bodyType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getBodyType() {
    return bodyType;
  }

  public void setBodyType(List<FacetItem> bodyType) {
    this.bodyType = bodyType;
  }


  public HeavyEquipmentsSearchFacets category(List<FacetItem> category) {
    this.category = category;
    return this;
  }

  public HeavyEquipmentsSearchFacets addCategoryItem(FacetItem categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCategory() {
    return category;
  }

  public void setCategory(List<FacetItem> category) {
    this.category = category;
  }


  public HeavyEquipmentsSearchFacets city(List<FacetItem> city) {
    this.city = city;
    return this;
  }

  public HeavyEquipmentsSearchFacets addCityItem(FacetItem cityItem) {
    if (this.city == null) {
      this.city = new ArrayList<>();
    }
    this.city.add(cityItem);
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCity() {
    return city;
  }

  public void setCity(List<FacetItem> city) {
    this.city = city;
  }


  public HeavyEquipmentsSearchFacets cylinders(List<FacetItem> cylinders) {
    this.cylinders = cylinders;
    return this;
  }

  public HeavyEquipmentsSearchFacets addCylindersItem(FacetItem cylindersItem) {
    if (this.cylinders == null) {
      this.cylinders = new ArrayList<>();
    }
    this.cylinders.add(cylindersItem);
    return this;
  }

  /**
   * Get cylinders
   * @return cylinders
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCylinders() {
    return cylinders;
  }

  public void setCylinders(List<FacetItem> cylinders) {
    this.cylinders = cylinders;
  }


  public HeavyEquipmentsSearchFacets dealerId(List<FacetItem> dealerId) {
    this.dealerId = dealerId;
    return this;
  }

  public HeavyEquipmentsSearchFacets addDealerIdItem(FacetItem dealerIdItem) {
    if (this.dealerId == null) {
      this.dealerId = new ArrayList<>();
    }
    this.dealerId.add(dealerIdItem);
    return this;
  }

  /**
   * Get dealerId
   * @return dealerId
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDealerId() {
    return dealerId;
  }

  public void setDealerId(List<FacetItem> dealerId) {
    this.dealerId = dealerId;
  }


  public HeavyEquipmentsSearchFacets drivetrain(List<FacetItem> drivetrain) {
    this.drivetrain = drivetrain;
    return this;
  }

  public HeavyEquipmentsSearchFacets addDrivetrainItem(FacetItem drivetrainItem) {
    if (this.drivetrain == null) {
      this.drivetrain = new ArrayList<>();
    }
    this.drivetrain.add(drivetrainItem);
    return this;
  }

  /**
   * Get drivetrain
   * @return drivetrain
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDrivetrain() {
    return drivetrain;
  }

  public void setDrivetrain(List<FacetItem> drivetrain) {
    this.drivetrain = drivetrain;
  }


  public HeavyEquipmentsSearchFacets engine(List<FacetItem> engine) {
    this.engine = engine;
    return this;
  }

  public HeavyEquipmentsSearchFacets addEngineItem(FacetItem engineItem) {
    if (this.engine == null) {
      this.engine = new ArrayList<>();
    }
    this.engine.add(engineItem);
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngine() {
    return engine;
  }

  public void setEngine(List<FacetItem> engine) {
    this.engine = engine;
  }


  public HeavyEquipmentsSearchFacets exteriorColor(List<FacetItem> exteriorColor) {
    this.exteriorColor = exteriorColor;
    return this;
  }

  public HeavyEquipmentsSearchFacets addExteriorColorItem(FacetItem exteriorColorItem) {
    if (this.exteriorColor == null) {
      this.exteriorColor = new ArrayList<>();
    }
    this.exteriorColor.add(exteriorColorItem);
    return this;
  }

  /**
   * Get exteriorColor
   * @return exteriorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getExteriorColor() {
    return exteriorColor;
  }

  public void setExteriorColor(List<FacetItem> exteriorColor) {
    this.exteriorColor = exteriorColor;
  }


  public HeavyEquipmentsSearchFacets fuelType(List<FacetItem> fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  public HeavyEquipmentsSearchFacets addFuelTypeItem(FacetItem fuelTypeItem) {
    if (this.fuelType == null) {
      this.fuelType = new ArrayList<>();
    }
    this.fuelType.add(fuelTypeItem);
    return this;
  }

  /**
   * Get fuelType
   * @return fuelType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getFuelType() {
    return fuelType;
  }

  public void setFuelType(List<FacetItem> fuelType) {
    this.fuelType = fuelType;
  }


  public HeavyEquipmentsSearchFacets interiorColor(List<FacetItem> interiorColor) {
    this.interiorColor = interiorColor;
    return this;
  }

  public HeavyEquipmentsSearchFacets addInteriorColorItem(FacetItem interiorColorItem) {
    if (this.interiorColor == null) {
      this.interiorColor = new ArrayList<>();
    }
    this.interiorColor.add(interiorColorItem);
    return this;
  }

  /**
   * Get interiorColor
   * @return interiorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getInteriorColor() {
    return interiorColor;
  }

  public void setInteriorColor(List<FacetItem> interiorColor) {
    this.interiorColor = interiorColor;
  }


  public HeavyEquipmentsSearchFacets inventoryType(List<FacetItem> inventoryType) {
    this.inventoryType = inventoryType;
    return this;
  }

  public HeavyEquipmentsSearchFacets addInventoryTypeItem(FacetItem inventoryTypeItem) {
    if (this.inventoryType == null) {
      this.inventoryType = new ArrayList<>();
    }
    this.inventoryType.add(inventoryTypeItem);
    return this;
  }

  /**
   * Get inventoryType
   * @return inventoryType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getInventoryType() {
    return inventoryType;
  }

  public void setInventoryType(List<FacetItem> inventoryType) {
    this.inventoryType = inventoryType;
  }


  public HeavyEquipmentsSearchFacets make(List<FacetItem> make) {
    this.make = make;
    return this;
  }

  public HeavyEquipmentsSearchFacets addMakeItem(FacetItem makeItem) {
    if (this.make == null) {
      this.make = new ArrayList<>();
    }
    this.make.add(makeItem);
    return this;
  }

  /**
   * Get make
   * @return make
   */
  @javax.annotation.Nullable
  public List<FacetItem> getMake() {
    return make;
  }

  public void setMake(List<FacetItem> make) {
    this.make = make;
  }


  public HeavyEquipmentsSearchFacets model(List<FacetItem> model) {
    this.model = model;
    return this;
  }

  public HeavyEquipmentsSearchFacets addModelItem(FacetItem modelItem) {
    if (this.model == null) {
      this.model = new ArrayList<>();
    }
    this.model.add(modelItem);
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public List<FacetItem> getModel() {
    return model;
  }

  public void setModel(List<FacetItem> model) {
    this.model = model;
  }


  public HeavyEquipmentsSearchFacets sellerName(List<FacetItem> sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public HeavyEquipmentsSearchFacets addSellerNameItem(FacetItem sellerNameItem) {
    if (this.sellerName == null) {
      this.sellerName = new ArrayList<>();
    }
    this.sellerName.add(sellerNameItem);
    return this;
  }

  /**
   * Get sellerName
   * @return sellerName
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSellerName() {
    return sellerName;
  }

  public void setSellerName(List<FacetItem> sellerName) {
    this.sellerName = sellerName;
  }


  public HeavyEquipmentsSearchFacets source(List<FacetItem> source) {
    this.source = source;
    return this;
  }

  public HeavyEquipmentsSearchFacets addSourceItem(FacetItem sourceItem) {
    if (this.source == null) {
      this.source = new ArrayList<>();
    }
    this.source.add(sourceItem);
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSource() {
    return source;
  }

  public void setSource(List<FacetItem> source) {
    this.source = source;
  }


  public HeavyEquipmentsSearchFacets state(List<FacetItem> state) {
    this.state = state;
    return this;
  }

  public HeavyEquipmentsSearchFacets addStateItem(FacetItem stateItem) {
    if (this.state == null) {
      this.state = new ArrayList<>();
    }
    this.state.add(stateItem);
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public List<FacetItem> getState() {
    return state;
  }

  public void setState(List<FacetItem> state) {
    this.state = state;
  }


  public HeavyEquipmentsSearchFacets subCategory(List<FacetItem> subCategory) {
    this.subCategory = subCategory;
    return this;
  }

  public HeavyEquipmentsSearchFacets addSubCategoryItem(FacetItem subCategoryItem) {
    if (this.subCategory == null) {
      this.subCategory = new ArrayList<>();
    }
    this.subCategory.add(subCategoryItem);
    return this;
  }

  /**
   * Get subCategory
   * @return subCategory
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSubCategory() {
    return subCategory;
  }

  public void setSubCategory(List<FacetItem> subCategory) {
    this.subCategory = subCategory;
  }


  public HeavyEquipmentsSearchFacets transmission(List<FacetItem> transmission) {
    this.transmission = transmission;
    return this;
  }

  public HeavyEquipmentsSearchFacets addTransmissionItem(FacetItem transmissionItem) {
    if (this.transmission == null) {
      this.transmission = new ArrayList<>();
    }
    this.transmission.add(transmissionItem);
    return this;
  }

  /**
   * Get transmission
   * @return transmission
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTransmission() {
    return transmission;
  }

  public void setTransmission(List<FacetItem> transmission) {
    this.transmission = transmission;
  }


  public HeavyEquipmentsSearchFacets trim(List<FacetItem> trim) {
    this.trim = trim;
    return this;
  }

  public HeavyEquipmentsSearchFacets addTrimItem(FacetItem trimItem) {
    if (this.trim == null) {
      this.trim = new ArrayList<>();
    }
    this.trim.add(trimItem);
    return this;
  }

  /**
   * Get trim
   * @return trim
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTrim() {
    return trim;
  }

  public void setTrim(List<FacetItem> trim) {
    this.trim = trim;
  }


  public HeavyEquipmentsSearchFacets year(List<FacetItem> year) {
    this.year = year;
    return this;
  }

  public HeavyEquipmentsSearchFacets addYearItem(FacetItem yearItem) {
    if (this.year == null) {
      this.year = new ArrayList<>();
    }
    this.year.add(yearItem);
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public List<FacetItem> getYear() {
    return year;
  }

  public void setYear(List<FacetItem> year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HeavyEquipmentsSearchFacets heavyEquipmentsSearchFacets = (HeavyEquipmentsSearchFacets) o;
    return Objects.equals(this.bodyType, heavyEquipmentsSearchFacets.bodyType) &&
        Objects.equals(this.category, heavyEquipmentsSearchFacets.category) &&
        Objects.equals(this.city, heavyEquipmentsSearchFacets.city) &&
        Objects.equals(this.cylinders, heavyEquipmentsSearchFacets.cylinders) &&
        Objects.equals(this.dealerId, heavyEquipmentsSearchFacets.dealerId) &&
        Objects.equals(this.drivetrain, heavyEquipmentsSearchFacets.drivetrain) &&
        Objects.equals(this.engine, heavyEquipmentsSearchFacets.engine) &&
        Objects.equals(this.exteriorColor, heavyEquipmentsSearchFacets.exteriorColor) &&
        Objects.equals(this.fuelType, heavyEquipmentsSearchFacets.fuelType) &&
        Objects.equals(this.interiorColor, heavyEquipmentsSearchFacets.interiorColor) &&
        Objects.equals(this.inventoryType, heavyEquipmentsSearchFacets.inventoryType) &&
        Objects.equals(this.make, heavyEquipmentsSearchFacets.make) &&
        Objects.equals(this.model, heavyEquipmentsSearchFacets.model) &&
        Objects.equals(this.sellerName, heavyEquipmentsSearchFacets.sellerName) &&
        Objects.equals(this.source, heavyEquipmentsSearchFacets.source) &&
        Objects.equals(this.state, heavyEquipmentsSearchFacets.state) &&
        Objects.equals(this.subCategory, heavyEquipmentsSearchFacets.subCategory) &&
        Objects.equals(this.transmission, heavyEquipmentsSearchFacets.transmission) &&
        Objects.equals(this.trim, heavyEquipmentsSearchFacets.trim) &&
        Objects.equals(this.year, heavyEquipmentsSearchFacets.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyType, category, city, cylinders, dealerId, drivetrain, engine, exteriorColor, fuelType, interiorColor, inventoryType, make, model, sellerName, source, state, subCategory, transmission, trim, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HeavyEquipmentsSearchFacets {\n");
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    cylinders: ").append(toIndentedString(cylinders)).append("\n");
    sb.append("    dealerId: ").append(toIndentedString(dealerId)).append("\n");
    sb.append("    drivetrain: ").append(toIndentedString(drivetrain)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    exteriorColor: ").append(toIndentedString(exteriorColor)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    interiorColor: ").append(toIndentedString(interiorColor)).append("\n");
    sb.append("    inventoryType: ").append(toIndentedString(inventoryType)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subCategory: ").append(toIndentedString(subCategory)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body_type");
    openapiFields.add("category");
    openapiFields.add("city");
    openapiFields.add("cylinders");
    openapiFields.add("dealer_id");
    openapiFields.add("drivetrain");
    openapiFields.add("engine");
    openapiFields.add("exterior_color");
    openapiFields.add("fuel_type");
    openapiFields.add("interior_color");
    openapiFields.add("inventory_type");
    openapiFields.add("make");
    openapiFields.add("model");
    openapiFields.add("seller_name");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("sub_category");
    openapiFields.add("transmission");
    openapiFields.add("trim");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HeavyEquipmentsSearchFacets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HeavyEquipmentsSearchFacets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HeavyEquipmentsSearchFacets is not found in the empty JSON string", HeavyEquipmentsSearchFacets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HeavyEquipmentsSearchFacets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HeavyEquipmentsSearchFacets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("body_type") != null && !jsonObj.get("body_type").isJsonNull()) {
        JsonArray jsonArraybodyType = jsonObj.getAsJsonArray("body_type");
        if (jsonArraybodyType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("body_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `body_type` to be an array in the JSON string but got `%s`", jsonObj.get("body_type").toString()));
          }

          // validate the optional field `body_type` (array)
          for (int i = 0; i < jsonArraybodyType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraybodyType.get(i));
          };
        }
      }
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        JsonArray jsonArraycategory = jsonObj.getAsJsonArray("category");
        if (jsonArraycategory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("category").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
          }

          // validate the optional field `category` (array)
          for (int i = 0; i < jsonArraycategory.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycategory.get(i));
          };
        }
      }
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        JsonArray jsonArraycity = jsonObj.getAsJsonArray("city");
        if (jsonArraycity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("city").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `city` to be an array in the JSON string but got `%s`", jsonObj.get("city").toString()));
          }

          // validate the optional field `city` (array)
          for (int i = 0; i < jsonArraycity.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycity.get(i));
          };
        }
      }
      if (jsonObj.get("cylinders") != null && !jsonObj.get("cylinders").isJsonNull()) {
        JsonArray jsonArraycylinders = jsonObj.getAsJsonArray("cylinders");
        if (jsonArraycylinders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cylinders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cylinders` to be an array in the JSON string but got `%s`", jsonObj.get("cylinders").toString()));
          }

          // validate the optional field `cylinders` (array)
          for (int i = 0; i < jsonArraycylinders.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycylinders.get(i));
          };
        }
      }
      if (jsonObj.get("dealer_id") != null && !jsonObj.get("dealer_id").isJsonNull()) {
        JsonArray jsonArraydealerId = jsonObj.getAsJsonArray("dealer_id");
        if (jsonArraydealerId != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dealer_id").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dealer_id` to be an array in the JSON string but got `%s`", jsonObj.get("dealer_id").toString()));
          }

          // validate the optional field `dealer_id` (array)
          for (int i = 0; i < jsonArraydealerId.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydealerId.get(i));
          };
        }
      }
      if (jsonObj.get("drivetrain") != null && !jsonObj.get("drivetrain").isJsonNull()) {
        JsonArray jsonArraydrivetrain = jsonObj.getAsJsonArray("drivetrain");
        if (jsonArraydrivetrain != null) {
          // ensure the json data is an array
          if (!jsonObj.get("drivetrain").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `drivetrain` to be an array in the JSON string but got `%s`", jsonObj.get("drivetrain").toString()));
          }

          // validate the optional field `drivetrain` (array)
          for (int i = 0; i < jsonArraydrivetrain.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydrivetrain.get(i));
          };
        }
      }
      if (jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) {
        JsonArray jsonArrayengine = jsonObj.getAsJsonArray("engine");
        if (jsonArrayengine != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine` to be an array in the JSON string but got `%s`", jsonObj.get("engine").toString()));
          }

          // validate the optional field `engine` (array)
          for (int i = 0; i < jsonArrayengine.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengine.get(i));
          };
        }
      }
      if (jsonObj.get("exterior_color") != null && !jsonObj.get("exterior_color").isJsonNull()) {
        JsonArray jsonArrayexteriorColor = jsonObj.getAsJsonArray("exterior_color");
        if (jsonArrayexteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exterior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exterior_color` to be an array in the JSON string but got `%s`", jsonObj.get("exterior_color").toString()));
          }

          // validate the optional field `exterior_color` (array)
          for (int i = 0; i < jsonArrayexteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayexteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("fuel_type") != null && !jsonObj.get("fuel_type").isJsonNull()) {
        JsonArray jsonArrayfuelType = jsonObj.getAsJsonArray("fuel_type");
        if (jsonArrayfuelType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fuel_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fuel_type` to be an array in the JSON string but got `%s`", jsonObj.get("fuel_type").toString()));
          }

          // validate the optional field `fuel_type` (array)
          for (int i = 0; i < jsonArrayfuelType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayfuelType.get(i));
          };
        }
      }
      if (jsonObj.get("interior_color") != null && !jsonObj.get("interior_color").isJsonNull()) {
        JsonArray jsonArrayinteriorColor = jsonObj.getAsJsonArray("interior_color");
        if (jsonArrayinteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interior_color` to be an array in the JSON string but got `%s`", jsonObj.get("interior_color").toString()));
          }

          // validate the optional field `interior_color` (array)
          for (int i = 0; i < jsonArrayinteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayinteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("inventory_type") != null && !jsonObj.get("inventory_type").isJsonNull()) {
        JsonArray jsonArrayinventoryType = jsonObj.getAsJsonArray("inventory_type");
        if (jsonArrayinventoryType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inventory_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inventory_type` to be an array in the JSON string but got `%s`", jsonObj.get("inventory_type").toString()));
          }

          // validate the optional field `inventory_type` (array)
          for (int i = 0; i < jsonArrayinventoryType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayinventoryType.get(i));
          };
        }
      }
      if (jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) {
        JsonArray jsonArraymake = jsonObj.getAsJsonArray("make");
        if (jsonArraymake != null) {
          // ensure the json data is an array
          if (!jsonObj.get("make").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `make` to be an array in the JSON string but got `%s`", jsonObj.get("make").toString()));
          }

          // validate the optional field `make` (array)
          for (int i = 0; i < jsonArraymake.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymake.get(i));
          };
        }
      }
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        JsonArray jsonArraymodel = jsonObj.getAsJsonArray("model");
        if (jsonArraymodel != null) {
          // ensure the json data is an array
          if (!jsonObj.get("model").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `model` to be an array in the JSON string but got `%s`", jsonObj.get("model").toString()));
          }

          // validate the optional field `model` (array)
          for (int i = 0; i < jsonArraymodel.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymodel.get(i));
          };
        }
      }
      if (jsonObj.get("seller_name") != null && !jsonObj.get("seller_name").isJsonNull()) {
        JsonArray jsonArraysellerName = jsonObj.getAsJsonArray("seller_name");
        if (jsonArraysellerName != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seller_name").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_name` to be an array in the JSON string but got `%s`", jsonObj.get("seller_name").toString()));
          }

          // validate the optional field `seller_name` (array)
          for (int i = 0; i < jsonArraysellerName.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysellerName.get(i));
          };
        }
      }
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        JsonArray jsonArraysource = jsonObj.getAsJsonArray("source");
        if (jsonArraysource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("source").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `source` to be an array in the JSON string but got `%s`", jsonObj.get("source").toString()));
          }

          // validate the optional field `source` (array)
          for (int i = 0; i < jsonArraysource.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysource.get(i));
          };
        }
      }
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        JsonArray jsonArraystate = jsonObj.getAsJsonArray("state");
        if (jsonArraystate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("state").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `state` to be an array in the JSON string but got `%s`", jsonObj.get("state").toString()));
          }

          // validate the optional field `state` (array)
          for (int i = 0; i < jsonArraystate.size(); i++) {
            FacetItem.validateJsonElement(jsonArraystate.get(i));
          };
        }
      }
      if (jsonObj.get("sub_category") != null && !jsonObj.get("sub_category").isJsonNull()) {
        JsonArray jsonArraysubCategory = jsonObj.getAsJsonArray("sub_category");
        if (jsonArraysubCategory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sub_category").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sub_category` to be an array in the JSON string but got `%s`", jsonObj.get("sub_category").toString()));
          }

          // validate the optional field `sub_category` (array)
          for (int i = 0; i < jsonArraysubCategory.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysubCategory.get(i));
          };
        }
      }
      if (jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) {
        JsonArray jsonArraytransmission = jsonObj.getAsJsonArray("transmission");
        if (jsonArraytransmission != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transmission").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transmission` to be an array in the JSON string but got `%s`", jsonObj.get("transmission").toString()));
          }

          // validate the optional field `transmission` (array)
          for (int i = 0; i < jsonArraytransmission.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytransmission.get(i));
          };
        }
      }
      if (jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) {
        JsonArray jsonArraytrim = jsonObj.getAsJsonArray("trim");
        if (jsonArraytrim != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trim").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trim` to be an array in the JSON string but got `%s`", jsonObj.get("trim").toString()));
          }

          // validate the optional field `trim` (array)
          for (int i = 0; i < jsonArraytrim.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytrim.get(i));
          };
        }
      }
      if (jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) {
        JsonArray jsonArrayyear = jsonObj.getAsJsonArray("year");
        if (jsonArrayyear != null) {
          // ensure the json data is an array
          if (!jsonObj.get("year").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `year` to be an array in the JSON string but got `%s`", jsonObj.get("year").toString()));
          }

          // validate the optional field `year` (array)
          for (int i = 0; i < jsonArrayyear.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayyear.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HeavyEquipmentsSearchFacets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HeavyEquipmentsSearchFacets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HeavyEquipmentsSearchFacets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HeavyEquipmentsSearchFacets.class));

       return (TypeAdapter<T>) new TypeAdapter<HeavyEquipmentsSearchFacets>() {
           @Override
           public void write(JsonWriter out, HeavyEquipmentsSearchFacets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HeavyEquipmentsSearchFacets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HeavyEquipmentsSearchFacets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HeavyEquipmentsSearchFacets
   * @throws IOException if the JSON string is invalid with respect to HeavyEquipmentsSearchFacets
   */
  public static HeavyEquipmentsSearchFacets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HeavyEquipmentsSearchFacets.class);
  }

  /**
   * Convert an instance of HeavyEquipmentsSearchFacets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

