/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specs of predicted vehicle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictedSpecs {
  public static final String SERIALIZED_NAME_BASE_EXTERIOR_COLOR = "base_exterior_color";
  @SerializedName(SERIALIZED_NAME_BASE_EXTERIOR_COLOR)
  private String baseExteriorColor;

  public static final String SERIALIZED_NAME_BASE_INTERIOR_COLOR = "base_interior_color";
  @SerializedName(SERIALIZED_NAME_BASE_INTERIOR_COLOR)
  private String baseInteriorColor;

  public static final String SERIALIZED_NAME_CARFAX1_OWNER = "carfax_1_owner";
  @SerializedName(SERIALIZED_NAME_CARFAX1_OWNER)
  private Boolean carfax1Owner;

  public static final String SERIALIZED_NAME_CARFAX_CLEAN_TITLE = "carfax_clean_title";
  @SerializedName(SERIALIZED_NAME_CARFAX_CLEAN_TITLE)
  private Boolean carfaxCleanTitle;

  public static final String SERIALIZED_NAME_CITY_MPG = "city_mpg";
  @SerializedName(SERIALIZED_NAME_CITY_MPG)
  private Double cityMpg;

  public static final String SERIALIZED_NAME_CYLINDERS = "cylinders";
  @SerializedName(SERIALIZED_NAME_CYLINDERS)
  private Integer cylinders;

  public static final String SERIALIZED_NAME_DOORS = "doors";
  @SerializedName(SERIALIZED_NAME_DOORS)
  private Integer doors;

  public static final String SERIALIZED_NAME_DRIVETRAIN = "drivetrain";
  @SerializedName(SERIALIZED_NAME_DRIVETRAIN)
  private String drivetrain;

  public static final String SERIALIZED_NAME_ENGINE_BLOCK = "engine_block";
  @SerializedName(SERIALIZED_NAME_ENGINE_BLOCK)
  private String engineBlock;

  public static final String SERIALIZED_NAME_ENGINE_SIZE = "engine_size";
  @SerializedName(SERIALIZED_NAME_ENGINE_SIZE)
  private Double engineSize;

  public static final String SERIALIZED_NAME_HIGHWAY_MPG = "highway_mpg";
  @SerializedName(SERIALIZED_NAME_HIGHWAY_MPG)
  private Double highwayMpg;

  public static final String SERIALIZED_NAME_IS_CERTIFIED = "is_certified";
  @SerializedName(SERIALIZED_NAME_IS_CERTIFIED)
  private Boolean isCertified;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private String make;

  public static final String SERIALIZED_NAME_MILES = "miles";
  @SerializedName(SERIALIZED_NAME_MILES)
  private Integer miles;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private String transmission;

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private String trim;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public PredictedSpecs() {
  }

  public PredictedSpecs baseExteriorColor(String baseExteriorColor) {
    this.baseExteriorColor = baseExteriorColor;
    return this;
  }

  /**
   * Base exterior color of vehicle
   * @return baseExteriorColor
   */
  @javax.annotation.Nullable
  public String getBaseExteriorColor() {
    return baseExteriorColor;
  }

  public void setBaseExteriorColor(String baseExteriorColor) {
    this.baseExteriorColor = baseExteriorColor;
  }


  public PredictedSpecs baseInteriorColor(String baseInteriorColor) {
    this.baseInteriorColor = baseInteriorColor;
    return this;
  }

  /**
   * base interior color of vehicle
   * @return baseInteriorColor
   */
  @javax.annotation.Nullable
  public String getBaseInteriorColor() {
    return baseInteriorColor;
  }

  public void setBaseInteriorColor(String baseInteriorColor) {
    this.baseInteriorColor = baseInteriorColor;
  }


  public PredictedSpecs carfax1Owner(Boolean carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
    return this;
  }

  /**
   * Indicates whether car has had only one owner or not
   * @return carfax1Owner
   */
  @javax.annotation.Nullable
  public Boolean getCarfax1Owner() {
    return carfax1Owner;
  }

  public void setCarfax1Owner(Boolean carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
  }


  public PredictedSpecs carfaxCleanTitle(Boolean carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
    return this;
  }

  /**
   * Indicates whether car has clean ownership records
   * @return carfaxCleanTitle
   */
  @javax.annotation.Nullable
  public Boolean getCarfaxCleanTitle() {
    return carfaxCleanTitle;
  }

  public void setCarfaxCleanTitle(Boolean carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
  }


  public PredictedSpecs cityMpg(Double cityMpg) {
    this.cityMpg = cityMpg;
    return this;
  }

  /**
   * City mileage
   * @return cityMpg
   */
  @javax.annotation.Nullable
  public Double getCityMpg() {
    return cityMpg;
  }

  public void setCityMpg(Double cityMpg) {
    this.cityMpg = cityMpg;
  }


  public PredictedSpecs cylinders(Integer cylinders) {
    this.cylinders = cylinders;
    return this;
  }

  /**
   * Number of cylinders
   * @return cylinders
   */
  @javax.annotation.Nullable
  public Integer getCylinders() {
    return cylinders;
  }

  public void setCylinders(Integer cylinders) {
    this.cylinders = cylinders;
  }


  public PredictedSpecs doors(Integer doors) {
    this.doors = doors;
    return this;
  }

  /**
   * Number of doors
   * @return doors
   */
  @javax.annotation.Nullable
  public Integer getDoors() {
    return doors;
  }

  public void setDoors(Integer doors) {
    this.doors = doors;
  }


  public PredictedSpecs drivetrain(String drivetrain) {
    this.drivetrain = drivetrain;
    return this;
  }

  /**
   * Drivetrain of the vehicle
   * @return drivetrain
   */
  @javax.annotation.Nullable
  public String getDrivetrain() {
    return drivetrain;
  }

  public void setDrivetrain(String drivetrain) {
    this.drivetrain = drivetrain;
  }


  public PredictedSpecs engineBlock(String engineBlock) {
    this.engineBlock = engineBlock;
    return this;
  }

  /**
   * Engine block of the vehicle
   * @return engineBlock
   */
  @javax.annotation.Nullable
  public String getEngineBlock() {
    return engineBlock;
  }

  public void setEngineBlock(String engineBlock) {
    this.engineBlock = engineBlock;
  }


  public PredictedSpecs engineSize(Double engineSize) {
    this.engineSize = engineSize;
    return this;
  }

  /**
   * Engine size
   * @return engineSize
   */
  @javax.annotation.Nullable
  public Double getEngineSize() {
    return engineSize;
  }

  public void setEngineSize(Double engineSize) {
    this.engineSize = engineSize;
  }


  public PredictedSpecs highwayMpg(Double highwayMpg) {
    this.highwayMpg = highwayMpg;
    return this;
  }

  /**
   * Highway mileage
   * @return highwayMpg
   */
  @javax.annotation.Nullable
  public Double getHighwayMpg() {
    return highwayMpg;
  }

  public void setHighwayMpg(Double highwayMpg) {
    this.highwayMpg = highwayMpg;
  }


  public PredictedSpecs isCertified(Boolean isCertified) {
    this.isCertified = isCertified;
    return this;
  }

  /**
   * Certified vehicle
   * @return isCertified
   */
  @javax.annotation.Nullable
  public Boolean getIsCertified() {
    return isCertified;
  }

  public void setIsCertified(Boolean isCertified) {
    this.isCertified = isCertified;
  }


  public PredictedSpecs latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Latutide for the vehicle location
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public PredictedSpecs longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Longitude for the vehicle location
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public PredictedSpecs make(String make) {
    this.make = make;
    return this;
  }

  /**
   * make
   * @return make
   */
  @javax.annotation.Nullable
  public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }


  public PredictedSpecs miles(Integer miles) {
    this.miles = miles;
    return this;
  }

  /**
   * Miles
   * @return miles
   */
  @javax.annotation.Nullable
  public Integer getMiles() {
    return miles;
  }

  public void setMiles(Integer miles) {
    this.miles = miles;
  }


  public PredictedSpecs model(String model) {
    this.model = model;
    return this;
  }

  /**
   * model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public PredictedSpecs transmission(String transmission) {
    this.transmission = transmission;
    return this;
  }

  /**
   * transmission
   * @return transmission
   */
  @javax.annotation.Nullable
  public String getTransmission() {
    return transmission;
  }

  public void setTransmission(String transmission) {
    this.transmission = transmission;
  }


  public PredictedSpecs trim(String trim) {
    this.trim = trim;
    return this;
  }

  /**
   * trim
   * @return trim
   */
  @javax.annotation.Nullable
  public String getTrim() {
    return trim;
  }

  public void setTrim(String trim) {
    this.trim = trim;
  }


  public PredictedSpecs year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * year
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictedSpecs predictedSpecs = (PredictedSpecs) o;
    return Objects.equals(this.baseExteriorColor, predictedSpecs.baseExteriorColor) &&
        Objects.equals(this.baseInteriorColor, predictedSpecs.baseInteriorColor) &&
        Objects.equals(this.carfax1Owner, predictedSpecs.carfax1Owner) &&
        Objects.equals(this.carfaxCleanTitle, predictedSpecs.carfaxCleanTitle) &&
        Objects.equals(this.cityMpg, predictedSpecs.cityMpg) &&
        Objects.equals(this.cylinders, predictedSpecs.cylinders) &&
        Objects.equals(this.doors, predictedSpecs.doors) &&
        Objects.equals(this.drivetrain, predictedSpecs.drivetrain) &&
        Objects.equals(this.engineBlock, predictedSpecs.engineBlock) &&
        Objects.equals(this.engineSize, predictedSpecs.engineSize) &&
        Objects.equals(this.highwayMpg, predictedSpecs.highwayMpg) &&
        Objects.equals(this.isCertified, predictedSpecs.isCertified) &&
        Objects.equals(this.latitude, predictedSpecs.latitude) &&
        Objects.equals(this.longitude, predictedSpecs.longitude) &&
        Objects.equals(this.make, predictedSpecs.make) &&
        Objects.equals(this.miles, predictedSpecs.miles) &&
        Objects.equals(this.model, predictedSpecs.model) &&
        Objects.equals(this.transmission, predictedSpecs.transmission) &&
        Objects.equals(this.trim, predictedSpecs.trim) &&
        Objects.equals(this.year, predictedSpecs.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseExteriorColor, baseInteriorColor, carfax1Owner, carfaxCleanTitle, cityMpg, cylinders, doors, drivetrain, engineBlock, engineSize, highwayMpg, isCertified, latitude, longitude, make, miles, model, transmission, trim, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictedSpecs {\n");
    sb.append("    baseExteriorColor: ").append(toIndentedString(baseExteriorColor)).append("\n");
    sb.append("    baseInteriorColor: ").append(toIndentedString(baseInteriorColor)).append("\n");
    sb.append("    carfax1Owner: ").append(toIndentedString(carfax1Owner)).append("\n");
    sb.append("    carfaxCleanTitle: ").append(toIndentedString(carfaxCleanTitle)).append("\n");
    sb.append("    cityMpg: ").append(toIndentedString(cityMpg)).append("\n");
    sb.append("    cylinders: ").append(toIndentedString(cylinders)).append("\n");
    sb.append("    doors: ").append(toIndentedString(doors)).append("\n");
    sb.append("    drivetrain: ").append(toIndentedString(drivetrain)).append("\n");
    sb.append("    engineBlock: ").append(toIndentedString(engineBlock)).append("\n");
    sb.append("    engineSize: ").append(toIndentedString(engineSize)).append("\n");
    sb.append("    highwayMpg: ").append(toIndentedString(highwayMpg)).append("\n");
    sb.append("    isCertified: ").append(toIndentedString(isCertified)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    miles: ").append(toIndentedString(miles)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_exterior_color");
    openapiFields.add("base_interior_color");
    openapiFields.add("carfax_1_owner");
    openapiFields.add("carfax_clean_title");
    openapiFields.add("city_mpg");
    openapiFields.add("cylinders");
    openapiFields.add("doors");
    openapiFields.add("drivetrain");
    openapiFields.add("engine_block");
    openapiFields.add("engine_size");
    openapiFields.add("highway_mpg");
    openapiFields.add("is_certified");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("make");
    openapiFields.add("miles");
    openapiFields.add("model");
    openapiFields.add("transmission");
    openapiFields.add("trim");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictedSpecs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictedSpecs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictedSpecs is not found in the empty JSON string", PredictedSpecs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictedSpecs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictedSpecs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base_exterior_color") != null && !jsonObj.get("base_exterior_color").isJsonNull()) && !jsonObj.get("base_exterior_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_exterior_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_exterior_color").toString()));
      }
      if ((jsonObj.get("base_interior_color") != null && !jsonObj.get("base_interior_color").isJsonNull()) && !jsonObj.get("base_interior_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_interior_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_interior_color").toString()));
      }
      if ((jsonObj.get("drivetrain") != null && !jsonObj.get("drivetrain").isJsonNull()) && !jsonObj.get("drivetrain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drivetrain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drivetrain").toString()));
      }
      if ((jsonObj.get("engine_block") != null && !jsonObj.get("engine_block").isJsonNull()) && !jsonObj.get("engine_block").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_block` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_block").toString()));
      }
      if ((jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) && !jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) && !jsonObj.get("transmission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission").toString()));
      }
      if ((jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) && !jsonObj.get("trim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trim").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictedSpecs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictedSpecs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictedSpecs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictedSpecs.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictedSpecs>() {
           @Override
           public void write(JsonWriter out, PredictedSpecs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictedSpecs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictedSpecs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictedSpecs
   * @throws IOException if the JSON string is invalid with respect to PredictedSpecs
   */
  public static PredictedSpecs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictedSpecs.class);
  }

  /**
   * Convert an instance of PredictedSpecs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

