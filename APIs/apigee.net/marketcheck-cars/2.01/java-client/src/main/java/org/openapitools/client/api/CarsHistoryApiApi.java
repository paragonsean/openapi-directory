/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.HistoricalListing;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CarsHistoryApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CarsHistoryApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CarsHistoryApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCarHistory
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param fields List of fields to fetch, in case the default fields list in the response is to be trimmed down (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @param includeDuplicates Flag to indicate whether to include duplicate historical records as well in the response (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Online listing history for the given vin </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarHistoryCall(String vin, String apiKey, String fields, BigDecimal page, Boolean includeDuplicates, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/history/car/{vin}"
            .replace("{" + "vin" + "}", localVarApiClient.escapeString(vin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includeDuplicates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_duplicates", includeDuplicates));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCarHistoryValidateBeforeCall(String vin, String apiKey, String fields, BigDecimal page, Boolean includeDuplicates, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getCarHistory(Async)");
        }

        return getCarHistoryCall(vin, apiKey, fields, page, includeDuplicates, sortOrder, _callback);

    }

    /**
     * Get a cars online listing history
     * The history API returns online listing history for a car identified by its VIN. History listings are sorted in the descending order of the listing date / last seen date
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param fields List of fields to fetch, in case the default fields list in the response is to be trimmed down (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @param includeDuplicates Flag to indicate whether to include duplicate historical records as well in the response (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @return List&lt;HistoricalListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Online listing history for the given vin </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<HistoricalListing> getCarHistory(String vin, String apiKey, String fields, BigDecimal page, Boolean includeDuplicates, String sortOrder) throws ApiException {
        ApiResponse<List<HistoricalListing>> localVarResp = getCarHistoryWithHttpInfo(vin, apiKey, fields, page, includeDuplicates, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Get a cars online listing history
     * The history API returns online listing history for a car identified by its VIN. History listings are sorted in the descending order of the listing date / last seen date
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param fields List of fields to fetch, in case the default fields list in the response is to be trimmed down (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @param includeDuplicates Flag to indicate whether to include duplicate historical records as well in the response (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @return ApiResponse&lt;List&lt;HistoricalListing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Online listing history for the given vin </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HistoricalListing>> getCarHistoryWithHttpInfo(String vin, String apiKey, String fields, BigDecimal page, Boolean includeDuplicates, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getCarHistoryValidateBeforeCall(vin, apiKey, fields, page, includeDuplicates, sortOrder, null);
        Type localVarReturnType = new TypeToken<List<HistoricalListing>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a cars online listing history (asynchronously)
     * The history API returns online listing history for a car identified by its VIN. History listings are sorted in the descending order of the listing date / last seen date
     * @param vin The VIN to identify the car. Must be a valid 17 char VIN (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param fields List of fields to fetch, in case the default fields list in the response is to be trimmed down (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @param includeDuplicates Flag to indicate whether to include duplicate historical records as well in the response (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Online listing history for the given vin </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarHistoryAsync(String vin, String apiKey, String fields, BigDecimal page, Boolean includeDuplicates, String sortOrder, final ApiCallback<List<HistoricalListing>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCarHistoryValidateBeforeCall(vin, apiKey, fields, page, includeDuplicates, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<List<HistoricalListing>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for historyCarUkVrmGet
     * @param vrm The VRM to identify the car. (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @param includeDuplicates Flag to indicate whether to include duplicate historical records as well in the response (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Online listing history for the given vrm </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historyCarUkVrmGetCall(String vrm, String apiKey, BigDecimal page, Boolean includeDuplicates, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/history/car/uk/{vrm}"
            .replace("{" + "vrm" + "}", localVarApiClient.escapeString(vrm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includeDuplicates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_duplicates", includeDuplicates));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call historyCarUkVrmGetValidateBeforeCall(String vrm, String apiKey, BigDecimal page, Boolean includeDuplicates, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vrm' is set
        if (vrm == null) {
            throw new ApiException("Missing the required parameter 'vrm' when calling historyCarUkVrmGet(Async)");
        }

        return historyCarUkVrmGetCall(vrm, apiKey, page, includeDuplicates, sortOrder, _callback);

    }

    /**
     * Get a cars online listing history
     * The history API returns online listing history for a car identified by its VRM. History listings are sorted in the descending order of the listing date / last seen date
     * @param vrm The VRM to identify the car. (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @param includeDuplicates Flag to indicate whether to include duplicate historical records as well in the response (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @return List&lt;HistoricalListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Online listing history for the given vrm </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<HistoricalListing> historyCarUkVrmGet(String vrm, String apiKey, BigDecimal page, Boolean includeDuplicates, String sortOrder) throws ApiException {
        ApiResponse<List<HistoricalListing>> localVarResp = historyCarUkVrmGetWithHttpInfo(vrm, apiKey, page, includeDuplicates, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Get a cars online listing history
     * The history API returns online listing history for a car identified by its VRM. History listings are sorted in the descending order of the listing date / last seen date
     * @param vrm The VRM to identify the car. (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @param includeDuplicates Flag to indicate whether to include duplicate historical records as well in the response (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @return ApiResponse&lt;List&lt;HistoricalListing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Online listing history for the given vrm </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HistoricalListing>> historyCarUkVrmGetWithHttpInfo(String vrm, String apiKey, BigDecimal page, Boolean includeDuplicates, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = historyCarUkVrmGetValidateBeforeCall(vrm, apiKey, page, includeDuplicates, sortOrder, null);
        Type localVarReturnType = new TypeToken<List<HistoricalListing>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a cars online listing history (asynchronously)
     * The history API returns online listing history for a car identified by its VRM. History listings are sorted in the descending order of the listing date / last seen date
     * @param vrm The VRM to identify the car. (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param page Page number to fetch the results for the given criteria. Default is 1. (optional)
     * @param includeDuplicates Flag to indicate whether to include duplicate historical records as well in the response (optional)
     * @param sortOrder Sort order - asc or desc. Default sort order is asc (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Online listing history for the given vrm </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historyCarUkVrmGetAsync(String vrm, String apiKey, BigDecimal page, Boolean includeDuplicates, String sortOrder, final ApiCallback<List<HistoricalListing>> _callback) throws ApiException {

        okhttp3.Call localVarCall = historyCarUkVrmGetValidateBeforeCall(vrm, apiKey, page, includeDuplicates, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<List<HistoricalListing>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
