/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FacetItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UKCarSearchFacets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UKCarSearchFacets {
  public static final String SERIALIZED_NAME_BASE_EXTERIOR_COLOR = "base_exterior_color";
  @SerializedName(SERIALIZED_NAME_BASE_EXTERIOR_COLOR)
  private List<FacetItem> baseExteriorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_INTERIOR_COLOR = "base_interior_color";
  @SerializedName(SERIALIZED_NAME_BASE_INTERIOR_COLOR)
  private List<FacetItem> baseInteriorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_BODY_SUBTYPE = "body_subtype";
  @SerializedName(SERIALIZED_NAME_BODY_SUBTYPE)
  private List<FacetItem> bodySubtype = new ArrayList<>();

  public static final String SERIALIZED_NAME_BODY_TYPE = "body_type";
  @SerializedName(SERIALIZED_NAME_BODY_TYPE)
  private List<FacetItem> bodyType = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAR_LOCATION_CITY = "car_location_city";
  @SerializedName(SERIALIZED_NAME_CAR_LOCATION_CITY)
  private List<FacetItem> carLocationCity = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAR_LOCATION_COUNTY = "car_location_county";
  @SerializedName(SERIALIZED_NAME_CAR_LOCATION_COUNTY)
  private List<FacetItem> carLocationCounty = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAR_LOCATION_SELLER_NAME = "car_location_seller_name";
  @SerializedName(SERIALIZED_NAME_CAR_LOCATION_SELLER_NAME)
  private List<FacetItem> carLocationSellerName = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAR_LOCATION_STREET = "car_location_street";
  @SerializedName(SERIALIZED_NAME_CAR_LOCATION_STREET)
  private List<FacetItem> carLocationStreet = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAR_LOCATION_ZIP = "car_location_zip";
  @SerializedName(SERIALIZED_NAME_CAR_LOCATION_ZIP)
  private List<FacetItem> carLocationZip = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAR_TYPE = "car_type";
  @SerializedName(SERIALIZED_NAME_CAR_TYPE)
  private List<FacetItem> carType = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARFAX1_OWNER = "carfax_1_owner";
  @SerializedName(SERIALIZED_NAME_CARFAX1_OWNER)
  private List<FacetItem> carfax1Owner = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARFAX_CLEAN_TITLE = "carfax_clean_title";
  @SerializedName(SERIALIZED_NAME_CARFAX_CLEAN_TITLE)
  private List<FacetItem> carfaxCleanTitle = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private List<FacetItem> city = new ArrayList<>();

  public static final String SERIALIZED_NAME_CO2_EMISSIONS = "co2_emissions";
  @SerializedName(SERIALIZED_NAME_CO2_EMISSIONS)
  private List<FacetItem> co2Emissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CYLINDERS = "cylinders";
  @SerializedName(SERIALIZED_NAME_CYLINDERS)
  private List<FacetItem> cylinders = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SOURCE = "data_source";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private List<FacetItem> dataSource = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEALER_ID = "dealer_id";
  @SerializedName(SERIALIZED_NAME_DEALER_ID)
  private List<FacetItem> dealerId = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEALER_TYPE = "dealer_type";
  @SerializedName(SERIALIZED_NAME_DEALER_TYPE)
  private List<FacetItem> dealerType = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEALERSHIP_GROUP_NAME = "dealership_group_name";
  @SerializedName(SERIALIZED_NAME_DEALERSHIP_GROUP_NAME)
  private List<FacetItem> dealershipGroupName = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOORS = "doors";
  @SerializedName(SERIALIZED_NAME_DOORS)
  private List<FacetItem> doors = new ArrayList<>();

  public static final String SERIALIZED_NAME_DRIVETRAIN = "drivetrain";
  @SerializedName(SERIALIZED_NAME_DRIVETRAIN)
  private List<FacetItem> drivetrain = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private List<FacetItem> engine = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE_ASPIRATION = "engine_aspiration";
  @SerializedName(SERIALIZED_NAME_ENGINE_ASPIRATION)
  private List<FacetItem> engineAspiration = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE_BLOCK = "engine_block";
  @SerializedName(SERIALIZED_NAME_ENGINE_BLOCK)
  private List<FacetItem> engineBlock = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE_SIZE = "engine_size";
  @SerializedName(SERIALIZED_NAME_ENGINE_SIZE)
  private List<FacetItem> engineSize = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERIOR_COLOR = "exterior_color";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_COLOR)
  private List<FacetItem> exteriorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_FCA_STATUS = "fca_status";
  @SerializedName(SERIALIZED_NAME_FCA_STATUS)
  private List<FacetItem> fcaStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuel_type";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private List<FacetItem> fuelType = new ArrayList<>();

  public static final String SERIALIZED_NAME_IN_TRANSIT = "in_transit";
  @SerializedName(SERIALIZED_NAME_IN_TRANSIT)
  private List<FacetItem> inTransit = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSURANCE_GROUP = "insurance_group";
  @SerializedName(SERIALIZED_NAME_INSURANCE_GROUP)
  private List<FacetItem> insuranceGroup = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERIOR_COLOR = "interior_color";
  @SerializedName(SERIALIZED_NAME_INTERIOR_COLOR)
  private List<FacetItem> interiorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private List<FacetItem> make = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAS_CODE = "mas_code";
  @SerializedName(SERIALIZED_NAME_MAS_CODE)
  private List<FacetItem> masCode = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private List<FacetItem> model = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUM_OWNERS = "num_owners";
  @SerializedName(SERIALIZED_NAME_NUM_OWNERS)
  private List<FacetItem> numOwners = new ArrayList<>();

  public static final String SERIALIZED_NAME_POWERTRAIN_TYPE = "powertrain_type";
  @SerializedName(SERIALIZED_NAME_POWERTRAIN_TYPE)
  private List<FacetItem> powertrainType = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEATING_CAPACITY = "seating_capacity";
  @SerializedName(SERIALIZED_NAME_SEATING_CAPACITY)
  private List<FacetItem> seatingCapacity = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_NAME = "seller_name";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private List<FacetItem> sellerName = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_TYPE = "seller_type";
  @SerializedName(SERIALIZED_NAME_SELLER_TYPE)
  private List<FacetItem> sellerType = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private List<FacetItem> source = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private List<FacetItem> state = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private List<FacetItem> transmission = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private List<FacetItem> trim = new ArrayList<>();

  public static final String SERIALIZED_NAME_VEHICLE_REGISTRATION_MARK = "vehicle_registration_mark";
  @SerializedName(SERIALIZED_NAME_VEHICLE_REGISTRATION_MARK)
  private List<FacetItem> vehicleRegistrationMark = new ArrayList<>();

  public static final String SERIALIZED_NAME_VEHICLE_TYPE = "vehicle_type";
  @SerializedName(SERIALIZED_NAME_VEHICLE_TYPE)
  private List<FacetItem> vehicleType = new ArrayList<>();

  public static final String SERIALIZED_NAME_VRM = "vrm";
  @SerializedName(SERIALIZED_NAME_VRM)
  private List<FacetItem> vrm = new ArrayList<>();

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private List<FacetItem> year = new ArrayList<>();

  public UKCarSearchFacets() {
  }

  public UKCarSearchFacets baseExteriorColor(List<FacetItem> baseExteriorColor) {
    this.baseExteriorColor = baseExteriorColor;
    return this;
  }

  public UKCarSearchFacets addBaseExteriorColorItem(FacetItem baseExteriorColorItem) {
    if (this.baseExteriorColor == null) {
      this.baseExteriorColor = new ArrayList<>();
    }
    this.baseExteriorColor.add(baseExteriorColorItem);
    return this;
  }

  /**
   * Get baseExteriorColor
   * @return baseExteriorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getBaseExteriorColor() {
    return baseExteriorColor;
  }

  public void setBaseExteriorColor(List<FacetItem> baseExteriorColor) {
    this.baseExteriorColor = baseExteriorColor;
  }


  public UKCarSearchFacets baseInteriorColor(List<FacetItem> baseInteriorColor) {
    this.baseInteriorColor = baseInteriorColor;
    return this;
  }

  public UKCarSearchFacets addBaseInteriorColorItem(FacetItem baseInteriorColorItem) {
    if (this.baseInteriorColor == null) {
      this.baseInteriorColor = new ArrayList<>();
    }
    this.baseInteriorColor.add(baseInteriorColorItem);
    return this;
  }

  /**
   * Get baseInteriorColor
   * @return baseInteriorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getBaseInteriorColor() {
    return baseInteriorColor;
  }

  public void setBaseInteriorColor(List<FacetItem> baseInteriorColor) {
    this.baseInteriorColor = baseInteriorColor;
  }


  public UKCarSearchFacets bodySubtype(List<FacetItem> bodySubtype) {
    this.bodySubtype = bodySubtype;
    return this;
  }

  public UKCarSearchFacets addBodySubtypeItem(FacetItem bodySubtypeItem) {
    if (this.bodySubtype == null) {
      this.bodySubtype = new ArrayList<>();
    }
    this.bodySubtype.add(bodySubtypeItem);
    return this;
  }

  /**
   * Get bodySubtype
   * @return bodySubtype
   */
  @javax.annotation.Nullable
  public List<FacetItem> getBodySubtype() {
    return bodySubtype;
  }

  public void setBodySubtype(List<FacetItem> bodySubtype) {
    this.bodySubtype = bodySubtype;
  }


  public UKCarSearchFacets bodyType(List<FacetItem> bodyType) {
    this.bodyType = bodyType;
    return this;
  }

  public UKCarSearchFacets addBodyTypeItem(FacetItem bodyTypeItem) {
    if (this.bodyType == null) {
      this.bodyType = new ArrayList<>();
    }
    this.bodyType.add(bodyTypeItem);
    return this;
  }

  /**
   * Get bodyType
   * @return bodyType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getBodyType() {
    return bodyType;
  }

  public void setBodyType(List<FacetItem> bodyType) {
    this.bodyType = bodyType;
  }


  public UKCarSearchFacets carLocationCity(List<FacetItem> carLocationCity) {
    this.carLocationCity = carLocationCity;
    return this;
  }

  public UKCarSearchFacets addCarLocationCityItem(FacetItem carLocationCityItem) {
    if (this.carLocationCity == null) {
      this.carLocationCity = new ArrayList<>();
    }
    this.carLocationCity.add(carLocationCityItem);
    return this;
  }

  /**
   * Get carLocationCity
   * @return carLocationCity
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarLocationCity() {
    return carLocationCity;
  }

  public void setCarLocationCity(List<FacetItem> carLocationCity) {
    this.carLocationCity = carLocationCity;
  }


  public UKCarSearchFacets carLocationCounty(List<FacetItem> carLocationCounty) {
    this.carLocationCounty = carLocationCounty;
    return this;
  }

  public UKCarSearchFacets addCarLocationCountyItem(FacetItem carLocationCountyItem) {
    if (this.carLocationCounty == null) {
      this.carLocationCounty = new ArrayList<>();
    }
    this.carLocationCounty.add(carLocationCountyItem);
    return this;
  }

  /**
   * Get carLocationCounty
   * @return carLocationCounty
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarLocationCounty() {
    return carLocationCounty;
  }

  public void setCarLocationCounty(List<FacetItem> carLocationCounty) {
    this.carLocationCounty = carLocationCounty;
  }


  public UKCarSearchFacets carLocationSellerName(List<FacetItem> carLocationSellerName) {
    this.carLocationSellerName = carLocationSellerName;
    return this;
  }

  public UKCarSearchFacets addCarLocationSellerNameItem(FacetItem carLocationSellerNameItem) {
    if (this.carLocationSellerName == null) {
      this.carLocationSellerName = new ArrayList<>();
    }
    this.carLocationSellerName.add(carLocationSellerNameItem);
    return this;
  }

  /**
   * Get carLocationSellerName
   * @return carLocationSellerName
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarLocationSellerName() {
    return carLocationSellerName;
  }

  public void setCarLocationSellerName(List<FacetItem> carLocationSellerName) {
    this.carLocationSellerName = carLocationSellerName;
  }


  public UKCarSearchFacets carLocationStreet(List<FacetItem> carLocationStreet) {
    this.carLocationStreet = carLocationStreet;
    return this;
  }

  public UKCarSearchFacets addCarLocationStreetItem(FacetItem carLocationStreetItem) {
    if (this.carLocationStreet == null) {
      this.carLocationStreet = new ArrayList<>();
    }
    this.carLocationStreet.add(carLocationStreetItem);
    return this;
  }

  /**
   * Get carLocationStreet
   * @return carLocationStreet
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarLocationStreet() {
    return carLocationStreet;
  }

  public void setCarLocationStreet(List<FacetItem> carLocationStreet) {
    this.carLocationStreet = carLocationStreet;
  }


  public UKCarSearchFacets carLocationZip(List<FacetItem> carLocationZip) {
    this.carLocationZip = carLocationZip;
    return this;
  }

  public UKCarSearchFacets addCarLocationZipItem(FacetItem carLocationZipItem) {
    if (this.carLocationZip == null) {
      this.carLocationZip = new ArrayList<>();
    }
    this.carLocationZip.add(carLocationZipItem);
    return this;
  }

  /**
   * Get carLocationZip
   * @return carLocationZip
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarLocationZip() {
    return carLocationZip;
  }

  public void setCarLocationZip(List<FacetItem> carLocationZip) {
    this.carLocationZip = carLocationZip;
  }


  public UKCarSearchFacets carType(List<FacetItem> carType) {
    this.carType = carType;
    return this;
  }

  public UKCarSearchFacets addCarTypeItem(FacetItem carTypeItem) {
    if (this.carType == null) {
      this.carType = new ArrayList<>();
    }
    this.carType.add(carTypeItem);
    return this;
  }

  /**
   * Get carType
   * @return carType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarType() {
    return carType;
  }

  public void setCarType(List<FacetItem> carType) {
    this.carType = carType;
  }


  public UKCarSearchFacets carfax1Owner(List<FacetItem> carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
    return this;
  }

  public UKCarSearchFacets addCarfax1OwnerItem(FacetItem carfax1OwnerItem) {
    if (this.carfax1Owner == null) {
      this.carfax1Owner = new ArrayList<>();
    }
    this.carfax1Owner.add(carfax1OwnerItem);
    return this;
  }

  /**
   * Get carfax1Owner
   * @return carfax1Owner
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarfax1Owner() {
    return carfax1Owner;
  }

  public void setCarfax1Owner(List<FacetItem> carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
  }


  public UKCarSearchFacets carfaxCleanTitle(List<FacetItem> carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
    return this;
  }

  public UKCarSearchFacets addCarfaxCleanTitleItem(FacetItem carfaxCleanTitleItem) {
    if (this.carfaxCleanTitle == null) {
      this.carfaxCleanTitle = new ArrayList<>();
    }
    this.carfaxCleanTitle.add(carfaxCleanTitleItem);
    return this;
  }

  /**
   * Get carfaxCleanTitle
   * @return carfaxCleanTitle
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarfaxCleanTitle() {
    return carfaxCleanTitle;
  }

  public void setCarfaxCleanTitle(List<FacetItem> carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
  }


  public UKCarSearchFacets city(List<FacetItem> city) {
    this.city = city;
    return this;
  }

  public UKCarSearchFacets addCityItem(FacetItem cityItem) {
    if (this.city == null) {
      this.city = new ArrayList<>();
    }
    this.city.add(cityItem);
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCity() {
    return city;
  }

  public void setCity(List<FacetItem> city) {
    this.city = city;
  }


  public UKCarSearchFacets co2Emissions(List<FacetItem> co2Emissions) {
    this.co2Emissions = co2Emissions;
    return this;
  }

  public UKCarSearchFacets addCo2EmissionsItem(FacetItem co2EmissionsItem) {
    if (this.co2Emissions == null) {
      this.co2Emissions = new ArrayList<>();
    }
    this.co2Emissions.add(co2EmissionsItem);
    return this;
  }

  /**
   * Get co2Emissions
   * @return co2Emissions
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCo2Emissions() {
    return co2Emissions;
  }

  public void setCo2Emissions(List<FacetItem> co2Emissions) {
    this.co2Emissions = co2Emissions;
  }


  public UKCarSearchFacets cylinders(List<FacetItem> cylinders) {
    this.cylinders = cylinders;
    return this;
  }

  public UKCarSearchFacets addCylindersItem(FacetItem cylindersItem) {
    if (this.cylinders == null) {
      this.cylinders = new ArrayList<>();
    }
    this.cylinders.add(cylindersItem);
    return this;
  }

  /**
   * Get cylinders
   * @return cylinders
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCylinders() {
    return cylinders;
  }

  public void setCylinders(List<FacetItem> cylinders) {
    this.cylinders = cylinders;
  }


  public UKCarSearchFacets dataSource(List<FacetItem> dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  public UKCarSearchFacets addDataSourceItem(FacetItem dataSourceItem) {
    if (this.dataSource == null) {
      this.dataSource = new ArrayList<>();
    }
    this.dataSource.add(dataSourceItem);
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDataSource() {
    return dataSource;
  }

  public void setDataSource(List<FacetItem> dataSource) {
    this.dataSource = dataSource;
  }


  public UKCarSearchFacets dealerId(List<FacetItem> dealerId) {
    this.dealerId = dealerId;
    return this;
  }

  public UKCarSearchFacets addDealerIdItem(FacetItem dealerIdItem) {
    if (this.dealerId == null) {
      this.dealerId = new ArrayList<>();
    }
    this.dealerId.add(dealerIdItem);
    return this;
  }

  /**
   * Get dealerId
   * @return dealerId
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDealerId() {
    return dealerId;
  }

  public void setDealerId(List<FacetItem> dealerId) {
    this.dealerId = dealerId;
  }


  public UKCarSearchFacets dealerType(List<FacetItem> dealerType) {
    this.dealerType = dealerType;
    return this;
  }

  public UKCarSearchFacets addDealerTypeItem(FacetItem dealerTypeItem) {
    if (this.dealerType == null) {
      this.dealerType = new ArrayList<>();
    }
    this.dealerType.add(dealerTypeItem);
    return this;
  }

  /**
   * Get dealerType
   * @return dealerType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDealerType() {
    return dealerType;
  }

  public void setDealerType(List<FacetItem> dealerType) {
    this.dealerType = dealerType;
  }


  public UKCarSearchFacets dealershipGroupName(List<FacetItem> dealershipGroupName) {
    this.dealershipGroupName = dealershipGroupName;
    return this;
  }

  public UKCarSearchFacets addDealershipGroupNameItem(FacetItem dealershipGroupNameItem) {
    if (this.dealershipGroupName == null) {
      this.dealershipGroupName = new ArrayList<>();
    }
    this.dealershipGroupName.add(dealershipGroupNameItem);
    return this;
  }

  /**
   * Get dealershipGroupName
   * @return dealershipGroupName
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDealershipGroupName() {
    return dealershipGroupName;
  }

  public void setDealershipGroupName(List<FacetItem> dealershipGroupName) {
    this.dealershipGroupName = dealershipGroupName;
  }


  public UKCarSearchFacets doors(List<FacetItem> doors) {
    this.doors = doors;
    return this;
  }

  public UKCarSearchFacets addDoorsItem(FacetItem doorsItem) {
    if (this.doors == null) {
      this.doors = new ArrayList<>();
    }
    this.doors.add(doorsItem);
    return this;
  }

  /**
   * Get doors
   * @return doors
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDoors() {
    return doors;
  }

  public void setDoors(List<FacetItem> doors) {
    this.doors = doors;
  }


  public UKCarSearchFacets drivetrain(List<FacetItem> drivetrain) {
    this.drivetrain = drivetrain;
    return this;
  }

  public UKCarSearchFacets addDrivetrainItem(FacetItem drivetrainItem) {
    if (this.drivetrain == null) {
      this.drivetrain = new ArrayList<>();
    }
    this.drivetrain.add(drivetrainItem);
    return this;
  }

  /**
   * Get drivetrain
   * @return drivetrain
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDrivetrain() {
    return drivetrain;
  }

  public void setDrivetrain(List<FacetItem> drivetrain) {
    this.drivetrain = drivetrain;
  }


  public UKCarSearchFacets engine(List<FacetItem> engine) {
    this.engine = engine;
    return this;
  }

  public UKCarSearchFacets addEngineItem(FacetItem engineItem) {
    if (this.engine == null) {
      this.engine = new ArrayList<>();
    }
    this.engine.add(engineItem);
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngine() {
    return engine;
  }

  public void setEngine(List<FacetItem> engine) {
    this.engine = engine;
  }


  public UKCarSearchFacets engineAspiration(List<FacetItem> engineAspiration) {
    this.engineAspiration = engineAspiration;
    return this;
  }

  public UKCarSearchFacets addEngineAspirationItem(FacetItem engineAspirationItem) {
    if (this.engineAspiration == null) {
      this.engineAspiration = new ArrayList<>();
    }
    this.engineAspiration.add(engineAspirationItem);
    return this;
  }

  /**
   * Get engineAspiration
   * @return engineAspiration
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngineAspiration() {
    return engineAspiration;
  }

  public void setEngineAspiration(List<FacetItem> engineAspiration) {
    this.engineAspiration = engineAspiration;
  }


  public UKCarSearchFacets engineBlock(List<FacetItem> engineBlock) {
    this.engineBlock = engineBlock;
    return this;
  }

  public UKCarSearchFacets addEngineBlockItem(FacetItem engineBlockItem) {
    if (this.engineBlock == null) {
      this.engineBlock = new ArrayList<>();
    }
    this.engineBlock.add(engineBlockItem);
    return this;
  }

  /**
   * Get engineBlock
   * @return engineBlock
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngineBlock() {
    return engineBlock;
  }

  public void setEngineBlock(List<FacetItem> engineBlock) {
    this.engineBlock = engineBlock;
  }


  public UKCarSearchFacets engineSize(List<FacetItem> engineSize) {
    this.engineSize = engineSize;
    return this;
  }

  public UKCarSearchFacets addEngineSizeItem(FacetItem engineSizeItem) {
    if (this.engineSize == null) {
      this.engineSize = new ArrayList<>();
    }
    this.engineSize.add(engineSizeItem);
    return this;
  }

  /**
   * Get engineSize
   * @return engineSize
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngineSize() {
    return engineSize;
  }

  public void setEngineSize(List<FacetItem> engineSize) {
    this.engineSize = engineSize;
  }


  public UKCarSearchFacets exteriorColor(List<FacetItem> exteriorColor) {
    this.exteriorColor = exteriorColor;
    return this;
  }

  public UKCarSearchFacets addExteriorColorItem(FacetItem exteriorColorItem) {
    if (this.exteriorColor == null) {
      this.exteriorColor = new ArrayList<>();
    }
    this.exteriorColor.add(exteriorColorItem);
    return this;
  }

  /**
   * Get exteriorColor
   * @return exteriorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getExteriorColor() {
    return exteriorColor;
  }

  public void setExteriorColor(List<FacetItem> exteriorColor) {
    this.exteriorColor = exteriorColor;
  }


  public UKCarSearchFacets fcaStatus(List<FacetItem> fcaStatus) {
    this.fcaStatus = fcaStatus;
    return this;
  }

  public UKCarSearchFacets addFcaStatusItem(FacetItem fcaStatusItem) {
    if (this.fcaStatus == null) {
      this.fcaStatus = new ArrayList<>();
    }
    this.fcaStatus.add(fcaStatusItem);
    return this;
  }

  /**
   * Get fcaStatus
   * @return fcaStatus
   */
  @javax.annotation.Nullable
  public List<FacetItem> getFcaStatus() {
    return fcaStatus;
  }

  public void setFcaStatus(List<FacetItem> fcaStatus) {
    this.fcaStatus = fcaStatus;
  }


  public UKCarSearchFacets fuelType(List<FacetItem> fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  public UKCarSearchFacets addFuelTypeItem(FacetItem fuelTypeItem) {
    if (this.fuelType == null) {
      this.fuelType = new ArrayList<>();
    }
    this.fuelType.add(fuelTypeItem);
    return this;
  }

  /**
   * Get fuelType
   * @return fuelType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getFuelType() {
    return fuelType;
  }

  public void setFuelType(List<FacetItem> fuelType) {
    this.fuelType = fuelType;
  }


  public UKCarSearchFacets inTransit(List<FacetItem> inTransit) {
    this.inTransit = inTransit;
    return this;
  }

  public UKCarSearchFacets addInTransitItem(FacetItem inTransitItem) {
    if (this.inTransit == null) {
      this.inTransit = new ArrayList<>();
    }
    this.inTransit.add(inTransitItem);
    return this;
  }

  /**
   * Get inTransit
   * @return inTransit
   */
  @javax.annotation.Nullable
  public List<FacetItem> getInTransit() {
    return inTransit;
  }

  public void setInTransit(List<FacetItem> inTransit) {
    this.inTransit = inTransit;
  }


  public UKCarSearchFacets insuranceGroup(List<FacetItem> insuranceGroup) {
    this.insuranceGroup = insuranceGroup;
    return this;
  }

  public UKCarSearchFacets addInsuranceGroupItem(FacetItem insuranceGroupItem) {
    if (this.insuranceGroup == null) {
      this.insuranceGroup = new ArrayList<>();
    }
    this.insuranceGroup.add(insuranceGroupItem);
    return this;
  }

  /**
   * Get insuranceGroup
   * @return insuranceGroup
   */
  @javax.annotation.Nullable
  public List<FacetItem> getInsuranceGroup() {
    return insuranceGroup;
  }

  public void setInsuranceGroup(List<FacetItem> insuranceGroup) {
    this.insuranceGroup = insuranceGroup;
  }


  public UKCarSearchFacets interiorColor(List<FacetItem> interiorColor) {
    this.interiorColor = interiorColor;
    return this;
  }

  public UKCarSearchFacets addInteriorColorItem(FacetItem interiorColorItem) {
    if (this.interiorColor == null) {
      this.interiorColor = new ArrayList<>();
    }
    this.interiorColor.add(interiorColorItem);
    return this;
  }

  /**
   * Get interiorColor
   * @return interiorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getInteriorColor() {
    return interiorColor;
  }

  public void setInteriorColor(List<FacetItem> interiorColor) {
    this.interiorColor = interiorColor;
  }


  public UKCarSearchFacets make(List<FacetItem> make) {
    this.make = make;
    return this;
  }

  public UKCarSearchFacets addMakeItem(FacetItem makeItem) {
    if (this.make == null) {
      this.make = new ArrayList<>();
    }
    this.make.add(makeItem);
    return this;
  }

  /**
   * Get make
   * @return make
   */
  @javax.annotation.Nullable
  public List<FacetItem> getMake() {
    return make;
  }

  public void setMake(List<FacetItem> make) {
    this.make = make;
  }


  public UKCarSearchFacets masCode(List<FacetItem> masCode) {
    this.masCode = masCode;
    return this;
  }

  public UKCarSearchFacets addMasCodeItem(FacetItem masCodeItem) {
    if (this.masCode == null) {
      this.masCode = new ArrayList<>();
    }
    this.masCode.add(masCodeItem);
    return this;
  }

  /**
   * Get masCode
   * @return masCode
   */
  @javax.annotation.Nullable
  public List<FacetItem> getMasCode() {
    return masCode;
  }

  public void setMasCode(List<FacetItem> masCode) {
    this.masCode = masCode;
  }


  public UKCarSearchFacets model(List<FacetItem> model) {
    this.model = model;
    return this;
  }

  public UKCarSearchFacets addModelItem(FacetItem modelItem) {
    if (this.model == null) {
      this.model = new ArrayList<>();
    }
    this.model.add(modelItem);
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public List<FacetItem> getModel() {
    return model;
  }

  public void setModel(List<FacetItem> model) {
    this.model = model;
  }


  public UKCarSearchFacets numOwners(List<FacetItem> numOwners) {
    this.numOwners = numOwners;
    return this;
  }

  public UKCarSearchFacets addNumOwnersItem(FacetItem numOwnersItem) {
    if (this.numOwners == null) {
      this.numOwners = new ArrayList<>();
    }
    this.numOwners.add(numOwnersItem);
    return this;
  }

  /**
   * Get numOwners
   * @return numOwners
   */
  @javax.annotation.Nullable
  public List<FacetItem> getNumOwners() {
    return numOwners;
  }

  public void setNumOwners(List<FacetItem> numOwners) {
    this.numOwners = numOwners;
  }


  public UKCarSearchFacets powertrainType(List<FacetItem> powertrainType) {
    this.powertrainType = powertrainType;
    return this;
  }

  public UKCarSearchFacets addPowertrainTypeItem(FacetItem powertrainTypeItem) {
    if (this.powertrainType == null) {
      this.powertrainType = new ArrayList<>();
    }
    this.powertrainType.add(powertrainTypeItem);
    return this;
  }

  /**
   * Get powertrainType
   * @return powertrainType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getPowertrainType() {
    return powertrainType;
  }

  public void setPowertrainType(List<FacetItem> powertrainType) {
    this.powertrainType = powertrainType;
  }


  public UKCarSearchFacets seatingCapacity(List<FacetItem> seatingCapacity) {
    this.seatingCapacity = seatingCapacity;
    return this;
  }

  public UKCarSearchFacets addSeatingCapacityItem(FacetItem seatingCapacityItem) {
    if (this.seatingCapacity == null) {
      this.seatingCapacity = new ArrayList<>();
    }
    this.seatingCapacity.add(seatingCapacityItem);
    return this;
  }

  /**
   * Get seatingCapacity
   * @return seatingCapacity
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSeatingCapacity() {
    return seatingCapacity;
  }

  public void setSeatingCapacity(List<FacetItem> seatingCapacity) {
    this.seatingCapacity = seatingCapacity;
  }


  public UKCarSearchFacets sellerName(List<FacetItem> sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public UKCarSearchFacets addSellerNameItem(FacetItem sellerNameItem) {
    if (this.sellerName == null) {
      this.sellerName = new ArrayList<>();
    }
    this.sellerName.add(sellerNameItem);
    return this;
  }

  /**
   * Get sellerName
   * @return sellerName
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSellerName() {
    return sellerName;
  }

  public void setSellerName(List<FacetItem> sellerName) {
    this.sellerName = sellerName;
  }


  public UKCarSearchFacets sellerType(List<FacetItem> sellerType) {
    this.sellerType = sellerType;
    return this;
  }

  public UKCarSearchFacets addSellerTypeItem(FacetItem sellerTypeItem) {
    if (this.sellerType == null) {
      this.sellerType = new ArrayList<>();
    }
    this.sellerType.add(sellerTypeItem);
    return this;
  }

  /**
   * Get sellerType
   * @return sellerType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSellerType() {
    return sellerType;
  }

  public void setSellerType(List<FacetItem> sellerType) {
    this.sellerType = sellerType;
  }


  public UKCarSearchFacets source(List<FacetItem> source) {
    this.source = source;
    return this;
  }

  public UKCarSearchFacets addSourceItem(FacetItem sourceItem) {
    if (this.source == null) {
      this.source = new ArrayList<>();
    }
    this.source.add(sourceItem);
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSource() {
    return source;
  }

  public void setSource(List<FacetItem> source) {
    this.source = source;
  }


  public UKCarSearchFacets state(List<FacetItem> state) {
    this.state = state;
    return this;
  }

  public UKCarSearchFacets addStateItem(FacetItem stateItem) {
    if (this.state == null) {
      this.state = new ArrayList<>();
    }
    this.state.add(stateItem);
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public List<FacetItem> getState() {
    return state;
  }

  public void setState(List<FacetItem> state) {
    this.state = state;
  }


  public UKCarSearchFacets transmission(List<FacetItem> transmission) {
    this.transmission = transmission;
    return this;
  }

  public UKCarSearchFacets addTransmissionItem(FacetItem transmissionItem) {
    if (this.transmission == null) {
      this.transmission = new ArrayList<>();
    }
    this.transmission.add(transmissionItem);
    return this;
  }

  /**
   * Get transmission
   * @return transmission
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTransmission() {
    return transmission;
  }

  public void setTransmission(List<FacetItem> transmission) {
    this.transmission = transmission;
  }


  public UKCarSearchFacets trim(List<FacetItem> trim) {
    this.trim = trim;
    return this;
  }

  public UKCarSearchFacets addTrimItem(FacetItem trimItem) {
    if (this.trim == null) {
      this.trim = new ArrayList<>();
    }
    this.trim.add(trimItem);
    return this;
  }

  /**
   * Get trim
   * @return trim
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTrim() {
    return trim;
  }

  public void setTrim(List<FacetItem> trim) {
    this.trim = trim;
  }


  public UKCarSearchFacets vehicleRegistrationMark(List<FacetItem> vehicleRegistrationMark) {
    this.vehicleRegistrationMark = vehicleRegistrationMark;
    return this;
  }

  public UKCarSearchFacets addVehicleRegistrationMarkItem(FacetItem vehicleRegistrationMarkItem) {
    if (this.vehicleRegistrationMark == null) {
      this.vehicleRegistrationMark = new ArrayList<>();
    }
    this.vehicleRegistrationMark.add(vehicleRegistrationMarkItem);
    return this;
  }

  /**
   * Get vehicleRegistrationMark
   * @return vehicleRegistrationMark
   */
  @javax.annotation.Nullable
  public List<FacetItem> getVehicleRegistrationMark() {
    return vehicleRegistrationMark;
  }

  public void setVehicleRegistrationMark(List<FacetItem> vehicleRegistrationMark) {
    this.vehicleRegistrationMark = vehicleRegistrationMark;
  }


  public UKCarSearchFacets vehicleType(List<FacetItem> vehicleType) {
    this.vehicleType = vehicleType;
    return this;
  }

  public UKCarSearchFacets addVehicleTypeItem(FacetItem vehicleTypeItem) {
    if (this.vehicleType == null) {
      this.vehicleType = new ArrayList<>();
    }
    this.vehicleType.add(vehicleTypeItem);
    return this;
  }

  /**
   * Get vehicleType
   * @return vehicleType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getVehicleType() {
    return vehicleType;
  }

  public void setVehicleType(List<FacetItem> vehicleType) {
    this.vehicleType = vehicleType;
  }


  public UKCarSearchFacets vrm(List<FacetItem> vrm) {
    this.vrm = vrm;
    return this;
  }

  public UKCarSearchFacets addVrmItem(FacetItem vrmItem) {
    if (this.vrm == null) {
      this.vrm = new ArrayList<>();
    }
    this.vrm.add(vrmItem);
    return this;
  }

  /**
   * Get vrm
   * @return vrm
   */
  @javax.annotation.Nullable
  public List<FacetItem> getVrm() {
    return vrm;
  }

  public void setVrm(List<FacetItem> vrm) {
    this.vrm = vrm;
  }


  public UKCarSearchFacets year(List<FacetItem> year) {
    this.year = year;
    return this;
  }

  public UKCarSearchFacets addYearItem(FacetItem yearItem) {
    if (this.year == null) {
      this.year = new ArrayList<>();
    }
    this.year.add(yearItem);
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public List<FacetItem> getYear() {
    return year;
  }

  public void setYear(List<FacetItem> year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UKCarSearchFacets ukCarSearchFacets = (UKCarSearchFacets) o;
    return Objects.equals(this.baseExteriorColor, ukCarSearchFacets.baseExteriorColor) &&
        Objects.equals(this.baseInteriorColor, ukCarSearchFacets.baseInteriorColor) &&
        Objects.equals(this.bodySubtype, ukCarSearchFacets.bodySubtype) &&
        Objects.equals(this.bodyType, ukCarSearchFacets.bodyType) &&
        Objects.equals(this.carLocationCity, ukCarSearchFacets.carLocationCity) &&
        Objects.equals(this.carLocationCounty, ukCarSearchFacets.carLocationCounty) &&
        Objects.equals(this.carLocationSellerName, ukCarSearchFacets.carLocationSellerName) &&
        Objects.equals(this.carLocationStreet, ukCarSearchFacets.carLocationStreet) &&
        Objects.equals(this.carLocationZip, ukCarSearchFacets.carLocationZip) &&
        Objects.equals(this.carType, ukCarSearchFacets.carType) &&
        Objects.equals(this.carfax1Owner, ukCarSearchFacets.carfax1Owner) &&
        Objects.equals(this.carfaxCleanTitle, ukCarSearchFacets.carfaxCleanTitle) &&
        Objects.equals(this.city, ukCarSearchFacets.city) &&
        Objects.equals(this.co2Emissions, ukCarSearchFacets.co2Emissions) &&
        Objects.equals(this.cylinders, ukCarSearchFacets.cylinders) &&
        Objects.equals(this.dataSource, ukCarSearchFacets.dataSource) &&
        Objects.equals(this.dealerId, ukCarSearchFacets.dealerId) &&
        Objects.equals(this.dealerType, ukCarSearchFacets.dealerType) &&
        Objects.equals(this.dealershipGroupName, ukCarSearchFacets.dealershipGroupName) &&
        Objects.equals(this.doors, ukCarSearchFacets.doors) &&
        Objects.equals(this.drivetrain, ukCarSearchFacets.drivetrain) &&
        Objects.equals(this.engine, ukCarSearchFacets.engine) &&
        Objects.equals(this.engineAspiration, ukCarSearchFacets.engineAspiration) &&
        Objects.equals(this.engineBlock, ukCarSearchFacets.engineBlock) &&
        Objects.equals(this.engineSize, ukCarSearchFacets.engineSize) &&
        Objects.equals(this.exteriorColor, ukCarSearchFacets.exteriorColor) &&
        Objects.equals(this.fcaStatus, ukCarSearchFacets.fcaStatus) &&
        Objects.equals(this.fuelType, ukCarSearchFacets.fuelType) &&
        Objects.equals(this.inTransit, ukCarSearchFacets.inTransit) &&
        Objects.equals(this.insuranceGroup, ukCarSearchFacets.insuranceGroup) &&
        Objects.equals(this.interiorColor, ukCarSearchFacets.interiorColor) &&
        Objects.equals(this.make, ukCarSearchFacets.make) &&
        Objects.equals(this.masCode, ukCarSearchFacets.masCode) &&
        Objects.equals(this.model, ukCarSearchFacets.model) &&
        Objects.equals(this.numOwners, ukCarSearchFacets.numOwners) &&
        Objects.equals(this.powertrainType, ukCarSearchFacets.powertrainType) &&
        Objects.equals(this.seatingCapacity, ukCarSearchFacets.seatingCapacity) &&
        Objects.equals(this.sellerName, ukCarSearchFacets.sellerName) &&
        Objects.equals(this.sellerType, ukCarSearchFacets.sellerType) &&
        Objects.equals(this.source, ukCarSearchFacets.source) &&
        Objects.equals(this.state, ukCarSearchFacets.state) &&
        Objects.equals(this.transmission, ukCarSearchFacets.transmission) &&
        Objects.equals(this.trim, ukCarSearchFacets.trim) &&
        Objects.equals(this.vehicleRegistrationMark, ukCarSearchFacets.vehicleRegistrationMark) &&
        Objects.equals(this.vehicleType, ukCarSearchFacets.vehicleType) &&
        Objects.equals(this.vrm, ukCarSearchFacets.vrm) &&
        Objects.equals(this.year, ukCarSearchFacets.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseExteriorColor, baseInteriorColor, bodySubtype, bodyType, carLocationCity, carLocationCounty, carLocationSellerName, carLocationStreet, carLocationZip, carType, carfax1Owner, carfaxCleanTitle, city, co2Emissions, cylinders, dataSource, dealerId, dealerType, dealershipGroupName, doors, drivetrain, engine, engineAspiration, engineBlock, engineSize, exteriorColor, fcaStatus, fuelType, inTransit, insuranceGroup, interiorColor, make, masCode, model, numOwners, powertrainType, seatingCapacity, sellerName, sellerType, source, state, transmission, trim, vehicleRegistrationMark, vehicleType, vrm, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UKCarSearchFacets {\n");
    sb.append("    baseExteriorColor: ").append(toIndentedString(baseExteriorColor)).append("\n");
    sb.append("    baseInteriorColor: ").append(toIndentedString(baseInteriorColor)).append("\n");
    sb.append("    bodySubtype: ").append(toIndentedString(bodySubtype)).append("\n");
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    carLocationCity: ").append(toIndentedString(carLocationCity)).append("\n");
    sb.append("    carLocationCounty: ").append(toIndentedString(carLocationCounty)).append("\n");
    sb.append("    carLocationSellerName: ").append(toIndentedString(carLocationSellerName)).append("\n");
    sb.append("    carLocationStreet: ").append(toIndentedString(carLocationStreet)).append("\n");
    sb.append("    carLocationZip: ").append(toIndentedString(carLocationZip)).append("\n");
    sb.append("    carType: ").append(toIndentedString(carType)).append("\n");
    sb.append("    carfax1Owner: ").append(toIndentedString(carfax1Owner)).append("\n");
    sb.append("    carfaxCleanTitle: ").append(toIndentedString(carfaxCleanTitle)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    co2Emissions: ").append(toIndentedString(co2Emissions)).append("\n");
    sb.append("    cylinders: ").append(toIndentedString(cylinders)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    dealerId: ").append(toIndentedString(dealerId)).append("\n");
    sb.append("    dealerType: ").append(toIndentedString(dealerType)).append("\n");
    sb.append("    dealershipGroupName: ").append(toIndentedString(dealershipGroupName)).append("\n");
    sb.append("    doors: ").append(toIndentedString(doors)).append("\n");
    sb.append("    drivetrain: ").append(toIndentedString(drivetrain)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineAspiration: ").append(toIndentedString(engineAspiration)).append("\n");
    sb.append("    engineBlock: ").append(toIndentedString(engineBlock)).append("\n");
    sb.append("    engineSize: ").append(toIndentedString(engineSize)).append("\n");
    sb.append("    exteriorColor: ").append(toIndentedString(exteriorColor)).append("\n");
    sb.append("    fcaStatus: ").append(toIndentedString(fcaStatus)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    inTransit: ").append(toIndentedString(inTransit)).append("\n");
    sb.append("    insuranceGroup: ").append(toIndentedString(insuranceGroup)).append("\n");
    sb.append("    interiorColor: ").append(toIndentedString(interiorColor)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    masCode: ").append(toIndentedString(masCode)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    numOwners: ").append(toIndentedString(numOwners)).append("\n");
    sb.append("    powertrainType: ").append(toIndentedString(powertrainType)).append("\n");
    sb.append("    seatingCapacity: ").append(toIndentedString(seatingCapacity)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    sellerType: ").append(toIndentedString(sellerType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    vehicleRegistrationMark: ").append(toIndentedString(vehicleRegistrationMark)).append("\n");
    sb.append("    vehicleType: ").append(toIndentedString(vehicleType)).append("\n");
    sb.append("    vrm: ").append(toIndentedString(vrm)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_exterior_color");
    openapiFields.add("base_interior_color");
    openapiFields.add("body_subtype");
    openapiFields.add("body_type");
    openapiFields.add("car_location_city");
    openapiFields.add("car_location_county");
    openapiFields.add("car_location_seller_name");
    openapiFields.add("car_location_street");
    openapiFields.add("car_location_zip");
    openapiFields.add("car_type");
    openapiFields.add("carfax_1_owner");
    openapiFields.add("carfax_clean_title");
    openapiFields.add("city");
    openapiFields.add("co2_emissions");
    openapiFields.add("cylinders");
    openapiFields.add("data_source");
    openapiFields.add("dealer_id");
    openapiFields.add("dealer_type");
    openapiFields.add("dealership_group_name");
    openapiFields.add("doors");
    openapiFields.add("drivetrain");
    openapiFields.add("engine");
    openapiFields.add("engine_aspiration");
    openapiFields.add("engine_block");
    openapiFields.add("engine_size");
    openapiFields.add("exterior_color");
    openapiFields.add("fca_status");
    openapiFields.add("fuel_type");
    openapiFields.add("in_transit");
    openapiFields.add("insurance_group");
    openapiFields.add("interior_color");
    openapiFields.add("make");
    openapiFields.add("mas_code");
    openapiFields.add("model");
    openapiFields.add("num_owners");
    openapiFields.add("powertrain_type");
    openapiFields.add("seating_capacity");
    openapiFields.add("seller_name");
    openapiFields.add("seller_type");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("transmission");
    openapiFields.add("trim");
    openapiFields.add("vehicle_registration_mark");
    openapiFields.add("vehicle_type");
    openapiFields.add("vrm");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UKCarSearchFacets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UKCarSearchFacets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UKCarSearchFacets is not found in the empty JSON string", UKCarSearchFacets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UKCarSearchFacets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UKCarSearchFacets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("base_exterior_color") != null && !jsonObj.get("base_exterior_color").isJsonNull()) {
        JsonArray jsonArraybaseExteriorColor = jsonObj.getAsJsonArray("base_exterior_color");
        if (jsonArraybaseExteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("base_exterior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `base_exterior_color` to be an array in the JSON string but got `%s`", jsonObj.get("base_exterior_color").toString()));
          }

          // validate the optional field `base_exterior_color` (array)
          for (int i = 0; i < jsonArraybaseExteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArraybaseExteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("base_interior_color") != null && !jsonObj.get("base_interior_color").isJsonNull()) {
        JsonArray jsonArraybaseInteriorColor = jsonObj.getAsJsonArray("base_interior_color");
        if (jsonArraybaseInteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("base_interior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `base_interior_color` to be an array in the JSON string but got `%s`", jsonObj.get("base_interior_color").toString()));
          }

          // validate the optional field `base_interior_color` (array)
          for (int i = 0; i < jsonArraybaseInteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArraybaseInteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("body_subtype") != null && !jsonObj.get("body_subtype").isJsonNull()) {
        JsonArray jsonArraybodySubtype = jsonObj.getAsJsonArray("body_subtype");
        if (jsonArraybodySubtype != null) {
          // ensure the json data is an array
          if (!jsonObj.get("body_subtype").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `body_subtype` to be an array in the JSON string but got `%s`", jsonObj.get("body_subtype").toString()));
          }

          // validate the optional field `body_subtype` (array)
          for (int i = 0; i < jsonArraybodySubtype.size(); i++) {
            FacetItem.validateJsonElement(jsonArraybodySubtype.get(i));
          };
        }
      }
      if (jsonObj.get("body_type") != null && !jsonObj.get("body_type").isJsonNull()) {
        JsonArray jsonArraybodyType = jsonObj.getAsJsonArray("body_type");
        if (jsonArraybodyType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("body_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `body_type` to be an array in the JSON string but got `%s`", jsonObj.get("body_type").toString()));
          }

          // validate the optional field `body_type` (array)
          for (int i = 0; i < jsonArraybodyType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraybodyType.get(i));
          };
        }
      }
      if (jsonObj.get("car_location_city") != null && !jsonObj.get("car_location_city").isJsonNull()) {
        JsonArray jsonArraycarLocationCity = jsonObj.getAsJsonArray("car_location_city");
        if (jsonArraycarLocationCity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("car_location_city").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `car_location_city` to be an array in the JSON string but got `%s`", jsonObj.get("car_location_city").toString()));
          }

          // validate the optional field `car_location_city` (array)
          for (int i = 0; i < jsonArraycarLocationCity.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarLocationCity.get(i));
          };
        }
      }
      if (jsonObj.get("car_location_county") != null && !jsonObj.get("car_location_county").isJsonNull()) {
        JsonArray jsonArraycarLocationCounty = jsonObj.getAsJsonArray("car_location_county");
        if (jsonArraycarLocationCounty != null) {
          // ensure the json data is an array
          if (!jsonObj.get("car_location_county").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `car_location_county` to be an array in the JSON string but got `%s`", jsonObj.get("car_location_county").toString()));
          }

          // validate the optional field `car_location_county` (array)
          for (int i = 0; i < jsonArraycarLocationCounty.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarLocationCounty.get(i));
          };
        }
      }
      if (jsonObj.get("car_location_seller_name") != null && !jsonObj.get("car_location_seller_name").isJsonNull()) {
        JsonArray jsonArraycarLocationSellerName = jsonObj.getAsJsonArray("car_location_seller_name");
        if (jsonArraycarLocationSellerName != null) {
          // ensure the json data is an array
          if (!jsonObj.get("car_location_seller_name").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `car_location_seller_name` to be an array in the JSON string but got `%s`", jsonObj.get("car_location_seller_name").toString()));
          }

          // validate the optional field `car_location_seller_name` (array)
          for (int i = 0; i < jsonArraycarLocationSellerName.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarLocationSellerName.get(i));
          };
        }
      }
      if (jsonObj.get("car_location_street") != null && !jsonObj.get("car_location_street").isJsonNull()) {
        JsonArray jsonArraycarLocationStreet = jsonObj.getAsJsonArray("car_location_street");
        if (jsonArraycarLocationStreet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("car_location_street").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `car_location_street` to be an array in the JSON string but got `%s`", jsonObj.get("car_location_street").toString()));
          }

          // validate the optional field `car_location_street` (array)
          for (int i = 0; i < jsonArraycarLocationStreet.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarLocationStreet.get(i));
          };
        }
      }
      if (jsonObj.get("car_location_zip") != null && !jsonObj.get("car_location_zip").isJsonNull()) {
        JsonArray jsonArraycarLocationZip = jsonObj.getAsJsonArray("car_location_zip");
        if (jsonArraycarLocationZip != null) {
          // ensure the json data is an array
          if (!jsonObj.get("car_location_zip").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `car_location_zip` to be an array in the JSON string but got `%s`", jsonObj.get("car_location_zip").toString()));
          }

          // validate the optional field `car_location_zip` (array)
          for (int i = 0; i < jsonArraycarLocationZip.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarLocationZip.get(i));
          };
        }
      }
      if (jsonObj.get("car_type") != null && !jsonObj.get("car_type").isJsonNull()) {
        JsonArray jsonArraycarType = jsonObj.getAsJsonArray("car_type");
        if (jsonArraycarType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("car_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `car_type` to be an array in the JSON string but got `%s`", jsonObj.get("car_type").toString()));
          }

          // validate the optional field `car_type` (array)
          for (int i = 0; i < jsonArraycarType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarType.get(i));
          };
        }
      }
      if (jsonObj.get("carfax_1_owner") != null && !jsonObj.get("carfax_1_owner").isJsonNull()) {
        JsonArray jsonArraycarfax1Owner = jsonObj.getAsJsonArray("carfax_1_owner");
        if (jsonArraycarfax1Owner != null) {
          // ensure the json data is an array
          if (!jsonObj.get("carfax_1_owner").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `carfax_1_owner` to be an array in the JSON string but got `%s`", jsonObj.get("carfax_1_owner").toString()));
          }

          // validate the optional field `carfax_1_owner` (array)
          for (int i = 0; i < jsonArraycarfax1Owner.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarfax1Owner.get(i));
          };
        }
      }
      if (jsonObj.get("carfax_clean_title") != null && !jsonObj.get("carfax_clean_title").isJsonNull()) {
        JsonArray jsonArraycarfaxCleanTitle = jsonObj.getAsJsonArray("carfax_clean_title");
        if (jsonArraycarfaxCleanTitle != null) {
          // ensure the json data is an array
          if (!jsonObj.get("carfax_clean_title").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `carfax_clean_title` to be an array in the JSON string but got `%s`", jsonObj.get("carfax_clean_title").toString()));
          }

          // validate the optional field `carfax_clean_title` (array)
          for (int i = 0; i < jsonArraycarfaxCleanTitle.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarfaxCleanTitle.get(i));
          };
        }
      }
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        JsonArray jsonArraycity = jsonObj.getAsJsonArray("city");
        if (jsonArraycity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("city").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `city` to be an array in the JSON string but got `%s`", jsonObj.get("city").toString()));
          }

          // validate the optional field `city` (array)
          for (int i = 0; i < jsonArraycity.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycity.get(i));
          };
        }
      }
      if (jsonObj.get("co2_emissions") != null && !jsonObj.get("co2_emissions").isJsonNull()) {
        JsonArray jsonArrayco2Emissions = jsonObj.getAsJsonArray("co2_emissions");
        if (jsonArrayco2Emissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("co2_emissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `co2_emissions` to be an array in the JSON string but got `%s`", jsonObj.get("co2_emissions").toString()));
          }

          // validate the optional field `co2_emissions` (array)
          for (int i = 0; i < jsonArrayco2Emissions.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayco2Emissions.get(i));
          };
        }
      }
      if (jsonObj.get("cylinders") != null && !jsonObj.get("cylinders").isJsonNull()) {
        JsonArray jsonArraycylinders = jsonObj.getAsJsonArray("cylinders");
        if (jsonArraycylinders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cylinders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cylinders` to be an array in the JSON string but got `%s`", jsonObj.get("cylinders").toString()));
          }

          // validate the optional field `cylinders` (array)
          for (int i = 0; i < jsonArraycylinders.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycylinders.get(i));
          };
        }
      }
      if (jsonObj.get("data_source") != null && !jsonObj.get("data_source").isJsonNull()) {
        JsonArray jsonArraydataSource = jsonObj.getAsJsonArray("data_source");
        if (jsonArraydataSource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("data_source").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `data_source` to be an array in the JSON string but got `%s`", jsonObj.get("data_source").toString()));
          }

          // validate the optional field `data_source` (array)
          for (int i = 0; i < jsonArraydataSource.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydataSource.get(i));
          };
        }
      }
      if (jsonObj.get("dealer_id") != null && !jsonObj.get("dealer_id").isJsonNull()) {
        JsonArray jsonArraydealerId = jsonObj.getAsJsonArray("dealer_id");
        if (jsonArraydealerId != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dealer_id").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dealer_id` to be an array in the JSON string but got `%s`", jsonObj.get("dealer_id").toString()));
          }

          // validate the optional field `dealer_id` (array)
          for (int i = 0; i < jsonArraydealerId.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydealerId.get(i));
          };
        }
      }
      if (jsonObj.get("dealer_type") != null && !jsonObj.get("dealer_type").isJsonNull()) {
        JsonArray jsonArraydealerType = jsonObj.getAsJsonArray("dealer_type");
        if (jsonArraydealerType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dealer_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dealer_type` to be an array in the JSON string but got `%s`", jsonObj.get("dealer_type").toString()));
          }

          // validate the optional field `dealer_type` (array)
          for (int i = 0; i < jsonArraydealerType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydealerType.get(i));
          };
        }
      }
      if (jsonObj.get("dealership_group_name") != null && !jsonObj.get("dealership_group_name").isJsonNull()) {
        JsonArray jsonArraydealershipGroupName = jsonObj.getAsJsonArray("dealership_group_name");
        if (jsonArraydealershipGroupName != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dealership_group_name").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dealership_group_name` to be an array in the JSON string but got `%s`", jsonObj.get("dealership_group_name").toString()));
          }

          // validate the optional field `dealership_group_name` (array)
          for (int i = 0; i < jsonArraydealershipGroupName.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydealershipGroupName.get(i));
          };
        }
      }
      if (jsonObj.get("doors") != null && !jsonObj.get("doors").isJsonNull()) {
        JsonArray jsonArraydoors = jsonObj.getAsJsonArray("doors");
        if (jsonArraydoors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("doors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `doors` to be an array in the JSON string but got `%s`", jsonObj.get("doors").toString()));
          }

          // validate the optional field `doors` (array)
          for (int i = 0; i < jsonArraydoors.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydoors.get(i));
          };
        }
      }
      if (jsonObj.get("drivetrain") != null && !jsonObj.get("drivetrain").isJsonNull()) {
        JsonArray jsonArraydrivetrain = jsonObj.getAsJsonArray("drivetrain");
        if (jsonArraydrivetrain != null) {
          // ensure the json data is an array
          if (!jsonObj.get("drivetrain").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `drivetrain` to be an array in the JSON string but got `%s`", jsonObj.get("drivetrain").toString()));
          }

          // validate the optional field `drivetrain` (array)
          for (int i = 0; i < jsonArraydrivetrain.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydrivetrain.get(i));
          };
        }
      }
      if (jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) {
        JsonArray jsonArrayengine = jsonObj.getAsJsonArray("engine");
        if (jsonArrayengine != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine` to be an array in the JSON string but got `%s`", jsonObj.get("engine").toString()));
          }

          // validate the optional field `engine` (array)
          for (int i = 0; i < jsonArrayengine.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengine.get(i));
          };
        }
      }
      if (jsonObj.get("engine_aspiration") != null && !jsonObj.get("engine_aspiration").isJsonNull()) {
        JsonArray jsonArrayengineAspiration = jsonObj.getAsJsonArray("engine_aspiration");
        if (jsonArrayengineAspiration != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine_aspiration").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine_aspiration` to be an array in the JSON string but got `%s`", jsonObj.get("engine_aspiration").toString()));
          }

          // validate the optional field `engine_aspiration` (array)
          for (int i = 0; i < jsonArrayengineAspiration.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengineAspiration.get(i));
          };
        }
      }
      if (jsonObj.get("engine_block") != null && !jsonObj.get("engine_block").isJsonNull()) {
        JsonArray jsonArrayengineBlock = jsonObj.getAsJsonArray("engine_block");
        if (jsonArrayengineBlock != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine_block").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine_block` to be an array in the JSON string but got `%s`", jsonObj.get("engine_block").toString()));
          }

          // validate the optional field `engine_block` (array)
          for (int i = 0; i < jsonArrayengineBlock.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengineBlock.get(i));
          };
        }
      }
      if (jsonObj.get("engine_size") != null && !jsonObj.get("engine_size").isJsonNull()) {
        JsonArray jsonArrayengineSize = jsonObj.getAsJsonArray("engine_size");
        if (jsonArrayengineSize != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine_size").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine_size` to be an array in the JSON string but got `%s`", jsonObj.get("engine_size").toString()));
          }

          // validate the optional field `engine_size` (array)
          for (int i = 0; i < jsonArrayengineSize.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengineSize.get(i));
          };
        }
      }
      if (jsonObj.get("exterior_color") != null && !jsonObj.get("exterior_color").isJsonNull()) {
        JsonArray jsonArrayexteriorColor = jsonObj.getAsJsonArray("exterior_color");
        if (jsonArrayexteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exterior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exterior_color` to be an array in the JSON string but got `%s`", jsonObj.get("exterior_color").toString()));
          }

          // validate the optional field `exterior_color` (array)
          for (int i = 0; i < jsonArrayexteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayexteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("fca_status") != null && !jsonObj.get("fca_status").isJsonNull()) {
        JsonArray jsonArrayfcaStatus = jsonObj.getAsJsonArray("fca_status");
        if (jsonArrayfcaStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fca_status").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fca_status` to be an array in the JSON string but got `%s`", jsonObj.get("fca_status").toString()));
          }

          // validate the optional field `fca_status` (array)
          for (int i = 0; i < jsonArrayfcaStatus.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayfcaStatus.get(i));
          };
        }
      }
      if (jsonObj.get("fuel_type") != null && !jsonObj.get("fuel_type").isJsonNull()) {
        JsonArray jsonArrayfuelType = jsonObj.getAsJsonArray("fuel_type");
        if (jsonArrayfuelType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fuel_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fuel_type` to be an array in the JSON string but got `%s`", jsonObj.get("fuel_type").toString()));
          }

          // validate the optional field `fuel_type` (array)
          for (int i = 0; i < jsonArrayfuelType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayfuelType.get(i));
          };
        }
      }
      if (jsonObj.get("in_transit") != null && !jsonObj.get("in_transit").isJsonNull()) {
        JsonArray jsonArrayinTransit = jsonObj.getAsJsonArray("in_transit");
        if (jsonArrayinTransit != null) {
          // ensure the json data is an array
          if (!jsonObj.get("in_transit").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `in_transit` to be an array in the JSON string but got `%s`", jsonObj.get("in_transit").toString()));
          }

          // validate the optional field `in_transit` (array)
          for (int i = 0; i < jsonArrayinTransit.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayinTransit.get(i));
          };
        }
      }
      if (jsonObj.get("insurance_group") != null && !jsonObj.get("insurance_group").isJsonNull()) {
        JsonArray jsonArrayinsuranceGroup = jsonObj.getAsJsonArray("insurance_group");
        if (jsonArrayinsuranceGroup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("insurance_group").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `insurance_group` to be an array in the JSON string but got `%s`", jsonObj.get("insurance_group").toString()));
          }

          // validate the optional field `insurance_group` (array)
          for (int i = 0; i < jsonArrayinsuranceGroup.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayinsuranceGroup.get(i));
          };
        }
      }
      if (jsonObj.get("interior_color") != null && !jsonObj.get("interior_color").isJsonNull()) {
        JsonArray jsonArrayinteriorColor = jsonObj.getAsJsonArray("interior_color");
        if (jsonArrayinteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interior_color` to be an array in the JSON string but got `%s`", jsonObj.get("interior_color").toString()));
          }

          // validate the optional field `interior_color` (array)
          for (int i = 0; i < jsonArrayinteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayinteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) {
        JsonArray jsonArraymake = jsonObj.getAsJsonArray("make");
        if (jsonArraymake != null) {
          // ensure the json data is an array
          if (!jsonObj.get("make").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `make` to be an array in the JSON string but got `%s`", jsonObj.get("make").toString()));
          }

          // validate the optional field `make` (array)
          for (int i = 0; i < jsonArraymake.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymake.get(i));
          };
        }
      }
      if (jsonObj.get("mas_code") != null && !jsonObj.get("mas_code").isJsonNull()) {
        JsonArray jsonArraymasCode = jsonObj.getAsJsonArray("mas_code");
        if (jsonArraymasCode != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mas_code").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mas_code` to be an array in the JSON string but got `%s`", jsonObj.get("mas_code").toString()));
          }

          // validate the optional field `mas_code` (array)
          for (int i = 0; i < jsonArraymasCode.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymasCode.get(i));
          };
        }
      }
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        JsonArray jsonArraymodel = jsonObj.getAsJsonArray("model");
        if (jsonArraymodel != null) {
          // ensure the json data is an array
          if (!jsonObj.get("model").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `model` to be an array in the JSON string but got `%s`", jsonObj.get("model").toString()));
          }

          // validate the optional field `model` (array)
          for (int i = 0; i < jsonArraymodel.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymodel.get(i));
          };
        }
      }
      if (jsonObj.get("num_owners") != null && !jsonObj.get("num_owners").isJsonNull()) {
        JsonArray jsonArraynumOwners = jsonObj.getAsJsonArray("num_owners");
        if (jsonArraynumOwners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("num_owners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `num_owners` to be an array in the JSON string but got `%s`", jsonObj.get("num_owners").toString()));
          }

          // validate the optional field `num_owners` (array)
          for (int i = 0; i < jsonArraynumOwners.size(); i++) {
            FacetItem.validateJsonElement(jsonArraynumOwners.get(i));
          };
        }
      }
      if (jsonObj.get("powertrain_type") != null && !jsonObj.get("powertrain_type").isJsonNull()) {
        JsonArray jsonArraypowertrainType = jsonObj.getAsJsonArray("powertrain_type");
        if (jsonArraypowertrainType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("powertrain_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `powertrain_type` to be an array in the JSON string but got `%s`", jsonObj.get("powertrain_type").toString()));
          }

          // validate the optional field `powertrain_type` (array)
          for (int i = 0; i < jsonArraypowertrainType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraypowertrainType.get(i));
          };
        }
      }
      if (jsonObj.get("seating_capacity") != null && !jsonObj.get("seating_capacity").isJsonNull()) {
        JsonArray jsonArrayseatingCapacity = jsonObj.getAsJsonArray("seating_capacity");
        if (jsonArrayseatingCapacity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seating_capacity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seating_capacity` to be an array in the JSON string but got `%s`", jsonObj.get("seating_capacity").toString()));
          }

          // validate the optional field `seating_capacity` (array)
          for (int i = 0; i < jsonArrayseatingCapacity.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayseatingCapacity.get(i));
          };
        }
      }
      if (jsonObj.get("seller_name") != null && !jsonObj.get("seller_name").isJsonNull()) {
        JsonArray jsonArraysellerName = jsonObj.getAsJsonArray("seller_name");
        if (jsonArraysellerName != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seller_name").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_name` to be an array in the JSON string but got `%s`", jsonObj.get("seller_name").toString()));
          }

          // validate the optional field `seller_name` (array)
          for (int i = 0; i < jsonArraysellerName.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysellerName.get(i));
          };
        }
      }
      if (jsonObj.get("seller_type") != null && !jsonObj.get("seller_type").isJsonNull()) {
        JsonArray jsonArraysellerType = jsonObj.getAsJsonArray("seller_type");
        if (jsonArraysellerType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seller_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_type` to be an array in the JSON string but got `%s`", jsonObj.get("seller_type").toString()));
          }

          // validate the optional field `seller_type` (array)
          for (int i = 0; i < jsonArraysellerType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysellerType.get(i));
          };
        }
      }
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        JsonArray jsonArraysource = jsonObj.getAsJsonArray("source");
        if (jsonArraysource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("source").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `source` to be an array in the JSON string but got `%s`", jsonObj.get("source").toString()));
          }

          // validate the optional field `source` (array)
          for (int i = 0; i < jsonArraysource.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysource.get(i));
          };
        }
      }
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        JsonArray jsonArraystate = jsonObj.getAsJsonArray("state");
        if (jsonArraystate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("state").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `state` to be an array in the JSON string but got `%s`", jsonObj.get("state").toString()));
          }

          // validate the optional field `state` (array)
          for (int i = 0; i < jsonArraystate.size(); i++) {
            FacetItem.validateJsonElement(jsonArraystate.get(i));
          };
        }
      }
      if (jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) {
        JsonArray jsonArraytransmission = jsonObj.getAsJsonArray("transmission");
        if (jsonArraytransmission != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transmission").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transmission` to be an array in the JSON string but got `%s`", jsonObj.get("transmission").toString()));
          }

          // validate the optional field `transmission` (array)
          for (int i = 0; i < jsonArraytransmission.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytransmission.get(i));
          };
        }
      }
      if (jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) {
        JsonArray jsonArraytrim = jsonObj.getAsJsonArray("trim");
        if (jsonArraytrim != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trim").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trim` to be an array in the JSON string but got `%s`", jsonObj.get("trim").toString()));
          }

          // validate the optional field `trim` (array)
          for (int i = 0; i < jsonArraytrim.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytrim.get(i));
          };
        }
      }
      if (jsonObj.get("vehicle_registration_mark") != null && !jsonObj.get("vehicle_registration_mark").isJsonNull()) {
        JsonArray jsonArrayvehicleRegistrationMark = jsonObj.getAsJsonArray("vehicle_registration_mark");
        if (jsonArrayvehicleRegistrationMark != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vehicle_registration_mark").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vehicle_registration_mark` to be an array in the JSON string but got `%s`", jsonObj.get("vehicle_registration_mark").toString()));
          }

          // validate the optional field `vehicle_registration_mark` (array)
          for (int i = 0; i < jsonArrayvehicleRegistrationMark.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayvehicleRegistrationMark.get(i));
          };
        }
      }
      if (jsonObj.get("vehicle_type") != null && !jsonObj.get("vehicle_type").isJsonNull()) {
        JsonArray jsonArrayvehicleType = jsonObj.getAsJsonArray("vehicle_type");
        if (jsonArrayvehicleType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vehicle_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vehicle_type` to be an array in the JSON string but got `%s`", jsonObj.get("vehicle_type").toString()));
          }

          // validate the optional field `vehicle_type` (array)
          for (int i = 0; i < jsonArrayvehicleType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayvehicleType.get(i));
          };
        }
      }
      if (jsonObj.get("vrm") != null && !jsonObj.get("vrm").isJsonNull()) {
        JsonArray jsonArrayvrm = jsonObj.getAsJsonArray("vrm");
        if (jsonArrayvrm != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vrm").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vrm` to be an array in the JSON string but got `%s`", jsonObj.get("vrm").toString()));
          }

          // validate the optional field `vrm` (array)
          for (int i = 0; i < jsonArrayvrm.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayvrm.get(i));
          };
        }
      }
      if (jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) {
        JsonArray jsonArrayyear = jsonObj.getAsJsonArray("year");
        if (jsonArrayyear != null) {
          // ensure the json data is an array
          if (!jsonObj.get("year").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `year` to be an array in the JSON string but got `%s`", jsonObj.get("year").toString()));
          }

          // validate the optional field `year` (array)
          for (int i = 0; i < jsonArrayyear.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayyear.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UKCarSearchFacets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UKCarSearchFacets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UKCarSearchFacets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UKCarSearchFacets.class));

       return (TypeAdapter<T>) new TypeAdapter<UKCarSearchFacets>() {
           @Override
           public void write(JsonWriter out, UKCarSearchFacets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UKCarSearchFacets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UKCarSearchFacets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UKCarSearchFacets
   * @throws IOException if the JSON string is invalid with respect to UKCarSearchFacets
   */
  public static UKCarSearchFacets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UKCarSearchFacets.class);
  }

  /**
   * Convert an instance of UKCarSearchFacets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

