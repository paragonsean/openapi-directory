/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListingFinance;
import org.openapitools.client.model.ListingLease;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a car history entry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoricalListing {
  public static final String SERIALIZED_NAME_CARFAX1_OWNER = "carfax_1_owner";
  @SerializedName(SERIALIZED_NAME_CARFAX1_OWNER)
  private Boolean carfax1Owner;

  public static final String SERIALIZED_NAME_CARFAX_CLEAN_TITLE = "carfax_clean_title";
  @SerializedName(SERIALIZED_NAME_CARFAX_CLEAN_TITLE)
  private Boolean carfaxCleanTitle;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "data_source";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private String dataSource;

  public static final String SERIALIZED_NAME_DEALER_ID = "dealer_id";
  @SerializedName(SERIALIZED_NAME_DEALER_ID)
  private Integer dealerId;

  public static final String SERIALIZED_NAME_DOM = "dom";
  @SerializedName(SERIALIZED_NAME_DOM)
  private Integer dom;

  public static final String SERIALIZED_NAME_DOM180 = "dom_180";
  @SerializedName(SERIALIZED_NAME_DOM180)
  private Integer dom180;

  public static final String SERIALIZED_NAME_DOM_ACTIVE = "dom_active";
  @SerializedName(SERIALIZED_NAME_DOM_ACTIVE)
  private Integer domActive;

  public static final String SERIALIZED_NAME_EXTERIOR_COLOR = "exterior_color";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_COLOR)
  private String exteriorColor;

  public static final String SERIALIZED_NAME_FINANCING_OPTIONS = "financing_options";
  @SerializedName(SERIALIZED_NAME_FINANCING_OPTIONS)
  private List<ListingFinance> financingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_SEEN_AT = "first_seen_at";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN_AT)
  private Integer firstSeenAt;

  public static final String SERIALIZED_NAME_FIRST_SEEN_AT_DATE = "first_seen_at_date";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN_AT_DATE)
  private String firstSeenAtDate;

  public static final String SERIALIZED_NAME_HEADING = "heading";
  @SerializedName(SERIALIZED_NAME_HEADING)
  private String heading;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERIOR_COLOR = "interior_color";
  @SerializedName(SERIALIZED_NAME_INTERIOR_COLOR)
  private String interiorColor;

  public static final String SERIALIZED_NAME_INVENTORY_TYPE = "inventory_type";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TYPE)
  private String inventoryType;

  public static final String SERIALIZED_NAME_IS_CERTIFIED = "is_certified";
  @SerializedName(SERIALIZED_NAME_IS_CERTIFIED)
  private Integer isCertified;

  public static final String SERIALIZED_NAME_IS_SEARCHABLE = "is_searchable";
  @SerializedName(SERIALIZED_NAME_IS_SEARCHABLE)
  private String isSearchable;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT = "last_seen_at";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT)
  private Integer lastSeenAt;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT_DATE = "last_seen_at_date";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT_DATE)
  private String lastSeenAtDate;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private String latitude;

  public static final String SERIALIZED_NAME_LEASING_OPTIONS = "leasing_options";
  @SerializedName(SERIALIZED_NAME_LEASING_OPTIONS)
  private List<ListingLease> leasingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private String longitude;

  public static final String SERIALIZED_NAME_MILES = "miles";
  @SerializedName(SERIALIZED_NAME_MILES)
  private Integer miles;

  public static final String SERIALIZED_NAME_MSRP = "msrp";
  @SerializedName(SERIALIZED_NAME_MSRP)
  private Integer msrp;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_REF_MILES = "ref_miles";
  @SerializedName(SERIALIZED_NAME_REF_MILES)
  private String refMiles;

  public static final String SERIALIZED_NAME_REF_MILES_DT = "ref_miles_dt";
  @SerializedName(SERIALIZED_NAME_REF_MILES_DT)
  private Integer refMilesDt;

  public static final String SERIALIZED_NAME_REF_PRICE = "ref_price";
  @SerializedName(SERIALIZED_NAME_REF_PRICE)
  private String refPrice;

  public static final String SERIALIZED_NAME_REF_PRICE_DT = "ref_price_dt";
  @SerializedName(SERIALIZED_NAME_REF_PRICE_DT)
  private Integer refPriceDt;

  public static final String SERIALIZED_NAME_SCRAPED_AT = "scraped_at";
  @SerializedName(SERIALIZED_NAME_SCRAPED_AT)
  private Integer scrapedAt;

  public static final String SERIALIZED_NAME_SCRAPED_AT_DATE = "scraped_at_date";
  @SerializedName(SERIALIZED_NAME_SCRAPED_AT_DATE)
  private String scrapedAtDate;

  public static final String SERIALIZED_NAME_SELLER_NAME = "seller_name";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private String sellerName;

  public static final String SERIALIZED_NAME_SELLER_NAME_O = "seller_name_o";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME_O)
  private String sellerNameO;

  public static final String SERIALIZED_NAME_SELLER_TYPE = "seller_type";
  @SerializedName(SERIALIZED_NAME_SELLER_TYPE)
  private String sellerType;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATUS_DATE = "status_date";
  @SerializedName(SERIALIZED_NAME_STATUS_DATE)
  private Integer statusDate;

  public static final String SERIALIZED_NAME_STOCK_NO = "stock_no";
  @SerializedName(SERIALIZED_NAME_STOCK_NO)
  private String stockNo;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_TRIM_R = "trim_r";
  @SerializedName(SERIALIZED_NAME_TRIM_R)
  private String trimR;

  public static final String SERIALIZED_NAME_VDP_URL = "vdp_url";
  @SerializedName(SERIALIZED_NAME_VDP_URL)
  private String vdpUrl;

  public static final String SERIALIZED_NAME_VIN = "vin";
  @SerializedName(SERIALIZED_NAME_VIN)
  private String vin;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public HistoricalListing() {
  }

  public HistoricalListing carfax1Owner(Boolean carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
    return this;
  }

  /**
   * Flag to indicate whether listing is carfax_1_owner
   * @return carfax1Owner
   */
  @javax.annotation.Nullable
  public Boolean getCarfax1Owner() {
    return carfax1Owner;
  }

  public void setCarfax1Owner(Boolean carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
  }


  public HistoricalListing carfaxCleanTitle(Boolean carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
    return this;
  }

  /**
   * Flag to indicate whether listing is carfax_clean_title
   * @return carfaxCleanTitle
   */
  @javax.annotation.Nullable
  public Boolean getCarfaxCleanTitle() {
    return carfaxCleanTitle;
  }

  public void setCarfaxCleanTitle(Boolean carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
  }


  public HistoricalListing city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City of the listing
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public HistoricalListing dataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Data source of the listing
   * @return dataSource
   */
  @javax.annotation.Nullable
  public String getDataSource() {
    return dataSource;
  }

  public void setDataSource(String dataSource) {
    this.dataSource = dataSource;
  }


  public HistoricalListing dealerId(Integer dealerId) {
    this.dealerId = dealerId;
    return this;
  }

  /**
   * Unique MC assigned dealers id for the listing
   * @return dealerId
   */
  @javax.annotation.Nullable
  public Integer getDealerId() {
    return dealerId;
  }

  public void setDealerId(Integer dealerId) {
    this.dealerId = dealerId;
  }


  public HistoricalListing dom(Integer dom) {
    this.dom = dom;
    return this;
  }

  /**
   * Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car
   * @return dom
   */
  @javax.annotation.Nullable
  public Integer getDom() {
    return dom;
  }

  public void setDom(Integer dom) {
    this.dom = dom;
  }


  public HistoricalListing dom180(Integer dom180) {
    this.dom180 = dom180;
    return this;
  }

  /**
   * Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car
   * @return dom180
   */
  @javax.annotation.Nullable
  public Integer getDom180() {
    return dom180;
  }

  public void setDom180(Integer dom180) {
    this.dom180 = dom180;
  }


  public HistoricalListing domActive(Integer domActive) {
    this.domActive = domActive;
    return this;
  }

  /**
   * Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car
   * @return domActive
   */
  @javax.annotation.Nullable
  public Integer getDomActive() {
    return domActive;
  }

  public void setDomActive(Integer domActive) {
    this.domActive = domActive;
  }


  public HistoricalListing exteriorColor(String exteriorColor) {
    this.exteriorColor = exteriorColor;
    return this;
  }

  /**
   * Exterior color of the car
   * @return exteriorColor
   */
  @javax.annotation.Nullable
  public String getExteriorColor() {
    return exteriorColor;
  }

  public void setExteriorColor(String exteriorColor) {
    this.exteriorColor = exteriorColor;
  }


  public HistoricalListing financingOptions(List<ListingFinance> financingOptions) {
    this.financingOptions = financingOptions;
    return this;
  }

  public HistoricalListing addFinancingOptionsItem(ListingFinance financingOptionsItem) {
    if (this.financingOptions == null) {
      this.financingOptions = new ArrayList<>();
    }
    this.financingOptions.add(financingOptionsItem);
    return this;
  }

  /**
   * Array of all finance offers for this listing
   * @return financingOptions
   */
  @javax.annotation.Nullable
  public List<ListingFinance> getFinancingOptions() {
    return financingOptions;
  }

  public void setFinancingOptions(List<ListingFinance> financingOptions) {
    this.financingOptions = financingOptions;
  }


  public HistoricalListing firstSeenAt(Integer firstSeenAt) {
    this.firstSeenAt = firstSeenAt;
    return this;
  }

  /**
   * Listing first seen at first scraped timestamp
   * @return firstSeenAt
   */
  @javax.annotation.Nullable
  public Integer getFirstSeenAt() {
    return firstSeenAt;
  }

  public void setFirstSeenAt(Integer firstSeenAt) {
    this.firstSeenAt = firstSeenAt;
  }


  public HistoricalListing firstSeenAtDate(String firstSeenAtDate) {
    this.firstSeenAtDate = firstSeenAtDate;
    return this;
  }

  /**
   * Listing first seen at first scraped date
   * @return firstSeenAtDate
   */
  @javax.annotation.Nullable
  public String getFirstSeenAtDate() {
    return firstSeenAtDate;
  }

  public void setFirstSeenAtDate(String firstSeenAtDate) {
    this.firstSeenAtDate = firstSeenAtDate;
  }


  public HistoricalListing heading(String heading) {
    this.heading = heading;
    return this;
  }

  /**
   * Listing title as displayed on the source website
   * @return heading
   */
  @javax.annotation.Nullable
  public String getHeading() {
    return heading;
  }

  public void setHeading(String heading) {
    this.heading = heading;
  }


  public HistoricalListing id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier representing a specific listing from the Marketcheck database
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public HistoricalListing interiorColor(String interiorColor) {
    this.interiorColor = interiorColor;
    return this;
  }

  /**
   * Interior color of the car
   * @return interiorColor
   */
  @javax.annotation.Nullable
  public String getInteriorColor() {
    return interiorColor;
  }

  public void setInteriorColor(String interiorColor) {
    this.interiorColor = interiorColor;
  }


  public HistoricalListing inventoryType(String inventoryType) {
    this.inventoryType = inventoryType;
    return this;
  }

  /**
   * Inventory type of car
   * @return inventoryType
   */
  @javax.annotation.Nullable
  public String getInventoryType() {
    return inventoryType;
  }

  public void setInventoryType(String inventoryType) {
    this.inventoryType = inventoryType;
  }


  public HistoricalListing isCertified(Integer isCertified) {
    this.isCertified = isCertified;
    return this;
  }

  /**
   * Certified car
   * @return isCertified
   */
  @javax.annotation.Nullable
  public Integer getIsCertified() {
    return isCertified;
  }

  public void setIsCertified(Integer isCertified) {
    this.isCertified = isCertified;
  }


  public HistoricalListing isSearchable(String isSearchable) {
    this.isSearchable = isSearchable;
    return this;
  }

  /**
   * Flag to indicate listing is marked searchable or not
   * @return isSearchable
   */
  @javax.annotation.Nullable
  public String getIsSearchable() {
    return isSearchable;
  }

  public void setIsSearchable(String isSearchable) {
    this.isSearchable = isSearchable;
  }


  public HistoricalListing lastSeenAt(Integer lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
    return this;
  }

  /**
   * Listing last seen at (most recent) timestamp
   * @return lastSeenAt
   */
  @javax.annotation.Nullable
  public Integer getLastSeenAt() {
    return lastSeenAt;
  }

  public void setLastSeenAt(Integer lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
  }


  public HistoricalListing lastSeenAtDate(String lastSeenAtDate) {
    this.lastSeenAtDate = lastSeenAtDate;
    return this;
  }

  /**
   * Listing last seen at (most recent) date
   * @return lastSeenAtDate
   */
  @javax.annotation.Nullable
  public String getLastSeenAtDate() {
    return lastSeenAtDate;
  }

  public void setLastSeenAtDate(String lastSeenAtDate) {
    this.lastSeenAtDate = lastSeenAtDate;
  }


  public HistoricalListing latitude(String latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Latitude of the listing
   * @return latitude
   */
  @javax.annotation.Nullable
  public String getLatitude() {
    return latitude;
  }

  public void setLatitude(String latitude) {
    this.latitude = latitude;
  }


  public HistoricalListing leasingOptions(List<ListingLease> leasingOptions) {
    this.leasingOptions = leasingOptions;
    return this;
  }

  public HistoricalListing addLeasingOptionsItem(ListingLease leasingOptionsItem) {
    if (this.leasingOptions == null) {
      this.leasingOptions = new ArrayList<>();
    }
    this.leasingOptions.add(leasingOptionsItem);
    return this;
  }

  /**
   * Array of all finance offers for this listing
   * @return leasingOptions
   */
  @javax.annotation.Nullable
  public List<ListingLease> getLeasingOptions() {
    return leasingOptions;
  }

  public void setLeasingOptions(List<ListingLease> leasingOptions) {
    this.leasingOptions = leasingOptions;
  }


  public HistoricalListing longitude(String longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Longitude of the listing
   * @return longitude
   */
  @javax.annotation.Nullable
  public String getLongitude() {
    return longitude;
  }

  public void setLongitude(String longitude) {
    this.longitude = longitude;
  }


  public HistoricalListing miles(Integer miles) {
    this.miles = miles;
    return this;
  }

  /**
   * Odometer reading / reported miles usage for the car
   * @return miles
   */
  @javax.annotation.Nullable
  public Integer getMiles() {
    return miles;
  }

  public void setMiles(Integer miles) {
    this.miles = miles;
  }


  public HistoricalListing msrp(Integer msrp) {
    this.msrp = msrp;
    return this;
  }

  /**
   * MSRP for the car
   * @return msrp
   */
  @javax.annotation.Nullable
  public Integer getMsrp() {
    return msrp;
  }

  public void setMsrp(Integer msrp) {
    this.msrp = msrp;
  }


  public HistoricalListing price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * Asking price for the car
   * @return price
   */
  @javax.annotation.Nullable
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public HistoricalListing refMiles(String refMiles) {
    this.refMiles = refMiles;
    return this;
  }

  /**
   * Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date
   * @return refMiles
   */
  @javax.annotation.Nullable
  public String getRefMiles() {
    return refMiles;
  }

  public void setRefMiles(String refMiles) {
    this.refMiles = refMiles;
  }


  public HistoricalListing refMilesDt(Integer refMilesDt) {
    this.refMilesDt = refMilesDt;
    return this;
  }

  /**
   * The date at which the last miles was reported online. This is earlier to last_seen_date
   * @return refMilesDt
   */
  @javax.annotation.Nullable
  public Integer getRefMilesDt() {
    return refMilesDt;
  }

  public void setRefMilesDt(Integer refMilesDt) {
    this.refMilesDt = refMilesDt;
  }


  public HistoricalListing refPrice(String refPrice) {
    this.refPrice = refPrice;
    return this;
  }

  /**
   * Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date
   * @return refPrice
   */
  @javax.annotation.Nullable
  public String getRefPrice() {
    return refPrice;
  }

  public void setRefPrice(String refPrice) {
    this.refPrice = refPrice;
  }


  public HistoricalListing refPriceDt(Integer refPriceDt) {
    this.refPriceDt = refPriceDt;
    return this;
  }

  /**
   * The date at which the last price was reported online. This is earlier to last_seen_date
   * @return refPriceDt
   */
  @javax.annotation.Nullable
  public Integer getRefPriceDt() {
    return refPriceDt;
  }

  public void setRefPriceDt(Integer refPriceDt) {
    this.refPriceDt = refPriceDt;
  }


  public HistoricalListing scrapedAt(Integer scrapedAt) {
    this.scrapedAt = scrapedAt;
    return this;
  }

  /**
   * Listing last seen at date timestamp
   * @return scrapedAt
   */
  @javax.annotation.Nullable
  public Integer getScrapedAt() {
    return scrapedAt;
  }

  public void setScrapedAt(Integer scrapedAt) {
    this.scrapedAt = scrapedAt;
  }


  public HistoricalListing scrapedAtDate(String scrapedAtDate) {
    this.scrapedAtDate = scrapedAtDate;
    return this;
  }

  /**
   * Listing last seen at date
   * @return scrapedAtDate
   */
  @javax.annotation.Nullable
  public String getScrapedAtDate() {
    return scrapedAtDate;
  }

  public void setScrapedAtDate(String scrapedAtDate) {
    this.scrapedAtDate = scrapedAtDate;
  }


  public HistoricalListing sellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  /**
   * Seller name of the listing from the Marketcheck database
   * @return sellerName
   */
  @javax.annotation.Nullable
  public String getSellerName() {
    return sellerName;
  }

  public void setSellerName(String sellerName) {
    this.sellerName = sellerName;
  }


  public HistoricalListing sellerNameO(String sellerNameO) {
    this.sellerNameO = sellerNameO;
    return this;
  }

  /**
   * Seller name of the listing from the Marketcheck database
   * @return sellerNameO
   */
  @javax.annotation.Nullable
  public String getSellerNameO() {
    return sellerNameO;
  }

  public void setSellerNameO(String sellerNameO) {
    this.sellerNameO = sellerNameO;
  }


  public HistoricalListing sellerType(String sellerType) {
    this.sellerType = sellerType;
    return this;
  }

  /**
   * Seller type for the car
   * @return sellerType
   */
  @javax.annotation.Nullable
  public String getSellerType() {
    return sellerType;
  }

  public void setSellerType(String sellerType) {
    this.sellerType = sellerType;
  }


  public HistoricalListing source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Source domain of the listing
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public HistoricalListing state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State of the listing
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public HistoricalListing statusDate(Integer statusDate) {
    this.statusDate = statusDate;
    return this;
  }

  /**
   * Timestamp of status date
   * @return statusDate
   */
  @javax.annotation.Nullable
  public Integer getStatusDate() {
    return statusDate;
  }

  public void setStatusDate(Integer statusDate) {
    this.statusDate = statusDate;
  }


  public HistoricalListing stockNo(String stockNo) {
    this.stockNo = stockNo;
    return this;
  }

  /**
   * Stock number of car in dealers inventory
   * @return stockNo
   */
  @javax.annotation.Nullable
  public String getStockNo() {
    return stockNo;
  }

  public void setStockNo(String stockNo) {
    this.stockNo = stockNo;
  }


  public HistoricalListing street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Street of the listing
   * @return street
   */
  @javax.annotation.Nullable
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public HistoricalListing trimR(String trimR) {
    this.trimR = trimR;
    return this;
  }

  /**
   * Trim of the car
   * @return trimR
   */
  @javax.annotation.Nullable
  public String getTrimR() {
    return trimR;
  }

  public void setTrimR(String trimR) {
    this.trimR = trimR;
  }


  public HistoricalListing vdpUrl(String vdpUrl) {
    this.vdpUrl = vdpUrl;
    return this;
  }

  /**
   * Vehicle Details Page url of the specific car
   * @return vdpUrl
   */
  @javax.annotation.Nullable
  public String getVdpUrl() {
    return vdpUrl;
  }

  public void setVdpUrl(String vdpUrl) {
    this.vdpUrl = vdpUrl;
  }


  public HistoricalListing vin(String vin) {
    this.vin = vin;
    return this;
  }

  /**
   * VIN for the car
   * @return vin
   */
  @javax.annotation.Nullable
  public String getVin() {
    return vin;
  }

  public void setVin(String vin) {
    this.vin = vin;
  }


  public HistoricalListing zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * Zip of the listing
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoricalListing historicalListing = (HistoricalListing) o;
    return Objects.equals(this.carfax1Owner, historicalListing.carfax1Owner) &&
        Objects.equals(this.carfaxCleanTitle, historicalListing.carfaxCleanTitle) &&
        Objects.equals(this.city, historicalListing.city) &&
        Objects.equals(this.dataSource, historicalListing.dataSource) &&
        Objects.equals(this.dealerId, historicalListing.dealerId) &&
        Objects.equals(this.dom, historicalListing.dom) &&
        Objects.equals(this.dom180, historicalListing.dom180) &&
        Objects.equals(this.domActive, historicalListing.domActive) &&
        Objects.equals(this.exteriorColor, historicalListing.exteriorColor) &&
        Objects.equals(this.financingOptions, historicalListing.financingOptions) &&
        Objects.equals(this.firstSeenAt, historicalListing.firstSeenAt) &&
        Objects.equals(this.firstSeenAtDate, historicalListing.firstSeenAtDate) &&
        Objects.equals(this.heading, historicalListing.heading) &&
        Objects.equals(this.id, historicalListing.id) &&
        Objects.equals(this.interiorColor, historicalListing.interiorColor) &&
        Objects.equals(this.inventoryType, historicalListing.inventoryType) &&
        Objects.equals(this.isCertified, historicalListing.isCertified) &&
        Objects.equals(this.isSearchable, historicalListing.isSearchable) &&
        Objects.equals(this.lastSeenAt, historicalListing.lastSeenAt) &&
        Objects.equals(this.lastSeenAtDate, historicalListing.lastSeenAtDate) &&
        Objects.equals(this.latitude, historicalListing.latitude) &&
        Objects.equals(this.leasingOptions, historicalListing.leasingOptions) &&
        Objects.equals(this.longitude, historicalListing.longitude) &&
        Objects.equals(this.miles, historicalListing.miles) &&
        Objects.equals(this.msrp, historicalListing.msrp) &&
        Objects.equals(this.price, historicalListing.price) &&
        Objects.equals(this.refMiles, historicalListing.refMiles) &&
        Objects.equals(this.refMilesDt, historicalListing.refMilesDt) &&
        Objects.equals(this.refPrice, historicalListing.refPrice) &&
        Objects.equals(this.refPriceDt, historicalListing.refPriceDt) &&
        Objects.equals(this.scrapedAt, historicalListing.scrapedAt) &&
        Objects.equals(this.scrapedAtDate, historicalListing.scrapedAtDate) &&
        Objects.equals(this.sellerName, historicalListing.sellerName) &&
        Objects.equals(this.sellerNameO, historicalListing.sellerNameO) &&
        Objects.equals(this.sellerType, historicalListing.sellerType) &&
        Objects.equals(this.source, historicalListing.source) &&
        Objects.equals(this.state, historicalListing.state) &&
        Objects.equals(this.statusDate, historicalListing.statusDate) &&
        Objects.equals(this.stockNo, historicalListing.stockNo) &&
        Objects.equals(this.street, historicalListing.street) &&
        Objects.equals(this.trimR, historicalListing.trimR) &&
        Objects.equals(this.vdpUrl, historicalListing.vdpUrl) &&
        Objects.equals(this.vin, historicalListing.vin) &&
        Objects.equals(this.zip, historicalListing.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carfax1Owner, carfaxCleanTitle, city, dataSource, dealerId, dom, dom180, domActive, exteriorColor, financingOptions, firstSeenAt, firstSeenAtDate, heading, id, interiorColor, inventoryType, isCertified, isSearchable, lastSeenAt, lastSeenAtDate, latitude, leasingOptions, longitude, miles, msrp, price, refMiles, refMilesDt, refPrice, refPriceDt, scrapedAt, scrapedAtDate, sellerName, sellerNameO, sellerType, source, state, statusDate, stockNo, street, trimR, vdpUrl, vin, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoricalListing {\n");
    sb.append("    carfax1Owner: ").append(toIndentedString(carfax1Owner)).append("\n");
    sb.append("    carfaxCleanTitle: ").append(toIndentedString(carfaxCleanTitle)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    dealerId: ").append(toIndentedString(dealerId)).append("\n");
    sb.append("    dom: ").append(toIndentedString(dom)).append("\n");
    sb.append("    dom180: ").append(toIndentedString(dom180)).append("\n");
    sb.append("    domActive: ").append(toIndentedString(domActive)).append("\n");
    sb.append("    exteriorColor: ").append(toIndentedString(exteriorColor)).append("\n");
    sb.append("    financingOptions: ").append(toIndentedString(financingOptions)).append("\n");
    sb.append("    firstSeenAt: ").append(toIndentedString(firstSeenAt)).append("\n");
    sb.append("    firstSeenAtDate: ").append(toIndentedString(firstSeenAtDate)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interiorColor: ").append(toIndentedString(interiorColor)).append("\n");
    sb.append("    inventoryType: ").append(toIndentedString(inventoryType)).append("\n");
    sb.append("    isCertified: ").append(toIndentedString(isCertified)).append("\n");
    sb.append("    isSearchable: ").append(toIndentedString(isSearchable)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("    lastSeenAtDate: ").append(toIndentedString(lastSeenAtDate)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    leasingOptions: ").append(toIndentedString(leasingOptions)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    miles: ").append(toIndentedString(miles)).append("\n");
    sb.append("    msrp: ").append(toIndentedString(msrp)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    refMiles: ").append(toIndentedString(refMiles)).append("\n");
    sb.append("    refMilesDt: ").append(toIndentedString(refMilesDt)).append("\n");
    sb.append("    refPrice: ").append(toIndentedString(refPrice)).append("\n");
    sb.append("    refPriceDt: ").append(toIndentedString(refPriceDt)).append("\n");
    sb.append("    scrapedAt: ").append(toIndentedString(scrapedAt)).append("\n");
    sb.append("    scrapedAtDate: ").append(toIndentedString(scrapedAtDate)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    sellerNameO: ").append(toIndentedString(sellerNameO)).append("\n");
    sb.append("    sellerType: ").append(toIndentedString(sellerType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusDate: ").append(toIndentedString(statusDate)).append("\n");
    sb.append("    stockNo: ").append(toIndentedString(stockNo)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    trimR: ").append(toIndentedString(trimR)).append("\n");
    sb.append("    vdpUrl: ").append(toIndentedString(vdpUrl)).append("\n");
    sb.append("    vin: ").append(toIndentedString(vin)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carfax_1_owner");
    openapiFields.add("carfax_clean_title");
    openapiFields.add("city");
    openapiFields.add("data_source");
    openapiFields.add("dealer_id");
    openapiFields.add("dom");
    openapiFields.add("dom_180");
    openapiFields.add("dom_active");
    openapiFields.add("exterior_color");
    openapiFields.add("financing_options");
    openapiFields.add("first_seen_at");
    openapiFields.add("first_seen_at_date");
    openapiFields.add("heading");
    openapiFields.add("id");
    openapiFields.add("interior_color");
    openapiFields.add("inventory_type");
    openapiFields.add("is_certified");
    openapiFields.add("is_searchable");
    openapiFields.add("last_seen_at");
    openapiFields.add("last_seen_at_date");
    openapiFields.add("latitude");
    openapiFields.add("leasing_options");
    openapiFields.add("longitude");
    openapiFields.add("miles");
    openapiFields.add("msrp");
    openapiFields.add("price");
    openapiFields.add("ref_miles");
    openapiFields.add("ref_miles_dt");
    openapiFields.add("ref_price");
    openapiFields.add("ref_price_dt");
    openapiFields.add("scraped_at");
    openapiFields.add("scraped_at_date");
    openapiFields.add("seller_name");
    openapiFields.add("seller_name_o");
    openapiFields.add("seller_type");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("status_date");
    openapiFields.add("stock_no");
    openapiFields.add("street");
    openapiFields.add("trim_r");
    openapiFields.add("vdp_url");
    openapiFields.add("vin");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoricalListing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoricalListing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoricalListing is not found in the empty JSON string", HistoricalListing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoricalListing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoricalListing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("data_source") != null && !jsonObj.get("data_source").isJsonNull()) && !jsonObj.get("data_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_source").toString()));
      }
      if ((jsonObj.get("exterior_color") != null && !jsonObj.get("exterior_color").isJsonNull()) && !jsonObj.get("exterior_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exterior_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exterior_color").toString()));
      }
      if (jsonObj.get("financing_options") != null && !jsonObj.get("financing_options").isJsonNull()) {
        JsonArray jsonArrayfinancingOptions = jsonObj.getAsJsonArray("financing_options");
        if (jsonArrayfinancingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("financing_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `financing_options` to be an array in the JSON string but got `%s`", jsonObj.get("financing_options").toString()));
          }

          // validate the optional field `financing_options` (array)
          for (int i = 0; i < jsonArrayfinancingOptions.size(); i++) {
            ListingFinance.validateJsonElement(jsonArrayfinancingOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("first_seen_at_date") != null && !jsonObj.get("first_seen_at_date").isJsonNull()) && !jsonObj.get("first_seen_at_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_seen_at_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_seen_at_date").toString()));
      }
      if ((jsonObj.get("heading") != null && !jsonObj.get("heading").isJsonNull()) && !jsonObj.get("heading").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heading` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heading").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("interior_color") != null && !jsonObj.get("interior_color").isJsonNull()) && !jsonObj.get("interior_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interior_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interior_color").toString()));
      }
      if ((jsonObj.get("inventory_type") != null && !jsonObj.get("inventory_type").isJsonNull()) && !jsonObj.get("inventory_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventory_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventory_type").toString()));
      }
      if ((jsonObj.get("is_searchable") != null && !jsonObj.get("is_searchable").isJsonNull()) && !jsonObj.get("is_searchable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_searchable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_searchable").toString()));
      }
      if ((jsonObj.get("last_seen_at_date") != null && !jsonObj.get("last_seen_at_date").isJsonNull()) && !jsonObj.get("last_seen_at_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_seen_at_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_seen_at_date").toString()));
      }
      if ((jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if (jsonObj.get("leasing_options") != null && !jsonObj.get("leasing_options").isJsonNull()) {
        JsonArray jsonArrayleasingOptions = jsonObj.getAsJsonArray("leasing_options");
        if (jsonArrayleasingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("leasing_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `leasing_options` to be an array in the JSON string but got `%s`", jsonObj.get("leasing_options").toString()));
          }

          // validate the optional field `leasing_options` (array)
          for (int i = 0; i < jsonArrayleasingOptions.size(); i++) {
            ListingLease.validateJsonElement(jsonArrayleasingOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if ((jsonObj.get("ref_miles") != null && !jsonObj.get("ref_miles").isJsonNull()) && !jsonObj.get("ref_miles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref_miles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref_miles").toString()));
      }
      if ((jsonObj.get("ref_price") != null && !jsonObj.get("ref_price").isJsonNull()) && !jsonObj.get("ref_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref_price").toString()));
      }
      if ((jsonObj.get("scraped_at_date") != null && !jsonObj.get("scraped_at_date").isJsonNull()) && !jsonObj.get("scraped_at_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scraped_at_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scraped_at_date").toString()));
      }
      if ((jsonObj.get("seller_name") != null && !jsonObj.get("seller_name").isJsonNull()) && !jsonObj.get("seller_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_name").toString()));
      }
      if ((jsonObj.get("seller_name_o") != null && !jsonObj.get("seller_name_o").isJsonNull()) && !jsonObj.get("seller_name_o").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_name_o` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_name_o").toString()));
      }
      if ((jsonObj.get("seller_type") != null && !jsonObj.get("seller_type").isJsonNull()) && !jsonObj.get("seller_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_type").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("stock_no") != null && !jsonObj.get("stock_no").isJsonNull()) && !jsonObj.get("stock_no").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stock_no` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stock_no").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("trim_r") != null && !jsonObj.get("trim_r").isJsonNull()) && !jsonObj.get("trim_r").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trim_r` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trim_r").toString()));
      }
      if ((jsonObj.get("vdp_url") != null && !jsonObj.get("vdp_url").isJsonNull()) && !jsonObj.get("vdp_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vdp_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vdp_url").toString()));
      }
      if ((jsonObj.get("vin") != null && !jsonObj.get("vin").isJsonNull()) && !jsonObj.get("vin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vin").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoricalListing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoricalListing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoricalListing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoricalListing.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoricalListing>() {
           @Override
           public void write(JsonWriter out, HistoricalListing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoricalListing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoricalListing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoricalListing
   * @throws IOException if the JSON string is invalid with respect to HistoricalListing
   */
  public static HistoricalListing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoricalListing.class);
  }

  /**
   * Convert an instance of HistoricalListing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

