/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListingFinance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListingFinance {
  public static final String SERIALIZED_NAME_DOWN_PAYMENT = "down_payment";
  @SerializedName(SERIALIZED_NAME_DOWN_PAYMENT)
  private Double downPayment;

  public static final String SERIALIZED_NAME_DOWN_PAYMENT_PERCENTAGE = "down_payment_percentage";
  @SerializedName(SERIALIZED_NAME_DOWN_PAYMENT_PERCENTAGE)
  private Double downPaymentPercentage;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_PAYMENT = "estimated_monthly_payment";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_PAYMENT)
  private Double estimatedMonthlyPayment;

  public static final String SERIALIZED_NAME_LOAN_APR = "loan_apr";
  @SerializedName(SERIALIZED_NAME_LOAN_APR)
  private Double loanApr;

  public static final String SERIALIZED_NAME_LOAN_TERM = "loan_term";
  @SerializedName(SERIALIZED_NAME_LOAN_TERM)
  private Integer loanTerm;

  public ListingFinance() {
  }

  public ListingFinance downPayment(Double downPayment) {
    this.downPayment = downPayment;
    return this;
  }

  /**
   * Down payment for this finance offer
   * @return downPayment
   */
  @javax.annotation.Nullable
  public Double getDownPayment() {
    return downPayment;
  }

  public void setDownPayment(Double downPayment) {
    this.downPayment = downPayment;
  }


  public ListingFinance downPaymentPercentage(Double downPaymentPercentage) {
    this.downPaymentPercentage = downPaymentPercentage;
    return this;
  }

  /**
   * down payment percentage for this finance offer
   * @return downPaymentPercentage
   */
  @javax.annotation.Nullable
  public Double getDownPaymentPercentage() {
    return downPaymentPercentage;
  }

  public void setDownPaymentPercentage(Double downPaymentPercentage) {
    this.downPaymentPercentage = downPaymentPercentage;
  }


  public ListingFinance estimatedMonthlyPayment(Double estimatedMonthlyPayment) {
    this.estimatedMonthlyPayment = estimatedMonthlyPayment;
    return this;
  }

  /**
   * estimated monthly payment for this finance offer
   * @return estimatedMonthlyPayment
   */
  @javax.annotation.Nullable
  public Double getEstimatedMonthlyPayment() {
    return estimatedMonthlyPayment;
  }

  public void setEstimatedMonthlyPayment(Double estimatedMonthlyPayment) {
    this.estimatedMonthlyPayment = estimatedMonthlyPayment;
  }


  public ListingFinance loanApr(Double loanApr) {
    this.loanApr = loanApr;
    return this;
  }

  /**
   * Loan APR for this finance offer
   * @return loanApr
   */
  @javax.annotation.Nullable
  public Double getLoanApr() {
    return loanApr;
  }

  public void setLoanApr(Double loanApr) {
    this.loanApr = loanApr;
  }


  public ListingFinance loanTerm(Integer loanTerm) {
    this.loanTerm = loanTerm;
    return this;
  }

  /**
   * Loan term for this finance offer
   * @return loanTerm
   */
  @javax.annotation.Nullable
  public Integer getLoanTerm() {
    return loanTerm;
  }

  public void setLoanTerm(Integer loanTerm) {
    this.loanTerm = loanTerm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingFinance listingFinance = (ListingFinance) o;
    return Objects.equals(this.downPayment, listingFinance.downPayment) &&
        Objects.equals(this.downPaymentPercentage, listingFinance.downPaymentPercentage) &&
        Objects.equals(this.estimatedMonthlyPayment, listingFinance.estimatedMonthlyPayment) &&
        Objects.equals(this.loanApr, listingFinance.loanApr) &&
        Objects.equals(this.loanTerm, listingFinance.loanTerm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downPayment, downPaymentPercentage, estimatedMonthlyPayment, loanApr, loanTerm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingFinance {\n");
    sb.append("    downPayment: ").append(toIndentedString(downPayment)).append("\n");
    sb.append("    downPaymentPercentage: ").append(toIndentedString(downPaymentPercentage)).append("\n");
    sb.append("    estimatedMonthlyPayment: ").append(toIndentedString(estimatedMonthlyPayment)).append("\n");
    sb.append("    loanApr: ").append(toIndentedString(loanApr)).append("\n");
    sb.append("    loanTerm: ").append(toIndentedString(loanTerm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("down_payment");
    openapiFields.add("down_payment_percentage");
    openapiFields.add("estimated_monthly_payment");
    openapiFields.add("loan_apr");
    openapiFields.add("loan_term");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListingFinance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListingFinance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingFinance is not found in the empty JSON string", ListingFinance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListingFinance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingFinance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingFinance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingFinance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingFinance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingFinance.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingFinance>() {
           @Override
           public void write(JsonWriter out, ListingFinance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingFinance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListingFinance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListingFinance
   * @throws IOException if the JSON string is invalid with respect to ListingFinance
   */
  public static ListingFinance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingFinance.class);
  }

  /**
   * Convert an instance of ListingFinance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

