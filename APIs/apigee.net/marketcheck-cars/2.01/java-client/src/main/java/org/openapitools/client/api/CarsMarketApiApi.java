/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DailyStats;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FareValue;
import org.openapitools.client.model.Mds;
import org.openapitools.client.model.PopularCars;
import org.openapitools.client.model.PricePrediction;
import org.openapitools.client.model.Sales;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CarsMarketApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CarsMarketApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CarsMarketApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fareValue
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vrm Predict price for a VRM (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param variant Car&#39;s variant (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param postalCode Postal code of the car (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predict fare value of car for UK based on YMMT &amp; miles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fareValueCall(String apiKey, String vrm, Integer year, String make, String model, String variant, Integer miles, String postalCode, Integer radius, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/predict/car/uk/fmv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (vrm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrm", vrm));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (variant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variant", variant));
        }

        if (miles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles", miles));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postal_code", postalCode));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fareValueValidateBeforeCall(String apiKey, String vrm, Integer year, String make, String model, String variant, Integer miles, String postalCode, Integer radius, final ApiCallback _callback) throws ApiException {
        return fareValueCall(apiKey, vrm, year, make, model, variant, miles, postalCode, radius, _callback);

    }

    /**
     * Predict fare value of car for UK based on YMMT &amp; miles
     * Predict fare value of car for UK based on YMMT &amp; miles
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vrm Predict price for a VRM (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param variant Car&#39;s variant (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param postalCode Postal code of the car (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @return FareValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predict fare value of car for UK based on YMMT &amp; miles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public FareValue fareValue(String apiKey, String vrm, Integer year, String make, String model, String variant, Integer miles, String postalCode, Integer radius) throws ApiException {
        ApiResponse<FareValue> localVarResp = fareValueWithHttpInfo(apiKey, vrm, year, make, model, variant, miles, postalCode, radius);
        return localVarResp.getData();
    }

    /**
     * Predict fare value of car for UK based on YMMT &amp; miles
     * Predict fare value of car for UK based on YMMT &amp; miles
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vrm Predict price for a VRM (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param variant Car&#39;s variant (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param postalCode Postal code of the car (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @return ApiResponse&lt;FareValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predict fare value of car for UK based on YMMT &amp; miles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FareValue> fareValueWithHttpInfo(String apiKey, String vrm, Integer year, String make, String model, String variant, Integer miles, String postalCode, Integer radius) throws ApiException {
        okhttp3.Call localVarCall = fareValueValidateBeforeCall(apiKey, vrm, year, make, model, variant, miles, postalCode, radius, null);
        Type localVarReturnType = new TypeToken<FareValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Predict fare value of car for UK based on YMMT &amp; miles (asynchronously)
     * Predict fare value of car for UK based on YMMT &amp; miles
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vrm Predict price for a VRM (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param variant Car&#39;s variant (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param postalCode Postal code of the car (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predict fare value of car for UK based on YMMT &amp; miles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fareValueAsync(String apiKey, String vrm, Integer year, String make, String model, String variant, Integer miles, String postalCode, Integer radius, final ApiCallback<FareValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = fareValueValidateBeforeCall(apiKey, vrm, year, make, model, variant, miles, postalCode, radius, _callback);
        Type localVarReturnType = new TypeToken<FareValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDailyStats
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param country Country for which the stats are to be searched (optional, default to us)
     * @param carType Inventory type for which stats are to be searched, default is used (optional, default to used)
     * @param ymm Year, Make, Model of the car, Separated by pipe e.g. ymm&#x3D;2015|ford|f-150 (optional)
     * @param ymmt Year, Make, Model, Trim of the car, Separated by pipe e.g. ymmt&#x3D;2015|ford|f-150|platinum (optional)
     * @param taxonomyVin Taxonomy vin for referance to find stats of similar cars (optional)
     * @param vin VIN that will be transformed to taxonomy_vin (optional)
     * @param state State level stats (optional)
     * @param cityState City level stats, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data with Market averages and stats </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDailyStatsCall(String apiKey, String country, String carType, String ymm, String ymmt, String taxonomyVin, String vin, String state, String cityState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/car";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (ymm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymm", ymm));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (taxonomyVin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxonomy_vin", taxonomyVin));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (cityState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_state", cityState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyStatsValidateBeforeCall(String apiKey, String country, String carType, String ymm, String ymmt, String taxonomyVin, String vin, String state, String cityState, final ApiCallback _callback) throws ApiException {
        return getDailyStatsCall(apiKey, country, carType, ymm, ymmt, taxonomyVin, vin, state, cityState, _callback);

    }

    /**
     * Price, Miles and Days on Market stats
     * National, state and city level stats for price, miles and dom
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param country Country for which the stats are to be searched (optional, default to us)
     * @param carType Inventory type for which stats are to be searched, default is used (optional, default to used)
     * @param ymm Year, Make, Model of the car, Separated by pipe e.g. ymm&#x3D;2015|ford|f-150 (optional)
     * @param ymmt Year, Make, Model, Trim of the car, Separated by pipe e.g. ymmt&#x3D;2015|ford|f-150|platinum (optional)
     * @param taxonomyVin Taxonomy vin for referance to find stats of similar cars (optional)
     * @param vin VIN that will be transformed to taxonomy_vin (optional)
     * @param state State level stats (optional)
     * @param cityState City level stats, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @return DailyStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data with Market averages and stats </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DailyStats getDailyStats(String apiKey, String country, String carType, String ymm, String ymmt, String taxonomyVin, String vin, String state, String cityState) throws ApiException {
        ApiResponse<DailyStats> localVarResp = getDailyStatsWithHttpInfo(apiKey, country, carType, ymm, ymmt, taxonomyVin, vin, state, cityState);
        return localVarResp.getData();
    }

    /**
     * Price, Miles and Days on Market stats
     * National, state and city level stats for price, miles and dom
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param country Country for which the stats are to be searched (optional, default to us)
     * @param carType Inventory type for which stats are to be searched, default is used (optional, default to used)
     * @param ymm Year, Make, Model of the car, Separated by pipe e.g. ymm&#x3D;2015|ford|f-150 (optional)
     * @param ymmt Year, Make, Model, Trim of the car, Separated by pipe e.g. ymmt&#x3D;2015|ford|f-150|platinum (optional)
     * @param taxonomyVin Taxonomy vin for referance to find stats of similar cars (optional)
     * @param vin VIN that will be transformed to taxonomy_vin (optional)
     * @param state State level stats (optional)
     * @param cityState City level stats, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @return ApiResponse&lt;DailyStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data with Market averages and stats </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DailyStats> getDailyStatsWithHttpInfo(String apiKey, String country, String carType, String ymm, String ymmt, String taxonomyVin, String vin, String state, String cityState) throws ApiException {
        okhttp3.Call localVarCall = getDailyStatsValidateBeforeCall(apiKey, country, carType, ymm, ymmt, taxonomyVin, vin, state, cityState, null);
        Type localVarReturnType = new TypeToken<DailyStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Price, Miles and Days on Market stats (asynchronously)
     * National, state and city level stats for price, miles and dom
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param country Country for which the stats are to be searched (optional, default to us)
     * @param carType Inventory type for which stats are to be searched, default is used (optional, default to used)
     * @param ymm Year, Make, Model of the car, Separated by pipe e.g. ymm&#x3D;2015|ford|f-150 (optional)
     * @param ymmt Year, Make, Model, Trim of the car, Separated by pipe e.g. ymmt&#x3D;2015|ford|f-150|platinum (optional)
     * @param taxonomyVin Taxonomy vin for referance to find stats of similar cars (optional)
     * @param vin VIN that will be transformed to taxonomy_vin (optional)
     * @param state State level stats (optional)
     * @param cityState City level stats, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data with Market averages and stats </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDailyStatsAsync(String apiKey, String country, String carType, String ymm, String ymmt, String taxonomyVin, String vin, String state, String cityState, final ApiCallback<DailyStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailyStatsValidateBeforeCall(apiKey, country, carType, ymm, ymmt, taxonomyVin, vin, state, cityState, _callback);
        Type localVarReturnType = new TypeToken<DailyStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMDS
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin VIN to decode (optional)
     * @param exact Exact parameter (optional, default to false)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param debug Debug parameter (optional, default to false)
     * @param includeSold To fetch sold vins (optional, default to false)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides Market Days supply for year make model or trim combination </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMDSCall(String apiKey, String vin, Boolean exact, Double latitude, Double longitude, Integer radius, String zip, String msaCode, Boolean debug, Boolean includeSold, String country, String state, String city, String ymmt, String carType, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carfax1Owner, String carfaxCleanTitle, String year, String make, String model, String trim, String dealerId, String source, String bodyType, String bodySubtype, String vehicleType, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String dealershipGroupName, String domActiveRange, String dom180Range, String fuelType, String dealerType, String engineSizeRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mds/car";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (exact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exact", exact));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msa_code", msaCode));
        }

        if (debug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("debug", debug));
        }

        if (includeSold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_sold", includeSold));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (leaseTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_term", leaseTerm));
        }

        if (leaseDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_down_payment", leaseDownPayment));
        }

        if (leaseEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lease_emp", leaseEmp));
        }

        if (financeLoanTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_term", financeLoanTerm));
        }

        if (financeLoanApr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_loan_apr", financeLoanApr));
        }

        if (financeEmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_emp", financeEmp));
        }

        if (financeDownPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment", financeDownPayment));
        }

        if (financeDownPaymentPer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finance_down_payment_per", financeDownPaymentPer));
        }

        if (carfax1Owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_1_owner", carfax1Owner));
        }

        if (carfaxCleanTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_clean_title", carfaxCleanTitle));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (dealerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_id", dealerId));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (bodyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_type", bodyType));
        }

        if (bodySubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body_subtype", bodySubtype));
        }

        if (vehicleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicle_type", vehicleType));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (exteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exterior_color", exteriorColor));
        }

        if (interiorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interior_color", interiorColor));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine", engine));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineAspiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_aspiration", engineAspiration));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (highwayMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg_range", highwayMpgRange));
        }

        if (cityMpgRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg_range", cityMpgRange));
        }

        if (milesRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles_range", milesRange));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_range", priceRange));
        }

        if (msrpRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msrp_range", msrpRange));
        }

        if (domRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_range", domRange));
        }

        if (dealershipGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealership_group_name", dealershipGroupName));
        }

        if (domActiveRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_active_range", domActiveRange));
        }

        if (dom180Range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_180_range", dom180Range));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (dealerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealer_type", dealerType));
        }

        if (engineSizeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size_range", engineSizeRange));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMDSValidateBeforeCall(String apiKey, String vin, Boolean exact, Double latitude, Double longitude, Integer radius, String zip, String msaCode, Boolean debug, Boolean includeSold, String country, String state, String city, String ymmt, String carType, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carfax1Owner, String carfaxCleanTitle, String year, String make, String model, String trim, String dealerId, String source, String bodyType, String bodySubtype, String vehicleType, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String dealershipGroupName, String domActiveRange, String dom180Range, String fuelType, String dealerType, String engineSizeRange, final ApiCallback _callback) throws ApiException {
        return getMDSCall(apiKey, vin, exact, latitude, longitude, radius, zip, msaCode, debug, includeSold, country, state, city, ymmt, carType, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carfax1Owner, carfaxCleanTitle, year, make, model, trim, dealerId, source, bodyType, bodySubtype, vehicleType, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, dealershipGroupName, domActiveRange, dom180Range, fuelType, dealerType, engineSizeRange, _callback);

    }

    /**
     * Market Days Supply
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin VIN to decode (optional)
     * @param exact Exact parameter (optional, default to false)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param debug Debug parameter (optional, default to false)
     * @param includeSold To fetch sold vins (optional, default to false)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @return Mds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides Market Days supply for year make model or trim combination </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Mds getMDS(String apiKey, String vin, Boolean exact, Double latitude, Double longitude, Integer radius, String zip, String msaCode, Boolean debug, Boolean includeSold, String country, String state, String city, String ymmt, String carType, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carfax1Owner, String carfaxCleanTitle, String year, String make, String model, String trim, String dealerId, String source, String bodyType, String bodySubtype, String vehicleType, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String dealershipGroupName, String domActiveRange, String dom180Range, String fuelType, String dealerType, String engineSizeRange) throws ApiException {
        ApiResponse<Mds> localVarResp = getMDSWithHttpInfo(apiKey, vin, exact, latitude, longitude, radius, zip, msaCode, debug, includeSold, country, state, city, ymmt, carType, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carfax1Owner, carfaxCleanTitle, year, make, model, trim, dealerId, source, bodyType, bodySubtype, vehicleType, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, dealershipGroupName, domActiveRange, dom180Range, fuelType, dealerType, engineSizeRange);
        return localVarResp.getData();
    }

    /**
     * Market Days Supply
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin VIN to decode (optional)
     * @param exact Exact parameter (optional, default to false)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param debug Debug parameter (optional, default to false)
     * @param includeSold To fetch sold vins (optional, default to false)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @return ApiResponse&lt;Mds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides Market Days supply for year make model or trim combination </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mds> getMDSWithHttpInfo(String apiKey, String vin, Boolean exact, Double latitude, Double longitude, Integer radius, String zip, String msaCode, Boolean debug, Boolean includeSold, String country, String state, String city, String ymmt, String carType, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carfax1Owner, String carfaxCleanTitle, String year, String make, String model, String trim, String dealerId, String source, String bodyType, String bodySubtype, String vehicleType, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String dealershipGroupName, String domActiveRange, String dom180Range, String fuelType, String dealerType, String engineSizeRange) throws ApiException {
        okhttp3.Call localVarCall = getMDSValidateBeforeCall(apiKey, vin, exact, latitude, longitude, radius, zip, msaCode, debug, includeSold, country, state, city, ymmt, carType, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carfax1Owner, carfaxCleanTitle, year, make, model, trim, dealerId, source, bodyType, bodySubtype, vehicleType, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, dealershipGroupName, domActiveRange, dom180Range, fuelType, dealerType, engineSizeRange, null);
        Type localVarReturnType = new TypeToken<Mds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Market Days Supply (asynchronously)
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin VIN to decode (optional)
     * @param exact Exact parameter (optional, default to false)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (Unit - Miles) (optional)
     * @param zip To filter listing on ZIP around which they are listed (optional)
     * @param msaCode To filter listing on msa code in which they are listed (optional)
     * @param debug Debug parameter (optional, default to false)
     * @param includeSold To fetch sold vins (optional, default to false)
     * @param country To filter listing on Country in which they are listed (optional, default to US)
     * @param state To filter listing on State in which they are listed (optional)
     * @param city To filter listing on City in which they are listed (optional)
     * @param ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param carType Car type. Allowed values are - new / used / certified (optional)
     * @param leaseTerm Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param leaseDownPayment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param leaseEmp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param financeLoanTerm Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param financeLoanApr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param financeEmp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param financeDownPayment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param financeDownPaymentPer Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param carfax1Owner Indicates whether car has had only one owner or not (optional)
     * @param carfaxCleanTitle Indicates whether car has clean ownership records (optional)
     * @param year To filter listing on their year (optional)
     * @param make To filter listings on their make (optional)
     * @param model To filter listings on their model (optional)
     * @param trim To filter listing on their trim (optional)
     * @param dealerId Dealer id to filter the listings. (optional)
     * @param source To filter listing on their source (optional)
     * @param bodyType To filter listing on their body type (optional)
     * @param bodySubtype Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param vehicleType To filter listing on their vehicle type (optional)
     * @param cylinders To filter listing on their cylinders (optional)
     * @param transmission To filter listing on their transmission (optional)
     * @param doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param drivetrain To filter listing on their drivetrain (optional)
     * @param exteriorColor Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param interiorColor Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param baseExteriorColor Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param baseInteriorColor Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated (optional)
     * @param engine To filter listing on their engine (optional)
     * @param engineSize Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated (optional)
     * @param engineAspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param engineBlock Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param highwayMpgRange Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param cityMpgRange City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param milesRange Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param priceRange Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param msrpRange MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param domRange Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dealershipGroupName Name of the dealership group to search for (optional)
     * @param domActiveRange Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param dom180Range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param fuelType To filter listing on their fuel type (optional)
     * @param dealerType Filter based on dealer type independant or franchise (optional)
     * @param engineSizeRange Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides Market Days supply for year make model or trim combination </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMDSAsync(String apiKey, String vin, Boolean exact, Double latitude, Double longitude, Integer radius, String zip, String msaCode, Boolean debug, Boolean includeSold, String country, String state, String city, String ymmt, String carType, String leaseTerm, String leaseDownPayment, String leaseEmp, String financeLoanTerm, String financeLoanApr, String financeEmp, String financeDownPayment, String financeDownPaymentPer, String carfax1Owner, String carfaxCleanTitle, String year, String make, String model, String trim, String dealerId, String source, String bodyType, String bodySubtype, String vehicleType, String cylinders, String transmission, String doors, String drivetrain, String exteriorColor, String interiorColor, String baseExteriorColor, String baseInteriorColor, String engine, String engineSize, String engineAspiration, String engineBlock, String highwayMpgRange, String cityMpgRange, String milesRange, String priceRange, String msrpRange, String domRange, String dealershipGroupName, String domActiveRange, String dom180Range, String fuelType, String dealerType, String engineSizeRange, final ApiCallback<Mds> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMDSValidateBeforeCall(apiKey, vin, exact, latitude, longitude, radius, zip, msaCode, debug, includeSold, country, state, city, ymmt, carType, leaseTerm, leaseDownPayment, leaseEmp, financeLoanTerm, financeLoanApr, financeEmp, financeDownPayment, financeDownPaymentPer, carfax1Owner, carfaxCleanTitle, year, make, model, trim, dealerId, source, bodyType, bodySubtype, vehicleType, cylinders, transmission, doors, drivetrain, exteriorColor, interiorColor, baseExteriorColor, baseInteriorColor, engine, engineSize, engineAspiration, engineBlock, highwayMpgRange, cityMpgRange, milesRange, priceRange, msrpRange, domRange, dealershipGroupName, domActiveRange, dom180Range, fuelType, dealerType, engineSizeRange, _callback);
        Type localVarReturnType = new TypeToken<Mds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPopularCars
     * @param carType Inventory type for which popular count is to be searched (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param state State level sales count (optional)
     * @param cityState City level sales count, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @param country Country for which the popular cars are to be searched (optional, default to us)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of most popular top 50 cars </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPopularCarsCall(String carType, String apiKey, String state, String cityState, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/popular/cars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (cityState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_state", cityState));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPopularCarsValidateBeforeCall(String carType, String apiKey, String state, String cityState, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carType' is set
        if (carType == null) {
            throw new ApiException("Missing the required parameter 'carType' when calling getPopularCars(Async)");
        }

        return getPopularCarsCall(carType, apiKey, state, cityState, country, _callback);

    }

    /**
     * Get make model wise top 50 popular cars on national, state, city level
     * Get make model wise top 50 popular cars on national, state, city level
     * @param carType Inventory type for which popular count is to be searched (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param state State level sales count (optional)
     * @param cityState City level sales count, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @param country Country for which the popular cars are to be searched (optional, default to us)
     * @return PopularCars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of most popular top 50 cars </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public PopularCars getPopularCars(String carType, String apiKey, String state, String cityState, String country) throws ApiException {
        ApiResponse<PopularCars> localVarResp = getPopularCarsWithHttpInfo(carType, apiKey, state, cityState, country);
        return localVarResp.getData();
    }

    /**
     * Get make model wise top 50 popular cars on national, state, city level
     * Get make model wise top 50 popular cars on national, state, city level
     * @param carType Inventory type for which popular count is to be searched (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param state State level sales count (optional)
     * @param cityState City level sales count, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @param country Country for which the popular cars are to be searched (optional, default to us)
     * @return ApiResponse&lt;PopularCars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of most popular top 50 cars </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PopularCars> getPopularCarsWithHttpInfo(String carType, String apiKey, String state, String cityState, String country) throws ApiException {
        okhttp3.Call localVarCall = getPopularCarsValidateBeforeCall(carType, apiKey, state, cityState, country, null);
        Type localVarReturnType = new TypeToken<PopularCars>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get make model wise top 50 popular cars on national, state, city level (asynchronously)
     * Get make model wise top 50 popular cars on national, state, city level
     * @param carType Inventory type for which popular count is to be searched (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param state State level sales count (optional)
     * @param cityState City level sales count, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @param country Country for which the popular cars are to be searched (optional, default to us)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of most popular top 50 cars </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPopularCarsAsync(String carType, String apiKey, String state, String cityState, String country, final ApiCallback<PopularCars> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPopularCarsValidateBeforeCall(carType, apiKey, state, cityState, country, _callback);
        Type localVarReturnType = new TypeToken<PopularCars>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSalesCount
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param carType Inventory type for which sales count is to be searched, default is used (optional, default to used)
     * @param make Make for which sales count is to be searched (optional)
     * @param mm Make-Model for which sales count is to be searched, pipe seperated like mm&#x3D;ford|f-150 (optional)
     * @param ymm Year-Make-Model for which sales count is to be searched, pipe seperated like ymm&#x3D;2015|ford|f-150 (optional)
     * @param ymmt Year-Make-Model-Trim for which sales count is to be searched, pipe seperated like ymmt&#x3D;2015|ford|f-150|platinum (optional)
     * @param taxonomyVin taxonomy_vin for which sales count is to be searched (optional)
     * @param state State level sales count (optional)
     * @param cityState City level sales count, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @param vin VIN that will be transformed to taxonomy_vin (optional)
     * @param country Country for which the sales records are to be searched (optional, default to us)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales count for given parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesCountCall(String apiKey, String carType, String make, String mm, String ymm, String ymmt, String taxonomyVin, String state, String cityState, String vin, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sales/car";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (mm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mm", mm));
        }

        if (ymm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymm", ymm));
        }

        if (ymmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymmt", ymmt));
        }

        if (taxonomyVin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxonomy_vin", taxonomyVin));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (cityState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_state", cityState));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSalesCountValidateBeforeCall(String apiKey, String carType, String make, String mm, String ymm, String ymmt, String taxonomyVin, String state, String cityState, String vin, String country, final ApiCallback _callback) throws ApiException {
        return getSalesCountCall(apiKey, carType, make, mm, ymm, ymmt, taxonomyVin, state, cityState, vin, country, _callback);

    }

    /**
     * Get sales count by make, model, year, trim or taxonomy vin
     * Get a sales count for city, state or national level by make, model, year, trim or taxonomy vin
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param carType Inventory type for which sales count is to be searched, default is used (optional, default to used)
     * @param make Make for which sales count is to be searched (optional)
     * @param mm Make-Model for which sales count is to be searched, pipe seperated like mm&#x3D;ford|f-150 (optional)
     * @param ymm Year-Make-Model for which sales count is to be searched, pipe seperated like ymm&#x3D;2015|ford|f-150 (optional)
     * @param ymmt Year-Make-Model-Trim for which sales count is to be searched, pipe seperated like ymmt&#x3D;2015|ford|f-150|platinum (optional)
     * @param taxonomyVin taxonomy_vin for which sales count is to be searched (optional)
     * @param state State level sales count (optional)
     * @param cityState City level sales count, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @param vin VIN that will be transformed to taxonomy_vin (optional)
     * @param country Country for which the sales records are to be searched (optional, default to us)
     * @return Sales
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales count for given parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Sales getSalesCount(String apiKey, String carType, String make, String mm, String ymm, String ymmt, String taxonomyVin, String state, String cityState, String vin, String country) throws ApiException {
        ApiResponse<Sales> localVarResp = getSalesCountWithHttpInfo(apiKey, carType, make, mm, ymm, ymmt, taxonomyVin, state, cityState, vin, country);
        return localVarResp.getData();
    }

    /**
     * Get sales count by make, model, year, trim or taxonomy vin
     * Get a sales count for city, state or national level by make, model, year, trim or taxonomy vin
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param carType Inventory type for which sales count is to be searched, default is used (optional, default to used)
     * @param make Make for which sales count is to be searched (optional)
     * @param mm Make-Model for which sales count is to be searched, pipe seperated like mm&#x3D;ford|f-150 (optional)
     * @param ymm Year-Make-Model for which sales count is to be searched, pipe seperated like ymm&#x3D;2015|ford|f-150 (optional)
     * @param ymmt Year-Make-Model-Trim for which sales count is to be searched, pipe seperated like ymmt&#x3D;2015|ford|f-150|platinum (optional)
     * @param taxonomyVin taxonomy_vin for which sales count is to be searched (optional)
     * @param state State level sales count (optional)
     * @param cityState City level sales count, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @param vin VIN that will be transformed to taxonomy_vin (optional)
     * @param country Country for which the sales records are to be searched (optional, default to us)
     * @return ApiResponse&lt;Sales&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales count for given parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sales> getSalesCountWithHttpInfo(String apiKey, String carType, String make, String mm, String ymm, String ymmt, String taxonomyVin, String state, String cityState, String vin, String country) throws ApiException {
        okhttp3.Call localVarCall = getSalesCountValidateBeforeCall(apiKey, carType, make, mm, ymm, ymmt, taxonomyVin, state, cityState, vin, country, null);
        Type localVarReturnType = new TypeToken<Sales>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sales count by make, model, year, trim or taxonomy vin (asynchronously)
     * Get a sales count for city, state or national level by make, model, year, trim or taxonomy vin
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param carType Inventory type for which sales count is to be searched, default is used (optional, default to used)
     * @param make Make for which sales count is to be searched (optional)
     * @param mm Make-Model for which sales count is to be searched, pipe seperated like mm&#x3D;ford|f-150 (optional)
     * @param ymm Year-Make-Model for which sales count is to be searched, pipe seperated like ymm&#x3D;2015|ford|f-150 (optional)
     * @param ymmt Year-Make-Model-Trim for which sales count is to be searched, pipe seperated like ymmt&#x3D;2015|ford|f-150|platinum (optional)
     * @param taxonomyVin taxonomy_vin for which sales count is to be searched (optional)
     * @param state State level sales count (optional)
     * @param cityState City level sales count, pipe seperated like city_state&#x3D;jacksonville|FL (optional)
     * @param vin VIN that will be transformed to taxonomy_vin (optional)
     * @param country Country for which the sales records are to be searched (optional, default to us)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sales count for given parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesCountAsync(String apiKey, String carType, String make, String mm, String ymm, String ymmt, String taxonomyVin, String state, String cityState, String vin, String country, final ApiCallback<Sales> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSalesCountValidateBeforeCall(apiKey, carType, make, mm, ymm, ymmt, taxonomyVin, state, cityState, vin, country, _callback);
        Type localVarReturnType = new TypeToken<Sales>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictCarPrice
     * @param carType Car condition (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin Predict price for a VIN (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param trim Car&#39;s trim (optional)
     * @param isCertified Boolean to indicate car is certified or not (optional)
     * @param carfax1Owner Boolean to indicate car is carfax one owner or not (optional)
     * @param carfaxCleanTitle Boolean to indicate car has clean title or not (optional)
     * @param baseExteriorColor Base exterior color of the car (optional)
     * @param baseInteriorColor Base interior color of the car (optional)
     * @param transmission Transmission on the car (optional)
     * @param drivetrain Drivetrain on the car (optional)
     * @param engineSize Engine Size of the car (optional)
     * @param engineBlock Engine Block of the car (optional)
     * @param cylinders Number of cylinders in the vehicle (optional)
     * @param doors Number of doors in the vehicle (optional)
     * @param highwayMpg Highway mileage (optional)
     * @param cityMpg City mileage of the car (optional)
     * @param latitude Latitude component of the location (optional)
     * @param longitude Longitude component of the location (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param zip Location zip (optional)
     * @param country Country for which car price will be predicted (optional, default to us)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted price of the car along with it&#39;s specifications </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictCarPriceCall(String carType, String apiKey, String vin, Integer year, String make, String model, String trim, Boolean isCertified, Boolean carfax1Owner, Boolean carfaxCleanTitle, String baseExteriorColor, String baseInteriorColor, String transmission, String drivetrain, BigDecimal engineSize, String engineBlock, Integer cylinders, Integer doors, Integer highwayMpg, Integer cityMpg, BigDecimal latitude, BigDecimal longitude, Integer miles, String zip, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/predict/car/price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (carType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("car_type", carType));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (isCertified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_certified", isCertified));
        }

        if (carfax1Owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_1_owner", carfax1Owner));
        }

        if (carfaxCleanTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carfax_clean_title", carfaxCleanTitle));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (baseInteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_interior_color", baseInteriorColor));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (engineBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_block", engineBlock));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (highwayMpg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg", highwayMpg));
        }

        if (cityMpg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg", cityMpg));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (miles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles", miles));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictCarPriceValidateBeforeCall(String carType, String apiKey, String vin, Integer year, String make, String model, String trim, Boolean isCertified, Boolean carfax1Owner, Boolean carfaxCleanTitle, String baseExteriorColor, String baseInteriorColor, String transmission, String drivetrain, BigDecimal engineSize, String engineBlock, Integer cylinders, Integer doors, Integer highwayMpg, Integer cityMpg, BigDecimal latitude, BigDecimal longitude, Integer miles, String zip, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carType' is set
        if (carType == null) {
            throw new ApiException("Missing the required parameter 'carType' when calling predictCarPrice(Async)");
        }

        return predictCarPriceCall(carType, apiKey, vin, year, make, model, trim, isCertified, carfax1Owner, carfaxCleanTitle, baseExteriorColor, baseInteriorColor, transmission, drivetrain, engineSize, engineBlock, cylinders, doors, highwayMpg, cityMpg, latitude, longitude, miles, zip, country, _callback);

    }

    /**
     * Predict car price based on it&#39;s specifications
     * Predict car price based on it&#39;s specifications
     * @param carType Car condition (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin Predict price for a VIN (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param trim Car&#39;s trim (optional)
     * @param isCertified Boolean to indicate car is certified or not (optional)
     * @param carfax1Owner Boolean to indicate car is carfax one owner or not (optional)
     * @param carfaxCleanTitle Boolean to indicate car has clean title or not (optional)
     * @param baseExteriorColor Base exterior color of the car (optional)
     * @param baseInteriorColor Base interior color of the car (optional)
     * @param transmission Transmission on the car (optional)
     * @param drivetrain Drivetrain on the car (optional)
     * @param engineSize Engine Size of the car (optional)
     * @param engineBlock Engine Block of the car (optional)
     * @param cylinders Number of cylinders in the vehicle (optional)
     * @param doors Number of doors in the vehicle (optional)
     * @param highwayMpg Highway mileage (optional)
     * @param cityMpg City mileage of the car (optional)
     * @param latitude Latitude component of the location (optional)
     * @param longitude Longitude component of the location (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param zip Location zip (optional)
     * @param country Country for which car price will be predicted (optional, default to us)
     * @return PricePrediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted price of the car along with it&#39;s specifications </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public PricePrediction predictCarPrice(String carType, String apiKey, String vin, Integer year, String make, String model, String trim, Boolean isCertified, Boolean carfax1Owner, Boolean carfaxCleanTitle, String baseExteriorColor, String baseInteriorColor, String transmission, String drivetrain, BigDecimal engineSize, String engineBlock, Integer cylinders, Integer doors, Integer highwayMpg, Integer cityMpg, BigDecimal latitude, BigDecimal longitude, Integer miles, String zip, String country) throws ApiException {
        ApiResponse<PricePrediction> localVarResp = predictCarPriceWithHttpInfo(carType, apiKey, vin, year, make, model, trim, isCertified, carfax1Owner, carfaxCleanTitle, baseExteriorColor, baseInteriorColor, transmission, drivetrain, engineSize, engineBlock, cylinders, doors, highwayMpg, cityMpg, latitude, longitude, miles, zip, country);
        return localVarResp.getData();
    }

    /**
     * Predict car price based on it&#39;s specifications
     * Predict car price based on it&#39;s specifications
     * @param carType Car condition (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin Predict price for a VIN (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param trim Car&#39;s trim (optional)
     * @param isCertified Boolean to indicate car is certified or not (optional)
     * @param carfax1Owner Boolean to indicate car is carfax one owner or not (optional)
     * @param carfaxCleanTitle Boolean to indicate car has clean title or not (optional)
     * @param baseExteriorColor Base exterior color of the car (optional)
     * @param baseInteriorColor Base interior color of the car (optional)
     * @param transmission Transmission on the car (optional)
     * @param drivetrain Drivetrain on the car (optional)
     * @param engineSize Engine Size of the car (optional)
     * @param engineBlock Engine Block of the car (optional)
     * @param cylinders Number of cylinders in the vehicle (optional)
     * @param doors Number of doors in the vehicle (optional)
     * @param highwayMpg Highway mileage (optional)
     * @param cityMpg City mileage of the car (optional)
     * @param latitude Latitude component of the location (optional)
     * @param longitude Longitude component of the location (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param zip Location zip (optional)
     * @param country Country for which car price will be predicted (optional, default to us)
     * @return ApiResponse&lt;PricePrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted price of the car along with it&#39;s specifications </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricePrediction> predictCarPriceWithHttpInfo(String carType, String apiKey, String vin, Integer year, String make, String model, String trim, Boolean isCertified, Boolean carfax1Owner, Boolean carfaxCleanTitle, String baseExteriorColor, String baseInteriorColor, String transmission, String drivetrain, BigDecimal engineSize, String engineBlock, Integer cylinders, Integer doors, Integer highwayMpg, Integer cityMpg, BigDecimal latitude, BigDecimal longitude, Integer miles, String zip, String country) throws ApiException {
        okhttp3.Call localVarCall = predictCarPriceValidateBeforeCall(carType, apiKey, vin, year, make, model, trim, isCertified, carfax1Owner, carfaxCleanTitle, baseExteriorColor, baseInteriorColor, transmission, drivetrain, engineSize, engineBlock, cylinders, doors, highwayMpg, cityMpg, latitude, longitude, miles, zip, country, null);
        Type localVarReturnType = new TypeToken<PricePrediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Predict car price based on it&#39;s specifications (asynchronously)
     * Predict car price based on it&#39;s specifications
     * @param carType Car condition (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin Predict price for a VIN (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param trim Car&#39;s trim (optional)
     * @param isCertified Boolean to indicate car is certified or not (optional)
     * @param carfax1Owner Boolean to indicate car is carfax one owner or not (optional)
     * @param carfaxCleanTitle Boolean to indicate car has clean title or not (optional)
     * @param baseExteriorColor Base exterior color of the car (optional)
     * @param baseInteriorColor Base interior color of the car (optional)
     * @param transmission Transmission on the car (optional)
     * @param drivetrain Drivetrain on the car (optional)
     * @param engineSize Engine Size of the car (optional)
     * @param engineBlock Engine Block of the car (optional)
     * @param cylinders Number of cylinders in the vehicle (optional)
     * @param doors Number of doors in the vehicle (optional)
     * @param highwayMpg Highway mileage (optional)
     * @param cityMpg City mileage of the car (optional)
     * @param latitude Latitude component of the location (optional)
     * @param longitude Longitude component of the location (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param zip Location zip (optional)
     * @param country Country for which car price will be predicted (optional, default to us)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted price of the car along with it&#39;s specifications </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictCarPriceAsync(String carType, String apiKey, String vin, Integer year, String make, String model, String trim, Boolean isCertified, Boolean carfax1Owner, Boolean carfaxCleanTitle, String baseExteriorColor, String baseInteriorColor, String transmission, String drivetrain, BigDecimal engineSize, String engineBlock, Integer cylinders, Integer doors, Integer highwayMpg, Integer cityMpg, BigDecimal latitude, BigDecimal longitude, Integer miles, String zip, String country, final ApiCallback<PricePrediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictCarPriceValidateBeforeCall(carType, apiKey, vin, year, make, model, trim, isCertified, carfax1Owner, carfaxCleanTitle, baseExteriorColor, baseInteriorColor, transmission, drivetrain, engineSize, engineBlock, cylinders, doors, highwayMpg, cityMpg, latitude, longitude, miles, zip, country, _callback);
        Type localVarReturnType = new TypeToken<PricePrediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictUkCarPrice
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vrm Predict price for a VRM (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param trim Car&#39;s trim (optional)
     * @param baseExteriorColor Base exterior color of the car (optional)
     * @param transmission Transmission on the car (optional)
     * @param drivetrain Drivetrain on the car (optional)
     * @param engineSize Engine Size of the car (optional)
     * @param cylinders Number of cylinders in the vehicle (optional)
     * @param doors Number of doors in the vehicle (optional)
     * @param fuelType Fuel type of the car (optional)
     * @param highwayMpg Highway mileage (optional)
     * @param cityMpg City mileage of the car (optional)
     * @param combinedMpg Combiined mileage of the car (optional)
     * @param latitude Latitude component of the location (optional)
     * @param longitude Longitude component of the location (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param zip Location zip (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted price of the car along with it&#39;s specifications </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictUkCarPriceCall(String apiKey, String vrm, Integer year, String make, String model, String trim, String baseExteriorColor, String transmission, String drivetrain, Double engineSize, Integer cylinders, Integer doors, String fuelType, Double highwayMpg, Double cityMpg, Double combinedMpg, BigDecimal latitude, BigDecimal longitude, Integer miles, String zip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/predict/car/uk/price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (vrm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrm", vrm));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (make != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (trim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim", trim));
        }

        if (baseExteriorColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_exterior_color", baseExteriorColor));
        }

        if (transmission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmission", transmission));
        }

        if (drivetrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drivetrain", drivetrain));
        }

        if (engineSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("engine_size", engineSize));
        }

        if (cylinders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cylinders", cylinders));
        }

        if (doors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doors", doors));
        }

        if (fuelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuel_type", fuelType));
        }

        if (highwayMpg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highway_mpg", highwayMpg));
        }

        if (cityMpg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city_mpg", cityMpg));
        }

        if (combinedMpg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("combined_mpg", combinedMpg));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (miles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("miles", miles));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorizeEndpoint" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictUkCarPriceValidateBeforeCall(String apiKey, String vrm, Integer year, String make, String model, String trim, String baseExteriorColor, String transmission, String drivetrain, Double engineSize, Integer cylinders, Integer doors, String fuelType, Double highwayMpg, Double cityMpg, Double combinedMpg, BigDecimal latitude, BigDecimal longitude, Integer miles, String zip, final ApiCallback _callback) throws ApiException {
        return predictUkCarPriceCall(apiKey, vrm, year, make, model, trim, baseExteriorColor, transmission, drivetrain, engineSize, cylinders, doors, fuelType, highwayMpg, cityMpg, combinedMpg, latitude, longitude, miles, zip, _callback);

    }

    /**
     * Predict car price for UK based on it&#39;s specifications
     * Predict car price for UK based on it&#39;s specifications
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vrm Predict price for a VRM (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param trim Car&#39;s trim (optional)
     * @param baseExteriorColor Base exterior color of the car (optional)
     * @param transmission Transmission on the car (optional)
     * @param drivetrain Drivetrain on the car (optional)
     * @param engineSize Engine Size of the car (optional)
     * @param cylinders Number of cylinders in the vehicle (optional)
     * @param doors Number of doors in the vehicle (optional)
     * @param fuelType Fuel type of the car (optional)
     * @param highwayMpg Highway mileage (optional)
     * @param cityMpg City mileage of the car (optional)
     * @param combinedMpg Combiined mileage of the car (optional)
     * @param latitude Latitude component of the location (optional)
     * @param longitude Longitude component of the location (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param zip Location zip (optional)
     * @return PricePrediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted price of the car along with it&#39;s specifications </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public PricePrediction predictUkCarPrice(String apiKey, String vrm, Integer year, String make, String model, String trim, String baseExteriorColor, String transmission, String drivetrain, Double engineSize, Integer cylinders, Integer doors, String fuelType, Double highwayMpg, Double cityMpg, Double combinedMpg, BigDecimal latitude, BigDecimal longitude, Integer miles, String zip) throws ApiException {
        ApiResponse<PricePrediction> localVarResp = predictUkCarPriceWithHttpInfo(apiKey, vrm, year, make, model, trim, baseExteriorColor, transmission, drivetrain, engineSize, cylinders, doors, fuelType, highwayMpg, cityMpg, combinedMpg, latitude, longitude, miles, zip);
        return localVarResp.getData();
    }

    /**
     * Predict car price for UK based on it&#39;s specifications
     * Predict car price for UK based on it&#39;s specifications
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vrm Predict price for a VRM (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param trim Car&#39;s trim (optional)
     * @param baseExteriorColor Base exterior color of the car (optional)
     * @param transmission Transmission on the car (optional)
     * @param drivetrain Drivetrain on the car (optional)
     * @param engineSize Engine Size of the car (optional)
     * @param cylinders Number of cylinders in the vehicle (optional)
     * @param doors Number of doors in the vehicle (optional)
     * @param fuelType Fuel type of the car (optional)
     * @param highwayMpg Highway mileage (optional)
     * @param cityMpg City mileage of the car (optional)
     * @param combinedMpg Combiined mileage of the car (optional)
     * @param latitude Latitude component of the location (optional)
     * @param longitude Longitude component of the location (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param zip Location zip (optional)
     * @return ApiResponse&lt;PricePrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted price of the car along with it&#39;s specifications </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricePrediction> predictUkCarPriceWithHttpInfo(String apiKey, String vrm, Integer year, String make, String model, String trim, String baseExteriorColor, String transmission, String drivetrain, Double engineSize, Integer cylinders, Integer doors, String fuelType, Double highwayMpg, Double cityMpg, Double combinedMpg, BigDecimal latitude, BigDecimal longitude, Integer miles, String zip) throws ApiException {
        okhttp3.Call localVarCall = predictUkCarPriceValidateBeforeCall(apiKey, vrm, year, make, model, trim, baseExteriorColor, transmission, drivetrain, engineSize, cylinders, doors, fuelType, highwayMpg, cityMpg, combinedMpg, latitude, longitude, miles, zip, null);
        Type localVarReturnType = new TypeToken<PricePrediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Predict car price for UK based on it&#39;s specifications (asynchronously)
     * Predict car price for UK based on it&#39;s specifications
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vrm Predict price for a VRM (optional)
     * @param year Car manufacturing year (optional)
     * @param make Car&#39;s make (optional)
     * @param model Car&#39;s model (optional)
     * @param trim Car&#39;s trim (optional)
     * @param baseExteriorColor Base exterior color of the car (optional)
     * @param transmission Transmission on the car (optional)
     * @param drivetrain Drivetrain on the car (optional)
     * @param engineSize Engine Size of the car (optional)
     * @param cylinders Number of cylinders in the vehicle (optional)
     * @param doors Number of doors in the vehicle (optional)
     * @param fuelType Fuel type of the car (optional)
     * @param highwayMpg Highway mileage (optional)
     * @param cityMpg City mileage of the car (optional)
     * @param combinedMpg Combiined mileage of the car (optional)
     * @param latitude Latitude component of the location (optional)
     * @param longitude Longitude component of the location (optional)
     * @param miles miles vehicle has driven in total (optional)
     * @param zip Location zip (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted price of the car along with it&#39;s specifications </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictUkCarPriceAsync(String apiKey, String vrm, Integer year, String make, String model, String trim, String baseExteriorColor, String transmission, String drivetrain, Double engineSize, Integer cylinders, Integer doors, String fuelType, Double highwayMpg, Double cityMpg, Double combinedMpg, BigDecimal latitude, BigDecimal longitude, Integer miles, String zip, final ApiCallback<PricePrediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictUkCarPriceValidateBeforeCall(apiKey, vrm, year, make, model, trim, baseExteriorColor, transmission, drivetrain, engineSize, cylinders, doors, fuelType, highwayMpg, cityMpg, combinedMpg, latitude, longitude, miles, zip, _callback);
        Type localVarReturnType = new TypeToken<PricePrediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
