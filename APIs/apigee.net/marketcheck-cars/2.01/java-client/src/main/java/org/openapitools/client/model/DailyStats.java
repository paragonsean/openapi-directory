/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.DailyStatsNestedJson;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DailyStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DailyStats {
  public static final String SERIALIZED_NAME_DOM = "dom";
  @SerializedName(SERIALIZED_NAME_DOM)
  private DailyStatsNestedJson dom;

  public static final String SERIALIZED_NAME_MILES_STATS = "miles_stats";
  @SerializedName(SERIALIZED_NAME_MILES_STATS)
  private DailyStatsNestedJson milesStats;

  public static final String SERIALIZED_NAME_PRICE_STATS = "price_stats";
  @SerializedName(SERIALIZED_NAME_PRICE_STATS)
  private DailyStatsNestedJson priceStats;

  public static final String SERIALIZED_NAME_UNITS_FOR_SALE = "units_for_sale";
  @SerializedName(SERIALIZED_NAME_UNITS_FOR_SALE)
  private BigDecimal unitsForSale;

  public DailyStats() {
  }

  public DailyStats dom(DailyStatsNestedJson dom) {
    this.dom = dom;
    return this;
  }

  /**
   * Get dom
   * @return dom
   */
  @javax.annotation.Nullable
  public DailyStatsNestedJson getDom() {
    return dom;
  }

  public void setDom(DailyStatsNestedJson dom) {
    this.dom = dom;
  }


  public DailyStats milesStats(DailyStatsNestedJson milesStats) {
    this.milesStats = milesStats;
    return this;
  }

  /**
   * Get milesStats
   * @return milesStats
   */
  @javax.annotation.Nullable
  public DailyStatsNestedJson getMilesStats() {
    return milesStats;
  }

  public void setMilesStats(DailyStatsNestedJson milesStats) {
    this.milesStats = milesStats;
  }


  public DailyStats priceStats(DailyStatsNestedJson priceStats) {
    this.priceStats = priceStats;
    return this;
  }

  /**
   * Get priceStats
   * @return priceStats
   */
  @javax.annotation.Nullable
  public DailyStatsNestedJson getPriceStats() {
    return priceStats;
  }

  public void setPriceStats(DailyStatsNestedJson priceStats) {
    this.priceStats = priceStats;
  }


  public DailyStats unitsForSale(BigDecimal unitsForSale) {
    this.unitsForSale = unitsForSale;
    return this;
  }

  /**
   * Number of units of this car for sale on the market
   * @return unitsForSale
   */
  @javax.annotation.Nullable
  public BigDecimal getUnitsForSale() {
    return unitsForSale;
  }

  public void setUnitsForSale(BigDecimal unitsForSale) {
    this.unitsForSale = unitsForSale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyStats dailyStats = (DailyStats) o;
    return Objects.equals(this.dom, dailyStats.dom) &&
        Objects.equals(this.milesStats, dailyStats.milesStats) &&
        Objects.equals(this.priceStats, dailyStats.priceStats) &&
        Objects.equals(this.unitsForSale, dailyStats.unitsForSale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dom, milesStats, priceStats, unitsForSale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyStats {\n");
    sb.append("    dom: ").append(toIndentedString(dom)).append("\n");
    sb.append("    milesStats: ").append(toIndentedString(milesStats)).append("\n");
    sb.append("    priceStats: ").append(toIndentedString(priceStats)).append("\n");
    sb.append("    unitsForSale: ").append(toIndentedString(unitsForSale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dom");
    openapiFields.add("miles_stats");
    openapiFields.add("price_stats");
    openapiFields.add("units_for_sale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DailyStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DailyStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyStats is not found in the empty JSON string", DailyStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DailyStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DailyStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dom`
      if (jsonObj.get("dom") != null && !jsonObj.get("dom").isJsonNull()) {
        DailyStatsNestedJson.validateJsonElement(jsonObj.get("dom"));
      }
      // validate the optional field `miles_stats`
      if (jsonObj.get("miles_stats") != null && !jsonObj.get("miles_stats").isJsonNull()) {
        DailyStatsNestedJson.validateJsonElement(jsonObj.get("miles_stats"));
      }
      // validate the optional field `price_stats`
      if (jsonObj.get("price_stats") != null && !jsonObj.get("price_stats").isJsonNull()) {
        DailyStatsNestedJson.validateJsonElement(jsonObj.get("price_stats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyStats.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyStats>() {
           @Override
           public void write(JsonWriter out, DailyStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DailyStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DailyStats
   * @throws IOException if the JSON string is invalid with respect to DailyStats
   */
  public static DailyStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyStats.class);
  }

  /**
   * Convert an instance of DailyStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

