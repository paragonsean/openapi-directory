/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RangeFacetItemCountsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RangeFacetItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RangeFacetItem {
  public static final String SERIALIZED_NAME_AFTER = "after";
  @SerializedName(SERIALIZED_NAME_AFTER)
  private Integer after;

  public static final String SERIALIZED_NAME_BEFORE = "before";
  @SerializedName(SERIALIZED_NAME_BEFORE)
  private Integer before;

  public static final String SERIALIZED_NAME_BETWEEN = "between";
  @SerializedName(SERIALIZED_NAME_BETWEEN)
  private Integer between;

  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private List<RangeFacetItemCountsInner> counts = new ArrayList<>();

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private Integer end;

  public static final String SERIALIZED_NAME_GAP = "gap";
  @SerializedName(SERIALIZED_NAME_GAP)
  private Integer gap;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Integer start;

  public RangeFacetItem() {
  }

  public RangeFacetItem after(Integer after) {
    this.after = after;
    return this;
  }

  /**
   * Number of listings that have field value after range end
   * @return after
   */
  @javax.annotation.Nullable
  public Integer getAfter() {
    return after;
  }

  public void setAfter(Integer after) {
    this.after = after;
  }


  public RangeFacetItem before(Integer before) {
    this.before = before;
    return this;
  }

  /**
   * Number of listings that have field value before range start
   * @return before
   */
  @javax.annotation.Nullable
  public Integer getBefore() {
    return before;
  }

  public void setBefore(Integer before) {
    this.before = before;
  }


  public RangeFacetItem between(Integer between) {
    this.between = between;
    return this;
  }

  /**
   * Number of listings that have field value between range start and range end
   * @return between
   */
  @javax.annotation.Nullable
  public Integer getBetween() {
    return between;
  }

  public void setBetween(Integer between) {
    this.between = between;
  }


  public RangeFacetItem counts(List<RangeFacetItemCountsInner> counts) {
    this.counts = counts;
    return this;
  }

  public RangeFacetItem addCountsItem(RangeFacetItemCountsInner countsItem) {
    if (this.counts == null) {
      this.counts = new ArrayList<>();
    }
    this.counts.add(countsItem);
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nullable
  public List<RangeFacetItemCountsInner> getCounts() {
    return counts;
  }

  public void setCounts(List<RangeFacetItemCountsInner> counts) {
    this.counts = counts;
  }


  public RangeFacetItem end(Integer end) {
    this.end = end;
    return this;
  }

  /**
   * The end of range
   * @return end
   */
  @javax.annotation.Nullable
  public Integer getEnd() {
    return end;
  }

  public void setEnd(Integer end) {
    this.end = end;
  }


  public RangeFacetItem gap(Integer gap) {
    this.gap = gap;
    return this;
  }

  /**
   * The range gap applied for range faceting
   * @return gap
   */
  @javax.annotation.Nullable
  public Integer getGap() {
    return gap;
  }

  public void setGap(Integer gap) {
    this.gap = gap;
  }


  public RangeFacetItem start(Integer start) {
    this.start = start;
    return this;
  }

  /**
   * The start of range
   * @return start
   */
  @javax.annotation.Nullable
  public Integer getStart() {
    return start;
  }

  public void setStart(Integer start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RangeFacetItem rangeFacetItem = (RangeFacetItem) o;
    return Objects.equals(this.after, rangeFacetItem.after) &&
        Objects.equals(this.before, rangeFacetItem.before) &&
        Objects.equals(this.between, rangeFacetItem.between) &&
        Objects.equals(this.counts, rangeFacetItem.counts) &&
        Objects.equals(this.end, rangeFacetItem.end) &&
        Objects.equals(this.gap, rangeFacetItem.gap) &&
        Objects.equals(this.start, rangeFacetItem.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(after, before, between, counts, end, gap, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RangeFacetItem {\n");
    sb.append("    after: ").append(toIndentedString(after)).append("\n");
    sb.append("    before: ").append(toIndentedString(before)).append("\n");
    sb.append("    between: ").append(toIndentedString(between)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    gap: ").append(toIndentedString(gap)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("after");
    openapiFields.add("before");
    openapiFields.add("between");
    openapiFields.add("counts");
    openapiFields.add("end");
    openapiFields.add("gap");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RangeFacetItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RangeFacetItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RangeFacetItem is not found in the empty JSON string", RangeFacetItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RangeFacetItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RangeFacetItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("counts") != null && !jsonObj.get("counts").isJsonNull()) {
        JsonArray jsonArraycounts = jsonObj.getAsJsonArray("counts");
        if (jsonArraycounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("counts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `counts` to be an array in the JSON string but got `%s`", jsonObj.get("counts").toString()));
          }

          // validate the optional field `counts` (array)
          for (int i = 0; i < jsonArraycounts.size(); i++) {
            RangeFacetItemCountsInner.validateJsonElement(jsonArraycounts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RangeFacetItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RangeFacetItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RangeFacetItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RangeFacetItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RangeFacetItem>() {
           @Override
           public void write(JsonWriter out, RangeFacetItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RangeFacetItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RangeFacetItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RangeFacetItem
   * @throws IOException if the JSON string is invalid with respect to RangeFacetItem
   */
  public static RangeFacetItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RangeFacetItem.class);
  }

  /**
   * Convert an instance of RangeFacetItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

