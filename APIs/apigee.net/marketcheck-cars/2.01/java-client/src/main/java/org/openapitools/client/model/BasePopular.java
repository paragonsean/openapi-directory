/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SalesStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Single popular car in array
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BasePopular {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private String counts;

  public static final String SERIALIZED_NAME_DOM_STATS = "dom_stats";
  @SerializedName(SERIALIZED_NAME_DOM_STATS)
  private SalesStats domStats;

  public static final String SERIALIZED_NAME_INVENTORY_TYPE = "inventoryType";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TYPE)
  private String inventoryType;

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private String make;

  public static final String SERIALIZED_NAME_MILES_STATS = "miles_stats";
  @SerializedName(SERIALIZED_NAME_MILES_STATS)
  private SalesStats milesStats;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_PRICE_STATS = "price_stats";
  @SerializedName(SERIALIZED_NAME_PRICE_STATS)
  private SalesStats priceStats;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public BasePopular() {
  }

  public BasePopular city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public BasePopular counts(String counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Number of sold listings of this model
   * @return counts
   */
  @javax.annotation.Nullable
  public String getCounts() {
    return counts;
  }

  public void setCounts(String counts) {
    this.counts = counts;
  }


  public BasePopular domStats(SalesStats domStats) {
    this.domStats = domStats;
    return this;
  }

  /**
   * Get domStats
   * @return domStats
   */
  @javax.annotation.Nullable
  public SalesStats getDomStats() {
    return domStats;
  }

  public void setDomStats(SalesStats domStats) {
    this.domStats = domStats;
  }


  public BasePopular inventoryType(String inventoryType) {
    this.inventoryType = inventoryType;
    return this;
  }

  /**
   * Inventory type
   * @return inventoryType
   */
  @javax.annotation.Nullable
  public String getInventoryType() {
    return inventoryType;
  }

  public void setInventoryType(String inventoryType) {
    this.inventoryType = inventoryType;
  }


  public BasePopular make(String make) {
    this.make = make;
    return this;
  }

  /**
   * Make name
   * @return make
   */
  @javax.annotation.Nullable
  public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }


  public BasePopular milesStats(SalesStats milesStats) {
    this.milesStats = milesStats;
    return this;
  }

  /**
   * Get milesStats
   * @return milesStats
   */
  @javax.annotation.Nullable
  public SalesStats getMilesStats() {
    return milesStats;
  }

  public void setMilesStats(SalesStats milesStats) {
    this.milesStats = milesStats;
  }


  public BasePopular model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Model name
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public BasePopular priceStats(SalesStats priceStats) {
    this.priceStats = priceStats;
    return this;
  }

  /**
   * Get priceStats
   * @return priceStats
   */
  @javax.annotation.Nullable
  public SalesStats getPriceStats() {
    return priceStats;
  }

  public void setPriceStats(SalesStats priceStats) {
    this.priceStats = priceStats;
  }


  public BasePopular state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasePopular basePopular = (BasePopular) o;
    return Objects.equals(this.city, basePopular.city) &&
        Objects.equals(this.counts, basePopular.counts) &&
        Objects.equals(this.domStats, basePopular.domStats) &&
        Objects.equals(this.inventoryType, basePopular.inventoryType) &&
        Objects.equals(this.make, basePopular.make) &&
        Objects.equals(this.milesStats, basePopular.milesStats) &&
        Objects.equals(this.model, basePopular.model) &&
        Objects.equals(this.priceStats, basePopular.priceStats) &&
        Objects.equals(this.state, basePopular.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, counts, domStats, inventoryType, make, milesStats, model, priceStats, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasePopular {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    domStats: ").append(toIndentedString(domStats)).append("\n");
    sb.append("    inventoryType: ").append(toIndentedString(inventoryType)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    milesStats: ").append(toIndentedString(milesStats)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    priceStats: ").append(toIndentedString(priceStats)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("counts");
    openapiFields.add("dom_stats");
    openapiFields.add("inventoryType");
    openapiFields.add("make");
    openapiFields.add("miles_stats");
    openapiFields.add("model");
    openapiFields.add("price_stats");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BasePopular
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasePopular.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasePopular is not found in the empty JSON string", BasePopular.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasePopular.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasePopular` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("counts") != null && !jsonObj.get("counts").isJsonNull()) && !jsonObj.get("counts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counts").toString()));
      }
      // validate the optional field `dom_stats`
      if (jsonObj.get("dom_stats") != null && !jsonObj.get("dom_stats").isJsonNull()) {
        SalesStats.validateJsonElement(jsonObj.get("dom_stats"));
      }
      if ((jsonObj.get("inventoryType") != null && !jsonObj.get("inventoryType").isJsonNull()) && !jsonObj.get("inventoryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventoryType").toString()));
      }
      if ((jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) && !jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      // validate the optional field `miles_stats`
      if (jsonObj.get("miles_stats") != null && !jsonObj.get("miles_stats").isJsonNull()) {
        SalesStats.validateJsonElement(jsonObj.get("miles_stats"));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      // validate the optional field `price_stats`
      if (jsonObj.get("price_stats") != null && !jsonObj.get("price_stats").isJsonNull()) {
        SalesStats.validateJsonElement(jsonObj.get("price_stats"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasePopular.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasePopular' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasePopular> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasePopular.class));

       return (TypeAdapter<T>) new TypeAdapter<BasePopular>() {
           @Override
           public void write(JsonWriter out, BasePopular value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasePopular read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BasePopular given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BasePopular
   * @throws IOException if the JSON string is invalid with respect to BasePopular
   */
  public static BasePopular fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasePopular.class);
  }

  /**
   * Convert an instance of BasePopular to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

