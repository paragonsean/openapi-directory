/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FacetItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CarSearchFacets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CarSearchFacets {
  public static final String SERIALIZED_NAME_BASE_EXTERIOR_COLOR = "base_exterior_color";
  @SerializedName(SERIALIZED_NAME_BASE_EXTERIOR_COLOR)
  private List<FacetItem> baseExteriorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_INTERIOR_COLOR = "base_interior_color";
  @SerializedName(SERIALIZED_NAME_BASE_INTERIOR_COLOR)
  private List<FacetItem> baseInteriorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_BODY_SUBTYPE = "body_subtype";
  @SerializedName(SERIALIZED_NAME_BODY_SUBTYPE)
  private List<FacetItem> bodySubtype = new ArrayList<>();

  public static final String SERIALIZED_NAME_BODY_TYPE = "body_type";
  @SerializedName(SERIALIZED_NAME_BODY_TYPE)
  private List<FacetItem> bodyType = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAR_TYPE = "car_type";
  @SerializedName(SERIALIZED_NAME_CAR_TYPE)
  private List<FacetItem> carType = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARFAX1_OWNER = "carfax_1_owner";
  @SerializedName(SERIALIZED_NAME_CARFAX1_OWNER)
  private List<FacetItem> carfax1Owner = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARFAX_CLEAN_TITLE = "carfax_clean_title";
  @SerializedName(SERIALIZED_NAME_CARFAX_CLEAN_TITLE)
  private List<FacetItem> carfaxCleanTitle = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private List<FacetItem> city = new ArrayList<>();

  public static final String SERIALIZED_NAME_CYLINDERS = "cylinders";
  @SerializedName(SERIALIZED_NAME_CYLINDERS)
  private List<FacetItem> cylinders = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SOURCE = "data_source";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private List<FacetItem> dataSource = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEALER_ID = "dealer_id";
  @SerializedName(SERIALIZED_NAME_DEALER_ID)
  private List<FacetItem> dealerId = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEALER_TYPE = "dealer_type";
  @SerializedName(SERIALIZED_NAME_DEALER_TYPE)
  private List<FacetItem> dealerType = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOORS = "doors";
  @SerializedName(SERIALIZED_NAME_DOORS)
  private List<FacetItem> doors = new ArrayList<>();

  public static final String SERIALIZED_NAME_DRIVETRAIN = "drivetrain";
  @SerializedName(SERIALIZED_NAME_DRIVETRAIN)
  private List<FacetItem> drivetrain = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private List<FacetItem> engine = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE_ASPIRATION = "engine_aspiration";
  @SerializedName(SERIALIZED_NAME_ENGINE_ASPIRATION)
  private List<FacetItem> engineAspiration = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE_BLOCK = "engine_block";
  @SerializedName(SERIALIZED_NAME_ENGINE_BLOCK)
  private List<FacetItem> engineBlock = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGINE_SIZE = "engine_size";
  @SerializedName(SERIALIZED_NAME_ENGINE_SIZE)
  private List<FacetItem> engineSize = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERIOR_COLOR = "exterior_color";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_COLOR)
  private List<FacetItem> exteriorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuel_type";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private List<FacetItem> fuelType = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERIOR_COLOR = "interior_color";
  @SerializedName(SERIALIZED_NAME_INTERIOR_COLOR)
  private List<FacetItem> interiorColor = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private List<FacetItem> make = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private List<FacetItem> model = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_NAME = "seller_name";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private List<FacetItem> sellerName = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_NAME_O = "seller_name_o";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME_O)
  private List<FacetItem> sellerNameO = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_TYPE = "seller_type";
  @SerializedName(SERIALIZED_NAME_SELLER_TYPE)
  private List<FacetItem> sellerType = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private List<FacetItem> source = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private List<FacetItem> state = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSMISSION = "transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private List<FacetItem> transmission = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private List<FacetItem> trim = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIM_O = "trim_o";
  @SerializedName(SERIALIZED_NAME_TRIM_O)
  private List<FacetItem> trimO = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIM_R = "trim_r";
  @SerializedName(SERIALIZED_NAME_TRIM_R)
  private List<FacetItem> trimR = new ArrayList<>();

  public static final String SERIALIZED_NAME_VEHICLE_TYPE = "vehicle_type";
  @SerializedName(SERIALIZED_NAME_VEHICLE_TYPE)
  private List<FacetItem> vehicleType = new ArrayList<>();

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private List<FacetItem> year = new ArrayList<>();

  public CarSearchFacets() {
  }

  public CarSearchFacets baseExteriorColor(List<FacetItem> baseExteriorColor) {
    this.baseExteriorColor = baseExteriorColor;
    return this;
  }

  public CarSearchFacets addBaseExteriorColorItem(FacetItem baseExteriorColorItem) {
    if (this.baseExteriorColor == null) {
      this.baseExteriorColor = new ArrayList<>();
    }
    this.baseExteriorColor.add(baseExteriorColorItem);
    return this;
  }

  /**
   * Get baseExteriorColor
   * @return baseExteriorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getBaseExteriorColor() {
    return baseExteriorColor;
  }

  public void setBaseExteriorColor(List<FacetItem> baseExteriorColor) {
    this.baseExteriorColor = baseExteriorColor;
  }


  public CarSearchFacets baseInteriorColor(List<FacetItem> baseInteriorColor) {
    this.baseInteriorColor = baseInteriorColor;
    return this;
  }

  public CarSearchFacets addBaseInteriorColorItem(FacetItem baseInteriorColorItem) {
    if (this.baseInteriorColor == null) {
      this.baseInteriorColor = new ArrayList<>();
    }
    this.baseInteriorColor.add(baseInteriorColorItem);
    return this;
  }

  /**
   * Get baseInteriorColor
   * @return baseInteriorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getBaseInteriorColor() {
    return baseInteriorColor;
  }

  public void setBaseInteriorColor(List<FacetItem> baseInteriorColor) {
    this.baseInteriorColor = baseInteriorColor;
  }


  public CarSearchFacets bodySubtype(List<FacetItem> bodySubtype) {
    this.bodySubtype = bodySubtype;
    return this;
  }

  public CarSearchFacets addBodySubtypeItem(FacetItem bodySubtypeItem) {
    if (this.bodySubtype == null) {
      this.bodySubtype = new ArrayList<>();
    }
    this.bodySubtype.add(bodySubtypeItem);
    return this;
  }

  /**
   * Get bodySubtype
   * @return bodySubtype
   */
  @javax.annotation.Nullable
  public List<FacetItem> getBodySubtype() {
    return bodySubtype;
  }

  public void setBodySubtype(List<FacetItem> bodySubtype) {
    this.bodySubtype = bodySubtype;
  }


  public CarSearchFacets bodyType(List<FacetItem> bodyType) {
    this.bodyType = bodyType;
    return this;
  }

  public CarSearchFacets addBodyTypeItem(FacetItem bodyTypeItem) {
    if (this.bodyType == null) {
      this.bodyType = new ArrayList<>();
    }
    this.bodyType.add(bodyTypeItem);
    return this;
  }

  /**
   * Get bodyType
   * @return bodyType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getBodyType() {
    return bodyType;
  }

  public void setBodyType(List<FacetItem> bodyType) {
    this.bodyType = bodyType;
  }


  public CarSearchFacets carType(List<FacetItem> carType) {
    this.carType = carType;
    return this;
  }

  public CarSearchFacets addCarTypeItem(FacetItem carTypeItem) {
    if (this.carType == null) {
      this.carType = new ArrayList<>();
    }
    this.carType.add(carTypeItem);
    return this;
  }

  /**
   * Get carType
   * @return carType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarType() {
    return carType;
  }

  public void setCarType(List<FacetItem> carType) {
    this.carType = carType;
  }


  public CarSearchFacets carfax1Owner(List<FacetItem> carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
    return this;
  }

  public CarSearchFacets addCarfax1OwnerItem(FacetItem carfax1OwnerItem) {
    if (this.carfax1Owner == null) {
      this.carfax1Owner = new ArrayList<>();
    }
    this.carfax1Owner.add(carfax1OwnerItem);
    return this;
  }

  /**
   * Get carfax1Owner
   * @return carfax1Owner
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarfax1Owner() {
    return carfax1Owner;
  }

  public void setCarfax1Owner(List<FacetItem> carfax1Owner) {
    this.carfax1Owner = carfax1Owner;
  }


  public CarSearchFacets carfaxCleanTitle(List<FacetItem> carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
    return this;
  }

  public CarSearchFacets addCarfaxCleanTitleItem(FacetItem carfaxCleanTitleItem) {
    if (this.carfaxCleanTitle == null) {
      this.carfaxCleanTitle = new ArrayList<>();
    }
    this.carfaxCleanTitle.add(carfaxCleanTitleItem);
    return this;
  }

  /**
   * Get carfaxCleanTitle
   * @return carfaxCleanTitle
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCarfaxCleanTitle() {
    return carfaxCleanTitle;
  }

  public void setCarfaxCleanTitle(List<FacetItem> carfaxCleanTitle) {
    this.carfaxCleanTitle = carfaxCleanTitle;
  }


  public CarSearchFacets city(List<FacetItem> city) {
    this.city = city;
    return this;
  }

  public CarSearchFacets addCityItem(FacetItem cityItem) {
    if (this.city == null) {
      this.city = new ArrayList<>();
    }
    this.city.add(cityItem);
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCity() {
    return city;
  }

  public void setCity(List<FacetItem> city) {
    this.city = city;
  }


  public CarSearchFacets cylinders(List<FacetItem> cylinders) {
    this.cylinders = cylinders;
    return this;
  }

  public CarSearchFacets addCylindersItem(FacetItem cylindersItem) {
    if (this.cylinders == null) {
      this.cylinders = new ArrayList<>();
    }
    this.cylinders.add(cylindersItem);
    return this;
  }

  /**
   * Get cylinders
   * @return cylinders
   */
  @javax.annotation.Nullable
  public List<FacetItem> getCylinders() {
    return cylinders;
  }

  public void setCylinders(List<FacetItem> cylinders) {
    this.cylinders = cylinders;
  }


  public CarSearchFacets dataSource(List<FacetItem> dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  public CarSearchFacets addDataSourceItem(FacetItem dataSourceItem) {
    if (this.dataSource == null) {
      this.dataSource = new ArrayList<>();
    }
    this.dataSource.add(dataSourceItem);
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDataSource() {
    return dataSource;
  }

  public void setDataSource(List<FacetItem> dataSource) {
    this.dataSource = dataSource;
  }


  public CarSearchFacets dealerId(List<FacetItem> dealerId) {
    this.dealerId = dealerId;
    return this;
  }

  public CarSearchFacets addDealerIdItem(FacetItem dealerIdItem) {
    if (this.dealerId == null) {
      this.dealerId = new ArrayList<>();
    }
    this.dealerId.add(dealerIdItem);
    return this;
  }

  /**
   * Get dealerId
   * @return dealerId
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDealerId() {
    return dealerId;
  }

  public void setDealerId(List<FacetItem> dealerId) {
    this.dealerId = dealerId;
  }


  public CarSearchFacets dealerType(List<FacetItem> dealerType) {
    this.dealerType = dealerType;
    return this;
  }

  public CarSearchFacets addDealerTypeItem(FacetItem dealerTypeItem) {
    if (this.dealerType == null) {
      this.dealerType = new ArrayList<>();
    }
    this.dealerType.add(dealerTypeItem);
    return this;
  }

  /**
   * Get dealerType
   * @return dealerType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDealerType() {
    return dealerType;
  }

  public void setDealerType(List<FacetItem> dealerType) {
    this.dealerType = dealerType;
  }


  public CarSearchFacets doors(List<FacetItem> doors) {
    this.doors = doors;
    return this;
  }

  public CarSearchFacets addDoorsItem(FacetItem doorsItem) {
    if (this.doors == null) {
      this.doors = new ArrayList<>();
    }
    this.doors.add(doorsItem);
    return this;
  }

  /**
   * Get doors
   * @return doors
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDoors() {
    return doors;
  }

  public void setDoors(List<FacetItem> doors) {
    this.doors = doors;
  }


  public CarSearchFacets drivetrain(List<FacetItem> drivetrain) {
    this.drivetrain = drivetrain;
    return this;
  }

  public CarSearchFacets addDrivetrainItem(FacetItem drivetrainItem) {
    if (this.drivetrain == null) {
      this.drivetrain = new ArrayList<>();
    }
    this.drivetrain.add(drivetrainItem);
    return this;
  }

  /**
   * Get drivetrain
   * @return drivetrain
   */
  @javax.annotation.Nullable
  public List<FacetItem> getDrivetrain() {
    return drivetrain;
  }

  public void setDrivetrain(List<FacetItem> drivetrain) {
    this.drivetrain = drivetrain;
  }


  public CarSearchFacets engine(List<FacetItem> engine) {
    this.engine = engine;
    return this;
  }

  public CarSearchFacets addEngineItem(FacetItem engineItem) {
    if (this.engine == null) {
      this.engine = new ArrayList<>();
    }
    this.engine.add(engineItem);
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngine() {
    return engine;
  }

  public void setEngine(List<FacetItem> engine) {
    this.engine = engine;
  }


  public CarSearchFacets engineAspiration(List<FacetItem> engineAspiration) {
    this.engineAspiration = engineAspiration;
    return this;
  }

  public CarSearchFacets addEngineAspirationItem(FacetItem engineAspirationItem) {
    if (this.engineAspiration == null) {
      this.engineAspiration = new ArrayList<>();
    }
    this.engineAspiration.add(engineAspirationItem);
    return this;
  }

  /**
   * Get engineAspiration
   * @return engineAspiration
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngineAspiration() {
    return engineAspiration;
  }

  public void setEngineAspiration(List<FacetItem> engineAspiration) {
    this.engineAspiration = engineAspiration;
  }


  public CarSearchFacets engineBlock(List<FacetItem> engineBlock) {
    this.engineBlock = engineBlock;
    return this;
  }

  public CarSearchFacets addEngineBlockItem(FacetItem engineBlockItem) {
    if (this.engineBlock == null) {
      this.engineBlock = new ArrayList<>();
    }
    this.engineBlock.add(engineBlockItem);
    return this;
  }

  /**
   * Get engineBlock
   * @return engineBlock
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngineBlock() {
    return engineBlock;
  }

  public void setEngineBlock(List<FacetItem> engineBlock) {
    this.engineBlock = engineBlock;
  }


  public CarSearchFacets engineSize(List<FacetItem> engineSize) {
    this.engineSize = engineSize;
    return this;
  }

  public CarSearchFacets addEngineSizeItem(FacetItem engineSizeItem) {
    if (this.engineSize == null) {
      this.engineSize = new ArrayList<>();
    }
    this.engineSize.add(engineSizeItem);
    return this;
  }

  /**
   * Get engineSize
   * @return engineSize
   */
  @javax.annotation.Nullable
  public List<FacetItem> getEngineSize() {
    return engineSize;
  }

  public void setEngineSize(List<FacetItem> engineSize) {
    this.engineSize = engineSize;
  }


  public CarSearchFacets exteriorColor(List<FacetItem> exteriorColor) {
    this.exteriorColor = exteriorColor;
    return this;
  }

  public CarSearchFacets addExteriorColorItem(FacetItem exteriorColorItem) {
    if (this.exteriorColor == null) {
      this.exteriorColor = new ArrayList<>();
    }
    this.exteriorColor.add(exteriorColorItem);
    return this;
  }

  /**
   * Get exteriorColor
   * @return exteriorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getExteriorColor() {
    return exteriorColor;
  }

  public void setExteriorColor(List<FacetItem> exteriorColor) {
    this.exteriorColor = exteriorColor;
  }


  public CarSearchFacets fuelType(List<FacetItem> fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  public CarSearchFacets addFuelTypeItem(FacetItem fuelTypeItem) {
    if (this.fuelType == null) {
      this.fuelType = new ArrayList<>();
    }
    this.fuelType.add(fuelTypeItem);
    return this;
  }

  /**
   * Get fuelType
   * @return fuelType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getFuelType() {
    return fuelType;
  }

  public void setFuelType(List<FacetItem> fuelType) {
    this.fuelType = fuelType;
  }


  public CarSearchFacets interiorColor(List<FacetItem> interiorColor) {
    this.interiorColor = interiorColor;
    return this;
  }

  public CarSearchFacets addInteriorColorItem(FacetItem interiorColorItem) {
    if (this.interiorColor == null) {
      this.interiorColor = new ArrayList<>();
    }
    this.interiorColor.add(interiorColorItem);
    return this;
  }

  /**
   * Get interiorColor
   * @return interiorColor
   */
  @javax.annotation.Nullable
  public List<FacetItem> getInteriorColor() {
    return interiorColor;
  }

  public void setInteriorColor(List<FacetItem> interiorColor) {
    this.interiorColor = interiorColor;
  }


  public CarSearchFacets make(List<FacetItem> make) {
    this.make = make;
    return this;
  }

  public CarSearchFacets addMakeItem(FacetItem makeItem) {
    if (this.make == null) {
      this.make = new ArrayList<>();
    }
    this.make.add(makeItem);
    return this;
  }

  /**
   * Get make
   * @return make
   */
  @javax.annotation.Nullable
  public List<FacetItem> getMake() {
    return make;
  }

  public void setMake(List<FacetItem> make) {
    this.make = make;
  }


  public CarSearchFacets model(List<FacetItem> model) {
    this.model = model;
    return this;
  }

  public CarSearchFacets addModelItem(FacetItem modelItem) {
    if (this.model == null) {
      this.model = new ArrayList<>();
    }
    this.model.add(modelItem);
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public List<FacetItem> getModel() {
    return model;
  }

  public void setModel(List<FacetItem> model) {
    this.model = model;
  }


  public CarSearchFacets sellerName(List<FacetItem> sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public CarSearchFacets addSellerNameItem(FacetItem sellerNameItem) {
    if (this.sellerName == null) {
      this.sellerName = new ArrayList<>();
    }
    this.sellerName.add(sellerNameItem);
    return this;
  }

  /**
   * Get sellerName
   * @return sellerName
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSellerName() {
    return sellerName;
  }

  public void setSellerName(List<FacetItem> sellerName) {
    this.sellerName = sellerName;
  }


  public CarSearchFacets sellerNameO(List<FacetItem> sellerNameO) {
    this.sellerNameO = sellerNameO;
    return this;
  }

  public CarSearchFacets addSellerNameOItem(FacetItem sellerNameOItem) {
    if (this.sellerNameO == null) {
      this.sellerNameO = new ArrayList<>();
    }
    this.sellerNameO.add(sellerNameOItem);
    return this;
  }

  /**
   * Get sellerNameO
   * @return sellerNameO
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSellerNameO() {
    return sellerNameO;
  }

  public void setSellerNameO(List<FacetItem> sellerNameO) {
    this.sellerNameO = sellerNameO;
  }


  public CarSearchFacets sellerType(List<FacetItem> sellerType) {
    this.sellerType = sellerType;
    return this;
  }

  public CarSearchFacets addSellerTypeItem(FacetItem sellerTypeItem) {
    if (this.sellerType == null) {
      this.sellerType = new ArrayList<>();
    }
    this.sellerType.add(sellerTypeItem);
    return this;
  }

  /**
   * Get sellerType
   * @return sellerType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSellerType() {
    return sellerType;
  }

  public void setSellerType(List<FacetItem> sellerType) {
    this.sellerType = sellerType;
  }


  public CarSearchFacets source(List<FacetItem> source) {
    this.source = source;
    return this;
  }

  public CarSearchFacets addSourceItem(FacetItem sourceItem) {
    if (this.source == null) {
      this.source = new ArrayList<>();
    }
    this.source.add(sourceItem);
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public List<FacetItem> getSource() {
    return source;
  }

  public void setSource(List<FacetItem> source) {
    this.source = source;
  }


  public CarSearchFacets state(List<FacetItem> state) {
    this.state = state;
    return this;
  }

  public CarSearchFacets addStateItem(FacetItem stateItem) {
    if (this.state == null) {
      this.state = new ArrayList<>();
    }
    this.state.add(stateItem);
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public List<FacetItem> getState() {
    return state;
  }

  public void setState(List<FacetItem> state) {
    this.state = state;
  }


  public CarSearchFacets transmission(List<FacetItem> transmission) {
    this.transmission = transmission;
    return this;
  }

  public CarSearchFacets addTransmissionItem(FacetItem transmissionItem) {
    if (this.transmission == null) {
      this.transmission = new ArrayList<>();
    }
    this.transmission.add(transmissionItem);
    return this;
  }

  /**
   * Get transmission
   * @return transmission
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTransmission() {
    return transmission;
  }

  public void setTransmission(List<FacetItem> transmission) {
    this.transmission = transmission;
  }


  public CarSearchFacets trim(List<FacetItem> trim) {
    this.trim = trim;
    return this;
  }

  public CarSearchFacets addTrimItem(FacetItem trimItem) {
    if (this.trim == null) {
      this.trim = new ArrayList<>();
    }
    this.trim.add(trimItem);
    return this;
  }

  /**
   * Get trim
   * @return trim
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTrim() {
    return trim;
  }

  public void setTrim(List<FacetItem> trim) {
    this.trim = trim;
  }


  public CarSearchFacets trimO(List<FacetItem> trimO) {
    this.trimO = trimO;
    return this;
  }

  public CarSearchFacets addTrimOItem(FacetItem trimOItem) {
    if (this.trimO == null) {
      this.trimO = new ArrayList<>();
    }
    this.trimO.add(trimOItem);
    return this;
  }

  /**
   * Get trimO
   * @return trimO
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTrimO() {
    return trimO;
  }

  public void setTrimO(List<FacetItem> trimO) {
    this.trimO = trimO;
  }


  public CarSearchFacets trimR(List<FacetItem> trimR) {
    this.trimR = trimR;
    return this;
  }

  public CarSearchFacets addTrimRItem(FacetItem trimRItem) {
    if (this.trimR == null) {
      this.trimR = new ArrayList<>();
    }
    this.trimR.add(trimRItem);
    return this;
  }

  /**
   * Get trimR
   * @return trimR
   */
  @javax.annotation.Nullable
  public List<FacetItem> getTrimR() {
    return trimR;
  }

  public void setTrimR(List<FacetItem> trimR) {
    this.trimR = trimR;
  }


  public CarSearchFacets vehicleType(List<FacetItem> vehicleType) {
    this.vehicleType = vehicleType;
    return this;
  }

  public CarSearchFacets addVehicleTypeItem(FacetItem vehicleTypeItem) {
    if (this.vehicleType == null) {
      this.vehicleType = new ArrayList<>();
    }
    this.vehicleType.add(vehicleTypeItem);
    return this;
  }

  /**
   * Get vehicleType
   * @return vehicleType
   */
  @javax.annotation.Nullable
  public List<FacetItem> getVehicleType() {
    return vehicleType;
  }

  public void setVehicleType(List<FacetItem> vehicleType) {
    this.vehicleType = vehicleType;
  }


  public CarSearchFacets year(List<FacetItem> year) {
    this.year = year;
    return this;
  }

  public CarSearchFacets addYearItem(FacetItem yearItem) {
    if (this.year == null) {
      this.year = new ArrayList<>();
    }
    this.year.add(yearItem);
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public List<FacetItem> getYear() {
    return year;
  }

  public void setYear(List<FacetItem> year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarSearchFacets carSearchFacets = (CarSearchFacets) o;
    return Objects.equals(this.baseExteriorColor, carSearchFacets.baseExteriorColor) &&
        Objects.equals(this.baseInteriorColor, carSearchFacets.baseInteriorColor) &&
        Objects.equals(this.bodySubtype, carSearchFacets.bodySubtype) &&
        Objects.equals(this.bodyType, carSearchFacets.bodyType) &&
        Objects.equals(this.carType, carSearchFacets.carType) &&
        Objects.equals(this.carfax1Owner, carSearchFacets.carfax1Owner) &&
        Objects.equals(this.carfaxCleanTitle, carSearchFacets.carfaxCleanTitle) &&
        Objects.equals(this.city, carSearchFacets.city) &&
        Objects.equals(this.cylinders, carSearchFacets.cylinders) &&
        Objects.equals(this.dataSource, carSearchFacets.dataSource) &&
        Objects.equals(this.dealerId, carSearchFacets.dealerId) &&
        Objects.equals(this.dealerType, carSearchFacets.dealerType) &&
        Objects.equals(this.doors, carSearchFacets.doors) &&
        Objects.equals(this.drivetrain, carSearchFacets.drivetrain) &&
        Objects.equals(this.engine, carSearchFacets.engine) &&
        Objects.equals(this.engineAspiration, carSearchFacets.engineAspiration) &&
        Objects.equals(this.engineBlock, carSearchFacets.engineBlock) &&
        Objects.equals(this.engineSize, carSearchFacets.engineSize) &&
        Objects.equals(this.exteriorColor, carSearchFacets.exteriorColor) &&
        Objects.equals(this.fuelType, carSearchFacets.fuelType) &&
        Objects.equals(this.interiorColor, carSearchFacets.interiorColor) &&
        Objects.equals(this.make, carSearchFacets.make) &&
        Objects.equals(this.model, carSearchFacets.model) &&
        Objects.equals(this.sellerName, carSearchFacets.sellerName) &&
        Objects.equals(this.sellerNameO, carSearchFacets.sellerNameO) &&
        Objects.equals(this.sellerType, carSearchFacets.sellerType) &&
        Objects.equals(this.source, carSearchFacets.source) &&
        Objects.equals(this.state, carSearchFacets.state) &&
        Objects.equals(this.transmission, carSearchFacets.transmission) &&
        Objects.equals(this.trim, carSearchFacets.trim) &&
        Objects.equals(this.trimO, carSearchFacets.trimO) &&
        Objects.equals(this.trimR, carSearchFacets.trimR) &&
        Objects.equals(this.vehicleType, carSearchFacets.vehicleType) &&
        Objects.equals(this.year, carSearchFacets.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseExteriorColor, baseInteriorColor, bodySubtype, bodyType, carType, carfax1Owner, carfaxCleanTitle, city, cylinders, dataSource, dealerId, dealerType, doors, drivetrain, engine, engineAspiration, engineBlock, engineSize, exteriorColor, fuelType, interiorColor, make, model, sellerName, sellerNameO, sellerType, source, state, transmission, trim, trimO, trimR, vehicleType, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarSearchFacets {\n");
    sb.append("    baseExteriorColor: ").append(toIndentedString(baseExteriorColor)).append("\n");
    sb.append("    baseInteriorColor: ").append(toIndentedString(baseInteriorColor)).append("\n");
    sb.append("    bodySubtype: ").append(toIndentedString(bodySubtype)).append("\n");
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    carType: ").append(toIndentedString(carType)).append("\n");
    sb.append("    carfax1Owner: ").append(toIndentedString(carfax1Owner)).append("\n");
    sb.append("    carfaxCleanTitle: ").append(toIndentedString(carfaxCleanTitle)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    cylinders: ").append(toIndentedString(cylinders)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    dealerId: ").append(toIndentedString(dealerId)).append("\n");
    sb.append("    dealerType: ").append(toIndentedString(dealerType)).append("\n");
    sb.append("    doors: ").append(toIndentedString(doors)).append("\n");
    sb.append("    drivetrain: ").append(toIndentedString(drivetrain)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineAspiration: ").append(toIndentedString(engineAspiration)).append("\n");
    sb.append("    engineBlock: ").append(toIndentedString(engineBlock)).append("\n");
    sb.append("    engineSize: ").append(toIndentedString(engineSize)).append("\n");
    sb.append("    exteriorColor: ").append(toIndentedString(exteriorColor)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    interiorColor: ").append(toIndentedString(interiorColor)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    sellerNameO: ").append(toIndentedString(sellerNameO)).append("\n");
    sb.append("    sellerType: ").append(toIndentedString(sellerType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    trimO: ").append(toIndentedString(trimO)).append("\n");
    sb.append("    trimR: ").append(toIndentedString(trimR)).append("\n");
    sb.append("    vehicleType: ").append(toIndentedString(vehicleType)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_exterior_color");
    openapiFields.add("base_interior_color");
    openapiFields.add("body_subtype");
    openapiFields.add("body_type");
    openapiFields.add("car_type");
    openapiFields.add("carfax_1_owner");
    openapiFields.add("carfax_clean_title");
    openapiFields.add("city");
    openapiFields.add("cylinders");
    openapiFields.add("data_source");
    openapiFields.add("dealer_id");
    openapiFields.add("dealer_type");
    openapiFields.add("doors");
    openapiFields.add("drivetrain");
    openapiFields.add("engine");
    openapiFields.add("engine_aspiration");
    openapiFields.add("engine_block");
    openapiFields.add("engine_size");
    openapiFields.add("exterior_color");
    openapiFields.add("fuel_type");
    openapiFields.add("interior_color");
    openapiFields.add("make");
    openapiFields.add("model");
    openapiFields.add("seller_name");
    openapiFields.add("seller_name_o");
    openapiFields.add("seller_type");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("transmission");
    openapiFields.add("trim");
    openapiFields.add("trim_o");
    openapiFields.add("trim_r");
    openapiFields.add("vehicle_type");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CarSearchFacets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CarSearchFacets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CarSearchFacets is not found in the empty JSON string", CarSearchFacets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CarSearchFacets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CarSearchFacets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("base_exterior_color") != null && !jsonObj.get("base_exterior_color").isJsonNull()) {
        JsonArray jsonArraybaseExteriorColor = jsonObj.getAsJsonArray("base_exterior_color");
        if (jsonArraybaseExteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("base_exterior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `base_exterior_color` to be an array in the JSON string but got `%s`", jsonObj.get("base_exterior_color").toString()));
          }

          // validate the optional field `base_exterior_color` (array)
          for (int i = 0; i < jsonArraybaseExteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArraybaseExteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("base_interior_color") != null && !jsonObj.get("base_interior_color").isJsonNull()) {
        JsonArray jsonArraybaseInteriorColor = jsonObj.getAsJsonArray("base_interior_color");
        if (jsonArraybaseInteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("base_interior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `base_interior_color` to be an array in the JSON string but got `%s`", jsonObj.get("base_interior_color").toString()));
          }

          // validate the optional field `base_interior_color` (array)
          for (int i = 0; i < jsonArraybaseInteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArraybaseInteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("body_subtype") != null && !jsonObj.get("body_subtype").isJsonNull()) {
        JsonArray jsonArraybodySubtype = jsonObj.getAsJsonArray("body_subtype");
        if (jsonArraybodySubtype != null) {
          // ensure the json data is an array
          if (!jsonObj.get("body_subtype").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `body_subtype` to be an array in the JSON string but got `%s`", jsonObj.get("body_subtype").toString()));
          }

          // validate the optional field `body_subtype` (array)
          for (int i = 0; i < jsonArraybodySubtype.size(); i++) {
            FacetItem.validateJsonElement(jsonArraybodySubtype.get(i));
          };
        }
      }
      if (jsonObj.get("body_type") != null && !jsonObj.get("body_type").isJsonNull()) {
        JsonArray jsonArraybodyType = jsonObj.getAsJsonArray("body_type");
        if (jsonArraybodyType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("body_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `body_type` to be an array in the JSON string but got `%s`", jsonObj.get("body_type").toString()));
          }

          // validate the optional field `body_type` (array)
          for (int i = 0; i < jsonArraybodyType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraybodyType.get(i));
          };
        }
      }
      if (jsonObj.get("car_type") != null && !jsonObj.get("car_type").isJsonNull()) {
        JsonArray jsonArraycarType = jsonObj.getAsJsonArray("car_type");
        if (jsonArraycarType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("car_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `car_type` to be an array in the JSON string but got `%s`", jsonObj.get("car_type").toString()));
          }

          // validate the optional field `car_type` (array)
          for (int i = 0; i < jsonArraycarType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarType.get(i));
          };
        }
      }
      if (jsonObj.get("carfax_1_owner") != null && !jsonObj.get("carfax_1_owner").isJsonNull()) {
        JsonArray jsonArraycarfax1Owner = jsonObj.getAsJsonArray("carfax_1_owner");
        if (jsonArraycarfax1Owner != null) {
          // ensure the json data is an array
          if (!jsonObj.get("carfax_1_owner").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `carfax_1_owner` to be an array in the JSON string but got `%s`", jsonObj.get("carfax_1_owner").toString()));
          }

          // validate the optional field `carfax_1_owner` (array)
          for (int i = 0; i < jsonArraycarfax1Owner.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarfax1Owner.get(i));
          };
        }
      }
      if (jsonObj.get("carfax_clean_title") != null && !jsonObj.get("carfax_clean_title").isJsonNull()) {
        JsonArray jsonArraycarfaxCleanTitle = jsonObj.getAsJsonArray("carfax_clean_title");
        if (jsonArraycarfaxCleanTitle != null) {
          // ensure the json data is an array
          if (!jsonObj.get("carfax_clean_title").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `carfax_clean_title` to be an array in the JSON string but got `%s`", jsonObj.get("carfax_clean_title").toString()));
          }

          // validate the optional field `carfax_clean_title` (array)
          for (int i = 0; i < jsonArraycarfaxCleanTitle.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycarfaxCleanTitle.get(i));
          };
        }
      }
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        JsonArray jsonArraycity = jsonObj.getAsJsonArray("city");
        if (jsonArraycity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("city").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `city` to be an array in the JSON string but got `%s`", jsonObj.get("city").toString()));
          }

          // validate the optional field `city` (array)
          for (int i = 0; i < jsonArraycity.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycity.get(i));
          };
        }
      }
      if (jsonObj.get("cylinders") != null && !jsonObj.get("cylinders").isJsonNull()) {
        JsonArray jsonArraycylinders = jsonObj.getAsJsonArray("cylinders");
        if (jsonArraycylinders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cylinders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cylinders` to be an array in the JSON string but got `%s`", jsonObj.get("cylinders").toString()));
          }

          // validate the optional field `cylinders` (array)
          for (int i = 0; i < jsonArraycylinders.size(); i++) {
            FacetItem.validateJsonElement(jsonArraycylinders.get(i));
          };
        }
      }
      if (jsonObj.get("data_source") != null && !jsonObj.get("data_source").isJsonNull()) {
        JsonArray jsonArraydataSource = jsonObj.getAsJsonArray("data_source");
        if (jsonArraydataSource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("data_source").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `data_source` to be an array in the JSON string but got `%s`", jsonObj.get("data_source").toString()));
          }

          // validate the optional field `data_source` (array)
          for (int i = 0; i < jsonArraydataSource.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydataSource.get(i));
          };
        }
      }
      if (jsonObj.get("dealer_id") != null && !jsonObj.get("dealer_id").isJsonNull()) {
        JsonArray jsonArraydealerId = jsonObj.getAsJsonArray("dealer_id");
        if (jsonArraydealerId != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dealer_id").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dealer_id` to be an array in the JSON string but got `%s`", jsonObj.get("dealer_id").toString()));
          }

          // validate the optional field `dealer_id` (array)
          for (int i = 0; i < jsonArraydealerId.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydealerId.get(i));
          };
        }
      }
      if (jsonObj.get("dealer_type") != null && !jsonObj.get("dealer_type").isJsonNull()) {
        JsonArray jsonArraydealerType = jsonObj.getAsJsonArray("dealer_type");
        if (jsonArraydealerType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dealer_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dealer_type` to be an array in the JSON string but got `%s`", jsonObj.get("dealer_type").toString()));
          }

          // validate the optional field `dealer_type` (array)
          for (int i = 0; i < jsonArraydealerType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydealerType.get(i));
          };
        }
      }
      if (jsonObj.get("doors") != null && !jsonObj.get("doors").isJsonNull()) {
        JsonArray jsonArraydoors = jsonObj.getAsJsonArray("doors");
        if (jsonArraydoors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("doors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `doors` to be an array in the JSON string but got `%s`", jsonObj.get("doors").toString()));
          }

          // validate the optional field `doors` (array)
          for (int i = 0; i < jsonArraydoors.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydoors.get(i));
          };
        }
      }
      if (jsonObj.get("drivetrain") != null && !jsonObj.get("drivetrain").isJsonNull()) {
        JsonArray jsonArraydrivetrain = jsonObj.getAsJsonArray("drivetrain");
        if (jsonArraydrivetrain != null) {
          // ensure the json data is an array
          if (!jsonObj.get("drivetrain").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `drivetrain` to be an array in the JSON string but got `%s`", jsonObj.get("drivetrain").toString()));
          }

          // validate the optional field `drivetrain` (array)
          for (int i = 0; i < jsonArraydrivetrain.size(); i++) {
            FacetItem.validateJsonElement(jsonArraydrivetrain.get(i));
          };
        }
      }
      if (jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) {
        JsonArray jsonArrayengine = jsonObj.getAsJsonArray("engine");
        if (jsonArrayengine != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine` to be an array in the JSON string but got `%s`", jsonObj.get("engine").toString()));
          }

          // validate the optional field `engine` (array)
          for (int i = 0; i < jsonArrayengine.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengine.get(i));
          };
        }
      }
      if (jsonObj.get("engine_aspiration") != null && !jsonObj.get("engine_aspiration").isJsonNull()) {
        JsonArray jsonArrayengineAspiration = jsonObj.getAsJsonArray("engine_aspiration");
        if (jsonArrayengineAspiration != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine_aspiration").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine_aspiration` to be an array in the JSON string but got `%s`", jsonObj.get("engine_aspiration").toString()));
          }

          // validate the optional field `engine_aspiration` (array)
          for (int i = 0; i < jsonArrayengineAspiration.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengineAspiration.get(i));
          };
        }
      }
      if (jsonObj.get("engine_block") != null && !jsonObj.get("engine_block").isJsonNull()) {
        JsonArray jsonArrayengineBlock = jsonObj.getAsJsonArray("engine_block");
        if (jsonArrayengineBlock != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine_block").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine_block` to be an array in the JSON string but got `%s`", jsonObj.get("engine_block").toString()));
          }

          // validate the optional field `engine_block` (array)
          for (int i = 0; i < jsonArrayengineBlock.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengineBlock.get(i));
          };
        }
      }
      if (jsonObj.get("engine_size") != null && !jsonObj.get("engine_size").isJsonNull()) {
        JsonArray jsonArrayengineSize = jsonObj.getAsJsonArray("engine_size");
        if (jsonArrayengineSize != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engine_size").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engine_size` to be an array in the JSON string but got `%s`", jsonObj.get("engine_size").toString()));
          }

          // validate the optional field `engine_size` (array)
          for (int i = 0; i < jsonArrayengineSize.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayengineSize.get(i));
          };
        }
      }
      if (jsonObj.get("exterior_color") != null && !jsonObj.get("exterior_color").isJsonNull()) {
        JsonArray jsonArrayexteriorColor = jsonObj.getAsJsonArray("exterior_color");
        if (jsonArrayexteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exterior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exterior_color` to be an array in the JSON string but got `%s`", jsonObj.get("exterior_color").toString()));
          }

          // validate the optional field `exterior_color` (array)
          for (int i = 0; i < jsonArrayexteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayexteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("fuel_type") != null && !jsonObj.get("fuel_type").isJsonNull()) {
        JsonArray jsonArrayfuelType = jsonObj.getAsJsonArray("fuel_type");
        if (jsonArrayfuelType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fuel_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fuel_type` to be an array in the JSON string but got `%s`", jsonObj.get("fuel_type").toString()));
          }

          // validate the optional field `fuel_type` (array)
          for (int i = 0; i < jsonArrayfuelType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayfuelType.get(i));
          };
        }
      }
      if (jsonObj.get("interior_color") != null && !jsonObj.get("interior_color").isJsonNull()) {
        JsonArray jsonArrayinteriorColor = jsonObj.getAsJsonArray("interior_color");
        if (jsonArrayinteriorColor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interior_color").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interior_color` to be an array in the JSON string but got `%s`", jsonObj.get("interior_color").toString()));
          }

          // validate the optional field `interior_color` (array)
          for (int i = 0; i < jsonArrayinteriorColor.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayinteriorColor.get(i));
          };
        }
      }
      if (jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) {
        JsonArray jsonArraymake = jsonObj.getAsJsonArray("make");
        if (jsonArraymake != null) {
          // ensure the json data is an array
          if (!jsonObj.get("make").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `make` to be an array in the JSON string but got `%s`", jsonObj.get("make").toString()));
          }

          // validate the optional field `make` (array)
          for (int i = 0; i < jsonArraymake.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymake.get(i));
          };
        }
      }
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        JsonArray jsonArraymodel = jsonObj.getAsJsonArray("model");
        if (jsonArraymodel != null) {
          // ensure the json data is an array
          if (!jsonObj.get("model").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `model` to be an array in the JSON string but got `%s`", jsonObj.get("model").toString()));
          }

          // validate the optional field `model` (array)
          for (int i = 0; i < jsonArraymodel.size(); i++) {
            FacetItem.validateJsonElement(jsonArraymodel.get(i));
          };
        }
      }
      if (jsonObj.get("seller_name") != null && !jsonObj.get("seller_name").isJsonNull()) {
        JsonArray jsonArraysellerName = jsonObj.getAsJsonArray("seller_name");
        if (jsonArraysellerName != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seller_name").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_name` to be an array in the JSON string but got `%s`", jsonObj.get("seller_name").toString()));
          }

          // validate the optional field `seller_name` (array)
          for (int i = 0; i < jsonArraysellerName.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysellerName.get(i));
          };
        }
      }
      if (jsonObj.get("seller_name_o") != null && !jsonObj.get("seller_name_o").isJsonNull()) {
        JsonArray jsonArraysellerNameO = jsonObj.getAsJsonArray("seller_name_o");
        if (jsonArraysellerNameO != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seller_name_o").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_name_o` to be an array in the JSON string but got `%s`", jsonObj.get("seller_name_o").toString()));
          }

          // validate the optional field `seller_name_o` (array)
          for (int i = 0; i < jsonArraysellerNameO.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysellerNameO.get(i));
          };
        }
      }
      if (jsonObj.get("seller_type") != null && !jsonObj.get("seller_type").isJsonNull()) {
        JsonArray jsonArraysellerType = jsonObj.getAsJsonArray("seller_type");
        if (jsonArraysellerType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seller_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_type` to be an array in the JSON string but got `%s`", jsonObj.get("seller_type").toString()));
          }

          // validate the optional field `seller_type` (array)
          for (int i = 0; i < jsonArraysellerType.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysellerType.get(i));
          };
        }
      }
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        JsonArray jsonArraysource = jsonObj.getAsJsonArray("source");
        if (jsonArraysource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("source").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `source` to be an array in the JSON string but got `%s`", jsonObj.get("source").toString()));
          }

          // validate the optional field `source` (array)
          for (int i = 0; i < jsonArraysource.size(); i++) {
            FacetItem.validateJsonElement(jsonArraysource.get(i));
          };
        }
      }
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        JsonArray jsonArraystate = jsonObj.getAsJsonArray("state");
        if (jsonArraystate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("state").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `state` to be an array in the JSON string but got `%s`", jsonObj.get("state").toString()));
          }

          // validate the optional field `state` (array)
          for (int i = 0; i < jsonArraystate.size(); i++) {
            FacetItem.validateJsonElement(jsonArraystate.get(i));
          };
        }
      }
      if (jsonObj.get("transmission") != null && !jsonObj.get("transmission").isJsonNull()) {
        JsonArray jsonArraytransmission = jsonObj.getAsJsonArray("transmission");
        if (jsonArraytransmission != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transmission").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transmission` to be an array in the JSON string but got `%s`", jsonObj.get("transmission").toString()));
          }

          // validate the optional field `transmission` (array)
          for (int i = 0; i < jsonArraytransmission.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytransmission.get(i));
          };
        }
      }
      if (jsonObj.get("trim") != null && !jsonObj.get("trim").isJsonNull()) {
        JsonArray jsonArraytrim = jsonObj.getAsJsonArray("trim");
        if (jsonArraytrim != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trim").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trim` to be an array in the JSON string but got `%s`", jsonObj.get("trim").toString()));
          }

          // validate the optional field `trim` (array)
          for (int i = 0; i < jsonArraytrim.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytrim.get(i));
          };
        }
      }
      if (jsonObj.get("trim_o") != null && !jsonObj.get("trim_o").isJsonNull()) {
        JsonArray jsonArraytrimO = jsonObj.getAsJsonArray("trim_o");
        if (jsonArraytrimO != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trim_o").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trim_o` to be an array in the JSON string but got `%s`", jsonObj.get("trim_o").toString()));
          }

          // validate the optional field `trim_o` (array)
          for (int i = 0; i < jsonArraytrimO.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytrimO.get(i));
          };
        }
      }
      if (jsonObj.get("trim_r") != null && !jsonObj.get("trim_r").isJsonNull()) {
        JsonArray jsonArraytrimR = jsonObj.getAsJsonArray("trim_r");
        if (jsonArraytrimR != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trim_r").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trim_r` to be an array in the JSON string but got `%s`", jsonObj.get("trim_r").toString()));
          }

          // validate the optional field `trim_r` (array)
          for (int i = 0; i < jsonArraytrimR.size(); i++) {
            FacetItem.validateJsonElement(jsonArraytrimR.get(i));
          };
        }
      }
      if (jsonObj.get("vehicle_type") != null && !jsonObj.get("vehicle_type").isJsonNull()) {
        JsonArray jsonArrayvehicleType = jsonObj.getAsJsonArray("vehicle_type");
        if (jsonArrayvehicleType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vehicle_type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vehicle_type` to be an array in the JSON string but got `%s`", jsonObj.get("vehicle_type").toString()));
          }

          // validate the optional field `vehicle_type` (array)
          for (int i = 0; i < jsonArrayvehicleType.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayvehicleType.get(i));
          };
        }
      }
      if (jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) {
        JsonArray jsonArrayyear = jsonObj.getAsJsonArray("year");
        if (jsonArrayyear != null) {
          // ensure the json data is an array
          if (!jsonObj.get("year").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `year` to be an array in the JSON string but got `%s`", jsonObj.get("year").toString()));
          }

          // validate the optional field `year` (array)
          for (int i = 0; i < jsonArrayyear.size(); i++) {
            FacetItem.validateJsonElement(jsonArrayyear.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CarSearchFacets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CarSearchFacets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CarSearchFacets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CarSearchFacets.class));

       return (TypeAdapter<T>) new TypeAdapter<CarSearchFacets>() {
           @Override
           public void write(JsonWriter out, CarSearchFacets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CarSearchFacets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CarSearchFacets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CarSearchFacets
   * @throws IOException if the JSON string is invalid with respect to CarSearchFacets
   */
  public static CarSearchFacets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CarSearchFacets.class);
  }

  /**
   * Convert an instance of CarSearchFacets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

