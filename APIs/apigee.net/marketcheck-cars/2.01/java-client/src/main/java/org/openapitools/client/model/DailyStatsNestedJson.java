/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * All nested JSON of stats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DailyStatsNestedJson {
  public static final String SERIALIZED_NAME_INTERQUARTILE_RANGE = "interquartile_range";
  @SerializedName(SERIALIZED_NAME_INTERQUARTILE_RANGE)
  private BigDecimal interquartileRange;

  public static final String SERIALIZED_NAME_MEAN = "mean";
  @SerializedName(SERIALIZED_NAME_MEAN)
  private BigDecimal mean;

  public static final String SERIALIZED_NAME_MEDIAN = "median";
  @SerializedName(SERIALIZED_NAME_MEDIAN)
  private BigDecimal median;

  public static final String SERIALIZED_NAME_POPULATION_STANDARD_DEVIATION = "population_standard_deviation";
  @SerializedName(SERIALIZED_NAME_POPULATION_STANDARD_DEVIATION)
  private BigDecimal populationStandardDeviation;

  public static final String SERIALIZED_NAME_STANDARD_DEVIATION = "standard_deviation";
  @SerializedName(SERIALIZED_NAME_STANDARD_DEVIATION)
  private BigDecimal standardDeviation;

  public static final String SERIALIZED_NAME_TRIMMED_MEAN = "trimmed_mean";
  @SerializedName(SERIALIZED_NAME_TRIMMED_MEAN)
  private BigDecimal trimmedMean;

  public static final String SERIALIZED_NAME_VARIANCE = "variance";
  @SerializedName(SERIALIZED_NAME_VARIANCE)
  private BigDecimal variance;

  public DailyStatsNestedJson() {
  }

  public DailyStatsNestedJson interquartileRange(BigDecimal interquartileRange) {
    this.interquartileRange = interquartileRange;
    return this;
  }

  /**
   * Interquartile range
   * @return interquartileRange
   */
  @javax.annotation.Nullable
  public BigDecimal getInterquartileRange() {
    return interquartileRange;
  }

  public void setInterquartileRange(BigDecimal interquartileRange) {
    this.interquartileRange = interquartileRange;
  }


  public DailyStatsNestedJson mean(BigDecimal mean) {
    this.mean = mean;
    return this;
  }

  /**
   * Mean
   * @return mean
   */
  @javax.annotation.Nullable
  public BigDecimal getMean() {
    return mean;
  }

  public void setMean(BigDecimal mean) {
    this.mean = mean;
  }


  public DailyStatsNestedJson median(BigDecimal median) {
    this.median = median;
    return this;
  }

  /**
   * Median
   * @return median
   */
  @javax.annotation.Nullable
  public BigDecimal getMedian() {
    return median;
  }

  public void setMedian(BigDecimal median) {
    this.median = median;
  }


  public DailyStatsNestedJson populationStandardDeviation(BigDecimal populationStandardDeviation) {
    this.populationStandardDeviation = populationStandardDeviation;
    return this;
  }

  /**
   * population standard deviation
   * @return populationStandardDeviation
   */
  @javax.annotation.Nullable
  public BigDecimal getPopulationStandardDeviation() {
    return populationStandardDeviation;
  }

  public void setPopulationStandardDeviation(BigDecimal populationStandardDeviation) {
    this.populationStandardDeviation = populationStandardDeviation;
  }


  public DailyStatsNestedJson standardDeviation(BigDecimal standardDeviation) {
    this.standardDeviation = standardDeviation;
    return this;
  }

  /**
   * Standard Deviation
   * @return standardDeviation
   */
  @javax.annotation.Nullable
  public BigDecimal getStandardDeviation() {
    return standardDeviation;
  }

  public void setStandardDeviation(BigDecimal standardDeviation) {
    this.standardDeviation = standardDeviation;
  }


  public DailyStatsNestedJson trimmedMean(BigDecimal trimmedMean) {
    this.trimmedMean = trimmedMean;
    return this;
  }

  /**
   * Trimmed Mean
   * @return trimmedMean
   */
  @javax.annotation.Nullable
  public BigDecimal getTrimmedMean() {
    return trimmedMean;
  }

  public void setTrimmedMean(BigDecimal trimmedMean) {
    this.trimmedMean = trimmedMean;
  }


  public DailyStatsNestedJson variance(BigDecimal variance) {
    this.variance = variance;
    return this;
  }

  /**
   * variance
   * @return variance
   */
  @javax.annotation.Nullable
  public BigDecimal getVariance() {
    return variance;
  }

  public void setVariance(BigDecimal variance) {
    this.variance = variance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyStatsNestedJson dailyStatsNestedJson = (DailyStatsNestedJson) o;
    return Objects.equals(this.interquartileRange, dailyStatsNestedJson.interquartileRange) &&
        Objects.equals(this.mean, dailyStatsNestedJson.mean) &&
        Objects.equals(this.median, dailyStatsNestedJson.median) &&
        Objects.equals(this.populationStandardDeviation, dailyStatsNestedJson.populationStandardDeviation) &&
        Objects.equals(this.standardDeviation, dailyStatsNestedJson.standardDeviation) &&
        Objects.equals(this.trimmedMean, dailyStatsNestedJson.trimmedMean) &&
        Objects.equals(this.variance, dailyStatsNestedJson.variance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interquartileRange, mean, median, populationStandardDeviation, standardDeviation, trimmedMean, variance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyStatsNestedJson {\n");
    sb.append("    interquartileRange: ").append(toIndentedString(interquartileRange)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    median: ").append(toIndentedString(median)).append("\n");
    sb.append("    populationStandardDeviation: ").append(toIndentedString(populationStandardDeviation)).append("\n");
    sb.append("    standardDeviation: ").append(toIndentedString(standardDeviation)).append("\n");
    sb.append("    trimmedMean: ").append(toIndentedString(trimmedMean)).append("\n");
    sb.append("    variance: ").append(toIndentedString(variance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interquartile_range");
    openapiFields.add("mean");
    openapiFields.add("median");
    openapiFields.add("population_standard_deviation");
    openapiFields.add("standard_deviation");
    openapiFields.add("trimmed_mean");
    openapiFields.add("variance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DailyStatsNestedJson
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DailyStatsNestedJson.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyStatsNestedJson is not found in the empty JSON string", DailyStatsNestedJson.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DailyStatsNestedJson.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DailyStatsNestedJson` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyStatsNestedJson.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyStatsNestedJson' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyStatsNestedJson> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyStatsNestedJson.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyStatsNestedJson>() {
           @Override
           public void write(JsonWriter out, DailyStatsNestedJson value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyStatsNestedJson read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DailyStatsNestedJson given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DailyStatsNestedJson
   * @throws IOException if the JSON string is invalid with respect to DailyStatsNestedJson
   */
  public static DailyStatsNestedJson fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyStatsNestedJson.class);
  }

  /**
   * Convert an instance of DailyStatsNestedJson to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

