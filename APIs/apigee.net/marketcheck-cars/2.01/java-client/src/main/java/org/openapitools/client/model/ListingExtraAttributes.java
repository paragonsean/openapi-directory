/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListingExtraAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListingExtraAttributes {
  public static final String SERIALIZED_NAME_DEALER_ADDED_F = "dealer_added_f";
  @SerializedName(SERIALIZED_NAME_DEALER_ADDED_F)
  private List<String> dealerAddedF = new ArrayList<>();

  public static final String SERIALIZED_NAME_ELECTRONICS_F = "electronics_f";
  @SerializedName(SERIALIZED_NAME_ELECTRONICS_F)
  private List<String> electronicsF = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERIOR_F = "exterior_f";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_F)
  private List<String> exteriorF = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<String> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERIOR_F = "interior_f";
  @SerializedName(SERIALIZED_NAME_INTERIOR_F)
  private List<String> interiorF = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<String> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAFETY_F = "safety_f";
  @SerializedName(SERIALIZED_NAME_SAFETY_F)
  private List<String> safetyF = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_CMTS = "seller_cmts";
  @SerializedName(SERIALIZED_NAME_SELLER_CMTS)
  private String sellerCmts;

  public static final String SERIALIZED_NAME_STANDARD_F = "standard_f";
  @SerializedName(SERIALIZED_NAME_STANDARD_F)
  private List<String> standardF = new ArrayList<>();

  public static final String SERIALIZED_NAME_TECHNICAL_F = "technical_f";
  @SerializedName(SERIALIZED_NAME_TECHNICAL_F)
  private List<String> technicalF = new ArrayList<>();

  public ListingExtraAttributes() {
  }

  public ListingExtraAttributes dealerAddedF(List<String> dealerAddedF) {
    this.dealerAddedF = dealerAddedF;
    return this;
  }

  public ListingExtraAttributes addDealerAddedFItem(String dealerAddedFItem) {
    if (this.dealerAddedF == null) {
      this.dealerAddedF = new ArrayList<>();
    }
    this.dealerAddedF.add(dealerAddedFItem);
    return this;
  }

  /**
   * List of dealer added features available with the car
   * @return dealerAddedF
   */
  @javax.annotation.Nullable
  public List<String> getDealerAddedF() {
    return dealerAddedF;
  }

  public void setDealerAddedF(List<String> dealerAddedF) {
    this.dealerAddedF = dealerAddedF;
  }


  public ListingExtraAttributes electronicsF(List<String> electronicsF) {
    this.electronicsF = electronicsF;
    return this;
  }

  public ListingExtraAttributes addElectronicsFItem(String electronicsFItem) {
    if (this.electronicsF == null) {
      this.electronicsF = new ArrayList<>();
    }
    this.electronicsF.add(electronicsFItem);
    return this;
  }

  /**
   * List of electronic features available with the car
   * @return electronicsF
   */
  @javax.annotation.Nullable
  public List<String> getElectronicsF() {
    return electronicsF;
  }

  public void setElectronicsF(List<String> electronicsF) {
    this.electronicsF = electronicsF;
  }


  public ListingExtraAttributes exteriorF(List<String> exteriorF) {
    this.exteriorF = exteriorF;
    return this;
  }

  public ListingExtraAttributes addExteriorFItem(String exteriorFItem) {
    if (this.exteriorF == null) {
      this.exteriorF = new ArrayList<>();
    }
    this.exteriorF.add(exteriorFItem);
    return this;
  }

  /**
   * List of exterior features available with the car
   * @return exteriorF
   */
  @javax.annotation.Nullable
  public List<String> getExteriorF() {
    return exteriorF;
  }

  public void setExteriorF(List<String> exteriorF) {
    this.exteriorF = exteriorF;
  }


  public ListingExtraAttributes features(List<String> features) {
    this.features = features;
    return this;
  }

  public ListingExtraAttributes addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * List of Features available with the car
   * @return features
   */
  @javax.annotation.Nullable
  public List<String> getFeatures() {
    return features;
  }

  public void setFeatures(List<String> features) {
    this.features = features;
  }


  public ListingExtraAttributes id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier representing a specific listing from the Marketcheck database
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ListingExtraAttributes interiorF(List<String> interiorF) {
    this.interiorF = interiorF;
    return this;
  }

  public ListingExtraAttributes addInteriorFItem(String interiorFItem) {
    if (this.interiorF == null) {
      this.interiorF = new ArrayList<>();
    }
    this.interiorF.add(interiorFItem);
    return this;
  }

  /**
   * List of interior features available with the car
   * @return interiorF
   */
  @javax.annotation.Nullable
  public List<String> getInteriorF() {
    return interiorF;
  }

  public void setInteriorF(List<String> interiorF) {
    this.interiorF = interiorF;
  }


  public ListingExtraAttributes options(List<String> options) {
    this.options = options;
    return this;
  }

  public ListingExtraAttributes addOptionsItem(String optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Installed Options of the car
   * @return options
   */
  @javax.annotation.Nullable
  public List<String> getOptions() {
    return options;
  }

  public void setOptions(List<String> options) {
    this.options = options;
  }


  public ListingExtraAttributes safetyF(List<String> safetyF) {
    this.safetyF = safetyF;
    return this;
  }

  public ListingExtraAttributes addSafetyFItem(String safetyFItem) {
    if (this.safetyF == null) {
      this.safetyF = new ArrayList<>();
    }
    this.safetyF.add(safetyFItem);
    return this;
  }

  /**
   * List of safety features available with the car
   * @return safetyF
   */
  @javax.annotation.Nullable
  public List<String> getSafetyF() {
    return safetyF;
  }

  public void setSafetyF(List<String> safetyF) {
    this.safetyF = safetyF;
  }


  public ListingExtraAttributes sellerCmts(String sellerCmts) {
    this.sellerCmts = sellerCmts;
    return this;
  }

  /**
   * Seller comment for the car
   * @return sellerCmts
   */
  @javax.annotation.Nullable
  public String getSellerCmts() {
    return sellerCmts;
  }

  public void setSellerCmts(String sellerCmts) {
    this.sellerCmts = sellerCmts;
  }


  public ListingExtraAttributes standardF(List<String> standardF) {
    this.standardF = standardF;
    return this;
  }

  public ListingExtraAttributes addStandardFItem(String standardFItem) {
    if (this.standardF == null) {
      this.standardF = new ArrayList<>();
    }
    this.standardF.add(standardFItem);
    return this;
  }

  /**
   * List of standard features available with the car
   * @return standardF
   */
  @javax.annotation.Nullable
  public List<String> getStandardF() {
    return standardF;
  }

  public void setStandardF(List<String> standardF) {
    this.standardF = standardF;
  }


  public ListingExtraAttributes technicalF(List<String> technicalF) {
    this.technicalF = technicalF;
    return this;
  }

  public ListingExtraAttributes addTechnicalFItem(String technicalFItem) {
    if (this.technicalF == null) {
      this.technicalF = new ArrayList<>();
    }
    this.technicalF.add(technicalFItem);
    return this;
  }

  /**
   * List of technical features available with the car
   * @return technicalF
   */
  @javax.annotation.Nullable
  public List<String> getTechnicalF() {
    return technicalF;
  }

  public void setTechnicalF(List<String> technicalF) {
    this.technicalF = technicalF;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingExtraAttributes listingExtraAttributes = (ListingExtraAttributes) o;
    return Objects.equals(this.dealerAddedF, listingExtraAttributes.dealerAddedF) &&
        Objects.equals(this.electronicsF, listingExtraAttributes.electronicsF) &&
        Objects.equals(this.exteriorF, listingExtraAttributes.exteriorF) &&
        Objects.equals(this.features, listingExtraAttributes.features) &&
        Objects.equals(this.id, listingExtraAttributes.id) &&
        Objects.equals(this.interiorF, listingExtraAttributes.interiorF) &&
        Objects.equals(this.options, listingExtraAttributes.options) &&
        Objects.equals(this.safetyF, listingExtraAttributes.safetyF) &&
        Objects.equals(this.sellerCmts, listingExtraAttributes.sellerCmts) &&
        Objects.equals(this.standardF, listingExtraAttributes.standardF) &&
        Objects.equals(this.technicalF, listingExtraAttributes.technicalF);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dealerAddedF, electronicsF, exteriorF, features, id, interiorF, options, safetyF, sellerCmts, standardF, technicalF);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingExtraAttributes {\n");
    sb.append("    dealerAddedF: ").append(toIndentedString(dealerAddedF)).append("\n");
    sb.append("    electronicsF: ").append(toIndentedString(electronicsF)).append("\n");
    sb.append("    exteriorF: ").append(toIndentedString(exteriorF)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interiorF: ").append(toIndentedString(interiorF)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    safetyF: ").append(toIndentedString(safetyF)).append("\n");
    sb.append("    sellerCmts: ").append(toIndentedString(sellerCmts)).append("\n");
    sb.append("    standardF: ").append(toIndentedString(standardF)).append("\n");
    sb.append("    technicalF: ").append(toIndentedString(technicalF)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dealer_added_f");
    openapiFields.add("electronics_f");
    openapiFields.add("exterior_f");
    openapiFields.add("features");
    openapiFields.add("id");
    openapiFields.add("interior_f");
    openapiFields.add("options");
    openapiFields.add("safety_f");
    openapiFields.add("seller_cmts");
    openapiFields.add("standard_f");
    openapiFields.add("technical_f");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListingExtraAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListingExtraAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingExtraAttributes is not found in the empty JSON string", ListingExtraAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListingExtraAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingExtraAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dealer_added_f") != null && !jsonObj.get("dealer_added_f").isJsonNull() && !jsonObj.get("dealer_added_f").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealer_added_f` to be an array in the JSON string but got `%s`", jsonObj.get("dealer_added_f").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("electronics_f") != null && !jsonObj.get("electronics_f").isJsonNull() && !jsonObj.get("electronics_f").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `electronics_f` to be an array in the JSON string but got `%s`", jsonObj.get("electronics_f").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exterior_f") != null && !jsonObj.get("exterior_f").isJsonNull() && !jsonObj.get("exterior_f").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exterior_f` to be an array in the JSON string but got `%s`", jsonObj.get("exterior_f").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull() && !jsonObj.get("features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("interior_f") != null && !jsonObj.get("interior_f").isJsonNull() && !jsonObj.get("interior_f").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `interior_f` to be an array in the JSON string but got `%s`", jsonObj.get("interior_f").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull() && !jsonObj.get("options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("safety_f") != null && !jsonObj.get("safety_f").isJsonNull() && !jsonObj.get("safety_f").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `safety_f` to be an array in the JSON string but got `%s`", jsonObj.get("safety_f").toString()));
      }
      if ((jsonObj.get("seller_cmts") != null && !jsonObj.get("seller_cmts").isJsonNull()) && !jsonObj.get("seller_cmts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_cmts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_cmts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("standard_f") != null && !jsonObj.get("standard_f").isJsonNull() && !jsonObj.get("standard_f").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard_f` to be an array in the JSON string but got `%s`", jsonObj.get("standard_f").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("technical_f") != null && !jsonObj.get("technical_f").isJsonNull() && !jsonObj.get("technical_f").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `technical_f` to be an array in the JSON string but got `%s`", jsonObj.get("technical_f").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingExtraAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingExtraAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingExtraAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingExtraAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingExtraAttributes>() {
           @Override
           public void write(JsonWriter out, ListingExtraAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingExtraAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListingExtraAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListingExtraAttributes
   * @throws IOException if the JSON string is invalid with respect to ListingExtraAttributes
   */
  public static ListingExtraAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingExtraAttributes.class);
  }

  /**
   * Convert an instance of ListingExtraAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

