/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Economy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Economy {
  public static final String SERIALIZED_NAME_GHG_EMISSIONS_INDICATOR = "ghg_emissions_indicator";
  @SerializedName(SERIALIZED_NAME_GHG_EMISSIONS_INDICATOR)
  private String ghgEmissionsIndicator;

  public static final String SERIALIZED_NAME_GHG_EMISSIONS_RATING = "ghg_emissions_rating";
  @SerializedName(SERIALIZED_NAME_GHG_EMISSIONS_RATING)
  private BigDecimal ghgEmissionsRating;

  public static final String SERIALIZED_NAME_SMOG_INDICATOR = "smog_indicator";
  @SerializedName(SERIALIZED_NAME_SMOG_INDICATOR)
  private String smogIndicator;

  public static final String SERIALIZED_NAME_SMOG_RATING = "smog_rating";
  @SerializedName(SERIALIZED_NAME_SMOG_RATING)
  private BigDecimal smogRating;

  public Economy() {
  }

  public Economy ghgEmissionsIndicator(String ghgEmissionsIndicator) {
    this.ghgEmissionsIndicator = ghgEmissionsIndicator;
    return this;
  }

  /**
   * Contains text like bad|Good|Very Good| Excellent
   * @return ghgEmissionsIndicator
   */
  @javax.annotation.Nullable
  public String getGhgEmissionsIndicator() {
    return ghgEmissionsIndicator;
  }

  public void setGhgEmissionsIndicator(String ghgEmissionsIndicator) {
    this.ghgEmissionsIndicator = ghgEmissionsIndicator;
  }


  public Economy ghgEmissionsRating(BigDecimal ghgEmissionsRating) {
    this.ghgEmissionsRating = ghgEmissionsRating;
    return this;
  }

  /**
   * Show vehicle impact on climate change in terms of greeenhouse gases. This rating will be in the range of 1 - 10
   * @return ghgEmissionsRating
   */
  @javax.annotation.Nullable
  public BigDecimal getGhgEmissionsRating() {
    return ghgEmissionsRating;
  }

  public void setGhgEmissionsRating(BigDecimal ghgEmissionsRating) {
    this.ghgEmissionsRating = ghgEmissionsRating;
  }


  public Economy smogIndicator(String smogIndicator) {
    this.smogIndicator = smogIndicator;
    return this;
  }

  /**
   * Contains text like bad|Good|Very Good| Excellent
   * @return smogIndicator
   */
  @javax.annotation.Nullable
  public String getSmogIndicator() {
    return smogIndicator;
  }

  public void setSmogIndicator(String smogIndicator) {
    this.smogIndicator = smogIndicator;
  }


  public Economy smogRating(BigDecimal smogRating) {
    this.smogRating = smogRating;
    return this;
  }

  /**
   * Shows vehicle&#39;s emissions of pollutants known to cause smog and other forms of air pollution. This rating will be in the range of 1 - 10
   * @return smogRating
   */
  @javax.annotation.Nullable
  public BigDecimal getSmogRating() {
    return smogRating;
  }

  public void setSmogRating(BigDecimal smogRating) {
    this.smogRating = smogRating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Economy economy = (Economy) o;
    return Objects.equals(this.ghgEmissionsIndicator, economy.ghgEmissionsIndicator) &&
        Objects.equals(this.ghgEmissionsRating, economy.ghgEmissionsRating) &&
        Objects.equals(this.smogIndicator, economy.smogIndicator) &&
        Objects.equals(this.smogRating, economy.smogRating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ghgEmissionsIndicator, ghgEmissionsRating, smogIndicator, smogRating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Economy {\n");
    sb.append("    ghgEmissionsIndicator: ").append(toIndentedString(ghgEmissionsIndicator)).append("\n");
    sb.append("    ghgEmissionsRating: ").append(toIndentedString(ghgEmissionsRating)).append("\n");
    sb.append("    smogIndicator: ").append(toIndentedString(smogIndicator)).append("\n");
    sb.append("    smogRating: ").append(toIndentedString(smogRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ghg_emissions_indicator");
    openapiFields.add("ghg_emissions_rating");
    openapiFields.add("smog_indicator");
    openapiFields.add("smog_rating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Economy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Economy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Economy is not found in the empty JSON string", Economy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Economy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Economy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ghg_emissions_indicator") != null && !jsonObj.get("ghg_emissions_indicator").isJsonNull()) && !jsonObj.get("ghg_emissions_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ghg_emissions_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ghg_emissions_indicator").toString()));
      }
      if ((jsonObj.get("smog_indicator") != null && !jsonObj.get("smog_indicator").isJsonNull()) && !jsonObj.get("smog_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smog_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smog_indicator").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Economy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Economy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Economy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Economy.class));

       return (TypeAdapter<T>) new TypeAdapter<Economy>() {
           @Override
           public void write(JsonWriter out, Economy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Economy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Economy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Economy
   * @throws IOException if the JSON string is invalid with respect to Economy
   */
  public static Economy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Economy.class);
  }

  /**
   * Convert an instance of Economy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

