/*
 * Marketcheck APIs
 * One API serving data spanned across multiple verticals
 *
 * The version of the OpenAPI document: 2.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RangeFacetItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UKRVSearchRangeFacets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:38.120862-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UKRVSearchRangeFacets {
  public static final String SERIALIZED_NAME_EXTERIOR_LENGTH = "exterior_length";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_LENGTH)
  private List<RangeFacetItem> exteriorLength = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERIOR_LENGTH = "interior_length";
  @SerializedName(SERIALIZED_NAME_INTERIOR_LENGTH)
  private List<RangeFacetItem> interiorLength = new ArrayList<>();

  public static final String SERIALIZED_NAME_MILES = "miles";
  @SerializedName(SERIALIZED_NAME_MILES)
  private List<RangeFacetItem> miles = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private List<RangeFacetItem> price = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private List<RangeFacetItem> width = new ArrayList<>();

  public UKRVSearchRangeFacets() {
  }

  public UKRVSearchRangeFacets exteriorLength(List<RangeFacetItem> exteriorLength) {
    this.exteriorLength = exteriorLength;
    return this;
  }

  public UKRVSearchRangeFacets addExteriorLengthItem(RangeFacetItem exteriorLengthItem) {
    if (this.exteriorLength == null) {
      this.exteriorLength = new ArrayList<>();
    }
    this.exteriorLength.add(exteriorLengthItem);
    return this;
  }

  /**
   * Get exteriorLength
   * @return exteriorLength
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getExteriorLength() {
    return exteriorLength;
  }

  public void setExteriorLength(List<RangeFacetItem> exteriorLength) {
    this.exteriorLength = exteriorLength;
  }


  public UKRVSearchRangeFacets interiorLength(List<RangeFacetItem> interiorLength) {
    this.interiorLength = interiorLength;
    return this;
  }

  public UKRVSearchRangeFacets addInteriorLengthItem(RangeFacetItem interiorLengthItem) {
    if (this.interiorLength == null) {
      this.interiorLength = new ArrayList<>();
    }
    this.interiorLength.add(interiorLengthItem);
    return this;
  }

  /**
   * Get interiorLength
   * @return interiorLength
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getInteriorLength() {
    return interiorLength;
  }

  public void setInteriorLength(List<RangeFacetItem> interiorLength) {
    this.interiorLength = interiorLength;
  }


  public UKRVSearchRangeFacets miles(List<RangeFacetItem> miles) {
    this.miles = miles;
    return this;
  }

  public UKRVSearchRangeFacets addMilesItem(RangeFacetItem milesItem) {
    if (this.miles == null) {
      this.miles = new ArrayList<>();
    }
    this.miles.add(milesItem);
    return this;
  }

  /**
   * Get miles
   * @return miles
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getMiles() {
    return miles;
  }

  public void setMiles(List<RangeFacetItem> miles) {
    this.miles = miles;
  }


  public UKRVSearchRangeFacets price(List<RangeFacetItem> price) {
    this.price = price;
    return this;
  }

  public UKRVSearchRangeFacets addPriceItem(RangeFacetItem priceItem) {
    if (this.price == null) {
      this.price = new ArrayList<>();
    }
    this.price.add(priceItem);
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getPrice() {
    return price;
  }

  public void setPrice(List<RangeFacetItem> price) {
    this.price = price;
  }


  public UKRVSearchRangeFacets width(List<RangeFacetItem> width) {
    this.width = width;
    return this;
  }

  public UKRVSearchRangeFacets addWidthItem(RangeFacetItem widthItem) {
    if (this.width == null) {
      this.width = new ArrayList<>();
    }
    this.width.add(widthItem);
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public List<RangeFacetItem> getWidth() {
    return width;
  }

  public void setWidth(List<RangeFacetItem> width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UKRVSearchRangeFacets ukRVSearchRangeFacets = (UKRVSearchRangeFacets) o;
    return Objects.equals(this.exteriorLength, ukRVSearchRangeFacets.exteriorLength) &&
        Objects.equals(this.interiorLength, ukRVSearchRangeFacets.interiorLength) &&
        Objects.equals(this.miles, ukRVSearchRangeFacets.miles) &&
        Objects.equals(this.price, ukRVSearchRangeFacets.price) &&
        Objects.equals(this.width, ukRVSearchRangeFacets.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exteriorLength, interiorLength, miles, price, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UKRVSearchRangeFacets {\n");
    sb.append("    exteriorLength: ").append(toIndentedString(exteriorLength)).append("\n");
    sb.append("    interiorLength: ").append(toIndentedString(interiorLength)).append("\n");
    sb.append("    miles: ").append(toIndentedString(miles)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exterior_length");
    openapiFields.add("interior_length");
    openapiFields.add("miles");
    openapiFields.add("price");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UKRVSearchRangeFacets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UKRVSearchRangeFacets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UKRVSearchRangeFacets is not found in the empty JSON string", UKRVSearchRangeFacets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UKRVSearchRangeFacets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UKRVSearchRangeFacets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("exterior_length") != null && !jsonObj.get("exterior_length").isJsonNull()) {
        JsonArray jsonArrayexteriorLength = jsonObj.getAsJsonArray("exterior_length");
        if (jsonArrayexteriorLength != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exterior_length").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exterior_length` to be an array in the JSON string but got `%s`", jsonObj.get("exterior_length").toString()));
          }

          // validate the optional field `exterior_length` (array)
          for (int i = 0; i < jsonArrayexteriorLength.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayexteriorLength.get(i));
          };
        }
      }
      if (jsonObj.get("interior_length") != null && !jsonObj.get("interior_length").isJsonNull()) {
        JsonArray jsonArrayinteriorLength = jsonObj.getAsJsonArray("interior_length");
        if (jsonArrayinteriorLength != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interior_length").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interior_length` to be an array in the JSON string but got `%s`", jsonObj.get("interior_length").toString()));
          }

          // validate the optional field `interior_length` (array)
          for (int i = 0; i < jsonArrayinteriorLength.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayinteriorLength.get(i));
          };
        }
      }
      if (jsonObj.get("miles") != null && !jsonObj.get("miles").isJsonNull()) {
        JsonArray jsonArraymiles = jsonObj.getAsJsonArray("miles");
        if (jsonArraymiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("miles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `miles` to be an array in the JSON string but got `%s`", jsonObj.get("miles").toString()));
          }

          // validate the optional field `miles` (array)
          for (int i = 0; i < jsonArraymiles.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArraymiles.get(i));
          };
        }
      }
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        JsonArray jsonArrayprice = jsonObj.getAsJsonArray("price");
        if (jsonArrayprice != null) {
          // ensure the json data is an array
          if (!jsonObj.get("price").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `price` to be an array in the JSON string but got `%s`", jsonObj.get("price").toString()));
          }

          // validate the optional field `price` (array)
          for (int i = 0; i < jsonArrayprice.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArrayprice.get(i));
          };
        }
      }
      if (jsonObj.get("width") != null && !jsonObj.get("width").isJsonNull()) {
        JsonArray jsonArraywidth = jsonObj.getAsJsonArray("width");
        if (jsonArraywidth != null) {
          // ensure the json data is an array
          if (!jsonObj.get("width").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `width` to be an array in the JSON string but got `%s`", jsonObj.get("width").toString()));
          }

          // validate the optional field `width` (array)
          for (int i = 0; i < jsonArraywidth.size(); i++) {
            RangeFacetItem.validateJsonElement(jsonArraywidth.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UKRVSearchRangeFacets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UKRVSearchRangeFacets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UKRVSearchRangeFacets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UKRVSearchRangeFacets.class));

       return (TypeAdapter<T>) new TypeAdapter<UKRVSearchRangeFacets>() {
           @Override
           public void write(JsonWriter out, UKRVSearchRangeFacets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UKRVSearchRangeFacets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UKRVSearchRangeFacets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UKRVSearchRangeFacets
   * @throws IOException if the JSON string is invalid with respect to UKRVSearchRangeFacets
   */
  public static UKRVSearchRangeFacets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UKRVSearchRangeFacets.class);
  }

  /**
   * Convert an instance of UKRVSearchRangeFacets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

