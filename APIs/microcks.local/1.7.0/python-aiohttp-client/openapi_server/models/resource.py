# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_type import ResourceType
from openapi_server import util


class Resource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, id: str=None, name: str=None, path: str=None, service_id: str=None, source_artifact: str=None, type: ResourceType=None):
        """Resource - a model defined in OpenAPI

        :param content: The content of this Resource.
        :param id: The id of this Resource.
        :param name: The name of this Resource.
        :param path: The path of this Resource.
        :param service_id: The service_id of this Resource.
        :param source_artifact: The source_artifact of this Resource.
        :param type: The type of this Resource.
        """
        self.openapi_types = {
            'content': str,
            'id': str,
            'name': str,
            'path': str,
            'service_id': str,
            'source_artifact': str,
            'type': ResourceType
        }

        self.attribute_map = {
            'content': 'content',
            'id': 'id',
            'name': 'name',
            'path': 'path',
            'service_id': 'serviceId',
            'source_artifact': 'sourceArtifact',
            'type': 'type'
        }

        self._content = content
        self._id = id
        self._name = name
        self._path = path
        self._service_id = service_id
        self._source_artifact = source_artifact
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Resource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Resource of this Resource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Resource.

        String content of this resource

        :return: The content of this Resource.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Resource.

        String content of this resource

        :param content: The content of this Resource.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def id(self):
        """Gets the id of this Resource.

        Uniquer identifier of this Service or API Resource

        :return: The id of this Resource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Resource.

        Uniquer identifier of this Service or API Resource

        :param id: The id of this Resource.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Resource.

        Unique name/business identifier for this Service or API resource

        :return: The name of this Resource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Resource.

        Unique name/business identifier for this Service or API resource

        :param name: The name of this Resource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this Resource.

        Relatvie path of this resource regarding main resource

        :return: The path of this Resource.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Resource.

        Relatvie path of this resource regarding main resource

        :param path: The path of this Resource.
        :type path: str
        """

        self._path = path

    @property
    def service_id(self):
        """Gets the service_id of this Resource.

        Unique identifier of the Servoce or API this resource is attached to

        :return: The service_id of this Resource.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Resource.

        Unique identifier of the Servoce or API this resource is attached to

        :param service_id: The service_id of this Resource.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def source_artifact(self):
        """Gets the source_artifact of this Resource.

        Short name of the artifact this resource was extracted from

        :return: The source_artifact of this Resource.
        :rtype: str
        """
        return self._source_artifact

    @source_artifact.setter
    def source_artifact(self, source_artifact):
        """Sets the source_artifact of this Resource.

        Short name of the artifact this resource was extracted from

        :param source_artifact: The source_artifact of this Resource.
        :type source_artifact: str
        """

        self._source_artifact = source_artifact

    @property
    def type(self):
        """Gets the type of this Resource.


        :return: The type of this Resource.
        :rtype: ResourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Resource.


        :param type: The type of this Resource.
        :type type: ResourceType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
