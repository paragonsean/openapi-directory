# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeaturesConfigAsyncApi(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_binding: str=None, enabled: str=None, endpoint_amqp: str=None, endpoint_googlepubsub: str=None, endpoint_kafka: str=None, endpoint_mqtt: str=None, endpoint_nats: str=None, endpoint_ws: str=None, frequencies: str=None):
        """FeaturesConfigAsyncApi - a model defined in OpenAPI

        :param default_binding: The default_binding of this FeaturesConfigAsyncApi.
        :param enabled: The enabled of this FeaturesConfigAsyncApi.
        :param endpoint_amqp: The endpoint_amqp of this FeaturesConfigAsyncApi.
        :param endpoint_googlepubsub: The endpoint_googlepubsub of this FeaturesConfigAsyncApi.
        :param endpoint_kafka: The endpoint_kafka of this FeaturesConfigAsyncApi.
        :param endpoint_mqtt: The endpoint_mqtt of this FeaturesConfigAsyncApi.
        :param endpoint_nats: The endpoint_nats of this FeaturesConfigAsyncApi.
        :param endpoint_ws: The endpoint_ws of this FeaturesConfigAsyncApi.
        :param frequencies: The frequencies of this FeaturesConfigAsyncApi.
        """
        self.openapi_types = {
            'default_binding': str,
            'enabled': str,
            'endpoint_amqp': str,
            'endpoint_googlepubsub': str,
            'endpoint_kafka': str,
            'endpoint_mqtt': str,
            'endpoint_nats': str,
            'endpoint_ws': str,
            'frequencies': str
        }

        self.attribute_map = {
            'default_binding': 'default-binding',
            'enabled': 'enabled',
            'endpoint_amqp': 'endpoint-AMQP',
            'endpoint_googlepubsub': 'endpoint-GOOGLEPUBSUB',
            'endpoint_kafka': 'endpoint-KAFKA',
            'endpoint_mqtt': 'endpoint-MQTT',
            'endpoint_nats': 'endpoint-NATS',
            'endpoint_ws': 'endpoint-WS',
            'frequencies': 'frequencies'
        }

        self._default_binding = default_binding
        self._enabled = enabled
        self._endpoint_amqp = endpoint_amqp
        self._endpoint_googlepubsub = endpoint_googlepubsub
        self._endpoint_kafka = endpoint_kafka
        self._endpoint_mqtt = endpoint_mqtt
        self._endpoint_nats = endpoint_nats
        self._endpoint_ws = endpoint_ws
        self._frequencies = frequencies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeaturesConfigAsyncApi':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeaturesConfig_async_api of this FeaturesConfigAsyncApi.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_binding(self):
        """Gets the default_binding of this FeaturesConfigAsyncApi.


        :return: The default_binding of this FeaturesConfigAsyncApi.
        :rtype: str
        """
        return self._default_binding

    @default_binding.setter
    def default_binding(self, default_binding):
        """Sets the default_binding of this FeaturesConfigAsyncApi.


        :param default_binding: The default_binding of this FeaturesConfigAsyncApi.
        :type default_binding: str
        """

        self._default_binding = default_binding

    @property
    def enabled(self):
        """Gets the enabled of this FeaturesConfigAsyncApi.


        :return: The enabled of this FeaturesConfigAsyncApi.
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this FeaturesConfigAsyncApi.


        :param enabled: The enabled of this FeaturesConfigAsyncApi.
        :type enabled: str
        """

        self._enabled = enabled

    @property
    def endpoint_amqp(self):
        """Gets the endpoint_amqp of this FeaturesConfigAsyncApi.


        :return: The endpoint_amqp of this FeaturesConfigAsyncApi.
        :rtype: str
        """
        return self._endpoint_amqp

    @endpoint_amqp.setter
    def endpoint_amqp(self, endpoint_amqp):
        """Sets the endpoint_amqp of this FeaturesConfigAsyncApi.


        :param endpoint_amqp: The endpoint_amqp of this FeaturesConfigAsyncApi.
        :type endpoint_amqp: str
        """

        self._endpoint_amqp = endpoint_amqp

    @property
    def endpoint_googlepubsub(self):
        """Gets the endpoint_googlepubsub of this FeaturesConfigAsyncApi.


        :return: The endpoint_googlepubsub of this FeaturesConfigAsyncApi.
        :rtype: str
        """
        return self._endpoint_googlepubsub

    @endpoint_googlepubsub.setter
    def endpoint_googlepubsub(self, endpoint_googlepubsub):
        """Sets the endpoint_googlepubsub of this FeaturesConfigAsyncApi.


        :param endpoint_googlepubsub: The endpoint_googlepubsub of this FeaturesConfigAsyncApi.
        :type endpoint_googlepubsub: str
        """

        self._endpoint_googlepubsub = endpoint_googlepubsub

    @property
    def endpoint_kafka(self):
        """Gets the endpoint_kafka of this FeaturesConfigAsyncApi.


        :return: The endpoint_kafka of this FeaturesConfigAsyncApi.
        :rtype: str
        """
        return self._endpoint_kafka

    @endpoint_kafka.setter
    def endpoint_kafka(self, endpoint_kafka):
        """Sets the endpoint_kafka of this FeaturesConfigAsyncApi.


        :param endpoint_kafka: The endpoint_kafka of this FeaturesConfigAsyncApi.
        :type endpoint_kafka: str
        """

        self._endpoint_kafka = endpoint_kafka

    @property
    def endpoint_mqtt(self):
        """Gets the endpoint_mqtt of this FeaturesConfigAsyncApi.


        :return: The endpoint_mqtt of this FeaturesConfigAsyncApi.
        :rtype: str
        """
        return self._endpoint_mqtt

    @endpoint_mqtt.setter
    def endpoint_mqtt(self, endpoint_mqtt):
        """Sets the endpoint_mqtt of this FeaturesConfigAsyncApi.


        :param endpoint_mqtt: The endpoint_mqtt of this FeaturesConfigAsyncApi.
        :type endpoint_mqtt: str
        """

        self._endpoint_mqtt = endpoint_mqtt

    @property
    def endpoint_nats(self):
        """Gets the endpoint_nats of this FeaturesConfigAsyncApi.


        :return: The endpoint_nats of this FeaturesConfigAsyncApi.
        :rtype: str
        """
        return self._endpoint_nats

    @endpoint_nats.setter
    def endpoint_nats(self, endpoint_nats):
        """Sets the endpoint_nats of this FeaturesConfigAsyncApi.


        :param endpoint_nats: The endpoint_nats of this FeaturesConfigAsyncApi.
        :type endpoint_nats: str
        """

        self._endpoint_nats = endpoint_nats

    @property
    def endpoint_ws(self):
        """Gets the endpoint_ws of this FeaturesConfigAsyncApi.


        :return: The endpoint_ws of this FeaturesConfigAsyncApi.
        :rtype: str
        """
        return self._endpoint_ws

    @endpoint_ws.setter
    def endpoint_ws(self, endpoint_ws):
        """Sets the endpoint_ws of this FeaturesConfigAsyncApi.


        :param endpoint_ws: The endpoint_ws of this FeaturesConfigAsyncApi.
        :type endpoint_ws: str
        """

        self._endpoint_ws = endpoint_ws

    @property
    def frequencies(self):
        """Gets the frequencies of this FeaturesConfigAsyncApi.


        :return: The frequencies of this FeaturesConfigAsyncApi.
        :rtype: str
        """
        return self._frequencies

    @frequencies.setter
    def frequencies(self, frequencies):
        """Sets the frequencies of this FeaturesConfigAsyncApi.


        :param frequencies: The frequencies of this FeaturesConfigAsyncApi.
        :type frequencies: str
        """

        self._frequencies = frequencies
