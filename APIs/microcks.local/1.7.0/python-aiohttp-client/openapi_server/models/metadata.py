# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Metadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, created_on: int=None, labels: Dict[str, str]=None, last_update: int=None):
        """Metadata - a model defined in OpenAPI

        :param annotations: The annotations of this Metadata.
        :param created_on: The created_on of this Metadata.
        :param labels: The labels of this Metadata.
        :param last_update: The last_update of this Metadata.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'created_on': int,
            'labels': Dict[str, str],
            'last_update': int
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'created_on': 'createdOn',
            'labels': 'labels',
            'last_update': 'lastUpdate'
        }

        self._annotations = annotations
        self._created_on = created_on
        self._labels = labels
        self._last_update = last_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metadata of this Metadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Metadata.

        Annotations of attached object

        :return: The annotations of this Metadata.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Metadata.

        Annotations of attached object

        :param annotations: The annotations of this Metadata.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def created_on(self):
        """Gets the created_on of this Metadata.

        Creation date of attached object

        :return: The created_on of this Metadata.
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Metadata.

        Creation date of attached object

        :param created_on: The created_on of this Metadata.
        :type created_on: int
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")

        self._created_on = created_on

    @property
    def labels(self):
        """Gets the labels of this Metadata.

        Labels put on attached object

        :return: The labels of this Metadata.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Metadata.

        Labels put on attached object

        :param labels: The labels of this Metadata.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def last_update(self):
        """Gets the last_update of this Metadata.

        Last update of attached object

        :return: The last_update of this Metadata.
        :rtype: int
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Metadata.

        Last update of attached object

        :param last_update: The last_update of this Metadata.
        :type last_update: int
        """
        if last_update is None:
            raise ValueError("Invalid value for `last_update`, must not be `None`")

        self._last_update = last_update
