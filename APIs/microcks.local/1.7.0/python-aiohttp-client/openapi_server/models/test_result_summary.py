# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestResultSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, service_id: str=None, success: bool=None, test_date: int=None):
        """TestResultSummary - a model defined in OpenAPI

        :param id: The id of this TestResultSummary.
        :param service_id: The service_id of this TestResultSummary.
        :param success: The success of this TestResultSummary.
        :param test_date: The test_date of this TestResultSummary.
        """
        self.openapi_types = {
            'id': str,
            'service_id': str,
            'success': bool,
            'test_date': int
        }

        self.attribute_map = {
            'id': 'id',
            'service_id': 'serviceId',
            'success': 'success',
            'test_date': 'testDate'
        }

        self._id = id
        self._service_id = service_id
        self._success = success
        self._test_date = test_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestResultSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestResultSummary of this TestResultSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TestResultSummary.

        Unique identifier of TestResult

        :return: The id of this TestResultSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestResultSummary.

        Unique identifier of TestResult

        :param id: The id of this TestResultSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def service_id(self):
        """Gets the service_id of this TestResultSummary.

        Unique identifier of service tested

        :return: The service_id of this TestResultSummary.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this TestResultSummary.

        Unique identifier of service tested

        :param service_id: The service_id of this TestResultSummary.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def success(self):
        """Gets the success of this TestResultSummary.

        Flag telling if test is a success

        :return: The success of this TestResultSummary.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this TestResultSummary.

        Flag telling if test is a success

        :param success: The success of this TestResultSummary.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success

    @property
    def test_date(self):
        """Gets the test_date of this TestResultSummary.

        Timestamp of creation date of this service

        :return: The test_date of this TestResultSummary.
        :rtype: int
        """
        return self._test_date

    @test_date.setter
    def test_date(self, test_date):
        """Sets the test_date of this TestResultSummary.

        Timestamp of creation date of this service

        :param test_date: The test_date of this TestResultSummary.
        :type test_date: int
        """
        if test_date is None:
            raise ValueError("Invalid value for `test_date`, must not be `None`")

        self._test_date = test_date
