# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WeightedMetricValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, value: int=None, weight: int=None):
        """WeightedMetricValue - a model defined in OpenAPI

        :param name: The name of this WeightedMetricValue.
        :param value: The value of this WeightedMetricValue.
        :param weight: The weight of this WeightedMetricValue.
        """
        self.openapi_types = {
            'name': str,
            'value': int,
            'weight': int
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value',
            'weight': 'weight'
        }

        self._name = name
        self._value = value
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeightedMetricValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WeightedMetricValue of this WeightedMetricValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this WeightedMetricValue.

        Metric name or serie name

        :return: The name of this WeightedMetricValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WeightedMetricValue.

        Metric name or serie name

        :param name: The name of this WeightedMetricValue.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """Gets the value of this WeightedMetricValue.

        The value of this metric

        :return: The value of this WeightedMetricValue.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this WeightedMetricValue.

        The value of this metric

        :param value: The value of this WeightedMetricValue.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def weight(self):
        """Gets the weight of this WeightedMetricValue.

        Weight of this metric value (typically a percentage)

        :return: The weight of this WeightedMetricValue.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this WeightedMetricValue.

        Weight of this metric value (typically a percentage)

        :param weight: The weight of this WeightedMetricValue.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight
