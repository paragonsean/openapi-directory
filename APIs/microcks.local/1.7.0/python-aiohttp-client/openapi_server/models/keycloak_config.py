# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeycloakConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_server_url: str=None, enabled: bool=None, public_client: str=None, realm: str=None, resource: str=None, ssl_required: str=None):
        """KeycloakConfig - a model defined in OpenAPI

        :param auth_server_url: The auth_server_url of this KeycloakConfig.
        :param enabled: The enabled of this KeycloakConfig.
        :param public_client: The public_client of this KeycloakConfig.
        :param realm: The realm of this KeycloakConfig.
        :param resource: The resource of this KeycloakConfig.
        :param ssl_required: The ssl_required of this KeycloakConfig.
        """
        self.openapi_types = {
            'auth_server_url': str,
            'enabled': bool,
            'public_client': str,
            'realm': str,
            'resource': str,
            'ssl_required': str
        }

        self.attribute_map = {
            'auth_server_url': 'auth-server-url',
            'enabled': 'enabled',
            'public_client': 'public-client',
            'realm': 'realm',
            'resource': 'resource',
            'ssl_required': 'ssl-required'
        }

        self._auth_server_url = auth_server_url
        self._enabled = enabled
        self._public_client = public_client
        self._realm = realm
        self._resource = resource
        self._ssl_required = ssl_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeycloakConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeycloakConfig of this KeycloakConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_server_url(self):
        """Gets the auth_server_url of this KeycloakConfig.

        SSO Server authentication url

        :return: The auth_server_url of this KeycloakConfig.
        :rtype: str
        """
        return self._auth_server_url

    @auth_server_url.setter
    def auth_server_url(self, auth_server_url):
        """Sets the auth_server_url of this KeycloakConfig.

        SSO Server authentication url

        :param auth_server_url: The auth_server_url of this KeycloakConfig.
        :type auth_server_url: str
        """
        if auth_server_url is None:
            raise ValueError("Invalid value for `auth_server_url`, must not be `None`")

        self._auth_server_url = auth_server_url

    @property
    def enabled(self):
        """Gets the enabled of this KeycloakConfig.

        Whether Keycloak authentification and usage is enabled

        :return: The enabled of this KeycloakConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this KeycloakConfig.

        Whether Keycloak authentification and usage is enabled

        :param enabled: The enabled of this KeycloakConfig.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def public_client(self):
        """Gets the public_client of this KeycloakConfig.

        Name of public-client that can be used for requesting OAuth token

        :return: The public_client of this KeycloakConfig.
        :rtype: str
        """
        return self._public_client

    @public_client.setter
    def public_client(self, public_client):
        """Sets the public_client of this KeycloakConfig.

        Name of public-client that can be used for requesting OAuth token

        :param public_client: The public_client of this KeycloakConfig.
        :type public_client: str
        """
        if public_client is None:
            raise ValueError("Invalid value for `public_client`, must not be `None`")

        self._public_client = public_client

    @property
    def realm(self):
        """Gets the realm of this KeycloakConfig.

        Authentication realm name

        :return: The realm of this KeycloakConfig.
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this KeycloakConfig.

        Authentication realm name

        :param realm: The realm of this KeycloakConfig.
        :type realm: str
        """
        if realm is None:
            raise ValueError("Invalid value for `realm`, must not be `None`")

        self._realm = realm

    @property
    def resource(self):
        """Gets the resource of this KeycloakConfig.

        Name of Keycloak resource/application used on client side

        :return: The resource of this KeycloakConfig.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this KeycloakConfig.

        Name of Keycloak resource/application used on client side

        :param resource: The resource of this KeycloakConfig.
        :type resource: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def ssl_required(self):
        """Gets the ssl_required of this KeycloakConfig.

        SSL certificates requirements

        :return: The ssl_required of this KeycloakConfig.
        :rtype: str
        """
        return self._ssl_required

    @ssl_required.setter
    def ssl_required(self, ssl_required):
        """Sets the ssl_required of this KeycloakConfig.

        SSL certificates requirements

        :param ssl_required: The ssl_required of this KeycloakConfig.
        :type ssl_required: str
        """
        allowed_values = ["none", "external"]  # noqa: E501
        if ssl_required not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_required` ({0}), must be one of {1}"
                .format(ssl_required, allowed_values)
            )

        self._ssl_required = ssl_required
