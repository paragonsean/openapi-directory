# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.binding import Binding
from openapi_server.models.parameter_constraint import ParameterConstraint
from openapi_server import util


class Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bindings: Dict[str, Binding]=None, default_delay: float=None, dispatcher: str=None, dispatcher_rules: str=None, input_name: str=None, method: str=None, name: str=None, output_name: str=None, parameter_contraints: List[ParameterConstraint]=None, resource_paths: List[str]=None):
        """Operation - a model defined in OpenAPI

        :param bindings: The bindings of this Operation.
        :param default_delay: The default_delay of this Operation.
        :param dispatcher: The dispatcher of this Operation.
        :param dispatcher_rules: The dispatcher_rules of this Operation.
        :param input_name: The input_name of this Operation.
        :param method: The method of this Operation.
        :param name: The name of this Operation.
        :param output_name: The output_name of this Operation.
        :param parameter_contraints: The parameter_contraints of this Operation.
        :param resource_paths: The resource_paths of this Operation.
        """
        self.openapi_types = {
            'bindings': Dict[str, Binding],
            'default_delay': float,
            'dispatcher': str,
            'dispatcher_rules': str,
            'input_name': str,
            'method': str,
            'name': str,
            'output_name': str,
            'parameter_contraints': List[ParameterConstraint],
            'resource_paths': List[str]
        }

        self.attribute_map = {
            'bindings': 'bindings',
            'default_delay': 'defaultDelay',
            'dispatcher': 'dispatcher',
            'dispatcher_rules': 'dispatcherRules',
            'input_name': 'inputName',
            'method': 'method',
            'name': 'name',
            'output_name': 'outputName',
            'parameter_contraints': 'parameterContraints',
            'resource_paths': 'resourcePaths'
        }

        self._bindings = bindings
        self._default_delay = default_delay
        self._dispatcher = dispatcher
        self._dispatcher_rules = dispatcher_rules
        self._input_name = input_name
        self._method = method
        self._name = name
        self._output_name = output_name
        self._parameter_contraints = parameter_contraints
        self._resource_paths = resource_paths

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Operation of this Operation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bindings(self):
        """Gets the bindings of this Operation.

        Map of protocol binding details for this operation

        :return: The bindings of this Operation.
        :rtype: Dict[str, Binding]
        """
        return self._bindings

    @bindings.setter
    def bindings(self, bindings):
        """Sets the bindings of this Operation.

        Map of protocol binding details for this operation

        :param bindings: The bindings of this Operation.
        :type bindings: Dict[str, Binding]
        """

        self._bindings = bindings

    @property
    def default_delay(self):
        """Gets the default_delay of this Operation.

        Default response time delay for mocks

        :return: The default_delay of this Operation.
        :rtype: float
        """
        return self._default_delay

    @default_delay.setter
    def default_delay(self, default_delay):
        """Sets the default_delay of this Operation.

        Default response time delay for mocks

        :param default_delay: The default_delay of this Operation.
        :type default_delay: float
        """

        self._default_delay = default_delay

    @property
    def dispatcher(self):
        """Gets the dispatcher of this Operation.

        Dispatcher strategy used for mocks

        :return: The dispatcher of this Operation.
        :rtype: str
        """
        return self._dispatcher

    @dispatcher.setter
    def dispatcher(self, dispatcher):
        """Sets the dispatcher of this Operation.

        Dispatcher strategy used for mocks

        :param dispatcher: The dispatcher of this Operation.
        :type dispatcher: str
        """

        self._dispatcher = dispatcher

    @property
    def dispatcher_rules(self):
        """Gets the dispatcher_rules of this Operation.

        DispatcherRules used for mocks

        :return: The dispatcher_rules of this Operation.
        :rtype: str
        """
        return self._dispatcher_rules

    @dispatcher_rules.setter
    def dispatcher_rules(self, dispatcher_rules):
        """Sets the dispatcher_rules of this Operation.

        DispatcherRules used for mocks

        :param dispatcher_rules: The dispatcher_rules of this Operation.
        :type dispatcher_rules: str
        """

        self._dispatcher_rules = dispatcher_rules

    @property
    def input_name(self):
        """Gets the input_name of this Operation.

        Name of input parameters in case of Xml based Service

        :return: The input_name of this Operation.
        :rtype: str
        """
        return self._input_name

    @input_name.setter
    def input_name(self, input_name):
        """Sets the input_name of this Operation.

        Name of input parameters in case of Xml based Service

        :param input_name: The input_name of this Operation.
        :type input_name: str
        """

        self._input_name = input_name

    @property
    def method(self):
        """Gets the method of this Operation.

        Represents transport method

        :return: The method of this Operation.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Operation.

        Represents transport method

        :param method: The method of this Operation.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def name(self):
        """Gets the name of this Operation.

        Unique name of this Operation within Service scope

        :return: The name of this Operation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Operation.

        Unique name of this Operation within Service scope

        :param name: The name of this Operation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def output_name(self):
        """Gets the output_name of this Operation.

        Name of output parameters in case of Xml based Service

        :return: The output_name of this Operation.
        :rtype: str
        """
        return self._output_name

    @output_name.setter
    def output_name(self, output_name):
        """Sets the output_name of this Operation.

        Name of output parameters in case of Xml based Service

        :param output_name: The output_name of this Operation.
        :type output_name: str
        """

        self._output_name = output_name

    @property
    def parameter_contraints(self):
        """Gets the parameter_contraints of this Operation.

        Contraints that may apply to mock invocatino on this operation

        :return: The parameter_contraints of this Operation.
        :rtype: List[ParameterConstraint]
        """
        return self._parameter_contraints

    @parameter_contraints.setter
    def parameter_contraints(self, parameter_contraints):
        """Sets the parameter_contraints of this Operation.

        Contraints that may apply to mock invocatino on this operation

        :param parameter_contraints: The parameter_contraints of this Operation.
        :type parameter_contraints: List[ParameterConstraint]
        """

        self._parameter_contraints = parameter_contraints

    @property
    def resource_paths(self):
        """Gets the resource_paths of this Operation.

        Paths the mocks endpoints are mapped on

        :return: The resource_paths of this Operation.
        :rtype: List[str]
        """
        return self._resource_paths

    @resource_paths.setter
    def resource_paths(self, resource_paths):
        """Sets the resource_paths of this Operation.

        Paths the mocks endpoints are mapped on

        :param resource_paths: The resource_paths of this Operation.
        :type resource_paths: List[str]
        """

        self._resource_paths = resource_paths
