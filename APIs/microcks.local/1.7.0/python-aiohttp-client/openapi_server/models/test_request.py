# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.header_dto import HeaderDTO
from openapi_server.models.test_runner_type import TestRunnerType
from openapi_server import util


class TestRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filtered_operations: List[str]=None, operation_headers: Dict[str, List[HeaderDTO]]=None, runner_type: TestRunnerType=None, secret_name: str=None, service_id: str=None, test_endpoint: str=None, timeout: int=None):
        """TestRequest - a model defined in OpenAPI

        :param filtered_operations: The filtered_operations of this TestRequest.
        :param operation_headers: The operation_headers of this TestRequest.
        :param runner_type: The runner_type of this TestRequest.
        :param secret_name: The secret_name of this TestRequest.
        :param service_id: The service_id of this TestRequest.
        :param test_endpoint: The test_endpoint of this TestRequest.
        :param timeout: The timeout of this TestRequest.
        """
        self.openapi_types = {
            'filtered_operations': List[str],
            'operation_headers': Dict[str, List[HeaderDTO]],
            'runner_type': TestRunnerType,
            'secret_name': str,
            'service_id': str,
            'test_endpoint': str,
            'timeout': int
        }

        self.attribute_map = {
            'filtered_operations': 'filteredOperations',
            'operation_headers': 'operationHeaders',
            'runner_type': 'runnerType',
            'secret_name': 'secretName',
            'service_id': 'serviceId',
            'test_endpoint': 'testEndpoint',
            'timeout': 'timeout'
        }

        self._filtered_operations = filtered_operations
        self._operation_headers = operation_headers
        self._runner_type = runner_type
        self._secret_name = secret_name
        self._service_id = service_id
        self._test_endpoint = test_endpoint
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestRequest of this TestRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filtered_operations(self):
        """Gets the filtered_operations of this TestRequest.

        A restriction on service operations to test

        :return: The filtered_operations of this TestRequest.
        :rtype: List[str]
        """
        return self._filtered_operations

    @filtered_operations.setter
    def filtered_operations(self, filtered_operations):
        """Sets the filtered_operations of this TestRequest.

        A restriction on service operations to test

        :param filtered_operations: The filtered_operations of this TestRequest.
        :type filtered_operations: List[str]
        """

        self._filtered_operations = filtered_operations

    @property
    def operation_headers(self):
        """Gets the operation_headers of this TestRequest.

        Specification of additional headers for a Service/API operations. Keys are operation name or \"globals\" (if header applies to all), values are Header objects DTO.

        :return: The operation_headers of this TestRequest.
        :rtype: Dict[str, List[HeaderDTO]]
        """
        return self._operation_headers

    @operation_headers.setter
    def operation_headers(self, operation_headers):
        """Sets the operation_headers of this TestRequest.

        Specification of additional headers for a Service/API operations. Keys are operation name or \"globals\" (if header applies to all), values are Header objects DTO.

        :param operation_headers: The operation_headers of this TestRequest.
        :type operation_headers: Dict[str, List[HeaderDTO]]
        """

        self._operation_headers = operation_headers

    @property
    def runner_type(self):
        """Gets the runner_type of this TestRequest.


        :return: The runner_type of this TestRequest.
        :rtype: TestRunnerType
        """
        return self._runner_type

    @runner_type.setter
    def runner_type(self, runner_type):
        """Sets the runner_type of this TestRequest.


        :param runner_type: The runner_type of this TestRequest.
        :type runner_type: TestRunnerType
        """
        if runner_type is None:
            raise ValueError("Invalid value for `runner_type`, must not be `None`")

        self._runner_type = runner_type

    @property
    def secret_name(self):
        """Gets the secret_name of this TestRequest.

        The name of Secret to use for connecting the test endpoint

        :return: The secret_name of this TestRequest.
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this TestRequest.

        The name of Secret to use for connecting the test endpoint

        :param secret_name: The secret_name of this TestRequest.
        :type secret_name: str
        """

        self._secret_name = secret_name

    @property
    def service_id(self):
        """Gets the service_id of this TestRequest.

        Unique identifier of service to test

        :return: The service_id of this TestRequest.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this TestRequest.

        Unique identifier of service to test

        :param service_id: The service_id of this TestRequest.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def test_endpoint(self):
        """Gets the test_endpoint of this TestRequest.

        Endpoint to test for this service

        :return: The test_endpoint of this TestRequest.
        :rtype: str
        """
        return self._test_endpoint

    @test_endpoint.setter
    def test_endpoint(self, test_endpoint):
        """Sets the test_endpoint of this TestRequest.

        Endpoint to test for this service

        :param test_endpoint: The test_endpoint of this TestRequest.
        :type test_endpoint: str
        """
        if test_endpoint is None:
            raise ValueError("Invalid value for `test_endpoint`, must not be `None`")

        self._test_endpoint = test_endpoint

    @property
    def timeout(self):
        """Gets the timeout of this TestRequest.

        The maximum time (in milliseconds) to wait for this test ends

        :return: The timeout of this TestRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this TestRequest.

        The maximum time (in milliseconds) to wait for this test ends

        :param timeout: The timeout of this TestRequest.
        :type timeout: int
        """
        if timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")

        self._timeout = timeout
