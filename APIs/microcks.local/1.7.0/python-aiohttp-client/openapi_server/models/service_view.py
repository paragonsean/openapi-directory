# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exchange import Exchange
from openapi_server.models.service import Service
from openapi_server import util


class ServiceView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, messages_map: Dict[str, List[Exchange]]=None, service: Service=None):
        """ServiceView - a model defined in OpenAPI

        :param messages_map: The messages_map of this ServiceView.
        :param service: The service of this ServiceView.
        """
        self.openapi_types = {
            'messages_map': Dict[str, List[Exchange]],
            'service': Service
        }

        self.attribute_map = {
            'messages_map': 'messagesMap',
            'service': 'service'
        }

        self._messages_map = messages_map
        self._service = service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceView of this ServiceView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def messages_map(self):
        """Gets the messages_map of this ServiceView.

        Map of messages for this Service. Keys are operation name, values are array of messages for this operation

        :return: The messages_map of this ServiceView.
        :rtype: Dict[str, List[Exchange]]
        """
        return self._messages_map

    @messages_map.setter
    def messages_map(self, messages_map):
        """Sets the messages_map of this ServiceView.

        Map of messages for this Service. Keys are operation name, values are array of messages for this operation

        :param messages_map: The messages_map of this ServiceView.
        :type messages_map: Dict[str, List[Exchange]]
        """
        if messages_map is None:
            raise ValueError("Invalid value for `messages_map`, must not be `None`")

        self._messages_map = messages_map

    @property
    def service(self):
        """Gets the service of this ServiceView.


        :return: The service of this ServiceView.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ServiceView.


        :param service: The service of this ServiceView.
        :type service: Service
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service
