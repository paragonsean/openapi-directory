# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata import Metadata
from openapi_server.models.operation import Operation
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, metadata: Metadata=None, name: str=None, operations: List[Operation]=None, type: str=None, version: str=None, xml_ns: str=None):
        """Service - a model defined in OpenAPI

        :param id: The id of this Service.
        :param metadata: The metadata of this Service.
        :param name: The name of this Service.
        :param operations: The operations of this Service.
        :param type: The type of this Service.
        :param version: The version of this Service.
        :param xml_ns: The xml_ns of this Service.
        """
        self.openapi_types = {
            'id': str,
            'metadata': Metadata,
            'name': str,
            'operations': List[Operation],
            'type': str,
            'version': str,
            'xml_ns': str
        }

        self.attribute_map = {
            'id': 'id',
            'metadata': 'metadata',
            'name': 'name',
            'operations': 'operations',
            'type': 'type',
            'version': 'version',
            'xml_ns': 'xmlNS'
        }

        self._id = id
        self._metadata = metadata
        self._name = name
        self._operations = operations
        self._type = type
        self._version = version
        self._xml_ns = xml_ns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Service.

        Unique identifier for this Service or API

        :return: The id of this Service.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.

        Unique identifier for this Service or API

        :param id: The id of this Service.
        :type id: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this Service.


        :return: The metadata of this Service.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Service.


        :param metadata: The metadata of this Service.
        :type metadata: Metadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Service.

        Distinct name for this Service or API (maybe shared among many versions)

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        Distinct name for this Service or API (maybe shared among many versions)

        :param name: The name of this Service.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def operations(self):
        """Gets the operations of this Service.

        Set of Operations for Service or API

        :return: The operations of this Service.
        :rtype: List[Operation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Service.

        Set of Operations for Service or API

        :param operations: The operations of this Service.
        :type operations: List[Operation]
        """

        self._operations = operations

    @property
    def type(self):
        """Gets the type of this Service.

        Service or API Type

        :return: The type of this Service.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Service.

        Service or API Type

        :param type: The type of this Service.
        :type type: str
        """
        allowed_values = ["REST", "SOAP_HTTP", "GENERIC_REST", "GENERIC_EVENT", "EVENT", "GRPC", "GRAPHQL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this Service.

        Distinct version for a named Service or API

        :return: The version of this Service.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Service.

        Distinct version for a named Service or API

        :param version: The version of this Service.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def xml_ns(self):
        """Gets the xml_ns of this Service.

        Associated Xml Namespace in case of Xml based Service

        :return: The xml_ns of this Service.
        :rtype: str
        """
        return self._xml_ns

    @xml_ns.setter
    def xml_ns(self, xml_ns):
        """Sets the xml_ns of this Service.

        Associated Xml Namespace in case of Xml based Service

        :param xml_ns: The xml_ns of this Service.
        :type xml_ns: str
        """

        self._xml_ns = xml_ns
