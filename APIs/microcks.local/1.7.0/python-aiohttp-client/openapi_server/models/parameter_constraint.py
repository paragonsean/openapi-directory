# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParameterConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _in: str=None, must_match_regexp: str=None, name: str=None, recopy: bool=None, required: bool=None):
        """ParameterConstraint - a model defined in OpenAPI

        :param _in: The _in of this ParameterConstraint.
        :param must_match_regexp: The must_match_regexp of this ParameterConstraint.
        :param name: The name of this ParameterConstraint.
        :param recopy: The recopy of this ParameterConstraint.
        :param required: The required of this ParameterConstraint.
        """
        self.openapi_types = {
            '_in': str,
            'must_match_regexp': str,
            'name': str,
            'recopy': bool,
            'required': bool
        }

        self.attribute_map = {
            '_in': 'in',
            'must_match_regexp': 'mustMatchRegexp',
            'name': 'name',
            'recopy': 'recopy',
            'required': 'required'
        }

        self.__in = _in
        self._must_match_regexp = must_match_regexp
        self._name = name
        self._recopy = recopy
        self._required = required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParameterConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParameterConstraint of this ParameterConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _in(self):
        """Gets the _in of this ParameterConstraint.

        Parameter location

        :return: The _in of this ParameterConstraint.
        :rtype: str
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this ParameterConstraint.

        Parameter location

        :param _in: The _in of this ParameterConstraint.
        :type _in: str
        """
        allowed_values = ["path", "query", "header"]  # noqa: E501
        if _in not in allowed_values:
            raise ValueError(
                "Invalid value for `_in` ({0}), must be one of {1}"
                .format(_in, allowed_values)
            )

        self.__in = _in

    @property
    def must_match_regexp(self):
        """Gets the must_match_regexp of this ParameterConstraint.

        Whether it's a regular expression matching constraint

        :return: The must_match_regexp of this ParameterConstraint.
        :rtype: str
        """
        return self._must_match_regexp

    @must_match_regexp.setter
    def must_match_regexp(self, must_match_regexp):
        """Sets the must_match_regexp of this ParameterConstraint.

        Whether it's a regular expression matching constraint

        :param must_match_regexp: The must_match_regexp of this ParameterConstraint.
        :type must_match_regexp: str
        """

        self._must_match_regexp = must_match_regexp

    @property
    def name(self):
        """Gets the name of this ParameterConstraint.

        Parameter name

        :return: The name of this ParameterConstraint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParameterConstraint.

        Parameter name

        :param name: The name of this ParameterConstraint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def recopy(self):
        """Gets the recopy of this ParameterConstraint.

        Whether it's a recopy constraint

        :return: The recopy of this ParameterConstraint.
        :rtype: bool
        """
        return self._recopy

    @recopy.setter
    def recopy(self, recopy):
        """Sets the recopy of this ParameterConstraint.

        Whether it's a recopy constraint

        :param recopy: The recopy of this ParameterConstraint.
        :type recopy: bool
        """

        self._recopy = recopy

    @property
    def required(self):
        """Gets the required of this ParameterConstraint.

        Whether it's a required constraint

        :return: The required of this ParameterConstraint.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ParameterConstraint.

        Whether it's a required constraint

        :param required: The required of this ParameterConstraint.
        :type required: bool
        """

        self._required = required
