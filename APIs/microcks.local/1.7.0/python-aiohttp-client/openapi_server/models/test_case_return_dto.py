# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestCaseReturnDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation_name: str=None):
        """TestCaseReturnDTO - a model defined in OpenAPI

        :param operation_name: The operation_name of this TestCaseReturnDTO.
        """
        self.openapi_types = {
            'operation_name': str
        }

        self.attribute_map = {
            'operation_name': 'operationName'
        }

        self._operation_name = operation_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCaseReturnDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestCaseReturnDTO of this TestCaseReturnDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation_name(self):
        """Gets the operation_name of this TestCaseReturnDTO.

        Name of related operation for this TestCase

        :return: The operation_name of this TestCaseReturnDTO.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this TestCaseReturnDTO.

        Name of related operation for this TestCase

        :param operation_name: The operation_name of this TestCaseReturnDTO.
        :type operation_name: str
        """
        if operation_name is None:
            raise ValueError("Invalid value for `operation_name`, must not be `None`")

        self._operation_name = operation_name
