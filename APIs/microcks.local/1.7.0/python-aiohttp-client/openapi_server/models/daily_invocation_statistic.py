# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DailyInvocationStatistic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_count: float=None, day: str=None, hourly_count: Dict[str, object]=None, id: str=None, minute_count: Dict[str, object]=None, service_name: str=None, service_version: str=None):
        """DailyInvocationStatistic - a model defined in OpenAPI

        :param daily_count: The daily_count of this DailyInvocationStatistic.
        :param day: The day of this DailyInvocationStatistic.
        :param hourly_count: The hourly_count of this DailyInvocationStatistic.
        :param id: The id of this DailyInvocationStatistic.
        :param minute_count: The minute_count of this DailyInvocationStatistic.
        :param service_name: The service_name of this DailyInvocationStatistic.
        :param service_version: The service_version of this DailyInvocationStatistic.
        """
        self.openapi_types = {
            'daily_count': float,
            'day': str,
            'hourly_count': Dict[str, object],
            'id': str,
            'minute_count': Dict[str, object],
            'service_name': str,
            'service_version': str
        }

        self.attribute_map = {
            'daily_count': 'dailyCount',
            'day': 'day',
            'hourly_count': 'hourlyCount',
            'id': 'id',
            'minute_count': 'minuteCount',
            'service_name': 'serviceName',
            'service_version': 'serviceVersion'
        }

        self._daily_count = daily_count
        self._day = day
        self._hourly_count = hourly_count
        self._id = id
        self._minute_count = minute_count
        self._service_name = service_name
        self._service_version = service_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DailyInvocationStatistic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DailyInvocationStatistic of this DailyInvocationStatistic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_count(self):
        """Gets the daily_count of this DailyInvocationStatistic.

        The number of service mock invocations on this day

        :return: The daily_count of this DailyInvocationStatistic.
        :rtype: float
        """
        return self._daily_count

    @daily_count.setter
    def daily_count(self, daily_count):
        """Sets the daily_count of this DailyInvocationStatistic.

        The number of service mock invocations on this day

        :param daily_count: The daily_count of this DailyInvocationStatistic.
        :type daily_count: float
        """
        if daily_count is None:
            raise ValueError("Invalid value for `daily_count`, must not be `None`")

        self._daily_count = daily_count

    @property
    def day(self):
        """Gets the day of this DailyInvocationStatistic.

        The day (formatted as yyyyMMdd string) represented by this statistic

        :return: The day of this DailyInvocationStatistic.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DailyInvocationStatistic.

        The day (formatted as yyyyMMdd string) represented by this statistic

        :param day: The day of this DailyInvocationStatistic.
        :type day: str
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")

        self._day = day

    @property
    def hourly_count(self):
        """Gets the hourly_count of this DailyInvocationStatistic.

        The number of service mock invocations per hour of the day (keys range from 0 to 23)

        :return: The hourly_count of this DailyInvocationStatistic.
        :rtype: Dict[str, object]
        """
        return self._hourly_count

    @hourly_count.setter
    def hourly_count(self, hourly_count):
        """Sets the hourly_count of this DailyInvocationStatistic.

        The number of service mock invocations per hour of the day (keys range from 0 to 23)

        :param hourly_count: The hourly_count of this DailyInvocationStatistic.
        :type hourly_count: Dict[str, object]
        """

        self._hourly_count = hourly_count

    @property
    def id(self):
        """Gets the id of this DailyInvocationStatistic.

        Unique identifier of this statistic object

        :return: The id of this DailyInvocationStatistic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DailyInvocationStatistic.

        Unique identifier of this statistic object

        :param id: The id of this DailyInvocationStatistic.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def minute_count(self):
        """Gets the minute_count of this DailyInvocationStatistic.

        The number of service mock invocations per minute of the day (keys range from 0 to 1439)

        :return: The minute_count of this DailyInvocationStatistic.
        :rtype: Dict[str, object]
        """
        return self._minute_count

    @minute_count.setter
    def minute_count(self, minute_count):
        """Sets the minute_count of this DailyInvocationStatistic.

        The number of service mock invocations per minute of the day (keys range from 0 to 1439)

        :param minute_count: The minute_count of this DailyInvocationStatistic.
        :type minute_count: Dict[str, object]
        """

        self._minute_count = minute_count

    @property
    def service_name(self):
        """Gets the service_name of this DailyInvocationStatistic.

        The name of the service this statistic is related to

        :return: The service_name of this DailyInvocationStatistic.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this DailyInvocationStatistic.

        The name of the service this statistic is related to

        :param service_name: The service_name of this DailyInvocationStatistic.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def service_version(self):
        """Gets the service_version of this DailyInvocationStatistic.

        The version of the service this statistic is related to

        :return: The service_version of this DailyInvocationStatistic.
        :rtype: str
        """
        return self._service_version

    @service_version.setter
    def service_version(self, service_version):
        """Sets the service_version of this DailyInvocationStatistic.

        The version of the service this statistic is related to

        :param service_version: The service_version of this DailyInvocationStatistic.
        :type service_version: str
        """
        if service_version is None:
            raise ValueError("Invalid value for `service_version`, must not be `None`")

        self._service_version = service_version
