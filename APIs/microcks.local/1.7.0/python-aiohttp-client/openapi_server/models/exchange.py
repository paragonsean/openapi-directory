# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_message import EventMessage
from openapi_server.models.request import Request
from openapi_server.models.request_response_pair import RequestResponsePair
from openapi_server.models.response import Response
from openapi_server.models.unidirectional_event import UnidirectionalEvent
from openapi_server import util


class Exchange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request: Request=None, response: Response=None, type: str=None, event_message: EventMessage=None):
        """Exchange - a model defined in OpenAPI

        :param request: The request of this Exchange.
        :param response: The response of this Exchange.
        :param type: The type of this Exchange.
        :param event_message: The event_message of this Exchange.
        """
        self.openapi_types = {
            'request': Request,
            'response': Response,
            'type': str,
            'event_message': EventMessage
        }

        self.attribute_map = {
            'request': 'request',
            'response': 'response',
            'type': 'type',
            'event_message': 'eventMessage'
        }

        self._request = request
        self._response = response
        self._type = type
        self._event_message = event_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Exchange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Exchange of this Exchange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request(self):
        """Gets the request of this Exchange.


        :return: The request of this Exchange.
        :rtype: Request
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this Exchange.


        :param request: The request of this Exchange.
        :type request: Request
        """
        if request is None:
            raise ValueError("Invalid value for `request`, must not be `None`")

        self._request = request

    @property
    def response(self):
        """Gets the response of this Exchange.


        :return: The response of this Exchange.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this Exchange.


        :param response: The response of this Exchange.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def type(self):
        """Gets the type of this Exchange.

        Discriminant type for identifying kind of exchange

        :return: The type of this Exchange.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Exchange.

        Discriminant type for identifying kind of exchange

        :param type: The type of this Exchange.
        :type type: str
        """
        allowed_values = ["reqRespPair", "unidirEvent"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def event_message(self):
        """Gets the event_message of this Exchange.


        :return: The event_message of this Exchange.
        :rtype: EventMessage
        """
        return self._event_message

    @event_message.setter
    def event_message(self, event_message):
        """Sets the event_message of this Exchange.


        :param event_message: The event_message of this Exchange.
        :type event_message: EventMessage
        """
        if event_message is None:
            raise ValueError("Invalid value for `event_message`, must not be `None`")

        self._event_message = event_message
