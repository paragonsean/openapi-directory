# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata import Metadata
from openapi_server.models.secret_ref import SecretRef
from openapi_server.models.service_ref import ServiceRef
from openapi_server import util


class ImportJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, created_date: datetime=None, etag: str=None, frequency: str=None, id: str=None, last_import_date: datetime=None, last_import_error: str=None, main_artifact: bool=None, metadata: Metadata=None, name: str=None, repository_disable_ssl_validation: bool=None, repository_url: str=None, secret_ref: SecretRef=None, service_refs: List[ServiceRef]=None):
        """ImportJob - a model defined in OpenAPI

        :param active: The active of this ImportJob.
        :param created_date: The created_date of this ImportJob.
        :param etag: The etag of this ImportJob.
        :param frequency: The frequency of this ImportJob.
        :param id: The id of this ImportJob.
        :param last_import_date: The last_import_date of this ImportJob.
        :param last_import_error: The last_import_error of this ImportJob.
        :param main_artifact: The main_artifact of this ImportJob.
        :param metadata: The metadata of this ImportJob.
        :param name: The name of this ImportJob.
        :param repository_disable_ssl_validation: The repository_disable_ssl_validation of this ImportJob.
        :param repository_url: The repository_url of this ImportJob.
        :param secret_ref: The secret_ref of this ImportJob.
        :param service_refs: The service_refs of this ImportJob.
        """
        self.openapi_types = {
            'active': bool,
            'created_date': datetime,
            'etag': str,
            'frequency': str,
            'id': str,
            'last_import_date': datetime,
            'last_import_error': str,
            'main_artifact': bool,
            'metadata': Metadata,
            'name': str,
            'repository_disable_ssl_validation': bool,
            'repository_url': str,
            'secret_ref': SecretRef,
            'service_refs': List[ServiceRef]
        }

        self.attribute_map = {
            'active': 'active',
            'created_date': 'createdDate',
            'etag': 'etag',
            'frequency': 'frequency',
            'id': 'id',
            'last_import_date': 'lastImportDate',
            'last_import_error': 'lastImportError',
            'main_artifact': 'mainArtifact',
            'metadata': 'metadata',
            'name': 'name',
            'repository_disable_ssl_validation': 'repositoryDisableSSLValidation',
            'repository_url': 'repositoryUrl',
            'secret_ref': 'secretRef',
            'service_refs': 'serviceRefs'
        }

        self._active = active
        self._created_date = created_date
        self._etag = etag
        self._frequency = frequency
        self._id = id
        self._last_import_date = last_import_date
        self._last_import_error = last_import_error
        self._main_artifact = main_artifact
        self._metadata = metadata
        self._name = name
        self._repository_disable_ssl_validation = repository_disable_ssl_validation
        self._repository_url = repository_url
        self._secret_ref = secret_ref
        self._service_refs = service_refs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportJob of this ImportJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ImportJob.

        Whether this ImportJob is active (ie. scheduled for execution)

        :return: The active of this ImportJob.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ImportJob.

        Whether this ImportJob is active (ie. scheduled for execution)

        :param active: The active of this ImportJob.
        :type active: bool
        """

        self._active = active

    @property
    def created_date(self):
        """Gets the created_date of this ImportJob.

        Creation date for this ImportJob

        :return: The created_date of this ImportJob.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ImportJob.

        Creation date for this ImportJob

        :param created_date: The created_date of this ImportJob.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def etag(self):
        """Gets the etag of this ImportJob.

        Etag of repository URL during previous import. Is used for not re-importing if no recent changes

        :return: The etag of this ImportJob.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ImportJob.

        Etag of repository URL during previous import. Is used for not re-importing if no recent changes

        :param etag: The etag of this ImportJob.
        :type etag: str
        """

        self._etag = etag

    @property
    def frequency(self):
        """Gets the frequency of this ImportJob.

        Reserved for future usage

        :return: The frequency of this ImportJob.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ImportJob.

        Reserved for future usage

        :param frequency: The frequency of this ImportJob.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def id(self):
        """Gets the id of this ImportJob.

        Unique identifier of ImportJob

        :return: The id of this ImportJob.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportJob.

        Unique identifier of ImportJob

        :param id: The id of this ImportJob.
        :type id: str
        """

        self._id = id

    @property
    def last_import_date(self):
        """Gets the last_import_date of this ImportJob.

        Date last import was done

        :return: The last_import_date of this ImportJob.
        :rtype: datetime
        """
        return self._last_import_date

    @last_import_date.setter
    def last_import_date(self, last_import_date):
        """Sets the last_import_date of this ImportJob.

        Date last import was done

        :param last_import_date: The last_import_date of this ImportJob.
        :type last_import_date: datetime
        """

        self._last_import_date = last_import_date

    @property
    def last_import_error(self):
        """Gets the last_import_error of this ImportJob.

        Error message of last import (if any)

        :return: The last_import_error of this ImportJob.
        :rtype: str
        """
        return self._last_import_error

    @last_import_error.setter
    def last_import_error(self, last_import_error):
        """Sets the last_import_error of this ImportJob.

        Error message of last import (if any)

        :param last_import_error: The last_import_error of this ImportJob.
        :type last_import_error: str
        """

        self._last_import_error = last_import_error

    @property
    def main_artifact(self):
        """Gets the main_artifact of this ImportJob.

        Flag telling if considered as primary or secondary artifact. Default to `true`

        :return: The main_artifact of this ImportJob.
        :rtype: bool
        """
        return self._main_artifact

    @main_artifact.setter
    def main_artifact(self, main_artifact):
        """Sets the main_artifact of this ImportJob.

        Flag telling if considered as primary or secondary artifact. Default to `true`

        :param main_artifact: The main_artifact of this ImportJob.
        :type main_artifact: bool
        """

        self._main_artifact = main_artifact

    @property
    def metadata(self):
        """Gets the metadata of this ImportJob.


        :return: The metadata of this ImportJob.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ImportJob.


        :param metadata: The metadata of this ImportJob.
        :type metadata: Metadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this ImportJob.

        Unique distinct name of this ImportJob

        :return: The name of this ImportJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportJob.

        Unique distinct name of this ImportJob

        :param name: The name of this ImportJob.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def repository_disable_ssl_validation(self):
        """Gets the repository_disable_ssl_validation of this ImportJob.

        Whether to disable SSL certificate verification when checking repository

        :return: The repository_disable_ssl_validation of this ImportJob.
        :rtype: bool
        """
        return self._repository_disable_ssl_validation

    @repository_disable_ssl_validation.setter
    def repository_disable_ssl_validation(self, repository_disable_ssl_validation):
        """Sets the repository_disable_ssl_validation of this ImportJob.

        Whether to disable SSL certificate verification when checking repository

        :param repository_disable_ssl_validation: The repository_disable_ssl_validation of this ImportJob.
        :type repository_disable_ssl_validation: bool
        """

        self._repository_disable_ssl_validation = repository_disable_ssl_validation

    @property
    def repository_url(self):
        """Gets the repository_url of this ImportJob.

        URL of mocks and tests repository artifact

        :return: The repository_url of this ImportJob.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this ImportJob.

        URL of mocks and tests repository artifact

        :param repository_url: The repository_url of this ImportJob.
        :type repository_url: str
        """
        if repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")

        self._repository_url = repository_url

    @property
    def secret_ref(self):
        """Gets the secret_ref of this ImportJob.


        :return: The secret_ref of this ImportJob.
        :rtype: SecretRef
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref):
        """Sets the secret_ref of this ImportJob.


        :param secret_ref: The secret_ref of this ImportJob.
        :type secret_ref: SecretRef
        """

        self._secret_ref = secret_ref

    @property
    def service_refs(self):
        """Gets the service_refs of this ImportJob.

        References of Services discovered when checking repository

        :return: The service_refs of this ImportJob.
        :rtype: List[ServiceRef]
        """
        return self._service_refs

    @service_refs.setter
    def service_refs(self, service_refs):
        """Sets the service_refs of this ImportJob.

        References of Services discovered when checking repository

        :param service_refs: The service_refs of this ImportJob.
        :type service_refs: List[ServiceRef]
        """

        self._service_refs = service_refs
