# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeaturesConfigRepositoryFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: str=None, label_key: str=None, label_label: str=None, label_list: str=None):
        """FeaturesConfigRepositoryFilter - a model defined in OpenAPI

        :param enabled: The enabled of this FeaturesConfigRepositoryFilter.
        :param label_key: The label_key of this FeaturesConfigRepositoryFilter.
        :param label_label: The label_label of this FeaturesConfigRepositoryFilter.
        :param label_list: The label_list of this FeaturesConfigRepositoryFilter.
        """
        self.openapi_types = {
            'enabled': str,
            'label_key': str,
            'label_label': str,
            'label_list': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'label_key': 'label-key',
            'label_label': 'label-label',
            'label_list': 'label-list'
        }

        self._enabled = enabled
        self._label_key = label_key
        self._label_label = label_label
        self._label_list = label_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeaturesConfigRepositoryFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeaturesConfig_repository_filter of this FeaturesConfigRepositoryFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this FeaturesConfigRepositoryFilter.


        :return: The enabled of this FeaturesConfigRepositoryFilter.
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this FeaturesConfigRepositoryFilter.


        :param enabled: The enabled of this FeaturesConfigRepositoryFilter.
        :type enabled: str
        """

        self._enabled = enabled

    @property
    def label_key(self):
        """Gets the label_key of this FeaturesConfigRepositoryFilter.


        :return: The label_key of this FeaturesConfigRepositoryFilter.
        :rtype: str
        """
        return self._label_key

    @label_key.setter
    def label_key(self, label_key):
        """Sets the label_key of this FeaturesConfigRepositoryFilter.


        :param label_key: The label_key of this FeaturesConfigRepositoryFilter.
        :type label_key: str
        """

        self._label_key = label_key

    @property
    def label_label(self):
        """Gets the label_label of this FeaturesConfigRepositoryFilter.


        :return: The label_label of this FeaturesConfigRepositoryFilter.
        :rtype: str
        """
        return self._label_label

    @label_label.setter
    def label_label(self, label_label):
        """Sets the label_label of this FeaturesConfigRepositoryFilter.


        :param label_label: The label_label of this FeaturesConfigRepositoryFilter.
        :type label_label: str
        """

        self._label_label = label_label

    @property
    def label_list(self):
        """Gets the label_list of this FeaturesConfigRepositoryFilter.


        :return: The label_list of this FeaturesConfigRepositoryFilter.
        :rtype: str
        """
        return self._label_list

    @label_list.setter
    def label_list(self, label_list):
        """Sets the label_list of this FeaturesConfigRepositoryFilter.


        :param label_list: The label_list of this FeaturesConfigRepositoryFilter.
        :type label_list: str
        """

        self._label_list = label_list
