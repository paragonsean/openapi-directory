# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Binding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_name: str=None, destination_type: str=None, key_type: str=None, method: str=None, persistent: bool=None, qo_s: str=None, type: str=None):
        """Binding - a model defined in OpenAPI

        :param destination_name: The destination_name of this Binding.
        :param destination_type: The destination_type of this Binding.
        :param key_type: The key_type of this Binding.
        :param method: The method of this Binding.
        :param persistent: The persistent of this Binding.
        :param qo_s: The qo_s of this Binding.
        :param type: The type of this Binding.
        """
        self.openapi_types = {
            'destination_name': str,
            'destination_type': str,
            'key_type': str,
            'method': str,
            'persistent': bool,
            'qo_s': str,
            'type': str
        }

        self.attribute_map = {
            'destination_name': 'destinationName',
            'destination_type': 'destinationType',
            'key_type': 'keyType',
            'method': 'method',
            'persistent': 'persistent',
            'qo_s': 'qoS',
            'type': 'type'
        }

        self._destination_name = destination_name
        self._destination_type = destination_type
        self._key_type = key_type
        self._method = method
        self._persistent = persistent
        self._qo_s = qo_s
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Binding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Binding of this Binding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_name(self):
        """Gets the destination_name of this Binding.

        Name of destination for asynchronous messages of this operation

        :return: The destination_name of this Binding.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this Binding.

        Name of destination for asynchronous messages of this operation

        :param destination_name: The destination_name of this Binding.
        :type destination_name: str
        """
        if destination_name is None:
            raise ValueError("Invalid value for `destination_name`, must not be `None`")

        self._destination_name = destination_name

    @property
    def destination_type(self):
        """Gets the destination_type of this Binding.

        Type of destination for asynchronous messages of this operation

        :return: The destination_type of this Binding.
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this Binding.

        Type of destination for asynchronous messages of this operation

        :param destination_type: The destination_type of this Binding.
        :type destination_type: str
        """

        self._destination_type = destination_type

    @property
    def key_type(self):
        """Gets the key_type of this Binding.

        Type of key for Kafka messages

        :return: The key_type of this Binding.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this Binding.

        Type of key for Kafka messages

        :param key_type: The key_type of this Binding.
        :type key_type: str
        """

        self._key_type = key_type

    @property
    def method(self):
        """Gets the method of this Binding.

        HTTP method for WebSocket binding

        :return: The method of this Binding.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Binding.

        HTTP method for WebSocket binding

        :param method: The method of this Binding.
        :type method: str
        """

        self._method = method

    @property
    def persistent(self):
        """Gets the persistent of this Binding.

        Persistent attribute for MQTT binding

        :return: The persistent of this Binding.
        :rtype: bool
        """
        return self._persistent

    @persistent.setter
    def persistent(self, persistent):
        """Sets the persistent of this Binding.

        Persistent attribute for MQTT binding

        :param persistent: The persistent of this Binding.
        :type persistent: bool
        """

        self._persistent = persistent

    @property
    def qo_s(self):
        """Gets the qo_s of this Binding.

        Quality of Service attribute for MQTT binding

        :return: The qo_s of this Binding.
        :rtype: str
        """
        return self._qo_s

    @qo_s.setter
    def qo_s(self, qo_s):
        """Sets the qo_s of this Binding.

        Quality of Service attribute for MQTT binding

        :param qo_s: The qo_s of this Binding.
        :type qo_s: str
        """

        self._qo_s = qo_s

    @property
    def type(self):
        """Gets the type of this Binding.

        Protocol binding identifier

        :return: The type of this Binding.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Binding.

        Protocol binding identifier

        :param type: The type of this Binding.
        :type type: str
        """
        allowed_values = ["KAFKA", "MQTT", "WS", "AMQP", "NATS", "GOOGLEPUBSUB"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
