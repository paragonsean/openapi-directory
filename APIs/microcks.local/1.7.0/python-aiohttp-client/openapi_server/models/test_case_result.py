# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_step_result import TestStepResult
from openapi_server import util


class TestCaseResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, elapsed_time: float=None, operation_name: str=None, success: bool=None, test_step_results: List[TestStepResult]=None):
        """TestCaseResult - a model defined in OpenAPI

        :param elapsed_time: The elapsed_time of this TestCaseResult.
        :param operation_name: The operation_name of this TestCaseResult.
        :param success: The success of this TestCaseResult.
        :param test_step_results: The test_step_results of this TestCaseResult.
        """
        self.openapi_types = {
            'elapsed_time': float,
            'operation_name': str,
            'success': bool,
            'test_step_results': List[TestStepResult]
        }

        self.attribute_map = {
            'elapsed_time': 'elapsedTime',
            'operation_name': 'operationName',
            'success': 'success',
            'test_step_results': 'testStepResults'
        }

        self._elapsed_time = elapsed_time
        self._operation_name = operation_name
        self._success = success
        self._test_step_results = test_step_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCaseResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestCaseResult of this TestCaseResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this TestCaseResult.

        Elapsed time in milliseconds since the test case beginning

        :return: The elapsed_time of this TestCaseResult.
        :rtype: float
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this TestCaseResult.

        Elapsed time in milliseconds since the test case beginning

        :param elapsed_time: The elapsed_time of this TestCaseResult.
        :type elapsed_time: float
        """
        if elapsed_time is None:
            raise ValueError("Invalid value for `elapsed_time`, must not be `None`")

        self._elapsed_time = elapsed_time

    @property
    def operation_name(self):
        """Gets the operation_name of this TestCaseResult.

        Name of operation this test case is bound to

        :return: The operation_name of this TestCaseResult.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this TestCaseResult.

        Name of operation this test case is bound to

        :param operation_name: The operation_name of this TestCaseResult.
        :type operation_name: str
        """
        if operation_name is None:
            raise ValueError("Invalid value for `operation_name`, must not be `None`")

        self._operation_name = operation_name

    @property
    def success(self):
        """Gets the success of this TestCaseResult.

        Flag telling if test case is a success

        :return: The success of this TestCaseResult.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this TestCaseResult.

        Flag telling if test case is a success

        :param success: The success of this TestCaseResult.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success

    @property
    def test_step_results(self):
        """Gets the test_step_results of this TestCaseResult.

        Test steps associated to this test case

        :return: The test_step_results of this TestCaseResult.
        :rtype: List[TestStepResult]
        """
        return self._test_step_results

    @test_step_results.setter
    def test_step_results(self, test_step_results):
        """Sets the test_step_results of this TestCaseResult.

        Test steps associated to this test case

        :param test_step_results: The test_step_results of this TestCaseResult.
        :type test_step_results: List[TestStepResult]
        """

        self._test_step_results = test_step_results
