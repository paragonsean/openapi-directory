# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.features_config_async_api import FeaturesConfigAsyncApi
from openapi_server.models.features_config_microcks_hub import FeaturesConfigMicrocksHub
from openapi_server.models.features_config_repository_filter import FeaturesConfigRepositoryFilter
from openapi_server.models.features_config_repository_tenancy import FeaturesConfigRepositoryTenancy
from openapi_server import util


class FeaturesConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, async_api: FeaturesConfigAsyncApi=None, microcks_hub: FeaturesConfigMicrocksHub=None, repository_filter: FeaturesConfigRepositoryFilter=None, repository_tenancy: FeaturesConfigRepositoryTenancy=None):
        """FeaturesConfig - a model defined in OpenAPI

        :param async_api: The async_api of this FeaturesConfig.
        :param microcks_hub: The microcks_hub of this FeaturesConfig.
        :param repository_filter: The repository_filter of this FeaturesConfig.
        :param repository_tenancy: The repository_tenancy of this FeaturesConfig.
        """
        self.openapi_types = {
            'async_api': FeaturesConfigAsyncApi,
            'microcks_hub': FeaturesConfigMicrocksHub,
            'repository_filter': FeaturesConfigRepositoryFilter,
            'repository_tenancy': FeaturesConfigRepositoryTenancy
        }

        self.attribute_map = {
            'async_api': 'async-api',
            'microcks_hub': 'microcks-hub',
            'repository_filter': 'repository-filter',
            'repository_tenancy': 'repository-tenancy'
        }

        self._async_api = async_api
        self._microcks_hub = microcks_hub
        self._repository_filter = repository_filter
        self._repository_tenancy = repository_tenancy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeaturesConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeaturesConfig of this FeaturesConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def async_api(self):
        """Gets the async_api of this FeaturesConfig.


        :return: The async_api of this FeaturesConfig.
        :rtype: FeaturesConfigAsyncApi
        """
        return self._async_api

    @async_api.setter
    def async_api(self, async_api):
        """Sets the async_api of this FeaturesConfig.


        :param async_api: The async_api of this FeaturesConfig.
        :type async_api: FeaturesConfigAsyncApi
        """

        self._async_api = async_api

    @property
    def microcks_hub(self):
        """Gets the microcks_hub of this FeaturesConfig.


        :return: The microcks_hub of this FeaturesConfig.
        :rtype: FeaturesConfigMicrocksHub
        """
        return self._microcks_hub

    @microcks_hub.setter
    def microcks_hub(self, microcks_hub):
        """Sets the microcks_hub of this FeaturesConfig.


        :param microcks_hub: The microcks_hub of this FeaturesConfig.
        :type microcks_hub: FeaturesConfigMicrocksHub
        """

        self._microcks_hub = microcks_hub

    @property
    def repository_filter(self):
        """Gets the repository_filter of this FeaturesConfig.


        :return: The repository_filter of this FeaturesConfig.
        :rtype: FeaturesConfigRepositoryFilter
        """
        return self._repository_filter

    @repository_filter.setter
    def repository_filter(self, repository_filter):
        """Sets the repository_filter of this FeaturesConfig.


        :param repository_filter: The repository_filter of this FeaturesConfig.
        :type repository_filter: FeaturesConfigRepositoryFilter
        """

        self._repository_filter = repository_filter

    @property
    def repository_tenancy(self):
        """Gets the repository_tenancy of this FeaturesConfig.


        :return: The repository_tenancy of this FeaturesConfig.
        :rtype: FeaturesConfigRepositoryTenancy
        """
        return self._repository_tenancy

    @repository_tenancy.setter
    def repository_tenancy(self, repository_tenancy):
        """Sets the repository_tenancy of this FeaturesConfig.


        :param repository_tenancy: The repository_tenancy of this FeaturesConfig.
        :type repository_tenancy: FeaturesConfigRepositoryTenancy
        """

        self._repository_tenancy = repository_tenancy
