# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trend import Trend
from openapi_server import util


class TestConformanceMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_label_value: str=None, current_score: float=None, id: str=None, last_update_day: str=None, latest_scores: Dict[str, float]=None, latest_trend: Trend=None, max_possible_score: float=None, service_id: str=None):
        """TestConformanceMetric - a model defined in OpenAPI

        :param aggregation_label_value: The aggregation_label_value of this TestConformanceMetric.
        :param current_score: The current_score of this TestConformanceMetric.
        :param id: The id of this TestConformanceMetric.
        :param last_update_day: The last_update_day of this TestConformanceMetric.
        :param latest_scores: The latest_scores of this TestConformanceMetric.
        :param latest_trend: The latest_trend of this TestConformanceMetric.
        :param max_possible_score: The max_possible_score of this TestConformanceMetric.
        :param service_id: The service_id of this TestConformanceMetric.
        """
        self.openapi_types = {
            'aggregation_label_value': str,
            'current_score': float,
            'id': str,
            'last_update_day': str,
            'latest_scores': Dict[str, float],
            'latest_trend': Trend,
            'max_possible_score': float,
            'service_id': str
        }

        self.attribute_map = {
            'aggregation_label_value': 'aggregationLabelValue',
            'current_score': 'currentScore',
            'id': 'id',
            'last_update_day': 'lastUpdateDay',
            'latest_scores': 'latestScores',
            'latest_trend': 'latestTrend',
            'max_possible_score': 'maxPossibleScore',
            'service_id': 'serviceId'
        }

        self._aggregation_label_value = aggregation_label_value
        self._current_score = current_score
        self._id = id
        self._last_update_day = last_update_day
        self._latest_scores = latest_scores
        self._latest_trend = latest_trend
        self._max_possible_score = max_possible_score
        self._service_id = service_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestConformanceMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestConformanceMetric of this TestConformanceMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_label_value(self):
        """Gets the aggregation_label_value of this TestConformanceMetric.

        Value of the label used for metrics aggregation (if any)

        :return: The aggregation_label_value of this TestConformanceMetric.
        :rtype: str
        """
        return self._aggregation_label_value

    @aggregation_label_value.setter
    def aggregation_label_value(self, aggregation_label_value):
        """Sets the aggregation_label_value of this TestConformanceMetric.

        Value of the label used for metrics aggregation (if any)

        :param aggregation_label_value: The aggregation_label_value of this TestConformanceMetric.
        :type aggregation_label_value: str
        """

        self._aggregation_label_value = aggregation_label_value

    @property
    def current_score(self):
        """Gets the current_score of this TestConformanceMetric.

        Current test conformance score for the related Service

        :return: The current_score of this TestConformanceMetric.
        :rtype: float
        """
        return self._current_score

    @current_score.setter
    def current_score(self, current_score):
        """Sets the current_score of this TestConformanceMetric.

        Current test conformance score for the related Service

        :param current_score: The current_score of this TestConformanceMetric.
        :type current_score: float
        """
        if current_score is None:
            raise ValueError("Invalid value for `current_score`, must not be `None`")

        self._current_score = current_score

    @property
    def id(self):
        """Gets the id of this TestConformanceMetric.

        Unique identifier of coverage metric

        :return: The id of this TestConformanceMetric.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestConformanceMetric.

        Unique identifier of coverage metric

        :param id: The id of this TestConformanceMetric.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_update_day(self):
        """Gets the last_update_day of this TestConformanceMetric.

        The day of latest score update (in yyyyMMdd format)

        :return: The last_update_day of this TestConformanceMetric.
        :rtype: str
        """
        return self._last_update_day

    @last_update_day.setter
    def last_update_day(self, last_update_day):
        """Sets the last_update_day of this TestConformanceMetric.

        The day of latest score update (in yyyyMMdd format)

        :param last_update_day: The last_update_day of this TestConformanceMetric.
        :type last_update_day: str
        """

        self._last_update_day = last_update_day

    @property
    def latest_scores(self):
        """Gets the latest_scores of this TestConformanceMetric.

        History of latest scores (key is date with format yyyyMMdd, value is score as double)

        :return: The latest_scores of this TestConformanceMetric.
        :rtype: Dict[str, float]
        """
        return self._latest_scores

    @latest_scores.setter
    def latest_scores(self, latest_scores):
        """Sets the latest_scores of this TestConformanceMetric.

        History of latest scores (key is date with format yyyyMMdd, value is score as double)

        :param latest_scores: The latest_scores of this TestConformanceMetric.
        :type latest_scores: Dict[str, float]
        """

        self._latest_scores = latest_scores

    @property
    def latest_trend(self):
        """Gets the latest_trend of this TestConformanceMetric.


        :return: The latest_trend of this TestConformanceMetric.
        :rtype: Trend
        """
        return self._latest_trend

    @latest_trend.setter
    def latest_trend(self, latest_trend):
        """Sets the latest_trend of this TestConformanceMetric.


        :param latest_trend: The latest_trend of this TestConformanceMetric.
        :type latest_trend: Trend
        """

        self._latest_trend = latest_trend

    @property
    def max_possible_score(self):
        """Gets the max_possible_score of this TestConformanceMetric.

        Maximum conformance score that can be reached (depends on samples expresiveness)

        :return: The max_possible_score of this TestConformanceMetric.
        :rtype: float
        """
        return self._max_possible_score

    @max_possible_score.setter
    def max_possible_score(self, max_possible_score):
        """Sets the max_possible_score of this TestConformanceMetric.

        Maximum conformance score that can be reached (depends on samples expresiveness)

        :param max_possible_score: The max_possible_score of this TestConformanceMetric.
        :type max_possible_score: float
        """
        if max_possible_score is None:
            raise ValueError("Invalid value for `max_possible_score`, must not be `None`")

        self._max_possible_score = max_possible_score

    @property
    def service_id(self):
        """Gets the service_id of this TestConformanceMetric.

        Unique identifier of the Service this metric is related to

        :return: The service_id of this TestConformanceMetric.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this TestConformanceMetric.

        Unique identifier of the Service this metric is related to

        :param service_id: The service_id of this TestConformanceMetric.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id
