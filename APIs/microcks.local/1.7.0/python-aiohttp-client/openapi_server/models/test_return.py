# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_message import EventMessage
from openapi_server.models.request import Request
from openapi_server.models.response import Response
from openapi_server import util


class TestReturn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, elapsed_time: int=None, event_message: EventMessage=None, message: str=None, request: Request=None, response: Response=None):
        """TestReturn - a model defined in OpenAPI

        :param code: The code of this TestReturn.
        :param elapsed_time: The elapsed_time of this TestReturn.
        :param event_message: The event_message of this TestReturn.
        :param message: The message of this TestReturn.
        :param request: The request of this TestReturn.
        :param response: The response of this TestReturn.
        """
        self.openapi_types = {
            'code': int,
            'elapsed_time': int,
            'event_message': EventMessage,
            'message': str,
            'request': Request,
            'response': Response
        }

        self.attribute_map = {
            'code': 'code',
            'elapsed_time': 'elapsedTime',
            'event_message': 'eventMessage',
            'message': 'message',
            'request': 'request',
            'response': 'response'
        }

        self._code = code
        self._elapsed_time = elapsed_time
        self._event_message = event_message
        self._message = message
        self._request = request
        self._response = response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestReturn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestReturn of this TestReturn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this TestReturn.

        Return code for test (0 means Success, 1 means Failure)

        :return: The code of this TestReturn.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TestReturn.

        Return code for test (0 means Success, 1 means Failure)

        :param code: The code of this TestReturn.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this TestReturn.

        Elapsed time in milliseconds

        :return: The elapsed_time of this TestReturn.
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this TestReturn.

        Elapsed time in milliseconds

        :param elapsed_time: The elapsed_time of this TestReturn.
        :type elapsed_time: int
        """
        if elapsed_time is None:
            raise ValueError("Invalid value for `elapsed_time`, must not be `None`")

        self._elapsed_time = elapsed_time

    @property
    def event_message(self):
        """Gets the event_message of this TestReturn.


        :return: The event_message of this TestReturn.
        :rtype: EventMessage
        """
        return self._event_message

    @event_message.setter
    def event_message(self, event_message):
        """Sets the event_message of this TestReturn.


        :param event_message: The event_message of this TestReturn.
        :type event_message: EventMessage
        """

        self._event_message = event_message

    @property
    def message(self):
        """Gets the message of this TestReturn.

        Error message if any

        :return: The message of this TestReturn.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TestReturn.

        Error message if any

        :param message: The message of this TestReturn.
        :type message: str
        """

        self._message = message

    @property
    def request(self):
        """Gets the request of this TestReturn.


        :return: The request of this TestReturn.
        :rtype: Request
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this TestReturn.


        :param request: The request of this TestReturn.
        :type request: Request
        """

        self._request = request

    @property
    def response(self):
        """Gets the response of this TestReturn.


        :return: The response of this TestReturn.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this TestReturn.


        :param response: The response of this TestReturn.
        :type response: Response
        """

        self._response = response
