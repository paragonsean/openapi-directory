# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Secret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_cert_pem: str=None, description: str=None, id: str=None, name: str=None, password: str=None, token: str=None, token_header: str=None, username: str=None):
        """Secret - a model defined in OpenAPI

        :param ca_cert_pem: The ca_cert_pem of this Secret.
        :param description: The description of this Secret.
        :param id: The id of this Secret.
        :param name: The name of this Secret.
        :param password: The password of this Secret.
        :param token: The token of this Secret.
        :param token_header: The token_header of this Secret.
        :param username: The username of this Secret.
        """
        self.openapi_types = {
            'ca_cert_pem': str,
            'description': str,
            'id': str,
            'name': str,
            'password': str,
            'token': str,
            'token_header': str,
            'username': str
        }

        self.attribute_map = {
            'ca_cert_pem': 'caCertPem',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'password': 'password',
            'token': 'token',
            'token_header': 'tokenHeader',
            'username': 'username'
        }

        self._ca_cert_pem = ca_cert_pem
        self._description = description
        self._id = id
        self._name = name
        self._password = password
        self._token = token
        self._token_header = token_header
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Secret':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Secret of this Secret.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_cert_pem(self):
        """Gets the ca_cert_pem of this Secret.


        :return: The ca_cert_pem of this Secret.
        :rtype: str
        """
        return self._ca_cert_pem

    @ca_cert_pem.setter
    def ca_cert_pem(self, ca_cert_pem):
        """Sets the ca_cert_pem of this Secret.


        :param ca_cert_pem: The ca_cert_pem of this Secret.
        :type ca_cert_pem: str
        """

        self._ca_cert_pem = ca_cert_pem

    @property
    def description(self):
        """Gets the description of this Secret.

        Description of this Secret

        :return: The description of this Secret.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Secret.

        Description of this Secret

        :param description: The description of this Secret.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Secret.

        Unique identifier of Secret

        :return: The id of this Secret.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Secret.

        Unique identifier of Secret

        :param id: The id of this Secret.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Secret.

        Unique distinct name of Secret

        :return: The name of this Secret.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Secret.

        Unique distinct name of Secret

        :param name: The name of this Secret.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self):
        """Gets the password of this Secret.


        :return: The password of this Secret.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Secret.


        :param password: The password of this Secret.
        :type password: str
        """

        self._password = password

    @property
    def token(self):
        """Gets the token of this Secret.


        :return: The token of this Secret.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Secret.


        :param token: The token of this Secret.
        :type token: str
        """

        self._token = token

    @property
    def token_header(self):
        """Gets the token_header of this Secret.


        :return: The token_header of this Secret.
        :rtype: str
        """
        return self._token_header

    @token_header.setter
    def token_header(self, token_header):
        """Sets the token_header of this Secret.


        :param token_header: The token_header of this Secret.
        :type token_header: str
        """

        self._token_header = token_header

    @property
    def username(self):
        """Gets the username of this Secret.


        :return: The username of this Secret.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Secret.


        :param username: The username of this Secret.
        :type username: str
        """

        self._username = username
