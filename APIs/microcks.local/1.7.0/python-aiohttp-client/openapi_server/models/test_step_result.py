# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestStepResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, elapsed_time: float=None, event_message_name: str=None, message: str=None, request_name: str=None, success: bool=None):
        """TestStepResult - a model defined in OpenAPI

        :param elapsed_time: The elapsed_time of this TestStepResult.
        :param event_message_name: The event_message_name of this TestStepResult.
        :param message: The message of this TestStepResult.
        :param request_name: The request_name of this TestStepResult.
        :param success: The success of this TestStepResult.
        """
        self.openapi_types = {
            'elapsed_time': float,
            'event_message_name': str,
            'message': str,
            'request_name': str,
            'success': bool
        }

        self.attribute_map = {
            'elapsed_time': 'elapsedTime',
            'event_message_name': 'eventMessageName',
            'message': 'message',
            'request_name': 'requestName',
            'success': 'success'
        }

        self._elapsed_time = elapsed_time
        self._event_message_name = event_message_name
        self._message = message
        self._request_name = request_name
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestStepResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestStepResult of this TestStepResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this TestStepResult.

        Elapsed time in milliseconds since the test step beginning

        :return: The elapsed_time of this TestStepResult.
        :rtype: float
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this TestStepResult.

        Elapsed time in milliseconds since the test step beginning

        :param elapsed_time: The elapsed_time of this TestStepResult.
        :type elapsed_time: float
        """

        self._elapsed_time = elapsed_time

    @property
    def event_message_name(self):
        """Gets the event_message_name of this TestStepResult.

        Name of event this test step is bound to

        :return: The event_message_name of this TestStepResult.
        :rtype: str
        """
        return self._event_message_name

    @event_message_name.setter
    def event_message_name(self, event_message_name):
        """Sets the event_message_name of this TestStepResult.

        Name of event this test step is bound to

        :param event_message_name: The event_message_name of this TestStepResult.
        :type event_message_name: str
        """

        self._event_message_name = event_message_name

    @property
    def message(self):
        """Gets the message of this TestStepResult.

        Error message that may be associated to this test step

        :return: The message of this TestStepResult.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TestStepResult.

        Error message that may be associated to this test step

        :param message: The message of this TestStepResult.
        :type message: str
        """

        self._message = message

    @property
    def request_name(self):
        """Gets the request_name of this TestStepResult.

        Name of request this test step is bound to

        :return: The request_name of this TestStepResult.
        :rtype: str
        """
        return self._request_name

    @request_name.setter
    def request_name(self, request_name):
        """Sets the request_name of this TestStepResult.

        Name of request this test step is bound to

        :param request_name: The request_name of this TestStepResult.
        :type request_name: str
        """

        self._request_name = request_name

    @property
    def success(self):
        """Gets the success of this TestStepResult.

        Flag telling if test case is a success

        :return: The success of this TestStepResult.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this TestStepResult.

        Flag telling if test case is a success

        :param success: The success of this TestStepResult.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success
