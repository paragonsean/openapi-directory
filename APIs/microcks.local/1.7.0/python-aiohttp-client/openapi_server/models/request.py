# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.header import Header
from openapi_server import util


class Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, headers: List[Header]=None, id: str=None, name: str=None, operation_id: str=None, test_case_id: str=None):
        """Request - a model defined in OpenAPI

        :param content: The content of this Request.
        :param headers: The headers of this Request.
        :param id: The id of this Request.
        :param name: The name of this Request.
        :param operation_id: The operation_id of this Request.
        :param test_case_id: The test_case_id of this Request.
        """
        self.openapi_types = {
            'content': str,
            'headers': List[Header],
            'id': str,
            'name': str,
            'operation_id': str,
            'test_case_id': str
        }

        self.attribute_map = {
            'content': 'content',
            'headers': 'headers',
            'id': 'id',
            'name': 'name',
            'operation_id': 'operationId',
            'test_case_id': 'testCaseId'
        }

        self._content = content
        self._headers = headers
        self._id = id
        self._name = name
        self._operation_id = operation_id
        self._test_case_id = test_case_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request of this Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Request.

        Body content for this request

        :return: The content of this Request.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Request.

        Body content for this request

        :param content: The content of this Request.
        :type content: str
        """

        self._content = content

    @property
    def headers(self):
        """Gets the headers of this Request.

        Headers for this Request

        :return: The headers of this Request.
        :rtype: List[Header]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Request.

        Headers for this Request

        :param headers: The headers of this Request.
        :type headers: List[Header]
        """

        self._headers = headers

    @property
    def id(self):
        """Gets the id of this Request.

        Unique identifier of Request

        :return: The id of this Request.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Request.

        Unique identifier of Request

        :param id: The id of this Request.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Request.

        Unique distinct name of this Request

        :return: The name of this Request.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Request.

        Unique distinct name of this Request

        :param name: The name of this Request.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def operation_id(self):
        """Gets the operation_id of this Request.

        Identifier of Operation this Request is associated to

        :return: The operation_id of this Request.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this Request.

        Identifier of Operation this Request is associated to

        :param operation_id: The operation_id of this Request.
        :type operation_id: str
        """
        if operation_id is None:
            raise ValueError("Invalid value for `operation_id`, must not be `None`")

        self._operation_id = operation_id

    @property
    def test_case_id(self):
        """Gets the test_case_id of this Request.

        Unique identifier of TestCase this Request is attached (in case of a test)

        :return: The test_case_id of this Request.
        :rtype: str
        """
        return self._test_case_id

    @test_case_id.setter
    def test_case_id(self, test_case_id):
        """Sets the test_case_id of this Request.

        Unique identifier of TestCase this Request is attached (in case of a test)

        :param test_case_id: The test_case_id of this Request.
        :type test_case_id: str
        """

        self._test_case_id = test_case_id
