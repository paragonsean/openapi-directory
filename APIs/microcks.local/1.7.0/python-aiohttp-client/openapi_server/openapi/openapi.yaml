openapi: 3.0.2
info:
  contact:
    email: laurent@microcks.io
    name: Laurent Broudoux
    url: https://github.com/microcks
  description: "API offered by Microcks, the Kubernetes native tools for API and microservices\
    \ mocking and testing (microcks.io)"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Microcks API v1.7
  version: 1.7.0
  x-apisguru-categories:
  - developer_tools
  x-logo:
    backgroundColor: '#ffffff'
    url: https://microcks.io/images/microcks-logo-blue.png
  x-origin:
  - format: openapi
    url: https://raw.githubusercontent.com/microcks/microcks/master/api/microcks-openapi-v1.7.yaml
    version: "3.0"
  x-providerName: microcks.local
servers:
- url: http://microcks.local
- description: ""
  url: http://microcks.example.com/api
security:
- jwt-bearer: []
tags:
- description: Operations related to API and Services mocks
  name: mock
- description: Operations related to API and Services tests
  name: test
- description: Operations related to Jobs for discovering mocks and tests
  name: job
- description: Operations related to configuration
  name: config
- description: Operations related to metrics
  name: metrics
paths:
  /artifact/upload:
    post:
      description: Uploads an artifact to be imported by Microcks.
      operationId: upload_artifact
      parameters:
      - description: Flag telling if this should be considered as primary or secondary
          artifact. Default to 'true'
        explode: true
        in: query
        name: mainArtifact
        required: true
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          multipart/form-data:
            examples:
              Artifact upload:
                value: |
                  POST /api/artifact/upload HTTP/1.1
                  Host: microcks
                  User-Agent: curl/7.54.0
                  Accept: */*
                  Authorization: Bearer <REDACTED>
                  Content-Length: 2743
                  Expect: 100-continue
                  Content-Type: multipart/form-data; boundary=------------------------8af8cbb56dd4bde0

                  --------------------------8af8cbb56dd4bde0
                  Content-Disposition: form-data; name="file"; filename="github.json"
                  Content-Type: application/octet-stream

                  THE ARTIFACT HERE

                  --------------------------8af8cbb56dd4bde0--
            schema:
              $ref: '#/components/schemas/ArtifactUpload'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
          description: Artifact was imported and Service found
        "204":
          description: No file attribute found in uploaded data
        "400":
          content:
            text/plain:
              schema:
                type: string
          description: Artifact content is invalid and not understood
      security:
      - jwt-bearer:
        - user
      summary: Upload an artifact
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
      x-codegen-request-body-name: body
    summary: Deals with artifacts to be imported by Microcks.
  /export:
    get:
      description: Export a repostiory snapshot with requested services
      operationId: export_snapshot
      parameters:
      - description: List of service identifiers to export
        explode: true
        in: query
        name: serviceIds
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                type: string
          description: Snapshot file representing the export of requested services
          headers:
            Content-Disposition:
              examples:
                filename:
                  value: attachment; filename=microcks-repository.json
              explode: false
              schema:
                type: string
              style: simple
      security:
      - jwt-bearer:
        - admin
      summary: Export a snapshot
      tags:
      - mock
      x-openapi-router-controller: openapi_server.controllers.mock_controller
    summary: Deals with repository snapshot to import from Microcks
  /features/config:
    get:
      operationId: get_features_configuration
      responses:
        "200":
          content:
            application/json: {}
          description: Get features configuration
      summary: Get features configuration
      tags:
      - config
      x-openapi-router-controller: openapi_server.controllers.config_controller
    summary: Optional features configuration
  /import:
    post:
      description: Import a repository snapshot previsouly exported into Microcks
      operationId: import_snapshot
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SnapshotUpload'
        required: true
        x-body-name: body
      responses:
        "201":
          description: Snasphot has been correctly imported
      security:
      - jwt-bearer:
        - admin
      summary: Import a snapshot
      tags:
      - mock
      x-openapi-router-controller: openapi_server.controllers.mock_controller
      x-codegen-request-body-name: body
    summary: Deals with repository snapshot to import in Microcks
  /jobs:
    get:
      description: Retrieve a list of ImportJobs
      operationId: get_import_jobs
      parameters:
      - description: Page of ImportJobs to retrieve (starts at and defaults to 0)
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Size of a page. Maximum number of ImportJobs to include in a
          response (defaults to 20)
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: integer
        style: form
      - description: Name like criterion for query
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ImportJob'
                type: array
          description: List of found ImportJobs
      security:
      - jwt-bearer:
        - user
      summary: Get ImportJobs
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
    post:
      description: Create a new ImportJob
      operationId: create_import_job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJob'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
          description: Created ImportJob
      security:
      - jwt-bearer:
        - user
      summary: Create ImportJob
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
      x-codegen-request-body-name: body
    summary: This path operations deal with ImportJobs
  /jobs/count:
    get:
      operationId: get_import_job_counter
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counter'
          description: Number of ImportJobs in datastore
      security:
      - jwt-bearer:
        - user
      summary: Get the ImportJobs counter
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
    summary: Count ImportJobs
  /jobs/{id}:
    delete:
      description: Delete an ImportJob
      operationId: delete_import_job
      parameters:
      - description: Unique identifier of ImportJob to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: ImportJob deleted
      security:
      - jwt-bearer:
        - admin
      summary: Delete ImportJob
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
    get:
      description: Retrieve an ImportJob using its identifier
      operationId: jobs_id_get
      parameters:
      - description: Unique identifier of ImportJob to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
          description: Found ImportJob
      security:
      - jwt-bearer:
        - user
      summary: Get ImportJob
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
    post:
      description: Update an ImportJob
      operationId: jobs_id_post
      parameters:
      - description: Unique identifier of ImportJob to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJob'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
          description: Updated ImportJob
      summary: Update ImportJob
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
      x-codegen-request-body-name: body
    summary: This path or subpaths operations deal with specific ImportJob having
      given id
  /jobs/{id}/activate:
    put:
      description: "Make an ImportJob active, so that it is executed"
      operationId: activate_import_job
      parameters:
      - description: Unique identifier of ImportJob to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
          description: ImportJob is activated
      security:
      - jwt-bearer:
        - user
      summary: Activate an ImportJob
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
  /jobs/{id}/start:
    put:
      description: Starting an ImportJob forces it to immediatly import mock definitions
      operationId: start_import_job
      parameters:
      - description: Unique identifier of ImportJob to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
          description: Started ImportJob
      security:
      - jwt-bearer:
        - user
      summary: Start an ImportJob
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
  /jobs/{id}/stop:
    put:
      description: "Stopping an ImportJob desactivate it, so that it won't execute\
        \ at next schedule"
      operationId: stop_import_job
      parameters:
      - description: Unique identifier of ImportJob to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
          description: Stopped ImportJob
      security:
      - jwt-bearer:
        - user
      summary: Stop an ImportJob
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
  /keycloak/config:
    get:
      operationId: get_keycloak_config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeycloakConfig'
          description: Get current configuration
      summary: Get authentification configuration
      tags:
      - config
      x-openapi-router-controller: openapi_server.controllers.config_controller
    summary: Keycloak Authentification configuration
  /metrics/conformance/aggregate:
    get:
      operationId: get_conformance_metrics_aggregation
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WeightedMetricValue'
                type: array
          description: Get aggregated coverage metric value
      summary: Get aggregation of conformance metrics
      tags:
      - metrics
      x-openapi-router-controller: openapi_server.controllers.metrics_controller
    summary: Aggregation of Test conformance metrics
  /metrics/conformance/service/{serviceId}:
    get:
      operationId: get_service_test_conformance_metric
      parameters:
      - description: Unique Services identifier this metrics are related to
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestConformanceMetric'
          description: Test coverage metric for Service
      summary: Get conformance metrics for a Service
      tags:
      - metrics
      x-openapi-router-controller: openapi_server.controllers.metrics_controller
    summary: Test Conformance metrics on API and Services
  /metrics/invocations/global:
    get:
      operationId: get_aggregated_invocations_stats
      parameters:
      - description: The day to get statistics for (formatted with yyyyMMdd pattern).
          Default to today if not provided.
        explode: true
        in: query
        name: day
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyInvocationStatistic'
          description: Aggregated invocation statistics for specified day
      summary: Get aggregated invocation statistics for a day
      tags:
      - metrics
      x-openapi-router-controller: openapi_server.controllers.metrics_controller
    summary: Invocation Statistics across Services and APIs
  /metrics/invocations/global/latest:
    get:
      operationId: get_latest_aggregated_invocations_stats
      parameters:
      - description: Number of days to get back in time. Default is 20.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterMap'
          description: A map where keys are day (formatted using yyyyMMdd pattern)
            and values are counter of invocations on this day
      summary: Get aggregated invocations statistics for latest days
      tags:
      - metrics
      x-openapi-router-controller: openapi_server.controllers.metrics_controller
    summary: Latest Invocation Statistics across Services and APIs
  /metrics/invocations/top:
    get:
      operationId: get_top_ivnocations_stats_by_day
      parameters:
      - description: The day to get statistics for (formatted with yyyyMMdd pattern).
          Default to today if not provided.
        explode: true
        in: query
        name: day
        required: false
        schema:
          type: string
        style: form
      - description: The number of top invoked mocks to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DailyInvocationStatistic'
                type: array
          description: Top invocations for a defined day
      summary: Get top invocation statistics for a day
      tags:
      - metrics
      x-openapi-router-controller: openapi_server.controllers.metrics_controller
    summary: Top Invocation Statistics across Services and APIs
  /metrics/invocations/{serviceName}/{serviceVersion}:
    get:
      operationId: get_invocation_stats_by_service
      parameters:
      - description: Name of service to get statistics for
        explode: false
        in: path
        name: serviceName
        required: true
        schema:
          type: string
        style: simple
      - description: Version of service to get statistics for
        explode: false
        in: path
        name: serviceVersion
        required: true
        schema:
          type: string
        style: simple
      - description: The day to get statistics for (formatted with yyyyMMdd pattern).
          Default to today if not provided.
        explode: true
        in: query
        name: day
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyInvocationStatistic'
          description: Invocation statistics for service for specified day
      summary: Get invocation statistics for Service
      tags:
      - metrics
      x-openapi-router-controller: openapi_server.controllers.metrics_controller
    summary: Invocation Statistics for API and Services
  /metrics/tests/latest:
    get:
      operationId: get_latest_test_results
      parameters:
      - description: Number of days to consider for test results to return. Default
          is 7 (one week)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TestResultSummary'
                type: array
          description: Test results summary for specified <limit> last days.
      summary: Get latest tests results
      tags:
      - metrics
      x-openapi-router-controller: openapi_server.controllers.metrics_controller
    summary: Lastest Test results across Services and APIs
  /resources/service/{serviceId}:
    get:
      operationId: get_resources_by_service
      parameters:
      - description: Unique identifier of the Service or API the resources are attached
          to
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Resource'
                type: array
          description: List the resources attached to a Service or API
      security:
      - jwt-bearer:
        - user
      summary: Get Resources by Service
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /resources/{name}:
    get:
      operationId: get_resource
      parameters:
      - description: Unique name/business identifier of the Service or API resource
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Retrieve the resource having this name
      security:
      - jwt-bearer:
        - user
      summary: Get Resource
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /secrets:
    get:
      operationId: get_secrets
      parameters:
      - description: Page of Secrets to retrieve (starts at and defaults to 0)
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Size of a page. Maximum number of Secrets to include in a response
          (defaults to 20)
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
          description: List of found Secrets
      security:
      - jwt-bearer:
        - user
      summary: Get Secrets
      tags:
      - config
      x-openapi-router-controller: openapi_server.controllers.config_controller
    post:
      operationId: create_secret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: Created Secret
      security:
      - jwt-bearer:
        - admin
      summary: Create a new Secret
      tags:
      - config
      x-openapi-router-controller: openapi_server.controllers.config_controller
      x-codegen-request-body-name: body
    summary: This path operations deal with Secrets
  /secrets/count:
    get:
      operationId: get_secrets_counter
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counter'
          description: Number of Secrets in datastore
      security:
      - jwt-bearer:
        - user
      summary: Get the Secrets counter
      tags:
      - config
      x-openapi-router-controller: openapi_server.controllers.config_controller
  /secrets/{id}:
    delete:
      description: Delete a Secret
      operationId: delete_secret
      parameters:
      - description: Unique identifier of Secret to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Secret has been deleted
      security:
      - jwt-bearer:
        - admin
      summary: Delete Secret
      tags:
      - config
      x-openapi-router-controller: openapi_server.controllers.config_controller
    get:
      description: Retrieve a Secret
      operationId: get_secret
      parameters:
      - description: Unique identifier of Secret to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: Found Secret
      security:
      - jwt-bearer:
        - admin
      summary: Get Secret
      tags:
      - config
      x-openapi-router-controller: openapi_server.controllers.config_controller
    put:
      description: Update a Secret
      operationId: update_secret
      parameters:
      - description: Unique identifier of Secret to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Updated Secret
      security:
      - jwt-bearer:
        - admin
      summary: Update Secret
      tags:
      - config
      x-openapi-router-controller: openapi_server.controllers.config_controller
  /services:
    get:
      operationId: get_services
      parameters:
      - description: Page of Services to retrieve (starts at and defaults to 0)
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Size of a page. Maximum number of Services to include in a response
          (defaults to 20)
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: List of found Services
      security:
      - jwt-bearer:
        - user
      summary: Get Services and APIs
      tags:
      - mock
      x-openapi-router-controller: openapi_server.controllers.mock_controller
    summary: This path operations deal with Services
  /services/count:
    get:
      operationId: get_services_counter
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counter'
          description: Number of Services in datastore
      security:
      - jwt-bearer:
        - user
      summary: Get the Services counter
      tags:
      - mock
      x-openapi-router-controller: openapi_server.controllers.mock_controller
  /services/labels:
    get:
      operationId: get_services_labels
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsMap'
          description: "Already used labels: keys are label Keys, values are array\
            \ of label Values"
      security:
      - jwt-bearer:
        - admin
      summary: Get the already used labels for Services
      tags:
      - mock
      x-openapi-router-controller: openapi_server.controllers.mock_controller
  /services/search:
    get:
      operationId: search_services
      parameters:
      - description: Map of criterion. Key can be simply 'name' with value as the
          searched string. You can also search by label using keys like 'labels.x'
          where 'x' is the label and value the label value
        explode: true
        in: query
        name: queryMap
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
          description: List of found Services (filtered according search criteria)
      security:
      - jwt-bearer:
        - user
      summary: Search for Services and APIs
      tags:
      - mock
      x-openapi-router-controller: openapi_server.controllers.mock_controller
  /services/{id}:
    delete:
      description: Delete a Service
      operationId: delete_service
      parameters:
      - description: Unique identifier of Service to managed
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Service has been deleted
      security:
      - jwt-bearer:
        - admin
        - manager
      summary: Delete Service
      tags:
      - mock
      x-openapi-router-controller: openapi_server.controllers.mock_controller
    get:
      operationId: get_service
      parameters:
      - description: Unique identifier of Service to managed
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include details on services messages into result.
          Default is false
        explode: true
        in: query
        name: messages
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetService_200_response'
          description: ""
      security:
      - jwt-bearer:
        - user
      summary: Get Service
      tags:
      - mock
      x-openapi-router-controller: openapi_server.controllers.mock_controller
  /services/{id}/metadata:
    put:
      operationId: update_service_metadata
      parameters:
      - description: Unique identifier of Service to managed
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Service metadata has been updated
        "500":
          description: Update of metadata failed
      security:
      - jwt-bearer:
        - admin
        - manager
      summary: Update Service Metadata
      tags:
      - mock
      x-openapi-router-controller: openapi_server.controllers.mock_controller
      x-codegen-request-body-name: body
  /services/{id}/operation:
    put:
      operationId: override_service_operation
      parameters:
      - description: Unique identifier of Service to managed
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Name of operation to update
        explode: true
        in: query
        name: operationName
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationOverrideDTO'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Operation has been updated
        "500":
          description: Operation cannot be updated
      security:
      - jwt-bearer:
        - admin
        - manager
      summary: Override Service Operation
      tags:
      - mock
      x-openapi-router-controller: openapi_server.controllers.mock_controller
      x-codegen-request-body-name: body
  /tests:
    post:
      operationId: create_test
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRequest'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResult'
          description: Created TestResult (empty shell cause tests are executed asynchronously)
      security:
      - jwt-bearer:
        - user
      summary: Create a new Test
      tags:
      - test
      x-openapi-router-controller: openapi_server.controllers.test_controller
      x-codegen-request-body-name: body
  /tests/service/{serviceId}:
    get:
      operationId: get_test_results_by_service
      parameters:
      - description: Unique identifier of Service to manage TestResults for
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TestResult'
                type: array
          description: List of TestResults for the Service having the requested id
      security:
      - jwt-bearer:
        - user
      summary: Get TestResults by Service
      tags:
      - test
      x-openapi-router-controller: openapi_server.controllers.test_controller
  /tests/service/{serviceId}/count:
    get:
      operationId: get_test_results_by_service_counter
      parameters:
      - description: Unique identifier of Service to manage TestResults for
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counter'
          description: Number of TestResults for this Service in datastore
      security:
      - jwt-bearer:
        - user
      summary: Get the TestResults for Service counter
      tags:
      - test
      x-openapi-router-controller: openapi_server.controllers.test_controller
  /tests/{id}:
    get:
      description: ""
      operationId: get_test_result
      parameters:
      - description: Unique identifier of TestResult to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResult'
          description: Requested TestResult
      security:
      - jwt-bearer:
        - user
      summary: Get TestResult
      tags:
      - test
      x-openapi-router-controller: openapi_server.controllers.test_controller
  /tests/{id}/events/{testCaseId}:
    get:
      operationId: get_events_by_test_case
      parameters:
      - description: Unique identifier of TestResult to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Unique identifier of TetsCaseResult to manage
        explode: false
        in: path
        name: testCaseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UnidirectionalEvent'
                type: array
          description: List of event messages for this TestCase
      summary: Get events for TestCase
      tags:
      - test
      x-openapi-router-controller: openapi_server.controllers.test_controller
  /tests/{id}/messages/{testCaseId}:
    get:
      operationId: get_messages_by_test_case
      parameters:
      - description: Unique identifier of TestResult to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Unique identifier of TetsCaseResult to manage
        explode: false
        in: path
        name: testCaseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RequestResponsePair'
                type: array
          description: List of request and response messages for this TestCase
      security:
      - jwt-bearer:
        - user
      summary: Get messages for TestCase
      tags:
      - test
      x-openapi-router-controller: openapi_server.controllers.test_controller
  /tests/{id}/testCaseResult:
    post:
      description: Report a TestCaseResult (typically used by a Test runner)
      operationId: report_test_case_result
      parameters:
      - description: Unique identifier of TestResult to manage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseReturnDTO'
        description: TestCase return wrapper object
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCaseResult'
          description: TestCaseResult is reported
      summary: Report and create a new TestCaseResult
      tags:
      - test
      x-openapi-router-controller: openapi_server.controllers.test_controller
      x-codegen-request-body-name: body
components:
  responses:
    ServiceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetService_200_response'
      description: ""
  schemas:
    AbstractExchange:
      description: Abstract bean representing a Service or API Exchange.
      properties:
        type:
          description: Discriminant type for identifying kind of exchange
          enum:
          - reqRespPair
          - unidirEvent
          title: type
          type: string
      required:
      - type
      title: AbstractExchange
      type: object
    ArtifactUpload:
      description: |-
        Artifact to be imported by Microcks.
        This structure represents a mime-multipart file upload (as specified here: https://swagger.io/docs/specification/describing-request-body/file-upload/)
      properties:
        file:
          description: The artifact to upload
          format: binary
          type: string
      required:
      - file
      type: object
    Binding:
      description: Protocol binding details for asynchronous operations
      example:
        method: method
        qoS: qoS
        destinationName: destinationName
        destinationType: destinationType
        keyType: keyType
        persistent: true
        type: KAFKA
      properties:
        destinationName:
          description: Name of destination for asynchronous messages of this operation
          title: destinationName
          type: string
        destinationType:
          description: Type of destination for asynchronous messages of this operation
          title: destinationType
          type: string
        keyType:
          description: Type of key for Kafka messages
          title: keyType
          type: string
        method:
          description: HTTP method for WebSocket binding
          title: method
          type: string
        persistent:
          description: Persistent attribute for MQTT binding
          title: persistent
          type: boolean
        qoS:
          description: Quality of Service attribute for MQTT binding
          title: qoS
          type: string
        type:
          description: Protocol binding identifier
          enum:
          - KAFKA
          - MQTT
          - WS
          - AMQP
          - NATS
          - GOOGLEPUBSUB
          title: type
          type: string
      required:
      - destinationName
      - type
      title: Binding
      type: object
    Counter:
      description: A simple Counter type.
      example: |-
        {
            "counter": 12
        }
      properties:
        counter:
          description: Number of items in a resource collection
          format: int32
          type: integer
      title: Counter
      type: object
    CounterMap:
      additionalProperties:
        format: integer
        type: number
      description: A generic map of counter
      type: object
    DailyInvocationStatistic:
      description: The daily statistic of a service mock invocations
      example:
        serviceVersion: serviceVersion
        hourlyCount:
          key: ""
        minuteCount:
          key: ""
        id: id
        serviceName: serviceName
        day: day
        dailyCount: 0.8008281904610115
      properties:
        dailyCount:
          description: The number of service mock invocations on this day
          title: dailyCount
          type: number
        day:
          description: The day (formatted as yyyyMMdd string) represented by this
            statistic
          title: day
          type: string
        hourlyCount:
          additionalProperties: true
          description: The number of service mock invocations per hour of the day
            (keys range from 0 to 23)
          title: hourlyCount
          type: object
        id:
          description: Unique identifier of this statistic object
          title: id
          type: string
        minuteCount:
          additionalProperties: true
          description: The number of service mock invocations per minute of the day
            (keys range from 0 to 1439)
          title: minuteCount
          type: object
        serviceName:
          description: The name of the service this statistic is related to
          title: serviceName
          type: string
        serviceVersion:
          description: The version of the service this statistic is related to
          title: serviceVersion
          type: string
      required:
      - dailyCount
      - day
      - id
      - serviceName
      - serviceVersion
      title: DailyInvocationStatistic
      type: object
    EventMessage:
      description: ""
      example:
        headers:
        - values:
          - values
          - values
          name: name
        - values:
          - values
          - values
          name: name
        name: name
        operationId: operationId
        mediaType: mediaType
        id: id
        content: content
        testCaseId: testCaseId
      properties:
        content:
          description: Body content for this message
          title: content
          type: string
        headers:
          description: Headers for this message
          items:
            $ref: '#/components/schemas/Header'
          title: headers
          type: array
        id:
          description: Unique identifier of this message
          title: id
          type: string
        mediaType:
          description: Content type of message
          title: mediaType
          type: string
        name:
          description: Unique distinct name of this message
          title: name
          type: string
        operationId:
          description: Identifier of Operation this message is associated to
          title: operationId
          type: string
        testCaseId:
          description: Unique identifier of TestCase this message is attached (in
            case of a test)
          title: testCaseId
          type: string
      required:
      - id
      - mediaType
      title: EventMessage
      type: object
    Exchange:
      description: "Abstract representation of a Service or API exchange type (request/response,\
        \ event based, ...)"
      discriminator:
        mapping:
          reqRespPair: '#/components/schemas/RequestResponsePair'
          unidirEvent: '#/components/schemas/UnidirectionalEvent'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/RequestResponsePair'
      - $ref: '#/components/schemas/UnidirectionalEvent'
      title: Exchange
    FeaturesConfig:
      additionalProperties: true
      description: Representation of optional features configuration used by Microcks
        server
      example:
        async-api:
          default-binding: KAFKA
          enabled: "false"
          endpoint-KAFKA: my-cluster-kafka-bootstrap.apps.try.microcks.io
          endpoint-MQTT: my-mqtt-broker.apps.try.microcks.io
          endpoint-WS: localhost:8081
          frequencies: "3,10,30"
        microcks-hub:
          allowed-roles: "admin,manager,manager-any"
          enabled: "true"
          endpoint: https://hub.microcks.io/api
        repository-filter:
          enabled: "true"
          label-key: domain
          label-label: Domain
          label-list: "domain,status"
        repository-tenancy:
          artifact-import-allowed-roles: "admin,manager,manager-any"
          enabled: "false"
      properties:
        async-api:
          $ref: '#/components/schemas/FeaturesConfig_async_api'
        microcks-hub:
          $ref: '#/components/schemas/FeaturesConfig_microcks_hub'
        repository-filter:
          $ref: '#/components/schemas/FeaturesConfig_repository_filter'
        repository-tenancy:
          $ref: '#/components/schemas/FeaturesConfig_repository_tenancy'
      title: Root Type for FeaturesConfig
      type: object
    Header:
      description: Transport headers for both Requests and Responses
      example:
        values:
        - values
        - values
        name: name
      properties:
        name:
          description: Unique distinct name of this Header
          title: name
          type: string
        values:
          description: Values for this Header
          items:
            type: string
          title: values
          type: array
      required:
      - name
      - values
      title: Header
      type: object
    HeaderDTO:
      description: Data Transfert Object for headers of both Requests and Responses
      example:
        values: values
        name: name
      properties:
        name:
          description: Unique distinct name of this Header
          title: name
          type: string
        values:
          description: Values for this header (comma separated strings)
          title: values
          type: string
      required:
      - name
      - values
      title: HeaderDTO
      type: object
    ImportJob:
      description: An ImportJob allow defining a repository artifact to poll for discovering
        Services and APIs mocks and tests
      example:
        metadata:
          lastUpdate: 6
          annotations:
            key: annotations
          createdOn: 0
          labels:
            key: labels
        mainArtifact: true
        repositoryDisableSSLValidation: true
        secretRef: |-
          {
              "secretId": "5be58fb51ed744d1b87481bd",
              "name": "Gogs internal"
          }
        active: true
        frequency: frequency
        repositoryUrl: repositoryUrl
        createdDate: 2000-01-23T04:56:07.000+00:00
        lastImportError: lastImportError
        lastImportDate: 2000-01-23T04:56:07.000+00:00
        name: name
        etag: etag
        id: id
        serviceRefs:
        - name: name
          serviceId: serviceId
          version: version
        - name: name
          serviceId: serviceId
          version: version
      properties:
        active:
          description: Whether this ImportJob is active (ie. scheduled for execution)
          title: active
          type: boolean
        createdDate:
          description: Creation date for this ImportJob
          format: date-time
          title: createdDate
          type: string
        etag:
          description: Etag of repository URL during previous import. Is used for
            not re-importing if no recent changes
          title: etag
          type: string
        frequency:
          description: Reserved for future usage
          title: frequency
          type: string
        id:
          description: Unique identifier of ImportJob
          title: id
          type: string
        lastImportDate:
          description: Date last import was done
          format: date-time
          title: lastImportDate
          type: string
        lastImportError:
          description: Error message of last import (if any)
          title: lastImportError
          type: string
        mainArtifact:
          description: Flag telling if considered as primary or secondary artifact.
            Default to `true`
          title: mainArtifact
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: Unique distinct name of this ImportJob
          title: name
          type: string
        repositoryDisableSSLValidation:
          description: Whether to disable SSL certificate verification when checking
            repository
          title: repositoryDisableSSLValidation
          type: boolean
        repositoryUrl:
          description: URL of mocks and tests repository artifact
          title: repositoryUrl
          type: string
        secretRef:
          $ref: '#/components/schemas/SecretRef'
        serviceRefs:
          description: References of Services discovered when checking repository
          items:
            $ref: '#/components/schemas/ServiceRef'
          title: serviceRefs
          type: array
      required:
      - name
      - repositoryUrl
      title: ImportJob
    KeycloakConfig:
      description: Representation of Keycloak / SSO configuration used by Microcks
        server
      example:
        public-client: public-client
        resource: resource
        realm: realm
        auth-server-url: auth-server-url
        ssl-required: none
        enabled: true
      properties:
        auth-server-url:
          description: SSO Server authentication url
          title: auth-server-url
          type: string
        enabled:
          description: Whether Keycloak authentification and usage is enabled
          title: enabled
          type: boolean
        public-client:
          description: Name of public-client that can be used for requesting OAuth
            token
          title: public-client
          type: string
        realm:
          description: Authentication realm name
          title: realm
          type: string
        resource:
          description: Name of Keycloak resource/application used on client side
          title: resource
          type: string
        ssl-required:
          description: SSL certificates requirements
          enum:
          - none
          - external
          title: ssl-required
          type: string
      required:
      - auth-server-url
      - enabled
      - public-client
      - realm
      - resource
      - ssl-required
      title: KeycloakConfig
      type: object
    LabelsMap:
      additionalProperties:
        $ref: '#/components/schemas/StringArray'
      description: A map which keys are already used labels keys and values are already
        used values for this key
      type: object
    MessageArray:
      description: Array of Message for Service operations
      items:
        $ref: '#/components/schemas/Exchange'
      title: MessageArray
      type: array
    Metadata:
      description: Commodity object for holding metadata on any entity. This object
        is inspired by Kubernetes metadata.
      example:
        lastUpdate: 6
        annotations:
          key: annotations
        createdOn: 0
        labels:
          key: labels
      properties:
        annotations:
          additionalProperties:
            type: string
          description: Annotations of attached object
          title: annotations
          type: object
        createdOn:
          description: Creation date of attached object
          title: createdOn
          type: integer
        labels:
          additionalProperties:
            type: string
          description: Labels put on attached object
          title: labels
          type: object
        lastUpdate:
          description: Last update of attached object
          title: lastUpdate
          type: integer
      required:
      - createdOn
      - lastUpdate
      title: Metadata
      type: object
    Operation:
      description: An Operation of a Service or API
      example:
        parameterContraints:
        - in: path
          mustMatchRegexp: mustMatchRegexp
          name: name
          recopy: true
          required: true
        - in: path
          mustMatchRegexp: mustMatchRegexp
          name: name
          recopy: true
          required: true
        outputName: outputName
        method: method
        bindings:
          key:
            method: method
            qoS: qoS
            destinationName: destinationName
            destinationType: destinationType
            keyType: keyType
            persistent: true
            type: KAFKA
        resourcePaths:
        - resourcePaths
        - resourcePaths
        defaultDelay: 0.8008281904610115
        name: name
        dispatcherRules: dispatcherRules
        dispatcher: dispatcher
        inputName: inputName
      properties:
        bindings:
          additionalProperties:
            $ref: '#/components/schemas/Binding'
          description: Map of protocol binding details for this operation
          title: bindings
          type: object
        defaultDelay:
          description: Default response time delay for mocks
          title: defaultDelay
          type: number
        dispatcher:
          description: Dispatcher strategy used for mocks
          title: dispatcher
          type: string
        dispatcherRules:
          description: DispatcherRules used for mocks
          title: dispatcherRules
          type: string
        inputName:
          description: Name of input parameters in case of Xml based Service
          title: inputName
          type: string
        method:
          description: Represents transport method
          title: method
          type: string
        name:
          description: Unique name of this Operation within Service scope
          title: name
          type: string
        outputName:
          description: Name of output parameters in case of Xml based Service
          title: outputName
          type: string
        parameterContraints:
          description: Contraints that may apply to mock invocatino on this operation
          items:
            $ref: '#/components/schemas/ParameterConstraint'
          title: parameterContraints
          type: array
        resourcePaths:
          description: Paths the mocks endpoints are mapped on
          items:
            type: string
          title: resourcePaths
          type: array
      required:
      - method
      - name
      title: Operation
      type: object
    OperationHeaders:
      additionalProperties:
        items:
          $ref: '#/components/schemas/HeaderDTO'
        type: array
      description: "Specification of additional headers for a Service/API operations.\
        \ Keys are operation name or \"globals\" (if header applies to all), values\
        \ are Header objects DTO."
      title: operationHeaders
      type: object
    OperationOverrideDTO:
      description: Data Transfer object for grouping the mutable properties of an
        Operation
      example:
        parameterConstraints:
        - in: path
          mustMatchRegexp: mustMatchRegexp
          name: name
          recopy: true
          required: true
        - in: path
          mustMatchRegexp: mustMatchRegexp
          name: name
          recopy: true
          required: true
        defaultDelay: 0
        dispatcherRules: dispatcherRules
        dispatcher: dispatcher
      properties:
        defaultDelay:
          description: Default delay in milliseconds to apply to mock responses on
            this operation
          title: defaultDelay
          type: integer
        dispatcher:
          description: Type of dispatcher to apply for this operation
          title: dispatcher
          type: string
        dispatcherRules:
          description: Rules of dispatcher for this operation
          title: dispatcherRules
          type: string
        parameterConstraints:
          description: Constraints that may apply to incoming parameters on this operation
          items:
            $ref: '#/components/schemas/ParameterConstraint'
          title: parameterConstraints
          type: array
      title: OperationOverrideDTO
      type: object
    ParameterConstraint:
      description: Companion object for Operation that may be used to express constraints
        on request parameters
      example:
        in: path
        mustMatchRegexp: mustMatchRegexp
        name: name
        recopy: true
        required: true
      properties:
        in:
          description: Parameter location
          enum:
          - path
          - query
          - header
          title: in
          type: string
        mustMatchRegexp:
          description: Whether it's a regular expression matching constraint
          title: mustMatchRegexp
          type: string
        name:
          description: Parameter name
          title: name
          type: string
        recopy:
          description: Whether it's a recopy constraint
          title: recopy
          type: boolean
        required:
          description: Whether it's a required constraint
          title: required
          type: boolean
      required:
      - name
      title: ParameterConstraint
      type: object
    Request:
      description: A mock invocation or test request
      example:
        headers:
        - values:
          - values
          - values
          name: name
        - values:
          - values
          - values
          name: name
        name: name
        operationId: operationId
        id: id
        content: content
        testCaseId: testCaseId
      properties:
        content:
          description: Body content for this request
          title: content
          type: string
        headers:
          description: Headers for this Request
          items:
            $ref: '#/components/schemas/Header'
          title: headers
          type: array
        id:
          description: Unique identifier of Request
          title: id
          type: string
        name:
          description: Unique distinct name of this Request
          title: name
          type: string
        operationId:
          description: Identifier of Operation this Request is associated to
          title: operationId
          type: string
        testCaseId:
          description: Unique identifier of TestCase this Request is attached (in
            case of a test)
          title: testCaseId
          type: string
      required:
      - name
      - operationId
      title: Request
    RequestResponsePair:
      allOf:
      - properties:
          request:
            $ref: '#/components/schemas/Request'
          response:
            $ref: '#/components/schemas/Response'
        required:
        - request
        - response
        type: object
      - $ref: '#/components/schemas/AbstractExchange'
      description: Request associated with corresponding Response
      example:
        request:
          headers:
          - values:
            - values
            - values
            name: name
          - values:
            - values
            - values
            name: name
          name: name
          operationId: operationId
          id: id
          content: content
          testCaseId: testCaseId
        response:
          headers:
          - values:
            - values
            - values
            name: name
          - values:
            - values
            - values
            name: name
          name: name
          operationId: operationId
          id: id
          content: content
          testCaseId: testCaseId
        type: reqRespPair
      title: RequestResponsePair
      type: object
    Resource:
      description: "Resource represents a Service or API artifacts such as specification,\
        \ contract"
      example:
        path: path
        sourceArtifact: sourceArtifact
        name: name
        id: id
        serviceId: serviceId
        type: WSDL
        content: content
      properties:
        content:
          description: String content of this resource
          title: content
          type: string
        id:
          description: Uniquer identifier of this Service or API Resource
          title: id
          type: string
        name:
          description: Unique name/business identifier for this Service or API resource
          title: name
          type: string
        path:
          description: Relatvie path of this resource regarding main resource
          title: path
          type: string
        serviceId:
          description: Unique identifier of the Servoce or API this resource is attached
            to
          title: serviceId
          type: string
        sourceArtifact:
          description: Short name of the artifact this resource was extracted from
          title: sourceArtifact
          type: string
        type:
          $ref: '#/components/schemas/ResourceType'
      required:
      - content
      - id
      - name
      - serviceId
      - type
      title: Resource
      type: object
    ResourceType:
      description: Types of managed resources for Services or APIs
      enum:
      - WSDL
      - XSD
      - JSON_SCHEMA
      - OPEN_API_SPEC
      - OPEN_API_SCHEMA
      - ASYNC_API_SPEC
      - ASYNC_API_SCHEMA
      - AVRO_SCHEMA
      - PROTOBUF_SCHEMA
      - PROTOBUF_DESCRIPTION
      - GRAPHQL_SCHEMA
      title: ResourceType
      type: string
    Response:
      description: A mock invocation or test response
      example:
        headers:
        - values:
          - values
          - values
          name: name
        - values:
          - values
          - values
          name: name
        name: name
        operationId: operationId
        id: id
        content: content
        testCaseId: testCaseId
      properties:
        content:
          description: Body content of this Response
          title: content
          type: string
        headers:
          description: Headers for this Response
          items:
            $ref: '#/components/schemas/Header'
          title: headers
          type: array
        id:
          description: Unique identifier of Response
          title: id
          type: string
        name:
          description: Unique distinct name of this Response
          title: name
          type: string
        operationId:
          description: Identifier of Operation this Response is associated to
          title: operationId
          type: string
        testCaseId:
          description: Unique identifier of TestCase this Response is attached (in
            case of a test)
          title: testCaseId
          type: string
      required:
      - name
      - operationId
      title: Response
    Secret:
      description: A Secret allows grouping informations on how to access a restricted
        resource such as a repsoitory URL. Secrets are typically used by ImpoortJobs.
      example: |-
        {
            "id": "5be58fb51ed744d1b87481bd",
            "name": "Gogs internal",
            "description": "Gogs internal corporate repository",
            "username": "team",
            "password": "team",
            "caCertPem": "-----BEGIN CERTIFICATE-----\nMIIC6jCCAdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\nc2hpZnQtc2lnbmVyQDE1MzE5MTA5MDIwHhcNMTgwNzE4MTA0ODIyWhcNMjMwNzE3\nMTA0ODIzWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MzE5MTA5MDIw\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCyaP1jlpnm8WpfCSnUa8Qt\nhdUynOLLgElUtpWoW25wB9tO2ZmEj+fVsTyzEsW8+nfXXfRsBEzPm2ze9uEMTPTB\nAY0k7DbLZfjmF1lCckUvvh1rR/8hoPuXETjXUuOdtm7gRHTOxLQyH2Qi/q0DYJAn\nprKyRCLa35pRnykL6v4bHkqFnqDEho63i29XHhm2703moh4YCl1iYa2Rh6D44cjn\n8lBCq6o7zoZSmc/aBamRkQrfZYcolR8OUtDS4oEB0zMftmea2ycashsLEMB+Cq4r\n64NI2QM7qOxdTuXsDivHfLl7RTuWEOozGaJXoiPaGU/3d/KnY0gKJ2TC1KXt6Xjn\nAgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\nSIb3DQEBCwUAA4IBAQCeUmxfUzw0VAFG6HvVYIsfvumiIvsSWmclGIZqNJyfMHFD\nMy6xzPRNNfWe5aumGTJsuIzuXfDRcdO7KmH1d2/5brkvWpxp6svVrYPvcoXjl4VN\nQR2mv5Di4KHfiiwvP3eeewjUZj+uREGqX2fcbJPHTPy32Kpb0H8Uy09BklhjC7QP\ngRAGexPhU1oBL/CoOwbHKcQ6dxs/y1SxzI8gXEtec4z62CroI13iT7U0UjSqFBE4\nKfrJombfz0d68781Z40ll+8my251ZNfbLBhQ3UHW0JnkBEQkE1aBorUoj2iakYvx\nA2qZh+8q2b8MwMb2YsQ0dlxKd6c4tN3lmMnO4bnd\n-----END CERTIFICATE-----"
        }
      properties:
        caCertPem:
          type: string
        description:
          description: Description of this Secret
          type: string
        id:
          description: Unique identifier of Secret
          type: string
        name:
          description: Unique distinct name of Secret
          type: string
        password:
          type: string
        token:
          type: string
        tokenHeader:
          type: string
        username:
          type: string
      required:
      - description
      - name
      title: Secret
    SecretRef:
      description: Lightweight reference for an existing Secret
      example: |-
        {
            "secretId": "5be58fb51ed744d1b87481bd",
            "name": "Gogs internal"
        }
      properties:
        name:
          description: Distinct name of the referenced Secret
          type: string
        secretId:
          description: Unique identifier or referenced Secret
          type: string
      required:
      - name
      - secretId
      title: SecretRef
    Service:
      description: Represents a Service or API definition as registred into Microcks
        repository
      example:
        metadata:
          lastUpdate: 6
          annotations:
            key: annotations
          createdOn: 0
          labels:
            key: labels
        xmlNS: xmlNS
        operations:
        - parameterContraints:
          - in: path
            mustMatchRegexp: mustMatchRegexp
            name: name
            recopy: true
            required: true
          - in: path
            mustMatchRegexp: mustMatchRegexp
            name: name
            recopy: true
            required: true
          outputName: outputName
          method: method
          bindings:
            key:
              method: method
              qoS: qoS
              destinationName: destinationName
              destinationType: destinationType
              keyType: keyType
              persistent: true
              type: KAFKA
          resourcePaths:
          - resourcePaths
          - resourcePaths
          defaultDelay: 0.8008281904610115
          name: name
          dispatcherRules: dispatcherRules
          dispatcher: dispatcher
          inputName: inputName
        - parameterContraints:
          - in: path
            mustMatchRegexp: mustMatchRegexp
            name: name
            recopy: true
            required: true
          - in: path
            mustMatchRegexp: mustMatchRegexp
            name: name
            recopy: true
            required: true
          outputName: outputName
          method: method
          bindings:
            key:
              method: method
              qoS: qoS
              destinationName: destinationName
              destinationType: destinationType
              keyType: keyType
              persistent: true
              type: KAFKA
          resourcePaths:
          - resourcePaths
          - resourcePaths
          defaultDelay: 0.8008281904610115
          name: name
          dispatcherRules: dispatcherRules
          dispatcher: dispatcher
          inputName: inputName
        name: name
        id: id
        type: REST
        version: version
      properties:
        id:
          description: Unique identifier for this Service or API
          title: id
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: Distinct name for this Service or API (maybe shared among many
            versions)
          title: name
          type: string
        operations:
          description: Set of Operations for Service or API
          items:
            $ref: '#/components/schemas/Operation'
          title: operations
          type: array
        type:
          description: Service or API Type
          enum:
          - REST
          - SOAP_HTTP
          - GENERIC_REST
          - GENERIC_EVENT
          - EVENT
          - GRPC
          - GRAPHQL
          title: type
          type: string
        version:
          description: Distinct version for a named Service or API
          title: version
          type: string
        xmlNS:
          description: Associated Xml Namespace in case of Xml based Service
          title: xmlNS
          type: string
      required:
      - name
      - type
      - version
      title: Service
    ServiceRef:
      description: Lightweight reference of an existing Service
      example:
        name: name
        serviceId: serviceId
        version: version
      properties:
        name:
          description: The Service name
          title: name
          type: string
        serviceId:
          description: Unique reference of a Service
          title: serviceId
          type: string
        version:
          description: The Service version
          title: version
          type: string
      required:
      - name
      - serviceId
      - version
      title: ServiceRef
    ServiceView:
      description: Aggregate bean for grouping a Service an its messages pairs
      properties:
        messagesMap:
          additionalProperties:
            $ref: '#/components/schemas/MessageArray'
          description: "Map of messages for this Service. Keys are operation name,\
            \ values are array of messages for this operation"
          title: messagesMap
          type: object
        service:
          $ref: '#/components/schemas/Service'
      required:
      - messagesMap
      - service
      title: ServiceView
      type: object
    SnapshotUpload:
      description: Upload of a repository snapshot file
      properties:
        file:
          description: The repository snapshot file
          format: binary
          type: string
      required:
      - file
      type: object
    StringArray:
      description: A simple array of String
      items:
        type: string
      title: StringArray
      type: array
    TestCaseResult:
      description: Companion objects for TestResult. Each TestCaseResult correspond
        to a particuliar service operation / action reference by the operationName
        field. TestCaseResults owns a collection of TestStepResults (one for every
        request associated to service operation / action).
      example:
        testStepResults:
        - eventMessageName: eventMessageName
          requestName: requestName
          success: true
          message: message
          elapsedTime: 1.4658129805029452
        - eventMessageName: eventMessageName
          requestName: requestName
          success: true
          message: message
          elapsedTime: 1.4658129805029452
        success: true
        operationName: operationName
        elapsedTime: 6.027456183070403
      properties:
        elapsedTime:
          description: Elapsed time in milliseconds since the test case beginning
          title: elapsedTime
          type: number
        operationName:
          description: Name of operation this test case is bound to
          title: operationName
          type: string
        success:
          description: Flag telling if test case is a success
          title: success
          type: boolean
        testStepResults:
          description: Test steps associated to this test case
          items:
            $ref: '#/components/schemas/TestStepResult'
          title: testStepResults
          type: array
      required:
      - elapsedTime
      - operationName
      - success
      title: TestCaseResult
    TestCaseReturnDTO:
      example:
        operationName: operationName
      properties:
        operationName:
          description: Name of related operation for this TestCase
          title: operationName
          type: string
      required:
      - operationName
      title: TestCaseReturnDTO
    TestConformanceMetric:
      description: "Represents the test conformance metrics (current score, history\
        \ and evolution trend) of a Service"
      example:
        lastUpdateDay: lastUpdateDay
        currentScore: 0.8008281904610115
        latestTrend: DOWN
        maxPossibleScore: 1.4658129805029452
        id: id
        latestScores:
          key: 6.027456183070403
        serviceId: serviceId
        aggregationLabelValue: aggregationLabelValue
      properties:
        aggregationLabelValue:
          description: Value of the label used for metrics aggregation (if any)
          title: aggregationLabelValue
          type: string
        currentScore:
          description: Current test conformance score for the related Service
          format: double
          title: currentScore
          type: number
        id:
          description: Unique identifier of coverage metric
          title: id
          type: string
        lastUpdateDay:
          description: The day of latest score update (in yyyyMMdd format)
          title: lastUpdateDay
          type: string
        latestScores:
          additionalProperties:
            type: number
          description: "History of latest scores (key is date with format yyyyMMdd,\
            \ value is score as double)"
          title: latestScores
          type: object
        latestTrend:
          $ref: '#/components/schemas/Trend'
        maxPossibleScore:
          description: Maximum conformance score that can be reached (depends on samples
            expresiveness)
          format: double
          title: maxPossibleScore
          type: number
        serviceId:
          description: Unique identifier of the Service this metric is related to
          title: serviceId
          type: string
      required:
      - currentScore
      - id
      - maxPossibleScore
      - serviceId
      title: TestConformanceMetric
      type: object
    TestRequest:
      description: Test request is a minimalist wrapper for requesting the launch
        of a new test
      example:
        secretName: secretName
        filteredOperations:
        - filteredOperations
        - filteredOperations
        operationHeaders:
          key:
          - values: values
            name: name
          - values: values
            name: name
        runnerType: HTTP
        serviceId: serviceId
        testEndpoint: testEndpoint
        timeout: 0
      properties:
        filteredOperations:
          description: A restriction on service operations to test
          items:
            type: string
          title: filteredOperations
          type: array
        operationHeaders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/HeaderDTO'
            type: array
          description: "Specification of additional headers for a Service/API operations.\
            \ Keys are operation name or \"globals\" (if header applies to all), values\
            \ are Header objects DTO."
          title: operationHeaders
          type: object
        runnerType:
          $ref: '#/components/schemas/TestRunnerType'
        secretName:
          description: The name of Secret to use for connecting the test endpoint
          title: secretName
          type: string
        serviceId:
          description: Unique identifier of service to test
          title: serviceId
          type: string
        testEndpoint:
          description: Endpoint to test for this service
          title: testEndpoint
          type: string
        timeout:
          description: The maximum time (in milliseconds) to wait for this test ends
          title: timeout
          type: integer
      required:
      - runnerType
      - serviceId
      - testEndpoint
      - timeout
      title: TestRequest
    TestResult:
      description: "Represents the result of a Service or API test run by Microcks.\
        \ Tests are related to a service and made of multiple test cases corresponding\
        \ to each operations / actions composing service. Tests are run against a\
        \ specific endpoint named testedEndpoint. It holds global markers telling\
        \ if test still ran, is a success, how many times is has taken and so on ..."
      example:
        inProgress: true
        testNumber: 5.637376656633329
        secretRef: |-
          {
              "secretId": "5be58fb51ed744d1b87481bd",
              "name": "Gogs internal"
          }
        operationHeaders:
          key:
          - values: values
            name: name
          - values: values
            name: name
        version: 7.061401241503109
        timeout: 2
        testedEndpoint: testedEndpoint
        success: true
        testCaseResults:
        - testStepResults:
          - eventMessageName: eventMessageName
            requestName: requestName
            success: true
            message: message
            elapsedTime: 1.4658129805029452
          - eventMessageName: eventMessageName
            requestName: requestName
            success: true
            message: message
            elapsedTime: 1.4658129805029452
          success: true
          operationName: operationName
          elapsedTime: 6.027456183070403
        - testStepResults:
          - eventMessageName: eventMessageName
            requestName: requestName
            success: true
            message: message
            elapsedTime: 1.4658129805029452
          - eventMessageName: eventMessageName
            requestName: requestName
            success: true
            message: message
            elapsedTime: 1.4658129805029452
          success: true
          operationName: operationName
          elapsedTime: 6.027456183070403
        id: id
        runnerType: HTTP
        serviceId: serviceId
        testDate: 5
        elapsedTime: 0.8008281904610115
      properties:
        elapsedTime:
          description: Elapsed time in milliseconds since test beginning
          title: elapsedTime
          type: number
        id:
          description: Unique identifier of TestResult
          title: id
          type: string
        inProgress:
          description: Flag telling is test is still in progress
          title: inProgress
          type: boolean
        operationHeaders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/HeaderDTO'
            type: array
          description: "Specification of additional headers for a Service/API operations.\
            \ Keys are operation name or \"globals\" (if header applies to all), values\
            \ are Header objects DTO."
          title: operationHeaders
          type: object
        runnerType:
          $ref: '#/components/schemas/TestRunnerType'
        secretRef:
          $ref: '#/components/schemas/SecretRef'
        serviceId:
          description: Unique identifier of service tested
          title: serviceId
          type: string
        success:
          description: Flag telling if test is a success
          title: success
          type: boolean
        testCaseResults:
          description: TestCase results associated to this test
          items:
            $ref: '#/components/schemas/TestCaseResult'
          title: testCaseResults
          type: array
        testDate:
          description: Timestamp of creation date of this service
          format: int64
          title: testDate
          type: integer
        testNumber:
          description: Incremental number for tracking number of tests of a service
          title: testNumber
          type: number
        testedEndpoint:
          description: Endpoint used during test
          title: testedEndpoint
          type: string
        timeout:
          description: The maximum time (in milliseconds) to wait for this test ends
          title: timeout
          type: integer
        version:
          description: Revision number of this test
          title: version
          type: number
      required:
      - id
      - inProgress
      - runnerType
      - serviceId
      - success
      - testDate
      - testNumber
      - testedEndpoint
      - version
      title: TestResult
    TestResultSummary:
      description: 'Represents the summary result of a Service or API test run by
        Microcks. '
      example:
        success: true
        id: id
        serviceId: serviceId
        testDate: 0
      properties:
        id:
          description: Unique identifier of TestResult
          title: id
          type: string
        serviceId:
          description: Unique identifier of service tested
          title: serviceId
          type: string
        success:
          description: Flag telling if test is a success
          title: success
          type: boolean
        testDate:
          description: Timestamp of creation date of this service
          format: int64
          title: testDate
          type: integer
      required:
      - id
      - serviceId
      - success
      - testDate
      title: TestResultSummary
    TestReturn:
      description: TestReturn is used for wrapping the return code of a test step
        execution
      properties:
        code:
          description: "Return code for test (0 means Success, 1 means Failure)"
          type: integer
        elapsedTime:
          description: Elapsed time in milliseconds
          format: int64
          type: integer
        eventMessage:
          $ref: '#/components/schemas/EventMessage'
        message:
          description: Error message if any
          type: string
        request:
          $ref: '#/components/schemas/Request'
        response:
          $ref: '#/components/schemas/Response'
      required:
      - code
      - elapsedTime
    TestRunnerType:
      description: Type of test strategy (different strategies are implemented by
        different runners)
      enum:
      - HTTP
      - SOAP_HTTP
      - SOAP_UI
      - POSTMAN
      - OPEN_API_SCHEMA
      - ASYNC_API_SCHEMA
      - GRPC_PROTOBUF
      - GRAPHQL_SCHEMA
      title: TestRunnerType
      type: string
    TestStepResult:
      description: TestStepResult is an entity embedded within TestCaseResult. They
        are created for each request associated with an operation / action of a microservice.
      example:
        eventMessageName: eventMessageName
        requestName: requestName
        success: true
        message: message
        elapsedTime: 1.4658129805029452
      properties:
        elapsedTime:
          description: Elapsed time in milliseconds since the test step beginning
          title: elapsedTime
          type: number
        eventMessageName:
          description: Name of event this test step is bound to
          title: eventMessageName
          type: string
        message:
          description: Error message that may be associated to this test step
          title: message
          type: string
        requestName:
          description: Name of request this test step is bound to
          title: requestName
          type: string
        success:
          description: Flag telling if test case is a success
          title: success
          type: boolean
      required:
      - elapsedTome
      - success
      title: TestStepResult
    Trend:
      description: Evolution trend qualifier
      enum:
      - DOWN
      - LOW_DOWN
      - STABLE
      - LOW_UP
      - UP
      title: Trend
      type: string
    UnidirectionalEvent:
      allOf:
      - properties:
          eventMessage:
            $ref: '#/components/schemas/EventMessage'
        required:
        - eventMessage
        type: object
      - $ref: '#/components/schemas/AbstractExchange'
      description: Representation of an unidirectional exchange as an event message
      example:
        eventMessage:
          headers:
          - values:
            - values
            - values
            name: name
          - values:
            - values
            - values
            name: name
          name: name
          operationId: operationId
          mediaType: mediaType
          id: id
          content: content
          testCaseId: testCaseId
        type: reqRespPair
      title: UnidirectionalEvent
      type: object
    WeightedMetricValue:
      description: Value of a metric with an associated weight
      example:
        name: name
        weight: 6
        value: 0
      properties:
        name:
          description: Metric name or serie name
          title: name
          type: string
        value:
          description: The value of this metric
          title: value
          type: integer
        weight:
          description: Weight of this metric value (typically a percentage)
          title: weight
          type: integer
      required:
      - name
      - value
      - weight
      title: WeightedMetricValue
      type: object
    GetService_200_response:
      oneOf:
      - $ref: '#/components/schemas/Service'
      - $ref: '#/components/schemas/ServiceView'
      title: GetService_200_response
    FeaturesConfig_async_api:
      description: Asynchronous feature properties
      properties:
        default-binding:
          title: default-binding
          type: string
        enabled:
          title: enabled
          type: string
        endpoint-AMQP:
          title: endpoint-AMQP
          type: string
        endpoint-GOOGLEPUBSUB:
          title: endpoint-GOOGLEPUBSUB
          type: string
        endpoint-KAFKA:
          title: endpoint-KAFKA
          type: string
        endpoint-MQTT:
          title: endpoint-MQTT
          type: string
        endpoint-NATS:
          title: endpoint-NATS
          type: string
        endpoint-WS:
          title: endpoint-WS
          type: string
        frequencies:
          title: frequencies
          type: string
      title: FeaturesConfig_async_api
      type: object
    FeaturesConfig_microcks_hub:
      description: Microcks Hub feature properties
      properties:
        allowed-roles:
          title: allowed-roles
          type: string
        enabled:
          title: enabled
          type: string
        endpoint:
          title: endpoint
          type: string
      title: FeaturesConfig_microcks_hub
      type: object
    FeaturesConfig_repository_filter:
      description: Repository filtering feature properties
      properties:
        enabled:
          title: enabled
          type: string
        label-key:
          title: label-key
          type: string
        label-label:
          title: label-label
          type: string
        label-list:
          title: label-list
          type: string
      title: FeaturesConfig_repository_filter
      type: object
    FeaturesConfig_repository_tenancy:
      description: Repository tenancy feature properties
      properties:
        artifact-import-allowed-roles:
          title: artifact-import-allowed-roles
          type: string
        enabled:
          title: enabled
          type: string
      title: FeaturesConfig_repository_tenancy
      type: object
  securitySchemes:
    jwt-bearer:
      description: JWT Bearer acquired using OAuth 2 Authentication flow or Direct
        Access Grant
      flows:
        clientCredentials:
          refreshUrl: https://keycloak.example.com/realms/microcks/protocol/openid-connect/token
          scopes:
            admin: Administrator of the Microcks instance
            manager: Services & APIs content manager
            user: Simple authenticated user
          tokenUrl: https://keycloak.example.com/realms/microcks/protocol/openid-connect/token
      type: oauth2
      x-tokenInfoFunc: openapi_server.controllers.security_controller.info_from_jwt-bearer
      x-scopeValidateFunc: openapi_server.controllers.security_controller.validate_scope_jwt-bearer
