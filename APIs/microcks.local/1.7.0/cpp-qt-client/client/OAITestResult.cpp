/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestResult::OAITestResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestResult::OAITestResult() {
    this->initializeModel();
}

OAITestResult::~OAITestResult() {}

void OAITestResult::initializeModel() {

    m_elapsed_time_isSet = false;
    m_elapsed_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_progress_isSet = false;
    m_in_progress_isValid = false;

    m_operation_headers_isSet = false;
    m_operation_headers_isValid = false;

    m_runner_type_isSet = false;
    m_runner_type_isValid = false;

    m_secret_ref_isSet = false;
    m_secret_ref_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_test_case_results_isSet = false;
    m_test_case_results_isValid = false;

    m_test_date_isSet = false;
    m_test_date_isValid = false;

    m_test_number_isSet = false;
    m_test_number_isValid = false;

    m_tested_endpoint_isSet = false;
    m_tested_endpoint_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAITestResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestResult::fromJsonObject(QJsonObject json) {

    m_elapsed_time_isValid = ::OpenAPI::fromJsonValue(m_elapsed_time, json[QString("elapsedTime")]);
    m_elapsed_time_isSet = !json[QString("elapsedTime")].isNull() && m_elapsed_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_progress_isValid = ::OpenAPI::fromJsonValue(m_in_progress, json[QString("inProgress")]);
    m_in_progress_isSet = !json[QString("inProgress")].isNull() && m_in_progress_isValid;

    if(json["operationHeaders"].isObject()){
        auto varmap = json["operationHeaders"].toObject().toVariantMap();
        m_operation_headers_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIHeaderDTO> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_operation_headers_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_operation_headers_isSet &= !jval.isNull() && m_operation_headers_isValid;
                m_operation_headers.insert(m_operation_headers.end(), val, item);
            }
        }
    }

    m_runner_type_isValid = ::OpenAPI::fromJsonValue(m_runner_type, json[QString("runnerType")]);
    m_runner_type_isSet = !json[QString("runnerType")].isNull() && m_runner_type_isValid;

    m_secret_ref_isValid = ::OpenAPI::fromJsonValue(m_secret_ref, json[QString("secretRef")]);
    m_secret_ref_isSet = !json[QString("secretRef")].isNull() && m_secret_ref_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_test_case_results_isValid = ::OpenAPI::fromJsonValue(m_test_case_results, json[QString("testCaseResults")]);
    m_test_case_results_isSet = !json[QString("testCaseResults")].isNull() && m_test_case_results_isValid;

    m_test_date_isValid = ::OpenAPI::fromJsonValue(m_test_date, json[QString("testDate")]);
    m_test_date_isSet = !json[QString("testDate")].isNull() && m_test_date_isValid;

    m_test_number_isValid = ::OpenAPI::fromJsonValue(m_test_number, json[QString("testNumber")]);
    m_test_number_isSet = !json[QString("testNumber")].isNull() && m_test_number_isValid;

    m_tested_endpoint_isValid = ::OpenAPI::fromJsonValue(m_tested_endpoint, json[QString("testedEndpoint")]);
    m_tested_endpoint_isSet = !json[QString("testedEndpoint")].isNull() && m_tested_endpoint_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAITestResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestResult::asJsonObject() const {
    QJsonObject obj;
    if (m_elapsed_time_isSet) {
        obj.insert(QString("elapsedTime"), ::OpenAPI::toJsonValue(m_elapsed_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_progress_isSet) {
        obj.insert(QString("inProgress"), ::OpenAPI::toJsonValue(m_in_progress));
    }
    if (m_operation_headers.size() > 0) {
        
        obj.insert(QString("operationHeaders"), toJsonValue(m_operation_headers));
    }
    if (m_runner_type.isSet()) {
        obj.insert(QString("runnerType"), ::OpenAPI::toJsonValue(m_runner_type));
    }
    if (m_secret_ref.isSet()) {
        obj.insert(QString("secretRef"), ::OpenAPI::toJsonValue(m_secret_ref));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_test_case_results.size() > 0) {
        obj.insert(QString("testCaseResults"), ::OpenAPI::toJsonValue(m_test_case_results));
    }
    if (m_test_date_isSet) {
        obj.insert(QString("testDate"), ::OpenAPI::toJsonValue(m_test_date));
    }
    if (m_test_number_isSet) {
        obj.insert(QString("testNumber"), ::OpenAPI::toJsonValue(m_test_number));
    }
    if (m_tested_endpoint_isSet) {
        obj.insert(QString("testedEndpoint"), ::OpenAPI::toJsonValue(m_tested_endpoint));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

double OAITestResult::getElapsedTime() const {
    return m_elapsed_time;
}
void OAITestResult::setElapsedTime(const double &elapsed_time) {
    m_elapsed_time = elapsed_time;
    m_elapsed_time_isSet = true;
}

bool OAITestResult::is_elapsed_time_Set() const{
    return m_elapsed_time_isSet;
}

bool OAITestResult::is_elapsed_time_Valid() const{
    return m_elapsed_time_isValid;
}

QString OAITestResult::getId() const {
    return m_id;
}
void OAITestResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITestResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAITestResult::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITestResult::isInProgress() const {
    return m_in_progress;
}
void OAITestResult::setInProgress(const bool &in_progress) {
    m_in_progress = in_progress;
    m_in_progress_isSet = true;
}

bool OAITestResult::is_in_progress_Set() const{
    return m_in_progress_isSet;
}

bool OAITestResult::is_in_progress_Valid() const{
    return m_in_progress_isValid;
}

QMap<QString, QList<OAIHeaderDTO>> OAITestResult::getOperationHeaders() const {
    return m_operation_headers;
}
void OAITestResult::setOperationHeaders(const QMap<QString, QList<OAIHeaderDTO>> &operation_headers) {
    m_operation_headers = operation_headers;
    m_operation_headers_isSet = true;
}

bool OAITestResult::is_operation_headers_Set() const{
    return m_operation_headers_isSet;
}

bool OAITestResult::is_operation_headers_Valid() const{
    return m_operation_headers_isValid;
}

OAITestRunnerType OAITestResult::getRunnerType() const {
    return m_runner_type;
}
void OAITestResult::setRunnerType(const OAITestRunnerType &runner_type) {
    m_runner_type = runner_type;
    m_runner_type_isSet = true;
}

bool OAITestResult::is_runner_type_Set() const{
    return m_runner_type_isSet;
}

bool OAITestResult::is_runner_type_Valid() const{
    return m_runner_type_isValid;
}

OAISecretRef OAITestResult::getSecretRef() const {
    return m_secret_ref;
}
void OAITestResult::setSecretRef(const OAISecretRef &secret_ref) {
    m_secret_ref = secret_ref;
    m_secret_ref_isSet = true;
}

bool OAITestResult::is_secret_ref_Set() const{
    return m_secret_ref_isSet;
}

bool OAITestResult::is_secret_ref_Valid() const{
    return m_secret_ref_isValid;
}

QString OAITestResult::getServiceId() const {
    return m_service_id;
}
void OAITestResult::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAITestResult::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAITestResult::is_service_id_Valid() const{
    return m_service_id_isValid;
}

bool OAITestResult::isSuccess() const {
    return m_success;
}
void OAITestResult::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAITestResult::is_success_Set() const{
    return m_success_isSet;
}

bool OAITestResult::is_success_Valid() const{
    return m_success_isValid;
}

QList<OAITestCaseResult> OAITestResult::getTestCaseResults() const {
    return m_test_case_results;
}
void OAITestResult::setTestCaseResults(const QList<OAITestCaseResult> &test_case_results) {
    m_test_case_results = test_case_results;
    m_test_case_results_isSet = true;
}

bool OAITestResult::is_test_case_results_Set() const{
    return m_test_case_results_isSet;
}

bool OAITestResult::is_test_case_results_Valid() const{
    return m_test_case_results_isValid;
}

qint64 OAITestResult::getTestDate() const {
    return m_test_date;
}
void OAITestResult::setTestDate(const qint64 &test_date) {
    m_test_date = test_date;
    m_test_date_isSet = true;
}

bool OAITestResult::is_test_date_Set() const{
    return m_test_date_isSet;
}

bool OAITestResult::is_test_date_Valid() const{
    return m_test_date_isValid;
}

double OAITestResult::getTestNumber() const {
    return m_test_number;
}
void OAITestResult::setTestNumber(const double &test_number) {
    m_test_number = test_number;
    m_test_number_isSet = true;
}

bool OAITestResult::is_test_number_Set() const{
    return m_test_number_isSet;
}

bool OAITestResult::is_test_number_Valid() const{
    return m_test_number_isValid;
}

QString OAITestResult::getTestedEndpoint() const {
    return m_tested_endpoint;
}
void OAITestResult::setTestedEndpoint(const QString &tested_endpoint) {
    m_tested_endpoint = tested_endpoint;
    m_tested_endpoint_isSet = true;
}

bool OAITestResult::is_tested_endpoint_Set() const{
    return m_tested_endpoint_isSet;
}

bool OAITestResult::is_tested_endpoint_Valid() const{
    return m_tested_endpoint_isValid;
}

qint32 OAITestResult::getTimeout() const {
    return m_timeout;
}
void OAITestResult::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAITestResult::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAITestResult::is_timeout_Valid() const{
    return m_timeout_isValid;
}

double OAITestResult::getVersion() const {
    return m_version;
}
void OAITestResult::setVersion(const double &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITestResult::is_version_Set() const{
    return m_version_isSet;
}

bool OAITestResult::is_version_Valid() const{
    return m_version_isValid;
}

bool OAITestResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elapsed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runner_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_case_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tested_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_in_progress_isValid && m_runner_type_isValid && m_service_id_isValid && m_success_isValid && m_test_date_isValid && m_test_number_isValid && m_tested_endpoint_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
