/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeaturesConfig_async_api.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeaturesConfig_async_api::OAIFeaturesConfig_async_api(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeaturesConfig_async_api::OAIFeaturesConfig_async_api() {
    this->initializeModel();
}

OAIFeaturesConfig_async_api::~OAIFeaturesConfig_async_api() {}

void OAIFeaturesConfig_async_api::initializeModel() {

    m_default_binding_isSet = false;
    m_default_binding_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_endpoint_amqp_isSet = false;
    m_endpoint_amqp_isValid = false;

    m_endpoint_googlepubsub_isSet = false;
    m_endpoint_googlepubsub_isValid = false;

    m_endpoint_kafka_isSet = false;
    m_endpoint_kafka_isValid = false;

    m_endpoint_mqtt_isSet = false;
    m_endpoint_mqtt_isValid = false;

    m_endpoint_nats_isSet = false;
    m_endpoint_nats_isValid = false;

    m_endpoint_ws_isSet = false;
    m_endpoint_ws_isValid = false;

    m_frequencies_isSet = false;
    m_frequencies_isValid = false;
}

void OAIFeaturesConfig_async_api::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeaturesConfig_async_api::fromJsonObject(QJsonObject json) {

    m_default_binding_isValid = ::OpenAPI::fromJsonValue(m_default_binding, json[QString("default-binding")]);
    m_default_binding_isSet = !json[QString("default-binding")].isNull() && m_default_binding_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_endpoint_amqp_isValid = ::OpenAPI::fromJsonValue(m_endpoint_amqp, json[QString("endpoint-AMQP")]);
    m_endpoint_amqp_isSet = !json[QString("endpoint-AMQP")].isNull() && m_endpoint_amqp_isValid;

    m_endpoint_googlepubsub_isValid = ::OpenAPI::fromJsonValue(m_endpoint_googlepubsub, json[QString("endpoint-GOOGLEPUBSUB")]);
    m_endpoint_googlepubsub_isSet = !json[QString("endpoint-GOOGLEPUBSUB")].isNull() && m_endpoint_googlepubsub_isValid;

    m_endpoint_kafka_isValid = ::OpenAPI::fromJsonValue(m_endpoint_kafka, json[QString("endpoint-KAFKA")]);
    m_endpoint_kafka_isSet = !json[QString("endpoint-KAFKA")].isNull() && m_endpoint_kafka_isValid;

    m_endpoint_mqtt_isValid = ::OpenAPI::fromJsonValue(m_endpoint_mqtt, json[QString("endpoint-MQTT")]);
    m_endpoint_mqtt_isSet = !json[QString("endpoint-MQTT")].isNull() && m_endpoint_mqtt_isValid;

    m_endpoint_nats_isValid = ::OpenAPI::fromJsonValue(m_endpoint_nats, json[QString("endpoint-NATS")]);
    m_endpoint_nats_isSet = !json[QString("endpoint-NATS")].isNull() && m_endpoint_nats_isValid;

    m_endpoint_ws_isValid = ::OpenAPI::fromJsonValue(m_endpoint_ws, json[QString("endpoint-WS")]);
    m_endpoint_ws_isSet = !json[QString("endpoint-WS")].isNull() && m_endpoint_ws_isValid;

    m_frequencies_isValid = ::OpenAPI::fromJsonValue(m_frequencies, json[QString("frequencies")]);
    m_frequencies_isSet = !json[QString("frequencies")].isNull() && m_frequencies_isValid;
}

QString OAIFeaturesConfig_async_api::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeaturesConfig_async_api::asJsonObject() const {
    QJsonObject obj;
    if (m_default_binding_isSet) {
        obj.insert(QString("default-binding"), ::OpenAPI::toJsonValue(m_default_binding));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_endpoint_amqp_isSet) {
        obj.insert(QString("endpoint-AMQP"), ::OpenAPI::toJsonValue(m_endpoint_amqp));
    }
    if (m_endpoint_googlepubsub_isSet) {
        obj.insert(QString("endpoint-GOOGLEPUBSUB"), ::OpenAPI::toJsonValue(m_endpoint_googlepubsub));
    }
    if (m_endpoint_kafka_isSet) {
        obj.insert(QString("endpoint-KAFKA"), ::OpenAPI::toJsonValue(m_endpoint_kafka));
    }
    if (m_endpoint_mqtt_isSet) {
        obj.insert(QString("endpoint-MQTT"), ::OpenAPI::toJsonValue(m_endpoint_mqtt));
    }
    if (m_endpoint_nats_isSet) {
        obj.insert(QString("endpoint-NATS"), ::OpenAPI::toJsonValue(m_endpoint_nats));
    }
    if (m_endpoint_ws_isSet) {
        obj.insert(QString("endpoint-WS"), ::OpenAPI::toJsonValue(m_endpoint_ws));
    }
    if (m_frequencies_isSet) {
        obj.insert(QString("frequencies"), ::OpenAPI::toJsonValue(m_frequencies));
    }
    return obj;
}

QString OAIFeaturesConfig_async_api::getDefaultBinding() const {
    return m_default_binding;
}
void OAIFeaturesConfig_async_api::setDefaultBinding(const QString &default_binding) {
    m_default_binding = default_binding;
    m_default_binding_isSet = true;
}

bool OAIFeaturesConfig_async_api::is_default_binding_Set() const{
    return m_default_binding_isSet;
}

bool OAIFeaturesConfig_async_api::is_default_binding_Valid() const{
    return m_default_binding_isValid;
}

QString OAIFeaturesConfig_async_api::getEnabled() const {
    return m_enabled;
}
void OAIFeaturesConfig_async_api::setEnabled(const QString &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIFeaturesConfig_async_api::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIFeaturesConfig_async_api::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIFeaturesConfig_async_api::getEndpointAmqp() const {
    return m_endpoint_amqp;
}
void OAIFeaturesConfig_async_api::setEndpointAmqp(const QString &endpoint_amqp) {
    m_endpoint_amqp = endpoint_amqp;
    m_endpoint_amqp_isSet = true;
}

bool OAIFeaturesConfig_async_api::is_endpoint_amqp_Set() const{
    return m_endpoint_amqp_isSet;
}

bool OAIFeaturesConfig_async_api::is_endpoint_amqp_Valid() const{
    return m_endpoint_amqp_isValid;
}

QString OAIFeaturesConfig_async_api::getEndpointGooglepubsub() const {
    return m_endpoint_googlepubsub;
}
void OAIFeaturesConfig_async_api::setEndpointGooglepubsub(const QString &endpoint_googlepubsub) {
    m_endpoint_googlepubsub = endpoint_googlepubsub;
    m_endpoint_googlepubsub_isSet = true;
}

bool OAIFeaturesConfig_async_api::is_endpoint_googlepubsub_Set() const{
    return m_endpoint_googlepubsub_isSet;
}

bool OAIFeaturesConfig_async_api::is_endpoint_googlepubsub_Valid() const{
    return m_endpoint_googlepubsub_isValid;
}

QString OAIFeaturesConfig_async_api::getEndpointKafka() const {
    return m_endpoint_kafka;
}
void OAIFeaturesConfig_async_api::setEndpointKafka(const QString &endpoint_kafka) {
    m_endpoint_kafka = endpoint_kafka;
    m_endpoint_kafka_isSet = true;
}

bool OAIFeaturesConfig_async_api::is_endpoint_kafka_Set() const{
    return m_endpoint_kafka_isSet;
}

bool OAIFeaturesConfig_async_api::is_endpoint_kafka_Valid() const{
    return m_endpoint_kafka_isValid;
}

QString OAIFeaturesConfig_async_api::getEndpointMqtt() const {
    return m_endpoint_mqtt;
}
void OAIFeaturesConfig_async_api::setEndpointMqtt(const QString &endpoint_mqtt) {
    m_endpoint_mqtt = endpoint_mqtt;
    m_endpoint_mqtt_isSet = true;
}

bool OAIFeaturesConfig_async_api::is_endpoint_mqtt_Set() const{
    return m_endpoint_mqtt_isSet;
}

bool OAIFeaturesConfig_async_api::is_endpoint_mqtt_Valid() const{
    return m_endpoint_mqtt_isValid;
}

QString OAIFeaturesConfig_async_api::getEndpointNats() const {
    return m_endpoint_nats;
}
void OAIFeaturesConfig_async_api::setEndpointNats(const QString &endpoint_nats) {
    m_endpoint_nats = endpoint_nats;
    m_endpoint_nats_isSet = true;
}

bool OAIFeaturesConfig_async_api::is_endpoint_nats_Set() const{
    return m_endpoint_nats_isSet;
}

bool OAIFeaturesConfig_async_api::is_endpoint_nats_Valid() const{
    return m_endpoint_nats_isValid;
}

QString OAIFeaturesConfig_async_api::getEndpointWs() const {
    return m_endpoint_ws;
}
void OAIFeaturesConfig_async_api::setEndpointWs(const QString &endpoint_ws) {
    m_endpoint_ws = endpoint_ws;
    m_endpoint_ws_isSet = true;
}

bool OAIFeaturesConfig_async_api::is_endpoint_ws_Set() const{
    return m_endpoint_ws_isSet;
}

bool OAIFeaturesConfig_async_api::is_endpoint_ws_Valid() const{
    return m_endpoint_ws_isValid;
}

QString OAIFeaturesConfig_async_api::getFrequencies() const {
    return m_frequencies;
}
void OAIFeaturesConfig_async_api::setFrequencies(const QString &frequencies) {
    m_frequencies = frequencies;
    m_frequencies_isSet = true;
}

bool OAIFeaturesConfig_async_api::is_frequencies_Set() const{
    return m_frequencies_isSet;
}

bool OAIFeaturesConfig_async_api::is_frequencies_Valid() const{
    return m_frequencies_isValid;
}

bool OAIFeaturesConfig_async_api::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_binding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_amqp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_googlepubsub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_kafka_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_mqtt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_nats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_ws_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequencies_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeaturesConfig_async_api::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
