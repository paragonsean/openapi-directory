/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICounter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICounter::OAICounter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICounter::OAICounter() {
    this->initializeModel();
}

OAICounter::~OAICounter() {}

void OAICounter::initializeModel() {

    m_counter_isSet = false;
    m_counter_isValid = false;
}

void OAICounter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICounter::fromJsonObject(QJsonObject json) {

    m_counter_isValid = ::OpenAPI::fromJsonValue(m_counter, json[QString("counter")]);
    m_counter_isSet = !json[QString("counter")].isNull() && m_counter_isValid;
}

QString OAICounter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICounter::asJsonObject() const {
    QJsonObject obj;
    if (m_counter_isSet) {
        obj.insert(QString("counter"), ::OpenAPI::toJsonValue(m_counter));
    }
    return obj;
}

qint32 OAICounter::getCounter() const {
    return m_counter;
}
void OAICounter::setCounter(const qint32 &counter) {
    m_counter = counter;
    m_counter_isSet = true;
}

bool OAICounter::is_counter_Set() const{
    return m_counter_isSet;
}

bool OAICounter::is_counter_Valid() const{
    return m_counter_isValid;
}

bool OAICounter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICounter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
