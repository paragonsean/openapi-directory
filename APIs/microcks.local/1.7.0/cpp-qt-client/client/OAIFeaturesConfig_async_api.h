/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFeaturesConfig_async_api.h
 *
 * Asynchronous feature properties
 */

#ifndef OAIFeaturesConfig_async_api_H
#define OAIFeaturesConfig_async_api_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFeaturesConfig_async_api : public OAIObject {
public:
    OAIFeaturesConfig_async_api();
    OAIFeaturesConfig_async_api(QString json);
    ~OAIFeaturesConfig_async_api() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDefaultBinding() const;
    void setDefaultBinding(const QString &default_binding);
    bool is_default_binding_Set() const;
    bool is_default_binding_Valid() const;

    QString getEnabled() const;
    void setEnabled(const QString &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getEndpointAmqp() const;
    void setEndpointAmqp(const QString &endpoint_amqp);
    bool is_endpoint_amqp_Set() const;
    bool is_endpoint_amqp_Valid() const;

    QString getEndpointGooglepubsub() const;
    void setEndpointGooglepubsub(const QString &endpoint_googlepubsub);
    bool is_endpoint_googlepubsub_Set() const;
    bool is_endpoint_googlepubsub_Valid() const;

    QString getEndpointKafka() const;
    void setEndpointKafka(const QString &endpoint_kafka);
    bool is_endpoint_kafka_Set() const;
    bool is_endpoint_kafka_Valid() const;

    QString getEndpointMqtt() const;
    void setEndpointMqtt(const QString &endpoint_mqtt);
    bool is_endpoint_mqtt_Set() const;
    bool is_endpoint_mqtt_Valid() const;

    QString getEndpointNats() const;
    void setEndpointNats(const QString &endpoint_nats);
    bool is_endpoint_nats_Set() const;
    bool is_endpoint_nats_Valid() const;

    QString getEndpointWs() const;
    void setEndpointWs(const QString &endpoint_ws);
    bool is_endpoint_ws_Set() const;
    bool is_endpoint_ws_Valid() const;

    QString getFrequencies() const;
    void setFrequencies(const QString &frequencies);
    bool is_frequencies_Set() const;
    bool is_frequencies_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_default_binding;
    bool m_default_binding_isSet;
    bool m_default_binding_isValid;

    QString m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_endpoint_amqp;
    bool m_endpoint_amqp_isSet;
    bool m_endpoint_amqp_isValid;

    QString m_endpoint_googlepubsub;
    bool m_endpoint_googlepubsub_isSet;
    bool m_endpoint_googlepubsub_isValid;

    QString m_endpoint_kafka;
    bool m_endpoint_kafka_isSet;
    bool m_endpoint_kafka_isValid;

    QString m_endpoint_mqtt;
    bool m_endpoint_mqtt_isSet;
    bool m_endpoint_mqtt_isValid;

    QString m_endpoint_nats;
    bool m_endpoint_nats_isSet;
    bool m_endpoint_nats_isValid;

    QString m_endpoint_ws;
    bool m_endpoint_ws_isSet;
    bool m_endpoint_ws_isValid;

    QString m_frequencies;
    bool m_frequencies_isSet;
    bool m_frequencies_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFeaturesConfig_async_api)

#endif // OAIFeaturesConfig_async_api_H
