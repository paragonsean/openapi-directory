/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITestApi_H
#define OAI_OAITestApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICounter.h"
#include "OAIRequestResponsePair.h"
#include "OAITestCaseResult.h"
#include "OAITestCaseReturnDTO.h"
#include "OAITestRequest.h"
#include "OAITestResult.h"
#include "OAIUnidirectionalEvent.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITestApi : public QObject {
    Q_OBJECT

public:
    OAITestApi(const int timeOut = 0);
    ~OAITestApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_test_request OAITestRequest [required]
    */
    virtual void createTest(const OAITestRequest &oai_test_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  test_case_id QString [required]
    */
    virtual void getEventsByTestCase(const QString &id, const QString &test_case_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  test_case_id QString [required]
    */
    virtual void getMessagesByTestCase(const QString &id, const QString &test_case_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getTestResult(const QString &id);

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void getTestResultsByService(const QString &service_id);

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void getTestResultsByServiceCounter(const QString &service_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_test_case_return_dto OAITestCaseReturnDTO [required]
    */
    virtual void reportTestCaseResult(const QString &id, const OAITestCaseReturnDTO &oai_test_case_return_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTestCallback(OAIHttpRequestWorker *worker);
    void getEventsByTestCaseCallback(OAIHttpRequestWorker *worker);
    void getMessagesByTestCaseCallback(OAIHttpRequestWorker *worker);
    void getTestResultCallback(OAIHttpRequestWorker *worker);
    void getTestResultsByServiceCallback(OAIHttpRequestWorker *worker);
    void getTestResultsByServiceCounterCallback(OAIHttpRequestWorker *worker);
    void reportTestCaseResultCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTestSignal(OAITestResult summary);
    void getEventsByTestCaseSignal(QList<OAIUnidirectionalEvent> summary);
    void getMessagesByTestCaseSignal(QList<OAIRequestResponsePair> summary);
    void getTestResultSignal(OAITestResult summary);
    void getTestResultsByServiceSignal(QList<OAITestResult> summary);
    void getTestResultsByServiceCounterSignal(OAICounter summary);
    void reportTestCaseResultSignal(OAITestCaseResult summary);


    void createTestSignalFull(OAIHttpRequestWorker *worker, OAITestResult summary);
    void getEventsByTestCaseSignalFull(OAIHttpRequestWorker *worker, QList<OAIUnidirectionalEvent> summary);
    void getMessagesByTestCaseSignalFull(OAIHttpRequestWorker *worker, QList<OAIRequestResponsePair> summary);
    void getTestResultSignalFull(OAIHttpRequestWorker *worker, OAITestResult summary);
    void getTestResultsByServiceSignalFull(OAIHttpRequestWorker *worker, QList<OAITestResult> summary);
    void getTestResultsByServiceCounterSignalFull(OAIHttpRequestWorker *worker, OAICounter summary);
    void reportTestCaseResultSignalFull(OAIHttpRequestWorker *worker, OAITestCaseResult summary);

    Q_DECL_DEPRECATED_X("Use createTestSignalError() instead")
    void createTestSignalE(OAITestResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTestSignalError(OAITestResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByTestCaseSignalError() instead")
    void getEventsByTestCaseSignalE(QList<OAIUnidirectionalEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByTestCaseSignalError(QList<OAIUnidirectionalEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessagesByTestCaseSignalError() instead")
    void getMessagesByTestCaseSignalE(QList<OAIRequestResponsePair> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessagesByTestCaseSignalError(QList<OAIRequestResponsePair> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestResultSignalError() instead")
    void getTestResultSignalE(OAITestResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestResultSignalError(OAITestResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestResultsByServiceSignalError() instead")
    void getTestResultsByServiceSignalE(QList<OAITestResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestResultsByServiceSignalError(QList<OAITestResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestResultsByServiceCounterSignalError() instead")
    void getTestResultsByServiceCounterSignalE(OAICounter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestResultsByServiceCounterSignalError(OAICounter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportTestCaseResultSignalError() instead")
    void reportTestCaseResultSignalE(OAITestCaseResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportTestCaseResultSignalError(OAITestCaseResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTestSignalErrorFull() instead")
    void createTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsByTestCaseSignalErrorFull() instead")
    void getEventsByTestCaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsByTestCaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessagesByTestCaseSignalErrorFull() instead")
    void getMessagesByTestCaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessagesByTestCaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestResultSignalErrorFull() instead")
    void getTestResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestResultsByServiceSignalErrorFull() instead")
    void getTestResultsByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestResultsByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestResultsByServiceCounterSignalErrorFull() instead")
    void getTestResultsByServiceCounterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestResultsByServiceCounterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportTestCaseResultSignalErrorFull() instead")
    void reportTestCaseResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportTestCaseResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
