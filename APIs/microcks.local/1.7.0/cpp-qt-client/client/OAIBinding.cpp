/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBinding::OAIBinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBinding::OAIBinding() {
    this->initializeModel();
}

OAIBinding::~OAIBinding() {}

void OAIBinding::initializeModel() {

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_destination_type_isSet = false;
    m_destination_type_isValid = false;

    m_key_type_isSet = false;
    m_key_type_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_persistent_isSet = false;
    m_persistent_isValid = false;

    m_qo_s_isSet = false;
    m_qo_s_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBinding::fromJsonObject(QJsonObject json) {

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("destinationName")]);
    m_destination_name_isSet = !json[QString("destinationName")].isNull() && m_destination_name_isValid;

    m_destination_type_isValid = ::OpenAPI::fromJsonValue(m_destination_type, json[QString("destinationType")]);
    m_destination_type_isSet = !json[QString("destinationType")].isNull() && m_destination_type_isValid;

    m_key_type_isValid = ::OpenAPI::fromJsonValue(m_key_type, json[QString("keyType")]);
    m_key_type_isSet = !json[QString("keyType")].isNull() && m_key_type_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_persistent_isValid = ::OpenAPI::fromJsonValue(m_persistent, json[QString("persistent")]);
    m_persistent_isSet = !json[QString("persistent")].isNull() && m_persistent_isValid;

    m_qo_s_isValid = ::OpenAPI::fromJsonValue(m_qo_s, json[QString("qoS")]);
    m_qo_s_isSet = !json[QString("qoS")].isNull() && m_qo_s_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBinding::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_name_isSet) {
        obj.insert(QString("destinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_destination_type_isSet) {
        obj.insert(QString("destinationType"), ::OpenAPI::toJsonValue(m_destination_type));
    }
    if (m_key_type_isSet) {
        obj.insert(QString("keyType"), ::OpenAPI::toJsonValue(m_key_type));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_persistent_isSet) {
        obj.insert(QString("persistent"), ::OpenAPI::toJsonValue(m_persistent));
    }
    if (m_qo_s_isSet) {
        obj.insert(QString("qoS"), ::OpenAPI::toJsonValue(m_qo_s));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIBinding::getDestinationName() const {
    return m_destination_name;
}
void OAIBinding::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIBinding::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIBinding::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAIBinding::getDestinationType() const {
    return m_destination_type;
}
void OAIBinding::setDestinationType(const QString &destination_type) {
    m_destination_type = destination_type;
    m_destination_type_isSet = true;
}

bool OAIBinding::is_destination_type_Set() const{
    return m_destination_type_isSet;
}

bool OAIBinding::is_destination_type_Valid() const{
    return m_destination_type_isValid;
}

QString OAIBinding::getKeyType() const {
    return m_key_type;
}
void OAIBinding::setKeyType(const QString &key_type) {
    m_key_type = key_type;
    m_key_type_isSet = true;
}

bool OAIBinding::is_key_type_Set() const{
    return m_key_type_isSet;
}

bool OAIBinding::is_key_type_Valid() const{
    return m_key_type_isValid;
}

QString OAIBinding::getMethod() const {
    return m_method;
}
void OAIBinding::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIBinding::is_method_Set() const{
    return m_method_isSet;
}

bool OAIBinding::is_method_Valid() const{
    return m_method_isValid;
}

bool OAIBinding::isPersistent() const {
    return m_persistent;
}
void OAIBinding::setPersistent(const bool &persistent) {
    m_persistent = persistent;
    m_persistent_isSet = true;
}

bool OAIBinding::is_persistent_Set() const{
    return m_persistent_isSet;
}

bool OAIBinding::is_persistent_Valid() const{
    return m_persistent_isValid;
}

QString OAIBinding::getQoS() const {
    return m_qo_s;
}
void OAIBinding::setQoS(const QString &qo_s) {
    m_qo_s = qo_s;
    m_qo_s_isSet = true;
}

bool OAIBinding::is_qo_s_Set() const{
    return m_qo_s_isSet;
}

bool OAIBinding::is_qo_s_Valid() const{
    return m_qo_s_isValid;
}

QString OAIBinding::getType() const {
    return m_type;
}
void OAIBinding::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBinding::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBinding::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qo_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
