/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestRunnerType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestRunnerType::OAITestRunnerType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestRunnerType::OAITestRunnerType() {
    this->initializeModel();
}

OAITestRunnerType::~OAITestRunnerType() {}

void OAITestRunnerType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITestRunnerType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITestRunnerType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HTTP", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestRunnerType::HTTP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOAP_HTTP", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestRunnerType::SOAP_HTTP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOAP_UI", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestRunnerType::SOAP_UI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POSTMAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestRunnerType::POSTMAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPEN_API_SCHEMA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestRunnerType::OPEN_API_SCHEMA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ASYNC_API_SCHEMA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestRunnerType::ASYNC_API_SCHEMA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GRPC_PROTOBUF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestRunnerType::GRPC_PROTOBUF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GRAPHQL_SCHEMA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestRunnerType::GRAPHQL_SCHEMA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITestRunnerType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITestRunnerType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITestRunnerType::HTTP:
            val = "HTTP";
            break;
        case eOAITestRunnerType::SOAP_HTTP:
            val = "SOAP_HTTP";
            break;
        case eOAITestRunnerType::SOAP_UI:
            val = "SOAP_UI";
            break;
        case eOAITestRunnerType::POSTMAN:
            val = "POSTMAN";
            break;
        case eOAITestRunnerType::OPEN_API_SCHEMA:
            val = "OPEN_API_SCHEMA";
            break;
        case eOAITestRunnerType::ASYNC_API_SCHEMA:
            val = "ASYNC_API_SCHEMA";
            break;
        case eOAITestRunnerType::GRPC_PROTOBUF:
            val = "GRPC_PROTOBUF";
            break;
        case eOAITestRunnerType::GRAPHQL_SCHEMA:
            val = "GRAPHQL_SCHEMA";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITestRunnerType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITestRunnerType::eOAITestRunnerType OAITestRunnerType::getValue() const {
    return m_value;
}

void OAITestRunnerType::setValue(const OAITestRunnerType::eOAITestRunnerType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITestRunnerType::isSet() const {
    
    return m_value_isSet;
}

bool OAITestRunnerType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
