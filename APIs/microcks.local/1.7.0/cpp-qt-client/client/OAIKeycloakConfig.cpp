/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeycloakConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeycloakConfig::OAIKeycloakConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeycloakConfig::OAIKeycloakConfig() {
    this->initializeModel();
}

OAIKeycloakConfig::~OAIKeycloakConfig() {}

void OAIKeycloakConfig::initializeModel() {

    m_auth_server_url_isSet = false;
    m_auth_server_url_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_public_client_isSet = false;
    m_public_client_isValid = false;

    m_realm_isSet = false;
    m_realm_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_ssl_required_isSet = false;
    m_ssl_required_isValid = false;
}

void OAIKeycloakConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeycloakConfig::fromJsonObject(QJsonObject json) {

    m_auth_server_url_isValid = ::OpenAPI::fromJsonValue(m_auth_server_url, json[QString("auth-server-url")]);
    m_auth_server_url_isSet = !json[QString("auth-server-url")].isNull() && m_auth_server_url_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_public_client_isValid = ::OpenAPI::fromJsonValue(m_public_client, json[QString("public-client")]);
    m_public_client_isSet = !json[QString("public-client")].isNull() && m_public_client_isValid;

    m_realm_isValid = ::OpenAPI::fromJsonValue(m_realm, json[QString("realm")]);
    m_realm_isSet = !json[QString("realm")].isNull() && m_realm_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_ssl_required_isValid = ::OpenAPI::fromJsonValue(m_ssl_required, json[QString("ssl-required")]);
    m_ssl_required_isSet = !json[QString("ssl-required")].isNull() && m_ssl_required_isValid;
}

QString OAIKeycloakConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeycloakConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_server_url_isSet) {
        obj.insert(QString("auth-server-url"), ::OpenAPI::toJsonValue(m_auth_server_url));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_public_client_isSet) {
        obj.insert(QString("public-client"), ::OpenAPI::toJsonValue(m_public_client));
    }
    if (m_realm_isSet) {
        obj.insert(QString("realm"), ::OpenAPI::toJsonValue(m_realm));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_ssl_required_isSet) {
        obj.insert(QString("ssl-required"), ::OpenAPI::toJsonValue(m_ssl_required));
    }
    return obj;
}

QString OAIKeycloakConfig::getAuthServerUrl() const {
    return m_auth_server_url;
}
void OAIKeycloakConfig::setAuthServerUrl(const QString &auth_server_url) {
    m_auth_server_url = auth_server_url;
    m_auth_server_url_isSet = true;
}

bool OAIKeycloakConfig::is_auth_server_url_Set() const{
    return m_auth_server_url_isSet;
}

bool OAIKeycloakConfig::is_auth_server_url_Valid() const{
    return m_auth_server_url_isValid;
}

bool OAIKeycloakConfig::isEnabled() const {
    return m_enabled;
}
void OAIKeycloakConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIKeycloakConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIKeycloakConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIKeycloakConfig::getPublicClient() const {
    return m_public_client;
}
void OAIKeycloakConfig::setPublicClient(const QString &public_client) {
    m_public_client = public_client;
    m_public_client_isSet = true;
}

bool OAIKeycloakConfig::is_public_client_Set() const{
    return m_public_client_isSet;
}

bool OAIKeycloakConfig::is_public_client_Valid() const{
    return m_public_client_isValid;
}

QString OAIKeycloakConfig::getRealm() const {
    return m_realm;
}
void OAIKeycloakConfig::setRealm(const QString &realm) {
    m_realm = realm;
    m_realm_isSet = true;
}

bool OAIKeycloakConfig::is_realm_Set() const{
    return m_realm_isSet;
}

bool OAIKeycloakConfig::is_realm_Valid() const{
    return m_realm_isValid;
}

QString OAIKeycloakConfig::getResource() const {
    return m_resource;
}
void OAIKeycloakConfig::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIKeycloakConfig::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIKeycloakConfig::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIKeycloakConfig::getSslRequired() const {
    return m_ssl_required;
}
void OAIKeycloakConfig::setSslRequired(const QString &ssl_required) {
    m_ssl_required = ssl_required;
    m_ssl_required_isSet = true;
}

bool OAIKeycloakConfig::is_ssl_required_Set() const{
    return m_ssl_required_isSet;
}

bool OAIKeycloakConfig::is_ssl_required_Valid() const{
    return m_ssl_required_isValid;
}

bool OAIKeycloakConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_server_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeycloakConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auth_server_url_isValid && m_enabled_isValid && m_public_client_isValid && m_realm_isValid && m_resource_isValid && m_ssl_required_isValid && true;
}

} // namespace OpenAPI
