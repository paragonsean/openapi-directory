/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrend.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrend::OAITrend(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrend::OAITrend() {
    this->initializeModel();
}

OAITrend::~OAITrend() {}

void OAITrend::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITrend::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITrend::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAITrend::DOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOW_DOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAITrend::LOW_DOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITrend::STABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOW_UP", Qt::CaseInsensitive) == 0) {
        m_value = eOAITrend::LOW_UP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UP", Qt::CaseInsensitive) == 0) {
        m_value = eOAITrend::UP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITrend::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITrend::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITrend::DOWN:
            val = "DOWN";
            break;
        case eOAITrend::LOW_DOWN:
            val = "LOW_DOWN";
            break;
        case eOAITrend::STABLE:
            val = "STABLE";
            break;
        case eOAITrend::LOW_UP:
            val = "LOW_UP";
            break;
        case eOAITrend::UP:
            val = "UP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITrend::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITrend::eOAITrend OAITrend::getValue() const {
    return m_value;
}

void OAITrend::setValue(const OAITrend::eOAITrend& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITrend::isSet() const {
    
    return m_value_isSet;
}

bool OAITrend::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
