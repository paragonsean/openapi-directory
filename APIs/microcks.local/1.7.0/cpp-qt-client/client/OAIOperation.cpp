/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperation::OAIOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperation::OAIOperation() {
    this->initializeModel();
}

OAIOperation::~OAIOperation() {}

void OAIOperation::initializeModel() {

    m_bindings_isSet = false;
    m_bindings_isValid = false;

    m_default_delay_isSet = false;
    m_default_delay_isValid = false;

    m_dispatcher_isSet = false;
    m_dispatcher_isValid = false;

    m_dispatcher_rules_isSet = false;
    m_dispatcher_rules_isValid = false;

    m_input_name_isSet = false;
    m_input_name_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_name_isSet = false;
    m_output_name_isValid = false;

    m_parameter_contraints_isSet = false;
    m_parameter_contraints_isValid = false;

    m_resource_paths_isSet = false;
    m_resource_paths_isValid = false;
}

void OAIOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperation::fromJsonObject(QJsonObject json) {

    m_bindings_isValid = ::OpenAPI::fromJsonValue(m_bindings, json[QString("bindings")]);
    m_bindings_isSet = !json[QString("bindings")].isNull() && m_bindings_isValid;

    m_default_delay_isValid = ::OpenAPI::fromJsonValue(m_default_delay, json[QString("defaultDelay")]);
    m_default_delay_isSet = !json[QString("defaultDelay")].isNull() && m_default_delay_isValid;

    m_dispatcher_isValid = ::OpenAPI::fromJsonValue(m_dispatcher, json[QString("dispatcher")]);
    m_dispatcher_isSet = !json[QString("dispatcher")].isNull() && m_dispatcher_isValid;

    m_dispatcher_rules_isValid = ::OpenAPI::fromJsonValue(m_dispatcher_rules, json[QString("dispatcherRules")]);
    m_dispatcher_rules_isSet = !json[QString("dispatcherRules")].isNull() && m_dispatcher_rules_isValid;

    m_input_name_isValid = ::OpenAPI::fromJsonValue(m_input_name, json[QString("inputName")]);
    m_input_name_isSet = !json[QString("inputName")].isNull() && m_input_name_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_output_name_isValid = ::OpenAPI::fromJsonValue(m_output_name, json[QString("outputName")]);
    m_output_name_isSet = !json[QString("outputName")].isNull() && m_output_name_isValid;

    m_parameter_contraints_isValid = ::OpenAPI::fromJsonValue(m_parameter_contraints, json[QString("parameterContraints")]);
    m_parameter_contraints_isSet = !json[QString("parameterContraints")].isNull() && m_parameter_contraints_isValid;

    m_resource_paths_isValid = ::OpenAPI::fromJsonValue(m_resource_paths, json[QString("resourcePaths")]);
    m_resource_paths_isSet = !json[QString("resourcePaths")].isNull() && m_resource_paths_isValid;
}

QString OAIOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_bindings.size() > 0) {
        obj.insert(QString("bindings"), ::OpenAPI::toJsonValue(m_bindings));
    }
    if (m_default_delay_isSet) {
        obj.insert(QString("defaultDelay"), ::OpenAPI::toJsonValue(m_default_delay));
    }
    if (m_dispatcher_isSet) {
        obj.insert(QString("dispatcher"), ::OpenAPI::toJsonValue(m_dispatcher));
    }
    if (m_dispatcher_rules_isSet) {
        obj.insert(QString("dispatcherRules"), ::OpenAPI::toJsonValue(m_dispatcher_rules));
    }
    if (m_input_name_isSet) {
        obj.insert(QString("inputName"), ::OpenAPI::toJsonValue(m_input_name));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_name_isSet) {
        obj.insert(QString("outputName"), ::OpenAPI::toJsonValue(m_output_name));
    }
    if (m_parameter_contraints.size() > 0) {
        obj.insert(QString("parameterContraints"), ::OpenAPI::toJsonValue(m_parameter_contraints));
    }
    if (m_resource_paths.size() > 0) {
        obj.insert(QString("resourcePaths"), ::OpenAPI::toJsonValue(m_resource_paths));
    }
    return obj;
}

QMap<QString, OAIBinding> OAIOperation::getBindings() const {
    return m_bindings;
}
void OAIOperation::setBindings(const QMap<QString, OAIBinding> &bindings) {
    m_bindings = bindings;
    m_bindings_isSet = true;
}

bool OAIOperation::is_bindings_Set() const{
    return m_bindings_isSet;
}

bool OAIOperation::is_bindings_Valid() const{
    return m_bindings_isValid;
}

double OAIOperation::getDefaultDelay() const {
    return m_default_delay;
}
void OAIOperation::setDefaultDelay(const double &default_delay) {
    m_default_delay = default_delay;
    m_default_delay_isSet = true;
}

bool OAIOperation::is_default_delay_Set() const{
    return m_default_delay_isSet;
}

bool OAIOperation::is_default_delay_Valid() const{
    return m_default_delay_isValid;
}

QString OAIOperation::getDispatcher() const {
    return m_dispatcher;
}
void OAIOperation::setDispatcher(const QString &dispatcher) {
    m_dispatcher = dispatcher;
    m_dispatcher_isSet = true;
}

bool OAIOperation::is_dispatcher_Set() const{
    return m_dispatcher_isSet;
}

bool OAIOperation::is_dispatcher_Valid() const{
    return m_dispatcher_isValid;
}

QString OAIOperation::getDispatcherRules() const {
    return m_dispatcher_rules;
}
void OAIOperation::setDispatcherRules(const QString &dispatcher_rules) {
    m_dispatcher_rules = dispatcher_rules;
    m_dispatcher_rules_isSet = true;
}

bool OAIOperation::is_dispatcher_rules_Set() const{
    return m_dispatcher_rules_isSet;
}

bool OAIOperation::is_dispatcher_rules_Valid() const{
    return m_dispatcher_rules_isValid;
}

QString OAIOperation::getInputName() const {
    return m_input_name;
}
void OAIOperation::setInputName(const QString &input_name) {
    m_input_name = input_name;
    m_input_name_isSet = true;
}

bool OAIOperation::is_input_name_Set() const{
    return m_input_name_isSet;
}

bool OAIOperation::is_input_name_Valid() const{
    return m_input_name_isValid;
}

QString OAIOperation::getMethod() const {
    return m_method;
}
void OAIOperation::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIOperation::is_method_Set() const{
    return m_method_isSet;
}

bool OAIOperation::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIOperation::getName() const {
    return m_name;
}
void OAIOperation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOperation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOperation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOperation::getOutputName() const {
    return m_output_name;
}
void OAIOperation::setOutputName(const QString &output_name) {
    m_output_name = output_name;
    m_output_name_isSet = true;
}

bool OAIOperation::is_output_name_Set() const{
    return m_output_name_isSet;
}

bool OAIOperation::is_output_name_Valid() const{
    return m_output_name_isValid;
}

QList<OAIParameterConstraint> OAIOperation::getParameterContraints() const {
    return m_parameter_contraints;
}
void OAIOperation::setParameterContraints(const QList<OAIParameterConstraint> &parameter_contraints) {
    m_parameter_contraints = parameter_contraints;
    m_parameter_contraints_isSet = true;
}

bool OAIOperation::is_parameter_contraints_Set() const{
    return m_parameter_contraints_isSet;
}

bool OAIOperation::is_parameter_contraints_Valid() const{
    return m_parameter_contraints_isValid;
}

QList<QString> OAIOperation::getResourcePaths() const {
    return m_resource_paths;
}
void OAIOperation::setResourcePaths(const QList<QString> &resource_paths) {
    m_resource_paths = resource_paths;
    m_resource_paths_isSet = true;
}

bool OAIOperation::is_resource_paths_Set() const{
    return m_resource_paths_isSet;
}

bool OAIOperation::is_resource_paths_Valid() const{
    return m_resource_paths_isValid;
}

bool OAIOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bindings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispatcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispatcher_rules_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_contraints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_method_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
