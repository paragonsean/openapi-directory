/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadata::OAIMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadata::OAIMetadata() {
    this->initializeModel();
}

OAIMetadata::~OAIMetadata() {}

void OAIMetadata::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;
}

void OAIMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadata::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;
}

QString OAIMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    return obj;
}

QMap<QString, QString> OAIMetadata::getAnnotations() const {
    return m_annotations;
}
void OAIMetadata::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIMetadata::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIMetadata::is_annotations_Valid() const{
    return m_annotations_isValid;
}

qint32 OAIMetadata::getCreatedOn() const {
    return m_created_on;
}
void OAIMetadata::setCreatedOn(const qint32 &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIMetadata::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIMetadata::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QMap<QString, QString> OAIMetadata::getLabels() const {
    return m_labels;
}
void OAIMetadata::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMetadata::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMetadata::is_labels_Valid() const{
    return m_labels_isValid;
}

qint32 OAIMetadata::getLastUpdate() const {
    return m_last_update;
}
void OAIMetadata::setLastUpdate(const qint32 &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIMetadata::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIMetadata::is_last_update_Valid() const{
    return m_last_update_isValid;
}

bool OAIMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_on_isValid && m_last_update_isValid && true;
}

} // namespace OpenAPI
