/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITestResult.h
 *
 * Represents the result of a Service or API test run by Microcks. Tests are related to a service and made of multiple test cases corresponding to each operations / actions composing service. Tests are run against a specific endpoint named testedEndpoint. It holds global markers telling if test still ran, is a success, how many times is has taken and so on ...
 */

#ifndef OAITestResult_H
#define OAITestResult_H

#include <QJsonObject>

#include "OAIHeaderDTO.h"
#include "OAISecretRef.h"
#include "OAITestCaseResult.h"
#include "OAITestRunnerType.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHeaderDTO;
class OAISecretRef;
class OAITestCaseResult;

class OAITestResult : public OAIObject {
public:
    OAITestResult();
    OAITestResult(QString json);
    ~OAITestResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getElapsedTime() const;
    void setElapsedTime(const double &elapsed_time);
    bool is_elapsed_time_Set() const;
    bool is_elapsed_time_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isInProgress() const;
    void setInProgress(const bool &in_progress);
    bool is_in_progress_Set() const;
    bool is_in_progress_Valid() const;

    QMap<QString, QList<OAIHeaderDTO>> getOperationHeaders() const;
    void setOperationHeaders(const QMap<QString, QList<OAIHeaderDTO>> &operation_headers);
    bool is_operation_headers_Set() const;
    bool is_operation_headers_Valid() const;

    OAITestRunnerType getRunnerType() const;
    void setRunnerType(const OAITestRunnerType &runner_type);
    bool is_runner_type_Set() const;
    bool is_runner_type_Valid() const;

    OAISecretRef getSecretRef() const;
    void setSecretRef(const OAISecretRef &secret_ref);
    bool is_secret_ref_Set() const;
    bool is_secret_ref_Valid() const;

    QString getServiceId() const;
    void setServiceId(const QString &service_id);
    bool is_service_id_Set() const;
    bool is_service_id_Valid() const;

    bool isSuccess() const;
    void setSuccess(const bool &success);
    bool is_success_Set() const;
    bool is_success_Valid() const;

    QList<OAITestCaseResult> getTestCaseResults() const;
    void setTestCaseResults(const QList<OAITestCaseResult> &test_case_results);
    bool is_test_case_results_Set() const;
    bool is_test_case_results_Valid() const;

    qint64 getTestDate() const;
    void setTestDate(const qint64 &test_date);
    bool is_test_date_Set() const;
    bool is_test_date_Valid() const;

    double getTestNumber() const;
    void setTestNumber(const double &test_number);
    bool is_test_number_Set() const;
    bool is_test_number_Valid() const;

    QString getTestedEndpoint() const;
    void setTestedEndpoint(const QString &tested_endpoint);
    bool is_tested_endpoint_Set() const;
    bool is_tested_endpoint_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    double getVersion() const;
    void setVersion(const double &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_elapsed_time;
    bool m_elapsed_time_isSet;
    bool m_elapsed_time_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_in_progress;
    bool m_in_progress_isSet;
    bool m_in_progress_isValid;

    QMap<QString, QList<OAIHeaderDTO>> m_operation_headers;
    bool m_operation_headers_isSet;
    bool m_operation_headers_isValid;

    OAITestRunnerType m_runner_type;
    bool m_runner_type_isSet;
    bool m_runner_type_isValid;

    OAISecretRef m_secret_ref;
    bool m_secret_ref_isSet;
    bool m_secret_ref_isValid;

    QString m_service_id;
    bool m_service_id_isSet;
    bool m_service_id_isValid;

    bool m_success;
    bool m_success_isSet;
    bool m_success_isValid;

    QList<OAITestCaseResult> m_test_case_results;
    bool m_test_case_results_isSet;
    bool m_test_case_results_isValid;

    qint64 m_test_date;
    bool m_test_date_isSet;
    bool m_test_date_isValid;

    double m_test_number;
    bool m_test_number_isSet;
    bool m_test_number_isValid;

    QString m_tested_endpoint;
    bool m_tested_endpoint_isSet;
    bool m_tested_endpoint_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    double m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITestResult)

#endif // OAITestResult_H
