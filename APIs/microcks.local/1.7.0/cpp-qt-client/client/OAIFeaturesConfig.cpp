/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeaturesConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeaturesConfig::OAIFeaturesConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeaturesConfig::OAIFeaturesConfig() {
    this->initializeModel();
}

OAIFeaturesConfig::~OAIFeaturesConfig() {}

void OAIFeaturesConfig::initializeModel() {

    m_async_api_isSet = false;
    m_async_api_isValid = false;

    m_microcks_hub_isSet = false;
    m_microcks_hub_isValid = false;

    m_repository_filter_isSet = false;
    m_repository_filter_isValid = false;

    m_repository_tenancy_isSet = false;
    m_repository_tenancy_isValid = false;
}

void OAIFeaturesConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeaturesConfig::fromJsonObject(QJsonObject json) {

    m_async_api_isValid = ::OpenAPI::fromJsonValue(m_async_api, json[QString("async-api")]);
    m_async_api_isSet = !json[QString("async-api")].isNull() && m_async_api_isValid;

    m_microcks_hub_isValid = ::OpenAPI::fromJsonValue(m_microcks_hub, json[QString("microcks-hub")]);
    m_microcks_hub_isSet = !json[QString("microcks-hub")].isNull() && m_microcks_hub_isValid;

    m_repository_filter_isValid = ::OpenAPI::fromJsonValue(m_repository_filter, json[QString("repository-filter")]);
    m_repository_filter_isSet = !json[QString("repository-filter")].isNull() && m_repository_filter_isValid;

    m_repository_tenancy_isValid = ::OpenAPI::fromJsonValue(m_repository_tenancy, json[QString("repository-tenancy")]);
    m_repository_tenancy_isSet = !json[QString("repository-tenancy")].isNull() && m_repository_tenancy_isValid;
}

QString OAIFeaturesConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeaturesConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_async_api.isSet()) {
        obj.insert(QString("async-api"), ::OpenAPI::toJsonValue(m_async_api));
    }
    if (m_microcks_hub.isSet()) {
        obj.insert(QString("microcks-hub"), ::OpenAPI::toJsonValue(m_microcks_hub));
    }
    if (m_repository_filter.isSet()) {
        obj.insert(QString("repository-filter"), ::OpenAPI::toJsonValue(m_repository_filter));
    }
    if (m_repository_tenancy.isSet()) {
        obj.insert(QString("repository-tenancy"), ::OpenAPI::toJsonValue(m_repository_tenancy));
    }
    return obj;
}

OAIFeaturesConfig_async_api OAIFeaturesConfig::getAsyncApi() const {
    return m_async_api;
}
void OAIFeaturesConfig::setAsyncApi(const OAIFeaturesConfig_async_api &async_api) {
    m_async_api = async_api;
    m_async_api_isSet = true;
}

bool OAIFeaturesConfig::is_async_api_Set() const{
    return m_async_api_isSet;
}

bool OAIFeaturesConfig::is_async_api_Valid() const{
    return m_async_api_isValid;
}

OAIFeaturesConfig_microcks_hub OAIFeaturesConfig::getMicrocksHub() const {
    return m_microcks_hub;
}
void OAIFeaturesConfig::setMicrocksHub(const OAIFeaturesConfig_microcks_hub &microcks_hub) {
    m_microcks_hub = microcks_hub;
    m_microcks_hub_isSet = true;
}

bool OAIFeaturesConfig::is_microcks_hub_Set() const{
    return m_microcks_hub_isSet;
}

bool OAIFeaturesConfig::is_microcks_hub_Valid() const{
    return m_microcks_hub_isValid;
}

OAIFeaturesConfig_repository_filter OAIFeaturesConfig::getRepositoryFilter() const {
    return m_repository_filter;
}
void OAIFeaturesConfig::setRepositoryFilter(const OAIFeaturesConfig_repository_filter &repository_filter) {
    m_repository_filter = repository_filter;
    m_repository_filter_isSet = true;
}

bool OAIFeaturesConfig::is_repository_filter_Set() const{
    return m_repository_filter_isSet;
}

bool OAIFeaturesConfig::is_repository_filter_Valid() const{
    return m_repository_filter_isValid;
}

OAIFeaturesConfig_repository_tenancy OAIFeaturesConfig::getRepositoryTenancy() const {
    return m_repository_tenancy;
}
void OAIFeaturesConfig::setRepositoryTenancy(const OAIFeaturesConfig_repository_tenancy &repository_tenancy) {
    m_repository_tenancy = repository_tenancy;
    m_repository_tenancy_isSet = true;
}

bool OAIFeaturesConfig::is_repository_tenancy_Set() const{
    return m_repository_tenancy_isSet;
}

bool OAIFeaturesConfig::is_repository_tenancy_Valid() const{
    return m_repository_tenancy_isValid;
}

bool OAIFeaturesConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_async_api.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_microcks_hub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_tenancy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeaturesConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
