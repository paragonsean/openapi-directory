/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConfigApi_H
#define OAI_OAIConfigApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICounter.h"
#include "OAIKeycloakConfig.h"
#include "OAISecret.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConfigApi : public QObject {
    Q_OBJECT

public:
    OAIConfigApi(const int timeOut = 0);
    ~OAIConfigApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_secret OAISecret [optional]
    */
    virtual void createSecret(const ::OpenAPI::OptionalParam<OAISecret> &oai_secret = ::OpenAPI::OptionalParam<OAISecret>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteSecret(const QString &id);


    virtual void getFeaturesConfiguration();


    virtual void getKeycloakConfig();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getSecret(const QString &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void getSecrets(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());


    virtual void getSecretsCounter();

    /**
    * @param[in]  id QString [required]
    */
    virtual void updateSecret(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSecretCallback(OAIHttpRequestWorker *worker);
    void deleteSecretCallback(OAIHttpRequestWorker *worker);
    void getFeaturesConfigurationCallback(OAIHttpRequestWorker *worker);
    void getKeycloakConfigCallback(OAIHttpRequestWorker *worker);
    void getSecretCallback(OAIHttpRequestWorker *worker);
    void getSecretsCallback(OAIHttpRequestWorker *worker);
    void getSecretsCounterCallback(OAIHttpRequestWorker *worker);
    void updateSecretCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSecretSignal(OAISecret summary);
    void deleteSecretSignal();
    void getFeaturesConfigurationSignal();
    void getKeycloakConfigSignal(OAIKeycloakConfig summary);
    void getSecretSignal(OAISecret summary);
    void getSecretsSignal(QList<OAISecret> summary);
    void getSecretsCounterSignal(OAICounter summary);
    void updateSecretSignal();


    void createSecretSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void deleteSecretSignalFull(OAIHttpRequestWorker *worker);
    void getFeaturesConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void getKeycloakConfigSignalFull(OAIHttpRequestWorker *worker, OAIKeycloakConfig summary);
    void getSecretSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void getSecretsSignalFull(OAIHttpRequestWorker *worker, QList<OAISecret> summary);
    void getSecretsCounterSignalFull(OAIHttpRequestWorker *worker, OAICounter summary);
    void updateSecretSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createSecretSignalError() instead")
    void createSecretSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSecretSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSecretSignalError() instead")
    void deleteSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturesConfigurationSignalError() instead")
    void getFeaturesConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturesConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeycloakConfigSignalError() instead")
    void getKeycloakConfigSignalE(OAIKeycloakConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeycloakConfigSignalError(OAIKeycloakConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretSignalError() instead")
    void getSecretSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretsSignalError() instead")
    void getSecretsSignalE(QList<OAISecret> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretsSignalError(QList<OAISecret> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretsCounterSignalError() instead")
    void getSecretsCounterSignalE(OAICounter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretsCounterSignalError(OAICounter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSecretSignalError() instead")
    void updateSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSecretSignalErrorFull() instead")
    void createSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSecretSignalErrorFull() instead")
    void deleteSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturesConfigurationSignalErrorFull() instead")
    void getFeaturesConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturesConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeycloakConfigSignalErrorFull() instead")
    void getKeycloakConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeycloakConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretSignalErrorFull() instead")
    void getSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretsSignalErrorFull() instead")
    void getSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretsCounterSignalErrorFull() instead")
    void getSecretsCounterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretsCounterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSecretSignalErrorFull() instead")
    void updateSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
