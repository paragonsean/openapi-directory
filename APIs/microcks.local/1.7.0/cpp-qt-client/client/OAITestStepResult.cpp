/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestStepResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestStepResult::OAITestStepResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestStepResult::OAITestStepResult() {
    this->initializeModel();
}

OAITestStepResult::~OAITestStepResult() {}

void OAITestStepResult::initializeModel() {

    m_elapsed_time_isSet = false;
    m_elapsed_time_isValid = false;

    m_event_message_name_isSet = false;
    m_event_message_name_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_request_name_isSet = false;
    m_request_name_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAITestStepResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestStepResult::fromJsonObject(QJsonObject json) {

    m_elapsed_time_isValid = ::OpenAPI::fromJsonValue(m_elapsed_time, json[QString("elapsedTime")]);
    m_elapsed_time_isSet = !json[QString("elapsedTime")].isNull() && m_elapsed_time_isValid;

    m_event_message_name_isValid = ::OpenAPI::fromJsonValue(m_event_message_name, json[QString("eventMessageName")]);
    m_event_message_name_isSet = !json[QString("eventMessageName")].isNull() && m_event_message_name_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_request_name_isValid = ::OpenAPI::fromJsonValue(m_request_name, json[QString("requestName")]);
    m_request_name_isSet = !json[QString("requestName")].isNull() && m_request_name_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAITestStepResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestStepResult::asJsonObject() const {
    QJsonObject obj;
    if (m_elapsed_time_isSet) {
        obj.insert(QString("elapsedTime"), ::OpenAPI::toJsonValue(m_elapsed_time));
    }
    if (m_event_message_name_isSet) {
        obj.insert(QString("eventMessageName"), ::OpenAPI::toJsonValue(m_event_message_name));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_request_name_isSet) {
        obj.insert(QString("requestName"), ::OpenAPI::toJsonValue(m_request_name));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

double OAITestStepResult::getElapsedTime() const {
    return m_elapsed_time;
}
void OAITestStepResult::setElapsedTime(const double &elapsed_time) {
    m_elapsed_time = elapsed_time;
    m_elapsed_time_isSet = true;
}

bool OAITestStepResult::is_elapsed_time_Set() const{
    return m_elapsed_time_isSet;
}

bool OAITestStepResult::is_elapsed_time_Valid() const{
    return m_elapsed_time_isValid;
}

QString OAITestStepResult::getEventMessageName() const {
    return m_event_message_name;
}
void OAITestStepResult::setEventMessageName(const QString &event_message_name) {
    m_event_message_name = event_message_name;
    m_event_message_name_isSet = true;
}

bool OAITestStepResult::is_event_message_name_Set() const{
    return m_event_message_name_isSet;
}

bool OAITestStepResult::is_event_message_name_Valid() const{
    return m_event_message_name_isValid;
}

QString OAITestStepResult::getMessage() const {
    return m_message;
}
void OAITestStepResult::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITestStepResult::is_message_Set() const{
    return m_message_isSet;
}

bool OAITestStepResult::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITestStepResult::getRequestName() const {
    return m_request_name;
}
void OAITestStepResult::setRequestName(const QString &request_name) {
    m_request_name = request_name;
    m_request_name_isSet = true;
}

bool OAITestStepResult::is_request_name_Set() const{
    return m_request_name_isSet;
}

bool OAITestStepResult::is_request_name_Valid() const{
    return m_request_name_isValid;
}

bool OAITestStepResult::isSuccess() const {
    return m_success;
}
void OAITestStepResult::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAITestStepResult::is_success_Set() const{
    return m_success_isSet;
}

bool OAITestStepResult::is_success_Valid() const{
    return m_success_isValid;
}

bool OAITestStepResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elapsed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_message_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestStepResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_success_isValid && true;
}

} // namespace OpenAPI
