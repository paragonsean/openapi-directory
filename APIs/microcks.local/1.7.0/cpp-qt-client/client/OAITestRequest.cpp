/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestRequest::OAITestRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestRequest::OAITestRequest() {
    this->initializeModel();
}

OAITestRequest::~OAITestRequest() {}

void OAITestRequest::initializeModel() {

    m_filtered_operations_isSet = false;
    m_filtered_operations_isValid = false;

    m_operation_headers_isSet = false;
    m_operation_headers_isValid = false;

    m_runner_type_isSet = false;
    m_runner_type_isValid = false;

    m_secret_name_isSet = false;
    m_secret_name_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_test_endpoint_isSet = false;
    m_test_endpoint_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAITestRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestRequest::fromJsonObject(QJsonObject json) {

    m_filtered_operations_isValid = ::OpenAPI::fromJsonValue(m_filtered_operations, json[QString("filteredOperations")]);
    m_filtered_operations_isSet = !json[QString("filteredOperations")].isNull() && m_filtered_operations_isValid;

    if(json["operationHeaders"].isObject()){
        auto varmap = json["operationHeaders"].toObject().toVariantMap();
        m_operation_headers_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIHeaderDTO> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_operation_headers_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_operation_headers_isSet &= !jval.isNull() && m_operation_headers_isValid;
                m_operation_headers.insert(m_operation_headers.end(), val, item);
            }
        }
    }

    m_runner_type_isValid = ::OpenAPI::fromJsonValue(m_runner_type, json[QString("runnerType")]);
    m_runner_type_isSet = !json[QString("runnerType")].isNull() && m_runner_type_isValid;

    m_secret_name_isValid = ::OpenAPI::fromJsonValue(m_secret_name, json[QString("secretName")]);
    m_secret_name_isSet = !json[QString("secretName")].isNull() && m_secret_name_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_test_endpoint_isValid = ::OpenAPI::fromJsonValue(m_test_endpoint, json[QString("testEndpoint")]);
    m_test_endpoint_isSet = !json[QString("testEndpoint")].isNull() && m_test_endpoint_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAITestRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filtered_operations.size() > 0) {
        obj.insert(QString("filteredOperations"), ::OpenAPI::toJsonValue(m_filtered_operations));
    }
    if (m_operation_headers.size() > 0) {
        
        obj.insert(QString("operationHeaders"), toJsonValue(m_operation_headers));
    }
    if (m_runner_type.isSet()) {
        obj.insert(QString("runnerType"), ::OpenAPI::toJsonValue(m_runner_type));
    }
    if (m_secret_name_isSet) {
        obj.insert(QString("secretName"), ::OpenAPI::toJsonValue(m_secret_name));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_test_endpoint_isSet) {
        obj.insert(QString("testEndpoint"), ::OpenAPI::toJsonValue(m_test_endpoint));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QList<QString> OAITestRequest::getFilteredOperations() const {
    return m_filtered_operations;
}
void OAITestRequest::setFilteredOperations(const QList<QString> &filtered_operations) {
    m_filtered_operations = filtered_operations;
    m_filtered_operations_isSet = true;
}

bool OAITestRequest::is_filtered_operations_Set() const{
    return m_filtered_operations_isSet;
}

bool OAITestRequest::is_filtered_operations_Valid() const{
    return m_filtered_operations_isValid;
}

QMap<QString, QList<OAIHeaderDTO>> OAITestRequest::getOperationHeaders() const {
    return m_operation_headers;
}
void OAITestRequest::setOperationHeaders(const QMap<QString, QList<OAIHeaderDTO>> &operation_headers) {
    m_operation_headers = operation_headers;
    m_operation_headers_isSet = true;
}

bool OAITestRequest::is_operation_headers_Set() const{
    return m_operation_headers_isSet;
}

bool OAITestRequest::is_operation_headers_Valid() const{
    return m_operation_headers_isValid;
}

OAITestRunnerType OAITestRequest::getRunnerType() const {
    return m_runner_type;
}
void OAITestRequest::setRunnerType(const OAITestRunnerType &runner_type) {
    m_runner_type = runner_type;
    m_runner_type_isSet = true;
}

bool OAITestRequest::is_runner_type_Set() const{
    return m_runner_type_isSet;
}

bool OAITestRequest::is_runner_type_Valid() const{
    return m_runner_type_isValid;
}

QString OAITestRequest::getSecretName() const {
    return m_secret_name;
}
void OAITestRequest::setSecretName(const QString &secret_name) {
    m_secret_name = secret_name;
    m_secret_name_isSet = true;
}

bool OAITestRequest::is_secret_name_Set() const{
    return m_secret_name_isSet;
}

bool OAITestRequest::is_secret_name_Valid() const{
    return m_secret_name_isValid;
}

QString OAITestRequest::getServiceId() const {
    return m_service_id;
}
void OAITestRequest::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAITestRequest::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAITestRequest::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAITestRequest::getTestEndpoint() const {
    return m_test_endpoint;
}
void OAITestRequest::setTestEndpoint(const QString &test_endpoint) {
    m_test_endpoint = test_endpoint;
    m_test_endpoint_isSet = true;
}

bool OAITestRequest::is_test_endpoint_Set() const{
    return m_test_endpoint_isSet;
}

bool OAITestRequest::is_test_endpoint_Valid() const{
    return m_test_endpoint_isValid;
}

qint32 OAITestRequest::getTimeout() const {
    return m_timeout;
}
void OAITestRequest::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAITestRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAITestRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAITestRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filtered_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runner_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_runner_type_isValid && m_service_id_isValid && m_test_endpoint_isValid && m_timeout_isValid && true;
}

} // namespace OpenAPI
