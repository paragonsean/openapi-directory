/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportJob::OAIImportJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportJob::OAIImportJob() {
    this->initializeModel();
}

OAIImportJob::~OAIImportJob() {}

void OAIImportJob::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_import_date_isSet = false;
    m_last_import_date_isValid = false;

    m_last_import_error_isSet = false;
    m_last_import_error_isValid = false;

    m_main_artifact_isSet = false;
    m_main_artifact_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_repository_disable_ssl_validation_isSet = false;
    m_repository_disable_ssl_validation_isValid = false;

    m_repository_url_isSet = false;
    m_repository_url_isValid = false;

    m_secret_ref_isSet = false;
    m_secret_ref_isValid = false;

    m_service_refs_isSet = false;
    m_service_refs_isValid = false;
}

void OAIImportJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportJob::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_import_date_isValid = ::OpenAPI::fromJsonValue(m_last_import_date, json[QString("lastImportDate")]);
    m_last_import_date_isSet = !json[QString("lastImportDate")].isNull() && m_last_import_date_isValid;

    m_last_import_error_isValid = ::OpenAPI::fromJsonValue(m_last_import_error, json[QString("lastImportError")]);
    m_last_import_error_isSet = !json[QString("lastImportError")].isNull() && m_last_import_error_isValid;

    m_main_artifact_isValid = ::OpenAPI::fromJsonValue(m_main_artifact, json[QString("mainArtifact")]);
    m_main_artifact_isSet = !json[QString("mainArtifact")].isNull() && m_main_artifact_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_repository_disable_ssl_validation_isValid = ::OpenAPI::fromJsonValue(m_repository_disable_ssl_validation, json[QString("repositoryDisableSSLValidation")]);
    m_repository_disable_ssl_validation_isSet = !json[QString("repositoryDisableSSLValidation")].isNull() && m_repository_disable_ssl_validation_isValid;

    m_repository_url_isValid = ::OpenAPI::fromJsonValue(m_repository_url, json[QString("repositoryUrl")]);
    m_repository_url_isSet = !json[QString("repositoryUrl")].isNull() && m_repository_url_isValid;

    m_secret_ref_isValid = ::OpenAPI::fromJsonValue(m_secret_ref, json[QString("secretRef")]);
    m_secret_ref_isSet = !json[QString("secretRef")].isNull() && m_secret_ref_isValid;

    m_service_refs_isValid = ::OpenAPI::fromJsonValue(m_service_refs, json[QString("serviceRefs")]);
    m_service_refs_isSet = !json[QString("serviceRefs")].isNull() && m_service_refs_isValid;
}

QString OAIImportJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportJob::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_import_date_isSet) {
        obj.insert(QString("lastImportDate"), ::OpenAPI::toJsonValue(m_last_import_date));
    }
    if (m_last_import_error_isSet) {
        obj.insert(QString("lastImportError"), ::OpenAPI::toJsonValue(m_last_import_error));
    }
    if (m_main_artifact_isSet) {
        obj.insert(QString("mainArtifact"), ::OpenAPI::toJsonValue(m_main_artifact));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_repository_disable_ssl_validation_isSet) {
        obj.insert(QString("repositoryDisableSSLValidation"), ::OpenAPI::toJsonValue(m_repository_disable_ssl_validation));
    }
    if (m_repository_url_isSet) {
        obj.insert(QString("repositoryUrl"), ::OpenAPI::toJsonValue(m_repository_url));
    }
    if (m_secret_ref.isSet()) {
        obj.insert(QString("secretRef"), ::OpenAPI::toJsonValue(m_secret_ref));
    }
    if (m_service_refs.size() > 0) {
        obj.insert(QString("serviceRefs"), ::OpenAPI::toJsonValue(m_service_refs));
    }
    return obj;
}

bool OAIImportJob::isActive() const {
    return m_active;
}
void OAIImportJob::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIImportJob::is_active_Set() const{
    return m_active_isSet;
}

bool OAIImportJob::is_active_Valid() const{
    return m_active_isValid;
}

QDateTime OAIImportJob::getCreatedDate() const {
    return m_created_date;
}
void OAIImportJob::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIImportJob::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIImportJob::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIImportJob::getEtag() const {
    return m_etag;
}
void OAIImportJob::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIImportJob::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIImportJob::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIImportJob::getFrequency() const {
    return m_frequency;
}
void OAIImportJob::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIImportJob::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIImportJob::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIImportJob::getId() const {
    return m_id;
}
void OAIImportJob::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImportJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImportJob::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIImportJob::getLastImportDate() const {
    return m_last_import_date;
}
void OAIImportJob::setLastImportDate(const QDateTime &last_import_date) {
    m_last_import_date = last_import_date;
    m_last_import_date_isSet = true;
}

bool OAIImportJob::is_last_import_date_Set() const{
    return m_last_import_date_isSet;
}

bool OAIImportJob::is_last_import_date_Valid() const{
    return m_last_import_date_isValid;
}

QString OAIImportJob::getLastImportError() const {
    return m_last_import_error;
}
void OAIImportJob::setLastImportError(const QString &last_import_error) {
    m_last_import_error = last_import_error;
    m_last_import_error_isSet = true;
}

bool OAIImportJob::is_last_import_error_Set() const{
    return m_last_import_error_isSet;
}

bool OAIImportJob::is_last_import_error_Valid() const{
    return m_last_import_error_isValid;
}

bool OAIImportJob::isMainArtifact() const {
    return m_main_artifact;
}
void OAIImportJob::setMainArtifact(const bool &main_artifact) {
    m_main_artifact = main_artifact;
    m_main_artifact_isSet = true;
}

bool OAIImportJob::is_main_artifact_Set() const{
    return m_main_artifact_isSet;
}

bool OAIImportJob::is_main_artifact_Valid() const{
    return m_main_artifact_isValid;
}

OAIMetadata OAIImportJob::getMetadata() const {
    return m_metadata;
}
void OAIImportJob::setMetadata(const OAIMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIImportJob::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIImportJob::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIImportJob::getName() const {
    return m_name;
}
void OAIImportJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImportJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImportJob::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIImportJob::isRepositoryDisableSslValidation() const {
    return m_repository_disable_ssl_validation;
}
void OAIImportJob::setRepositoryDisableSslValidation(const bool &repository_disable_ssl_validation) {
    m_repository_disable_ssl_validation = repository_disable_ssl_validation;
    m_repository_disable_ssl_validation_isSet = true;
}

bool OAIImportJob::is_repository_disable_ssl_validation_Set() const{
    return m_repository_disable_ssl_validation_isSet;
}

bool OAIImportJob::is_repository_disable_ssl_validation_Valid() const{
    return m_repository_disable_ssl_validation_isValid;
}

QString OAIImportJob::getRepositoryUrl() const {
    return m_repository_url;
}
void OAIImportJob::setRepositoryUrl(const QString &repository_url) {
    m_repository_url = repository_url;
    m_repository_url_isSet = true;
}

bool OAIImportJob::is_repository_url_Set() const{
    return m_repository_url_isSet;
}

bool OAIImportJob::is_repository_url_Valid() const{
    return m_repository_url_isValid;
}

OAISecretRef OAIImportJob::getSecretRef() const {
    return m_secret_ref;
}
void OAIImportJob::setSecretRef(const OAISecretRef &secret_ref) {
    m_secret_ref = secret_ref;
    m_secret_ref_isSet = true;
}

bool OAIImportJob::is_secret_ref_Set() const{
    return m_secret_ref_isSet;
}

bool OAIImportJob::is_secret_ref_Valid() const{
    return m_secret_ref_isValid;
}

QList<OAIServiceRef> OAIImportJob::getServiceRefs() const {
    return m_service_refs;
}
void OAIImportJob::setServiceRefs(const QList<OAIServiceRef> &service_refs) {
    m_service_refs = service_refs;
    m_service_refs_isSet = true;
}

bool OAIImportJob::is_service_refs_Set() const{
    return m_service_refs_isSet;
}

bool OAIImportJob::is_service_refs_Valid() const{
    return m_service_refs_isValid;
}

bool OAIImportJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_import_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_import_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_artifact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_disable_ssl_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_repository_url_isValid && true;
}

} // namespace OpenAPI
