/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_xml_ns_isSet = false;
    m_xml_ns_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_xml_ns_isValid = ::OpenAPI::fromJsonValue(m_xml_ns, json[QString("xmlNS")]);
    m_xml_ns_isSet = !json[QString("xmlNS")].isNull() && m_xml_ns_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operations.size() > 0) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_xml_ns_isSet) {
        obj.insert(QString("xmlNS"), ::OpenAPI::toJsonValue(m_xml_ns));
    }
    return obj;
}

QString OAIService::getId() const {
    return m_id;
}
void OAIService::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIService::is_id_Set() const{
    return m_id_isSet;
}

bool OAIService::is_id_Valid() const{
    return m_id_isValid;
}

OAIMetadata OAIService::getMetadata() const {
    return m_metadata;
}
void OAIService::setMetadata(const OAIMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIService::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIService::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOperation> OAIService::getOperations() const {
    return m_operations;
}
void OAIService::setOperations(const QList<OAIOperation> &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIService::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIService::is_operations_Valid() const{
    return m_operations_isValid;
}

QString OAIService::getType() const {
    return m_type;
}
void OAIService::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIService::is_type_Set() const{
    return m_type_isSet;
}

bool OAIService::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIService::getVersion() const {
    return m_version;
}
void OAIService::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIService::is_version_Set() const{
    return m_version_isSet;
}

bool OAIService::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIService::getXmlNs() const {
    return m_xml_ns;
}
void OAIService::setXmlNs(const QString &xml_ns) {
    m_xml_ns = xml_ns;
    m_xml_ns_isSet = true;
}

bool OAIService::is_xml_ns_Set() const{
    return m_xml_ns_isSet;
}

bool OAIService::is_xml_ns_Valid() const{
    return m_xml_ns_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xml_ns_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
