/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDailyInvocationStatistic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDailyInvocationStatistic::OAIDailyInvocationStatistic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDailyInvocationStatistic::OAIDailyInvocationStatistic() {
    this->initializeModel();
}

OAIDailyInvocationStatistic::~OAIDailyInvocationStatistic() {}

void OAIDailyInvocationStatistic::initializeModel() {

    m_daily_count_isSet = false;
    m_daily_count_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_hourly_count_isSet = false;
    m_hourly_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_minute_count_isSet = false;
    m_minute_count_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_version_isSet = false;
    m_service_version_isValid = false;
}

void OAIDailyInvocationStatistic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDailyInvocationStatistic::fromJsonObject(QJsonObject json) {

    m_daily_count_isValid = ::OpenAPI::fromJsonValue(m_daily_count, json[QString("dailyCount")]);
    m_daily_count_isSet = !json[QString("dailyCount")].isNull() && m_daily_count_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_hourly_count_isValid = ::OpenAPI::fromJsonValue(m_hourly_count, json[QString("hourlyCount")]);
    m_hourly_count_isSet = !json[QString("hourlyCount")].isNull() && m_hourly_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_minute_count_isValid = ::OpenAPI::fromJsonValue(m_minute_count, json[QString("minuteCount")]);
    m_minute_count_isSet = !json[QString("minuteCount")].isNull() && m_minute_count_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_service_version_isValid = ::OpenAPI::fromJsonValue(m_service_version, json[QString("serviceVersion")]);
    m_service_version_isSet = !json[QString("serviceVersion")].isNull() && m_service_version_isValid;
}

QString OAIDailyInvocationStatistic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDailyInvocationStatistic::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_count_isSet) {
        obj.insert(QString("dailyCount"), ::OpenAPI::toJsonValue(m_daily_count));
    }
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_hourly_count.size() > 0) {
        obj.insert(QString("hourlyCount"), ::OpenAPI::toJsonValue(m_hourly_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_minute_count.size() > 0) {
        obj.insert(QString("minuteCount"), ::OpenAPI::toJsonValue(m_minute_count));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_version_isSet) {
        obj.insert(QString("serviceVersion"), ::OpenAPI::toJsonValue(m_service_version));
    }
    return obj;
}

double OAIDailyInvocationStatistic::getDailyCount() const {
    return m_daily_count;
}
void OAIDailyInvocationStatistic::setDailyCount(const double &daily_count) {
    m_daily_count = daily_count;
    m_daily_count_isSet = true;
}

bool OAIDailyInvocationStatistic::is_daily_count_Set() const{
    return m_daily_count_isSet;
}

bool OAIDailyInvocationStatistic::is_daily_count_Valid() const{
    return m_daily_count_isValid;
}

QString OAIDailyInvocationStatistic::getDay() const {
    return m_day;
}
void OAIDailyInvocationStatistic::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIDailyInvocationStatistic::is_day_Set() const{
    return m_day_isSet;
}

bool OAIDailyInvocationStatistic::is_day_Valid() const{
    return m_day_isValid;
}

QMap<QString, QJsonValue> OAIDailyInvocationStatistic::getHourlyCount() const {
    return m_hourly_count;
}
void OAIDailyInvocationStatistic::setHourlyCount(const QMap<QString, QJsonValue> &hourly_count) {
    m_hourly_count = hourly_count;
    m_hourly_count_isSet = true;
}

bool OAIDailyInvocationStatistic::is_hourly_count_Set() const{
    return m_hourly_count_isSet;
}

bool OAIDailyInvocationStatistic::is_hourly_count_Valid() const{
    return m_hourly_count_isValid;
}

QString OAIDailyInvocationStatistic::getId() const {
    return m_id;
}
void OAIDailyInvocationStatistic::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDailyInvocationStatistic::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDailyInvocationStatistic::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QJsonValue> OAIDailyInvocationStatistic::getMinuteCount() const {
    return m_minute_count;
}
void OAIDailyInvocationStatistic::setMinuteCount(const QMap<QString, QJsonValue> &minute_count) {
    m_minute_count = minute_count;
    m_minute_count_isSet = true;
}

bool OAIDailyInvocationStatistic::is_minute_count_Set() const{
    return m_minute_count_isSet;
}

bool OAIDailyInvocationStatistic::is_minute_count_Valid() const{
    return m_minute_count_isValid;
}

QString OAIDailyInvocationStatistic::getServiceName() const {
    return m_service_name;
}
void OAIDailyInvocationStatistic::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIDailyInvocationStatistic::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIDailyInvocationStatistic::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIDailyInvocationStatistic::getServiceVersion() const {
    return m_service_version;
}
void OAIDailyInvocationStatistic::setServiceVersion(const QString &service_version) {
    m_service_version = service_version;
    m_service_version_isSet = true;
}

bool OAIDailyInvocationStatistic::is_service_version_Set() const{
    return m_service_version_isSet;
}

bool OAIDailyInvocationStatistic::is_service_version_Valid() const{
    return m_service_version_isValid;
}

bool OAIDailyInvocationStatistic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_count.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minute_count.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDailyInvocationStatistic::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_daily_count_isValid && m_day_isValid && m_id_isValid && m_service_name_isValid && m_service_version_isValid && true;
}

} // namespace OpenAPI
