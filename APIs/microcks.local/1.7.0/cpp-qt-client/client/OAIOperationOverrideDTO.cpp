/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationOverrideDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationOverrideDTO::OAIOperationOverrideDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationOverrideDTO::OAIOperationOverrideDTO() {
    this->initializeModel();
}

OAIOperationOverrideDTO::~OAIOperationOverrideDTO() {}

void OAIOperationOverrideDTO::initializeModel() {

    m_default_delay_isSet = false;
    m_default_delay_isValid = false;

    m_dispatcher_isSet = false;
    m_dispatcher_isValid = false;

    m_dispatcher_rules_isSet = false;
    m_dispatcher_rules_isValid = false;

    m_parameter_constraints_isSet = false;
    m_parameter_constraints_isValid = false;
}

void OAIOperationOverrideDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationOverrideDTO::fromJsonObject(QJsonObject json) {

    m_default_delay_isValid = ::OpenAPI::fromJsonValue(m_default_delay, json[QString("defaultDelay")]);
    m_default_delay_isSet = !json[QString("defaultDelay")].isNull() && m_default_delay_isValid;

    m_dispatcher_isValid = ::OpenAPI::fromJsonValue(m_dispatcher, json[QString("dispatcher")]);
    m_dispatcher_isSet = !json[QString("dispatcher")].isNull() && m_dispatcher_isValid;

    m_dispatcher_rules_isValid = ::OpenAPI::fromJsonValue(m_dispatcher_rules, json[QString("dispatcherRules")]);
    m_dispatcher_rules_isSet = !json[QString("dispatcherRules")].isNull() && m_dispatcher_rules_isValid;

    m_parameter_constraints_isValid = ::OpenAPI::fromJsonValue(m_parameter_constraints, json[QString("parameterConstraints")]);
    m_parameter_constraints_isSet = !json[QString("parameterConstraints")].isNull() && m_parameter_constraints_isValid;
}

QString OAIOperationOverrideDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationOverrideDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_default_delay_isSet) {
        obj.insert(QString("defaultDelay"), ::OpenAPI::toJsonValue(m_default_delay));
    }
    if (m_dispatcher_isSet) {
        obj.insert(QString("dispatcher"), ::OpenAPI::toJsonValue(m_dispatcher));
    }
    if (m_dispatcher_rules_isSet) {
        obj.insert(QString("dispatcherRules"), ::OpenAPI::toJsonValue(m_dispatcher_rules));
    }
    if (m_parameter_constraints.size() > 0) {
        obj.insert(QString("parameterConstraints"), ::OpenAPI::toJsonValue(m_parameter_constraints));
    }
    return obj;
}

qint32 OAIOperationOverrideDTO::getDefaultDelay() const {
    return m_default_delay;
}
void OAIOperationOverrideDTO::setDefaultDelay(const qint32 &default_delay) {
    m_default_delay = default_delay;
    m_default_delay_isSet = true;
}

bool OAIOperationOverrideDTO::is_default_delay_Set() const{
    return m_default_delay_isSet;
}

bool OAIOperationOverrideDTO::is_default_delay_Valid() const{
    return m_default_delay_isValid;
}

QString OAIOperationOverrideDTO::getDispatcher() const {
    return m_dispatcher;
}
void OAIOperationOverrideDTO::setDispatcher(const QString &dispatcher) {
    m_dispatcher = dispatcher;
    m_dispatcher_isSet = true;
}

bool OAIOperationOverrideDTO::is_dispatcher_Set() const{
    return m_dispatcher_isSet;
}

bool OAIOperationOverrideDTO::is_dispatcher_Valid() const{
    return m_dispatcher_isValid;
}

QString OAIOperationOverrideDTO::getDispatcherRules() const {
    return m_dispatcher_rules;
}
void OAIOperationOverrideDTO::setDispatcherRules(const QString &dispatcher_rules) {
    m_dispatcher_rules = dispatcher_rules;
    m_dispatcher_rules_isSet = true;
}

bool OAIOperationOverrideDTO::is_dispatcher_rules_Set() const{
    return m_dispatcher_rules_isSet;
}

bool OAIOperationOverrideDTO::is_dispatcher_rules_Valid() const{
    return m_dispatcher_rules_isValid;
}

QList<OAIParameterConstraint> OAIOperationOverrideDTO::getParameterConstraints() const {
    return m_parameter_constraints;
}
void OAIOperationOverrideDTO::setParameterConstraints(const QList<OAIParameterConstraint> &parameter_constraints) {
    m_parameter_constraints = parameter_constraints;
    m_parameter_constraints_isSet = true;
}

bool OAIOperationOverrideDTO::is_parameter_constraints_Set() const{
    return m_parameter_constraints_isSet;
}

bool OAIOperationOverrideDTO::is_parameter_constraints_Valid() const{
    return m_parameter_constraints_isValid;
}

bool OAIOperationOverrideDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispatcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispatcher_rules_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_constraints.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationOverrideDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
