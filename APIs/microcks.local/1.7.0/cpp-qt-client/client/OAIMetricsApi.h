/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMetricsApi_H
#define OAI_OAIMetricsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDailyInvocationStatistic.h"
#include "OAITestConformanceMetric.h"
#include "OAITestResultSummary.h"
#include "OAIWeightedMetricValue.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMetricsApi : public QObject {
    Q_OBJECT

public:
    OAIMetricsApi(const int timeOut = 0);
    ~OAIMetricsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  day QString [optional]
    */
    virtual void getAggregatedInvocationsStats(const ::OpenAPI::OptionalParam<QString> &day = ::OpenAPI::OptionalParam<QString>());


    virtual void getConformanceMetricsAggregation();

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_version QString [required]
    * @param[in]  day QString [optional]
    */
    virtual void getInvocationStatsByService(const QString &service_name, const QString &service_version, const ::OpenAPI::OptionalParam<QString> &day = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void getLatestAggregatedInvocationsStats(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void getLatestTestResults(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void getServiceTestConformanceMetric(const QString &service_id);

    /**
    * @param[in]  day QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getTopIvnocationsStatsByDay(const ::OpenAPI::OptionalParam<QString> &day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAggregatedInvocationsStatsCallback(OAIHttpRequestWorker *worker);
    void getConformanceMetricsAggregationCallback(OAIHttpRequestWorker *worker);
    void getInvocationStatsByServiceCallback(OAIHttpRequestWorker *worker);
    void getLatestAggregatedInvocationsStatsCallback(OAIHttpRequestWorker *worker);
    void getLatestTestResultsCallback(OAIHttpRequestWorker *worker);
    void getServiceTestConformanceMetricCallback(OAIHttpRequestWorker *worker);
    void getTopIvnocationsStatsByDayCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAggregatedInvocationsStatsSignal(OAIDailyInvocationStatistic summary);
    void getConformanceMetricsAggregationSignal(QList<OAIWeightedMetricValue> summary);
    void getInvocationStatsByServiceSignal(OAIDailyInvocationStatistic summary);
    void getLatestAggregatedInvocationsStatsSignal(QMap<QString, double> summary);
    void getLatestTestResultsSignal(QList<OAITestResultSummary> summary);
    void getServiceTestConformanceMetricSignal(OAITestConformanceMetric summary);
    void getTopIvnocationsStatsByDaySignal(QList<OAIDailyInvocationStatistic> summary);


    void getAggregatedInvocationsStatsSignalFull(OAIHttpRequestWorker *worker, OAIDailyInvocationStatistic summary);
    void getConformanceMetricsAggregationSignalFull(OAIHttpRequestWorker *worker, QList<OAIWeightedMetricValue> summary);
    void getInvocationStatsByServiceSignalFull(OAIHttpRequestWorker *worker, OAIDailyInvocationStatistic summary);
    void getLatestAggregatedInvocationsStatsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, double> summary);
    void getLatestTestResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAITestResultSummary> summary);
    void getServiceTestConformanceMetricSignalFull(OAIHttpRequestWorker *worker, OAITestConformanceMetric summary);
    void getTopIvnocationsStatsByDaySignalFull(OAIHttpRequestWorker *worker, QList<OAIDailyInvocationStatistic> summary);

    Q_DECL_DEPRECATED_X("Use getAggregatedInvocationsStatsSignalError() instead")
    void getAggregatedInvocationsStatsSignalE(OAIDailyInvocationStatistic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAggregatedInvocationsStatsSignalError(OAIDailyInvocationStatistic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConformanceMetricsAggregationSignalError() instead")
    void getConformanceMetricsAggregationSignalE(QList<OAIWeightedMetricValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConformanceMetricsAggregationSignalError(QList<OAIWeightedMetricValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvocationStatsByServiceSignalError() instead")
    void getInvocationStatsByServiceSignalE(OAIDailyInvocationStatistic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvocationStatsByServiceSignalError(OAIDailyInvocationStatistic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestAggregatedInvocationsStatsSignalError() instead")
    void getLatestAggregatedInvocationsStatsSignalE(QMap<QString, double> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestAggregatedInvocationsStatsSignalError(QMap<QString, double> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestTestResultsSignalError() instead")
    void getLatestTestResultsSignalE(QList<OAITestResultSummary> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestTestResultsSignalError(QList<OAITestResultSummary> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceTestConformanceMetricSignalError() instead")
    void getServiceTestConformanceMetricSignalE(OAITestConformanceMetric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceTestConformanceMetricSignalError(OAITestConformanceMetric summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopIvnocationsStatsByDaySignalError() instead")
    void getTopIvnocationsStatsByDaySignalE(QList<OAIDailyInvocationStatistic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTopIvnocationsStatsByDaySignalError(QList<OAIDailyInvocationStatistic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAggregatedInvocationsStatsSignalErrorFull() instead")
    void getAggregatedInvocationsStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAggregatedInvocationsStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConformanceMetricsAggregationSignalErrorFull() instead")
    void getConformanceMetricsAggregationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConformanceMetricsAggregationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvocationStatsByServiceSignalErrorFull() instead")
    void getInvocationStatsByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvocationStatsByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestAggregatedInvocationsStatsSignalErrorFull() instead")
    void getLatestAggregatedInvocationsStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestAggregatedInvocationsStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestTestResultsSignalErrorFull() instead")
    void getLatestTestResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestTestResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceTestConformanceMetricSignalErrorFull() instead")
    void getServiceTestConformanceMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceTestConformanceMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopIvnocationsStatsByDaySignalErrorFull() instead")
    void getTopIvnocationsStatsByDaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTopIvnocationsStatsByDaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
