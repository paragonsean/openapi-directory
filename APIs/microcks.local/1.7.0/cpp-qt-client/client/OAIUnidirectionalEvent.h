/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUnidirectionalEvent.h
 *
 * Representation of an unidirectional exchange as an event message
 */

#ifndef OAIUnidirectionalEvent_H
#define OAIUnidirectionalEvent_H

#include <QJsonObject>

#include "OAIEventMessage.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEventMessage;

class OAIUnidirectionalEvent : public OAIObject {
public:
    OAIUnidirectionalEvent();
    OAIUnidirectionalEvent(QString json);
    ~OAIUnidirectionalEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIEventMessage getEventMessage() const;
    void setEventMessage(const OAIEventMessage &event_message);
    bool is_event_message_Set() const;
    bool is_event_message_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIEventMessage m_event_message;
    bool m_event_message_isSet;
    bool m_event_message_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUnidirectionalEvent)

#endif // OAIUnidirectionalEvent_H
