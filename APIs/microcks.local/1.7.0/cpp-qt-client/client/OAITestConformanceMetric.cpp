/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestConformanceMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestConformanceMetric::OAITestConformanceMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestConformanceMetric::OAITestConformanceMetric() {
    this->initializeModel();
}

OAITestConformanceMetric::~OAITestConformanceMetric() {}

void OAITestConformanceMetric::initializeModel() {

    m_aggregation_label_value_isSet = false;
    m_aggregation_label_value_isValid = false;

    m_current_score_isSet = false;
    m_current_score_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_update_day_isSet = false;
    m_last_update_day_isValid = false;

    m_latest_scores_isSet = false;
    m_latest_scores_isValid = false;

    m_latest_trend_isSet = false;
    m_latest_trend_isValid = false;

    m_max_possible_score_isSet = false;
    m_max_possible_score_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;
}

void OAITestConformanceMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestConformanceMetric::fromJsonObject(QJsonObject json) {

    m_aggregation_label_value_isValid = ::OpenAPI::fromJsonValue(m_aggregation_label_value, json[QString("aggregationLabelValue")]);
    m_aggregation_label_value_isSet = !json[QString("aggregationLabelValue")].isNull() && m_aggregation_label_value_isValid;

    m_current_score_isValid = ::OpenAPI::fromJsonValue(m_current_score, json[QString("currentScore")]);
    m_current_score_isSet = !json[QString("currentScore")].isNull() && m_current_score_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_update_day_isValid = ::OpenAPI::fromJsonValue(m_last_update_day, json[QString("lastUpdateDay")]);
    m_last_update_day_isSet = !json[QString("lastUpdateDay")].isNull() && m_last_update_day_isValid;

    m_latest_scores_isValid = ::OpenAPI::fromJsonValue(m_latest_scores, json[QString("latestScores")]);
    m_latest_scores_isSet = !json[QString("latestScores")].isNull() && m_latest_scores_isValid;

    m_latest_trend_isValid = ::OpenAPI::fromJsonValue(m_latest_trend, json[QString("latestTrend")]);
    m_latest_trend_isSet = !json[QString("latestTrend")].isNull() && m_latest_trend_isValid;

    m_max_possible_score_isValid = ::OpenAPI::fromJsonValue(m_max_possible_score, json[QString("maxPossibleScore")]);
    m_max_possible_score_isSet = !json[QString("maxPossibleScore")].isNull() && m_max_possible_score_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;
}

QString OAITestConformanceMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestConformanceMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_label_value_isSet) {
        obj.insert(QString("aggregationLabelValue"), ::OpenAPI::toJsonValue(m_aggregation_label_value));
    }
    if (m_current_score_isSet) {
        obj.insert(QString("currentScore"), ::OpenAPI::toJsonValue(m_current_score));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_update_day_isSet) {
        obj.insert(QString("lastUpdateDay"), ::OpenAPI::toJsonValue(m_last_update_day));
    }
    if (m_latest_scores.size() > 0) {
        obj.insert(QString("latestScores"), ::OpenAPI::toJsonValue(m_latest_scores));
    }
    if (m_latest_trend.isSet()) {
        obj.insert(QString("latestTrend"), ::OpenAPI::toJsonValue(m_latest_trend));
    }
    if (m_max_possible_score_isSet) {
        obj.insert(QString("maxPossibleScore"), ::OpenAPI::toJsonValue(m_max_possible_score));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    return obj;
}

QString OAITestConformanceMetric::getAggregationLabelValue() const {
    return m_aggregation_label_value;
}
void OAITestConformanceMetric::setAggregationLabelValue(const QString &aggregation_label_value) {
    m_aggregation_label_value = aggregation_label_value;
    m_aggregation_label_value_isSet = true;
}

bool OAITestConformanceMetric::is_aggregation_label_value_Set() const{
    return m_aggregation_label_value_isSet;
}

bool OAITestConformanceMetric::is_aggregation_label_value_Valid() const{
    return m_aggregation_label_value_isValid;
}

double OAITestConformanceMetric::getCurrentScore() const {
    return m_current_score;
}
void OAITestConformanceMetric::setCurrentScore(const double &current_score) {
    m_current_score = current_score;
    m_current_score_isSet = true;
}

bool OAITestConformanceMetric::is_current_score_Set() const{
    return m_current_score_isSet;
}

bool OAITestConformanceMetric::is_current_score_Valid() const{
    return m_current_score_isValid;
}

QString OAITestConformanceMetric::getId() const {
    return m_id;
}
void OAITestConformanceMetric::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITestConformanceMetric::is_id_Set() const{
    return m_id_isSet;
}

bool OAITestConformanceMetric::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITestConformanceMetric::getLastUpdateDay() const {
    return m_last_update_day;
}
void OAITestConformanceMetric::setLastUpdateDay(const QString &last_update_day) {
    m_last_update_day = last_update_day;
    m_last_update_day_isSet = true;
}

bool OAITestConformanceMetric::is_last_update_day_Set() const{
    return m_last_update_day_isSet;
}

bool OAITestConformanceMetric::is_last_update_day_Valid() const{
    return m_last_update_day_isValid;
}

QMap<QString, double> OAITestConformanceMetric::getLatestScores() const {
    return m_latest_scores;
}
void OAITestConformanceMetric::setLatestScores(const QMap<QString, double> &latest_scores) {
    m_latest_scores = latest_scores;
    m_latest_scores_isSet = true;
}

bool OAITestConformanceMetric::is_latest_scores_Set() const{
    return m_latest_scores_isSet;
}

bool OAITestConformanceMetric::is_latest_scores_Valid() const{
    return m_latest_scores_isValid;
}

OAITrend OAITestConformanceMetric::getLatestTrend() const {
    return m_latest_trend;
}
void OAITestConformanceMetric::setLatestTrend(const OAITrend &latest_trend) {
    m_latest_trend = latest_trend;
    m_latest_trend_isSet = true;
}

bool OAITestConformanceMetric::is_latest_trend_Set() const{
    return m_latest_trend_isSet;
}

bool OAITestConformanceMetric::is_latest_trend_Valid() const{
    return m_latest_trend_isValid;
}

double OAITestConformanceMetric::getMaxPossibleScore() const {
    return m_max_possible_score;
}
void OAITestConformanceMetric::setMaxPossibleScore(const double &max_possible_score) {
    m_max_possible_score = max_possible_score;
    m_max_possible_score_isSet = true;
}

bool OAITestConformanceMetric::is_max_possible_score_Set() const{
    return m_max_possible_score_isSet;
}

bool OAITestConformanceMetric::is_max_possible_score_Valid() const{
    return m_max_possible_score_isValid;
}

QString OAITestConformanceMetric::getServiceId() const {
    return m_service_id;
}
void OAITestConformanceMetric::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAITestConformanceMetric::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAITestConformanceMetric::is_service_id_Valid() const{
    return m_service_id_isValid;
}

bool OAITestConformanceMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_label_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_trend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_possible_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestConformanceMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_score_isValid && m_id_isValid && m_max_possible_score_isValid && m_service_id_isValid && true;
}

} // namespace OpenAPI
