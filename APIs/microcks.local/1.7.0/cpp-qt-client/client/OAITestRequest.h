/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITestRequest.h
 *
 * Test request is a minimalist wrapper for requesting the launch of a new test
 */

#ifndef OAITestRequest_H
#define OAITestRequest_H

#include <QJsonObject>

#include "OAIHeaderDTO.h"
#include "OAITestRunnerType.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHeaderDTO;

class OAITestRequest : public OAIObject {
public:
    OAITestRequest();
    OAITestRequest(QString json);
    ~OAITestRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getFilteredOperations() const;
    void setFilteredOperations(const QList<QString> &filtered_operations);
    bool is_filtered_operations_Set() const;
    bool is_filtered_operations_Valid() const;

    QMap<QString, QList<OAIHeaderDTO>> getOperationHeaders() const;
    void setOperationHeaders(const QMap<QString, QList<OAIHeaderDTO>> &operation_headers);
    bool is_operation_headers_Set() const;
    bool is_operation_headers_Valid() const;

    OAITestRunnerType getRunnerType() const;
    void setRunnerType(const OAITestRunnerType &runner_type);
    bool is_runner_type_Set() const;
    bool is_runner_type_Valid() const;

    QString getSecretName() const;
    void setSecretName(const QString &secret_name);
    bool is_secret_name_Set() const;
    bool is_secret_name_Valid() const;

    QString getServiceId() const;
    void setServiceId(const QString &service_id);
    bool is_service_id_Set() const;
    bool is_service_id_Valid() const;

    QString getTestEndpoint() const;
    void setTestEndpoint(const QString &test_endpoint);
    bool is_test_endpoint_Set() const;
    bool is_test_endpoint_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_filtered_operations;
    bool m_filtered_operations_isSet;
    bool m_filtered_operations_isValid;

    QMap<QString, QList<OAIHeaderDTO>> m_operation_headers;
    bool m_operation_headers_isSet;
    bool m_operation_headers_isValid;

    OAITestRunnerType m_runner_type;
    bool m_runner_type_isSet;
    bool m_runner_type_isValid;

    QString m_secret_name;
    bool m_secret_name_isSet;
    bool m_secret_name_isValid;

    QString m_service_id;
    bool m_service_id_isSet;
    bool m_service_id_isValid;

    QString m_test_endpoint;
    bool m_test_endpoint_isSet;
    bool m_test_endpoint_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITestRequest)

#endif // OAITestRequest_H
