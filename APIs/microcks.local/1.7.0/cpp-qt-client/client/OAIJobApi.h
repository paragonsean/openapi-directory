/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobApi_H
#define OAI_OAIJobApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICounter.h"
#include "OAIHttpFileElement.h"
#include "OAIImportJob.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobApi : public QObject {
    Q_OBJECT

public:
    OAIJobApi(const int timeOut = 0);
    ~OAIJobApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void activateImportJob(const QString &id);

    /**
    * @param[in]  oai_import_job OAIImportJob [required]
    */
    virtual void createImportJob(const OAIImportJob &oai_import_job);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteImportJob(const QString &id);


    virtual void getImportJobCounter();

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    * @param[in]  name QString [optional]
    */
    virtual void getImportJobs(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void jobsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_import_job OAIImportJob [required]
    */
    virtual void jobsIdPost(const QString &id, const OAIImportJob &oai_import_job);

    /**
    * @param[in]  id QString [required]
    */
    virtual void startImportJob(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void stopImportJob(const QString &id);

    /**
    * @param[in]  main_artifact bool [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void uploadArtifact(const bool &main_artifact, const OAIHttpFileElement &file);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateImportJobCallback(OAIHttpRequestWorker *worker);
    void createImportJobCallback(OAIHttpRequestWorker *worker);
    void deleteImportJobCallback(OAIHttpRequestWorker *worker);
    void getImportJobCounterCallback(OAIHttpRequestWorker *worker);
    void getImportJobsCallback(OAIHttpRequestWorker *worker);
    void jobsIdGetCallback(OAIHttpRequestWorker *worker);
    void jobsIdPostCallback(OAIHttpRequestWorker *worker);
    void startImportJobCallback(OAIHttpRequestWorker *worker);
    void stopImportJobCallback(OAIHttpRequestWorker *worker);
    void uploadArtifactCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateImportJobSignal(OAIImportJob summary);
    void createImportJobSignal(OAIImportJob summary);
    void deleteImportJobSignal();
    void getImportJobCounterSignal(OAICounter summary);
    void getImportJobsSignal(QList<OAIImportJob> summary);
    void jobsIdGetSignal(OAIImportJob summary);
    void jobsIdPostSignal(OAIImportJob summary);
    void startImportJobSignal(OAIImportJob summary);
    void stopImportJobSignal(OAIImportJob summary);
    void uploadArtifactSignal(QString summary);


    void activateImportJobSignalFull(OAIHttpRequestWorker *worker, OAIImportJob summary);
    void createImportJobSignalFull(OAIHttpRequestWorker *worker, OAIImportJob summary);
    void deleteImportJobSignalFull(OAIHttpRequestWorker *worker);
    void getImportJobCounterSignalFull(OAIHttpRequestWorker *worker, OAICounter summary);
    void getImportJobsSignalFull(OAIHttpRequestWorker *worker, QList<OAIImportJob> summary);
    void jobsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIImportJob summary);
    void jobsIdPostSignalFull(OAIHttpRequestWorker *worker, OAIImportJob summary);
    void startImportJobSignalFull(OAIHttpRequestWorker *worker, OAIImportJob summary);
    void stopImportJobSignalFull(OAIHttpRequestWorker *worker, OAIImportJob summary);
    void uploadArtifactSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use activateImportJobSignalError() instead")
    void activateImportJobSignalE(OAIImportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activateImportJobSignalError(OAIImportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImportJobSignalError() instead")
    void createImportJobSignalE(OAIImportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImportJobSignalError(OAIImportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImportJobSignalError() instead")
    void deleteImportJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImportJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImportJobCounterSignalError() instead")
    void getImportJobCounterSignalE(OAICounter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImportJobCounterSignalError(OAICounter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImportJobsSignalError() instead")
    void getImportJobsSignalE(QList<OAIImportJob> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImportJobsSignalError(QList<OAIImportJob> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsIdGetSignalError() instead")
    void jobsIdGetSignalE(OAIImportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsIdGetSignalError(OAIImportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsIdPostSignalError() instead")
    void jobsIdPostSignalE(OAIImportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsIdPostSignalError(OAIImportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startImportJobSignalError() instead")
    void startImportJobSignalE(OAIImportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startImportJobSignalError(OAIImportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopImportJobSignalError() instead")
    void stopImportJobSignalE(OAIImportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopImportJobSignalError(OAIImportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadArtifactSignalError() instead")
    void uploadArtifactSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadArtifactSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateImportJobSignalErrorFull() instead")
    void activateImportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateImportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImportJobSignalErrorFull() instead")
    void createImportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImportJobSignalErrorFull() instead")
    void deleteImportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImportJobCounterSignalErrorFull() instead")
    void getImportJobCounterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImportJobCounterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImportJobsSignalErrorFull() instead")
    void getImportJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImportJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsIdGetSignalErrorFull() instead")
    void jobsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsIdPostSignalErrorFull() instead")
    void jobsIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startImportJobSignalErrorFull() instead")
    void startImportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startImportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopImportJobSignalErrorFull() instead")
    void stopImportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopImportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadArtifactSignalErrorFull() instead")
    void uploadArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
