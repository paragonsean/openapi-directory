/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFeaturesConfig.h
 *
 * Representation of optional features configuration used by Microcks server
 */

#ifndef OAIFeaturesConfig_H
#define OAIFeaturesConfig_H

#include <QJsonObject>

#include "OAIFeaturesConfig_async_api.h"
#include "OAIFeaturesConfig_microcks_hub.h"
#include "OAIFeaturesConfig_repository_filter.h"
#include "OAIFeaturesConfig_repository_tenancy.h"
#include <QJsonValue>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFeaturesConfig_async_api;
class OAIFeaturesConfig_microcks_hub;
class OAIFeaturesConfig_repository_filter;
class OAIFeaturesConfig_repository_tenancy;

class OAIFeaturesConfig : public OAIObject {
public:
    OAIFeaturesConfig();
    OAIFeaturesConfig(QString json);
    ~OAIFeaturesConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFeaturesConfig_async_api getAsyncApi() const;
    void setAsyncApi(const OAIFeaturesConfig_async_api &async_api);
    bool is_async_api_Set() const;
    bool is_async_api_Valid() const;

    OAIFeaturesConfig_microcks_hub getMicrocksHub() const;
    void setMicrocksHub(const OAIFeaturesConfig_microcks_hub &microcks_hub);
    bool is_microcks_hub_Set() const;
    bool is_microcks_hub_Valid() const;

    OAIFeaturesConfig_repository_filter getRepositoryFilter() const;
    void setRepositoryFilter(const OAIFeaturesConfig_repository_filter &repository_filter);
    bool is_repository_filter_Set() const;
    bool is_repository_filter_Valid() const;

    OAIFeaturesConfig_repository_tenancy getRepositoryTenancy() const;
    void setRepositoryTenancy(const OAIFeaturesConfig_repository_tenancy &repository_tenancy);
    bool is_repository_tenancy_Set() const;
    bool is_repository_tenancy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFeaturesConfig_async_api m_async_api;
    bool m_async_api_isSet;
    bool m_async_api_isValid;

    OAIFeaturesConfig_microcks_hub m_microcks_hub;
    bool m_microcks_hub_isSet;
    bool m_microcks_hub_isValid;

    OAIFeaturesConfig_repository_filter m_repository_filter;
    bool m_repository_filter_isSet;
    bool m_repository_filter_isValid;

    OAIFeaturesConfig_repository_tenancy m_repository_tenancy;
    bool m_repository_tenancy_isSet;
    bool m_repository_tenancy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFeaturesConfig)

#endif // OAIFeaturesConfig_H
