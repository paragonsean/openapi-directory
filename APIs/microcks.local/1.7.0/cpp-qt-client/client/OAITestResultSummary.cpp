/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestResultSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestResultSummary::OAITestResultSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestResultSummary::OAITestResultSummary() {
    this->initializeModel();
}

OAITestResultSummary::~OAITestResultSummary() {}

void OAITestResultSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_test_date_isSet = false;
    m_test_date_isValid = false;
}

void OAITestResultSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestResultSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_test_date_isValid = ::OpenAPI::fromJsonValue(m_test_date, json[QString("testDate")]);
    m_test_date_isSet = !json[QString("testDate")].isNull() && m_test_date_isValid;
}

QString OAITestResultSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestResultSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_test_date_isSet) {
        obj.insert(QString("testDate"), ::OpenAPI::toJsonValue(m_test_date));
    }
    return obj;
}

QString OAITestResultSummary::getId() const {
    return m_id;
}
void OAITestResultSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITestResultSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAITestResultSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITestResultSummary::getServiceId() const {
    return m_service_id;
}
void OAITestResultSummary::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAITestResultSummary::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAITestResultSummary::is_service_id_Valid() const{
    return m_service_id_isValid;
}

bool OAITestResultSummary::isSuccess() const {
    return m_success;
}
void OAITestResultSummary::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAITestResultSummary::is_success_Set() const{
    return m_success_isSet;
}

bool OAITestResultSummary::is_success_Valid() const{
    return m_success_isValid;
}

qint64 OAITestResultSummary::getTestDate() const {
    return m_test_date;
}
void OAITestResultSummary::setTestDate(const qint64 &test_date) {
    m_test_date = test_date;
    m_test_date_isSet = true;
}

bool OAITestResultSummary::is_test_date_Set() const{
    return m_test_date_isSet;
}

bool OAITestResultSummary::is_test_date_Valid() const{
    return m_test_date_isValid;
}

bool OAITestResultSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestResultSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_service_id_isValid && m_success_isValid && m_test_date_isValid && true;
}

} // namespace OpenAPI
