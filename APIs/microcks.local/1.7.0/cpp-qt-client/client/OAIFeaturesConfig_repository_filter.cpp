/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeaturesConfig_repository_filter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeaturesConfig_repository_filter::OAIFeaturesConfig_repository_filter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeaturesConfig_repository_filter::OAIFeaturesConfig_repository_filter() {
    this->initializeModel();
}

OAIFeaturesConfig_repository_filter::~OAIFeaturesConfig_repository_filter() {}

void OAIFeaturesConfig_repository_filter::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_label_key_isSet = false;
    m_label_key_isValid = false;

    m_label_label_isSet = false;
    m_label_label_isValid = false;

    m_label_list_isSet = false;
    m_label_list_isValid = false;
}

void OAIFeaturesConfig_repository_filter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeaturesConfig_repository_filter::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_label_key_isValid = ::OpenAPI::fromJsonValue(m_label_key, json[QString("label-key")]);
    m_label_key_isSet = !json[QString("label-key")].isNull() && m_label_key_isValid;

    m_label_label_isValid = ::OpenAPI::fromJsonValue(m_label_label, json[QString("label-label")]);
    m_label_label_isSet = !json[QString("label-label")].isNull() && m_label_label_isValid;

    m_label_list_isValid = ::OpenAPI::fromJsonValue(m_label_list, json[QString("label-list")]);
    m_label_list_isSet = !json[QString("label-list")].isNull() && m_label_list_isValid;
}

QString OAIFeaturesConfig_repository_filter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeaturesConfig_repository_filter::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_label_key_isSet) {
        obj.insert(QString("label-key"), ::OpenAPI::toJsonValue(m_label_key));
    }
    if (m_label_label_isSet) {
        obj.insert(QString("label-label"), ::OpenAPI::toJsonValue(m_label_label));
    }
    if (m_label_list_isSet) {
        obj.insert(QString("label-list"), ::OpenAPI::toJsonValue(m_label_list));
    }
    return obj;
}

QString OAIFeaturesConfig_repository_filter::getEnabled() const {
    return m_enabled;
}
void OAIFeaturesConfig_repository_filter::setEnabled(const QString &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIFeaturesConfig_repository_filter::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIFeaturesConfig_repository_filter::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIFeaturesConfig_repository_filter::getLabelKey() const {
    return m_label_key;
}
void OAIFeaturesConfig_repository_filter::setLabelKey(const QString &label_key) {
    m_label_key = label_key;
    m_label_key_isSet = true;
}

bool OAIFeaturesConfig_repository_filter::is_label_key_Set() const{
    return m_label_key_isSet;
}

bool OAIFeaturesConfig_repository_filter::is_label_key_Valid() const{
    return m_label_key_isValid;
}

QString OAIFeaturesConfig_repository_filter::getLabelLabel() const {
    return m_label_label;
}
void OAIFeaturesConfig_repository_filter::setLabelLabel(const QString &label_label) {
    m_label_label = label_label;
    m_label_label_isSet = true;
}

bool OAIFeaturesConfig_repository_filter::is_label_label_Set() const{
    return m_label_label_isSet;
}

bool OAIFeaturesConfig_repository_filter::is_label_label_Valid() const{
    return m_label_label_isValid;
}

QString OAIFeaturesConfig_repository_filter::getLabelList() const {
    return m_label_list;
}
void OAIFeaturesConfig_repository_filter::setLabelList(const QString &label_list) {
    m_label_list = label_list;
    m_label_list_isSet = true;
}

bool OAIFeaturesConfig_repository_filter::is_label_list_Set() const{
    return m_label_list_isSet;
}

bool OAIFeaturesConfig_repository_filter::is_label_list_Valid() const{
    return m_label_list_isValid;
}

bool OAIFeaturesConfig_repository_filter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_list_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeaturesConfig_repository_filter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
