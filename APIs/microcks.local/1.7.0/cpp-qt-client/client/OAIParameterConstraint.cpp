/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterConstraint::OAIParameterConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterConstraint::OAIParameterConstraint() {
    this->initializeModel();
}

OAIParameterConstraint::~OAIParameterConstraint() {}

void OAIParameterConstraint::initializeModel() {

    m_in_isSet = false;
    m_in_isValid = false;

    m_must_match_regexp_isSet = false;
    m_must_match_regexp_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recopy_isSet = false;
    m_recopy_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;
}

void OAIParameterConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterConstraint::fromJsonObject(QJsonObject json) {

    m_in_isValid = ::OpenAPI::fromJsonValue(m_in, json[QString("in")]);
    m_in_isSet = !json[QString("in")].isNull() && m_in_isValid;

    m_must_match_regexp_isValid = ::OpenAPI::fromJsonValue(m_must_match_regexp, json[QString("mustMatchRegexp")]);
    m_must_match_regexp_isSet = !json[QString("mustMatchRegexp")].isNull() && m_must_match_regexp_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recopy_isValid = ::OpenAPI::fromJsonValue(m_recopy, json[QString("recopy")]);
    m_recopy_isSet = !json[QString("recopy")].isNull() && m_recopy_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;
}

QString OAIParameterConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_in_isSet) {
        obj.insert(QString("in"), ::OpenAPI::toJsonValue(m_in));
    }
    if (m_must_match_regexp_isSet) {
        obj.insert(QString("mustMatchRegexp"), ::OpenAPI::toJsonValue(m_must_match_regexp));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recopy_isSet) {
        obj.insert(QString("recopy"), ::OpenAPI::toJsonValue(m_recopy));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    return obj;
}

QString OAIParameterConstraint::getIn() const {
    return m_in;
}
void OAIParameterConstraint::setIn(const QString &in) {
    m_in = in;
    m_in_isSet = true;
}

bool OAIParameterConstraint::is_in_Set() const{
    return m_in_isSet;
}

bool OAIParameterConstraint::is_in_Valid() const{
    return m_in_isValid;
}

QString OAIParameterConstraint::getMustMatchRegexp() const {
    return m_must_match_regexp;
}
void OAIParameterConstraint::setMustMatchRegexp(const QString &must_match_regexp) {
    m_must_match_regexp = must_match_regexp;
    m_must_match_regexp_isSet = true;
}

bool OAIParameterConstraint::is_must_match_regexp_Set() const{
    return m_must_match_regexp_isSet;
}

bool OAIParameterConstraint::is_must_match_regexp_Valid() const{
    return m_must_match_regexp_isValid;
}

QString OAIParameterConstraint::getName() const {
    return m_name;
}
void OAIParameterConstraint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParameterConstraint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParameterConstraint::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIParameterConstraint::isRecopy() const {
    return m_recopy;
}
void OAIParameterConstraint::setRecopy(const bool &recopy) {
    m_recopy = recopy;
    m_recopy_isSet = true;
}

bool OAIParameterConstraint::is_recopy_Set() const{
    return m_recopy_isSet;
}

bool OAIParameterConstraint::is_recopy_Valid() const{
    return m_recopy_isValid;
}

bool OAIParameterConstraint::isRequired() const {
    return m_required;
}
void OAIParameterConstraint::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIParameterConstraint::is_required_Set() const{
    return m_required_isSet;
}

bool OAIParameterConstraint::is_required_Valid() const{
    return m_required_isValid;
}

bool OAIParameterConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_match_regexp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recopy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
