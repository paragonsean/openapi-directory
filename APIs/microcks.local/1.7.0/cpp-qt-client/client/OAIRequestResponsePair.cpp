/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestResponsePair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestResponsePair::OAIRequestResponsePair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestResponsePair::OAIRequestResponsePair() {
    this->initializeModel();
}

OAIRequestResponsePair::~OAIRequestResponsePair() {}

void OAIRequestResponsePair::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;
}

void OAIRequestResponsePair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestResponsePair::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;
}

QString OAIRequestResponsePair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestResponsePair::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    return obj;
}

QString OAIRequestResponsePair::getType() const {
    return m_type;
}
void OAIRequestResponsePair::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRequestResponsePair::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRequestResponsePair::is_type_Valid() const{
    return m_type_isValid;
}

OAIRequest OAIRequestResponsePair::getRequest() const {
    return m_request;
}
void OAIRequestResponsePair::setRequest(const OAIRequest &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIRequestResponsePair::is_request_Set() const{
    return m_request_isSet;
}

bool OAIRequestResponsePair::is_request_Valid() const{
    return m_request_isValid;
}

OAIResponse OAIRequestResponsePair::getResponse() const {
    return m_response;
}
void OAIRequestResponsePair::setResponse(const OAIResponse &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIRequestResponsePair::is_response_Set() const{
    return m_response_isSet;
}

bool OAIRequestResponsePair::is_response_Valid() const{
    return m_response_isValid;
}

bool OAIRequestResponsePair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestResponsePair::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_request_isValid && m_response_isValid && true;
}

} // namespace OpenAPI
