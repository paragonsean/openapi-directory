/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceView::OAIServiceView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceView::OAIServiceView() {
    this->initializeModel();
}

OAIServiceView::~OAIServiceView() {}

void OAIServiceView::initializeModel() {

    m_messages_map_isSet = false;
    m_messages_map_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIServiceView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceView::fromJsonObject(QJsonObject json) {

    if(json["messagesMap"].isObject()){
        auto varmap = json["messagesMap"].toObject().toVariantMap();
        m_messages_map_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIExchange> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_messages_map_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_messages_map_isSet &= !jval.isNull() && m_messages_map_isValid;
                m_messages_map.insert(m_messages_map.end(), val, item);
            }
        }
    }

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;
}

QString OAIServiceView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceView::asJsonObject() const {
    QJsonObject obj;
    if (m_messages_map.size() > 0) {
        
        obj.insert(QString("messagesMap"), toJsonValue(m_messages_map));
    }
    if (m_service.isSet()) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

QMap<QString, QList> OAIServiceView::getMessagesMap() const {
    return m_messages_map;
}
void OAIServiceView::setMessagesMap(const QMap<QString, QList> &messages_map) {
    m_messages_map = messages_map;
    m_messages_map_isSet = true;
}

bool OAIServiceView::is_messages_map_Set() const{
    return m_messages_map_isSet;
}

bool OAIServiceView::is_messages_map_Valid() const{
    return m_messages_map_isValid;
}

OAIService OAIServiceView::getService() const {
    return m_service;
}
void OAIServiceView::setService(const OAIService &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIServiceView::is_service_Set() const{
    return m_service_isSet;
}

bool OAIServiceView::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIServiceView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceView::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_messages_map_isValid && m_service_isValid && true;
}

} // namespace OpenAPI
