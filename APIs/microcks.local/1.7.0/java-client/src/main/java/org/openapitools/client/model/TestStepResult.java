/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestStepResult is an entity embedded within TestCaseResult. They are created for each request associated with an operation / action of a microservice.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:29.619783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestStepResult {
  public static final String SERIALIZED_NAME_ELAPSED_TIME = "elapsedTime";
  @SerializedName(SERIALIZED_NAME_ELAPSED_TIME)
  private BigDecimal elapsedTime;

  public static final String SERIALIZED_NAME_EVENT_MESSAGE_NAME = "eventMessageName";
  @SerializedName(SERIALIZED_NAME_EVENT_MESSAGE_NAME)
  private String eventMessageName;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_REQUEST_NAME = "requestName";
  @SerializedName(SERIALIZED_NAME_REQUEST_NAME)
  private String requestName;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public TestStepResult() {
  }

  public TestStepResult elapsedTime(BigDecimal elapsedTime) {
    this.elapsedTime = elapsedTime;
    return this;
  }

  /**
   * Elapsed time in milliseconds since the test step beginning
   * @return elapsedTime
   */
  @javax.annotation.Nullable
  public BigDecimal getElapsedTime() {
    return elapsedTime;
  }

  public void setElapsedTime(BigDecimal elapsedTime) {
    this.elapsedTime = elapsedTime;
  }


  public TestStepResult eventMessageName(String eventMessageName) {
    this.eventMessageName = eventMessageName;
    return this;
  }

  /**
   * Name of event this test step is bound to
   * @return eventMessageName
   */
  @javax.annotation.Nullable
  public String getEventMessageName() {
    return eventMessageName;
  }

  public void setEventMessageName(String eventMessageName) {
    this.eventMessageName = eventMessageName;
  }


  public TestStepResult message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Error message that may be associated to this test step
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public TestStepResult requestName(String requestName) {
    this.requestName = requestName;
    return this;
  }

  /**
   * Name of request this test step is bound to
   * @return requestName
   */
  @javax.annotation.Nullable
  public String getRequestName() {
    return requestName;
  }

  public void setRequestName(String requestName) {
    this.requestName = requestName;
  }


  public TestStepResult success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Flag telling if test case is a success
   * @return success
   */
  @javax.annotation.Nonnull
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestStepResult testStepResult = (TestStepResult) o;
    return Objects.equals(this.elapsedTime, testStepResult.elapsedTime) &&
        Objects.equals(this.eventMessageName, testStepResult.eventMessageName) &&
        Objects.equals(this.message, testStepResult.message) &&
        Objects.equals(this.requestName, testStepResult.requestName) &&
        Objects.equals(this.success, testStepResult.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(elapsedTime, eventMessageName, message, requestName, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestStepResult {\n");
    sb.append("    elapsedTime: ").append(toIndentedString(elapsedTime)).append("\n");
    sb.append("    eventMessageName: ").append(toIndentedString(eventMessageName)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    requestName: ").append(toIndentedString(requestName)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("elapsedTime");
    openapiFields.add("eventMessageName");
    openapiFields.add("message");
    openapiFields.add("requestName");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("success");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestStepResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestStepResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestStepResult is not found in the empty JSON string", TestStepResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestStepResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestStepResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestStepResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventMessageName") != null && !jsonObj.get("eventMessageName").isJsonNull()) && !jsonObj.get("eventMessageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventMessageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventMessageName").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("requestName") != null && !jsonObj.get("requestName").isJsonNull()) && !jsonObj.get("requestName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestStepResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestStepResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestStepResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestStepResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TestStepResult>() {
           @Override
           public void write(JsonWriter out, TestStepResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestStepResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestStepResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestStepResult
   * @throws IOException if the JSON string is invalid with respect to TestStepResult
   */
  public static TestStepResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestStepResult.class);
  }

  /**
   * Convert an instance of TestStepResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

