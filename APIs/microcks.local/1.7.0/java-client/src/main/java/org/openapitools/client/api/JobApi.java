/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Counter;
import java.io.File;
import org.openapitools.client.model.ImportJob;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateImportJob
     * @param id Unique identifier of ImportJob to manage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportJob is activated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateImportJobCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{id}/activate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateImportJobValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling activateImportJob(Async)");
        }

        return activateImportJobCall(id, _callback);

    }

    /**
     * Activate an ImportJob
     * Make an ImportJob active, so that it is executed
     * @param id Unique identifier of ImportJob to manage (required)
     * @return ImportJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportJob is activated </td><td>  -  </td></tr>
     </table>
     */
    public ImportJob activateImportJob(String id) throws ApiException {
        ApiResponse<ImportJob> localVarResp = activateImportJobWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Activate an ImportJob
     * Make an ImportJob active, so that it is executed
     * @param id Unique identifier of ImportJob to manage (required)
     * @return ApiResponse&lt;ImportJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportJob is activated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportJob> activateImportJobWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = activateImportJobValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate an ImportJob (asynchronously)
     * Make an ImportJob active, so that it is executed
     * @param id Unique identifier of ImportJob to manage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportJob is activated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateImportJobAsync(String id, final ApiCallback<ImportJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateImportJobValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createImportJob
     * @param importJob  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImportJobCall(ImportJob importJob, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importJob;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImportJobValidateBeforeCall(ImportJob importJob, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importJob' is set
        if (importJob == null) {
            throw new ApiException("Missing the required parameter 'importJob' when calling createImportJob(Async)");
        }

        return createImportJobCall(importJob, _callback);

    }

    /**
     * Create ImportJob
     * Create a new ImportJob
     * @param importJob  (required)
     * @return ImportJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public ImportJob createImportJob(ImportJob importJob) throws ApiException {
        ApiResponse<ImportJob> localVarResp = createImportJobWithHttpInfo(importJob);
        return localVarResp.getData();
    }

    /**
     * Create ImportJob
     * Create a new ImportJob
     * @param importJob  (required)
     * @return ApiResponse&lt;ImportJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportJob> createImportJobWithHttpInfo(ImportJob importJob) throws ApiException {
        okhttp3.Call localVarCall = createImportJobValidateBeforeCall(importJob, null);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create ImportJob (asynchronously)
     * Create a new ImportJob
     * @param importJob  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImportJobAsync(ImportJob importJob, final ApiCallback<ImportJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImportJobValidateBeforeCall(importJob, _callback);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImportJob
     * @param id Unique identifier of ImportJob to manage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportJob deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImportJobCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImportJobValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteImportJob(Async)");
        }

        return deleteImportJobCall(id, _callback);

    }

    /**
     * Delete ImportJob
     * Delete an ImportJob
     * @param id Unique identifier of ImportJob to manage (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportJob deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteImportJob(String id) throws ApiException {
        deleteImportJobWithHttpInfo(id);
    }

    /**
     * Delete ImportJob
     * Delete an ImportJob
     * @param id Unique identifier of ImportJob to manage (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportJob deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteImportJobWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteImportJobValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete ImportJob (asynchronously)
     * Delete an ImportJob
     * @param id Unique identifier of ImportJob to manage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportJob deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImportJobAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImportJobValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportJobCounter
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of ImportJobs in datastore </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportJobCounterCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportJobCounterValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getImportJobCounterCall(_callback);

    }

    /**
     * Get the ImportJobs counter
     * 
     * @return Counter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of ImportJobs in datastore </td><td>  -  </td></tr>
     </table>
     */
    public Counter getImportJobCounter() throws ApiException {
        ApiResponse<Counter> localVarResp = getImportJobCounterWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the ImportJobs counter
     * 
     * @return ApiResponse&lt;Counter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of ImportJobs in datastore </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Counter> getImportJobCounterWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getImportJobCounterValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the ImportJobs counter (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of ImportJobs in datastore </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportJobCounterAsync(final ApiCallback<Counter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportJobCounterValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportJobs
     * @param page Page of ImportJobs to retrieve (starts at and defaults to 0) (optional)
     * @param size Size of a page. Maximum number of ImportJobs to include in a response (defaults to 20) (optional)
     * @param name Name like criterion for query (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found ImportJobs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportJobsCall(Integer page, Integer size, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportJobsValidateBeforeCall(Integer page, Integer size, String name, final ApiCallback _callback) throws ApiException {
        return getImportJobsCall(page, size, name, _callback);

    }

    /**
     * Get ImportJobs
     * Retrieve a list of ImportJobs
     * @param page Page of ImportJobs to retrieve (starts at and defaults to 0) (optional)
     * @param size Size of a page. Maximum number of ImportJobs to include in a response (defaults to 20) (optional)
     * @param name Name like criterion for query (optional)
     * @return List&lt;ImportJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found ImportJobs </td><td>  -  </td></tr>
     </table>
     */
    public List<ImportJob> getImportJobs(Integer page, Integer size, String name) throws ApiException {
        ApiResponse<List<ImportJob>> localVarResp = getImportJobsWithHttpInfo(page, size, name);
        return localVarResp.getData();
    }

    /**
     * Get ImportJobs
     * Retrieve a list of ImportJobs
     * @param page Page of ImportJobs to retrieve (starts at and defaults to 0) (optional)
     * @param size Size of a page. Maximum number of ImportJobs to include in a response (defaults to 20) (optional)
     * @param name Name like criterion for query (optional)
     * @return ApiResponse&lt;List&lt;ImportJob&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found ImportJobs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ImportJob>> getImportJobsWithHttpInfo(Integer page, Integer size, String name) throws ApiException {
        okhttp3.Call localVarCall = getImportJobsValidateBeforeCall(page, size, name, null);
        Type localVarReturnType = new TypeToken<List<ImportJob>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ImportJobs (asynchronously)
     * Retrieve a list of ImportJobs
     * @param page Page of ImportJobs to retrieve (starts at and defaults to 0) (optional)
     * @param size Size of a page. Maximum number of ImportJobs to include in a response (defaults to 20) (optional)
     * @param name Name like criterion for query (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found ImportJobs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportJobsAsync(Integer page, Integer size, String name, final ApiCallback<List<ImportJob>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportJobsValidateBeforeCall(page, size, name, _callback);
        Type localVarReturnType = new TypeToken<List<ImportJob>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsIdGet
     * @param id Unique identifier of ImportJob to manage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling jobsIdGet(Async)");
        }

        return jobsIdGetCall(id, _callback);

    }

    /**
     * Get ImportJob
     * Retrieve an ImportJob using its identifier
     * @param id Unique identifier of ImportJob to manage (required)
     * @return ImportJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public ImportJob jobsIdGet(String id) throws ApiException {
        ApiResponse<ImportJob> localVarResp = jobsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get ImportJob
     * Retrieve an ImportJob using its identifier
     * @param id Unique identifier of ImportJob to manage (required)
     * @return ApiResponse&lt;ImportJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportJob> jobsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = jobsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ImportJob (asynchronously)
     * Retrieve an ImportJob using its identifier
     * @param id Unique identifier of ImportJob to manage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsIdGetAsync(String id, final ApiCallback<ImportJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsIdPost
     * @param id Unique identifier of ImportJob to manage (required)
     * @param importJob  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsIdPostCall(String id, ImportJob importJob, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importJob;

        // create path and map variables
        String localVarPath = "/jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsIdPostValidateBeforeCall(String id, ImportJob importJob, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling jobsIdPost(Async)");
        }

        // verify the required parameter 'importJob' is set
        if (importJob == null) {
            throw new ApiException("Missing the required parameter 'importJob' when calling jobsIdPost(Async)");
        }

        return jobsIdPostCall(id, importJob, _callback);

    }

    /**
     * Update ImportJob
     * Update an ImportJob
     * @param id Unique identifier of ImportJob to manage (required)
     * @param importJob  (required)
     * @return ImportJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public ImportJob jobsIdPost(String id, ImportJob importJob) throws ApiException {
        ApiResponse<ImportJob> localVarResp = jobsIdPostWithHttpInfo(id, importJob);
        return localVarResp.getData();
    }

    /**
     * Update ImportJob
     * Update an ImportJob
     * @param id Unique identifier of ImportJob to manage (required)
     * @param importJob  (required)
     * @return ApiResponse&lt;ImportJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportJob> jobsIdPostWithHttpInfo(String id, ImportJob importJob) throws ApiException {
        okhttp3.Call localVarCall = jobsIdPostValidateBeforeCall(id, importJob, null);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update ImportJob (asynchronously)
     * Update an ImportJob
     * @param id Unique identifier of ImportJob to manage (required)
     * @param importJob  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsIdPostAsync(String id, ImportJob importJob, final ApiCallback<ImportJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsIdPostValidateBeforeCall(id, importJob, _callback);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startImportJob
     * @param id Unique identifier of ImportJob to manage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Started ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startImportJobCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{id}/start"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startImportJobValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling startImportJob(Async)");
        }

        return startImportJobCall(id, _callback);

    }

    /**
     * Start an ImportJob
     * Starting an ImportJob forces it to immediatly import mock definitions
     * @param id Unique identifier of ImportJob to manage (required)
     * @return ImportJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Started ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public ImportJob startImportJob(String id) throws ApiException {
        ApiResponse<ImportJob> localVarResp = startImportJobWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Start an ImportJob
     * Starting an ImportJob forces it to immediatly import mock definitions
     * @param id Unique identifier of ImportJob to manage (required)
     * @return ApiResponse&lt;ImportJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Started ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportJob> startImportJobWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = startImportJobValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start an ImportJob (asynchronously)
     * Starting an ImportJob forces it to immediatly import mock definitions
     * @param id Unique identifier of ImportJob to manage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Started ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startImportJobAsync(String id, final ApiCallback<ImportJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = startImportJobValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopImportJob
     * @param id Unique identifier of ImportJob to manage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopImportJobCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{id}/stop"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopImportJobValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopImportJob(Async)");
        }

        return stopImportJobCall(id, _callback);

    }

    /**
     * Stop an ImportJob
     * Stopping an ImportJob desactivate it, so that it won&#39;t execute at next schedule
     * @param id Unique identifier of ImportJob to manage (required)
     * @return ImportJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public ImportJob stopImportJob(String id) throws ApiException {
        ApiResponse<ImportJob> localVarResp = stopImportJobWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Stop an ImportJob
     * Stopping an ImportJob desactivate it, so that it won&#39;t execute at next schedule
     * @param id Unique identifier of ImportJob to manage (required)
     * @return ApiResponse&lt;ImportJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportJob> stopImportJobWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = stopImportJobValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop an ImportJob (asynchronously)
     * Stopping an ImportJob desactivate it, so that it won&#39;t execute at next schedule
     * @param id Unique identifier of ImportJob to manage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped ImportJob </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopImportJobAsync(String id, final ApiCallback<ImportJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopImportJobValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImportJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadArtifact
     * @param mainArtifact Flag telling if this should be considered as primary or secondary artifact. Default to &#39;true&#39; (required)
     * @param _file The artifact to upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Artifact was imported and Service found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No file attribute found in uploaded data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Artifact content is invalid and not understood </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadArtifactCall(Boolean mainArtifact, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (mainArtifact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mainArtifact", mainArtifact));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadArtifactValidateBeforeCall(Boolean mainArtifact, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mainArtifact' is set
        if (mainArtifact == null) {
            throw new ApiException("Missing the required parameter 'mainArtifact' when calling uploadArtifact(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadArtifact(Async)");
        }

        return uploadArtifactCall(mainArtifact, _file, _callback);

    }

    /**
     * Upload an artifact
     * Uploads an artifact to be imported by Microcks.
     * @param mainArtifact Flag telling if this should be considered as primary or secondary artifact. Default to &#39;true&#39; (required)
     * @param _file The artifact to upload (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Artifact was imported and Service found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No file attribute found in uploaded data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Artifact content is invalid and not understood </td><td>  -  </td></tr>
     </table>
     */
    public String uploadArtifact(Boolean mainArtifact, File _file) throws ApiException {
        ApiResponse<String> localVarResp = uploadArtifactWithHttpInfo(mainArtifact, _file);
        return localVarResp.getData();
    }

    /**
     * Upload an artifact
     * Uploads an artifact to be imported by Microcks.
     * @param mainArtifact Flag telling if this should be considered as primary or secondary artifact. Default to &#39;true&#39; (required)
     * @param _file The artifact to upload (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Artifact was imported and Service found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No file attribute found in uploaded data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Artifact content is invalid and not understood </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> uploadArtifactWithHttpInfo(Boolean mainArtifact, File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadArtifactValidateBeforeCall(mainArtifact, _file, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload an artifact (asynchronously)
     * Uploads an artifact to be imported by Microcks.
     * @param mainArtifact Flag telling if this should be considered as primary or secondary artifact. Default to &#39;true&#39; (required)
     * @param _file The artifact to upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Artifact was imported and Service found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No file attribute found in uploaded data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Artifact content is invalid and not understood </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadArtifactAsync(Boolean mainArtifact, File _file, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadArtifactValidateBeforeCall(mainArtifact, _file, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
