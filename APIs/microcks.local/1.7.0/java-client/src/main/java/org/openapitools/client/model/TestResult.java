/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.HeaderDTO;
import org.openapitools.client.model.SecretRef;
import org.openapitools.client.model.TestCaseResult;
import org.openapitools.client.model.TestRunnerType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the result of a Service or API test run by Microcks. Tests are related to a service and made of multiple test cases corresponding to each operations / actions composing service. Tests are run against a specific endpoint named testedEndpoint. It holds global markers telling if test still ran, is a success, how many times is has taken and so on ...
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:29.619783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestResult {
  public static final String SERIALIZED_NAME_ELAPSED_TIME = "elapsedTime";
  @SerializedName(SERIALIZED_NAME_ELAPSED_TIME)
  private BigDecimal elapsedTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IN_PROGRESS = "inProgress";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS)
  private Boolean inProgress;

  public static final String SERIALIZED_NAME_OPERATION_HEADERS = "operationHeaders";
  @SerializedName(SERIALIZED_NAME_OPERATION_HEADERS)
  private Map<String, List<HeaderDTO>> operationHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_RUNNER_TYPE = "runnerType";
  @SerializedName(SERIALIZED_NAME_RUNNER_TYPE)
  private TestRunnerType runnerType;

  public static final String SERIALIZED_NAME_SECRET_REF = "secretRef";
  @SerializedName(SERIALIZED_NAME_SECRET_REF)
  private SecretRef secretRef;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_TEST_CASE_RESULTS = "testCaseResults";
  @SerializedName(SERIALIZED_NAME_TEST_CASE_RESULTS)
  private List<TestCaseResult> testCaseResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_DATE = "testDate";
  @SerializedName(SERIALIZED_NAME_TEST_DATE)
  private Long testDate;

  public static final String SERIALIZED_NAME_TEST_NUMBER = "testNumber";
  @SerializedName(SERIALIZED_NAME_TEST_NUMBER)
  private BigDecimal testNumber;

  public static final String SERIALIZED_NAME_TESTED_ENDPOINT = "testedEndpoint";
  @SerializedName(SERIALIZED_NAME_TESTED_ENDPOINT)
  private String testedEndpoint;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private BigDecimal version;

  public TestResult() {
  }

  public TestResult elapsedTime(BigDecimal elapsedTime) {
    this.elapsedTime = elapsedTime;
    return this;
  }

  /**
   * Elapsed time in milliseconds since test beginning
   * @return elapsedTime
   */
  @javax.annotation.Nullable
  public BigDecimal getElapsedTime() {
    return elapsedTime;
  }

  public void setElapsedTime(BigDecimal elapsedTime) {
    this.elapsedTime = elapsedTime;
  }


  public TestResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of TestResult
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TestResult inProgress(Boolean inProgress) {
    this.inProgress = inProgress;
    return this;
  }

  /**
   * Flag telling is test is still in progress
   * @return inProgress
   */
  @javax.annotation.Nonnull
  public Boolean getInProgress() {
    return inProgress;
  }

  public void setInProgress(Boolean inProgress) {
    this.inProgress = inProgress;
  }


  public TestResult operationHeaders(Map<String, List<HeaderDTO>> operationHeaders) {
    this.operationHeaders = operationHeaders;
    return this;
  }

  public TestResult putOperationHeadersItem(String key, List<HeaderDTO> operationHeadersItem) {
    if (this.operationHeaders == null) {
      this.operationHeaders = new HashMap<>();
    }
    this.operationHeaders.put(key, operationHeadersItem);
    return this;
  }

  /**
   * Specification of additional headers for a Service/API operations. Keys are operation name or \&quot;globals\&quot; (if header applies to all), values are Header objects DTO.
   * @return operationHeaders
   */
  @javax.annotation.Nullable
  public Map<String, List<HeaderDTO>> getOperationHeaders() {
    return operationHeaders;
  }

  public void setOperationHeaders(Map<String, List<HeaderDTO>> operationHeaders) {
    this.operationHeaders = operationHeaders;
  }


  public TestResult runnerType(TestRunnerType runnerType) {
    this.runnerType = runnerType;
    return this;
  }

  /**
   * Get runnerType
   * @return runnerType
   */
  @javax.annotation.Nonnull
  public TestRunnerType getRunnerType() {
    return runnerType;
  }

  public void setRunnerType(TestRunnerType runnerType) {
    this.runnerType = runnerType;
  }


  public TestResult secretRef(SecretRef secretRef) {
    this.secretRef = secretRef;
    return this;
  }

  /**
   * Get secretRef
   * @return secretRef
   */
  @javax.annotation.Nullable
  public SecretRef getSecretRef() {
    return secretRef;
  }

  public void setSecretRef(SecretRef secretRef) {
    this.secretRef = secretRef;
  }


  public TestResult serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Unique identifier of service tested
   * @return serviceId
   */
  @javax.annotation.Nonnull
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public TestResult success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Flag telling if test is a success
   * @return success
   */
  @javax.annotation.Nonnull
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public TestResult testCaseResults(List<TestCaseResult> testCaseResults) {
    this.testCaseResults = testCaseResults;
    return this;
  }

  public TestResult addTestCaseResultsItem(TestCaseResult testCaseResultsItem) {
    if (this.testCaseResults == null) {
      this.testCaseResults = new ArrayList<>();
    }
    this.testCaseResults.add(testCaseResultsItem);
    return this;
  }

  /**
   * TestCase results associated to this test
   * @return testCaseResults
   */
  @javax.annotation.Nullable
  public List<TestCaseResult> getTestCaseResults() {
    return testCaseResults;
  }

  public void setTestCaseResults(List<TestCaseResult> testCaseResults) {
    this.testCaseResults = testCaseResults;
  }


  public TestResult testDate(Long testDate) {
    this.testDate = testDate;
    return this;
  }

  /**
   * Timestamp of creation date of this service
   * @return testDate
   */
  @javax.annotation.Nonnull
  public Long getTestDate() {
    return testDate;
  }

  public void setTestDate(Long testDate) {
    this.testDate = testDate;
  }


  public TestResult testNumber(BigDecimal testNumber) {
    this.testNumber = testNumber;
    return this;
  }

  /**
   * Incremental number for tracking number of tests of a service
   * @return testNumber
   */
  @javax.annotation.Nonnull
  public BigDecimal getTestNumber() {
    return testNumber;
  }

  public void setTestNumber(BigDecimal testNumber) {
    this.testNumber = testNumber;
  }


  public TestResult testedEndpoint(String testedEndpoint) {
    this.testedEndpoint = testedEndpoint;
    return this;
  }

  /**
   * Endpoint used during test
   * @return testedEndpoint
   */
  @javax.annotation.Nonnull
  public String getTestedEndpoint() {
    return testedEndpoint;
  }

  public void setTestedEndpoint(String testedEndpoint) {
    this.testedEndpoint = testedEndpoint;
  }


  public TestResult timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * The maximum time (in milliseconds) to wait for this test ends
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public TestResult version(BigDecimal version) {
    this.version = version;
    return this;
  }

  /**
   * Revision number of this test
   * @return version
   */
  @javax.annotation.Nonnull
  public BigDecimal getVersion() {
    return version;
  }

  public void setVersion(BigDecimal version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResult testResult = (TestResult) o;
    return Objects.equals(this.elapsedTime, testResult.elapsedTime) &&
        Objects.equals(this.id, testResult.id) &&
        Objects.equals(this.inProgress, testResult.inProgress) &&
        Objects.equals(this.operationHeaders, testResult.operationHeaders) &&
        Objects.equals(this.runnerType, testResult.runnerType) &&
        Objects.equals(this.secretRef, testResult.secretRef) &&
        Objects.equals(this.serviceId, testResult.serviceId) &&
        Objects.equals(this.success, testResult.success) &&
        Objects.equals(this.testCaseResults, testResult.testCaseResults) &&
        Objects.equals(this.testDate, testResult.testDate) &&
        Objects.equals(this.testNumber, testResult.testNumber) &&
        Objects.equals(this.testedEndpoint, testResult.testedEndpoint) &&
        Objects.equals(this.timeout, testResult.timeout) &&
        Objects.equals(this.version, testResult.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(elapsedTime, id, inProgress, operationHeaders, runnerType, secretRef, serviceId, success, testCaseResults, testDate, testNumber, testedEndpoint, timeout, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResult {\n");
    sb.append("    elapsedTime: ").append(toIndentedString(elapsedTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    operationHeaders: ").append(toIndentedString(operationHeaders)).append("\n");
    sb.append("    runnerType: ").append(toIndentedString(runnerType)).append("\n");
    sb.append("    secretRef: ").append(toIndentedString(secretRef)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    testCaseResults: ").append(toIndentedString(testCaseResults)).append("\n");
    sb.append("    testDate: ").append(toIndentedString(testDate)).append("\n");
    sb.append("    testNumber: ").append(toIndentedString(testNumber)).append("\n");
    sb.append("    testedEndpoint: ").append(toIndentedString(testedEndpoint)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("elapsedTime");
    openapiFields.add("id");
    openapiFields.add("inProgress");
    openapiFields.add("operationHeaders");
    openapiFields.add("runnerType");
    openapiFields.add("secretRef");
    openapiFields.add("serviceId");
    openapiFields.add("success");
    openapiFields.add("testCaseResults");
    openapiFields.add("testDate");
    openapiFields.add("testNumber");
    openapiFields.add("testedEndpoint");
    openapiFields.add("timeout");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("inProgress");
    openapiRequiredFields.add("runnerType");
    openapiRequiredFields.add("serviceId");
    openapiRequiredFields.add("success");
    openapiRequiredFields.add("testDate");
    openapiRequiredFields.add("testNumber");
    openapiRequiredFields.add("testedEndpoint");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestResult is not found in the empty JSON string", TestResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `runnerType`
      TestRunnerType.validateJsonElement(jsonObj.get("runnerType"));
      // validate the optional field `secretRef`
      if (jsonObj.get("secretRef") != null && !jsonObj.get("secretRef").isJsonNull()) {
        SecretRef.validateJsonElement(jsonObj.get("secretRef"));
      }
      if (!jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if (jsonObj.get("testCaseResults") != null && !jsonObj.get("testCaseResults").isJsonNull()) {
        JsonArray jsonArraytestCaseResults = jsonObj.getAsJsonArray("testCaseResults");
        if (jsonArraytestCaseResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testCaseResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testCaseResults` to be an array in the JSON string but got `%s`", jsonObj.get("testCaseResults").toString()));
          }

          // validate the optional field `testCaseResults` (array)
          for (int i = 0; i < jsonArraytestCaseResults.size(); i++) {
            TestCaseResult.validateJsonElement(jsonArraytestCaseResults.get(i));
          };
        }
      }
      if (!jsonObj.get("testedEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testedEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testedEndpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TestResult>() {
           @Override
           public void write(JsonWriter out, TestResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestResult
   * @throws IOException if the JSON string is invalid with respect to TestResult
   */
  public static TestResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestResult.class);
  }

  /**
   * Convert an instance of TestResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

