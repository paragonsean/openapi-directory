/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Counter;
import org.openapitools.client.model.RequestResponsePair;
import org.openapitools.client.model.TestCaseResult;
import org.openapitools.client.model.TestCaseReturnDTO;
import org.openapitools.client.model.TestRequest;
import org.openapitools.client.model.TestResult;
import org.openapitools.client.model.UnidirectionalEvent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTest
     * @param testRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created TestResult (empty shell cause tests are executed asynchronously) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCall(TestRequest testRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testRequest;

        // create path and map variables
        String localVarPath = "/tests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTestValidateBeforeCall(TestRequest testRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRequest' is set
        if (testRequest == null) {
            throw new ApiException("Missing the required parameter 'testRequest' when calling createTest(Async)");
        }

        return createTestCall(testRequest, _callback);

    }

    /**
     * Create a new Test
     * 
     * @param testRequest  (required)
     * @return TestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created TestResult (empty shell cause tests are executed asynchronously) </td><td>  -  </td></tr>
     </table>
     */
    public TestResult createTest(TestRequest testRequest) throws ApiException {
        ApiResponse<TestResult> localVarResp = createTestWithHttpInfo(testRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new Test
     * 
     * @param testRequest  (required)
     * @return ApiResponse&lt;TestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created TestResult (empty shell cause tests are executed asynchronously) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestResult> createTestWithHttpInfo(TestRequest testRequest) throws ApiException {
        okhttp3.Call localVarCall = createTestValidateBeforeCall(testRequest, null);
        Type localVarReturnType = new TypeToken<TestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Test (asynchronously)
     * 
     * @param testRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created TestResult (empty shell cause tests are executed asynchronously) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTestAsync(TestRequest testRequest, final ApiCallback<TestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTestValidateBeforeCall(testRequest, _callback);
        Type localVarReturnType = new TypeToken<TestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventsByTestCase
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseId Unique identifier of TetsCaseResult to manage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of event messages for this TestCase </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsByTestCaseCall(String id, String testCaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tests/{id}/events/{testCaseId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "testCaseId" + "}", localVarApiClient.escapeString(testCaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsByTestCaseValidateBeforeCall(String id, String testCaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEventsByTestCase(Async)");
        }

        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling getEventsByTestCase(Async)");
        }

        return getEventsByTestCaseCall(id, testCaseId, _callback);

    }

    /**
     * Get events for TestCase
     * 
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseId Unique identifier of TetsCaseResult to manage (required)
     * @return List&lt;UnidirectionalEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of event messages for this TestCase </td><td>  -  </td></tr>
     </table>
     */
    public List<UnidirectionalEvent> getEventsByTestCase(String id, String testCaseId) throws ApiException {
        ApiResponse<List<UnidirectionalEvent>> localVarResp = getEventsByTestCaseWithHttpInfo(id, testCaseId);
        return localVarResp.getData();
    }

    /**
     * Get events for TestCase
     * 
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseId Unique identifier of TetsCaseResult to manage (required)
     * @return ApiResponse&lt;List&lt;UnidirectionalEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of event messages for this TestCase </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UnidirectionalEvent>> getEventsByTestCaseWithHttpInfo(String id, String testCaseId) throws ApiException {
        okhttp3.Call localVarCall = getEventsByTestCaseValidateBeforeCall(id, testCaseId, null);
        Type localVarReturnType = new TypeToken<List<UnidirectionalEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get events for TestCase (asynchronously)
     * 
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseId Unique identifier of TetsCaseResult to manage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of event messages for this TestCase </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsByTestCaseAsync(String id, String testCaseId, final ApiCallback<List<UnidirectionalEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsByTestCaseValidateBeforeCall(id, testCaseId, _callback);
        Type localVarReturnType = new TypeToken<List<UnidirectionalEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessagesByTestCase
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseId Unique identifier of TetsCaseResult to manage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of request and response messages for this TestCase </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagesByTestCaseCall(String id, String testCaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tests/{id}/messages/{testCaseId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "testCaseId" + "}", localVarApiClient.escapeString(testCaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagesByTestCaseValidateBeforeCall(String id, String testCaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMessagesByTestCase(Async)");
        }

        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling getMessagesByTestCase(Async)");
        }

        return getMessagesByTestCaseCall(id, testCaseId, _callback);

    }

    /**
     * Get messages for TestCase
     * 
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseId Unique identifier of TetsCaseResult to manage (required)
     * @return List&lt;RequestResponsePair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of request and response messages for this TestCase </td><td>  -  </td></tr>
     </table>
     */
    public List<RequestResponsePair> getMessagesByTestCase(String id, String testCaseId) throws ApiException {
        ApiResponse<List<RequestResponsePair>> localVarResp = getMessagesByTestCaseWithHttpInfo(id, testCaseId);
        return localVarResp.getData();
    }

    /**
     * Get messages for TestCase
     * 
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseId Unique identifier of TetsCaseResult to manage (required)
     * @return ApiResponse&lt;List&lt;RequestResponsePair&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of request and response messages for this TestCase </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RequestResponsePair>> getMessagesByTestCaseWithHttpInfo(String id, String testCaseId) throws ApiException {
        okhttp3.Call localVarCall = getMessagesByTestCaseValidateBeforeCall(id, testCaseId, null);
        Type localVarReturnType = new TypeToken<List<RequestResponsePair>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get messages for TestCase (asynchronously)
     * 
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseId Unique identifier of TetsCaseResult to manage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of request and response messages for this TestCase </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagesByTestCaseAsync(String id, String testCaseId, final ApiCallback<List<RequestResponsePair>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagesByTestCaseValidateBeforeCall(id, testCaseId, _callback);
        Type localVarReturnType = new TypeToken<List<RequestResponsePair>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestResult
     * @param id Unique identifier of TestResult to manage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested TestResult </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestResultCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tests/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestResultValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTestResult(Async)");
        }

        return getTestResultCall(id, _callback);

    }

    /**
     * Get TestResult
     * 
     * @param id Unique identifier of TestResult to manage (required)
     * @return TestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested TestResult </td><td>  -  </td></tr>
     </table>
     */
    public TestResult getTestResult(String id) throws ApiException {
        ApiResponse<TestResult> localVarResp = getTestResultWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get TestResult
     * 
     * @param id Unique identifier of TestResult to manage (required)
     * @return ApiResponse&lt;TestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested TestResult </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestResult> getTestResultWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getTestResultValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TestResult (asynchronously)
     * 
     * @param id Unique identifier of TestResult to manage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested TestResult </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestResultAsync(String id, final ApiCallback<TestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestResultValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestResultsByService
     * @param serviceId Unique identifier of Service to manage TestResults for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TestResults for the Service having the requested id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestResultsByServiceCall(String serviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tests/service/{serviceId}"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestResultsByServiceValidateBeforeCall(String serviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getTestResultsByService(Async)");
        }

        return getTestResultsByServiceCall(serviceId, _callback);

    }

    /**
     * Get TestResults by Service
     * 
     * @param serviceId Unique identifier of Service to manage TestResults for (required)
     * @return List&lt;TestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TestResults for the Service having the requested id </td><td>  -  </td></tr>
     </table>
     */
    public List<TestResult> getTestResultsByService(String serviceId) throws ApiException {
        ApiResponse<List<TestResult>> localVarResp = getTestResultsByServiceWithHttpInfo(serviceId);
        return localVarResp.getData();
    }

    /**
     * Get TestResults by Service
     * 
     * @param serviceId Unique identifier of Service to manage TestResults for (required)
     * @return ApiResponse&lt;List&lt;TestResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TestResults for the Service having the requested id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TestResult>> getTestResultsByServiceWithHttpInfo(String serviceId) throws ApiException {
        okhttp3.Call localVarCall = getTestResultsByServiceValidateBeforeCall(serviceId, null);
        Type localVarReturnType = new TypeToken<List<TestResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TestResults by Service (asynchronously)
     * 
     * @param serviceId Unique identifier of Service to manage TestResults for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TestResults for the Service having the requested id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestResultsByServiceAsync(String serviceId, final ApiCallback<List<TestResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestResultsByServiceValidateBeforeCall(serviceId, _callback);
        Type localVarReturnType = new TypeToken<List<TestResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestResultsByServiceCounter
     * @param serviceId Unique identifier of Service to manage TestResults for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of TestResults for this Service in datastore </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestResultsByServiceCounterCall(String serviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tests/service/{serviceId}/count"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestResultsByServiceCounterValidateBeforeCall(String serviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getTestResultsByServiceCounter(Async)");
        }

        return getTestResultsByServiceCounterCall(serviceId, _callback);

    }

    /**
     * Get the TestResults for Service counter
     * 
     * @param serviceId Unique identifier of Service to manage TestResults for (required)
     * @return Counter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of TestResults for this Service in datastore </td><td>  -  </td></tr>
     </table>
     */
    public Counter getTestResultsByServiceCounter(String serviceId) throws ApiException {
        ApiResponse<Counter> localVarResp = getTestResultsByServiceCounterWithHttpInfo(serviceId);
        return localVarResp.getData();
    }

    /**
     * Get the TestResults for Service counter
     * 
     * @param serviceId Unique identifier of Service to manage TestResults for (required)
     * @return ApiResponse&lt;Counter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of TestResults for this Service in datastore </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Counter> getTestResultsByServiceCounterWithHttpInfo(String serviceId) throws ApiException {
        okhttp3.Call localVarCall = getTestResultsByServiceCounterValidateBeforeCall(serviceId, null);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the TestResults for Service counter (asynchronously)
     * 
     * @param serviceId Unique identifier of Service to manage TestResults for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of TestResults for this Service in datastore </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestResultsByServiceCounterAsync(String serviceId, final ApiCallback<Counter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestResultsByServiceCounterValidateBeforeCall(serviceId, _callback);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportTestCaseResult
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseReturnDTO TestCase return wrapper object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TestCaseResult is reported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportTestCaseResultCall(String id, TestCaseReturnDTO testCaseReturnDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testCaseReturnDTO;

        // create path and map variables
        String localVarPath = "/tests/{id}/testCaseResult"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportTestCaseResultValidateBeforeCall(String id, TestCaseReturnDTO testCaseReturnDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportTestCaseResult(Async)");
        }

        // verify the required parameter 'testCaseReturnDTO' is set
        if (testCaseReturnDTO == null) {
            throw new ApiException("Missing the required parameter 'testCaseReturnDTO' when calling reportTestCaseResult(Async)");
        }

        return reportTestCaseResultCall(id, testCaseReturnDTO, _callback);

    }

    /**
     * Report and create a new TestCaseResult
     * Report a TestCaseResult (typically used by a Test runner)
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseReturnDTO TestCase return wrapper object (required)
     * @return TestCaseResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TestCaseResult is reported </td><td>  -  </td></tr>
     </table>
     */
    public TestCaseResult reportTestCaseResult(String id, TestCaseReturnDTO testCaseReturnDTO) throws ApiException {
        ApiResponse<TestCaseResult> localVarResp = reportTestCaseResultWithHttpInfo(id, testCaseReturnDTO);
        return localVarResp.getData();
    }

    /**
     * Report and create a new TestCaseResult
     * Report a TestCaseResult (typically used by a Test runner)
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseReturnDTO TestCase return wrapper object (required)
     * @return ApiResponse&lt;TestCaseResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TestCaseResult is reported </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestCaseResult> reportTestCaseResultWithHttpInfo(String id, TestCaseReturnDTO testCaseReturnDTO) throws ApiException {
        okhttp3.Call localVarCall = reportTestCaseResultValidateBeforeCall(id, testCaseReturnDTO, null);
        Type localVarReturnType = new TypeToken<TestCaseResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report and create a new TestCaseResult (asynchronously)
     * Report a TestCaseResult (typically used by a Test runner)
     * @param id Unique identifier of TestResult to manage (required)
     * @param testCaseReturnDTO TestCase return wrapper object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TestCaseResult is reported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportTestCaseResultAsync(String id, TestCaseReturnDTO testCaseReturnDTO, final ApiCallback<TestCaseResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportTestCaseResultValidateBeforeCall(id, testCaseReturnDTO, _callback);
        Type localVarReturnType = new TypeToken<TestCaseResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
