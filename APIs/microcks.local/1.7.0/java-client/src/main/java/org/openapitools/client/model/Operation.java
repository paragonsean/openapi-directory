/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Binding;
import org.openapitools.client.model.ParameterConstraint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Operation of a Service or API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:29.619783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Operation {
  public static final String SERIALIZED_NAME_BINDINGS = "bindings";
  @SerializedName(SERIALIZED_NAME_BINDINGS)
  private Map<String, Binding> bindings = new HashMap<>();

  public static final String SERIALIZED_NAME_DEFAULT_DELAY = "defaultDelay";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DELAY)
  private BigDecimal defaultDelay;

  public static final String SERIALIZED_NAME_DISPATCHER = "dispatcher";
  @SerializedName(SERIALIZED_NAME_DISPATCHER)
  private String dispatcher;

  public static final String SERIALIZED_NAME_DISPATCHER_RULES = "dispatcherRules";
  @SerializedName(SERIALIZED_NAME_DISPATCHER_RULES)
  private String dispatcherRules;

  public static final String SERIALIZED_NAME_INPUT_NAME = "inputName";
  @SerializedName(SERIALIZED_NAME_INPUT_NAME)
  private String inputName;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_NAME = "outputName";
  @SerializedName(SERIALIZED_NAME_OUTPUT_NAME)
  private String outputName;

  public static final String SERIALIZED_NAME_PARAMETER_CONTRAINTS = "parameterContraints";
  @SerializedName(SERIALIZED_NAME_PARAMETER_CONTRAINTS)
  private List<ParameterConstraint> parameterContraints = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_PATHS = "resourcePaths";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PATHS)
  private List<String> resourcePaths = new ArrayList<>();

  public Operation() {
  }

  public Operation bindings(Map<String, Binding> bindings) {
    this.bindings = bindings;
    return this;
  }

  public Operation putBindingsItem(String key, Binding bindingsItem) {
    if (this.bindings == null) {
      this.bindings = new HashMap<>();
    }
    this.bindings.put(key, bindingsItem);
    return this;
  }

  /**
   * Map of protocol binding details for this operation
   * @return bindings
   */
  @javax.annotation.Nullable
  public Map<String, Binding> getBindings() {
    return bindings;
  }

  public void setBindings(Map<String, Binding> bindings) {
    this.bindings = bindings;
  }


  public Operation defaultDelay(BigDecimal defaultDelay) {
    this.defaultDelay = defaultDelay;
    return this;
  }

  /**
   * Default response time delay for mocks
   * @return defaultDelay
   */
  @javax.annotation.Nullable
  public BigDecimal getDefaultDelay() {
    return defaultDelay;
  }

  public void setDefaultDelay(BigDecimal defaultDelay) {
    this.defaultDelay = defaultDelay;
  }


  public Operation dispatcher(String dispatcher) {
    this.dispatcher = dispatcher;
    return this;
  }

  /**
   * Dispatcher strategy used for mocks
   * @return dispatcher
   */
  @javax.annotation.Nullable
  public String getDispatcher() {
    return dispatcher;
  }

  public void setDispatcher(String dispatcher) {
    this.dispatcher = dispatcher;
  }


  public Operation dispatcherRules(String dispatcherRules) {
    this.dispatcherRules = dispatcherRules;
    return this;
  }

  /**
   * DispatcherRules used for mocks
   * @return dispatcherRules
   */
  @javax.annotation.Nullable
  public String getDispatcherRules() {
    return dispatcherRules;
  }

  public void setDispatcherRules(String dispatcherRules) {
    this.dispatcherRules = dispatcherRules;
  }


  public Operation inputName(String inputName) {
    this.inputName = inputName;
    return this;
  }

  /**
   * Name of input parameters in case of Xml based Service
   * @return inputName
   */
  @javax.annotation.Nullable
  public String getInputName() {
    return inputName;
  }

  public void setInputName(String inputName) {
    this.inputName = inputName;
  }


  public Operation method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Represents transport method
   * @return method
   */
  @javax.annotation.Nonnull
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public Operation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique name of this Operation within Service scope
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Operation outputName(String outputName) {
    this.outputName = outputName;
    return this;
  }

  /**
   * Name of output parameters in case of Xml based Service
   * @return outputName
   */
  @javax.annotation.Nullable
  public String getOutputName() {
    return outputName;
  }

  public void setOutputName(String outputName) {
    this.outputName = outputName;
  }


  public Operation parameterContraints(List<ParameterConstraint> parameterContraints) {
    this.parameterContraints = parameterContraints;
    return this;
  }

  public Operation addParameterContraintsItem(ParameterConstraint parameterContraintsItem) {
    if (this.parameterContraints == null) {
      this.parameterContraints = new ArrayList<>();
    }
    this.parameterContraints.add(parameterContraintsItem);
    return this;
  }

  /**
   * Contraints that may apply to mock invocatino on this operation
   * @return parameterContraints
   */
  @javax.annotation.Nullable
  public List<ParameterConstraint> getParameterContraints() {
    return parameterContraints;
  }

  public void setParameterContraints(List<ParameterConstraint> parameterContraints) {
    this.parameterContraints = parameterContraints;
  }


  public Operation resourcePaths(List<String> resourcePaths) {
    this.resourcePaths = resourcePaths;
    return this;
  }

  public Operation addResourcePathsItem(String resourcePathsItem) {
    if (this.resourcePaths == null) {
      this.resourcePaths = new ArrayList<>();
    }
    this.resourcePaths.add(resourcePathsItem);
    return this;
  }

  /**
   * Paths the mocks endpoints are mapped on
   * @return resourcePaths
   */
  @javax.annotation.Nullable
  public List<String> getResourcePaths() {
    return resourcePaths;
  }

  public void setResourcePaths(List<String> resourcePaths) {
    this.resourcePaths = resourcePaths;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Operation operation = (Operation) o;
    return Objects.equals(this.bindings, operation.bindings) &&
        Objects.equals(this.defaultDelay, operation.defaultDelay) &&
        Objects.equals(this.dispatcher, operation.dispatcher) &&
        Objects.equals(this.dispatcherRules, operation.dispatcherRules) &&
        Objects.equals(this.inputName, operation.inputName) &&
        Objects.equals(this.method, operation.method) &&
        Objects.equals(this.name, operation.name) &&
        Objects.equals(this.outputName, operation.outputName) &&
        Objects.equals(this.parameterContraints, operation.parameterContraints) &&
        Objects.equals(this.resourcePaths, operation.resourcePaths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bindings, defaultDelay, dispatcher, dispatcherRules, inputName, method, name, outputName, parameterContraints, resourcePaths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Operation {\n");
    sb.append("    bindings: ").append(toIndentedString(bindings)).append("\n");
    sb.append("    defaultDelay: ").append(toIndentedString(defaultDelay)).append("\n");
    sb.append("    dispatcher: ").append(toIndentedString(dispatcher)).append("\n");
    sb.append("    dispatcherRules: ").append(toIndentedString(dispatcherRules)).append("\n");
    sb.append("    inputName: ").append(toIndentedString(inputName)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputName: ").append(toIndentedString(outputName)).append("\n");
    sb.append("    parameterContraints: ").append(toIndentedString(parameterContraints)).append("\n");
    sb.append("    resourcePaths: ").append(toIndentedString(resourcePaths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bindings");
    openapiFields.add("defaultDelay");
    openapiFields.add("dispatcher");
    openapiFields.add("dispatcherRules");
    openapiFields.add("inputName");
    openapiFields.add("method");
    openapiFields.add("name");
    openapiFields.add("outputName");
    openapiFields.add("parameterContraints");
    openapiFields.add("resourcePaths");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Operation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Operation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Operation is not found in the empty JSON string", Operation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Operation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Operation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Operation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dispatcher") != null && !jsonObj.get("dispatcher").isJsonNull()) && !jsonObj.get("dispatcher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispatcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispatcher").toString()));
      }
      if ((jsonObj.get("dispatcherRules") != null && !jsonObj.get("dispatcherRules").isJsonNull()) && !jsonObj.get("dispatcherRules").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispatcherRules` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispatcherRules").toString()));
      }
      if ((jsonObj.get("inputName") != null && !jsonObj.get("inputName").isJsonNull()) && !jsonObj.get("inputName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputName").toString()));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("outputName") != null && !jsonObj.get("outputName").isJsonNull()) && !jsonObj.get("outputName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputName").toString()));
      }
      if (jsonObj.get("parameterContraints") != null && !jsonObj.get("parameterContraints").isJsonNull()) {
        JsonArray jsonArrayparameterContraints = jsonObj.getAsJsonArray("parameterContraints");
        if (jsonArrayparameterContraints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameterContraints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameterContraints` to be an array in the JSON string but got `%s`", jsonObj.get("parameterContraints").toString()));
          }

          // validate the optional field `parameterContraints` (array)
          for (int i = 0; i < jsonArrayparameterContraints.size(); i++) {
            ParameterConstraint.validateJsonElement(jsonArrayparameterContraints.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourcePaths") != null && !jsonObj.get("resourcePaths").isJsonNull() && !jsonObj.get("resourcePaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePaths` to be an array in the JSON string but got `%s`", jsonObj.get("resourcePaths").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Operation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Operation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Operation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Operation.class));

       return (TypeAdapter<T>) new TypeAdapter<Operation>() {
           @Override
           public void write(JsonWriter out, Operation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Operation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Operation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Operation
   * @throws IOException if the JSON string is invalid with respect to Operation
   */
  public static Operation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Operation.class);
  }

  /**
   * Convert an instance of Operation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

