/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Representation of Keycloak / SSO configuration used by Microcks server
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:29.619783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeycloakConfig {
  public static final String SERIALIZED_NAME_AUTH_SERVER_URL = "auth-server-url";
  @SerializedName(SERIALIZED_NAME_AUTH_SERVER_URL)
  private String authServerUrl;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_PUBLIC_CLIENT = "public-client";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CLIENT)
  private String publicClient;

  public static final String SERIALIZED_NAME_REALM = "realm";
  @SerializedName(SERIALIZED_NAME_REALM)
  private String realm;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  /**
   * SSL certificates requirements
   */
  @JsonAdapter(SslRequiredEnum.Adapter.class)
  public enum SslRequiredEnum {
    NONE("none"),
    
    EXTERNAL("external");

    private String value;

    SslRequiredEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SslRequiredEnum fromValue(String value) {
      for (SslRequiredEnum b : SslRequiredEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SslRequiredEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SslRequiredEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SslRequiredEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SslRequiredEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SslRequiredEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SSL_REQUIRED = "ssl-required";
  @SerializedName(SERIALIZED_NAME_SSL_REQUIRED)
  private SslRequiredEnum sslRequired;

  public KeycloakConfig() {
  }

  public KeycloakConfig authServerUrl(String authServerUrl) {
    this.authServerUrl = authServerUrl;
    return this;
  }

  /**
   * SSO Server authentication url
   * @return authServerUrl
   */
  @javax.annotation.Nonnull
  public String getAuthServerUrl() {
    return authServerUrl;
  }

  public void setAuthServerUrl(String authServerUrl) {
    this.authServerUrl = authServerUrl;
  }


  public KeycloakConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether Keycloak authentification and usage is enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public KeycloakConfig publicClient(String publicClient) {
    this.publicClient = publicClient;
    return this;
  }

  /**
   * Name of public-client that can be used for requesting OAuth token
   * @return publicClient
   */
  @javax.annotation.Nonnull
  public String getPublicClient() {
    return publicClient;
  }

  public void setPublicClient(String publicClient) {
    this.publicClient = publicClient;
  }


  public KeycloakConfig realm(String realm) {
    this.realm = realm;
    return this;
  }

  /**
   * Authentication realm name
   * @return realm
   */
  @javax.annotation.Nonnull
  public String getRealm() {
    return realm;
  }

  public void setRealm(String realm) {
    this.realm = realm;
  }


  public KeycloakConfig resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Name of Keycloak resource/application used on client side
   * @return resource
   */
  @javax.annotation.Nonnull
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }


  public KeycloakConfig sslRequired(SslRequiredEnum sslRequired) {
    this.sslRequired = sslRequired;
    return this;
  }

  /**
   * SSL certificates requirements
   * @return sslRequired
   */
  @javax.annotation.Nonnull
  public SslRequiredEnum getSslRequired() {
    return sslRequired;
  }

  public void setSslRequired(SslRequiredEnum sslRequired) {
    this.sslRequired = sslRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeycloakConfig keycloakConfig = (KeycloakConfig) o;
    return Objects.equals(this.authServerUrl, keycloakConfig.authServerUrl) &&
        Objects.equals(this.enabled, keycloakConfig.enabled) &&
        Objects.equals(this.publicClient, keycloakConfig.publicClient) &&
        Objects.equals(this.realm, keycloakConfig.realm) &&
        Objects.equals(this.resource, keycloakConfig.resource) &&
        Objects.equals(this.sslRequired, keycloakConfig.sslRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authServerUrl, enabled, publicClient, realm, resource, sslRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeycloakConfig {\n");
    sb.append("    authServerUrl: ").append(toIndentedString(authServerUrl)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    publicClient: ").append(toIndentedString(publicClient)).append("\n");
    sb.append("    realm: ").append(toIndentedString(realm)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    sslRequired: ").append(toIndentedString(sslRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth-server-url");
    openapiFields.add("enabled");
    openapiFields.add("public-client");
    openapiFields.add("realm");
    openapiFields.add("resource");
    openapiFields.add("ssl-required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auth-server-url");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("public-client");
    openapiRequiredFields.add("realm");
    openapiRequiredFields.add("resource");
    openapiRequiredFields.add("ssl-required");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeycloakConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeycloakConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeycloakConfig is not found in the empty JSON string", KeycloakConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeycloakConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeycloakConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KeycloakConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("auth-server-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth-server-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth-server-url").toString()));
      }
      if (!jsonObj.get("public-client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public-client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public-client").toString()));
      }
      if (!jsonObj.get("realm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realm").toString()));
      }
      if (!jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
      if (!jsonObj.get("ssl-required").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssl-required` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssl-required").toString()));
      }
      // validate the required field `ssl-required`
      SslRequiredEnum.validateJsonElement(jsonObj.get("ssl-required"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeycloakConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeycloakConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeycloakConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeycloakConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<KeycloakConfig>() {
           @Override
           public void write(JsonWriter out, KeycloakConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeycloakConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeycloakConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeycloakConfig
   * @throws IOException if the JSON string is invalid with respect to KeycloakConfig
   */
  public static KeycloakConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeycloakConfig.class);
  }

  /**
   * Convert an instance of KeycloakConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

