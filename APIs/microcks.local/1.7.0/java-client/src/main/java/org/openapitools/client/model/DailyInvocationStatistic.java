/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The daily statistic of a service mock invocations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:29.619783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DailyInvocationStatistic {
  public static final String SERIALIZED_NAME_DAILY_COUNT = "dailyCount";
  @SerializedName(SERIALIZED_NAME_DAILY_COUNT)
  private BigDecimal dailyCount;

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_HOURLY_COUNT = "hourlyCount";
  @SerializedName(SERIALIZED_NAME_HOURLY_COUNT)
  private Map<String, Object> hourlyCount = new HashMap<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MINUTE_COUNT = "minuteCount";
  @SerializedName(SERIALIZED_NAME_MINUTE_COUNT)
  private Map<String, Object> minuteCount = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_VERSION = "serviceVersion";
  @SerializedName(SERIALIZED_NAME_SERVICE_VERSION)
  private String serviceVersion;

  public DailyInvocationStatistic() {
  }

  public DailyInvocationStatistic dailyCount(BigDecimal dailyCount) {
    this.dailyCount = dailyCount;
    return this;
  }

  /**
   * The number of service mock invocations on this day
   * @return dailyCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getDailyCount() {
    return dailyCount;
  }

  public void setDailyCount(BigDecimal dailyCount) {
    this.dailyCount = dailyCount;
  }


  public DailyInvocationStatistic day(String day) {
    this.day = day;
    return this;
  }

  /**
   * The day (formatted as yyyyMMdd string) represented by this statistic
   * @return day
   */
  @javax.annotation.Nonnull
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public DailyInvocationStatistic hourlyCount(Map<String, Object> hourlyCount) {
    this.hourlyCount = hourlyCount;
    return this;
  }

  public DailyInvocationStatistic putHourlyCountItem(String key, Object hourlyCountItem) {
    if (this.hourlyCount == null) {
      this.hourlyCount = new HashMap<>();
    }
    this.hourlyCount.put(key, hourlyCountItem);
    return this;
  }

  /**
   * The number of service mock invocations per hour of the day (keys range from 0 to 23)
   * @return hourlyCount
   */
  @javax.annotation.Nullable
  public Map<String, Object> getHourlyCount() {
    return hourlyCount;
  }

  public void setHourlyCount(Map<String, Object> hourlyCount) {
    this.hourlyCount = hourlyCount;
  }


  public DailyInvocationStatistic id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of this statistic object
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DailyInvocationStatistic minuteCount(Map<String, Object> minuteCount) {
    this.minuteCount = minuteCount;
    return this;
  }

  public DailyInvocationStatistic putMinuteCountItem(String key, Object minuteCountItem) {
    if (this.minuteCount == null) {
      this.minuteCount = new HashMap<>();
    }
    this.minuteCount.put(key, minuteCountItem);
    return this;
  }

  /**
   * The number of service mock invocations per minute of the day (keys range from 0 to 1439)
   * @return minuteCount
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMinuteCount() {
    return minuteCount;
  }

  public void setMinuteCount(Map<String, Object> minuteCount) {
    this.minuteCount = minuteCount;
  }


  public DailyInvocationStatistic serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * The name of the service this statistic is related to
   * @return serviceName
   */
  @javax.annotation.Nonnull
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public DailyInvocationStatistic serviceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
    return this;
  }

  /**
   * The version of the service this statistic is related to
   * @return serviceVersion
   */
  @javax.annotation.Nonnull
  public String getServiceVersion() {
    return serviceVersion;
  }

  public void setServiceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyInvocationStatistic dailyInvocationStatistic = (DailyInvocationStatistic) o;
    return Objects.equals(this.dailyCount, dailyInvocationStatistic.dailyCount) &&
        Objects.equals(this.day, dailyInvocationStatistic.day) &&
        Objects.equals(this.hourlyCount, dailyInvocationStatistic.hourlyCount) &&
        Objects.equals(this.id, dailyInvocationStatistic.id) &&
        Objects.equals(this.minuteCount, dailyInvocationStatistic.minuteCount) &&
        Objects.equals(this.serviceName, dailyInvocationStatistic.serviceName) &&
        Objects.equals(this.serviceVersion, dailyInvocationStatistic.serviceVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dailyCount, day, hourlyCount, id, minuteCount, serviceName, serviceVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyInvocationStatistic {\n");
    sb.append("    dailyCount: ").append(toIndentedString(dailyCount)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    hourlyCount: ").append(toIndentedString(hourlyCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    minuteCount: ").append(toIndentedString(minuteCount)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    serviceVersion: ").append(toIndentedString(serviceVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dailyCount");
    openapiFields.add("day");
    openapiFields.add("hourlyCount");
    openapiFields.add("id");
    openapiFields.add("minuteCount");
    openapiFields.add("serviceName");
    openapiFields.add("serviceVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dailyCount");
    openapiRequiredFields.add("day");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("serviceName");
    openapiRequiredFields.add("serviceVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DailyInvocationStatistic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DailyInvocationStatistic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyInvocationStatistic is not found in the empty JSON string", DailyInvocationStatistic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DailyInvocationStatistic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DailyInvocationStatistic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DailyInvocationStatistic.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      if (!jsonObj.get("serviceVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyInvocationStatistic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyInvocationStatistic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyInvocationStatistic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyInvocationStatistic.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyInvocationStatistic>() {
           @Override
           public void write(JsonWriter out, DailyInvocationStatistic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyInvocationStatistic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DailyInvocationStatistic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DailyInvocationStatistic
   * @throws IOException if the JSON string is invalid with respect to DailyInvocationStatistic
   */
  public static DailyInvocationStatistic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyInvocationStatistic.class);
  }

  /**
   * Convert an instance of DailyInvocationStatistic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

