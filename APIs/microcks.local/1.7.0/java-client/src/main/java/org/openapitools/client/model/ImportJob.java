/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Metadata;
import org.openapitools.client.model.SecretRef;
import org.openapitools.client.model.ServiceRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An ImportJob allow defining a repository artifact to poll for discovering Services and APIs mocks and tests
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:29.619783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportJob {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_IMPORT_DATE = "lastImportDate";
  @SerializedName(SERIALIZED_NAME_LAST_IMPORT_DATE)
  private OffsetDateTime lastImportDate;

  public static final String SERIALIZED_NAME_LAST_IMPORT_ERROR = "lastImportError";
  @SerializedName(SERIALIZED_NAME_LAST_IMPORT_ERROR)
  private String lastImportError;

  public static final String SERIALIZED_NAME_MAIN_ARTIFACT = "mainArtifact";
  @SerializedName(SERIALIZED_NAME_MAIN_ARTIFACT)
  private Boolean mainArtifact;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Metadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REPOSITORY_DISABLE_S_S_L_VALIDATION = "repositoryDisableSSLValidation";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_DISABLE_S_S_L_VALIDATION)
  private Boolean repositoryDisableSSLValidation;

  public static final String SERIALIZED_NAME_REPOSITORY_URL = "repositoryUrl";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_URL)
  private String repositoryUrl;

  public static final String SERIALIZED_NAME_SECRET_REF = "secretRef";
  @SerializedName(SERIALIZED_NAME_SECRET_REF)
  private SecretRef secretRef;

  public static final String SERIALIZED_NAME_SERVICE_REFS = "serviceRefs";
  @SerializedName(SERIALIZED_NAME_SERVICE_REFS)
  private List<ServiceRef> serviceRefs = new ArrayList<>();

  public ImportJob() {
  }

  public ImportJob active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether this ImportJob is active (ie. scheduled for execution)
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public ImportJob createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Creation date for this ImportJob
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public ImportJob etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Etag of repository URL during previous import. Is used for not re-importing if no recent changes
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public ImportJob frequency(String frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Reserved for future usage
   * @return frequency
   */
  @javax.annotation.Nullable
  public String getFrequency() {
    return frequency;
  }

  public void setFrequency(String frequency) {
    this.frequency = frequency;
  }


  public ImportJob id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of ImportJob
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ImportJob lastImportDate(OffsetDateTime lastImportDate) {
    this.lastImportDate = lastImportDate;
    return this;
  }

  /**
   * Date last import was done
   * @return lastImportDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastImportDate() {
    return lastImportDate;
  }

  public void setLastImportDate(OffsetDateTime lastImportDate) {
    this.lastImportDate = lastImportDate;
  }


  public ImportJob lastImportError(String lastImportError) {
    this.lastImportError = lastImportError;
    return this;
  }

  /**
   * Error message of last import (if any)
   * @return lastImportError
   */
  @javax.annotation.Nullable
  public String getLastImportError() {
    return lastImportError;
  }

  public void setLastImportError(String lastImportError) {
    this.lastImportError = lastImportError;
  }


  public ImportJob mainArtifact(Boolean mainArtifact) {
    this.mainArtifact = mainArtifact;
    return this;
  }

  /**
   * Flag telling if considered as primary or secondary artifact. Default to &#x60;true&#x60;
   * @return mainArtifact
   */
  @javax.annotation.Nullable
  public Boolean getMainArtifact() {
    return mainArtifact;
  }

  public void setMainArtifact(Boolean mainArtifact) {
    this.mainArtifact = mainArtifact;
  }


  public ImportJob metadata(Metadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Metadata getMetadata() {
    return metadata;
  }

  public void setMetadata(Metadata metadata) {
    this.metadata = metadata;
  }


  public ImportJob name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique distinct name of this ImportJob
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ImportJob repositoryDisableSSLValidation(Boolean repositoryDisableSSLValidation) {
    this.repositoryDisableSSLValidation = repositoryDisableSSLValidation;
    return this;
  }

  /**
   * Whether to disable SSL certificate verification when checking repository
   * @return repositoryDisableSSLValidation
   */
  @javax.annotation.Nullable
  public Boolean getRepositoryDisableSSLValidation() {
    return repositoryDisableSSLValidation;
  }

  public void setRepositoryDisableSSLValidation(Boolean repositoryDisableSSLValidation) {
    this.repositoryDisableSSLValidation = repositoryDisableSSLValidation;
  }


  public ImportJob repositoryUrl(String repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
    return this;
  }

  /**
   * URL of mocks and tests repository artifact
   * @return repositoryUrl
   */
  @javax.annotation.Nonnull
  public String getRepositoryUrl() {
    return repositoryUrl;
  }

  public void setRepositoryUrl(String repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
  }


  public ImportJob secretRef(SecretRef secretRef) {
    this.secretRef = secretRef;
    return this;
  }

  /**
   * Get secretRef
   * @return secretRef
   */
  @javax.annotation.Nullable
  public SecretRef getSecretRef() {
    return secretRef;
  }

  public void setSecretRef(SecretRef secretRef) {
    this.secretRef = secretRef;
  }


  public ImportJob serviceRefs(List<ServiceRef> serviceRefs) {
    this.serviceRefs = serviceRefs;
    return this;
  }

  public ImportJob addServiceRefsItem(ServiceRef serviceRefsItem) {
    if (this.serviceRefs == null) {
      this.serviceRefs = new ArrayList<>();
    }
    this.serviceRefs.add(serviceRefsItem);
    return this;
  }

  /**
   * References of Services discovered when checking repository
   * @return serviceRefs
   */
  @javax.annotation.Nullable
  public List<ServiceRef> getServiceRefs() {
    return serviceRefs;
  }

  public void setServiceRefs(List<ServiceRef> serviceRefs) {
    this.serviceRefs = serviceRefs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportJob importJob = (ImportJob) o;
    return Objects.equals(this.active, importJob.active) &&
        Objects.equals(this.createdDate, importJob.createdDate) &&
        Objects.equals(this.etag, importJob.etag) &&
        Objects.equals(this.frequency, importJob.frequency) &&
        Objects.equals(this.id, importJob.id) &&
        Objects.equals(this.lastImportDate, importJob.lastImportDate) &&
        Objects.equals(this.lastImportError, importJob.lastImportError) &&
        Objects.equals(this.mainArtifact, importJob.mainArtifact) &&
        Objects.equals(this.metadata, importJob.metadata) &&
        Objects.equals(this.name, importJob.name) &&
        Objects.equals(this.repositoryDisableSSLValidation, importJob.repositoryDisableSSLValidation) &&
        Objects.equals(this.repositoryUrl, importJob.repositoryUrl) &&
        Objects.equals(this.secretRef, importJob.secretRef) &&
        Objects.equals(this.serviceRefs, importJob.serviceRefs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, createdDate, etag, frequency, id, lastImportDate, lastImportError, mainArtifact, metadata, name, repositoryDisableSSLValidation, repositoryUrl, secretRef, serviceRefs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportJob {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastImportDate: ").append(toIndentedString(lastImportDate)).append("\n");
    sb.append("    lastImportError: ").append(toIndentedString(lastImportError)).append("\n");
    sb.append("    mainArtifact: ").append(toIndentedString(mainArtifact)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    repositoryDisableSSLValidation: ").append(toIndentedString(repositoryDisableSSLValidation)).append("\n");
    sb.append("    repositoryUrl: ").append(toIndentedString(repositoryUrl)).append("\n");
    sb.append("    secretRef: ").append(toIndentedString(secretRef)).append("\n");
    sb.append("    serviceRefs: ").append(toIndentedString(serviceRefs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("createdDate");
    openapiFields.add("etag");
    openapiFields.add("frequency");
    openapiFields.add("id");
    openapiFields.add("lastImportDate");
    openapiFields.add("lastImportError");
    openapiFields.add("mainArtifact");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("repositoryDisableSSLValidation");
    openapiFields.add("repositoryUrl");
    openapiFields.add("secretRef");
    openapiFields.add("serviceRefs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("repositoryUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportJob is not found in the empty JSON string", ImportJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportJob.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastImportError") != null && !jsonObj.get("lastImportError").isJsonNull()) && !jsonObj.get("lastImportError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastImportError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastImportError").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        Metadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("repositoryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositoryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositoryUrl").toString()));
      }
      // validate the optional field `secretRef`
      if (jsonObj.get("secretRef") != null && !jsonObj.get("secretRef").isJsonNull()) {
        SecretRef.validateJsonElement(jsonObj.get("secretRef"));
      }
      if (jsonObj.get("serviceRefs") != null && !jsonObj.get("serviceRefs").isJsonNull()) {
        JsonArray jsonArrayserviceRefs = jsonObj.getAsJsonArray("serviceRefs");
        if (jsonArrayserviceRefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceRefs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceRefs` to be an array in the JSON string but got `%s`", jsonObj.get("serviceRefs").toString()));
          }

          // validate the optional field `serviceRefs` (array)
          for (int i = 0; i < jsonArrayserviceRefs.size(); i++) {
            ServiceRef.validateJsonElement(jsonArrayserviceRefs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportJob.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportJob>() {
           @Override
           public void write(JsonWriter out, ImportJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportJob
   * @throws IOException if the JSON string is invalid with respect to ImportJob
   */
  public static ImportJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportJob.class);
  }

  /**
   * Convert an instance of ImportJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

