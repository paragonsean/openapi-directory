/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DailyInvocationStatistic;
import org.openapitools.client.model.TestConformanceMetric;
import org.openapitools.client.model.TestResultSummary;
import org.openapitools.client.model.WeightedMetricValue;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAggregatedInvocationsStats
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated invocation statistics for specified day </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAggregatedInvocationsStatsCall(String day, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/invocations/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAggregatedInvocationsStatsValidateBeforeCall(String day, final ApiCallback _callback) throws ApiException {
        return getAggregatedInvocationsStatsCall(day, _callback);

    }

    /**
     * Get aggregated invocation statistics for a day
     * 
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @return DailyInvocationStatistic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated invocation statistics for specified day </td><td>  -  </td></tr>
     </table>
     */
    public DailyInvocationStatistic getAggregatedInvocationsStats(String day) throws ApiException {
        ApiResponse<DailyInvocationStatistic> localVarResp = getAggregatedInvocationsStatsWithHttpInfo(day);
        return localVarResp.getData();
    }

    /**
     * Get aggregated invocation statistics for a day
     * 
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @return ApiResponse&lt;DailyInvocationStatistic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated invocation statistics for specified day </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DailyInvocationStatistic> getAggregatedInvocationsStatsWithHttpInfo(String day) throws ApiException {
        okhttp3.Call localVarCall = getAggregatedInvocationsStatsValidateBeforeCall(day, null);
        Type localVarReturnType = new TypeToken<DailyInvocationStatistic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get aggregated invocation statistics for a day (asynchronously)
     * 
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated invocation statistics for specified day </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAggregatedInvocationsStatsAsync(String day, final ApiCallback<DailyInvocationStatistic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAggregatedInvocationsStatsValidateBeforeCall(day, _callback);
        Type localVarReturnType = new TypeToken<DailyInvocationStatistic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConformanceMetricsAggregation
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get aggregated coverage metric value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConformanceMetricsAggregationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/conformance/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConformanceMetricsAggregationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getConformanceMetricsAggregationCall(_callback);

    }

    /**
     * Get aggregation of conformance metrics
     * 
     * @return List&lt;WeightedMetricValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get aggregated coverage metric value </td><td>  -  </td></tr>
     </table>
     */
    public List<WeightedMetricValue> getConformanceMetricsAggregation() throws ApiException {
        ApiResponse<List<WeightedMetricValue>> localVarResp = getConformanceMetricsAggregationWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get aggregation of conformance metrics
     * 
     * @return ApiResponse&lt;List&lt;WeightedMetricValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get aggregated coverage metric value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WeightedMetricValue>> getConformanceMetricsAggregationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getConformanceMetricsAggregationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<WeightedMetricValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get aggregation of conformance metrics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get aggregated coverage metric value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConformanceMetricsAggregationAsync(final ApiCallback<List<WeightedMetricValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConformanceMetricsAggregationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<WeightedMetricValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvocationStatsByService
     * @param serviceName Name of service to get statistics for (required)
     * @param serviceVersion Version of service to get statistics for (required)
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invocation statistics for service for specified day </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvocationStatsByServiceCall(String serviceName, String serviceVersion, String day, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/invocations/{serviceName}/{serviceVersion}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceVersion" + "}", localVarApiClient.escapeString(serviceVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvocationStatsByServiceValidateBeforeCall(String serviceName, String serviceVersion, String day, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling getInvocationStatsByService(Async)");
        }

        // verify the required parameter 'serviceVersion' is set
        if (serviceVersion == null) {
            throw new ApiException("Missing the required parameter 'serviceVersion' when calling getInvocationStatsByService(Async)");
        }

        return getInvocationStatsByServiceCall(serviceName, serviceVersion, day, _callback);

    }

    /**
     * Get invocation statistics for Service
     * 
     * @param serviceName Name of service to get statistics for (required)
     * @param serviceVersion Version of service to get statistics for (required)
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @return DailyInvocationStatistic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invocation statistics for service for specified day </td><td>  -  </td></tr>
     </table>
     */
    public DailyInvocationStatistic getInvocationStatsByService(String serviceName, String serviceVersion, String day) throws ApiException {
        ApiResponse<DailyInvocationStatistic> localVarResp = getInvocationStatsByServiceWithHttpInfo(serviceName, serviceVersion, day);
        return localVarResp.getData();
    }

    /**
     * Get invocation statistics for Service
     * 
     * @param serviceName Name of service to get statistics for (required)
     * @param serviceVersion Version of service to get statistics for (required)
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @return ApiResponse&lt;DailyInvocationStatistic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invocation statistics for service for specified day </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DailyInvocationStatistic> getInvocationStatsByServiceWithHttpInfo(String serviceName, String serviceVersion, String day) throws ApiException {
        okhttp3.Call localVarCall = getInvocationStatsByServiceValidateBeforeCall(serviceName, serviceVersion, day, null);
        Type localVarReturnType = new TypeToken<DailyInvocationStatistic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get invocation statistics for Service (asynchronously)
     * 
     * @param serviceName Name of service to get statistics for (required)
     * @param serviceVersion Version of service to get statistics for (required)
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invocation statistics for service for specified day </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvocationStatsByServiceAsync(String serviceName, String serviceVersion, String day, final ApiCallback<DailyInvocationStatistic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvocationStatsByServiceValidateBeforeCall(serviceName, serviceVersion, day, _callback);
        Type localVarReturnType = new TypeToken<DailyInvocationStatistic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatestAggregatedInvocationsStats
     * @param limit Number of days to get back in time. Default is 20. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A map where keys are day (formatted using yyyyMMdd pattern) and values are counter of invocations on this day </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestAggregatedInvocationsStatsCall(Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/invocations/global/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestAggregatedInvocationsStatsValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {
        return getLatestAggregatedInvocationsStatsCall(limit, _callback);

    }

    /**
     * Get aggregated invocations statistics for latest days
     * 
     * @param limit Number of days to get back in time. Default is 20. (optional)
     * @return Map&lt;String, BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A map where keys are day (formatted using yyyyMMdd pattern) and values are counter of invocations on this day </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, BigDecimal> getLatestAggregatedInvocationsStats(Integer limit) throws ApiException {
        ApiResponse<Map<String, BigDecimal>> localVarResp = getLatestAggregatedInvocationsStatsWithHttpInfo(limit);
        return localVarResp.getData();
    }

    /**
     * Get aggregated invocations statistics for latest days
     * 
     * @param limit Number of days to get back in time. Default is 20. (optional)
     * @return ApiResponse&lt;Map&lt;String, BigDecimal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A map where keys are day (formatted using yyyyMMdd pattern) and values are counter of invocations on this day </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, BigDecimal>> getLatestAggregatedInvocationsStatsWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getLatestAggregatedInvocationsStatsValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<Map<String, BigDecimal>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get aggregated invocations statistics for latest days (asynchronously)
     * 
     * @param limit Number of days to get back in time. Default is 20. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A map where keys are day (formatted using yyyyMMdd pattern) and values are counter of invocations on this day </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestAggregatedInvocationsStatsAsync(Integer limit, final ApiCallback<Map<String, BigDecimal>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestAggregatedInvocationsStatsValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<Map<String, BigDecimal>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatestTestResults
     * @param limit Number of days to consider for test results to return. Default is 7 (one week) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test results summary for specified &lt;limit&gt; last days. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestTestResultsCall(Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/tests/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestTestResultsValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {
        return getLatestTestResultsCall(limit, _callback);

    }

    /**
     * Get latest tests results
     * 
     * @param limit Number of days to consider for test results to return. Default is 7 (one week) (optional)
     * @return List&lt;TestResultSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test results summary for specified &lt;limit&gt; last days. </td><td>  -  </td></tr>
     </table>
     */
    public List<TestResultSummary> getLatestTestResults(Integer limit) throws ApiException {
        ApiResponse<List<TestResultSummary>> localVarResp = getLatestTestResultsWithHttpInfo(limit);
        return localVarResp.getData();
    }

    /**
     * Get latest tests results
     * 
     * @param limit Number of days to consider for test results to return. Default is 7 (one week) (optional)
     * @return ApiResponse&lt;List&lt;TestResultSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test results summary for specified &lt;limit&gt; last days. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TestResultSummary>> getLatestTestResultsWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getLatestTestResultsValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<List<TestResultSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get latest tests results (asynchronously)
     * 
     * @param limit Number of days to consider for test results to return. Default is 7 (one week) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test results summary for specified &lt;limit&gt; last days. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestTestResultsAsync(Integer limit, final ApiCallback<List<TestResultSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestTestResultsValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<List<TestResultSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceTestConformanceMetric
     * @param serviceId Unique Services identifier this metrics are related to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test coverage metric for Service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceTestConformanceMetricCall(String serviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/conformance/service/{serviceId}"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceTestConformanceMetricValidateBeforeCall(String serviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceTestConformanceMetric(Async)");
        }

        return getServiceTestConformanceMetricCall(serviceId, _callback);

    }

    /**
     * Get conformance metrics for a Service
     * 
     * @param serviceId Unique Services identifier this metrics are related to (required)
     * @return TestConformanceMetric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test coverage metric for Service </td><td>  -  </td></tr>
     </table>
     */
    public TestConformanceMetric getServiceTestConformanceMetric(String serviceId) throws ApiException {
        ApiResponse<TestConformanceMetric> localVarResp = getServiceTestConformanceMetricWithHttpInfo(serviceId);
        return localVarResp.getData();
    }

    /**
     * Get conformance metrics for a Service
     * 
     * @param serviceId Unique Services identifier this metrics are related to (required)
     * @return ApiResponse&lt;TestConformanceMetric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test coverage metric for Service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestConformanceMetric> getServiceTestConformanceMetricWithHttpInfo(String serviceId) throws ApiException {
        okhttp3.Call localVarCall = getServiceTestConformanceMetricValidateBeforeCall(serviceId, null);
        Type localVarReturnType = new TypeToken<TestConformanceMetric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get conformance metrics for a Service (asynchronously)
     * 
     * @param serviceId Unique Services identifier this metrics are related to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test coverage metric for Service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceTestConformanceMetricAsync(String serviceId, final ApiCallback<TestConformanceMetric> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceTestConformanceMetricValidateBeforeCall(serviceId, _callback);
        Type localVarReturnType = new TypeToken<TestConformanceMetric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTopIvnocationsStatsByDay
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @param limit The number of top invoked mocks to return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top invocations for a defined day </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopIvnocationsStatsByDayCall(String day, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/invocations/top";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopIvnocationsStatsByDayValidateBeforeCall(String day, Integer limit, final ApiCallback _callback) throws ApiException {
        return getTopIvnocationsStatsByDayCall(day, limit, _callback);

    }

    /**
     * Get top invocation statistics for a day
     * 
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @param limit The number of top invoked mocks to return (optional)
     * @return List&lt;DailyInvocationStatistic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top invocations for a defined day </td><td>  -  </td></tr>
     </table>
     */
    public List<DailyInvocationStatistic> getTopIvnocationsStatsByDay(String day, Integer limit) throws ApiException {
        ApiResponse<List<DailyInvocationStatistic>> localVarResp = getTopIvnocationsStatsByDayWithHttpInfo(day, limit);
        return localVarResp.getData();
    }

    /**
     * Get top invocation statistics for a day
     * 
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @param limit The number of top invoked mocks to return (optional)
     * @return ApiResponse&lt;List&lt;DailyInvocationStatistic&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top invocations for a defined day </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DailyInvocationStatistic>> getTopIvnocationsStatsByDayWithHttpInfo(String day, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getTopIvnocationsStatsByDayValidateBeforeCall(day, limit, null);
        Type localVarReturnType = new TypeToken<List<DailyInvocationStatistic>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get top invocation statistics for a day (asynchronously)
     * 
     * @param day The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided. (optional)
     * @param limit The number of top invoked mocks to return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top invocations for a defined day </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopIvnocationsStatsByDayAsync(String day, Integer limit, final ApiCallback<List<DailyInvocationStatistic>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopIvnocationsStatsByDayValidateBeforeCall(day, limit, _callback);
        Type localVarReturnType = new TypeToken<List<DailyInvocationStatistic>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
