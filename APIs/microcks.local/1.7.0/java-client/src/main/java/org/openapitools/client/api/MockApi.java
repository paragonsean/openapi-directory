/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Counter;
import java.io.File;
import org.openapitools.client.model.GetService200Response;
import org.openapitools.client.model.Metadata;
import org.openapitools.client.model.OperationOverrideDTO;
import org.openapitools.client.model.Service;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MockApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MockApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MockApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteService
     * @param id Unique identifier of Service to managed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service has been deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteService(Async)");
        }

        return deleteServiceCall(id, _callback);

    }

    /**
     * Delete Service
     * Delete a Service
     * @param id Unique identifier of Service to managed (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service has been deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteService(String id) throws ApiException {
        deleteServiceWithHttpInfo(id);
    }

    /**
     * Delete Service
     * Delete a Service
     * @param id Unique identifier of Service to managed (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service has been deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Service (asynchronously)
     * Delete a Service
     * @param id Unique identifier of Service to managed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service has been deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportSnapshot
     * @param serviceIds List of service identifiers to export (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot file representing the export of requested services </td><td>  * Content-Disposition -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call exportSnapshotCall(List<String> serviceIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serviceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "serviceIds", serviceIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportSnapshotValidateBeforeCall(List<String> serviceIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceIds' is set
        if (serviceIds == null) {
            throw new ApiException("Missing the required parameter 'serviceIds' when calling exportSnapshot(Async)");
        }

        return exportSnapshotCall(serviceIds, _callback);

    }

    /**
     * Export a snapshot
     * Export a repostiory snapshot with requested services
     * @param serviceIds List of service identifiers to export (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot file representing the export of requested services </td><td>  * Content-Disposition -  <br>  </td></tr>
     </table>
     */
    public File exportSnapshot(List<String> serviceIds) throws ApiException {
        ApiResponse<File> localVarResp = exportSnapshotWithHttpInfo(serviceIds);
        return localVarResp.getData();
    }

    /**
     * Export a snapshot
     * Export a repostiory snapshot with requested services
     * @param serviceIds List of service identifiers to export (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot file representing the export of requested services </td><td>  * Content-Disposition -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<File> exportSnapshotWithHttpInfo(List<String> serviceIds) throws ApiException {
        okhttp3.Call localVarCall = exportSnapshotValidateBeforeCall(serviceIds, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export a snapshot (asynchronously)
     * Export a repostiory snapshot with requested services
     * @param serviceIds List of service identifiers to export (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot file representing the export of requested services </td><td>  * Content-Disposition -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call exportSnapshotAsync(List<String> serviceIds, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportSnapshotValidateBeforeCall(serviceIds, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getService
     * @param id Unique identifier of Service to managed (required)
     * @param messages Whether to include details on services messages into result. Default is false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceCall(String id, Boolean messages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (messages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("messages", messages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceValidateBeforeCall(String id, Boolean messages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getService(Async)");
        }

        return getServiceCall(id, messages, _callback);

    }

    /**
     * Get Service
     * 
     * @param id Unique identifier of Service to managed (required)
     * @param messages Whether to include details on services messages into result. Default is false (optional)
     * @return GetService200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetService200Response getService(String id, Boolean messages) throws ApiException {
        ApiResponse<GetService200Response> localVarResp = getServiceWithHttpInfo(id, messages);
        return localVarResp.getData();
    }

    /**
     * Get Service
     * 
     * @param id Unique identifier of Service to managed (required)
     * @param messages Whether to include details on services messages into result. Default is false (optional)
     * @return ApiResponse&lt;GetService200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetService200Response> getServiceWithHttpInfo(String id, Boolean messages) throws ApiException {
        okhttp3.Call localVarCall = getServiceValidateBeforeCall(id, messages, null);
        Type localVarReturnType = new TypeToken<GetService200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Service (asynchronously)
     * 
     * @param id Unique identifier of Service to managed (required)
     * @param messages Whether to include details on services messages into result. Default is false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAsync(String id, Boolean messages, final ApiCallback<GetService200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceValidateBeforeCall(id, messages, _callback);
        Type localVarReturnType = new TypeToken<GetService200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServices
     * @param page Page of Services to retrieve (starts at and defaults to 0) (optional)
     * @param size Size of a page. Maximum number of Services to include in a response (defaults to 20) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found Services </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesCall(Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServicesValidateBeforeCall(Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        return getServicesCall(page, size, _callback);

    }

    /**
     * Get Services and APIs
     * 
     * @param page Page of Services to retrieve (starts at and defaults to 0) (optional)
     * @param size Size of a page. Maximum number of Services to include in a response (defaults to 20) (optional)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found Services </td><td>  -  </td></tr>
     </table>
     */
    public Service getServices(Integer page, Integer size) throws ApiException {
        ApiResponse<Service> localVarResp = getServicesWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Get Services and APIs
     * 
     * @param page Page of Services to retrieve (starts at and defaults to 0) (optional)
     * @param size Size of a page. Maximum number of Services to include in a response (defaults to 20) (optional)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found Services </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Service> getServicesWithHttpInfo(Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getServicesValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Services and APIs (asynchronously)
     * 
     * @param page Page of Services to retrieve (starts at and defaults to 0) (optional)
     * @param size Size of a page. Maximum number of Services to include in a response (defaults to 20) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found Services </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesAsync(Integer page, Integer size, final ApiCallback<Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServicesValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServicesCounter
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of Services in datastore </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesCounterCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServicesCounterValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getServicesCounterCall(_callback);

    }

    /**
     * Get the Services counter
     * 
     * @return Counter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of Services in datastore </td><td>  -  </td></tr>
     </table>
     */
    public Counter getServicesCounter() throws ApiException {
        ApiResponse<Counter> localVarResp = getServicesCounterWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the Services counter
     * 
     * @return ApiResponse&lt;Counter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of Services in datastore </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Counter> getServicesCounterWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getServicesCounterValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Services counter (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of Services in datastore </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesCounterAsync(final ApiCallback<Counter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServicesCounterValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServicesLabels
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already used labels: keys are label Keys, values are array of label Values </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesLabelsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServicesLabelsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getServicesLabelsCall(_callback);

    }

    /**
     * Get the already used labels for Services
     * 
     * @return Map&lt;String, List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already used labels: keys are label Keys, values are array of label Values </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<String>> getServicesLabels() throws ApiException {
        ApiResponse<Map<String, List<String>>> localVarResp = getServicesLabelsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the already used labels for Services
     * 
     * @return ApiResponse&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already used labels: keys are label Keys, values are array of label Values </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<String>>> getServicesLabelsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getServicesLabelsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the already used labels for Services (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Already used labels: keys are label Keys, values are array of label Values </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesLabelsAsync(final ApiCallback<Map<String, List<String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServicesLabelsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importSnapshot
     * @param _file The repository snapshot file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Snasphot has been correctly imported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSnapshotCall(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importSnapshotValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling importSnapshot(Async)");
        }

        return importSnapshotCall(_file, _callback);

    }

    /**
     * Import a snapshot
     * Import a repository snapshot previsouly exported into Microcks
     * @param _file The repository snapshot file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Snasphot has been correctly imported </td><td>  -  </td></tr>
     </table>
     */
    public void importSnapshot(File _file) throws ApiException {
        importSnapshotWithHttpInfo(_file);
    }

    /**
     * Import a snapshot
     * Import a repository snapshot previsouly exported into Microcks
     * @param _file The repository snapshot file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Snasphot has been correctly imported </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importSnapshotWithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = importSnapshotValidateBeforeCall(_file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import a snapshot (asynchronously)
     * Import a repository snapshot previsouly exported into Microcks
     * @param _file The repository snapshot file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Snasphot has been correctly imported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSnapshotAsync(File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importSnapshotValidateBeforeCall(_file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for overrideServiceOperation
     * @param id Unique identifier of Service to managed (required)
     * @param operationName Name of operation to update (required)
     * @param operationOverrideDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation has been updated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation cannot be updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overrideServiceOperationCall(String id, String operationName, OperationOverrideDTO operationOverrideDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = operationOverrideDTO;

        // create path and map variables
        String localVarPath = "/services/{id}/operation"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operationName", operationName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overrideServiceOperationValidateBeforeCall(String id, String operationName, OperationOverrideDTO operationOverrideDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling overrideServiceOperation(Async)");
        }

        // verify the required parameter 'operationName' is set
        if (operationName == null) {
            throw new ApiException("Missing the required parameter 'operationName' when calling overrideServiceOperation(Async)");
        }

        // verify the required parameter 'operationOverrideDTO' is set
        if (operationOverrideDTO == null) {
            throw new ApiException("Missing the required parameter 'operationOverrideDTO' when calling overrideServiceOperation(Async)");
        }

        return overrideServiceOperationCall(id, operationName, operationOverrideDTO, _callback);

    }

    /**
     * Override Service Operation
     * 
     * @param id Unique identifier of Service to managed (required)
     * @param operationName Name of operation to update (required)
     * @param operationOverrideDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation has been updated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation cannot be updated </td><td>  -  </td></tr>
     </table>
     */
    public void overrideServiceOperation(String id, String operationName, OperationOverrideDTO operationOverrideDTO) throws ApiException {
        overrideServiceOperationWithHttpInfo(id, operationName, operationOverrideDTO);
    }

    /**
     * Override Service Operation
     * 
     * @param id Unique identifier of Service to managed (required)
     * @param operationName Name of operation to update (required)
     * @param operationOverrideDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation has been updated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation cannot be updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> overrideServiceOperationWithHttpInfo(String id, String operationName, OperationOverrideDTO operationOverrideDTO) throws ApiException {
        okhttp3.Call localVarCall = overrideServiceOperationValidateBeforeCall(id, operationName, operationOverrideDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Override Service Operation (asynchronously)
     * 
     * @param id Unique identifier of Service to managed (required)
     * @param operationName Name of operation to update (required)
     * @param operationOverrideDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation has been updated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation cannot be updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overrideServiceOperationAsync(String id, String operationName, OperationOverrideDTO operationOverrideDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = overrideServiceOperationValidateBeforeCall(id, operationName, operationOverrideDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchServices
     * @param queryMap Map of criterion. Key can be simply &#39;name&#39; with value as the searched string. You can also search by label using keys like &#39;labels.x&#39; where &#39;x&#39; is the label and value the label value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found Services (filtered according search criteria) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchServicesCall(Map<String, String> queryMap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryMap != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryMap", queryMap));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchServicesValidateBeforeCall(Map<String, String> queryMap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queryMap' is set
        if (queryMap == null) {
            throw new ApiException("Missing the required parameter 'queryMap' when calling searchServices(Async)");
        }

        return searchServicesCall(queryMap, _callback);

    }

    /**
     * Search for Services and APIs
     * 
     * @param queryMap Map of criterion. Key can be simply &#39;name&#39; with value as the searched string. You can also search by label using keys like &#39;labels.x&#39; where &#39;x&#39; is the label and value the label value (required)
     * @return List&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found Services (filtered according search criteria) </td><td>  -  </td></tr>
     </table>
     */
    public List<Service> searchServices(Map<String, String> queryMap) throws ApiException {
        ApiResponse<List<Service>> localVarResp = searchServicesWithHttpInfo(queryMap);
        return localVarResp.getData();
    }

    /**
     * Search for Services and APIs
     * 
     * @param queryMap Map of criterion. Key can be simply &#39;name&#39; with value as the searched string. You can also search by label using keys like &#39;labels.x&#39; where &#39;x&#39; is the label and value the label value (required)
     * @return ApiResponse&lt;List&lt;Service&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found Services (filtered according search criteria) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Service>> searchServicesWithHttpInfo(Map<String, String> queryMap) throws ApiException {
        okhttp3.Call localVarCall = searchServicesValidateBeforeCall(queryMap, null);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for Services and APIs (asynchronously)
     * 
     * @param queryMap Map of criterion. Key can be simply &#39;name&#39; with value as the searched string. You can also search by label using keys like &#39;labels.x&#39; where &#39;x&#39; is the label and value the label value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found Services (filtered according search criteria) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchServicesAsync(Map<String, String> queryMap, final ApiCallback<List<Service>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchServicesValidateBeforeCall(queryMap, _callback);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServiceMetadata
     * @param id Unique identifier of Service to managed (required)
     * @param metadata  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service metadata has been updated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Update of metadata failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceMetadataCall(String id, Metadata metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/services/{id}/metadata"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceMetadataValidateBeforeCall(String id, Metadata metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateServiceMetadata(Async)");
        }

        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling updateServiceMetadata(Async)");
        }

        return updateServiceMetadataCall(id, metadata, _callback);

    }

    /**
     * Update Service Metadata
     * 
     * @param id Unique identifier of Service to managed (required)
     * @param metadata  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service metadata has been updated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Update of metadata failed </td><td>  -  </td></tr>
     </table>
     */
    public void updateServiceMetadata(String id, Metadata metadata) throws ApiException {
        updateServiceMetadataWithHttpInfo(id, metadata);
    }

    /**
     * Update Service Metadata
     * 
     * @param id Unique identifier of Service to managed (required)
     * @param metadata  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service metadata has been updated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Update of metadata failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateServiceMetadataWithHttpInfo(String id, Metadata metadata) throws ApiException {
        okhttp3.Call localVarCall = updateServiceMetadataValidateBeforeCall(id, metadata, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Service Metadata (asynchronously)
     * 
     * @param id Unique identifier of Service to managed (required)
     * @param metadata  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service metadata has been updated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Update of metadata failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceMetadataAsync(String id, Metadata metadata, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceMetadataValidateBeforeCall(id, metadata, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
