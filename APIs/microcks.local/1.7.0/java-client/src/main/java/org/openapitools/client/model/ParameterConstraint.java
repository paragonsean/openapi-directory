/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Companion object for Operation that may be used to express constraints on request parameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:29.619783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParameterConstraint {
  /**
   * Parameter location
   */
  @JsonAdapter(InEnum.Adapter.class)
  public enum InEnum {
    PATH("path"),
    
    QUERY("query"),
    
    HEADER("header");

    private String value;

    InEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InEnum fromValue(String value) {
      for (InEnum b : InEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IN = "in";
  @SerializedName(SERIALIZED_NAME_IN)
  private InEnum in;

  public static final String SERIALIZED_NAME_MUST_MATCH_REGEXP = "mustMatchRegexp";
  @SerializedName(SERIALIZED_NAME_MUST_MATCH_REGEXP)
  private String mustMatchRegexp;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECOPY = "recopy";
  @SerializedName(SERIALIZED_NAME_RECOPY)
  private Boolean recopy;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public ParameterConstraint() {
  }

  public ParameterConstraint in(InEnum in) {
    this.in = in;
    return this;
  }

  /**
   * Parameter location
   * @return in
   */
  @javax.annotation.Nullable
  public InEnum getIn() {
    return in;
  }

  public void setIn(InEnum in) {
    this.in = in;
  }


  public ParameterConstraint mustMatchRegexp(String mustMatchRegexp) {
    this.mustMatchRegexp = mustMatchRegexp;
    return this;
  }

  /**
   * Whether it&#39;s a regular expression matching constraint
   * @return mustMatchRegexp
   */
  @javax.annotation.Nullable
  public String getMustMatchRegexp() {
    return mustMatchRegexp;
  }

  public void setMustMatchRegexp(String mustMatchRegexp) {
    this.mustMatchRegexp = mustMatchRegexp;
  }


  public ParameterConstraint name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Parameter name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ParameterConstraint recopy(Boolean recopy) {
    this.recopy = recopy;
    return this;
  }

  /**
   * Whether it&#39;s a recopy constraint
   * @return recopy
   */
  @javax.annotation.Nullable
  public Boolean getRecopy() {
    return recopy;
  }

  public void setRecopy(Boolean recopy) {
    this.recopy = recopy;
  }


  public ParameterConstraint required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Whether it&#39;s a required constraint
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterConstraint parameterConstraint = (ParameterConstraint) o;
    return Objects.equals(this.in, parameterConstraint.in) &&
        Objects.equals(this.mustMatchRegexp, parameterConstraint.mustMatchRegexp) &&
        Objects.equals(this.name, parameterConstraint.name) &&
        Objects.equals(this.recopy, parameterConstraint.recopy) &&
        Objects.equals(this.required, parameterConstraint.required);
  }

  @Override
  public int hashCode() {
    return Objects.hash(in, mustMatchRegexp, name, recopy, required);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterConstraint {\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    mustMatchRegexp: ").append(toIndentedString(mustMatchRegexp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recopy: ").append(toIndentedString(recopy)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("in");
    openapiFields.add("mustMatchRegexp");
    openapiFields.add("name");
    openapiFields.add("recopy");
    openapiFields.add("required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParameterConstraint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParameterConstraint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParameterConstraint is not found in the empty JSON string", ParameterConstraint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParameterConstraint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParameterConstraint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ParameterConstraint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("in") != null && !jsonObj.get("in").isJsonNull()) && !jsonObj.get("in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in").toString()));
      }
      // validate the optional field `in`
      if (jsonObj.get("in") != null && !jsonObj.get("in").isJsonNull()) {
        InEnum.validateJsonElement(jsonObj.get("in"));
      }
      if ((jsonObj.get("mustMatchRegexp") != null && !jsonObj.get("mustMatchRegexp").isJsonNull()) && !jsonObj.get("mustMatchRegexp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mustMatchRegexp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mustMatchRegexp").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParameterConstraint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParameterConstraint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParameterConstraint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParameterConstraint.class));

       return (TypeAdapter<T>) new TypeAdapter<ParameterConstraint>() {
           @Override
           public void write(JsonWriter out, ParameterConstraint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParameterConstraint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParameterConstraint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParameterConstraint
   * @throws IOException if the JSON string is invalid with respect to ParameterConstraint
   */
  public static ParameterConstraint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParameterConstraint.class);
  }

  /**
   * Convert an instance of ParameterConstraint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

