/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.HeaderDTO;
import org.openapitools.client.model.TestRunnerType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Test request is a minimalist wrapper for requesting the launch of a new test
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:29.619783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestRequest {
  public static final String SERIALIZED_NAME_FILTERED_OPERATIONS = "filteredOperations";
  @SerializedName(SERIALIZED_NAME_FILTERED_OPERATIONS)
  private List<String> filteredOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATION_HEADERS = "operationHeaders";
  @SerializedName(SERIALIZED_NAME_OPERATION_HEADERS)
  private Map<String, List<HeaderDTO>> operationHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_RUNNER_TYPE = "runnerType";
  @SerializedName(SERIALIZED_NAME_RUNNER_TYPE)
  private TestRunnerType runnerType;

  public static final String SERIALIZED_NAME_SECRET_NAME = "secretName";
  @SerializedName(SERIALIZED_NAME_SECRET_NAME)
  private String secretName;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_TEST_ENDPOINT = "testEndpoint";
  @SerializedName(SERIALIZED_NAME_TEST_ENDPOINT)
  private String testEndpoint;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public TestRequest() {
  }

  public TestRequest filteredOperations(List<String> filteredOperations) {
    this.filteredOperations = filteredOperations;
    return this;
  }

  public TestRequest addFilteredOperationsItem(String filteredOperationsItem) {
    if (this.filteredOperations == null) {
      this.filteredOperations = new ArrayList<>();
    }
    this.filteredOperations.add(filteredOperationsItem);
    return this;
  }

  /**
   * A restriction on service operations to test
   * @return filteredOperations
   */
  @javax.annotation.Nullable
  public List<String> getFilteredOperations() {
    return filteredOperations;
  }

  public void setFilteredOperations(List<String> filteredOperations) {
    this.filteredOperations = filteredOperations;
  }


  public TestRequest operationHeaders(Map<String, List<HeaderDTO>> operationHeaders) {
    this.operationHeaders = operationHeaders;
    return this;
  }

  public TestRequest putOperationHeadersItem(String key, List<HeaderDTO> operationHeadersItem) {
    if (this.operationHeaders == null) {
      this.operationHeaders = new HashMap<>();
    }
    this.operationHeaders.put(key, operationHeadersItem);
    return this;
  }

  /**
   * Specification of additional headers for a Service/API operations. Keys are operation name or \&quot;globals\&quot; (if header applies to all), values are Header objects DTO.
   * @return operationHeaders
   */
  @javax.annotation.Nullable
  public Map<String, List<HeaderDTO>> getOperationHeaders() {
    return operationHeaders;
  }

  public void setOperationHeaders(Map<String, List<HeaderDTO>> operationHeaders) {
    this.operationHeaders = operationHeaders;
  }


  public TestRequest runnerType(TestRunnerType runnerType) {
    this.runnerType = runnerType;
    return this;
  }

  /**
   * Get runnerType
   * @return runnerType
   */
  @javax.annotation.Nonnull
  public TestRunnerType getRunnerType() {
    return runnerType;
  }

  public void setRunnerType(TestRunnerType runnerType) {
    this.runnerType = runnerType;
  }


  public TestRequest secretName(String secretName) {
    this.secretName = secretName;
    return this;
  }

  /**
   * The name of Secret to use for connecting the test endpoint
   * @return secretName
   */
  @javax.annotation.Nullable
  public String getSecretName() {
    return secretName;
  }

  public void setSecretName(String secretName) {
    this.secretName = secretName;
  }


  public TestRequest serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Unique identifier of service to test
   * @return serviceId
   */
  @javax.annotation.Nonnull
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public TestRequest testEndpoint(String testEndpoint) {
    this.testEndpoint = testEndpoint;
    return this;
  }

  /**
   * Endpoint to test for this service
   * @return testEndpoint
   */
  @javax.annotation.Nonnull
  public String getTestEndpoint() {
    return testEndpoint;
  }

  public void setTestEndpoint(String testEndpoint) {
    this.testEndpoint = testEndpoint;
  }


  public TestRequest timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * The maximum time (in milliseconds) to wait for this test ends
   * @return timeout
   */
  @javax.annotation.Nonnull
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRequest testRequest = (TestRequest) o;
    return Objects.equals(this.filteredOperations, testRequest.filteredOperations) &&
        Objects.equals(this.operationHeaders, testRequest.operationHeaders) &&
        Objects.equals(this.runnerType, testRequest.runnerType) &&
        Objects.equals(this.secretName, testRequest.secretName) &&
        Objects.equals(this.serviceId, testRequest.serviceId) &&
        Objects.equals(this.testEndpoint, testRequest.testEndpoint) &&
        Objects.equals(this.timeout, testRequest.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filteredOperations, operationHeaders, runnerType, secretName, serviceId, testEndpoint, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRequest {\n");
    sb.append("    filteredOperations: ").append(toIndentedString(filteredOperations)).append("\n");
    sb.append("    operationHeaders: ").append(toIndentedString(operationHeaders)).append("\n");
    sb.append("    runnerType: ").append(toIndentedString(runnerType)).append("\n");
    sb.append("    secretName: ").append(toIndentedString(secretName)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    testEndpoint: ").append(toIndentedString(testEndpoint)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filteredOperations");
    openapiFields.add("operationHeaders");
    openapiFields.add("runnerType");
    openapiFields.add("secretName");
    openapiFields.add("serviceId");
    openapiFields.add("testEndpoint");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("runnerType");
    openapiRequiredFields.add("serviceId");
    openapiRequiredFields.add("testEndpoint");
    openapiRequiredFields.add("timeout");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestRequest is not found in the empty JSON string", TestRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("filteredOperations") != null && !jsonObj.get("filteredOperations").isJsonNull() && !jsonObj.get("filteredOperations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filteredOperations` to be an array in the JSON string but got `%s`", jsonObj.get("filteredOperations").toString()));
      }
      // validate the required field `runnerType`
      TestRunnerType.validateJsonElement(jsonObj.get("runnerType"));
      if ((jsonObj.get("secretName") != null && !jsonObj.get("secretName").isJsonNull()) && !jsonObj.get("secretName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretName").toString()));
      }
      if (!jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if (!jsonObj.get("testEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testEndpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TestRequest>() {
           @Override
           public void write(JsonWriter out, TestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestRequest
   * @throws IOException if the JSON string is invalid with respect to TestRequest
   */
  public static TestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestRequest.class);
  }

  /**
   * Convert an instance of TestRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

