/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Protocol binding details for asynchronous operations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:29.619783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Binding {
  public static final String SERIALIZED_NAME_DESTINATION_NAME = "destinationName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_DESTINATION_TYPE = "destinationType";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE)
  private String destinationType;

  public static final String SERIALIZED_NAME_KEY_TYPE = "keyType";
  @SerializedName(SERIALIZED_NAME_KEY_TYPE)
  private String keyType;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_PERSISTENT = "persistent";
  @SerializedName(SERIALIZED_NAME_PERSISTENT)
  private Boolean persistent;

  public static final String SERIALIZED_NAME_QO_S = "qoS";
  @SerializedName(SERIALIZED_NAME_QO_S)
  private String qoS;

  /**
   * Protocol binding identifier
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    KAFKA("KAFKA"),
    
    MQTT("MQTT"),
    
    WS("WS"),
    
    AMQP("AMQP"),
    
    NATS("NATS"),
    
    GOOGLEPUBSUB("GOOGLEPUBSUB");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Binding() {
  }

  public Binding destinationName(String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

  /**
   * Name of destination for asynchronous messages of this operation
   * @return destinationName
   */
  @javax.annotation.Nonnull
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public Binding destinationType(String destinationType) {
    this.destinationType = destinationType;
    return this;
  }

  /**
   * Type of destination for asynchronous messages of this operation
   * @return destinationType
   */
  @javax.annotation.Nullable
  public String getDestinationType() {
    return destinationType;
  }

  public void setDestinationType(String destinationType) {
    this.destinationType = destinationType;
  }


  public Binding keyType(String keyType) {
    this.keyType = keyType;
    return this;
  }

  /**
   * Type of key for Kafka messages
   * @return keyType
   */
  @javax.annotation.Nullable
  public String getKeyType() {
    return keyType;
  }

  public void setKeyType(String keyType) {
    this.keyType = keyType;
  }


  public Binding method(String method) {
    this.method = method;
    return this;
  }

  /**
   * HTTP method for WebSocket binding
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public Binding persistent(Boolean persistent) {
    this.persistent = persistent;
    return this;
  }

  /**
   * Persistent attribute for MQTT binding
   * @return persistent
   */
  @javax.annotation.Nullable
  public Boolean getPersistent() {
    return persistent;
  }

  public void setPersistent(Boolean persistent) {
    this.persistent = persistent;
  }


  public Binding qoS(String qoS) {
    this.qoS = qoS;
    return this;
  }

  /**
   * Quality of Service attribute for MQTT binding
   * @return qoS
   */
  @javax.annotation.Nullable
  public String getQoS() {
    return qoS;
  }

  public void setQoS(String qoS) {
    this.qoS = qoS;
  }


  public Binding type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Protocol binding identifier
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Binding binding = (Binding) o;
    return Objects.equals(this.destinationName, binding.destinationName) &&
        Objects.equals(this.destinationType, binding.destinationType) &&
        Objects.equals(this.keyType, binding.keyType) &&
        Objects.equals(this.method, binding.method) &&
        Objects.equals(this.persistent, binding.persistent) &&
        Objects.equals(this.qoS, binding.qoS) &&
        Objects.equals(this.type, binding.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationName, destinationType, keyType, method, persistent, qoS, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Binding {\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    destinationType: ").append(toIndentedString(destinationType)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    persistent: ").append(toIndentedString(persistent)).append("\n");
    sb.append("    qoS: ").append(toIndentedString(qoS)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationName");
    openapiFields.add("destinationType");
    openapiFields.add("keyType");
    openapiFields.add("method");
    openapiFields.add("persistent");
    openapiFields.add("qoS");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationName");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Binding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Binding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Binding is not found in the empty JSON string", Binding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Binding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Binding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Binding.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("destinationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationName").toString()));
      }
      if ((jsonObj.get("destinationType") != null && !jsonObj.get("destinationType").isJsonNull()) && !jsonObj.get("destinationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationType").toString()));
      }
      if ((jsonObj.get("keyType") != null && !jsonObj.get("keyType").isJsonNull()) && !jsonObj.get("keyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyType").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("qoS") != null && !jsonObj.get("qoS").isJsonNull()) && !jsonObj.get("qoS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qoS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qoS").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Binding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Binding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Binding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Binding.class));

       return (TypeAdapter<T>) new TypeAdapter<Binding>() {
           @Override
           public void write(JsonWriter out, Binding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Binding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Binding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Binding
   * @throws IOException if the JSON string is invalid with respect to Binding
   */
  public static Binding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Binding.class);
  }

  /**
   * Convert an instance of Binding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

