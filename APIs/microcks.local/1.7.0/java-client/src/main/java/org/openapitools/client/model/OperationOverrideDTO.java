/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ParameterConstraint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data Transfer object for grouping the mutable properties of an Operation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:29.619783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationOverrideDTO {
  public static final String SERIALIZED_NAME_DEFAULT_DELAY = "defaultDelay";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DELAY)
  private Integer defaultDelay;

  public static final String SERIALIZED_NAME_DISPATCHER = "dispatcher";
  @SerializedName(SERIALIZED_NAME_DISPATCHER)
  private String dispatcher;

  public static final String SERIALIZED_NAME_DISPATCHER_RULES = "dispatcherRules";
  @SerializedName(SERIALIZED_NAME_DISPATCHER_RULES)
  private String dispatcherRules;

  public static final String SERIALIZED_NAME_PARAMETER_CONSTRAINTS = "parameterConstraints";
  @SerializedName(SERIALIZED_NAME_PARAMETER_CONSTRAINTS)
  private List<ParameterConstraint> parameterConstraints = new ArrayList<>();

  public OperationOverrideDTO() {
  }

  public OperationOverrideDTO defaultDelay(Integer defaultDelay) {
    this.defaultDelay = defaultDelay;
    return this;
  }

  /**
   * Default delay in milliseconds to apply to mock responses on this operation
   * @return defaultDelay
   */
  @javax.annotation.Nullable
  public Integer getDefaultDelay() {
    return defaultDelay;
  }

  public void setDefaultDelay(Integer defaultDelay) {
    this.defaultDelay = defaultDelay;
  }


  public OperationOverrideDTO dispatcher(String dispatcher) {
    this.dispatcher = dispatcher;
    return this;
  }

  /**
   * Type of dispatcher to apply for this operation
   * @return dispatcher
   */
  @javax.annotation.Nullable
  public String getDispatcher() {
    return dispatcher;
  }

  public void setDispatcher(String dispatcher) {
    this.dispatcher = dispatcher;
  }


  public OperationOverrideDTO dispatcherRules(String dispatcherRules) {
    this.dispatcherRules = dispatcherRules;
    return this;
  }

  /**
   * Rules of dispatcher for this operation
   * @return dispatcherRules
   */
  @javax.annotation.Nullable
  public String getDispatcherRules() {
    return dispatcherRules;
  }

  public void setDispatcherRules(String dispatcherRules) {
    this.dispatcherRules = dispatcherRules;
  }


  public OperationOverrideDTO parameterConstraints(List<ParameterConstraint> parameterConstraints) {
    this.parameterConstraints = parameterConstraints;
    return this;
  }

  public OperationOverrideDTO addParameterConstraintsItem(ParameterConstraint parameterConstraintsItem) {
    if (this.parameterConstraints == null) {
      this.parameterConstraints = new ArrayList<>();
    }
    this.parameterConstraints.add(parameterConstraintsItem);
    return this;
  }

  /**
   * Constraints that may apply to incoming parameters on this operation
   * @return parameterConstraints
   */
  @javax.annotation.Nullable
  public List<ParameterConstraint> getParameterConstraints() {
    return parameterConstraints;
  }

  public void setParameterConstraints(List<ParameterConstraint> parameterConstraints) {
    this.parameterConstraints = parameterConstraints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationOverrideDTO operationOverrideDTO = (OperationOverrideDTO) o;
    return Objects.equals(this.defaultDelay, operationOverrideDTO.defaultDelay) &&
        Objects.equals(this.dispatcher, operationOverrideDTO.dispatcher) &&
        Objects.equals(this.dispatcherRules, operationOverrideDTO.dispatcherRules) &&
        Objects.equals(this.parameterConstraints, operationOverrideDTO.parameterConstraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultDelay, dispatcher, dispatcherRules, parameterConstraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationOverrideDTO {\n");
    sb.append("    defaultDelay: ").append(toIndentedString(defaultDelay)).append("\n");
    sb.append("    dispatcher: ").append(toIndentedString(dispatcher)).append("\n");
    sb.append("    dispatcherRules: ").append(toIndentedString(dispatcherRules)).append("\n");
    sb.append("    parameterConstraints: ").append(toIndentedString(parameterConstraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultDelay");
    openapiFields.add("dispatcher");
    openapiFields.add("dispatcherRules");
    openapiFields.add("parameterConstraints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationOverrideDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationOverrideDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationOverrideDTO is not found in the empty JSON string", OperationOverrideDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationOverrideDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationOverrideDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dispatcher") != null && !jsonObj.get("dispatcher").isJsonNull()) && !jsonObj.get("dispatcher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispatcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispatcher").toString()));
      }
      if ((jsonObj.get("dispatcherRules") != null && !jsonObj.get("dispatcherRules").isJsonNull()) && !jsonObj.get("dispatcherRules").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispatcherRules` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispatcherRules").toString()));
      }
      if (jsonObj.get("parameterConstraints") != null && !jsonObj.get("parameterConstraints").isJsonNull()) {
        JsonArray jsonArrayparameterConstraints = jsonObj.getAsJsonArray("parameterConstraints");
        if (jsonArrayparameterConstraints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameterConstraints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameterConstraints` to be an array in the JSON string but got `%s`", jsonObj.get("parameterConstraints").toString()));
          }

          // validate the optional field `parameterConstraints` (array)
          for (int i = 0; i < jsonArrayparameterConstraints.size(); i++) {
            ParameterConstraint.validateJsonElement(jsonArrayparameterConstraints.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationOverrideDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationOverrideDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationOverrideDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationOverrideDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationOverrideDTO>() {
           @Override
           public void write(JsonWriter out, OperationOverrideDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationOverrideDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationOverrideDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationOverrideDTO
   * @throws IOException if the JSON string is invalid with respect to OperationOverrideDTO
   */
  public static OperationOverrideDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationOverrideDTO.class);
  }

  /**
   * Convert an instance of OperationOverrideDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

