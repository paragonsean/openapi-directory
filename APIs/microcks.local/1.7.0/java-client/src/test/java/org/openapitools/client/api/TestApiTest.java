/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Counter;
import org.openapitools.client.model.RequestResponsePair;
import org.openapitools.client.model.TestCaseResult;
import org.openapitools.client.model.TestCaseReturnDTO;
import org.openapitools.client.model.TestRequest;
import org.openapitools.client.model.TestResult;
import org.openapitools.client.model.UnidirectionalEvent;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestApi
 */
@Disabled
public class TestApiTest {

    private final TestApi api = new TestApi();

    /**
     * Create a new Test
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTestTest() throws ApiException {
        TestRequest testRequest = null;
        TestResult response = api.createTest(testRequest);
        // TODO: test validations
    }

    /**
     * Get events for TestCase
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsByTestCaseTest() throws ApiException {
        String id = null;
        String testCaseId = null;
        List<UnidirectionalEvent> response = api.getEventsByTestCase(id, testCaseId);
        // TODO: test validations
    }

    /**
     * Get messages for TestCase
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessagesByTestCaseTest() throws ApiException {
        String id = null;
        String testCaseId = null;
        List<RequestResponsePair> response = api.getMessagesByTestCase(id, testCaseId);
        // TODO: test validations
    }

    /**
     * Get TestResult
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestResultTest() throws ApiException {
        String id = null;
        TestResult response = api.getTestResult(id);
        // TODO: test validations
    }

    /**
     * Get TestResults by Service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestResultsByServiceTest() throws ApiException {
        String serviceId = null;
        List<TestResult> response = api.getTestResultsByService(serviceId);
        // TODO: test validations
    }

    /**
     * Get the TestResults for Service counter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestResultsByServiceCounterTest() throws ApiException {
        String serviceId = null;
        Counter response = api.getTestResultsByServiceCounter(serviceId);
        // TODO: test validations
    }

    /**
     * Report and create a new TestCaseResult
     *
     * Report a TestCaseResult (typically used by a Test runner)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportTestCaseResultTest() throws ApiException {
        String id = null;
        TestCaseReturnDTO testCaseReturnDTO = null;
        TestCaseResult response = api.reportTestCaseResult(id, testCaseReturnDTO);
        // TODO: test validations
    }

}
