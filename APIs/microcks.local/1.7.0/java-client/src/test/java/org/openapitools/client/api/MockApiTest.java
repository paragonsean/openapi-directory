/*
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Counter;
import java.io.File;
import org.openapitools.client.model.GetService200Response;
import org.openapitools.client.model.Metadata;
import org.openapitools.client.model.OperationOverrideDTO;
import org.openapitools.client.model.Service;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MockApi
 */
@Disabled
public class MockApiTest {

    private final MockApi api = new MockApi();

    /**
     * Delete Service
     *
     * Delete a Service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws ApiException {
        String id = null;
        api.deleteService(id);
        // TODO: test validations
    }

    /**
     * Export a snapshot
     *
     * Export a repostiory snapshot with requested services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSnapshotTest() throws ApiException {
        List<String> serviceIds = null;
        File response = api.exportSnapshot(serviceIds);
        // TODO: test validations
    }

    /**
     * Get Service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceTest() throws ApiException {
        String id = null;
        Boolean messages = null;
        GetService200Response response = api.getService(id, messages);
        // TODO: test validations
    }

    /**
     * Get Services and APIs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServicesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        Service response = api.getServices(page, size);
        // TODO: test validations
    }

    /**
     * Get the Services counter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServicesCounterTest() throws ApiException {
        Counter response = api.getServicesCounter();
        // TODO: test validations
    }

    /**
     * Get the already used labels for Services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServicesLabelsTest() throws ApiException {
        Map<String, List<String>> response = api.getServicesLabels();
        // TODO: test validations
    }

    /**
     * Import a snapshot
     *
     * Import a repository snapshot previsouly exported into Microcks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importSnapshotTest() throws ApiException {
        File _file = null;
        api.importSnapshot(_file);
        // TODO: test validations
    }

    /**
     * Override Service Operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overrideServiceOperationTest() throws ApiException {
        String id = null;
        String operationName = null;
        OperationOverrideDTO operationOverrideDTO = null;
        api.overrideServiceOperation(id, operationName, operationOverrideDTO);
        // TODO: test validations
    }

    /**
     * Search for Services and APIs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchServicesTest() throws ApiException {
        Map<String, String> queryMap = null;
        List<Service> response = api.searchServices(queryMap);
        // TODO: test validations
    }

    /**
     * Update Service Metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceMetadataTest() throws ApiException {
        String id = null;
        Metadata metadata = null;
        api.updateServiceMetadata(id, metadata);
        // TODO: test validations
    }

}
