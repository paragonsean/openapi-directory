/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MicrocksApiV17);
  }
}(this, function(expect, MicrocksApiV17) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FeaturesConfigAsyncApi', function() {
    it('should create an instance of FeaturesConfigAsyncApi', function() {
      // uncomment below and update the code to test FeaturesConfigAsyncApi
      //var instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
      //expect(instance).to.be.a(MicrocksApiV17.FeaturesConfigAsyncApi);
    });

    it('should have the property defaultBinding (base name: "default-binding")', function() {
      // uncomment below and update the code to test the property defaultBinding
      //var instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
      //expect(instance).to.be();
    });

    it('should have the property endpointAMQP (base name: "endpoint-AMQP")', function() {
      // uncomment below and update the code to test the property endpointAMQP
      //var instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
      //expect(instance).to.be();
    });

    it('should have the property endpointGOOGLEPUBSUB (base name: "endpoint-GOOGLEPUBSUB")', function() {
      // uncomment below and update the code to test the property endpointGOOGLEPUBSUB
      //var instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
      //expect(instance).to.be();
    });

    it('should have the property endpointKAFKA (base name: "endpoint-KAFKA")', function() {
      // uncomment below and update the code to test the property endpointKAFKA
      //var instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
      //expect(instance).to.be();
    });

    it('should have the property endpointMQTT (base name: "endpoint-MQTT")', function() {
      // uncomment below and update the code to test the property endpointMQTT
      //var instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
      //expect(instance).to.be();
    });

    it('should have the property endpointNATS (base name: "endpoint-NATS")', function() {
      // uncomment below and update the code to test the property endpointNATS
      //var instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
      //expect(instance).to.be();
    });

    it('should have the property endpointWS (base name: "endpoint-WS")', function() {
      // uncomment below and update the code to test the property endpointWS
      //var instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
      //expect(instance).to.be();
    });

    it('should have the property frequencies (base name: "frequencies")', function() {
      // uncomment below and update the code to test the property frequencies
      //var instance = new MicrocksApiV17.FeaturesConfigAsyncApi();
      //expect(instance).to.be();
    });

  });

}));
