/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MicrocksApiV17);
  }
}(this, function(expect, MicrocksApiV17) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MicrocksApiV17.ConfigApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConfigApi', function() {
    describe('createSecret', function() {
      it('should call createSecret successfully', function(done) {
        //uncomment below and update the code to test createSecret
        //instance.createSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSecret', function() {
      it('should call deleteSecret successfully', function(done) {
        //uncomment below and update the code to test deleteSecret
        //instance.deleteSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeaturesConfiguration', function() {
      it('should call getFeaturesConfiguration successfully', function(done) {
        //uncomment below and update the code to test getFeaturesConfiguration
        //instance.getFeaturesConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKeycloakConfig', function() {
      it('should call getKeycloakConfig successfully', function(done) {
        //uncomment below and update the code to test getKeycloakConfig
        //instance.getKeycloakConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecret', function() {
      it('should call getSecret successfully', function(done) {
        //uncomment below and update the code to test getSecret
        //instance.getSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecrets', function() {
      it('should call getSecrets successfully', function(done) {
        //uncomment below and update the code to test getSecrets
        //instance.getSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecretsCounter', function() {
      it('should call getSecretsCounter successfully', function(done) {
        //uncomment below and update the code to test getSecretsCounter
        //instance.getSecretsCounter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSecret', function() {
      it('should call updateSecret successfully', function(done) {
        //uncomment below and update the code to test updateSecret
        //instance.updateSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
