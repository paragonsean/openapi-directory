/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Counter from '../model/Counter';
import GetService200Response from '../model/GetService200Response';
import Metadata from '../model/Metadata';
import OperationOverrideDTO from '../model/OperationOverrideDTO';
import Service from '../model/Service';

/**
* Mock service.
* @module api/MockApi
* @version 1.7.0
*/
export default class MockApi {

    /**
    * Constructs a new MockApi. 
    * @alias module:api/MockApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback module:api/MockApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Service
     * Delete a Service
     * @param {String} id Unique identifier of Service to managed
     * @param {module:api/MockApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteService(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportSnapshot operation.
     * @callback module:api/MockApi~exportSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a snapshot
     * Export a repostiory snapshot with requested services
     * @param {Array.<String>} serviceIds List of service identifiers to export
     * @param {module:api/MockApi~exportSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportSnapshot(serviceIds, callback) {
      let postBody = null;
      // verify the required parameter 'serviceIds' is set
      if (serviceIds === undefined || serviceIds === null) {
        throw new Error("Missing the required parameter 'serviceIds' when calling exportSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'serviceIds': this.apiClient.buildCollectionParam(serviceIds, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getService operation.
     * @callback module:api/MockApi~getServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetService200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Service
     * @param {String} id Unique identifier of Service to managed
     * @param {Object} opts Optional parameters
     * @param {Boolean} [messages] Whether to include details on services messages into result. Default is false
     * @param {module:api/MockApi~getServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetService200Response}
     */
    getService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'messages': opts['messages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetService200Response;
      return this.apiClient.callApi(
        '/services/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServices operation.
     * @callback module:api/MockApi~getServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Services and APIs
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page of Services to retrieve (starts at and defaults to 0)
     * @param {Number} [size] Size of a page. Maximum number of Services to include in a response (defaults to 20)
     * @param {module:api/MockApi~getServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    getServices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServicesCounter operation.
     * @callback module:api/MockApi~getServicesCounterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Counter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Services counter
     * @param {module:api/MockApi~getServicesCounterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Counter}
     */
    getServicesCounter(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Counter;
      return this.apiClient.callApi(
        '/services/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServicesLabels operation.
     * @callback module:api/MockApi~getServicesLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Array}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the already used labels for Services
     * @param {module:api/MockApi~getServicesLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Array}>}
     */
    getServicesLabels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Array};
      return this.apiClient.callApi(
        '/services/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSnapshot operation.
     * @callback module:api/MockApi~importSnapshotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a snapshot
     * Import a repository snapshot previsouly exported into Microcks
     * @param {File} file The repository snapshot file
     * @param {module:api/MockApi~importSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importSnapshot(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling importSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the overrideServiceOperation operation.
     * @callback module:api/MockApi~overrideServiceOperationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Override Service Operation
     * @param {String} id Unique identifier of Service to managed
     * @param {String} operationName Name of operation to update
     * @param {module:model/OperationOverrideDTO} operationOverrideDTO 
     * @param {module:api/MockApi~overrideServiceOperationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    overrideServiceOperation(id, operationName, operationOverrideDTO, callback) {
      let postBody = operationOverrideDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling overrideServiceOperation");
      }
      // verify the required parameter 'operationName' is set
      if (operationName === undefined || operationName === null) {
        throw new Error("Missing the required parameter 'operationName' when calling overrideServiceOperation");
      }
      // verify the required parameter 'operationOverrideDTO' is set
      if (operationOverrideDTO === undefined || operationOverrideDTO === null) {
        throw new Error("Missing the required parameter 'operationOverrideDTO' when calling overrideServiceOperation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'operationName': operationName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/{id}/operation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchServices operation.
     * @callback module:api/MockApi~searchServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Service>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for Services and APIs
     * @param {Object.<String, {String: String}>} queryMap Map of criterion. Key can be simply 'name' with value as the searched string. You can also search by label using keys like 'labels.x' where 'x' is the label and value the label value
     * @param {module:api/MockApi~searchServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Service>}
     */
    searchServices(queryMap, callback) {
      let postBody = null;
      // verify the required parameter 'queryMap' is set
      if (queryMap === undefined || queryMap === null) {
        throw new Error("Missing the required parameter 'queryMap' when calling searchServices");
      }

      let pathParams = {
      };
      let queryParams = {
        'queryMap': queryMap
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Service];
      return this.apiClient.callApi(
        '/services/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceMetadata operation.
     * @callback module:api/MockApi~updateServiceMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Service Metadata
     * @param {String} id Unique identifier of Service to managed
     * @param {module:model/Metadata} metadata 
     * @param {module:api/MockApi~updateServiceMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateServiceMetadata(id, metadata, callback) {
      let postBody = metadata;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateServiceMetadata");
      }
      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling updateServiceMetadata");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/{id}/metadata', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
