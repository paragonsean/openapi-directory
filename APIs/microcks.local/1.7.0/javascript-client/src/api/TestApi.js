/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Counter from '../model/Counter';
import RequestResponsePair from '../model/RequestResponsePair';
import TestCaseResult from '../model/TestCaseResult';
import TestCaseReturnDTO from '../model/TestCaseReturnDTO';
import TestRequest from '../model/TestRequest';
import TestResult from '../model/TestResult';
import UnidirectionalEvent from '../model/UnidirectionalEvent';

/**
* Test service.
* @module api/TestApi
* @version 1.7.0
*/
export default class TestApi {

    /**
    * Constructs a new TestApi. 
    * @alias module:api/TestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTest operation.
     * @callback module:api/TestApi~createTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Test
     * @param {module:model/TestRequest} testRequest 
     * @param {module:api/TestApi~createTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestResult}
     */
    createTest(testRequest, callback) {
      let postBody = testRequest;
      // verify the required parameter 'testRequest' is set
      if (testRequest === undefined || testRequest === null) {
        throw new Error("Missing the required parameter 'testRequest' when calling createTest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestResult;
      return this.apiClient.callApi(
        '/tests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsByTestCase operation.
     * @callback module:api/TestApi~getEventsByTestCaseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UnidirectionalEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events for TestCase
     * @param {String} id Unique identifier of TestResult to manage
     * @param {String} testCaseId Unique identifier of TetsCaseResult to manage
     * @param {module:api/TestApi~getEventsByTestCaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UnidirectionalEvent>}
     */
    getEventsByTestCase(id, testCaseId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEventsByTestCase");
      }
      // verify the required parameter 'testCaseId' is set
      if (testCaseId === undefined || testCaseId === null) {
        throw new Error("Missing the required parameter 'testCaseId' when calling getEventsByTestCase");
      }

      let pathParams = {
        'id': id,
        'testCaseId': testCaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UnidirectionalEvent];
      return this.apiClient.callApi(
        '/tests/{id}/events/{testCaseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessagesByTestCase operation.
     * @callback module:api/TestApi~getMessagesByTestCaseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RequestResponsePair>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get messages for TestCase
     * @param {String} id Unique identifier of TestResult to manage
     * @param {String} testCaseId Unique identifier of TetsCaseResult to manage
     * @param {module:api/TestApi~getMessagesByTestCaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RequestResponsePair>}
     */
    getMessagesByTestCase(id, testCaseId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMessagesByTestCase");
      }
      // verify the required parameter 'testCaseId' is set
      if (testCaseId === undefined || testCaseId === null) {
        throw new Error("Missing the required parameter 'testCaseId' when calling getMessagesByTestCase");
      }

      let pathParams = {
        'id': id,
        'testCaseId': testCaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RequestResponsePair];
      return this.apiClient.callApi(
        '/tests/{id}/messages/{testCaseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestResult operation.
     * @callback module:api/TestApi~getTestResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestResult
     * 
     * @param {String} id Unique identifier of TestResult to manage
     * @param {module:api/TestApi~getTestResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestResult}
     */
    getTestResult(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestResult");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestResult;
      return this.apiClient.callApi(
        '/tests/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestResultsByService operation.
     * @callback module:api/TestApi~getTestResultsByServiceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestResults by Service
     * @param {String} serviceId Unique identifier of Service to manage TestResults for
     * @param {module:api/TestApi~getTestResultsByServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestResult>}
     */
    getTestResultsByService(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getTestResultsByService");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestResult];
      return this.apiClient.callApi(
        '/tests/service/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestResultsByServiceCounter operation.
     * @callback module:api/TestApi~getTestResultsByServiceCounterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Counter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the TestResults for Service counter
     * @param {String} serviceId Unique identifier of Service to manage TestResults for
     * @param {module:api/TestApi~getTestResultsByServiceCounterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Counter}
     */
    getTestResultsByServiceCounter(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getTestResultsByServiceCounter");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Counter;
      return this.apiClient.callApi(
        '/tests/service/{serviceId}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportTestCaseResult operation.
     * @callback module:api/TestApi~reportTestCaseResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestCaseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report and create a new TestCaseResult
     * Report a TestCaseResult (typically used by a Test runner)
     * @param {String} id Unique identifier of TestResult to manage
     * @param {module:model/TestCaseReturnDTO} testCaseReturnDTO TestCase return wrapper object
     * @param {module:api/TestApi~reportTestCaseResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestCaseResult}
     */
    reportTestCaseResult(id, testCaseReturnDTO, callback) {
      let postBody = testCaseReturnDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportTestCaseResult");
      }
      // verify the required parameter 'testCaseReturnDTO' is set
      if (testCaseReturnDTO === undefined || testCaseReturnDTO === null) {
        throw new Error("Missing the required parameter 'testCaseReturnDTO' when calling reportTestCaseResult");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestCaseResult;
      return this.apiClient.callApi(
        '/tests/{id}/testCaseResult', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
