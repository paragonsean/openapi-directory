/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Counter from '../model/Counter';
import KeycloakConfig from '../model/KeycloakConfig';
import Secret from '../model/Secret';

/**
* Config service.
* @module api/ConfigApi
* @version 1.7.0
*/
export default class ConfigApi {

    /**
    * Constructs a new ConfigApi. 
    * @alias module:api/ConfigApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSecret operation.
     * @callback module:api/ConfigApi~createSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Secret
     * @param {Object} opts Optional parameters
     * @param {module:model/Secret} [secret] 
     * @param {module:api/ConfigApi~createSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    createSecret(opts, callback) {
      opts = opts || {};
      let postBody = opts['secret'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/secrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSecret operation.
     * @callback module:api/ConfigApi~deleteSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Secret
     * Delete a Secret
     * @param {String} id Unique identifier of Secret to manage
     * @param {module:api/ConfigApi~deleteSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSecret(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSecret");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/secrets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeaturesConfiguration operation.
     * @callback module:api/ConfigApi~getFeaturesConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get features configuration
     * @param {module:api/ConfigApi~getFeaturesConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFeaturesConfiguration(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/features/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeycloakConfig operation.
     * @callback module:api/ConfigApi~getKeycloakConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeycloakConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authentification configuration
     * @param {module:api/ConfigApi~getKeycloakConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeycloakConfig}
     */
    getKeycloakConfig(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeycloakConfig;
      return this.apiClient.callApi(
        '/keycloak/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecret operation.
     * @callback module:api/ConfigApi~getSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Secret
     * Retrieve a Secret
     * @param {String} id Unique identifier of Secret to manage
     * @param {module:api/ConfigApi~getSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    getSecret(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSecret");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/secrets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecrets operation.
     * @callback module:api/ConfigApi~getSecretsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Secret>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Secrets
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page of Secrets to retrieve (starts at and defaults to 0)
     * @param {Number} [size] Size of a page. Maximum number of Secrets to include in a response (defaults to 20)
     * @param {module:api/ConfigApi~getSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Secret>}
     */
    getSecrets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Secret];
      return this.apiClient.callApi(
        '/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecretsCounter operation.
     * @callback module:api/ConfigApi~getSecretsCounterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Counter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Secrets counter
     * @param {module:api/ConfigApi~getSecretsCounterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Counter}
     */
    getSecretsCounter(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Counter;
      return this.apiClient.callApi(
        '/secrets/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecret operation.
     * @callback module:api/ConfigApi~updateSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Secret
     * Update a Secret
     * @param {String} id Unique identifier of Secret to manage
     * @param {module:api/ConfigApi~updateSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSecret(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSecret");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/secrets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
