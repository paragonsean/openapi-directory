/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Counter from '../model/Counter';
import ImportJob from '../model/ImportJob';

/**
* Job service.
* @module api/JobApi
* @version 1.7.0
*/
export default class JobApi {

    /**
    * Constructs a new JobApi. 
    * @alias module:api/JobApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateImportJob operation.
     * @callback module:api/JobApi~activateImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate an ImportJob
     * Make an ImportJob active, so that it is executed
     * @param {String} id Unique identifier of ImportJob to manage
     * @param {module:api/JobApi~activateImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportJob}
     */
    activateImportJob(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling activateImportJob");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportJob;
      return this.apiClient.callApi(
        '/jobs/{id}/activate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImportJob operation.
     * @callback module:api/JobApi~createImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create ImportJob
     * Create a new ImportJob
     * @param {module:model/ImportJob} importJob 
     * @param {module:api/JobApi~createImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportJob}
     */
    createImportJob(importJob, callback) {
      let postBody = importJob;
      // verify the required parameter 'importJob' is set
      if (importJob === undefined || importJob === null) {
        throw new Error("Missing the required parameter 'importJob' when calling createImportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportJob;
      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImportJob operation.
     * @callback module:api/JobApi~deleteImportJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete ImportJob
     * Delete an ImportJob
     * @param {String} id Unique identifier of ImportJob to manage
     * @param {module:api/JobApi~deleteImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteImportJob(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImportJob");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImportJobCounter operation.
     * @callback module:api/JobApi~getImportJobCounterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Counter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the ImportJobs counter
     * @param {module:api/JobApi~getImportJobCounterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Counter}
     */
    getImportJobCounter(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Counter;
      return this.apiClient.callApi(
        '/jobs/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImportJobs operation.
     * @callback module:api/JobApi~getImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImportJob>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ImportJobs
     * Retrieve a list of ImportJobs
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page of ImportJobs to retrieve (starts at and defaults to 0)
     * @param {Number} [size] Size of a page. Maximum number of ImportJobs to include in a response (defaults to 20)
     * @param {String} [name] Name like criterion for query
     * @param {module:api/JobApi~getImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImportJob>}
     */
    getImportJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ImportJob];
      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsIdGet operation.
     * @callback module:api/JobApi~jobsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ImportJob
     * Retrieve an ImportJob using its identifier
     * @param {String} id Unique identifier of ImportJob to manage
     * @param {module:api/JobApi~jobsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportJob}
     */
    jobsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling jobsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportJob;
      return this.apiClient.callApi(
        '/jobs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsIdPost operation.
     * @callback module:api/JobApi~jobsIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ImportJob
     * Update an ImportJob
     * @param {String} id Unique identifier of ImportJob to manage
     * @param {module:model/ImportJob} importJob 
     * @param {module:api/JobApi~jobsIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportJob}
     */
    jobsIdPost(id, importJob, callback) {
      let postBody = importJob;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling jobsIdPost");
      }
      // verify the required parameter 'importJob' is set
      if (importJob === undefined || importJob === null) {
        throw new Error("Missing the required parameter 'importJob' when calling jobsIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportJob;
      return this.apiClient.callApi(
        '/jobs/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startImportJob operation.
     * @callback module:api/JobApi~startImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start an ImportJob
     * Starting an ImportJob forces it to immediatly import mock definitions
     * @param {String} id Unique identifier of ImportJob to manage
     * @param {module:api/JobApi~startImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportJob}
     */
    startImportJob(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startImportJob");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportJob;
      return this.apiClient.callApi(
        '/jobs/{id}/start', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopImportJob operation.
     * @callback module:api/JobApi~stopImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop an ImportJob
     * Stopping an ImportJob desactivate it, so that it won't execute at next schedule
     * @param {String} id Unique identifier of ImportJob to manage
     * @param {module:api/JobApi~stopImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportJob}
     */
    stopImportJob(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopImportJob");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportJob;
      return this.apiClient.callApi(
        '/jobs/{id}/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadArtifact operation.
     * @callback module:api/JobApi~uploadArtifactCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an artifact
     * Uploads an artifact to be imported by Microcks.
     * @param {Boolean} mainArtifact Flag telling if this should be considered as primary or secondary artifact. Default to 'true'
     * @param {File} file The artifact to upload
     * @param {module:api/JobApi~uploadArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    uploadArtifact(mainArtifact, file, callback) {
      let postBody = null;
      // verify the required parameter 'mainArtifact' is set
      if (mainArtifact === undefined || mainArtifact === null) {
        throw new Error("Missing the required parameter 'mainArtifact' when calling uploadArtifact");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
        'mainArtifact': mainArtifact
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['jwt-bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/artifact/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
