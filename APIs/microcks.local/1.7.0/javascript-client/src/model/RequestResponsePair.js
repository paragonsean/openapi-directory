/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractExchange from './AbstractExchange';
import Request from './Request';
import Response from './Response';

/**
 * The RequestResponsePair model module.
 * @module model/RequestResponsePair
 * @version 1.7.0
 */
class RequestResponsePair {
    /**
     * Constructs a new <code>RequestResponsePair</code>.
     * Request associated with corresponding Response
     * @alias module:model/RequestResponsePair
     * @implements module:model/AbstractExchange
     * @param type {module:model/RequestResponsePair.TypeEnum} Discriminant type for identifying kind of exchange
     * @param request {module:model/Request} 
     * @param response {module:model/Response} 
     */
    constructor(type, request, response) { 
        AbstractExchange.initialize(this, type);
        RequestResponsePair.initialize(this, type, request, response);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, request, response) { 
        obj['type'] = type;
        obj['request'] = request;
        obj['response'] = response;
    }

    /**
     * Constructs a <code>RequestResponsePair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RequestResponsePair} obj Optional instance to populate.
     * @return {module:model/RequestResponsePair} The populated <code>RequestResponsePair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RequestResponsePair();
            AbstractExchange.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = Request.constructFromObject(data['request']);
            }
            if (data.hasOwnProperty('response')) {
                obj['response'] = Response.constructFromObject(data['response']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RequestResponsePair</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RequestResponsePair</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RequestResponsePair.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `request`
        if (data['request']) { // data not null
          Request.validateJSON(data['request']);
        }
        // validate the optional field `response`
        if (data['response']) { // data not null
          Response.validateJSON(data['response']);
        }

        return true;
    }


}

RequestResponsePair.RequiredProperties = ["type", "request", "response"];

/**
 * Discriminant type for identifying kind of exchange
 * @member {module:model/RequestResponsePair.TypeEnum} type
 */
RequestResponsePair.prototype['type'] = undefined;

/**
 * @member {module:model/Request} request
 */
RequestResponsePair.prototype['request'] = undefined;

/**
 * @member {module:model/Response} response
 */
RequestResponsePair.prototype['response'] = undefined;


// Implement AbstractExchange interface:
/**
 * Discriminant type for identifying kind of exchange
 * @member {module:model/AbstractExchange.TypeEnum} type
 */
AbstractExchange.prototype['type'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RequestResponsePair['TypeEnum'] = {

    /**
     * value: "reqRespPair"
     * @const
     */
    "reqRespPair": "reqRespPair",

    /**
     * value: "unidirEvent"
     * @const
     */
    "unidirEvent": "unidirEvent"
};



export default RequestResponsePair;

