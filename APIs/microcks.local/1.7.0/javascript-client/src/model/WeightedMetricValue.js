/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WeightedMetricValue model module.
 * @module model/WeightedMetricValue
 * @version 1.7.0
 */
class WeightedMetricValue {
    /**
     * Constructs a new <code>WeightedMetricValue</code>.
     * Value of a metric with an associated weight
     * @alias module:model/WeightedMetricValue
     * @param name {String} Metric name or serie name
     * @param value {Number} The value of this metric
     * @param weight {Number} Weight of this metric value (typically a percentage)
     */
    constructor(name, value, weight) { 
        
        WeightedMetricValue.initialize(this, name, value, weight);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, value, weight) { 
        obj['name'] = name;
        obj['value'] = value;
        obj['weight'] = weight;
    }

    /**
     * Constructs a <code>WeightedMetricValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WeightedMetricValue} obj Optional instance to populate.
     * @return {module:model/WeightedMetricValue} The populated <code>WeightedMetricValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WeightedMetricValue();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WeightedMetricValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WeightedMetricValue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WeightedMetricValue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

WeightedMetricValue.RequiredProperties = ["name", "value", "weight"];

/**
 * Metric name or serie name
 * @member {String} name
 */
WeightedMetricValue.prototype['name'] = undefined;

/**
 * The value of this metric
 * @member {Number} value
 */
WeightedMetricValue.prototype['value'] = undefined;

/**
 * Weight of this metric value (typically a percentage)
 * @member {Number} weight
 */
WeightedMetricValue.prototype['weight'] = undefined;






export default WeightedMetricValue;

