/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Exchange from './Exchange';
import Service from './Service';

/**
 * The ServiceView model module.
 * @module model/ServiceView
 * @version 1.7.0
 */
class ServiceView {
    /**
     * Constructs a new <code>ServiceView</code>.
     * Aggregate bean for grouping a Service an its messages pairs
     * @alias module:model/ServiceView
     * @param messagesMap {Object.<String, Array.<module:model/Exchange>>} Map of messages for this Service. Keys are operation name, values are array of messages for this operation
     * @param service {module:model/Service} 
     */
    constructor(messagesMap, service) { 
        
        ServiceView.initialize(this, messagesMap, service);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messagesMap, service) { 
        obj['messagesMap'] = messagesMap;
        obj['service'] = service;
    }

    /**
     * Constructs a <code>ServiceView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceView} obj Optional instance to populate.
     * @return {module:model/ServiceView} The populated <code>ServiceView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceView();

            if (data.hasOwnProperty('messagesMap')) {
                obj['messagesMap'] = ApiClient.convertToType(data['messagesMap'], {'String': Array});
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = Service.constructFromObject(data['service']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceView</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceView.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `service`
        if (data['service']) { // data not null
          Service.validateJSON(data['service']);
        }

        return true;
    }


}

ServiceView.RequiredProperties = ["messagesMap", "service"];

/**
 * Map of messages for this Service. Keys are operation name, values are array of messages for this operation
 * @member {Object.<String, Array.<module:model/Exchange>>} messagesMap
 */
ServiceView.prototype['messagesMap'] = undefined;

/**
 * @member {module:model/Service} service
 */
ServiceView.prototype['service'] = undefined;






export default ServiceView;

