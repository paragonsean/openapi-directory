/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DailyInvocationStatistic model module.
 * @module model/DailyInvocationStatistic
 * @version 1.7.0
 */
class DailyInvocationStatistic {
    /**
     * Constructs a new <code>DailyInvocationStatistic</code>.
     * The daily statistic of a service mock invocations
     * @alias module:model/DailyInvocationStatistic
     * @param dailyCount {Number} The number of service mock invocations on this day
     * @param day {String} The day (formatted as yyyyMMdd string) represented by this statistic
     * @param id {String} Unique identifier of this statistic object
     * @param serviceName {String} The name of the service this statistic is related to
     * @param serviceVersion {String} The version of the service this statistic is related to
     */
    constructor(dailyCount, day, id, serviceName, serviceVersion) { 
        
        DailyInvocationStatistic.initialize(this, dailyCount, day, id, serviceName, serviceVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dailyCount, day, id, serviceName, serviceVersion) { 
        obj['dailyCount'] = dailyCount;
        obj['day'] = day;
        obj['id'] = id;
        obj['serviceName'] = serviceName;
        obj['serviceVersion'] = serviceVersion;
    }

    /**
     * Constructs a <code>DailyInvocationStatistic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DailyInvocationStatistic} obj Optional instance to populate.
     * @return {module:model/DailyInvocationStatistic} The populated <code>DailyInvocationStatistic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DailyInvocationStatistic();

            if (data.hasOwnProperty('dailyCount')) {
                obj['dailyCount'] = ApiClient.convertToType(data['dailyCount'], 'Number');
            }
            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], 'String');
            }
            if (data.hasOwnProperty('hourlyCount')) {
                obj['hourlyCount'] = ApiClient.convertToType(data['hourlyCount'], {'String': Object});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('minuteCount')) {
                obj['minuteCount'] = ApiClient.convertToType(data['minuteCount'], {'String': Object});
            }
            if (data.hasOwnProperty('serviceName')) {
                obj['serviceName'] = ApiClient.convertToType(data['serviceName'], 'String');
            }
            if (data.hasOwnProperty('serviceVersion')) {
                obj['serviceVersion'] = ApiClient.convertToType(data['serviceVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DailyInvocationStatistic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DailyInvocationStatistic</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DailyInvocationStatistic.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['day'] && !(typeof data['day'] === 'string' || data['day'] instanceof String)) {
            throw new Error("Expected the field `day` to be a primitive type in the JSON string but got " + data['day']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['serviceName'] && !(typeof data['serviceName'] === 'string' || data['serviceName'] instanceof String)) {
            throw new Error("Expected the field `serviceName` to be a primitive type in the JSON string but got " + data['serviceName']);
        }
        // ensure the json data is a string
        if (data['serviceVersion'] && !(typeof data['serviceVersion'] === 'string' || data['serviceVersion'] instanceof String)) {
            throw new Error("Expected the field `serviceVersion` to be a primitive type in the JSON string but got " + data['serviceVersion']);
        }

        return true;
    }


}

DailyInvocationStatistic.RequiredProperties = ["dailyCount", "day", "id", "serviceName", "serviceVersion"];

/**
 * The number of service mock invocations on this day
 * @member {Number} dailyCount
 */
DailyInvocationStatistic.prototype['dailyCount'] = undefined;

/**
 * The day (formatted as yyyyMMdd string) represented by this statistic
 * @member {String} day
 */
DailyInvocationStatistic.prototype['day'] = undefined;

/**
 * The number of service mock invocations per hour of the day (keys range from 0 to 23)
 * @member {Object.<String, Object>} hourlyCount
 */
DailyInvocationStatistic.prototype['hourlyCount'] = undefined;

/**
 * Unique identifier of this statistic object
 * @member {String} id
 */
DailyInvocationStatistic.prototype['id'] = undefined;

/**
 * The number of service mock invocations per minute of the day (keys range from 0 to 1439)
 * @member {Object.<String, Object>} minuteCount
 */
DailyInvocationStatistic.prototype['minuteCount'] = undefined;

/**
 * The name of the service this statistic is related to
 * @member {String} serviceName
 */
DailyInvocationStatistic.prototype['serviceName'] = undefined;

/**
 * The version of the service this statistic is related to
 * @member {String} serviceVersion
 */
DailyInvocationStatistic.prototype['serviceVersion'] = undefined;






export default DailyInvocationStatistic;

