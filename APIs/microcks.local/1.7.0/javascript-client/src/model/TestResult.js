/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HeaderDTO from './HeaderDTO';
import SecretRef from './SecretRef';
import TestCaseResult from './TestCaseResult';
import TestRunnerType from './TestRunnerType';

/**
 * The TestResult model module.
 * @module model/TestResult
 * @version 1.7.0
 */
class TestResult {
    /**
     * Constructs a new <code>TestResult</code>.
     * Represents the result of a Service or API test run by Microcks. Tests are related to a service and made of multiple test cases corresponding to each operations / actions composing service. Tests are run against a specific endpoint named testedEndpoint. It holds global markers telling if test still ran, is a success, how many times is has taken and so on ...
     * @alias module:model/TestResult
     * @param id {String} Unique identifier of TestResult
     * @param inProgress {Boolean} Flag telling is test is still in progress
     * @param runnerType {module:model/TestRunnerType} 
     * @param serviceId {String} Unique identifier of service tested
     * @param success {Boolean} Flag telling if test is a success
     * @param testDate {Number} Timestamp of creation date of this service
     * @param testNumber {Number} Incremental number for tracking number of tests of a service
     * @param testedEndpoint {String} Endpoint used during test
     * @param version {Number} Revision number of this test
     */
    constructor(id, inProgress, runnerType, serviceId, success, testDate, testNumber, testedEndpoint, version) { 
        
        TestResult.initialize(this, id, inProgress, runnerType, serviceId, success, testDate, testNumber, testedEndpoint, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, inProgress, runnerType, serviceId, success, testDate, testNumber, testedEndpoint, version) { 
        obj['id'] = id;
        obj['inProgress'] = inProgress;
        obj['runnerType'] = runnerType;
        obj['serviceId'] = serviceId;
        obj['success'] = success;
        obj['testDate'] = testDate;
        obj['testNumber'] = testNumber;
        obj['testedEndpoint'] = testedEndpoint;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>TestResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestResult} obj Optional instance to populate.
     * @return {module:model/TestResult} The populated <code>TestResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestResult();

            if (data.hasOwnProperty('elapsedTime')) {
                obj['elapsedTime'] = ApiClient.convertToType(data['elapsedTime'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inProgress')) {
                obj['inProgress'] = ApiClient.convertToType(data['inProgress'], 'Boolean');
            }
            if (data.hasOwnProperty('operationHeaders')) {
                obj['operationHeaders'] = ApiClient.convertToType(data['operationHeaders'], {'String': [HeaderDTO]});
            }
            if (data.hasOwnProperty('runnerType')) {
                obj['runnerType'] = TestRunnerType.constructFromObject(data['runnerType']);
            }
            if (data.hasOwnProperty('secretRef')) {
                obj['secretRef'] = SecretRef.constructFromObject(data['secretRef']);
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
            if (data.hasOwnProperty('testCaseResults')) {
                obj['testCaseResults'] = ApiClient.convertToType(data['testCaseResults'], [TestCaseResult]);
            }
            if (data.hasOwnProperty('testDate')) {
                obj['testDate'] = ApiClient.convertToType(data['testDate'], 'Number');
            }
            if (data.hasOwnProperty('testNumber')) {
                obj['testNumber'] = ApiClient.convertToType(data['testNumber'], 'Number');
            }
            if (data.hasOwnProperty('testedEndpoint')) {
                obj['testedEndpoint'] = ApiClient.convertToType(data['testedEndpoint'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `secretRef`
        if (data['secretRef']) { // data not null
          SecretRef.validateJSON(data['secretRef']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        if (data['testCaseResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testCaseResults'])) {
                throw new Error("Expected the field `testCaseResults` to be an array in the JSON data but got " + data['testCaseResults']);
            }
            // validate the optional field `testCaseResults` (array)
            for (const item of data['testCaseResults']) {
                TestCaseResult.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['testedEndpoint'] && !(typeof data['testedEndpoint'] === 'string' || data['testedEndpoint'] instanceof String)) {
            throw new Error("Expected the field `testedEndpoint` to be a primitive type in the JSON string but got " + data['testedEndpoint']);
        }

        return true;
    }


}

TestResult.RequiredProperties = ["id", "inProgress", "runnerType", "serviceId", "success", "testDate", "testNumber", "testedEndpoint", "version"];

/**
 * Elapsed time in milliseconds since test beginning
 * @member {Number} elapsedTime
 */
TestResult.prototype['elapsedTime'] = undefined;

/**
 * Unique identifier of TestResult
 * @member {String} id
 */
TestResult.prototype['id'] = undefined;

/**
 * Flag telling is test is still in progress
 * @member {Boolean} inProgress
 */
TestResult.prototype['inProgress'] = undefined;

/**
 * Specification of additional headers for a Service/API operations. Keys are operation name or \"globals\" (if header applies to all), values are Header objects DTO.
 * @member {Object.<String, Array.<module:model/HeaderDTO>>} operationHeaders
 */
TestResult.prototype['operationHeaders'] = undefined;

/**
 * @member {module:model/TestRunnerType} runnerType
 */
TestResult.prototype['runnerType'] = undefined;

/**
 * @member {module:model/SecretRef} secretRef
 */
TestResult.prototype['secretRef'] = undefined;

/**
 * Unique identifier of service tested
 * @member {String} serviceId
 */
TestResult.prototype['serviceId'] = undefined;

/**
 * Flag telling if test is a success
 * @member {Boolean} success
 */
TestResult.prototype['success'] = undefined;

/**
 * TestCase results associated to this test
 * @member {Array.<module:model/TestCaseResult>} testCaseResults
 */
TestResult.prototype['testCaseResults'] = undefined;

/**
 * Timestamp of creation date of this service
 * @member {Number} testDate
 */
TestResult.prototype['testDate'] = undefined;

/**
 * Incremental number for tracking number of tests of a service
 * @member {Number} testNumber
 */
TestResult.prototype['testNumber'] = undefined;

/**
 * Endpoint used during test
 * @member {String} testedEndpoint
 */
TestResult.prototype['testedEndpoint'] = undefined;

/**
 * The maximum time (in milliseconds) to wait for this test ends
 * @member {Number} timeout
 */
TestResult.prototype['timeout'] = undefined;

/**
 * Revision number of this test
 * @member {Number} version
 */
TestResult.prototype['version'] = undefined;






export default TestResult;

