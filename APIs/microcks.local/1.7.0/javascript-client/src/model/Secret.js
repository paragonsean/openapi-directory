/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Secret model module.
 * @module model/Secret
 * @version 1.7.0
 */
class Secret {
    /**
     * Constructs a new <code>Secret</code>.
     * A Secret allows grouping informations on how to access a restricted resource such as a repsoitory URL. Secrets are typically used by ImpoortJobs.
     * @alias module:model/Secret
     * @param description {String} Description of this Secret
     * @param name {String} Unique distinct name of Secret
     */
    constructor(description, name) { 
        
        Secret.initialize(this, description, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, name) { 
        obj['description'] = description;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Secret</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Secret} obj Optional instance to populate.
     * @return {module:model/Secret} The populated <code>Secret</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Secret();

            if (data.hasOwnProperty('caCertPem')) {
                obj['caCertPem'] = ApiClient.convertToType(data['caCertPem'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('tokenHeader')) {
                obj['tokenHeader'] = ApiClient.convertToType(data['tokenHeader'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Secret</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Secret</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Secret.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['caCertPem'] && !(typeof data['caCertPem'] === 'string' || data['caCertPem'] instanceof String)) {
            throw new Error("Expected the field `caCertPem` to be a primitive type in the JSON string but got " + data['caCertPem']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['tokenHeader'] && !(typeof data['tokenHeader'] === 'string' || data['tokenHeader'] instanceof String)) {
            throw new Error("Expected the field `tokenHeader` to be a primitive type in the JSON string but got " + data['tokenHeader']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

Secret.RequiredProperties = ["description", "name"];

/**
 * @member {String} caCertPem
 */
Secret.prototype['caCertPem'] = undefined;

/**
 * Description of this Secret
 * @member {String} description
 */
Secret.prototype['description'] = undefined;

/**
 * Unique identifier of Secret
 * @member {String} id
 */
Secret.prototype['id'] = undefined;

/**
 * Unique distinct name of Secret
 * @member {String} name
 */
Secret.prototype['name'] = undefined;

/**
 * @member {String} password
 */
Secret.prototype['password'] = undefined;

/**
 * @member {String} token
 */
Secret.prototype['token'] = undefined;

/**
 * @member {String} tokenHeader
 */
Secret.prototype['tokenHeader'] = undefined;

/**
 * @member {String} username
 */
Secret.prototype['username'] = undefined;






export default Secret;

