/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceType from './ResourceType';

/**
 * The Resource model module.
 * @module model/Resource
 * @version 1.7.0
 */
class Resource {
    /**
     * Constructs a new <code>Resource</code>.
     * Resource represents a Service or API artifacts such as specification, contract
     * @alias module:model/Resource
     * @param content {String} String content of this resource
     * @param id {String} Uniquer identifier of this Service or API Resource
     * @param name {String} Unique name/business identifier for this Service or API resource
     * @param serviceId {String} Unique identifier of the Servoce or API this resource is attached to
     * @param type {module:model/ResourceType} 
     */
    constructor(content, id, name, serviceId, type) { 
        
        Resource.initialize(this, content, id, name, serviceId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, id, name, serviceId, type) { 
        obj['content'] = content;
        obj['id'] = id;
        obj['name'] = name;
        obj['serviceId'] = serviceId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Resource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Resource} obj Optional instance to populate.
     * @return {module:model/Resource} The populated <code>Resource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Resource();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('sourceArtifact')) {
                obj['sourceArtifact'] = ApiClient.convertToType(data['sourceArtifact'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ResourceType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Resource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Resource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Resource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['sourceArtifact'] && !(typeof data['sourceArtifact'] === 'string' || data['sourceArtifact'] instanceof String)) {
            throw new Error("Expected the field `sourceArtifact` to be a primitive type in the JSON string but got " + data['sourceArtifact']);
        }

        return true;
    }


}

Resource.RequiredProperties = ["content", "id", "name", "serviceId", "type"];

/**
 * String content of this resource
 * @member {String} content
 */
Resource.prototype['content'] = undefined;

/**
 * Uniquer identifier of this Service or API Resource
 * @member {String} id
 */
Resource.prototype['id'] = undefined;

/**
 * Unique name/business identifier for this Service or API resource
 * @member {String} name
 */
Resource.prototype['name'] = undefined;

/**
 * Relatvie path of this resource regarding main resource
 * @member {String} path
 */
Resource.prototype['path'] = undefined;

/**
 * Unique identifier of the Servoce or API this resource is attached to
 * @member {String} serviceId
 */
Resource.prototype['serviceId'] = undefined;

/**
 * Short name of the artifact this resource was extracted from
 * @member {String} sourceArtifact
 */
Resource.prototype['sourceArtifact'] = undefined;

/**
 * @member {module:model/ResourceType} type
 */
Resource.prototype['type'] = undefined;






export default Resource;

