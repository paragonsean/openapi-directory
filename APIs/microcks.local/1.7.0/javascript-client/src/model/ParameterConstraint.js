/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ParameterConstraint model module.
 * @module model/ParameterConstraint
 * @version 1.7.0
 */
class ParameterConstraint {
    /**
     * Constructs a new <code>ParameterConstraint</code>.
     * Companion object for Operation that may be used to express constraints on request parameters
     * @alias module:model/ParameterConstraint
     * @param name {String} Parameter name
     */
    constructor(name) { 
        
        ParameterConstraint.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ParameterConstraint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParameterConstraint} obj Optional instance to populate.
     * @return {module:model/ParameterConstraint} The populated <code>ParameterConstraint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParameterConstraint();

            if (data.hasOwnProperty('in')) {
                obj['in'] = ApiClient.convertToType(data['in'], 'String');
            }
            if (data.hasOwnProperty('mustMatchRegexp')) {
                obj['mustMatchRegexp'] = ApiClient.convertToType(data['mustMatchRegexp'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('recopy')) {
                obj['recopy'] = ApiClient.convertToType(data['recopy'], 'Boolean');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParameterConstraint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParameterConstraint</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ParameterConstraint.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['in'] && !(typeof data['in'] === 'string' || data['in'] instanceof String)) {
            throw new Error("Expected the field `in` to be a primitive type in the JSON string but got " + data['in']);
        }
        // ensure the json data is a string
        if (data['mustMatchRegexp'] && !(typeof data['mustMatchRegexp'] === 'string' || data['mustMatchRegexp'] instanceof String)) {
            throw new Error("Expected the field `mustMatchRegexp` to be a primitive type in the JSON string but got " + data['mustMatchRegexp']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

ParameterConstraint.RequiredProperties = ["name"];

/**
 * Parameter location
 * @member {module:model/ParameterConstraint.InEnum} in
 */
ParameterConstraint.prototype['in'] = undefined;

/**
 * Whether it's a regular expression matching constraint
 * @member {String} mustMatchRegexp
 */
ParameterConstraint.prototype['mustMatchRegexp'] = undefined;

/**
 * Parameter name
 * @member {String} name
 */
ParameterConstraint.prototype['name'] = undefined;

/**
 * Whether it's a recopy constraint
 * @member {Boolean} recopy
 */
ParameterConstraint.prototype['recopy'] = undefined;

/**
 * Whether it's a required constraint
 * @member {Boolean} required
 */
ParameterConstraint.prototype['required'] = undefined;





/**
 * Allowed values for the <code>in</code> property.
 * @enum {String}
 * @readonly
 */
ParameterConstraint['InEnum'] = {

    /**
     * value: "path"
     * @const
     */
    "path": "path",

    /**
     * value: "query"
     * @const
     */
    "query": "query",

    /**
     * value: "header"
     * @const
     */
    "header": "header"
};



export default ParameterConstraint;

