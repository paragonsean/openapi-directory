/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Binding model module.
 * @module model/Binding
 * @version 1.7.0
 */
class Binding {
    /**
     * Constructs a new <code>Binding</code>.
     * Protocol binding details for asynchronous operations
     * @alias module:model/Binding
     * @param destinationName {String} Name of destination for asynchronous messages of this operation
     * @param type {module:model/Binding.TypeEnum} Protocol binding identifier
     */
    constructor(destinationName, type) { 
        
        Binding.initialize(this, destinationName, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destinationName, type) { 
        obj['destinationName'] = destinationName;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Binding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Binding} obj Optional instance to populate.
     * @return {module:model/Binding} The populated <code>Binding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Binding();

            if (data.hasOwnProperty('destinationName')) {
                obj['destinationName'] = ApiClient.convertToType(data['destinationName'], 'String');
            }
            if (data.hasOwnProperty('destinationType')) {
                obj['destinationType'] = ApiClient.convertToType(data['destinationType'], 'String');
            }
            if (data.hasOwnProperty('keyType')) {
                obj['keyType'] = ApiClient.convertToType(data['keyType'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('persistent')) {
                obj['persistent'] = ApiClient.convertToType(data['persistent'], 'Boolean');
            }
            if (data.hasOwnProperty('qoS')) {
                obj['qoS'] = ApiClient.convertToType(data['qoS'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Binding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Binding</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Binding.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['destinationName'] && !(typeof data['destinationName'] === 'string' || data['destinationName'] instanceof String)) {
            throw new Error("Expected the field `destinationName` to be a primitive type in the JSON string but got " + data['destinationName']);
        }
        // ensure the json data is a string
        if (data['destinationType'] && !(typeof data['destinationType'] === 'string' || data['destinationType'] instanceof String)) {
            throw new Error("Expected the field `destinationType` to be a primitive type in the JSON string but got " + data['destinationType']);
        }
        // ensure the json data is a string
        if (data['keyType'] && !(typeof data['keyType'] === 'string' || data['keyType'] instanceof String)) {
            throw new Error("Expected the field `keyType` to be a primitive type in the JSON string but got " + data['keyType']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['qoS'] && !(typeof data['qoS'] === 'string' || data['qoS'] instanceof String)) {
            throw new Error("Expected the field `qoS` to be a primitive type in the JSON string but got " + data['qoS']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Binding.RequiredProperties = ["destinationName", "type"];

/**
 * Name of destination for asynchronous messages of this operation
 * @member {String} destinationName
 */
Binding.prototype['destinationName'] = undefined;

/**
 * Type of destination for asynchronous messages of this operation
 * @member {String} destinationType
 */
Binding.prototype['destinationType'] = undefined;

/**
 * Type of key for Kafka messages
 * @member {String} keyType
 */
Binding.prototype['keyType'] = undefined;

/**
 * HTTP method for WebSocket binding
 * @member {String} method
 */
Binding.prototype['method'] = undefined;

/**
 * Persistent attribute for MQTT binding
 * @member {Boolean} persistent
 */
Binding.prototype['persistent'] = undefined;

/**
 * Quality of Service attribute for MQTT binding
 * @member {String} qoS
 */
Binding.prototype['qoS'] = undefined;

/**
 * Protocol binding identifier
 * @member {module:model/Binding.TypeEnum} type
 */
Binding.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Binding['TypeEnum'] = {

    /**
     * value: "KAFKA"
     * @const
     */
    "KAFKA": "KAFKA",

    /**
     * value: "MQTT"
     * @const
     */
    "MQTT": "MQTT",

    /**
     * value: "WS"
     * @const
     */
    "WS": "WS",

    /**
     * value: "AMQP"
     * @const
     */
    "AMQP": "AMQP",

    /**
     * value: "NATS"
     * @const
     */
    "NATS": "NATS",

    /**
     * value: "GOOGLEPUBSUB"
     * @const
     */
    "GOOGLEPUBSUB": "GOOGLEPUBSUB"
};



export default Binding;

