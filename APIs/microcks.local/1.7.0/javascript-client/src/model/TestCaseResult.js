/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestStepResult from './TestStepResult';

/**
 * The TestCaseResult model module.
 * @module model/TestCaseResult
 * @version 1.7.0
 */
class TestCaseResult {
    /**
     * Constructs a new <code>TestCaseResult</code>.
     * Companion objects for TestResult. Each TestCaseResult correspond to a particuliar service operation / action reference by the operationName field. TestCaseResults owns a collection of TestStepResults (one for every request associated to service operation / action).
     * @alias module:model/TestCaseResult
     * @param elapsedTime {Number} Elapsed time in milliseconds since the test case beginning
     * @param operationName {String} Name of operation this test case is bound to
     * @param success {Boolean} Flag telling if test case is a success
     */
    constructor(elapsedTime, operationName, success) { 
        
        TestCaseResult.initialize(this, elapsedTime, operationName, success);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, elapsedTime, operationName, success) { 
        obj['elapsedTime'] = elapsedTime;
        obj['operationName'] = operationName;
        obj['success'] = success;
    }

    /**
     * Constructs a <code>TestCaseResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestCaseResult} obj Optional instance to populate.
     * @return {module:model/TestCaseResult} The populated <code>TestCaseResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestCaseResult();

            if (data.hasOwnProperty('elapsedTime')) {
                obj['elapsedTime'] = ApiClient.convertToType(data['elapsedTime'], 'Number');
            }
            if (data.hasOwnProperty('operationName')) {
                obj['operationName'] = ApiClient.convertToType(data['operationName'], 'String');
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
            if (data.hasOwnProperty('testStepResults')) {
                obj['testStepResults'] = ApiClient.convertToType(data['testStepResults'], [TestStepResult]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestCaseResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestCaseResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestCaseResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operationName'] && !(typeof data['operationName'] === 'string' || data['operationName'] instanceof String)) {
            throw new Error("Expected the field `operationName` to be a primitive type in the JSON string but got " + data['operationName']);
        }
        if (data['testStepResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testStepResults'])) {
                throw new Error("Expected the field `testStepResults` to be an array in the JSON data but got " + data['testStepResults']);
            }
            // validate the optional field `testStepResults` (array)
            for (const item of data['testStepResults']) {
                TestStepResult.validateJSON(item);
            };
        }

        return true;
    }


}

TestCaseResult.RequiredProperties = ["elapsedTime", "operationName", "success"];

/**
 * Elapsed time in milliseconds since the test case beginning
 * @member {Number} elapsedTime
 */
TestCaseResult.prototype['elapsedTime'] = undefined;

/**
 * Name of operation this test case is bound to
 * @member {String} operationName
 */
TestCaseResult.prototype['operationName'] = undefined;

/**
 * Flag telling if test case is a success
 * @member {Boolean} success
 */
TestCaseResult.prototype['success'] = undefined;

/**
 * Test steps associated to this test case
 * @member {Array.<module:model/TestStepResult>} testStepResults
 */
TestCaseResult.prototype['testStepResults'] = undefined;






export default TestCaseResult;

