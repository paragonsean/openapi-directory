/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Header from './Header';

/**
 * The EventMessage model module.
 * @module model/EventMessage
 * @version 1.7.0
 */
class EventMessage {
    /**
     * Constructs a new <code>EventMessage</code>.
     * 
     * @alias module:model/EventMessage
     * @param id {String} Unique identifier of this message
     * @param mediaType {String} Content type of message
     */
    constructor(id, mediaType) { 
        
        EventMessage.initialize(this, id, mediaType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, mediaType) { 
        obj['id'] = id;
        obj['mediaType'] = mediaType;
    }

    /**
     * Constructs a <code>EventMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventMessage} obj Optional instance to populate.
     * @return {module:model/EventMessage} The populated <code>EventMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventMessage();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [Header]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('testCaseId')) {
                obj['testCaseId'] = ApiClient.convertToType(data['testCaseId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                Header.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['mediaType'] && !(typeof data['mediaType'] === 'string' || data['mediaType'] instanceof String)) {
            throw new Error("Expected the field `mediaType` to be a primitive type in the JSON string but got " + data['mediaType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }
        // ensure the json data is a string
        if (data['testCaseId'] && !(typeof data['testCaseId'] === 'string' || data['testCaseId'] instanceof String)) {
            throw new Error("Expected the field `testCaseId` to be a primitive type in the JSON string but got " + data['testCaseId']);
        }

        return true;
    }


}

EventMessage.RequiredProperties = ["id", "mediaType"];

/**
 * Body content for this message
 * @member {String} content
 */
EventMessage.prototype['content'] = undefined;

/**
 * Headers for this message
 * @member {Array.<module:model/Header>} headers
 */
EventMessage.prototype['headers'] = undefined;

/**
 * Unique identifier of this message
 * @member {String} id
 */
EventMessage.prototype['id'] = undefined;

/**
 * Content type of message
 * @member {String} mediaType
 */
EventMessage.prototype['mediaType'] = undefined;

/**
 * Unique distinct name of this message
 * @member {String} name
 */
EventMessage.prototype['name'] = undefined;

/**
 * Identifier of Operation this message is associated to
 * @member {String} operationId
 */
EventMessage.prototype['operationId'] = undefined;

/**
 * Unique identifier of TestCase this message is attached (in case of a test)
 * @member {String} testCaseId
 */
EventMessage.prototype['testCaseId'] = undefined;






export default EventMessage;

