/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Exchange from './Exchange';
import Metadata from './Metadata';
import Operation from './Operation';
import Service from './Service';
import ServiceView from './ServiceView';

/**
 * The GetService200Response model module.
 * @module model/GetService200Response
 * @version 1.7.0
 */
class GetService200Response {
    /**
     * Constructs a new <code>GetService200Response</code>.
     * @alias module:model/GetService200Response
     * @param {(module:model/Service|module:model/ServiceView)} instance The actual instance to initialize GetService200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Service") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Service.validateJSON(instance); // throw an exception if no match
                // create Service from JS object
                this.actualInstance = Service.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Service
            errorMessages.push("Failed to construct Service: " + err)
        }

        try {
            if (typeof instance === "ServiceView") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ServiceView.validateJSON(instance); // throw an exception if no match
                // create ServiceView from JS object
                this.actualInstance = ServiceView.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ServiceView
            errorMessages.push("Failed to construct ServiceView: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GetService200Response` with oneOf schemas Service, ServiceView. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GetService200Response` with oneOf schemas Service, ServiceView. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GetService200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetService200Response} obj Optional instance to populate.
     * @return {module:model/GetService200Response} The populated <code>GetService200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GetService200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>Service</code>, <code>ServiceView</code>.
     * @return {(module:model/Service|module:model/ServiceView)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Service</code>, <code>ServiceView</code>.
     * @param {(module:model/Service|module:model/ServiceView)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GetService200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GetService200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GetService200Response} An instance of GetService200Response.
     */
    static fromJSON = function(json_string){
        return GetService200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Unique identifier for this Service or API
 * @member {String} id
 */
GetService200Response.prototype['id'] = undefined;

/**
 * @member {module:model/Metadata} metadata
 */
GetService200Response.prototype['metadata'] = undefined;

/**
 * Distinct name for this Service or API (maybe shared among many versions)
 * @member {String} name
 */
GetService200Response.prototype['name'] = undefined;

/**
 * Set of Operations for Service or API
 * @member {Array.<module:model/Operation>} operations
 */
GetService200Response.prototype['operations'] = undefined;

/**
 * Service or API Type
 * @member {module:model/GetService200Response.TypeEnum} type
 */
GetService200Response.prototype['type'] = undefined;

/**
 * Distinct version for a named Service or API
 * @member {String} version
 */
GetService200Response.prototype['version'] = undefined;

/**
 * Associated Xml Namespace in case of Xml based Service
 * @member {String} xmlNS
 */
GetService200Response.prototype['xmlNS'] = undefined;

/**
 * Map of messages for this Service. Keys are operation name, values are array of messages for this operation
 * @member {Object.<String, Array.<module:model/Exchange>>} messagesMap
 */
GetService200Response.prototype['messagesMap'] = undefined;

/**
 * @member {module:model/Service} service
 */
GetService200Response.prototype['service'] = undefined;


GetService200Response.OneOf = ["Service", "ServiceView"];

export default GetService200Response;

