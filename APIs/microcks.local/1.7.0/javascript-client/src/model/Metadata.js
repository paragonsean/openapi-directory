/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Metadata model module.
 * @module model/Metadata
 * @version 1.7.0
 */
class Metadata {
    /**
     * Constructs a new <code>Metadata</code>.
     * Commodity object for holding metadata on any entity. This object is inspired by Kubernetes metadata.
     * @alias module:model/Metadata
     * @param createdOn {Number} Creation date of attached object
     * @param lastUpdate {Number} Last update of attached object
     */
    constructor(createdOn, lastUpdate) { 
        
        Metadata.initialize(this, createdOn, lastUpdate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdOn, lastUpdate) { 
        obj['createdOn'] = createdOn;
        obj['lastUpdate'] = lastUpdate;
    }

    /**
     * Constructs a <code>Metadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metadata} obj Optional instance to populate.
     * @return {module:model/Metadata} The populated <code>Metadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metadata();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('createdOn')) {
                obj['createdOn'] = ApiClient.convertToType(data['createdOn'], 'Number');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('lastUpdate')) {
                obj['lastUpdate'] = ApiClient.convertToType(data['lastUpdate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metadata</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Metadata.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Metadata.RequiredProperties = ["createdOn", "lastUpdate"];

/**
 * Annotations of attached object
 * @member {Object.<String, String>} annotations
 */
Metadata.prototype['annotations'] = undefined;

/**
 * Creation date of attached object
 * @member {Number} createdOn
 */
Metadata.prototype['createdOn'] = undefined;

/**
 * Labels put on attached object
 * @member {Object.<String, String>} labels
 */
Metadata.prototype['labels'] = undefined;

/**
 * Last update of attached object
 * @member {Number} lastUpdate
 */
Metadata.prototype['lastUpdate'] = undefined;






export default Metadata;

