/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HeaderDTO from './HeaderDTO';
import TestRunnerType from './TestRunnerType';

/**
 * The TestRequest model module.
 * @module model/TestRequest
 * @version 1.7.0
 */
class TestRequest {
    /**
     * Constructs a new <code>TestRequest</code>.
     * Test request is a minimalist wrapper for requesting the launch of a new test
     * @alias module:model/TestRequest
     * @param runnerType {module:model/TestRunnerType} 
     * @param serviceId {String} Unique identifier of service to test
     * @param testEndpoint {String} Endpoint to test for this service
     * @param timeout {Number} The maximum time (in milliseconds) to wait for this test ends
     */
    constructor(runnerType, serviceId, testEndpoint, timeout) { 
        
        TestRequest.initialize(this, runnerType, serviceId, testEndpoint, timeout);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, runnerType, serviceId, testEndpoint, timeout) { 
        obj['runnerType'] = runnerType;
        obj['serviceId'] = serviceId;
        obj['testEndpoint'] = testEndpoint;
        obj['timeout'] = timeout;
    }

    /**
     * Constructs a <code>TestRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestRequest} obj Optional instance to populate.
     * @return {module:model/TestRequest} The populated <code>TestRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestRequest();

            if (data.hasOwnProperty('filteredOperations')) {
                obj['filteredOperations'] = ApiClient.convertToType(data['filteredOperations'], ['String']);
            }
            if (data.hasOwnProperty('operationHeaders')) {
                obj['operationHeaders'] = ApiClient.convertToType(data['operationHeaders'], {'String': [HeaderDTO]});
            }
            if (data.hasOwnProperty('runnerType')) {
                obj['runnerType'] = TestRunnerType.constructFromObject(data['runnerType']);
            }
            if (data.hasOwnProperty('secretName')) {
                obj['secretName'] = ApiClient.convertToType(data['secretName'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('testEndpoint')) {
                obj['testEndpoint'] = ApiClient.convertToType(data['testEndpoint'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['filteredOperations'])) {
            throw new Error("Expected the field `filteredOperations` to be an array in the JSON data but got " + data['filteredOperations']);
        }
        // ensure the json data is a string
        if (data['secretName'] && !(typeof data['secretName'] === 'string' || data['secretName'] instanceof String)) {
            throw new Error("Expected the field `secretName` to be a primitive type in the JSON string but got " + data['secretName']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['testEndpoint'] && !(typeof data['testEndpoint'] === 'string' || data['testEndpoint'] instanceof String)) {
            throw new Error("Expected the field `testEndpoint` to be a primitive type in the JSON string but got " + data['testEndpoint']);
        }

        return true;
    }


}

TestRequest.RequiredProperties = ["runnerType", "serviceId", "testEndpoint", "timeout"];

/**
 * A restriction on service operations to test
 * @member {Array.<String>} filteredOperations
 */
TestRequest.prototype['filteredOperations'] = undefined;

/**
 * Specification of additional headers for a Service/API operations. Keys are operation name or \"globals\" (if header applies to all), values are Header objects DTO.
 * @member {Object.<String, Array.<module:model/HeaderDTO>>} operationHeaders
 */
TestRequest.prototype['operationHeaders'] = undefined;

/**
 * @member {module:model/TestRunnerType} runnerType
 */
TestRequest.prototype['runnerType'] = undefined;

/**
 * The name of Secret to use for connecting the test endpoint
 * @member {String} secretName
 */
TestRequest.prototype['secretName'] = undefined;

/**
 * Unique identifier of service to test
 * @member {String} serviceId
 */
TestRequest.prototype['serviceId'] = undefined;

/**
 * Endpoint to test for this service
 * @member {String} testEndpoint
 */
TestRequest.prototype['testEndpoint'] = undefined;

/**
 * The maximum time (in milliseconds) to wait for this test ends
 * @member {Number} timeout
 */
TestRequest.prototype['timeout'] = undefined;






export default TestRequest;

