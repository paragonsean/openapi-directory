/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventMessage from './EventMessage';
import Request from './Request';
import RequestResponsePair from './RequestResponsePair';
import Response from './Response';
import UnidirectionalEvent from './UnidirectionalEvent';

/**
 * The Exchange model module.
 * @module model/Exchange
 * @version 1.7.0
 */
class Exchange {
    /**
     * Constructs a new <code>Exchange</code>.
     * Abstract representation of a Service or API exchange type (request/response, event based, ...)
     * @alias module:model/Exchange
     * @param {(module:model/RequestResponsePair|module:model/UnidirectionalEvent)} instance The actual instance to initialize Exchange.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "RequestResponsePair") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RequestResponsePair.validateJSON(instance); // throw an exception if no match
                // create RequestResponsePair from JS object
                this.actualInstance = RequestResponsePair.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RequestResponsePair
            errorMessages.push("Failed to construct RequestResponsePair: " + err)
        }

        try {
            if (typeof instance === "UnidirectionalEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UnidirectionalEvent.validateJSON(instance); // throw an exception if no match
                // create UnidirectionalEvent from JS object
                this.actualInstance = UnidirectionalEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UnidirectionalEvent
            errorMessages.push("Failed to construct UnidirectionalEvent: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `Exchange` with oneOf schemas RequestResponsePair, UnidirectionalEvent. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `Exchange` with oneOf schemas RequestResponsePair, UnidirectionalEvent. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>Exchange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Exchange} obj Optional instance to populate.
     * @return {module:model/Exchange} The populated <code>Exchange</code> instance.
     */
    static constructFromObject(data, obj) {
        return new Exchange(data);
    }

    /**
     * Gets the actual instance, which can be <code>RequestResponsePair</code>, <code>UnidirectionalEvent</code>.
     * @return {(module:model/RequestResponsePair|module:model/UnidirectionalEvent)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>RequestResponsePair</code>, <code>UnidirectionalEvent</code>.
     * @param {(module:model/RequestResponsePair|module:model/UnidirectionalEvent)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = Exchange.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of Exchange from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/Exchange} An instance of Exchange.
     */
    static fromJSON = function(json_string){
        return Exchange.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/Request} request
 */
Exchange.prototype['request'] = undefined;

/**
 * @member {module:model/Response} response
 */
Exchange.prototype['response'] = undefined;

/**
 * Discriminant type for identifying kind of exchange
 * @member {module:model/Exchange.TypeEnum} type
 */
Exchange.prototype['type'] = undefined;

/**
 * @member {module:model/EventMessage} eventMessage
 */
Exchange.prototype['eventMessage'] = undefined;


Exchange.OneOf = ["RequestResponsePair", "UnidirectionalEvent"];

export default Exchange;

