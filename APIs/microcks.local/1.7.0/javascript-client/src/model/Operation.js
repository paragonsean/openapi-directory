/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Binding from './Binding';
import ParameterConstraint from './ParameterConstraint';

/**
 * The Operation model module.
 * @module model/Operation
 * @version 1.7.0
 */
class Operation {
    /**
     * Constructs a new <code>Operation</code>.
     * An Operation of a Service or API
     * @alias module:model/Operation
     * @param method {String} Represents transport method
     * @param name {String} Unique name of this Operation within Service scope
     */
    constructor(method, name) { 
        
        Operation.initialize(this, method, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, method, name) { 
        obj['method'] = method;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Operation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Operation} obj Optional instance to populate.
     * @return {module:model/Operation} The populated <code>Operation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Operation();

            if (data.hasOwnProperty('bindings')) {
                obj['bindings'] = ApiClient.convertToType(data['bindings'], {'String': Binding});
            }
            if (data.hasOwnProperty('defaultDelay')) {
                obj['defaultDelay'] = ApiClient.convertToType(data['defaultDelay'], 'Number');
            }
            if (data.hasOwnProperty('dispatcher')) {
                obj['dispatcher'] = ApiClient.convertToType(data['dispatcher'], 'String');
            }
            if (data.hasOwnProperty('dispatcherRules')) {
                obj['dispatcherRules'] = ApiClient.convertToType(data['dispatcherRules'], 'String');
            }
            if (data.hasOwnProperty('inputName')) {
                obj['inputName'] = ApiClient.convertToType(data['inputName'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outputName')) {
                obj['outputName'] = ApiClient.convertToType(data['outputName'], 'String');
            }
            if (data.hasOwnProperty('parameterContraints')) {
                obj['parameterContraints'] = ApiClient.convertToType(data['parameterContraints'], [ParameterConstraint]);
            }
            if (data.hasOwnProperty('resourcePaths')) {
                obj['resourcePaths'] = ApiClient.convertToType(data['resourcePaths'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Operation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Operation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Operation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dispatcher'] && !(typeof data['dispatcher'] === 'string' || data['dispatcher'] instanceof String)) {
            throw new Error("Expected the field `dispatcher` to be a primitive type in the JSON string but got " + data['dispatcher']);
        }
        // ensure the json data is a string
        if (data['dispatcherRules'] && !(typeof data['dispatcherRules'] === 'string' || data['dispatcherRules'] instanceof String)) {
            throw new Error("Expected the field `dispatcherRules` to be a primitive type in the JSON string but got " + data['dispatcherRules']);
        }
        // ensure the json data is a string
        if (data['inputName'] && !(typeof data['inputName'] === 'string' || data['inputName'] instanceof String)) {
            throw new Error("Expected the field `inputName` to be a primitive type in the JSON string but got " + data['inputName']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['outputName'] && !(typeof data['outputName'] === 'string' || data['outputName'] instanceof String)) {
            throw new Error("Expected the field `outputName` to be a primitive type in the JSON string but got " + data['outputName']);
        }
        if (data['parameterContraints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameterContraints'])) {
                throw new Error("Expected the field `parameterContraints` to be an array in the JSON data but got " + data['parameterContraints']);
            }
            // validate the optional field `parameterContraints` (array)
            for (const item of data['parameterContraints']) {
                ParameterConstraint.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resourcePaths'])) {
            throw new Error("Expected the field `resourcePaths` to be an array in the JSON data but got " + data['resourcePaths']);
        }

        return true;
    }


}

Operation.RequiredProperties = ["method", "name"];

/**
 * Map of protocol binding details for this operation
 * @member {Object.<String, module:model/Binding>} bindings
 */
Operation.prototype['bindings'] = undefined;

/**
 * Default response time delay for mocks
 * @member {Number} defaultDelay
 */
Operation.prototype['defaultDelay'] = undefined;

/**
 * Dispatcher strategy used for mocks
 * @member {String} dispatcher
 */
Operation.prototype['dispatcher'] = undefined;

/**
 * DispatcherRules used for mocks
 * @member {String} dispatcherRules
 */
Operation.prototype['dispatcherRules'] = undefined;

/**
 * Name of input parameters in case of Xml based Service
 * @member {String} inputName
 */
Operation.prototype['inputName'] = undefined;

/**
 * Represents transport method
 * @member {String} method
 */
Operation.prototype['method'] = undefined;

/**
 * Unique name of this Operation within Service scope
 * @member {String} name
 */
Operation.prototype['name'] = undefined;

/**
 * Name of output parameters in case of Xml based Service
 * @member {String} outputName
 */
Operation.prototype['outputName'] = undefined;

/**
 * Contraints that may apply to mock invocatino on this operation
 * @member {Array.<module:model/ParameterConstraint>} parameterContraints
 */
Operation.prototype['parameterContraints'] = undefined;

/**
 * Paths the mocks endpoints are mapped on
 * @member {Array.<String>} resourcePaths
 */
Operation.prototype['resourcePaths'] = undefined;






export default Operation;

