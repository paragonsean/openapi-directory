/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Trend from './Trend';

/**
 * The TestConformanceMetric model module.
 * @module model/TestConformanceMetric
 * @version 1.7.0
 */
class TestConformanceMetric {
    /**
     * Constructs a new <code>TestConformanceMetric</code>.
     * Represents the test conformance metrics (current score, history and evolution trend) of a Service
     * @alias module:model/TestConformanceMetric
     * @param currentScore {Number} Current test conformance score for the related Service
     * @param id {String} Unique identifier of coverage metric
     * @param maxPossibleScore {Number} Maximum conformance score that can be reached (depends on samples expresiveness)
     * @param serviceId {String} Unique identifier of the Service this metric is related to
     */
    constructor(currentScore, id, maxPossibleScore, serviceId) { 
        
        TestConformanceMetric.initialize(this, currentScore, id, maxPossibleScore, serviceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentScore, id, maxPossibleScore, serviceId) { 
        obj['currentScore'] = currentScore;
        obj['id'] = id;
        obj['maxPossibleScore'] = maxPossibleScore;
        obj['serviceId'] = serviceId;
    }

    /**
     * Constructs a <code>TestConformanceMetric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestConformanceMetric} obj Optional instance to populate.
     * @return {module:model/TestConformanceMetric} The populated <code>TestConformanceMetric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestConformanceMetric();

            if (data.hasOwnProperty('aggregationLabelValue')) {
                obj['aggregationLabelValue'] = ApiClient.convertToType(data['aggregationLabelValue'], 'String');
            }
            if (data.hasOwnProperty('currentScore')) {
                obj['currentScore'] = ApiClient.convertToType(data['currentScore'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastUpdateDay')) {
                obj['lastUpdateDay'] = ApiClient.convertToType(data['lastUpdateDay'], 'String');
            }
            if (data.hasOwnProperty('latestScores')) {
                obj['latestScores'] = ApiClient.convertToType(data['latestScores'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('latestTrend')) {
                obj['latestTrend'] = Trend.constructFromObject(data['latestTrend']);
            }
            if (data.hasOwnProperty('maxPossibleScore')) {
                obj['maxPossibleScore'] = ApiClient.convertToType(data['maxPossibleScore'], 'Number');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestConformanceMetric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestConformanceMetric</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestConformanceMetric.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aggregationLabelValue'] && !(typeof data['aggregationLabelValue'] === 'string' || data['aggregationLabelValue'] instanceof String)) {
            throw new Error("Expected the field `aggregationLabelValue` to be a primitive type in the JSON string but got " + data['aggregationLabelValue']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastUpdateDay'] && !(typeof data['lastUpdateDay'] === 'string' || data['lastUpdateDay'] instanceof String)) {
            throw new Error("Expected the field `lastUpdateDay` to be a primitive type in the JSON string but got " + data['lastUpdateDay']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }

        return true;
    }


}

TestConformanceMetric.RequiredProperties = ["currentScore", "id", "maxPossibleScore", "serviceId"];

/**
 * Value of the label used for metrics aggregation (if any)
 * @member {String} aggregationLabelValue
 */
TestConformanceMetric.prototype['aggregationLabelValue'] = undefined;

/**
 * Current test conformance score for the related Service
 * @member {Number} currentScore
 */
TestConformanceMetric.prototype['currentScore'] = undefined;

/**
 * Unique identifier of coverage metric
 * @member {String} id
 */
TestConformanceMetric.prototype['id'] = undefined;

/**
 * The day of latest score update (in yyyyMMdd format)
 * @member {String} lastUpdateDay
 */
TestConformanceMetric.prototype['lastUpdateDay'] = undefined;

/**
 * History of latest scores (key is date with format yyyyMMdd, value is score as double)
 * @member {Object.<String, Number>} latestScores
 */
TestConformanceMetric.prototype['latestScores'] = undefined;

/**
 * @member {module:model/Trend} latestTrend
 */
TestConformanceMetric.prototype['latestTrend'] = undefined;

/**
 * Maximum conformance score that can be reached (depends on samples expresiveness)
 * @member {Number} maxPossibleScore
 */
TestConformanceMetric.prototype['maxPossibleScore'] = undefined;

/**
 * Unique identifier of the Service this metric is related to
 * @member {String} serviceId
 */
TestConformanceMetric.prototype['serviceId'] = undefined;






export default TestConformanceMetric;

