/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';
import Operation from './Operation';

/**
 * The Service model module.
 * @module model/Service
 * @version 1.7.0
 */
class Service {
    /**
     * Constructs a new <code>Service</code>.
     * Represents a Service or API definition as registred into Microcks repository
     * @alias module:model/Service
     * @param name {String} Distinct name for this Service or API (maybe shared among many versions)
     * @param type {module:model/Service.TypeEnum} Service or API Type
     * @param version {String} Distinct version for a named Service or API
     */
    constructor(name, type, version) { 
        
        Service.initialize(this, name, type, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, version) { 
        obj['name'] = name;
        obj['type'] = type;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Service} obj Optional instance to populate.
     * @return {module:model/Service} The populated <code>Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Service();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = Metadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], [Operation]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('xmlNS')) {
                obj['xmlNS'] = ApiClient.convertToType(data['xmlNS'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Service</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Service.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          Metadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['operations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['operations'])) {
                throw new Error("Expected the field `operations` to be an array in the JSON data but got " + data['operations']);
            }
            // validate the optional field `operations` (array)
            for (const item of data['operations']) {
                Operation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['xmlNS'] && !(typeof data['xmlNS'] === 'string' || data['xmlNS'] instanceof String)) {
            throw new Error("Expected the field `xmlNS` to be a primitive type in the JSON string but got " + data['xmlNS']);
        }

        return true;
    }


}

Service.RequiredProperties = ["name", "type", "version"];

/**
 * Unique identifier for this Service or API
 * @member {String} id
 */
Service.prototype['id'] = undefined;

/**
 * @member {module:model/Metadata} metadata
 */
Service.prototype['metadata'] = undefined;

/**
 * Distinct name for this Service or API (maybe shared among many versions)
 * @member {String} name
 */
Service.prototype['name'] = undefined;

/**
 * Set of Operations for Service or API
 * @member {Array.<module:model/Operation>} operations
 */
Service.prototype['operations'] = undefined;

/**
 * Service or API Type
 * @member {module:model/Service.TypeEnum} type
 */
Service.prototype['type'] = undefined;

/**
 * Distinct version for a named Service or API
 * @member {String} version
 */
Service.prototype['version'] = undefined;

/**
 * Associated Xml Namespace in case of Xml based Service
 * @member {String} xmlNS
 */
Service.prototype['xmlNS'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Service['TypeEnum'] = {

    /**
     * value: "REST"
     * @const
     */
    "REST": "REST",

    /**
     * value: "SOAP_HTTP"
     * @const
     */
    "SOAP_HTTP": "SOAP_HTTP",

    /**
     * value: "GENERIC_REST"
     * @const
     */
    "GENERIC_REST": "GENERIC_REST",

    /**
     * value: "GENERIC_EVENT"
     * @const
     */
    "GENERIC_EVENT": "GENERIC_EVENT",

    /**
     * value: "EVENT"
     * @const
     */
    "EVENT": "EVENT",

    /**
     * value: "GRPC"
     * @const
     */
    "GRPC": "GRPC",

    /**
     * value: "GRAPHQL"
     * @const
     */
    "GRAPHQL": "GRAPHQL"
};



export default Service;

