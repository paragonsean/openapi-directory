/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';
import SecretRef from './SecretRef';
import ServiceRef from './ServiceRef';

/**
 * The ImportJob model module.
 * @module model/ImportJob
 * @version 1.7.0
 */
class ImportJob {
    /**
     * Constructs a new <code>ImportJob</code>.
     * An ImportJob allow defining a repository artifact to poll for discovering Services and APIs mocks and tests
     * @alias module:model/ImportJob
     * @param name {String} Unique distinct name of this ImportJob
     * @param repositoryUrl {String} URL of mocks and tests repository artifact
     */
    constructor(name, repositoryUrl) { 
        
        ImportJob.initialize(this, name, repositoryUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, repositoryUrl) { 
        obj['name'] = name;
        obj['repositoryUrl'] = repositoryUrl;
    }

    /**
     * Constructs a <code>ImportJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportJob} obj Optional instance to populate.
     * @return {module:model/ImportJob} The populated <code>ImportJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportJob();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastImportDate')) {
                obj['lastImportDate'] = ApiClient.convertToType(data['lastImportDate'], 'Date');
            }
            if (data.hasOwnProperty('lastImportError')) {
                obj['lastImportError'] = ApiClient.convertToType(data['lastImportError'], 'String');
            }
            if (data.hasOwnProperty('mainArtifact')) {
                obj['mainArtifact'] = ApiClient.convertToType(data['mainArtifact'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = Metadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('repositoryDisableSSLValidation')) {
                obj['repositoryDisableSSLValidation'] = ApiClient.convertToType(data['repositoryDisableSSLValidation'], 'Boolean');
            }
            if (data.hasOwnProperty('repositoryUrl')) {
                obj['repositoryUrl'] = ApiClient.convertToType(data['repositoryUrl'], 'String');
            }
            if (data.hasOwnProperty('secretRef')) {
                obj['secretRef'] = SecretRef.constructFromObject(data['secretRef']);
            }
            if (data.hasOwnProperty('serviceRefs')) {
                obj['serviceRefs'] = ApiClient.convertToType(data['serviceRefs'], [ServiceRef]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportJob</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportJob.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastImportError'] && !(typeof data['lastImportError'] === 'string' || data['lastImportError'] instanceof String)) {
            throw new Error("Expected the field `lastImportError` to be a primitive type in the JSON string but got " + data['lastImportError']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          Metadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['repositoryUrl'] && !(typeof data['repositoryUrl'] === 'string' || data['repositoryUrl'] instanceof String)) {
            throw new Error("Expected the field `repositoryUrl` to be a primitive type in the JSON string but got " + data['repositoryUrl']);
        }
        // validate the optional field `secretRef`
        if (data['secretRef']) { // data not null
          SecretRef.validateJSON(data['secretRef']);
        }
        if (data['serviceRefs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceRefs'])) {
                throw new Error("Expected the field `serviceRefs` to be an array in the JSON data but got " + data['serviceRefs']);
            }
            // validate the optional field `serviceRefs` (array)
            for (const item of data['serviceRefs']) {
                ServiceRef.validateJSON(item);
            };
        }

        return true;
    }


}

ImportJob.RequiredProperties = ["name", "repositoryUrl"];

/**
 * Whether this ImportJob is active (ie. scheduled for execution)
 * @member {Boolean} active
 */
ImportJob.prototype['active'] = undefined;

/**
 * Creation date for this ImportJob
 * @member {Date} createdDate
 */
ImportJob.prototype['createdDate'] = undefined;

/**
 * Etag of repository URL during previous import. Is used for not re-importing if no recent changes
 * @member {String} etag
 */
ImportJob.prototype['etag'] = undefined;

/**
 * Reserved for future usage
 * @member {String} frequency
 */
ImportJob.prototype['frequency'] = undefined;

/**
 * Unique identifier of ImportJob
 * @member {String} id
 */
ImportJob.prototype['id'] = undefined;

/**
 * Date last import was done
 * @member {Date} lastImportDate
 */
ImportJob.prototype['lastImportDate'] = undefined;

/**
 * Error message of last import (if any)
 * @member {String} lastImportError
 */
ImportJob.prototype['lastImportError'] = undefined;

/**
 * Flag telling if considered as primary or secondary artifact. Default to `true`
 * @member {Boolean} mainArtifact
 */
ImportJob.prototype['mainArtifact'] = undefined;

/**
 * @member {module:model/Metadata} metadata
 */
ImportJob.prototype['metadata'] = undefined;

/**
 * Unique distinct name of this ImportJob
 * @member {String} name
 */
ImportJob.prototype['name'] = undefined;

/**
 * Whether to disable SSL certificate verification when checking repository
 * @member {Boolean} repositoryDisableSSLValidation
 */
ImportJob.prototype['repositoryDisableSSLValidation'] = undefined;

/**
 * URL of mocks and tests repository artifact
 * @member {String} repositoryUrl
 */
ImportJob.prototype['repositoryUrl'] = undefined;

/**
 * @member {module:model/SecretRef} secretRef
 */
ImportJob.prototype['secretRef'] = undefined;

/**
 * References of Services discovered when checking repository
 * @member {Array.<module:model/ServiceRef>} serviceRefs
 */
ImportJob.prototype['serviceRefs'] = undefined;






export default ImportJob;

