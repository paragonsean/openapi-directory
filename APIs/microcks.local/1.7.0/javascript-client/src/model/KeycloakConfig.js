/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeycloakConfig model module.
 * @module model/KeycloakConfig
 * @version 1.7.0
 */
class KeycloakConfig {
    /**
     * Constructs a new <code>KeycloakConfig</code>.
     * Representation of Keycloak / SSO configuration used by Microcks server
     * @alias module:model/KeycloakConfig
     * @param authServerUrl {String} SSO Server authentication url
     * @param enabled {Boolean} Whether Keycloak authentification and usage is enabled
     * @param publicClient {String} Name of public-client that can be used for requesting OAuth token
     * @param realm {String} Authentication realm name
     * @param resource {String} Name of Keycloak resource/application used on client side
     * @param sslRequired {module:model/KeycloakConfig.SslRequiredEnum} SSL certificates requirements
     */
    constructor(authServerUrl, enabled, publicClient, realm, resource, sslRequired) { 
        
        KeycloakConfig.initialize(this, authServerUrl, enabled, publicClient, realm, resource, sslRequired);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authServerUrl, enabled, publicClient, realm, resource, sslRequired) { 
        obj['auth-server-url'] = authServerUrl;
        obj['enabled'] = enabled;
        obj['public-client'] = publicClient;
        obj['realm'] = realm;
        obj['resource'] = resource;
        obj['ssl-required'] = sslRequired;
    }

    /**
     * Constructs a <code>KeycloakConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeycloakConfig} obj Optional instance to populate.
     * @return {module:model/KeycloakConfig} The populated <code>KeycloakConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeycloakConfig();

            if (data.hasOwnProperty('auth-server-url')) {
                obj['auth-server-url'] = ApiClient.convertToType(data['auth-server-url'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('public-client')) {
                obj['public-client'] = ApiClient.convertToType(data['public-client'], 'String');
            }
            if (data.hasOwnProperty('realm')) {
                obj['realm'] = ApiClient.convertToType(data['realm'], 'String');
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = ApiClient.convertToType(data['resource'], 'String');
            }
            if (data.hasOwnProperty('ssl-required')) {
                obj['ssl-required'] = ApiClient.convertToType(data['ssl-required'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeycloakConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeycloakConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeycloakConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['auth-server-url'] && !(typeof data['auth-server-url'] === 'string' || data['auth-server-url'] instanceof String)) {
            throw new Error("Expected the field `auth-server-url` to be a primitive type in the JSON string but got " + data['auth-server-url']);
        }
        // ensure the json data is a string
        if (data['public-client'] && !(typeof data['public-client'] === 'string' || data['public-client'] instanceof String)) {
            throw new Error("Expected the field `public-client` to be a primitive type in the JSON string but got " + data['public-client']);
        }
        // ensure the json data is a string
        if (data['realm'] && !(typeof data['realm'] === 'string' || data['realm'] instanceof String)) {
            throw new Error("Expected the field `realm` to be a primitive type in the JSON string but got " + data['realm']);
        }
        // ensure the json data is a string
        if (data['resource'] && !(typeof data['resource'] === 'string' || data['resource'] instanceof String)) {
            throw new Error("Expected the field `resource` to be a primitive type in the JSON string but got " + data['resource']);
        }
        // ensure the json data is a string
        if (data['ssl-required'] && !(typeof data['ssl-required'] === 'string' || data['ssl-required'] instanceof String)) {
            throw new Error("Expected the field `ssl-required` to be a primitive type in the JSON string but got " + data['ssl-required']);
        }

        return true;
    }


}

KeycloakConfig.RequiredProperties = ["auth-server-url", "enabled", "public-client", "realm", "resource", "ssl-required"];

/**
 * SSO Server authentication url
 * @member {String} auth-server-url
 */
KeycloakConfig.prototype['auth-server-url'] = undefined;

/**
 * Whether Keycloak authentification and usage is enabled
 * @member {Boolean} enabled
 */
KeycloakConfig.prototype['enabled'] = undefined;

/**
 * Name of public-client that can be used for requesting OAuth token
 * @member {String} public-client
 */
KeycloakConfig.prototype['public-client'] = undefined;

/**
 * Authentication realm name
 * @member {String} realm
 */
KeycloakConfig.prototype['realm'] = undefined;

/**
 * Name of Keycloak resource/application used on client side
 * @member {String} resource
 */
KeycloakConfig.prototype['resource'] = undefined;

/**
 * SSL certificates requirements
 * @member {module:model/KeycloakConfig.SslRequiredEnum} ssl-required
 */
KeycloakConfig.prototype['ssl-required'] = undefined;





/**
 * Allowed values for the <code>ssl-required</code> property.
 * @enum {String}
 * @readonly
 */
KeycloakConfig['SslRequiredEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "external"
     * @const
     */
    "external": "external"
};



export default KeycloakConfig;

