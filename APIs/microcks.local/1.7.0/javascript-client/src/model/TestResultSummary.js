/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestResultSummary model module.
 * @module model/TestResultSummary
 * @version 1.7.0
 */
class TestResultSummary {
    /**
     * Constructs a new <code>TestResultSummary</code>.
     * Represents the summary result of a Service or API test run by Microcks. 
     * @alias module:model/TestResultSummary
     * @param id {String} Unique identifier of TestResult
     * @param serviceId {String} Unique identifier of service tested
     * @param success {Boolean} Flag telling if test is a success
     * @param testDate {Number} Timestamp of creation date of this service
     */
    constructor(id, serviceId, success, testDate) { 
        
        TestResultSummary.initialize(this, id, serviceId, success, testDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, serviceId, success, testDate) { 
        obj['id'] = id;
        obj['serviceId'] = serviceId;
        obj['success'] = success;
        obj['testDate'] = testDate;
    }

    /**
     * Constructs a <code>TestResultSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestResultSummary} obj Optional instance to populate.
     * @return {module:model/TestResultSummary} The populated <code>TestResultSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestResultSummary();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
            if (data.hasOwnProperty('testDate')) {
                obj['testDate'] = ApiClient.convertToType(data['testDate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestResultSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestResultSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestResultSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }

        return true;
    }


}

TestResultSummary.RequiredProperties = ["id", "serviceId", "success", "testDate"];

/**
 * Unique identifier of TestResult
 * @member {String} id
 */
TestResultSummary.prototype['id'] = undefined;

/**
 * Unique identifier of service tested
 * @member {String} serviceId
 */
TestResultSummary.prototype['serviceId'] = undefined;

/**
 * Flag telling if test is a success
 * @member {Boolean} success
 */
TestResultSummary.prototype['success'] = undefined;

/**
 * Timestamp of creation date of this service
 * @member {Number} testDate
 */
TestResultSummary.prototype['testDate'] = undefined;






export default TestResultSummary;

