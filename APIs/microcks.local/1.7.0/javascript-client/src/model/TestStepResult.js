/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestStepResult model module.
 * @module model/TestStepResult
 * @version 1.7.0
 */
class TestStepResult {
    /**
     * Constructs a new <code>TestStepResult</code>.
     * TestStepResult is an entity embedded within TestCaseResult. They are created for each request associated with an operation / action of a microservice.
     * @alias module:model/TestStepResult
     * @param success {Boolean} Flag telling if test case is a success
     */
    constructor(success) { 
        
        TestStepResult.initialize(this, success);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, success) { 
        obj['success'] = success;
    }

    /**
     * Constructs a <code>TestStepResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestStepResult} obj Optional instance to populate.
     * @return {module:model/TestStepResult} The populated <code>TestStepResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestStepResult();

            if (data.hasOwnProperty('elapsedTime')) {
                obj['elapsedTime'] = ApiClient.convertToType(data['elapsedTime'], 'Number');
            }
            if (data.hasOwnProperty('eventMessageName')) {
                obj['eventMessageName'] = ApiClient.convertToType(data['eventMessageName'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('requestName')) {
                obj['requestName'] = ApiClient.convertToType(data['requestName'], 'String');
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestStepResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestStepResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestStepResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['eventMessageName'] && !(typeof data['eventMessageName'] === 'string' || data['eventMessageName'] instanceof String)) {
            throw new Error("Expected the field `eventMessageName` to be a primitive type in the JSON string but got " + data['eventMessageName']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['requestName'] && !(typeof data['requestName'] === 'string' || data['requestName'] instanceof String)) {
            throw new Error("Expected the field `requestName` to be a primitive type in the JSON string but got " + data['requestName']);
        }

        return true;
    }


}

TestStepResult.RequiredProperties = ["success"];

/**
 * Elapsed time in milliseconds since the test step beginning
 * @member {Number} elapsedTime
 */
TestStepResult.prototype['elapsedTime'] = undefined;

/**
 * Name of event this test step is bound to
 * @member {String} eventMessageName
 */
TestStepResult.prototype['eventMessageName'] = undefined;

/**
 * Error message that may be associated to this test step
 * @member {String} message
 */
TestStepResult.prototype['message'] = undefined;

/**
 * Name of request this test step is bound to
 * @member {String} requestName
 */
TestStepResult.prototype['requestName'] = undefined;

/**
 * Flag telling if test case is a success
 * @member {Boolean} success
 */
TestStepResult.prototype['success'] = undefined;






export default TestStepResult;

