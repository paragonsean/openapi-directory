/**
 * Microcks API v1.7
 * API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: laurent@microcks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AbstractExchange from './model/AbstractExchange';
import Binding from './model/Binding';
import Counter from './model/Counter';
import DailyInvocationStatistic from './model/DailyInvocationStatistic';
import EventMessage from './model/EventMessage';
import Exchange from './model/Exchange';
import FeaturesConfig from './model/FeaturesConfig';
import FeaturesConfigAsyncApi from './model/FeaturesConfigAsyncApi';
import FeaturesConfigMicrocksHub from './model/FeaturesConfigMicrocksHub';
import FeaturesConfigRepositoryFilter from './model/FeaturesConfigRepositoryFilter';
import FeaturesConfigRepositoryTenancy from './model/FeaturesConfigRepositoryTenancy';
import GetService200Response from './model/GetService200Response';
import Header from './model/Header';
import HeaderDTO from './model/HeaderDTO';
import ImportJob from './model/ImportJob';
import KeycloakConfig from './model/KeycloakConfig';
import Metadata from './model/Metadata';
import Operation from './model/Operation';
import OperationOverrideDTO from './model/OperationOverrideDTO';
import ParameterConstraint from './model/ParameterConstraint';
import Request from './model/Request';
import RequestResponsePair from './model/RequestResponsePair';
import Resource from './model/Resource';
import ResourceType from './model/ResourceType';
import Response from './model/Response';
import Secret from './model/Secret';
import SecretRef from './model/SecretRef';
import Service from './model/Service';
import ServiceRef from './model/ServiceRef';
import ServiceView from './model/ServiceView';
import TestCaseResult from './model/TestCaseResult';
import TestCaseReturnDTO from './model/TestCaseReturnDTO';
import TestConformanceMetric from './model/TestConformanceMetric';
import TestRequest from './model/TestRequest';
import TestResult from './model/TestResult';
import TestResultSummary from './model/TestResultSummary';
import TestReturn from './model/TestReturn';
import TestRunnerType from './model/TestRunnerType';
import TestStepResult from './model/TestStepResult';
import Trend from './model/Trend';
import UnidirectionalEvent from './model/UnidirectionalEvent';
import WeightedMetricValue from './model/WeightedMetricValue';
import ConfigApi from './api/ConfigApi';
import DefaultApi from './api/DefaultApi';
import JobApi from './api/JobApi';
import MetricsApi from './api/MetricsApi';
import MockApi from './api/MockApi';
import TestApi from './api/TestApi';


/**
* API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io).<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var MicrocksApiV17 = require('index'); // See note below*.
* var xxxSvc = new MicrocksApiV17.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new MicrocksApiV17.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new MicrocksApiV17.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new MicrocksApiV17.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.7.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AbstractExchange model constructor.
     * @property {module:model/AbstractExchange}
     */
    AbstractExchange,

    /**
     * The Binding model constructor.
     * @property {module:model/Binding}
     */
    Binding,

    /**
     * The Counter model constructor.
     * @property {module:model/Counter}
     */
    Counter,

    /**
     * The DailyInvocationStatistic model constructor.
     * @property {module:model/DailyInvocationStatistic}
     */
    DailyInvocationStatistic,

    /**
     * The EventMessage model constructor.
     * @property {module:model/EventMessage}
     */
    EventMessage,

    /**
     * The Exchange model constructor.
     * @property {module:model/Exchange}
     */
    Exchange,

    /**
     * The FeaturesConfig model constructor.
     * @property {module:model/FeaturesConfig}
     */
    FeaturesConfig,

    /**
     * The FeaturesConfigAsyncApi model constructor.
     * @property {module:model/FeaturesConfigAsyncApi}
     */
    FeaturesConfigAsyncApi,

    /**
     * The FeaturesConfigMicrocksHub model constructor.
     * @property {module:model/FeaturesConfigMicrocksHub}
     */
    FeaturesConfigMicrocksHub,

    /**
     * The FeaturesConfigRepositoryFilter model constructor.
     * @property {module:model/FeaturesConfigRepositoryFilter}
     */
    FeaturesConfigRepositoryFilter,

    /**
     * The FeaturesConfigRepositoryTenancy model constructor.
     * @property {module:model/FeaturesConfigRepositoryTenancy}
     */
    FeaturesConfigRepositoryTenancy,

    /**
     * The GetService200Response model constructor.
     * @property {module:model/GetService200Response}
     */
    GetService200Response,

    /**
     * The Header model constructor.
     * @property {module:model/Header}
     */
    Header,

    /**
     * The HeaderDTO model constructor.
     * @property {module:model/HeaderDTO}
     */
    HeaderDTO,

    /**
     * The ImportJob model constructor.
     * @property {module:model/ImportJob}
     */
    ImportJob,

    /**
     * The KeycloakConfig model constructor.
     * @property {module:model/KeycloakConfig}
     */
    KeycloakConfig,

    /**
     * The Metadata model constructor.
     * @property {module:model/Metadata}
     */
    Metadata,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The OperationOverrideDTO model constructor.
     * @property {module:model/OperationOverrideDTO}
     */
    OperationOverrideDTO,

    /**
     * The ParameterConstraint model constructor.
     * @property {module:model/ParameterConstraint}
     */
    ParameterConstraint,

    /**
     * The Request model constructor.
     * @property {module:model/Request}
     */
    Request,

    /**
     * The RequestResponsePair model constructor.
     * @property {module:model/RequestResponsePair}
     */
    RequestResponsePair,

    /**
     * The Resource model constructor.
     * @property {module:model/Resource}
     */
    Resource,

    /**
     * The ResourceType model constructor.
     * @property {module:model/ResourceType}
     */
    ResourceType,

    /**
     * The Response model constructor.
     * @property {module:model/Response}
     */
    Response,

    /**
     * The Secret model constructor.
     * @property {module:model/Secret}
     */
    Secret,

    /**
     * The SecretRef model constructor.
     * @property {module:model/SecretRef}
     */
    SecretRef,

    /**
     * The Service model constructor.
     * @property {module:model/Service}
     */
    Service,

    /**
     * The ServiceRef model constructor.
     * @property {module:model/ServiceRef}
     */
    ServiceRef,

    /**
     * The ServiceView model constructor.
     * @property {module:model/ServiceView}
     */
    ServiceView,

    /**
     * The TestCaseResult model constructor.
     * @property {module:model/TestCaseResult}
     */
    TestCaseResult,

    /**
     * The TestCaseReturnDTO model constructor.
     * @property {module:model/TestCaseReturnDTO}
     */
    TestCaseReturnDTO,

    /**
     * The TestConformanceMetric model constructor.
     * @property {module:model/TestConformanceMetric}
     */
    TestConformanceMetric,

    /**
     * The TestRequest model constructor.
     * @property {module:model/TestRequest}
     */
    TestRequest,

    /**
     * The TestResult model constructor.
     * @property {module:model/TestResult}
     */
    TestResult,

    /**
     * The TestResultSummary model constructor.
     * @property {module:model/TestResultSummary}
     */
    TestResultSummary,

    /**
     * The TestReturn model constructor.
     * @property {module:model/TestReturn}
     */
    TestReturn,

    /**
     * The TestRunnerType model constructor.
     * @property {module:model/TestRunnerType}
     */
    TestRunnerType,

    /**
     * The TestStepResult model constructor.
     * @property {module:model/TestStepResult}
     */
    TestStepResult,

    /**
     * The Trend model constructor.
     * @property {module:model/Trend}
     */
    Trend,

    /**
     * The UnidirectionalEvent model constructor.
     * @property {module:model/UnidirectionalEvent}
     */
    UnidirectionalEvent,

    /**
     * The WeightedMetricValue model constructor.
     * @property {module:model/WeightedMetricValue}
     */
    WeightedMetricValue,

    /**
    * The ConfigApi service constructor.
    * @property {module:api/ConfigApi}
    */
    ConfigApi,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi,

    /**
    * The JobApi service constructor.
    * @property {module:api/JobApi}
    */
    JobApi,

    /**
    * The MetricsApi service constructor.
    * @property {module:api/MetricsApi}
    */
    MetricsApi,

    /**
    * The MockApi service constructor.
    * @property {module:api/MockApi}
    */
    MockApi,

    /**
    * The TestApi service constructor.
    * @property {module:api/TestApi}
    */
    TestApi
};
