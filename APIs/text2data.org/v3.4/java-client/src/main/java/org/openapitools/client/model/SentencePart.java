/*
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SentencePart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:23.220198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SentencePart {
  public static final String SERIALIZED_NAME_KEYWORD_TYPE = "KeywordType";
  @SerializedName(SERIALIZED_NAME_KEYWORD_TYPE)
  private String keywordType;

  public static final String SERIALIZED_NAME_MAGNITUDE = "Magnitude";
  @SerializedName(SERIALIZED_NAME_MAGNITUDE)
  private Double magnitude;

  public static final String SERIALIZED_NAME_MENTIONS = "Mentions";
  @SerializedName(SERIALIZED_NAME_MENTIONS)
  private Integer mentions;

  public static final String SERIALIZED_NAME_SENTENCE_PART_TYPE = "SentencePartType";
  @SerializedName(SERIALIZED_NAME_SENTENCE_PART_TYPE)
  private String sentencePartType;

  public static final String SERIALIZED_NAME_SENTENCE_TEXT = "SentenceText";
  @SerializedName(SERIALIZED_NAME_SENTENCE_TEXT)
  private String sentenceText;

  public static final String SERIALIZED_NAME_SENTIMENT_POLARITY = "SentimentPolarity";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_POLARITY)
  private String sentimentPolarity;

  public static final String SERIALIZED_NAME_SENTIMENT_RESULT = "SentimentResult";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_RESULT)
  private String sentimentResult;

  public static final String SERIALIZED_NAME_SENTIMENT_VALUE = "SentimentValue";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_VALUE)
  private Double sentimentValue;

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public SentencePart() {
  }

  public SentencePart keywordType(String keywordType) {
    this.keywordType = keywordType;
    return this;
  }

  /**
   * Get keywordType
   * @return keywordType
   */
  @javax.annotation.Nullable
  public String getKeywordType() {
    return keywordType;
  }

  public void setKeywordType(String keywordType) {
    this.keywordType = keywordType;
  }


  public SentencePart magnitude(Double magnitude) {
    this.magnitude = magnitude;
    return this;
  }

  /**
   * Get magnitude
   * @return magnitude
   */
  @javax.annotation.Nullable
  public Double getMagnitude() {
    return magnitude;
  }

  public void setMagnitude(Double magnitude) {
    this.magnitude = magnitude;
  }


  public SentencePart mentions(Integer mentions) {
    this.mentions = mentions;
    return this;
  }

  /**
   * Get mentions
   * @return mentions
   */
  @javax.annotation.Nullable
  public Integer getMentions() {
    return mentions;
  }

  public void setMentions(Integer mentions) {
    this.mentions = mentions;
  }


  public SentencePart sentencePartType(String sentencePartType) {
    this.sentencePartType = sentencePartType;
    return this;
  }

  /**
   * Get sentencePartType
   * @return sentencePartType
   */
  @javax.annotation.Nullable
  public String getSentencePartType() {
    return sentencePartType;
  }

  public void setSentencePartType(String sentencePartType) {
    this.sentencePartType = sentencePartType;
  }


  public SentencePart sentenceText(String sentenceText) {
    this.sentenceText = sentenceText;
    return this;
  }

  /**
   * Get sentenceText
   * @return sentenceText
   */
  @javax.annotation.Nullable
  public String getSentenceText() {
    return sentenceText;
  }

  public void setSentenceText(String sentenceText) {
    this.sentenceText = sentenceText;
  }


  public SentencePart sentimentPolarity(String sentimentPolarity) {
    this.sentimentPolarity = sentimentPolarity;
    return this;
  }

  /**
   * Get sentimentPolarity
   * @return sentimentPolarity
   */
  @javax.annotation.Nullable
  public String getSentimentPolarity() {
    return sentimentPolarity;
  }

  public void setSentimentPolarity(String sentimentPolarity) {
    this.sentimentPolarity = sentimentPolarity;
  }


  public SentencePart sentimentResult(String sentimentResult) {
    this.sentimentResult = sentimentResult;
    return this;
  }

  /**
   * Get sentimentResult
   * @return sentimentResult
   */
  @javax.annotation.Nullable
  public String getSentimentResult() {
    return sentimentResult;
  }

  public void setSentimentResult(String sentimentResult) {
    this.sentimentResult = sentimentResult;
  }


  public SentencePart sentimentValue(Double sentimentValue) {
    this.sentimentValue = sentimentValue;
    return this;
  }

  /**
   * Get sentimentValue
   * @return sentimentValue
   */
  @javax.annotation.Nullable
  public Double getSentimentValue() {
    return sentimentValue;
  }

  public void setSentimentValue(Double sentimentValue) {
    this.sentimentValue = sentimentValue;
  }


  public SentencePart text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentencePart sentencePart = (SentencePart) o;
    return Objects.equals(this.keywordType, sentencePart.keywordType) &&
        Objects.equals(this.magnitude, sentencePart.magnitude) &&
        Objects.equals(this.mentions, sentencePart.mentions) &&
        Objects.equals(this.sentencePartType, sentencePart.sentencePartType) &&
        Objects.equals(this.sentenceText, sentencePart.sentenceText) &&
        Objects.equals(this.sentimentPolarity, sentencePart.sentimentPolarity) &&
        Objects.equals(this.sentimentResult, sentencePart.sentimentResult) &&
        Objects.equals(this.sentimentValue, sentencePart.sentimentValue) &&
        Objects.equals(this.text, sentencePart.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keywordType, magnitude, mentions, sentencePartType, sentenceText, sentimentPolarity, sentimentResult, sentimentValue, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentencePart {\n");
    sb.append("    keywordType: ").append(toIndentedString(keywordType)).append("\n");
    sb.append("    magnitude: ").append(toIndentedString(magnitude)).append("\n");
    sb.append("    mentions: ").append(toIndentedString(mentions)).append("\n");
    sb.append("    sentencePartType: ").append(toIndentedString(sentencePartType)).append("\n");
    sb.append("    sentenceText: ").append(toIndentedString(sentenceText)).append("\n");
    sb.append("    sentimentPolarity: ").append(toIndentedString(sentimentPolarity)).append("\n");
    sb.append("    sentimentResult: ").append(toIndentedString(sentimentResult)).append("\n");
    sb.append("    sentimentValue: ").append(toIndentedString(sentimentValue)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("KeywordType");
    openapiFields.add("Magnitude");
    openapiFields.add("Mentions");
    openapiFields.add("SentencePartType");
    openapiFields.add("SentenceText");
    openapiFields.add("SentimentPolarity");
    openapiFields.add("SentimentResult");
    openapiFields.add("SentimentValue");
    openapiFields.add("Text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SentencePart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SentencePart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SentencePart is not found in the empty JSON string", SentencePart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SentencePart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SentencePart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("KeywordType") != null && !jsonObj.get("KeywordType").isJsonNull()) && !jsonObj.get("KeywordType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeywordType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KeywordType").toString()));
      }
      if ((jsonObj.get("SentencePartType") != null && !jsonObj.get("SentencePartType").isJsonNull()) && !jsonObj.get("SentencePartType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SentencePartType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SentencePartType").toString()));
      }
      if ((jsonObj.get("SentenceText") != null && !jsonObj.get("SentenceText").isJsonNull()) && !jsonObj.get("SentenceText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SentenceText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SentenceText").toString()));
      }
      if ((jsonObj.get("SentimentPolarity") != null && !jsonObj.get("SentimentPolarity").isJsonNull()) && !jsonObj.get("SentimentPolarity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SentimentPolarity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SentimentPolarity").toString()));
      }
      if ((jsonObj.get("SentimentResult") != null && !jsonObj.get("SentimentResult").isJsonNull()) && !jsonObj.get("SentimentResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SentimentResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SentimentResult").toString()));
      }
      if ((jsonObj.get("Text") != null && !jsonObj.get("Text").isJsonNull()) && !jsonObj.get("Text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SentencePart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SentencePart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SentencePart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SentencePart.class));

       return (TypeAdapter<T>) new TypeAdapter<SentencePart>() {
           @Override
           public void write(JsonWriter out, SentencePart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SentencePart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SentencePart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SentencePart
   * @throws IOException if the JSON string is invalid with respect to SentencePart
   */
  public static SentencePart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SentencePart.class);
  }

  /**
   * Convert an instance of SentencePart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

