/*
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:23.220198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiConfig {
  public static final String SERIALIZED_NAME_AP_I_PRIVATE_KEY = "APIPrivateKey";
  @SerializedName(SERIALIZED_NAME_AP_I_PRIVATE_KEY)
  private String apIPrivateKey;

  public static final String SERIALIZED_NAME_AP_I_SECRET = "APISecret";
  @SerializedName(SERIALIZED_NAME_AP_I_SECRET)
  private String apISecret;

  public static final String SERIALIZED_NAME_BLACKLISTED_WORDS = "BlacklistedWords";
  @SerializedName(SERIALIZED_NAME_BLACKLISTED_WORDS)
  private List<String> blacklistedWords = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_IS_REQUEST_STATUS_O_K = "IsRequestStatusOK";
  @SerializedName(SERIALIZED_NAME_IS_REQUEST_STATUS_O_K)
  private Boolean isRequestStatusOK;

  public ApiConfig() {
  }

  public ApiConfig apIPrivateKey(String apIPrivateKey) {
    this.apIPrivateKey = apIPrivateKey;
    return this;
  }

  /**
   * Get apIPrivateKey
   * @return apIPrivateKey
   */
  @javax.annotation.Nullable
  public String getApIPrivateKey() {
    return apIPrivateKey;
  }

  public void setApIPrivateKey(String apIPrivateKey) {
    this.apIPrivateKey = apIPrivateKey;
  }


  public ApiConfig apISecret(String apISecret) {
    this.apISecret = apISecret;
    return this;
  }

  /**
   * Get apISecret
   * @return apISecret
   */
  @javax.annotation.Nullable
  public String getApISecret() {
    return apISecret;
  }

  public void setApISecret(String apISecret) {
    this.apISecret = apISecret;
  }


  public ApiConfig blacklistedWords(List<String> blacklistedWords) {
    this.blacklistedWords = blacklistedWords;
    return this;
  }

  public ApiConfig addBlacklistedWordsItem(String blacklistedWordsItem) {
    if (this.blacklistedWords == null) {
      this.blacklistedWords = new ArrayList<>();
    }
    this.blacklistedWords.add(blacklistedWordsItem);
    return this;
  }

  /**
   * Get blacklistedWords
   * @return blacklistedWords
   */
  @javax.annotation.Nullable
  public List<String> getBlacklistedWords() {
    return blacklistedWords;
  }

  public void setBlacklistedWords(List<String> blacklistedWords) {
    this.blacklistedWords = blacklistedWords;
  }


  public ApiConfig errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public ApiConfig isRequestStatusOK(Boolean isRequestStatusOK) {
    this.isRequestStatusOK = isRequestStatusOK;
    return this;
  }

  /**
   * Get isRequestStatusOK
   * @return isRequestStatusOK
   */
  @javax.annotation.Nullable
  public Boolean getIsRequestStatusOK() {
    return isRequestStatusOK;
  }

  public void setIsRequestStatusOK(Boolean isRequestStatusOK) {
    this.isRequestStatusOK = isRequestStatusOK;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiConfig apiConfig = (ApiConfig) o;
    return Objects.equals(this.apIPrivateKey, apiConfig.apIPrivateKey) &&
        Objects.equals(this.apISecret, apiConfig.apISecret) &&
        Objects.equals(this.blacklistedWords, apiConfig.blacklistedWords) &&
        Objects.equals(this.errorMessage, apiConfig.errorMessage) &&
        Objects.equals(this.isRequestStatusOK, apiConfig.isRequestStatusOK);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apIPrivateKey, apISecret, blacklistedWords, errorMessage, isRequestStatusOK);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiConfig {\n");
    sb.append("    apIPrivateKey: ").append(toIndentedString(apIPrivateKey)).append("\n");
    sb.append("    apISecret: ").append(toIndentedString(apISecret)).append("\n");
    sb.append("    blacklistedWords: ").append(toIndentedString(blacklistedWords)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    isRequestStatusOK: ").append(toIndentedString(isRequestStatusOK)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("APIPrivateKey");
    openapiFields.add("APISecret");
    openapiFields.add("BlacklistedWords");
    openapiFields.add("ErrorMessage");
    openapiFields.add("IsRequestStatusOK");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiConfig is not found in the empty JSON string", ApiConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("APIPrivateKey") != null && !jsonObj.get("APIPrivateKey").isJsonNull()) && !jsonObj.get("APIPrivateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APIPrivateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APIPrivateKey").toString()));
      }
      if ((jsonObj.get("APISecret") != null && !jsonObj.get("APISecret").isJsonNull()) && !jsonObj.get("APISecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APISecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APISecret").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("BlacklistedWords") != null && !jsonObj.get("BlacklistedWords").isJsonNull() && !jsonObj.get("BlacklistedWords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BlacklistedWords` to be an array in the JSON string but got `%s`", jsonObj.get("BlacklistedWords").toString()));
      }
      if ((jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) && !jsonObj.get("ErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ErrorMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiConfig>() {
           @Override
           public void write(JsonWriter out, ApiConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiConfig
   * @throws IOException if the JSON string is invalid with respect to ApiConfig
   */
  public static ApiConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiConfig.class);
  }

  /**
   * Convert an instance of ApiConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

