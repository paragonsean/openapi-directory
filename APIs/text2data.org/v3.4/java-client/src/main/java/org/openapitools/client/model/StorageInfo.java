/*
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StorageInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:23.220198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageInfo {
  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_DOCUMENT_TEXT = "DocumentText";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TEXT)
  private String documentText;

  public static final String SERIALIZED_NAME_I_P = "IP";
  @SerializedName(SERIALIZED_NAME_I_P)
  private String IP;

  public static final String SERIALIZED_NAME_IS_EXCEL = "IsExcel";
  @SerializedName(SERIALIZED_NAME_IS_EXCEL)
  private Boolean isExcel;

  public static final String SERIALIZED_NAME_IS_G_S_EXCEL = "IsGSExcel";
  @SerializedName(SERIALIZED_NAME_IS_G_S_EXCEL)
  private Boolean isGSExcel;

  public static final String SERIALIZED_NAME_IS_TWITTER_MODE = "IsTwitterMode";
  @SerializedName(SERIALIZED_NAME_IS_TWITTER_MODE)
  private Boolean isTwitterMode;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "PrivateKey";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public static final String SERIALIZED_NAME_REQUEST_IDENTIFIER = "RequestIdentifier";
  @SerializedName(SERIALIZED_NAME_REQUEST_IDENTIFIER)
  private String requestIdentifier;

  public static final String SERIALIZED_NAME_USER_CATEGORY_MODEL_NAME = "UserCategoryModelName";
  @SerializedName(SERIALIZED_NAME_USER_CATEGORY_MODEL_NAME)
  private String userCategoryModelName;

  public StorageInfo() {
  }

  public StorageInfo createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public StorageInfo documentText(String documentText) {
    this.documentText = documentText;
    return this;
  }

  /**
   * Get documentText
   * @return documentText
   */
  @javax.annotation.Nullable
  public String getDocumentText() {
    return documentText;
  }

  public void setDocumentText(String documentText) {
    this.documentText = documentText;
  }


  public StorageInfo IP(String IP) {
    this.IP = IP;
    return this;
  }

  /**
   * Get IP
   * @return IP
   */
  @javax.annotation.Nullable
  public String getIP() {
    return IP;
  }

  public void setIP(String IP) {
    this.IP = IP;
  }


  public StorageInfo isExcel(Boolean isExcel) {
    this.isExcel = isExcel;
    return this;
  }

  /**
   * Get isExcel
   * @return isExcel
   */
  @javax.annotation.Nullable
  public Boolean getIsExcel() {
    return isExcel;
  }

  public void setIsExcel(Boolean isExcel) {
    this.isExcel = isExcel;
  }


  public StorageInfo isGSExcel(Boolean isGSExcel) {
    this.isGSExcel = isGSExcel;
    return this;
  }

  /**
   * Get isGSExcel
   * @return isGSExcel
   */
  @javax.annotation.Nullable
  public Boolean getIsGSExcel() {
    return isGSExcel;
  }

  public void setIsGSExcel(Boolean isGSExcel) {
    this.isGSExcel = isGSExcel;
  }


  public StorageInfo isTwitterMode(Boolean isTwitterMode) {
    this.isTwitterMode = isTwitterMode;
    return this;
  }

  /**
   * Get isTwitterMode
   * @return isTwitterMode
   */
  @javax.annotation.Nullable
  public Boolean getIsTwitterMode() {
    return isTwitterMode;
  }

  public void setIsTwitterMode(Boolean isTwitterMode) {
    this.isTwitterMode = isTwitterMode;
  }


  public StorageInfo privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * Get privateKey
   * @return privateKey
   */
  @javax.annotation.Nullable
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public StorageInfo requestIdentifier(String requestIdentifier) {
    this.requestIdentifier = requestIdentifier;
    return this;
  }

  /**
   * Get requestIdentifier
   * @return requestIdentifier
   */
  @javax.annotation.Nullable
  public String getRequestIdentifier() {
    return requestIdentifier;
  }

  public void setRequestIdentifier(String requestIdentifier) {
    this.requestIdentifier = requestIdentifier;
  }


  public StorageInfo userCategoryModelName(String userCategoryModelName) {
    this.userCategoryModelName = userCategoryModelName;
    return this;
  }

  /**
   * Get userCategoryModelName
   * @return userCategoryModelName
   */
  @javax.annotation.Nullable
  public String getUserCategoryModelName() {
    return userCategoryModelName;
  }

  public void setUserCategoryModelName(String userCategoryModelName) {
    this.userCategoryModelName = userCategoryModelName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageInfo storageInfo = (StorageInfo) o;
    return Objects.equals(this.createDate, storageInfo.createDate) &&
        Objects.equals(this.documentText, storageInfo.documentText) &&
        Objects.equals(this.IP, storageInfo.IP) &&
        Objects.equals(this.isExcel, storageInfo.isExcel) &&
        Objects.equals(this.isGSExcel, storageInfo.isGSExcel) &&
        Objects.equals(this.isTwitterMode, storageInfo.isTwitterMode) &&
        Objects.equals(this.privateKey, storageInfo.privateKey) &&
        Objects.equals(this.requestIdentifier, storageInfo.requestIdentifier) &&
        Objects.equals(this.userCategoryModelName, storageInfo.userCategoryModelName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createDate, documentText, IP, isExcel, isGSExcel, isTwitterMode, privateKey, requestIdentifier, userCategoryModelName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageInfo {\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    documentText: ").append(toIndentedString(documentText)).append("\n");
    sb.append("    IP: ").append(toIndentedString(IP)).append("\n");
    sb.append("    isExcel: ").append(toIndentedString(isExcel)).append("\n");
    sb.append("    isGSExcel: ").append(toIndentedString(isGSExcel)).append("\n");
    sb.append("    isTwitterMode: ").append(toIndentedString(isTwitterMode)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    requestIdentifier: ").append(toIndentedString(requestIdentifier)).append("\n");
    sb.append("    userCategoryModelName: ").append(toIndentedString(userCategoryModelName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreateDate");
    openapiFields.add("DocumentText");
    openapiFields.add("IP");
    openapiFields.add("IsExcel");
    openapiFields.add("IsGSExcel");
    openapiFields.add("IsTwitterMode");
    openapiFields.add("PrivateKey");
    openapiFields.add("RequestIdentifier");
    openapiFields.add("UserCategoryModelName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageInfo is not found in the empty JSON string", StorageInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DocumentText") != null && !jsonObj.get("DocumentText").isJsonNull()) && !jsonObj.get("DocumentText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocumentText").toString()));
      }
      if ((jsonObj.get("IP") != null && !jsonObj.get("IP").isJsonNull()) && !jsonObj.get("IP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IP").toString()));
      }
      if ((jsonObj.get("PrivateKey") != null && !jsonObj.get("PrivateKey").isJsonNull()) && !jsonObj.get("PrivateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrivateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrivateKey").toString()));
      }
      if ((jsonObj.get("RequestIdentifier") != null && !jsonObj.get("RequestIdentifier").isJsonNull()) && !jsonObj.get("RequestIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequestIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RequestIdentifier").toString()));
      }
      if ((jsonObj.get("UserCategoryModelName") != null && !jsonObj.get("UserCategoryModelName").isJsonNull()) && !jsonObj.get("UserCategoryModelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserCategoryModelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserCategoryModelName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageInfo>() {
           @Override
           public void write(JsonWriter out, StorageInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageInfo
   * @throws IOException if the JSON string is invalid with respect to StorageInfo
   */
  public static StorageInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageInfo.class);
  }

  /**
   * Convert an instance of StorageInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

