/*
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Document
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:23.220198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Document {
  public static final String SERIALIZED_NAME_DOCUMENT_LANGUAGE = "DocumentLanguage";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_LANGUAGE)
  private String documentLanguage;

  public static final String SERIALIZED_NAME_DOCUMENT_TEXT = "DocumentText";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TEXT)
  private String documentText;

  public static final String SERIALIZED_NAME_IS_TWITTER_CONTENT = "IsTwitterContent";
  @SerializedName(SERIALIZED_NAME_IS_TWITTER_CONTENT)
  private Boolean isTwitterContent;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "PrivateKey";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public static final String SERIALIZED_NAME_REQUEST_IDENTIFIER = "RequestIdentifier";
  @SerializedName(SERIALIZED_NAME_REQUEST_IDENTIFIER)
  private String requestIdentifier;

  public static final String SERIALIZED_NAME_SECRET = "Secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_SERIALIZE_FORMAT = "SerializeFormat";
  @SerializedName(SERIALIZED_NAME_SERIALIZE_FORMAT)
  private Integer serializeFormat;

  public static final String SERIALIZED_NAME_USER_CATEGORY_MODEL_NAME = "UserCategoryModelName";
  @SerializedName(SERIALIZED_NAME_USER_CATEGORY_MODEL_NAME)
  private String userCategoryModelName;

  public Document() {
  }

  public Document documentLanguage(String documentLanguage) {
    this.documentLanguage = documentLanguage;
    return this;
  }

  /**
   * Get documentLanguage
   * @return documentLanguage
   */
  @javax.annotation.Nullable
  public String getDocumentLanguage() {
    return documentLanguage;
  }

  public void setDocumentLanguage(String documentLanguage) {
    this.documentLanguage = documentLanguage;
  }


  public Document documentText(String documentText) {
    this.documentText = documentText;
    return this;
  }

  /**
   * Get documentText
   * @return documentText
   */
  @javax.annotation.Nonnull
  public String getDocumentText() {
    return documentText;
  }

  public void setDocumentText(String documentText) {
    this.documentText = documentText;
  }


  public Document isTwitterContent(Boolean isTwitterContent) {
    this.isTwitterContent = isTwitterContent;
    return this;
  }

  /**
   * Get isTwitterContent
   * @return isTwitterContent
   */
  @javax.annotation.Nullable
  public Boolean getIsTwitterContent() {
    return isTwitterContent;
  }

  public void setIsTwitterContent(Boolean isTwitterContent) {
    this.isTwitterContent = isTwitterContent;
  }


  public Document privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * Get privateKey
   * @return privateKey
   */
  @javax.annotation.Nonnull
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public Document requestIdentifier(String requestIdentifier) {
    this.requestIdentifier = requestIdentifier;
    return this;
  }

  /**
   * Get requestIdentifier
   * @return requestIdentifier
   */
  @javax.annotation.Nullable
  public String getRequestIdentifier() {
    return requestIdentifier;
  }

  public void setRequestIdentifier(String requestIdentifier) {
    this.requestIdentifier = requestIdentifier;
  }


  public Document secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public Document serializeFormat(Integer serializeFormat) {
    this.serializeFormat = serializeFormat;
    return this;
  }

  /**
   * Get serializeFormat
   * @return serializeFormat
   */
  @javax.annotation.Nullable
  public Integer getSerializeFormat() {
    return serializeFormat;
  }

  public void setSerializeFormat(Integer serializeFormat) {
    this.serializeFormat = serializeFormat;
  }


  public Document userCategoryModelName(String userCategoryModelName) {
    this.userCategoryModelName = userCategoryModelName;
    return this;
  }

  /**
   * Get userCategoryModelName
   * @return userCategoryModelName
   */
  @javax.annotation.Nullable
  public String getUserCategoryModelName() {
    return userCategoryModelName;
  }

  public void setUserCategoryModelName(String userCategoryModelName) {
    this.userCategoryModelName = userCategoryModelName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.documentLanguage, document.documentLanguage) &&
        Objects.equals(this.documentText, document.documentText) &&
        Objects.equals(this.isTwitterContent, document.isTwitterContent) &&
        Objects.equals(this.privateKey, document.privateKey) &&
        Objects.equals(this.requestIdentifier, document.requestIdentifier) &&
        Objects.equals(this.secret, document.secret) &&
        Objects.equals(this.serializeFormat, document.serializeFormat) &&
        Objects.equals(this.userCategoryModelName, document.userCategoryModelName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentLanguage, documentText, isTwitterContent, privateKey, requestIdentifier, secret, serializeFormat, userCategoryModelName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    sb.append("    documentLanguage: ").append(toIndentedString(documentLanguage)).append("\n");
    sb.append("    documentText: ").append(toIndentedString(documentText)).append("\n");
    sb.append("    isTwitterContent: ").append(toIndentedString(isTwitterContent)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    requestIdentifier: ").append(toIndentedString(requestIdentifier)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    serializeFormat: ").append(toIndentedString(serializeFormat)).append("\n");
    sb.append("    userCategoryModelName: ").append(toIndentedString(userCategoryModelName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentLanguage");
    openapiFields.add("DocumentText");
    openapiFields.add("IsTwitterContent");
    openapiFields.add("PrivateKey");
    openapiFields.add("RequestIdentifier");
    openapiFields.add("Secret");
    openapiFields.add("SerializeFormat");
    openapiFields.add("UserCategoryModelName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DocumentText");
    openapiRequiredFields.add("PrivateKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Document
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Document.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Document is not found in the empty JSON string", Document.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Document.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Document` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Document.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DocumentLanguage") != null && !jsonObj.get("DocumentLanguage").isJsonNull()) && !jsonObj.get("DocumentLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocumentLanguage").toString()));
      }
      if (!jsonObj.get("DocumentText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocumentText").toString()));
      }
      if (!jsonObj.get("PrivateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrivateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrivateKey").toString()));
      }
      if ((jsonObj.get("RequestIdentifier") != null && !jsonObj.get("RequestIdentifier").isJsonNull()) && !jsonObj.get("RequestIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequestIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RequestIdentifier").toString()));
      }
      if ((jsonObj.get("Secret") != null && !jsonObj.get("Secret").isJsonNull()) && !jsonObj.get("Secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Secret").toString()));
      }
      if ((jsonObj.get("UserCategoryModelName") != null && !jsonObj.get("UserCategoryModelName").isJsonNull()) && !jsonObj.get("UserCategoryModelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserCategoryModelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserCategoryModelName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Document.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Document' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Document> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Document.class));

       return (TypeAdapter<T>) new TypeAdapter<Document>() {
           @Override
           public void write(JsonWriter out, Document value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Document read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Document given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Document
   * @throws IOException if the JSON string is invalid with respect to Document
   */
  public static Document fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Document.class);
  }

  /**
   * Convert an instance of Document to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

