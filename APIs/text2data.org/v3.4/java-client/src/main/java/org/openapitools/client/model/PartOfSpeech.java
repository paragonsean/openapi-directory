/*
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PartOfSpeech
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:23.220198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartOfSpeech {
  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_OBJECT = "Object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_OBJECT_SENTIMENT_POLARITY = "ObjectSentimentPolarity";
  @SerializedName(SERIALIZED_NAME_OBJECT_SENTIMENT_POLARITY)
  private String objectSentimentPolarity;

  public static final String SERIALIZED_NAME_OBJECT_SENTIMENT_RESULT_STRING = "ObjectSentimentResultString";
  @SerializedName(SERIALIZED_NAME_OBJECT_SENTIMENT_RESULT_STRING)
  private String objectSentimentResultString;

  public static final String SERIALIZED_NAME_OBJECT_SENTIMENT_VALUE = "ObjectSentimentValue";
  @SerializedName(SERIALIZED_NAME_OBJECT_SENTIMENT_VALUE)
  private Double objectSentimentValue;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public PartOfSpeech() {
  }

  public PartOfSpeech action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public PartOfSpeech _object(String _object) {
    this._object = _object;
    return this;
  }

  /**
   * Get _object
   * @return _object
   */
  @javax.annotation.Nullable
  public String getObject() {
    return _object;
  }

  public void setObject(String _object) {
    this._object = _object;
  }


  public PartOfSpeech objectSentimentPolarity(String objectSentimentPolarity) {
    this.objectSentimentPolarity = objectSentimentPolarity;
    return this;
  }

  /**
   * Get objectSentimentPolarity
   * @return objectSentimentPolarity
   */
  @javax.annotation.Nullable
  public String getObjectSentimentPolarity() {
    return objectSentimentPolarity;
  }

  public void setObjectSentimentPolarity(String objectSentimentPolarity) {
    this.objectSentimentPolarity = objectSentimentPolarity;
  }


  public PartOfSpeech objectSentimentResultString(String objectSentimentResultString) {
    this.objectSentimentResultString = objectSentimentResultString;
    return this;
  }

  /**
   * Get objectSentimentResultString
   * @return objectSentimentResultString
   */
  @javax.annotation.Nullable
  public String getObjectSentimentResultString() {
    return objectSentimentResultString;
  }

  public void setObjectSentimentResultString(String objectSentimentResultString) {
    this.objectSentimentResultString = objectSentimentResultString;
  }


  public PartOfSpeech objectSentimentValue(Double objectSentimentValue) {
    this.objectSentimentValue = objectSentimentValue;
    return this;
  }

  /**
   * Get objectSentimentValue
   * @return objectSentimentValue
   */
  @javax.annotation.Nullable
  public Double getObjectSentimentValue() {
    return objectSentimentValue;
  }

  public void setObjectSentimentValue(Double objectSentimentValue) {
    this.objectSentimentValue = objectSentimentValue;
  }


  public PartOfSpeech subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public PartOfSpeech text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartOfSpeech partOfSpeech = (PartOfSpeech) o;
    return Objects.equals(this.action, partOfSpeech.action) &&
        Objects.equals(this._object, partOfSpeech._object) &&
        Objects.equals(this.objectSentimentPolarity, partOfSpeech.objectSentimentPolarity) &&
        Objects.equals(this.objectSentimentResultString, partOfSpeech.objectSentimentResultString) &&
        Objects.equals(this.objectSentimentValue, partOfSpeech.objectSentimentValue) &&
        Objects.equals(this.subject, partOfSpeech.subject) &&
        Objects.equals(this.text, partOfSpeech.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, _object, objectSentimentPolarity, objectSentimentResultString, objectSentimentValue, subject, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartOfSpeech {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    objectSentimentPolarity: ").append(toIndentedString(objectSentimentPolarity)).append("\n");
    sb.append("    objectSentimentResultString: ").append(toIndentedString(objectSentimentResultString)).append("\n");
    sb.append("    objectSentimentValue: ").append(toIndentedString(objectSentimentValue)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Action");
    openapiFields.add("Object");
    openapiFields.add("ObjectSentimentPolarity");
    openapiFields.add("ObjectSentimentResultString");
    openapiFields.add("ObjectSentimentValue");
    openapiFields.add("Subject");
    openapiFields.add("Text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartOfSpeech
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartOfSpeech.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartOfSpeech is not found in the empty JSON string", PartOfSpeech.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartOfSpeech.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartOfSpeech` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Action") != null && !jsonObj.get("Action").isJsonNull()) && !jsonObj.get("Action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Action").toString()));
      }
      if ((jsonObj.get("Object") != null && !jsonObj.get("Object").isJsonNull()) && !jsonObj.get("Object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Object").toString()));
      }
      if ((jsonObj.get("ObjectSentimentPolarity") != null && !jsonObj.get("ObjectSentimentPolarity").isJsonNull()) && !jsonObj.get("ObjectSentimentPolarity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectSentimentPolarity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectSentimentPolarity").toString()));
      }
      if ((jsonObj.get("ObjectSentimentResultString") != null && !jsonObj.get("ObjectSentimentResultString").isJsonNull()) && !jsonObj.get("ObjectSentimentResultString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectSentimentResultString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectSentimentResultString").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("Text") != null && !jsonObj.get("Text").isJsonNull()) && !jsonObj.get("Text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartOfSpeech.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartOfSpeech' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartOfSpeech> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartOfSpeech.class));

       return (TypeAdapter<T>) new TypeAdapter<PartOfSpeech>() {
           @Override
           public void write(JsonWriter out, PartOfSpeech value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartOfSpeech read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartOfSpeech given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartOfSpeech
   * @throws IOException if the JSON string is invalid with respect to PartOfSpeech
   */
  public static PartOfSpeech fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartOfSpeech.class);
  }

  /**
   * Convert an instance of PartOfSpeech to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

