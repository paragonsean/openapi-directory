/*
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.PartOfSpeech;
import org.openapitools.client.model.Sentence;
import org.openapitools.client.model.SentencePart;
import org.openapitools.client.model.SlangWord;
import org.openapitools.client.model.StorageInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:23.220198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentResult {
  public static final String SERIALIZED_NAME_AUTO_CATEGORIES = "AutoCategories";
  @SerializedName(SERIALIZED_NAME_AUTO_CATEGORIES)
  private List<Category> autoCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITATIONS = "Citations";
  @SerializedName(SERIALIZED_NAME_CITATIONS)
  private List<SentencePart> citations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOUD_TAG_H_T_M_L = "CloudTagHTML";
  @SerializedName(SERIALIZED_NAME_CLOUD_TAG_H_T_M_L)
  private String cloudTagHTML;

  public static final String SERIALIZED_NAME_CORE_SENTENCES = "CoreSentences";
  @SerializedName(SERIALIZED_NAME_CORE_SENTENCES)
  private List<Sentence> coreSentences = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_LANGUAGE = "DetectedLanguage";
  @SerializedName(SERIALIZED_NAME_DETECTED_LANGUAGE)
  private String detectedLanguage;

  public static final String SERIALIZED_NAME_DOC_SENTIMENT_POLARITY = "DocSentimentPolarity";
  @SerializedName(SERIALIZED_NAME_DOC_SENTIMENT_POLARITY)
  private String docSentimentPolarity;

  public static final String SERIALIZED_NAME_DOC_SENTIMENT_RESULT_STRING = "DocSentimentResultString";
  @SerializedName(SERIALIZED_NAME_DOC_SENTIMENT_RESULT_STRING)
  private String docSentimentResultString;

  public static final String SERIALIZED_NAME_DOC_SENTIMENT_VALUE = "DocSentimentValue";
  @SerializedName(SERIALIZED_NAME_DOC_SENTIMENT_VALUE)
  private Double docSentimentValue;

  public static final String SERIALIZED_NAME_ENTITIES = "Entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<SentencePart> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_KEYWORDS = "Keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<SentencePart> keywords = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAGNITUDE = "Magnitude";
  @SerializedName(SERIALIZED_NAME_MAGNITUDE)
  private Double magnitude;

  public static final String SERIALIZED_NAME_PARTS_OF_SPEECH = "PartsOfSpeech";
  @SerializedName(SERIALIZED_NAME_PARTS_OF_SPEECH)
  private List<PartOfSpeech> partsOfSpeech = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT_TEXT_HTML = "ResultTextHtml";
  @SerializedName(SERIALIZED_NAME_RESULT_TEXT_HTML)
  private String resultTextHtml;

  public static final String SERIALIZED_NAME_SLANG_WORDS = "SlangWords";
  @SerializedName(SERIALIZED_NAME_SLANG_WORDS)
  private List<SlangWord> slangWords = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_STORAGE_INFO = "StorageInfo";
  @SerializedName(SERIALIZED_NAME_STORAGE_INFO)
  private StorageInfo storageInfo;

  public static final String SERIALIZED_NAME_SUBJECTIVITY = "Subjectivity";
  @SerializedName(SERIALIZED_NAME_SUBJECTIVITY)
  private String subjectivity;

  public static final String SERIALIZED_NAME_SWEAR_WORDS = "SwearWords";
  @SerializedName(SERIALIZED_NAME_SWEAR_WORDS)
  private List<SlangWord> swearWords = new ArrayList<>();

  public static final String SERIALIZED_NAME_THEMES = "Themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private List<SentencePart> themes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public static final String SERIALIZED_NAME_TRANSACTION_CURRENT_DAY = "TransactionCurrentDay";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CURRENT_DAY)
  private Integer transactionCurrentDay;

  public static final String SERIALIZED_NAME_TRANSACTION_DAILY_LIMIT = "TransactionDailyLimit";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DAILY_LIMIT)
  private Integer transactionDailyLimit;

  public static final String SERIALIZED_NAME_TRANSACTION_TOTAL_CREDITS_LEFT = "TransactionTotalCreditsLeft";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TOTAL_CREDITS_LEFT)
  private Integer transactionTotalCreditsLeft;

  public static final String SERIALIZED_NAME_TRANSACTION_USE_BY_DATE = "TransactionUseByDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_USE_BY_DATE)
  private OffsetDateTime transactionUseByDate;

  public static final String SERIALIZED_NAME_USER_CATEGORIES = "UserCategories";
  @SerializedName(SERIALIZED_NAME_USER_CATEGORIES)
  private List<Category> userCategories = new ArrayList<>();

  public DocumentResult() {
  }

  public DocumentResult autoCategories(List<Category> autoCategories) {
    this.autoCategories = autoCategories;
    return this;
  }

  public DocumentResult addAutoCategoriesItem(Category autoCategoriesItem) {
    if (this.autoCategories == null) {
      this.autoCategories = new ArrayList<>();
    }
    this.autoCategories.add(autoCategoriesItem);
    return this;
  }

  /**
   * Get autoCategories
   * @return autoCategories
   */
  @javax.annotation.Nullable
  public List<Category> getAutoCategories() {
    return autoCategories;
  }

  public void setAutoCategories(List<Category> autoCategories) {
    this.autoCategories = autoCategories;
  }


  public DocumentResult citations(List<SentencePart> citations) {
    this.citations = citations;
    return this;
  }

  public DocumentResult addCitationsItem(SentencePart citationsItem) {
    if (this.citations == null) {
      this.citations = new ArrayList<>();
    }
    this.citations.add(citationsItem);
    return this;
  }

  /**
   * Get citations
   * @return citations
   */
  @javax.annotation.Nullable
  public List<SentencePart> getCitations() {
    return citations;
  }

  public void setCitations(List<SentencePart> citations) {
    this.citations = citations;
  }


  public DocumentResult cloudTagHTML(String cloudTagHTML) {
    this.cloudTagHTML = cloudTagHTML;
    return this;
  }

  /**
   * Get cloudTagHTML
   * @return cloudTagHTML
   */
  @javax.annotation.Nullable
  public String getCloudTagHTML() {
    return cloudTagHTML;
  }

  public void setCloudTagHTML(String cloudTagHTML) {
    this.cloudTagHTML = cloudTagHTML;
  }


  public DocumentResult coreSentences(List<Sentence> coreSentences) {
    this.coreSentences = coreSentences;
    return this;
  }

  public DocumentResult addCoreSentencesItem(Sentence coreSentencesItem) {
    if (this.coreSentences == null) {
      this.coreSentences = new ArrayList<>();
    }
    this.coreSentences.add(coreSentencesItem);
    return this;
  }

  /**
   * Get coreSentences
   * @return coreSentences
   */
  @javax.annotation.Nullable
  public List<Sentence> getCoreSentences() {
    return coreSentences;
  }

  public void setCoreSentences(List<Sentence> coreSentences) {
    this.coreSentences = coreSentences;
  }


  public DocumentResult detectedLanguage(String detectedLanguage) {
    this.detectedLanguage = detectedLanguage;
    return this;
  }

  /**
   * Get detectedLanguage
   * @return detectedLanguage
   */
  @javax.annotation.Nullable
  public String getDetectedLanguage() {
    return detectedLanguage;
  }

  public void setDetectedLanguage(String detectedLanguage) {
    this.detectedLanguage = detectedLanguage;
  }


  public DocumentResult docSentimentPolarity(String docSentimentPolarity) {
    this.docSentimentPolarity = docSentimentPolarity;
    return this;
  }

  /**
   * Get docSentimentPolarity
   * @return docSentimentPolarity
   */
  @javax.annotation.Nullable
  public String getDocSentimentPolarity() {
    return docSentimentPolarity;
  }

  public void setDocSentimentPolarity(String docSentimentPolarity) {
    this.docSentimentPolarity = docSentimentPolarity;
  }


  public DocumentResult docSentimentResultString(String docSentimentResultString) {
    this.docSentimentResultString = docSentimentResultString;
    return this;
  }

  /**
   * Get docSentimentResultString
   * @return docSentimentResultString
   */
  @javax.annotation.Nullable
  public String getDocSentimentResultString() {
    return docSentimentResultString;
  }

  public void setDocSentimentResultString(String docSentimentResultString) {
    this.docSentimentResultString = docSentimentResultString;
  }


  public DocumentResult docSentimentValue(Double docSentimentValue) {
    this.docSentimentValue = docSentimentValue;
    return this;
  }

  /**
   * Get docSentimentValue
   * @return docSentimentValue
   */
  @javax.annotation.Nullable
  public Double getDocSentimentValue() {
    return docSentimentValue;
  }

  public void setDocSentimentValue(Double docSentimentValue) {
    this.docSentimentValue = docSentimentValue;
  }


  public DocumentResult entities(List<SentencePart> entities) {
    this.entities = entities;
    return this;
  }

  public DocumentResult addEntitiesItem(SentencePart entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * Get entities
   * @return entities
   */
  @javax.annotation.Nullable
  public List<SentencePart> getEntities() {
    return entities;
  }

  public void setEntities(List<SentencePart> entities) {
    this.entities = entities;
  }


  public DocumentResult errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public DocumentResult keywords(List<SentencePart> keywords) {
    this.keywords = keywords;
    return this;
  }

  public DocumentResult addKeywordsItem(SentencePart keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * Get keywords
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<SentencePart> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<SentencePart> keywords) {
    this.keywords = keywords;
  }


  public DocumentResult magnitude(Double magnitude) {
    this.magnitude = magnitude;
    return this;
  }

  /**
   * Get magnitude
   * @return magnitude
   */
  @javax.annotation.Nullable
  public Double getMagnitude() {
    return magnitude;
  }

  public void setMagnitude(Double magnitude) {
    this.magnitude = magnitude;
  }


  public DocumentResult partsOfSpeech(List<PartOfSpeech> partsOfSpeech) {
    this.partsOfSpeech = partsOfSpeech;
    return this;
  }

  public DocumentResult addPartsOfSpeechItem(PartOfSpeech partsOfSpeechItem) {
    if (this.partsOfSpeech == null) {
      this.partsOfSpeech = new ArrayList<>();
    }
    this.partsOfSpeech.add(partsOfSpeechItem);
    return this;
  }

  /**
   * Get partsOfSpeech
   * @return partsOfSpeech
   */
  @javax.annotation.Nullable
  public List<PartOfSpeech> getPartsOfSpeech() {
    return partsOfSpeech;
  }

  public void setPartsOfSpeech(List<PartOfSpeech> partsOfSpeech) {
    this.partsOfSpeech = partsOfSpeech;
  }


  public DocumentResult resultTextHtml(String resultTextHtml) {
    this.resultTextHtml = resultTextHtml;
    return this;
  }

  /**
   * Get resultTextHtml
   * @return resultTextHtml
   */
  @javax.annotation.Nullable
  public String getResultTextHtml() {
    return resultTextHtml;
  }

  public void setResultTextHtml(String resultTextHtml) {
    this.resultTextHtml = resultTextHtml;
  }


  public DocumentResult slangWords(List<SlangWord> slangWords) {
    this.slangWords = slangWords;
    return this;
  }

  public DocumentResult addSlangWordsItem(SlangWord slangWordsItem) {
    if (this.slangWords == null) {
      this.slangWords = new ArrayList<>();
    }
    this.slangWords.add(slangWordsItem);
    return this;
  }

  /**
   * Get slangWords
   * @return slangWords
   */
  @javax.annotation.Nullable
  public List<SlangWord> getSlangWords() {
    return slangWords;
  }

  public void setSlangWords(List<SlangWord> slangWords) {
    this.slangWords = slangWords;
  }


  public DocumentResult status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public DocumentResult storageInfo(StorageInfo storageInfo) {
    this.storageInfo = storageInfo;
    return this;
  }

  /**
   * Get storageInfo
   * @return storageInfo
   */
  @javax.annotation.Nullable
  public StorageInfo getStorageInfo() {
    return storageInfo;
  }

  public void setStorageInfo(StorageInfo storageInfo) {
    this.storageInfo = storageInfo;
  }


  public DocumentResult subjectivity(String subjectivity) {
    this.subjectivity = subjectivity;
    return this;
  }

  /**
   * Get subjectivity
   * @return subjectivity
   */
  @javax.annotation.Nullable
  public String getSubjectivity() {
    return subjectivity;
  }

  public void setSubjectivity(String subjectivity) {
    this.subjectivity = subjectivity;
  }


  public DocumentResult swearWords(List<SlangWord> swearWords) {
    this.swearWords = swearWords;
    return this;
  }

  public DocumentResult addSwearWordsItem(SlangWord swearWordsItem) {
    if (this.swearWords == null) {
      this.swearWords = new ArrayList<>();
    }
    this.swearWords.add(swearWordsItem);
    return this;
  }

  /**
   * Get swearWords
   * @return swearWords
   */
  @javax.annotation.Nullable
  public List<SlangWord> getSwearWords() {
    return swearWords;
  }

  public void setSwearWords(List<SlangWord> swearWords) {
    this.swearWords = swearWords;
  }


  public DocumentResult themes(List<SentencePart> themes) {
    this.themes = themes;
    return this;
  }

  public DocumentResult addThemesItem(SentencePart themesItem) {
    if (this.themes == null) {
      this.themes = new ArrayList<>();
    }
    this.themes.add(themesItem);
    return this;
  }

  /**
   * Get themes
   * @return themes
   */
  @javax.annotation.Nullable
  public List<SentencePart> getThemes() {
    return themes;
  }

  public void setThemes(List<SentencePart> themes) {
    this.themes = themes;
  }


  public DocumentResult timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public DocumentResult transactionCurrentDay(Integer transactionCurrentDay) {
    this.transactionCurrentDay = transactionCurrentDay;
    return this;
  }

  /**
   * Get transactionCurrentDay
   * @return transactionCurrentDay
   */
  @javax.annotation.Nullable
  public Integer getTransactionCurrentDay() {
    return transactionCurrentDay;
  }

  public void setTransactionCurrentDay(Integer transactionCurrentDay) {
    this.transactionCurrentDay = transactionCurrentDay;
  }


  public DocumentResult transactionDailyLimit(Integer transactionDailyLimit) {
    this.transactionDailyLimit = transactionDailyLimit;
    return this;
  }

  /**
   * Get transactionDailyLimit
   * @return transactionDailyLimit
   */
  @javax.annotation.Nullable
  public Integer getTransactionDailyLimit() {
    return transactionDailyLimit;
  }

  public void setTransactionDailyLimit(Integer transactionDailyLimit) {
    this.transactionDailyLimit = transactionDailyLimit;
  }


  public DocumentResult transactionTotalCreditsLeft(Integer transactionTotalCreditsLeft) {
    this.transactionTotalCreditsLeft = transactionTotalCreditsLeft;
    return this;
  }

  /**
   * Get transactionTotalCreditsLeft
   * @return transactionTotalCreditsLeft
   */
  @javax.annotation.Nullable
  public Integer getTransactionTotalCreditsLeft() {
    return transactionTotalCreditsLeft;
  }

  public void setTransactionTotalCreditsLeft(Integer transactionTotalCreditsLeft) {
    this.transactionTotalCreditsLeft = transactionTotalCreditsLeft;
  }


  public DocumentResult transactionUseByDate(OffsetDateTime transactionUseByDate) {
    this.transactionUseByDate = transactionUseByDate;
    return this;
  }

  /**
   * Get transactionUseByDate
   * @return transactionUseByDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTransactionUseByDate() {
    return transactionUseByDate;
  }

  public void setTransactionUseByDate(OffsetDateTime transactionUseByDate) {
    this.transactionUseByDate = transactionUseByDate;
  }


  public DocumentResult userCategories(List<Category> userCategories) {
    this.userCategories = userCategories;
    return this;
  }

  public DocumentResult addUserCategoriesItem(Category userCategoriesItem) {
    if (this.userCategories == null) {
      this.userCategories = new ArrayList<>();
    }
    this.userCategories.add(userCategoriesItem);
    return this;
  }

  /**
   * Get userCategories
   * @return userCategories
   */
  @javax.annotation.Nullable
  public List<Category> getUserCategories() {
    return userCategories;
  }

  public void setUserCategories(List<Category> userCategories) {
    this.userCategories = userCategories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentResult documentResult = (DocumentResult) o;
    return Objects.equals(this.autoCategories, documentResult.autoCategories) &&
        Objects.equals(this.citations, documentResult.citations) &&
        Objects.equals(this.cloudTagHTML, documentResult.cloudTagHTML) &&
        Objects.equals(this.coreSentences, documentResult.coreSentences) &&
        Objects.equals(this.detectedLanguage, documentResult.detectedLanguage) &&
        Objects.equals(this.docSentimentPolarity, documentResult.docSentimentPolarity) &&
        Objects.equals(this.docSentimentResultString, documentResult.docSentimentResultString) &&
        Objects.equals(this.docSentimentValue, documentResult.docSentimentValue) &&
        Objects.equals(this.entities, documentResult.entities) &&
        Objects.equals(this.errorMessage, documentResult.errorMessage) &&
        Objects.equals(this.keywords, documentResult.keywords) &&
        Objects.equals(this.magnitude, documentResult.magnitude) &&
        Objects.equals(this.partsOfSpeech, documentResult.partsOfSpeech) &&
        Objects.equals(this.resultTextHtml, documentResult.resultTextHtml) &&
        Objects.equals(this.slangWords, documentResult.slangWords) &&
        Objects.equals(this.status, documentResult.status) &&
        Objects.equals(this.storageInfo, documentResult.storageInfo) &&
        Objects.equals(this.subjectivity, documentResult.subjectivity) &&
        Objects.equals(this.swearWords, documentResult.swearWords) &&
        Objects.equals(this.themes, documentResult.themes) &&
        Objects.equals(this.timestamp, documentResult.timestamp) &&
        Objects.equals(this.transactionCurrentDay, documentResult.transactionCurrentDay) &&
        Objects.equals(this.transactionDailyLimit, documentResult.transactionDailyLimit) &&
        Objects.equals(this.transactionTotalCreditsLeft, documentResult.transactionTotalCreditsLeft) &&
        Objects.equals(this.transactionUseByDate, documentResult.transactionUseByDate) &&
        Objects.equals(this.userCategories, documentResult.userCategories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCategories, citations, cloudTagHTML, coreSentences, detectedLanguage, docSentimentPolarity, docSentimentResultString, docSentimentValue, entities, errorMessage, keywords, magnitude, partsOfSpeech, resultTextHtml, slangWords, status, storageInfo, subjectivity, swearWords, themes, timestamp, transactionCurrentDay, transactionDailyLimit, transactionTotalCreditsLeft, transactionUseByDate, userCategories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentResult {\n");
    sb.append("    autoCategories: ").append(toIndentedString(autoCategories)).append("\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("    cloudTagHTML: ").append(toIndentedString(cloudTagHTML)).append("\n");
    sb.append("    coreSentences: ").append(toIndentedString(coreSentences)).append("\n");
    sb.append("    detectedLanguage: ").append(toIndentedString(detectedLanguage)).append("\n");
    sb.append("    docSentimentPolarity: ").append(toIndentedString(docSentimentPolarity)).append("\n");
    sb.append("    docSentimentResultString: ").append(toIndentedString(docSentimentResultString)).append("\n");
    sb.append("    docSentimentValue: ").append(toIndentedString(docSentimentValue)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    magnitude: ").append(toIndentedString(magnitude)).append("\n");
    sb.append("    partsOfSpeech: ").append(toIndentedString(partsOfSpeech)).append("\n");
    sb.append("    resultTextHtml: ").append(toIndentedString(resultTextHtml)).append("\n");
    sb.append("    slangWords: ").append(toIndentedString(slangWords)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storageInfo: ").append(toIndentedString(storageInfo)).append("\n");
    sb.append("    subjectivity: ").append(toIndentedString(subjectivity)).append("\n");
    sb.append("    swearWords: ").append(toIndentedString(swearWords)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transactionCurrentDay: ").append(toIndentedString(transactionCurrentDay)).append("\n");
    sb.append("    transactionDailyLimit: ").append(toIndentedString(transactionDailyLimit)).append("\n");
    sb.append("    transactionTotalCreditsLeft: ").append(toIndentedString(transactionTotalCreditsLeft)).append("\n");
    sb.append("    transactionUseByDate: ").append(toIndentedString(transactionUseByDate)).append("\n");
    sb.append("    userCategories: ").append(toIndentedString(userCategories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutoCategories");
    openapiFields.add("Citations");
    openapiFields.add("CloudTagHTML");
    openapiFields.add("CoreSentences");
    openapiFields.add("DetectedLanguage");
    openapiFields.add("DocSentimentPolarity");
    openapiFields.add("DocSentimentResultString");
    openapiFields.add("DocSentimentValue");
    openapiFields.add("Entities");
    openapiFields.add("ErrorMessage");
    openapiFields.add("Keywords");
    openapiFields.add("Magnitude");
    openapiFields.add("PartsOfSpeech");
    openapiFields.add("ResultTextHtml");
    openapiFields.add("SlangWords");
    openapiFields.add("Status");
    openapiFields.add("StorageInfo");
    openapiFields.add("Subjectivity");
    openapiFields.add("SwearWords");
    openapiFields.add("Themes");
    openapiFields.add("Timestamp");
    openapiFields.add("TransactionCurrentDay");
    openapiFields.add("TransactionDailyLimit");
    openapiFields.add("TransactionTotalCreditsLeft");
    openapiFields.add("TransactionUseByDate");
    openapiFields.add("UserCategories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentResult is not found in the empty JSON string", DocumentResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("AutoCategories") != null && !jsonObj.get("AutoCategories").isJsonNull()) {
        JsonArray jsonArrayautoCategories = jsonObj.getAsJsonArray("AutoCategories");
        if (jsonArrayautoCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AutoCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AutoCategories` to be an array in the JSON string but got `%s`", jsonObj.get("AutoCategories").toString()));
          }

          // validate the optional field `AutoCategories` (array)
          for (int i = 0; i < jsonArrayautoCategories.size(); i++) {
            Category.validateJsonElement(jsonArrayautoCategories.get(i));
          };
        }
      }
      if (jsonObj.get("Citations") != null && !jsonObj.get("Citations").isJsonNull()) {
        JsonArray jsonArraycitations = jsonObj.getAsJsonArray("Citations");
        if (jsonArraycitations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Citations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Citations` to be an array in the JSON string but got `%s`", jsonObj.get("Citations").toString()));
          }

          // validate the optional field `Citations` (array)
          for (int i = 0; i < jsonArraycitations.size(); i++) {
            SentencePart.validateJsonElement(jsonArraycitations.get(i));
          };
        }
      }
      if ((jsonObj.get("CloudTagHTML") != null && !jsonObj.get("CloudTagHTML").isJsonNull()) && !jsonObj.get("CloudTagHTML").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CloudTagHTML` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CloudTagHTML").toString()));
      }
      if (jsonObj.get("CoreSentences") != null && !jsonObj.get("CoreSentences").isJsonNull()) {
        JsonArray jsonArraycoreSentences = jsonObj.getAsJsonArray("CoreSentences");
        if (jsonArraycoreSentences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CoreSentences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CoreSentences` to be an array in the JSON string but got `%s`", jsonObj.get("CoreSentences").toString()));
          }

          // validate the optional field `CoreSentences` (array)
          for (int i = 0; i < jsonArraycoreSentences.size(); i++) {
            Sentence.validateJsonElement(jsonArraycoreSentences.get(i));
          };
        }
      }
      if ((jsonObj.get("DetectedLanguage") != null && !jsonObj.get("DetectedLanguage").isJsonNull()) && !jsonObj.get("DetectedLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DetectedLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DetectedLanguage").toString()));
      }
      if ((jsonObj.get("DocSentimentPolarity") != null && !jsonObj.get("DocSentimentPolarity").isJsonNull()) && !jsonObj.get("DocSentimentPolarity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocSentimentPolarity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocSentimentPolarity").toString()));
      }
      if ((jsonObj.get("DocSentimentResultString") != null && !jsonObj.get("DocSentimentResultString").isJsonNull()) && !jsonObj.get("DocSentimentResultString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocSentimentResultString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocSentimentResultString").toString()));
      }
      if (jsonObj.get("Entities") != null && !jsonObj.get("Entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("Entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Entities` to be an array in the JSON string but got `%s`", jsonObj.get("Entities").toString()));
          }

          // validate the optional field `Entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            SentencePart.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      if ((jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) && !jsonObj.get("ErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ErrorMessage").toString()));
      }
      if (jsonObj.get("Keywords") != null && !jsonObj.get("Keywords").isJsonNull()) {
        JsonArray jsonArraykeywords = jsonObj.getAsJsonArray("Keywords");
        if (jsonArraykeywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Keywords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Keywords` to be an array in the JSON string but got `%s`", jsonObj.get("Keywords").toString()));
          }

          // validate the optional field `Keywords` (array)
          for (int i = 0; i < jsonArraykeywords.size(); i++) {
            SentencePart.validateJsonElement(jsonArraykeywords.get(i));
          };
        }
      }
      if (jsonObj.get("PartsOfSpeech") != null && !jsonObj.get("PartsOfSpeech").isJsonNull()) {
        JsonArray jsonArraypartsOfSpeech = jsonObj.getAsJsonArray("PartsOfSpeech");
        if (jsonArraypartsOfSpeech != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PartsOfSpeech").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PartsOfSpeech` to be an array in the JSON string but got `%s`", jsonObj.get("PartsOfSpeech").toString()));
          }

          // validate the optional field `PartsOfSpeech` (array)
          for (int i = 0; i < jsonArraypartsOfSpeech.size(); i++) {
            PartOfSpeech.validateJsonElement(jsonArraypartsOfSpeech.get(i));
          };
        }
      }
      if ((jsonObj.get("ResultTextHtml") != null && !jsonObj.get("ResultTextHtml").isJsonNull()) && !jsonObj.get("ResultTextHtml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResultTextHtml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResultTextHtml").toString()));
      }
      if (jsonObj.get("SlangWords") != null && !jsonObj.get("SlangWords").isJsonNull()) {
        JsonArray jsonArrayslangWords = jsonObj.getAsJsonArray("SlangWords");
        if (jsonArrayslangWords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SlangWords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SlangWords` to be an array in the JSON string but got `%s`", jsonObj.get("SlangWords").toString()));
          }

          // validate the optional field `SlangWords` (array)
          for (int i = 0; i < jsonArrayslangWords.size(); i++) {
            SlangWord.validateJsonElement(jsonArrayslangWords.get(i));
          };
        }
      }
      // validate the optional field `StorageInfo`
      if (jsonObj.get("StorageInfo") != null && !jsonObj.get("StorageInfo").isJsonNull()) {
        StorageInfo.validateJsonElement(jsonObj.get("StorageInfo"));
      }
      if ((jsonObj.get("Subjectivity") != null && !jsonObj.get("Subjectivity").isJsonNull()) && !jsonObj.get("Subjectivity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subjectivity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subjectivity").toString()));
      }
      if (jsonObj.get("SwearWords") != null && !jsonObj.get("SwearWords").isJsonNull()) {
        JsonArray jsonArrayswearWords = jsonObj.getAsJsonArray("SwearWords");
        if (jsonArrayswearWords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SwearWords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SwearWords` to be an array in the JSON string but got `%s`", jsonObj.get("SwearWords").toString()));
          }

          // validate the optional field `SwearWords` (array)
          for (int i = 0; i < jsonArrayswearWords.size(); i++) {
            SlangWord.validateJsonElement(jsonArrayswearWords.get(i));
          };
        }
      }
      if (jsonObj.get("Themes") != null && !jsonObj.get("Themes").isJsonNull()) {
        JsonArray jsonArraythemes = jsonObj.getAsJsonArray("Themes");
        if (jsonArraythemes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Themes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Themes` to be an array in the JSON string but got `%s`", jsonObj.get("Themes").toString()));
          }

          // validate the optional field `Themes` (array)
          for (int i = 0; i < jsonArraythemes.size(); i++) {
            SentencePart.validateJsonElement(jsonArraythemes.get(i));
          };
        }
      }
      if (jsonObj.get("UserCategories") != null && !jsonObj.get("UserCategories").isJsonNull()) {
        JsonArray jsonArrayuserCategories = jsonObj.getAsJsonArray("UserCategories");
        if (jsonArrayuserCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("UserCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `UserCategories` to be an array in the JSON string but got `%s`", jsonObj.get("UserCategories").toString()));
          }

          // validate the optional field `UserCategories` (array)
          for (int i = 0; i < jsonArrayuserCategories.size(); i++) {
            Category.validateJsonElement(jsonArrayuserCategories.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentResult>() {
           @Override
           public void write(JsonWriter out, DocumentResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentResult
   * @throws IOException if the JSON string is invalid with respect to DocumentResult
   */
  public static DocumentResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentResult.class);
  }

  /**
   * Convert an instance of DocumentResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

