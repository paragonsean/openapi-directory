/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentence::OAISentence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentence::OAISentence() {
    this->initializeModel();
}

OAISentence::~OAISentence() {}

void OAISentence::initializeModel() {

    m_magnitude_isSet = false;
    m_magnitude_isValid = false;

    m_sentence_number_isSet = false;
    m_sentence_number_isValid = false;

    m_sentiment_polarity_isSet = false;
    m_sentiment_polarity_isValid = false;

    m_sentiment_result_string_isSet = false;
    m_sentiment_result_string_isValid = false;

    m_sentiment_value_isSet = false;
    m_sentiment_value_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAISentence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentence::fromJsonObject(QJsonObject json) {

    m_magnitude_isValid = ::OpenAPI::fromJsonValue(m_magnitude, json[QString("Magnitude")]);
    m_magnitude_isSet = !json[QString("Magnitude")].isNull() && m_magnitude_isValid;

    m_sentence_number_isValid = ::OpenAPI::fromJsonValue(m_sentence_number, json[QString("SentenceNumber")]);
    m_sentence_number_isSet = !json[QString("SentenceNumber")].isNull() && m_sentence_number_isValid;

    m_sentiment_polarity_isValid = ::OpenAPI::fromJsonValue(m_sentiment_polarity, json[QString("SentimentPolarity")]);
    m_sentiment_polarity_isSet = !json[QString("SentimentPolarity")].isNull() && m_sentiment_polarity_isValid;

    m_sentiment_result_string_isValid = ::OpenAPI::fromJsonValue(m_sentiment_result_string, json[QString("SentimentResultString")]);
    m_sentiment_result_string_isSet = !json[QString("SentimentResultString")].isNull() && m_sentiment_result_string_isValid;

    m_sentiment_value_isValid = ::OpenAPI::fromJsonValue(m_sentiment_value, json[QString("SentimentValue")]);
    m_sentiment_value_isSet = !json[QString("SentimentValue")].isNull() && m_sentiment_value_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;
}

QString OAISentence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentence::asJsonObject() const {
    QJsonObject obj;
    if (m_magnitude_isSet) {
        obj.insert(QString("Magnitude"), ::OpenAPI::toJsonValue(m_magnitude));
    }
    if (m_sentence_number_isSet) {
        obj.insert(QString("SentenceNumber"), ::OpenAPI::toJsonValue(m_sentence_number));
    }
    if (m_sentiment_polarity_isSet) {
        obj.insert(QString("SentimentPolarity"), ::OpenAPI::toJsonValue(m_sentiment_polarity));
    }
    if (m_sentiment_result_string_isSet) {
        obj.insert(QString("SentimentResultString"), ::OpenAPI::toJsonValue(m_sentiment_result_string));
    }
    if (m_sentiment_value_isSet) {
        obj.insert(QString("SentimentValue"), ::OpenAPI::toJsonValue(m_sentiment_value));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

double OAISentence::getMagnitude() const {
    return m_magnitude;
}
void OAISentence::setMagnitude(const double &magnitude) {
    m_magnitude = magnitude;
    m_magnitude_isSet = true;
}

bool OAISentence::is_magnitude_Set() const{
    return m_magnitude_isSet;
}

bool OAISentence::is_magnitude_Valid() const{
    return m_magnitude_isValid;
}

qint32 OAISentence::getSentenceNumber() const {
    return m_sentence_number;
}
void OAISentence::setSentenceNumber(const qint32 &sentence_number) {
    m_sentence_number = sentence_number;
    m_sentence_number_isSet = true;
}

bool OAISentence::is_sentence_number_Set() const{
    return m_sentence_number_isSet;
}

bool OAISentence::is_sentence_number_Valid() const{
    return m_sentence_number_isValid;
}

QString OAISentence::getSentimentPolarity() const {
    return m_sentiment_polarity;
}
void OAISentence::setSentimentPolarity(const QString &sentiment_polarity) {
    m_sentiment_polarity = sentiment_polarity;
    m_sentiment_polarity_isSet = true;
}

bool OAISentence::is_sentiment_polarity_Set() const{
    return m_sentiment_polarity_isSet;
}

bool OAISentence::is_sentiment_polarity_Valid() const{
    return m_sentiment_polarity_isValid;
}

QString OAISentence::getSentimentResultString() const {
    return m_sentiment_result_string;
}
void OAISentence::setSentimentResultString(const QString &sentiment_result_string) {
    m_sentiment_result_string = sentiment_result_string;
    m_sentiment_result_string_isSet = true;
}

bool OAISentence::is_sentiment_result_string_Set() const{
    return m_sentiment_result_string_isSet;
}

bool OAISentence::is_sentiment_result_string_Valid() const{
    return m_sentiment_result_string_isValid;
}

double OAISentence::getSentimentValue() const {
    return m_sentiment_value;
}
void OAISentence::setSentimentValue(const double &sentiment_value) {
    m_sentiment_value = sentiment_value;
    m_sentiment_value_isSet = true;
}

bool OAISentence::is_sentiment_value_Set() const{
    return m_sentiment_value_isSet;
}

bool OAISentence::is_sentiment_value_Valid() const{
    return m_sentiment_value_isValid;
}

QString OAISentence::getText() const {
    return m_text;
}
void OAISentence::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISentence::is_text_Set() const{
    return m_text_isSet;
}

bool OAISentence::is_text_Valid() const{
    return m_text_isValid;
}

bool OAISentence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_magnitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_polarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_result_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
