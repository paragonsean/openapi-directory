/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISentencePart.h
 *
 * 
 */

#ifndef OAISentencePart_H
#define OAISentencePart_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISentencePart : public OAIObject {
public:
    OAISentencePart();
    OAISentencePart(QString json);
    ~OAISentencePart() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getKeywordType() const;
    void setKeywordType(const QString &keyword_type);
    bool is_keyword_type_Set() const;
    bool is_keyword_type_Valid() const;

    double getMagnitude() const;
    void setMagnitude(const double &magnitude);
    bool is_magnitude_Set() const;
    bool is_magnitude_Valid() const;

    qint32 getMentions() const;
    void setMentions(const qint32 &mentions);
    bool is_mentions_Set() const;
    bool is_mentions_Valid() const;

    QString getSentencePartType() const;
    void setSentencePartType(const QString &sentence_part_type);
    bool is_sentence_part_type_Set() const;
    bool is_sentence_part_type_Valid() const;

    QString getSentenceText() const;
    void setSentenceText(const QString &sentence_text);
    bool is_sentence_text_Set() const;
    bool is_sentence_text_Valid() const;

    QString getSentimentPolarity() const;
    void setSentimentPolarity(const QString &sentiment_polarity);
    bool is_sentiment_polarity_Set() const;
    bool is_sentiment_polarity_Valid() const;

    QString getSentimentResult() const;
    void setSentimentResult(const QString &sentiment_result);
    bool is_sentiment_result_Set() const;
    bool is_sentiment_result_Valid() const;

    double getSentimentValue() const;
    void setSentimentValue(const double &sentiment_value);
    bool is_sentiment_value_Set() const;
    bool is_sentiment_value_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_keyword_type;
    bool m_keyword_type_isSet;
    bool m_keyword_type_isValid;

    double m_magnitude;
    bool m_magnitude_isSet;
    bool m_magnitude_isValid;

    qint32 m_mentions;
    bool m_mentions_isSet;
    bool m_mentions_isValid;

    QString m_sentence_part_type;
    bool m_sentence_part_type_isSet;
    bool m_sentence_part_type_isValid;

    QString m_sentence_text;
    bool m_sentence_text_isSet;
    bool m_sentence_text_isValid;

    QString m_sentiment_polarity;
    bool m_sentiment_polarity_isSet;
    bool m_sentiment_polarity_isValid;

    QString m_sentiment_result;
    bool m_sentiment_result_isSet;
    bool m_sentiment_result_isValid;

    double m_sentiment_value;
    bool m_sentiment_value_isSet;
    bool m_sentiment_value_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISentencePart)

#endif // OAISentencePart_H
