/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDocumentResult.h
 *
 * 
 */

#ifndef OAIDocumentResult_H
#define OAIDocumentResult_H

#include <QJsonObject>

#include "OAICategory.h"
#include "OAIPartOfSpeech.h"
#include "OAISentence.h"
#include "OAISentencePart.h"
#include "OAISlangWord.h"
#include "OAIStorageInfo.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICategory;
class OAISentencePart;
class OAISentence;
class OAIPartOfSpeech;
class OAISlangWord;
class OAIStorageInfo;

class OAIDocumentResult : public OAIObject {
public:
    OAIDocumentResult();
    OAIDocumentResult(QString json);
    ~OAIDocumentResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAICategory> getAutoCategories() const;
    void setAutoCategories(const QList<OAICategory> &auto_categories);
    bool is_auto_categories_Set() const;
    bool is_auto_categories_Valid() const;

    QList<OAISentencePart> getCitations() const;
    void setCitations(const QList<OAISentencePart> &citations);
    bool is_citations_Set() const;
    bool is_citations_Valid() const;

    QString getCloudTagHtml() const;
    void setCloudTagHtml(const QString &cloud_tag_html);
    bool is_cloud_tag_html_Set() const;
    bool is_cloud_tag_html_Valid() const;

    QList<OAISentence> getCoreSentences() const;
    void setCoreSentences(const QList<OAISentence> &core_sentences);
    bool is_core_sentences_Set() const;
    bool is_core_sentences_Valid() const;

    QString getDetectedLanguage() const;
    void setDetectedLanguage(const QString &detected_language);
    bool is_detected_language_Set() const;
    bool is_detected_language_Valid() const;

    QString getDocSentimentPolarity() const;
    void setDocSentimentPolarity(const QString &doc_sentiment_polarity);
    bool is_doc_sentiment_polarity_Set() const;
    bool is_doc_sentiment_polarity_Valid() const;

    QString getDocSentimentResultString() const;
    void setDocSentimentResultString(const QString &doc_sentiment_result_string);
    bool is_doc_sentiment_result_string_Set() const;
    bool is_doc_sentiment_result_string_Valid() const;

    double getDocSentimentValue() const;
    void setDocSentimentValue(const double &doc_sentiment_value);
    bool is_doc_sentiment_value_Set() const;
    bool is_doc_sentiment_value_Valid() const;

    QList<OAISentencePart> getEntities() const;
    void setEntities(const QList<OAISentencePart> &entities);
    bool is_entities_Set() const;
    bool is_entities_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QList<OAISentencePart> getKeywords() const;
    void setKeywords(const QList<OAISentencePart> &keywords);
    bool is_keywords_Set() const;
    bool is_keywords_Valid() const;

    double getMagnitude() const;
    void setMagnitude(const double &magnitude);
    bool is_magnitude_Set() const;
    bool is_magnitude_Valid() const;

    QList<OAIPartOfSpeech> getPartsOfSpeech() const;
    void setPartsOfSpeech(const QList<OAIPartOfSpeech> &parts_of_speech);
    bool is_parts_of_speech_Set() const;
    bool is_parts_of_speech_Valid() const;

    QString getResultTextHtml() const;
    void setResultTextHtml(const QString &result_text_html);
    bool is_result_text_html_Set() const;
    bool is_result_text_html_Valid() const;

    QList<OAISlangWord> getSlangWords() const;
    void setSlangWords(const QList<OAISlangWord> &slang_words);
    bool is_slang_words_Set() const;
    bool is_slang_words_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIStorageInfo getStorageInfo() const;
    void setStorageInfo(const OAIStorageInfo &storage_info);
    bool is_storage_info_Set() const;
    bool is_storage_info_Valid() const;

    QString getSubjectivity() const;
    void setSubjectivity(const QString &subjectivity);
    bool is_subjectivity_Set() const;
    bool is_subjectivity_Valid() const;

    QList<OAISlangWord> getSwearWords() const;
    void setSwearWords(const QList<OAISlangWord> &swear_words);
    bool is_swear_words_Set() const;
    bool is_swear_words_Valid() const;

    QList<OAISentencePart> getThemes() const;
    void setThemes(const QList<OAISentencePart> &themes);
    bool is_themes_Set() const;
    bool is_themes_Valid() const;

    qint64 getTimestamp() const;
    void setTimestamp(const qint64 &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    qint32 getTransactionCurrentDay() const;
    void setTransactionCurrentDay(const qint32 &transaction_current_day);
    bool is_transaction_current_day_Set() const;
    bool is_transaction_current_day_Valid() const;

    qint32 getTransactionDailyLimit() const;
    void setTransactionDailyLimit(const qint32 &transaction_daily_limit);
    bool is_transaction_daily_limit_Set() const;
    bool is_transaction_daily_limit_Valid() const;

    qint32 getTransactionTotalCreditsLeft() const;
    void setTransactionTotalCreditsLeft(const qint32 &transaction_total_credits_left);
    bool is_transaction_total_credits_left_Set() const;
    bool is_transaction_total_credits_left_Valid() const;

    QDateTime getTransactionUseByDate() const;
    void setTransactionUseByDate(const QDateTime &transaction_use_by_date);
    bool is_transaction_use_by_date_Set() const;
    bool is_transaction_use_by_date_Valid() const;

    QList<OAICategory> getUserCategories() const;
    void setUserCategories(const QList<OAICategory> &user_categories);
    bool is_user_categories_Set() const;
    bool is_user_categories_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAICategory> m_auto_categories;
    bool m_auto_categories_isSet;
    bool m_auto_categories_isValid;

    QList<OAISentencePart> m_citations;
    bool m_citations_isSet;
    bool m_citations_isValid;

    QString m_cloud_tag_html;
    bool m_cloud_tag_html_isSet;
    bool m_cloud_tag_html_isValid;

    QList<OAISentence> m_core_sentences;
    bool m_core_sentences_isSet;
    bool m_core_sentences_isValid;

    QString m_detected_language;
    bool m_detected_language_isSet;
    bool m_detected_language_isValid;

    QString m_doc_sentiment_polarity;
    bool m_doc_sentiment_polarity_isSet;
    bool m_doc_sentiment_polarity_isValid;

    QString m_doc_sentiment_result_string;
    bool m_doc_sentiment_result_string_isSet;
    bool m_doc_sentiment_result_string_isValid;

    double m_doc_sentiment_value;
    bool m_doc_sentiment_value_isSet;
    bool m_doc_sentiment_value_isValid;

    QList<OAISentencePart> m_entities;
    bool m_entities_isSet;
    bool m_entities_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QList<OAISentencePart> m_keywords;
    bool m_keywords_isSet;
    bool m_keywords_isValid;

    double m_magnitude;
    bool m_magnitude_isSet;
    bool m_magnitude_isValid;

    QList<OAIPartOfSpeech> m_parts_of_speech;
    bool m_parts_of_speech_isSet;
    bool m_parts_of_speech_isValid;

    QString m_result_text_html;
    bool m_result_text_html_isSet;
    bool m_result_text_html_isValid;

    QList<OAISlangWord> m_slang_words;
    bool m_slang_words_isSet;
    bool m_slang_words_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIStorageInfo m_storage_info;
    bool m_storage_info_isSet;
    bool m_storage_info_isValid;

    QString m_subjectivity;
    bool m_subjectivity_isSet;
    bool m_subjectivity_isValid;

    QList<OAISlangWord> m_swear_words;
    bool m_swear_words_isSet;
    bool m_swear_words_isValid;

    QList<OAISentencePart> m_themes;
    bool m_themes_isSet;
    bool m_themes_isValid;

    qint64 m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    qint32 m_transaction_current_day;
    bool m_transaction_current_day_isSet;
    bool m_transaction_current_day_isValid;

    qint32 m_transaction_daily_limit;
    bool m_transaction_daily_limit_isSet;
    bool m_transaction_daily_limit_isValid;

    qint32 m_transaction_total_credits_left;
    bool m_transaction_total_credits_left_isSet;
    bool m_transaction_total_credits_left_isValid;

    QDateTime m_transaction_use_by_date;
    bool m_transaction_use_by_date_isSet;
    bool m_transaction_use_by_date_isValid;

    QList<OAICategory> m_user_categories;
    bool m_user_categories_isSet;
    bool m_user_categories_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDocumentResult)

#endif // OAIDocumentResult_H
