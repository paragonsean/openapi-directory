/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageInfo::OAIStorageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageInfo::OAIStorageInfo() {
    this->initializeModel();
}

OAIStorageInfo::~OAIStorageInfo() {}

void OAIStorageInfo::initializeModel() {

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_document_text_isSet = false;
    m_document_text_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_is_excel_isSet = false;
    m_is_excel_isValid = false;

    m_is_gs_excel_isSet = false;
    m_is_gs_excel_isValid = false;

    m_is_twitter_mode_isSet = false;
    m_is_twitter_mode_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;

    m_request_identifier_isSet = false;
    m_request_identifier_isValid = false;

    m_user_category_model_name_isSet = false;
    m_user_category_model_name_isValid = false;
}

void OAIStorageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageInfo::fromJsonObject(QJsonObject json) {

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("CreateDate")]);
    m_create_date_isSet = !json[QString("CreateDate")].isNull() && m_create_date_isValid;

    m_document_text_isValid = ::OpenAPI::fromJsonValue(m_document_text, json[QString("DocumentText")]);
    m_document_text_isSet = !json[QString("DocumentText")].isNull() && m_document_text_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("IP")]);
    m_ip_isSet = !json[QString("IP")].isNull() && m_ip_isValid;

    m_is_excel_isValid = ::OpenAPI::fromJsonValue(m_is_excel, json[QString("IsExcel")]);
    m_is_excel_isSet = !json[QString("IsExcel")].isNull() && m_is_excel_isValid;

    m_is_gs_excel_isValid = ::OpenAPI::fromJsonValue(m_is_gs_excel, json[QString("IsGSExcel")]);
    m_is_gs_excel_isSet = !json[QString("IsGSExcel")].isNull() && m_is_gs_excel_isValid;

    m_is_twitter_mode_isValid = ::OpenAPI::fromJsonValue(m_is_twitter_mode, json[QString("IsTwitterMode")]);
    m_is_twitter_mode_isSet = !json[QString("IsTwitterMode")].isNull() && m_is_twitter_mode_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("PrivateKey")]);
    m_private_key_isSet = !json[QString("PrivateKey")].isNull() && m_private_key_isValid;

    m_request_identifier_isValid = ::OpenAPI::fromJsonValue(m_request_identifier, json[QString("RequestIdentifier")]);
    m_request_identifier_isSet = !json[QString("RequestIdentifier")].isNull() && m_request_identifier_isValid;

    m_user_category_model_name_isValid = ::OpenAPI::fromJsonValue(m_user_category_model_name, json[QString("UserCategoryModelName")]);
    m_user_category_model_name_isSet = !json[QString("UserCategoryModelName")].isNull() && m_user_category_model_name_isValid;
}

QString OAIStorageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_create_date_isSet) {
        obj.insert(QString("CreateDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_document_text_isSet) {
        obj.insert(QString("DocumentText"), ::OpenAPI::toJsonValue(m_document_text));
    }
    if (m_ip_isSet) {
        obj.insert(QString("IP"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_is_excel_isSet) {
        obj.insert(QString("IsExcel"), ::OpenAPI::toJsonValue(m_is_excel));
    }
    if (m_is_gs_excel_isSet) {
        obj.insert(QString("IsGSExcel"), ::OpenAPI::toJsonValue(m_is_gs_excel));
    }
    if (m_is_twitter_mode_isSet) {
        obj.insert(QString("IsTwitterMode"), ::OpenAPI::toJsonValue(m_is_twitter_mode));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("PrivateKey"), ::OpenAPI::toJsonValue(m_private_key));
    }
    if (m_request_identifier_isSet) {
        obj.insert(QString("RequestIdentifier"), ::OpenAPI::toJsonValue(m_request_identifier));
    }
    if (m_user_category_model_name_isSet) {
        obj.insert(QString("UserCategoryModelName"), ::OpenAPI::toJsonValue(m_user_category_model_name));
    }
    return obj;
}

QDateTime OAIStorageInfo::getCreateDate() const {
    return m_create_date;
}
void OAIStorageInfo::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIStorageInfo::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIStorageInfo::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAIStorageInfo::getDocumentText() const {
    return m_document_text;
}
void OAIStorageInfo::setDocumentText(const QString &document_text) {
    m_document_text = document_text;
    m_document_text_isSet = true;
}

bool OAIStorageInfo::is_document_text_Set() const{
    return m_document_text_isSet;
}

bool OAIStorageInfo::is_document_text_Valid() const{
    return m_document_text_isValid;
}

QString OAIStorageInfo::getIp() const {
    return m_ip;
}
void OAIStorageInfo::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIStorageInfo::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIStorageInfo::is_ip_Valid() const{
    return m_ip_isValid;
}

bool OAIStorageInfo::isIsExcel() const {
    return m_is_excel;
}
void OAIStorageInfo::setIsExcel(const bool &is_excel) {
    m_is_excel = is_excel;
    m_is_excel_isSet = true;
}

bool OAIStorageInfo::is_is_excel_Set() const{
    return m_is_excel_isSet;
}

bool OAIStorageInfo::is_is_excel_Valid() const{
    return m_is_excel_isValid;
}

bool OAIStorageInfo::isIsGsExcel() const {
    return m_is_gs_excel;
}
void OAIStorageInfo::setIsGsExcel(const bool &is_gs_excel) {
    m_is_gs_excel = is_gs_excel;
    m_is_gs_excel_isSet = true;
}

bool OAIStorageInfo::is_is_gs_excel_Set() const{
    return m_is_gs_excel_isSet;
}

bool OAIStorageInfo::is_is_gs_excel_Valid() const{
    return m_is_gs_excel_isValid;
}

bool OAIStorageInfo::isIsTwitterMode() const {
    return m_is_twitter_mode;
}
void OAIStorageInfo::setIsTwitterMode(const bool &is_twitter_mode) {
    m_is_twitter_mode = is_twitter_mode;
    m_is_twitter_mode_isSet = true;
}

bool OAIStorageInfo::is_is_twitter_mode_Set() const{
    return m_is_twitter_mode_isSet;
}

bool OAIStorageInfo::is_is_twitter_mode_Valid() const{
    return m_is_twitter_mode_isValid;
}

QString OAIStorageInfo::getPrivateKey() const {
    return m_private_key;
}
void OAIStorageInfo::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAIStorageInfo::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAIStorageInfo::is_private_key_Valid() const{
    return m_private_key_isValid;
}

QString OAIStorageInfo::getRequestIdentifier() const {
    return m_request_identifier;
}
void OAIStorageInfo::setRequestIdentifier(const QString &request_identifier) {
    m_request_identifier = request_identifier;
    m_request_identifier_isSet = true;
}

bool OAIStorageInfo::is_request_identifier_Set() const{
    return m_request_identifier_isSet;
}

bool OAIStorageInfo::is_request_identifier_Valid() const{
    return m_request_identifier_isValid;
}

QString OAIStorageInfo::getUserCategoryModelName() const {
    return m_user_category_model_name;
}
void OAIStorageInfo::setUserCategoryModelName(const QString &user_category_model_name) {
    m_user_category_model_name = user_category_model_name;
    m_user_category_model_name_isSet = true;
}

bool OAIStorageInfo::is_user_category_model_name_Set() const{
    return m_user_category_model_name_isSet;
}

bool OAIStorageInfo::is_user_category_model_name_Valid() const{
    return m_user_category_model_name_isValid;
}

bool OAIStorageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_excel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_gs_excel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_twitter_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_category_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
