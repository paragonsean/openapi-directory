/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentResult::OAIDocumentResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentResult::OAIDocumentResult() {
    this->initializeModel();
}

OAIDocumentResult::~OAIDocumentResult() {}

void OAIDocumentResult::initializeModel() {

    m_auto_categories_isSet = false;
    m_auto_categories_isValid = false;

    m_citations_isSet = false;
    m_citations_isValid = false;

    m_cloud_tag_html_isSet = false;
    m_cloud_tag_html_isValid = false;

    m_core_sentences_isSet = false;
    m_core_sentences_isValid = false;

    m_detected_language_isSet = false;
    m_detected_language_isValid = false;

    m_doc_sentiment_polarity_isSet = false;
    m_doc_sentiment_polarity_isValid = false;

    m_doc_sentiment_result_string_isSet = false;
    m_doc_sentiment_result_string_isValid = false;

    m_doc_sentiment_value_isSet = false;
    m_doc_sentiment_value_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_magnitude_isSet = false;
    m_magnitude_isValid = false;

    m_parts_of_speech_isSet = false;
    m_parts_of_speech_isValid = false;

    m_result_text_html_isSet = false;
    m_result_text_html_isValid = false;

    m_slang_words_isSet = false;
    m_slang_words_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_storage_info_isSet = false;
    m_storage_info_isValid = false;

    m_subjectivity_isSet = false;
    m_subjectivity_isValid = false;

    m_swear_words_isSet = false;
    m_swear_words_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_transaction_current_day_isSet = false;
    m_transaction_current_day_isValid = false;

    m_transaction_daily_limit_isSet = false;
    m_transaction_daily_limit_isValid = false;

    m_transaction_total_credits_left_isSet = false;
    m_transaction_total_credits_left_isValid = false;

    m_transaction_use_by_date_isSet = false;
    m_transaction_use_by_date_isValid = false;

    m_user_categories_isSet = false;
    m_user_categories_isValid = false;
}

void OAIDocumentResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentResult::fromJsonObject(QJsonObject json) {

    m_auto_categories_isValid = ::OpenAPI::fromJsonValue(m_auto_categories, json[QString("AutoCategories")]);
    m_auto_categories_isSet = !json[QString("AutoCategories")].isNull() && m_auto_categories_isValid;

    m_citations_isValid = ::OpenAPI::fromJsonValue(m_citations, json[QString("Citations")]);
    m_citations_isSet = !json[QString("Citations")].isNull() && m_citations_isValid;

    m_cloud_tag_html_isValid = ::OpenAPI::fromJsonValue(m_cloud_tag_html, json[QString("CloudTagHTML")]);
    m_cloud_tag_html_isSet = !json[QString("CloudTagHTML")].isNull() && m_cloud_tag_html_isValid;

    m_core_sentences_isValid = ::OpenAPI::fromJsonValue(m_core_sentences, json[QString("CoreSentences")]);
    m_core_sentences_isSet = !json[QString("CoreSentences")].isNull() && m_core_sentences_isValid;

    m_detected_language_isValid = ::OpenAPI::fromJsonValue(m_detected_language, json[QString("DetectedLanguage")]);
    m_detected_language_isSet = !json[QString("DetectedLanguage")].isNull() && m_detected_language_isValid;

    m_doc_sentiment_polarity_isValid = ::OpenAPI::fromJsonValue(m_doc_sentiment_polarity, json[QString("DocSentimentPolarity")]);
    m_doc_sentiment_polarity_isSet = !json[QString("DocSentimentPolarity")].isNull() && m_doc_sentiment_polarity_isValid;

    m_doc_sentiment_result_string_isValid = ::OpenAPI::fromJsonValue(m_doc_sentiment_result_string, json[QString("DocSentimentResultString")]);
    m_doc_sentiment_result_string_isSet = !json[QString("DocSentimentResultString")].isNull() && m_doc_sentiment_result_string_isValid;

    m_doc_sentiment_value_isValid = ::OpenAPI::fromJsonValue(m_doc_sentiment_value, json[QString("DocSentimentValue")]);
    m_doc_sentiment_value_isSet = !json[QString("DocSentimentValue")].isNull() && m_doc_sentiment_value_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("Entities")]);
    m_entities_isSet = !json[QString("Entities")].isNull() && m_entities_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("Keywords")]);
    m_keywords_isSet = !json[QString("Keywords")].isNull() && m_keywords_isValid;

    m_magnitude_isValid = ::OpenAPI::fromJsonValue(m_magnitude, json[QString("Magnitude")]);
    m_magnitude_isSet = !json[QString("Magnitude")].isNull() && m_magnitude_isValid;

    m_parts_of_speech_isValid = ::OpenAPI::fromJsonValue(m_parts_of_speech, json[QString("PartsOfSpeech")]);
    m_parts_of_speech_isSet = !json[QString("PartsOfSpeech")].isNull() && m_parts_of_speech_isValid;

    m_result_text_html_isValid = ::OpenAPI::fromJsonValue(m_result_text_html, json[QString("ResultTextHtml")]);
    m_result_text_html_isSet = !json[QString("ResultTextHtml")].isNull() && m_result_text_html_isValid;

    m_slang_words_isValid = ::OpenAPI::fromJsonValue(m_slang_words, json[QString("SlangWords")]);
    m_slang_words_isSet = !json[QString("SlangWords")].isNull() && m_slang_words_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_storage_info_isValid = ::OpenAPI::fromJsonValue(m_storage_info, json[QString("StorageInfo")]);
    m_storage_info_isSet = !json[QString("StorageInfo")].isNull() && m_storage_info_isValid;

    m_subjectivity_isValid = ::OpenAPI::fromJsonValue(m_subjectivity, json[QString("Subjectivity")]);
    m_subjectivity_isSet = !json[QString("Subjectivity")].isNull() && m_subjectivity_isValid;

    m_swear_words_isValid = ::OpenAPI::fromJsonValue(m_swear_words, json[QString("SwearWords")]);
    m_swear_words_isSet = !json[QString("SwearWords")].isNull() && m_swear_words_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("Themes")]);
    m_themes_isSet = !json[QString("Themes")].isNull() && m_themes_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_transaction_current_day_isValid = ::OpenAPI::fromJsonValue(m_transaction_current_day, json[QString("TransactionCurrentDay")]);
    m_transaction_current_day_isSet = !json[QString("TransactionCurrentDay")].isNull() && m_transaction_current_day_isValid;

    m_transaction_daily_limit_isValid = ::OpenAPI::fromJsonValue(m_transaction_daily_limit, json[QString("TransactionDailyLimit")]);
    m_transaction_daily_limit_isSet = !json[QString("TransactionDailyLimit")].isNull() && m_transaction_daily_limit_isValid;

    m_transaction_total_credits_left_isValid = ::OpenAPI::fromJsonValue(m_transaction_total_credits_left, json[QString("TransactionTotalCreditsLeft")]);
    m_transaction_total_credits_left_isSet = !json[QString("TransactionTotalCreditsLeft")].isNull() && m_transaction_total_credits_left_isValid;

    m_transaction_use_by_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_use_by_date, json[QString("TransactionUseByDate")]);
    m_transaction_use_by_date_isSet = !json[QString("TransactionUseByDate")].isNull() && m_transaction_use_by_date_isValid;

    m_user_categories_isValid = ::OpenAPI::fromJsonValue(m_user_categories, json[QString("UserCategories")]);
    m_user_categories_isSet = !json[QString("UserCategories")].isNull() && m_user_categories_isValid;
}

QString OAIDocumentResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentResult::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_categories.size() > 0) {
        obj.insert(QString("AutoCategories"), ::OpenAPI::toJsonValue(m_auto_categories));
    }
    if (m_citations.size() > 0) {
        obj.insert(QString("Citations"), ::OpenAPI::toJsonValue(m_citations));
    }
    if (m_cloud_tag_html_isSet) {
        obj.insert(QString("CloudTagHTML"), ::OpenAPI::toJsonValue(m_cloud_tag_html));
    }
    if (m_core_sentences.size() > 0) {
        obj.insert(QString("CoreSentences"), ::OpenAPI::toJsonValue(m_core_sentences));
    }
    if (m_detected_language_isSet) {
        obj.insert(QString("DetectedLanguage"), ::OpenAPI::toJsonValue(m_detected_language));
    }
    if (m_doc_sentiment_polarity_isSet) {
        obj.insert(QString("DocSentimentPolarity"), ::OpenAPI::toJsonValue(m_doc_sentiment_polarity));
    }
    if (m_doc_sentiment_result_string_isSet) {
        obj.insert(QString("DocSentimentResultString"), ::OpenAPI::toJsonValue(m_doc_sentiment_result_string));
    }
    if (m_doc_sentiment_value_isSet) {
        obj.insert(QString("DocSentimentValue"), ::OpenAPI::toJsonValue(m_doc_sentiment_value));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("Entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("Keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_magnitude_isSet) {
        obj.insert(QString("Magnitude"), ::OpenAPI::toJsonValue(m_magnitude));
    }
    if (m_parts_of_speech.size() > 0) {
        obj.insert(QString("PartsOfSpeech"), ::OpenAPI::toJsonValue(m_parts_of_speech));
    }
    if (m_result_text_html_isSet) {
        obj.insert(QString("ResultTextHtml"), ::OpenAPI::toJsonValue(m_result_text_html));
    }
    if (m_slang_words.size() > 0) {
        obj.insert(QString("SlangWords"), ::OpenAPI::toJsonValue(m_slang_words));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_storage_info.isSet()) {
        obj.insert(QString("StorageInfo"), ::OpenAPI::toJsonValue(m_storage_info));
    }
    if (m_subjectivity_isSet) {
        obj.insert(QString("Subjectivity"), ::OpenAPI::toJsonValue(m_subjectivity));
    }
    if (m_swear_words.size() > 0) {
        obj.insert(QString("SwearWords"), ::OpenAPI::toJsonValue(m_swear_words));
    }
    if (m_themes.size() > 0) {
        obj.insert(QString("Themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_transaction_current_day_isSet) {
        obj.insert(QString("TransactionCurrentDay"), ::OpenAPI::toJsonValue(m_transaction_current_day));
    }
    if (m_transaction_daily_limit_isSet) {
        obj.insert(QString("TransactionDailyLimit"), ::OpenAPI::toJsonValue(m_transaction_daily_limit));
    }
    if (m_transaction_total_credits_left_isSet) {
        obj.insert(QString("TransactionTotalCreditsLeft"), ::OpenAPI::toJsonValue(m_transaction_total_credits_left));
    }
    if (m_transaction_use_by_date_isSet) {
        obj.insert(QString("TransactionUseByDate"), ::OpenAPI::toJsonValue(m_transaction_use_by_date));
    }
    if (m_user_categories.size() > 0) {
        obj.insert(QString("UserCategories"), ::OpenAPI::toJsonValue(m_user_categories));
    }
    return obj;
}

QList<OAICategory> OAIDocumentResult::getAutoCategories() const {
    return m_auto_categories;
}
void OAIDocumentResult::setAutoCategories(const QList<OAICategory> &auto_categories) {
    m_auto_categories = auto_categories;
    m_auto_categories_isSet = true;
}

bool OAIDocumentResult::is_auto_categories_Set() const{
    return m_auto_categories_isSet;
}

bool OAIDocumentResult::is_auto_categories_Valid() const{
    return m_auto_categories_isValid;
}

QList<OAISentencePart> OAIDocumentResult::getCitations() const {
    return m_citations;
}
void OAIDocumentResult::setCitations(const QList<OAISentencePart> &citations) {
    m_citations = citations;
    m_citations_isSet = true;
}

bool OAIDocumentResult::is_citations_Set() const{
    return m_citations_isSet;
}

bool OAIDocumentResult::is_citations_Valid() const{
    return m_citations_isValid;
}

QString OAIDocumentResult::getCloudTagHtml() const {
    return m_cloud_tag_html;
}
void OAIDocumentResult::setCloudTagHtml(const QString &cloud_tag_html) {
    m_cloud_tag_html = cloud_tag_html;
    m_cloud_tag_html_isSet = true;
}

bool OAIDocumentResult::is_cloud_tag_html_Set() const{
    return m_cloud_tag_html_isSet;
}

bool OAIDocumentResult::is_cloud_tag_html_Valid() const{
    return m_cloud_tag_html_isValid;
}

QList<OAISentence> OAIDocumentResult::getCoreSentences() const {
    return m_core_sentences;
}
void OAIDocumentResult::setCoreSentences(const QList<OAISentence> &core_sentences) {
    m_core_sentences = core_sentences;
    m_core_sentences_isSet = true;
}

bool OAIDocumentResult::is_core_sentences_Set() const{
    return m_core_sentences_isSet;
}

bool OAIDocumentResult::is_core_sentences_Valid() const{
    return m_core_sentences_isValid;
}

QString OAIDocumentResult::getDetectedLanguage() const {
    return m_detected_language;
}
void OAIDocumentResult::setDetectedLanguage(const QString &detected_language) {
    m_detected_language = detected_language;
    m_detected_language_isSet = true;
}

bool OAIDocumentResult::is_detected_language_Set() const{
    return m_detected_language_isSet;
}

bool OAIDocumentResult::is_detected_language_Valid() const{
    return m_detected_language_isValid;
}

QString OAIDocumentResult::getDocSentimentPolarity() const {
    return m_doc_sentiment_polarity;
}
void OAIDocumentResult::setDocSentimentPolarity(const QString &doc_sentiment_polarity) {
    m_doc_sentiment_polarity = doc_sentiment_polarity;
    m_doc_sentiment_polarity_isSet = true;
}

bool OAIDocumentResult::is_doc_sentiment_polarity_Set() const{
    return m_doc_sentiment_polarity_isSet;
}

bool OAIDocumentResult::is_doc_sentiment_polarity_Valid() const{
    return m_doc_sentiment_polarity_isValid;
}

QString OAIDocumentResult::getDocSentimentResultString() const {
    return m_doc_sentiment_result_string;
}
void OAIDocumentResult::setDocSentimentResultString(const QString &doc_sentiment_result_string) {
    m_doc_sentiment_result_string = doc_sentiment_result_string;
    m_doc_sentiment_result_string_isSet = true;
}

bool OAIDocumentResult::is_doc_sentiment_result_string_Set() const{
    return m_doc_sentiment_result_string_isSet;
}

bool OAIDocumentResult::is_doc_sentiment_result_string_Valid() const{
    return m_doc_sentiment_result_string_isValid;
}

double OAIDocumentResult::getDocSentimentValue() const {
    return m_doc_sentiment_value;
}
void OAIDocumentResult::setDocSentimentValue(const double &doc_sentiment_value) {
    m_doc_sentiment_value = doc_sentiment_value;
    m_doc_sentiment_value_isSet = true;
}

bool OAIDocumentResult::is_doc_sentiment_value_Set() const{
    return m_doc_sentiment_value_isSet;
}

bool OAIDocumentResult::is_doc_sentiment_value_Valid() const{
    return m_doc_sentiment_value_isValid;
}

QList<OAISentencePart> OAIDocumentResult::getEntities() const {
    return m_entities;
}
void OAIDocumentResult::setEntities(const QList<OAISentencePart> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIDocumentResult::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIDocumentResult::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIDocumentResult::getErrorMessage() const {
    return m_error_message;
}
void OAIDocumentResult::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDocumentResult::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDocumentResult::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QList<OAISentencePart> OAIDocumentResult::getKeywords() const {
    return m_keywords;
}
void OAIDocumentResult::setKeywords(const QList<OAISentencePart> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIDocumentResult::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIDocumentResult::is_keywords_Valid() const{
    return m_keywords_isValid;
}

double OAIDocumentResult::getMagnitude() const {
    return m_magnitude;
}
void OAIDocumentResult::setMagnitude(const double &magnitude) {
    m_magnitude = magnitude;
    m_magnitude_isSet = true;
}

bool OAIDocumentResult::is_magnitude_Set() const{
    return m_magnitude_isSet;
}

bool OAIDocumentResult::is_magnitude_Valid() const{
    return m_magnitude_isValid;
}

QList<OAIPartOfSpeech> OAIDocumentResult::getPartsOfSpeech() const {
    return m_parts_of_speech;
}
void OAIDocumentResult::setPartsOfSpeech(const QList<OAIPartOfSpeech> &parts_of_speech) {
    m_parts_of_speech = parts_of_speech;
    m_parts_of_speech_isSet = true;
}

bool OAIDocumentResult::is_parts_of_speech_Set() const{
    return m_parts_of_speech_isSet;
}

bool OAIDocumentResult::is_parts_of_speech_Valid() const{
    return m_parts_of_speech_isValid;
}

QString OAIDocumentResult::getResultTextHtml() const {
    return m_result_text_html;
}
void OAIDocumentResult::setResultTextHtml(const QString &result_text_html) {
    m_result_text_html = result_text_html;
    m_result_text_html_isSet = true;
}

bool OAIDocumentResult::is_result_text_html_Set() const{
    return m_result_text_html_isSet;
}

bool OAIDocumentResult::is_result_text_html_Valid() const{
    return m_result_text_html_isValid;
}

QList<OAISlangWord> OAIDocumentResult::getSlangWords() const {
    return m_slang_words;
}
void OAIDocumentResult::setSlangWords(const QList<OAISlangWord> &slang_words) {
    m_slang_words = slang_words;
    m_slang_words_isSet = true;
}

bool OAIDocumentResult::is_slang_words_Set() const{
    return m_slang_words_isSet;
}

bool OAIDocumentResult::is_slang_words_Valid() const{
    return m_slang_words_isValid;
}

qint32 OAIDocumentResult::getStatus() const {
    return m_status;
}
void OAIDocumentResult::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDocumentResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDocumentResult::is_status_Valid() const{
    return m_status_isValid;
}

OAIStorageInfo OAIDocumentResult::getStorageInfo() const {
    return m_storage_info;
}
void OAIDocumentResult::setStorageInfo(const OAIStorageInfo &storage_info) {
    m_storage_info = storage_info;
    m_storage_info_isSet = true;
}

bool OAIDocumentResult::is_storage_info_Set() const{
    return m_storage_info_isSet;
}

bool OAIDocumentResult::is_storage_info_Valid() const{
    return m_storage_info_isValid;
}

QString OAIDocumentResult::getSubjectivity() const {
    return m_subjectivity;
}
void OAIDocumentResult::setSubjectivity(const QString &subjectivity) {
    m_subjectivity = subjectivity;
    m_subjectivity_isSet = true;
}

bool OAIDocumentResult::is_subjectivity_Set() const{
    return m_subjectivity_isSet;
}

bool OAIDocumentResult::is_subjectivity_Valid() const{
    return m_subjectivity_isValid;
}

QList<OAISlangWord> OAIDocumentResult::getSwearWords() const {
    return m_swear_words;
}
void OAIDocumentResult::setSwearWords(const QList<OAISlangWord> &swear_words) {
    m_swear_words = swear_words;
    m_swear_words_isSet = true;
}

bool OAIDocumentResult::is_swear_words_Set() const{
    return m_swear_words_isSet;
}

bool OAIDocumentResult::is_swear_words_Valid() const{
    return m_swear_words_isValid;
}

QList<OAISentencePart> OAIDocumentResult::getThemes() const {
    return m_themes;
}
void OAIDocumentResult::setThemes(const QList<OAISentencePart> &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIDocumentResult::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIDocumentResult::is_themes_Valid() const{
    return m_themes_isValid;
}

qint64 OAIDocumentResult::getTimestamp() const {
    return m_timestamp;
}
void OAIDocumentResult::setTimestamp(const qint64 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDocumentResult::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDocumentResult::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAIDocumentResult::getTransactionCurrentDay() const {
    return m_transaction_current_day;
}
void OAIDocumentResult::setTransactionCurrentDay(const qint32 &transaction_current_day) {
    m_transaction_current_day = transaction_current_day;
    m_transaction_current_day_isSet = true;
}

bool OAIDocumentResult::is_transaction_current_day_Set() const{
    return m_transaction_current_day_isSet;
}

bool OAIDocumentResult::is_transaction_current_day_Valid() const{
    return m_transaction_current_day_isValid;
}

qint32 OAIDocumentResult::getTransactionDailyLimit() const {
    return m_transaction_daily_limit;
}
void OAIDocumentResult::setTransactionDailyLimit(const qint32 &transaction_daily_limit) {
    m_transaction_daily_limit = transaction_daily_limit;
    m_transaction_daily_limit_isSet = true;
}

bool OAIDocumentResult::is_transaction_daily_limit_Set() const{
    return m_transaction_daily_limit_isSet;
}

bool OAIDocumentResult::is_transaction_daily_limit_Valid() const{
    return m_transaction_daily_limit_isValid;
}

qint32 OAIDocumentResult::getTransactionTotalCreditsLeft() const {
    return m_transaction_total_credits_left;
}
void OAIDocumentResult::setTransactionTotalCreditsLeft(const qint32 &transaction_total_credits_left) {
    m_transaction_total_credits_left = transaction_total_credits_left;
    m_transaction_total_credits_left_isSet = true;
}

bool OAIDocumentResult::is_transaction_total_credits_left_Set() const{
    return m_transaction_total_credits_left_isSet;
}

bool OAIDocumentResult::is_transaction_total_credits_left_Valid() const{
    return m_transaction_total_credits_left_isValid;
}

QDateTime OAIDocumentResult::getTransactionUseByDate() const {
    return m_transaction_use_by_date;
}
void OAIDocumentResult::setTransactionUseByDate(const QDateTime &transaction_use_by_date) {
    m_transaction_use_by_date = transaction_use_by_date;
    m_transaction_use_by_date_isSet = true;
}

bool OAIDocumentResult::is_transaction_use_by_date_Set() const{
    return m_transaction_use_by_date_isSet;
}

bool OAIDocumentResult::is_transaction_use_by_date_Valid() const{
    return m_transaction_use_by_date_isValid;
}

QList<OAICategory> OAIDocumentResult::getUserCategories() const {
    return m_user_categories;
}
void OAIDocumentResult::setUserCategories(const QList<OAICategory> &user_categories) {
    m_user_categories = user_categories;
    m_user_categories_isSet = true;
}

bool OAIDocumentResult::is_user_categories_Set() const{
    return m_user_categories_isSet;
}

bool OAIDocumentResult::is_user_categories_Valid() const{
    return m_user_categories_isValid;
}

bool OAIDocumentResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_citations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_tag_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_sentences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_sentiment_polarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_sentiment_result_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_sentiment_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_magnitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parts_of_speech.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_text_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slang_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjectivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swear_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_current_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_daily_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_total_credits_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_use_by_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
