/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_document_language_isSet = false;
    m_document_language_isValid = false;

    m_document_text_isSet = false;
    m_document_text_isValid = false;

    m_is_twitter_content_isSet = false;
    m_is_twitter_content_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;

    m_request_identifier_isSet = false;
    m_request_identifier_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_serialize_format_isSet = false;
    m_serialize_format_isValid = false;

    m_user_category_model_name_isSet = false;
    m_user_category_model_name_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_document_language_isValid = ::OpenAPI::fromJsonValue(m_document_language, json[QString("DocumentLanguage")]);
    m_document_language_isSet = !json[QString("DocumentLanguage")].isNull() && m_document_language_isValid;

    m_document_text_isValid = ::OpenAPI::fromJsonValue(m_document_text, json[QString("DocumentText")]);
    m_document_text_isSet = !json[QString("DocumentText")].isNull() && m_document_text_isValid;

    m_is_twitter_content_isValid = ::OpenAPI::fromJsonValue(m_is_twitter_content, json[QString("IsTwitterContent")]);
    m_is_twitter_content_isSet = !json[QString("IsTwitterContent")].isNull() && m_is_twitter_content_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("PrivateKey")]);
    m_private_key_isSet = !json[QString("PrivateKey")].isNull() && m_private_key_isValid;

    m_request_identifier_isValid = ::OpenAPI::fromJsonValue(m_request_identifier, json[QString("RequestIdentifier")]);
    m_request_identifier_isSet = !json[QString("RequestIdentifier")].isNull() && m_request_identifier_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("Secret")]);
    m_secret_isSet = !json[QString("Secret")].isNull() && m_secret_isValid;

    m_serialize_format_isValid = ::OpenAPI::fromJsonValue(m_serialize_format, json[QString("SerializeFormat")]);
    m_serialize_format_isSet = !json[QString("SerializeFormat")].isNull() && m_serialize_format_isValid;

    m_user_category_model_name_isValid = ::OpenAPI::fromJsonValue(m_user_category_model_name, json[QString("UserCategoryModelName")]);
    m_user_category_model_name_isSet = !json[QString("UserCategoryModelName")].isNull() && m_user_category_model_name_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_document_language_isSet) {
        obj.insert(QString("DocumentLanguage"), ::OpenAPI::toJsonValue(m_document_language));
    }
    if (m_document_text_isSet) {
        obj.insert(QString("DocumentText"), ::OpenAPI::toJsonValue(m_document_text));
    }
    if (m_is_twitter_content_isSet) {
        obj.insert(QString("IsTwitterContent"), ::OpenAPI::toJsonValue(m_is_twitter_content));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("PrivateKey"), ::OpenAPI::toJsonValue(m_private_key));
    }
    if (m_request_identifier_isSet) {
        obj.insert(QString("RequestIdentifier"), ::OpenAPI::toJsonValue(m_request_identifier));
    }
    if (m_secret_isSet) {
        obj.insert(QString("Secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_serialize_format_isSet) {
        obj.insert(QString("SerializeFormat"), ::OpenAPI::toJsonValue(m_serialize_format));
    }
    if (m_user_category_model_name_isSet) {
        obj.insert(QString("UserCategoryModelName"), ::OpenAPI::toJsonValue(m_user_category_model_name));
    }
    return obj;
}

QString OAIDocument::getDocumentLanguage() const {
    return m_document_language;
}
void OAIDocument::setDocumentLanguage(const QString &document_language) {
    m_document_language = document_language;
    m_document_language_isSet = true;
}

bool OAIDocument::is_document_language_Set() const{
    return m_document_language_isSet;
}

bool OAIDocument::is_document_language_Valid() const{
    return m_document_language_isValid;
}

QString OAIDocument::getDocumentText() const {
    return m_document_text;
}
void OAIDocument::setDocumentText(const QString &document_text) {
    m_document_text = document_text;
    m_document_text_isSet = true;
}

bool OAIDocument::is_document_text_Set() const{
    return m_document_text_isSet;
}

bool OAIDocument::is_document_text_Valid() const{
    return m_document_text_isValid;
}

bool OAIDocument::isIsTwitterContent() const {
    return m_is_twitter_content;
}
void OAIDocument::setIsTwitterContent(const bool &is_twitter_content) {
    m_is_twitter_content = is_twitter_content;
    m_is_twitter_content_isSet = true;
}

bool OAIDocument::is_is_twitter_content_Set() const{
    return m_is_twitter_content_isSet;
}

bool OAIDocument::is_is_twitter_content_Valid() const{
    return m_is_twitter_content_isValid;
}

QString OAIDocument::getPrivateKey() const {
    return m_private_key;
}
void OAIDocument::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAIDocument::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAIDocument::is_private_key_Valid() const{
    return m_private_key_isValid;
}

QString OAIDocument::getRequestIdentifier() const {
    return m_request_identifier;
}
void OAIDocument::setRequestIdentifier(const QString &request_identifier) {
    m_request_identifier = request_identifier;
    m_request_identifier_isSet = true;
}

bool OAIDocument::is_request_identifier_Set() const{
    return m_request_identifier_isSet;
}

bool OAIDocument::is_request_identifier_Valid() const{
    return m_request_identifier_isValid;
}

QString OAIDocument::getSecret() const {
    return m_secret;
}
void OAIDocument::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIDocument::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIDocument::is_secret_Valid() const{
    return m_secret_isValid;
}

qint32 OAIDocument::getSerializeFormat() const {
    return m_serialize_format;
}
void OAIDocument::setSerializeFormat(const qint32 &serialize_format) {
    m_serialize_format = serialize_format;
    m_serialize_format_isSet = true;
}

bool OAIDocument::is_serialize_format_Set() const{
    return m_serialize_format_isSet;
}

bool OAIDocument::is_serialize_format_Valid() const{
    return m_serialize_format_isValid;
}

QString OAIDocument::getUserCategoryModelName() const {
    return m_user_category_model_name;
}
void OAIDocument::setUserCategoryModelName(const QString &user_category_model_name) {
    m_user_category_model_name = user_category_model_name;
    m_user_category_model_name_isSet = true;
}

bool OAIDocument::is_user_category_model_name_Set() const{
    return m_user_category_model_name_isSet;
}

bool OAIDocument::is_user_category_model_name_Valid() const{
    return m_user_category_model_name_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_twitter_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialize_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_category_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_text_isValid && m_private_key_isValid && true;
}

} // namespace OpenAPI
