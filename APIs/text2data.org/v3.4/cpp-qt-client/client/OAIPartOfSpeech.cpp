/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartOfSpeech.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartOfSpeech::OAIPartOfSpeech(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartOfSpeech::OAIPartOfSpeech() {
    this->initializeModel();
}

OAIPartOfSpeech::~OAIPartOfSpeech() {}

void OAIPartOfSpeech::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_object_sentiment_polarity_isSet = false;
    m_object_sentiment_polarity_isValid = false;

    m_object_sentiment_result_string_isSet = false;
    m_object_sentiment_result_string_isValid = false;

    m_object_sentiment_value_isSet = false;
    m_object_sentiment_value_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIPartOfSpeech::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartOfSpeech::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("Object")]);
    m_object_isSet = !json[QString("Object")].isNull() && m_object_isValid;

    m_object_sentiment_polarity_isValid = ::OpenAPI::fromJsonValue(m_object_sentiment_polarity, json[QString("ObjectSentimentPolarity")]);
    m_object_sentiment_polarity_isSet = !json[QString("ObjectSentimentPolarity")].isNull() && m_object_sentiment_polarity_isValid;

    m_object_sentiment_result_string_isValid = ::OpenAPI::fromJsonValue(m_object_sentiment_result_string, json[QString("ObjectSentimentResultString")]);
    m_object_sentiment_result_string_isSet = !json[QString("ObjectSentimentResultString")].isNull() && m_object_sentiment_result_string_isValid;

    m_object_sentiment_value_isValid = ::OpenAPI::fromJsonValue(m_object_sentiment_value, json[QString("ObjectSentimentValue")]);
    m_object_sentiment_value_isSet = !json[QString("ObjectSentimentValue")].isNull() && m_object_sentiment_value_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;
}

QString OAIPartOfSpeech::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartOfSpeech::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_object_isSet) {
        obj.insert(QString("Object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_object_sentiment_polarity_isSet) {
        obj.insert(QString("ObjectSentimentPolarity"), ::OpenAPI::toJsonValue(m_object_sentiment_polarity));
    }
    if (m_object_sentiment_result_string_isSet) {
        obj.insert(QString("ObjectSentimentResultString"), ::OpenAPI::toJsonValue(m_object_sentiment_result_string));
    }
    if (m_object_sentiment_value_isSet) {
        obj.insert(QString("ObjectSentimentValue"), ::OpenAPI::toJsonValue(m_object_sentiment_value));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIPartOfSpeech::getAction() const {
    return m_action;
}
void OAIPartOfSpeech::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIPartOfSpeech::is_action_Set() const{
    return m_action_isSet;
}

bool OAIPartOfSpeech::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIPartOfSpeech::getObject() const {
    return m_object;
}
void OAIPartOfSpeech::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIPartOfSpeech::is_object_Set() const{
    return m_object_isSet;
}

bool OAIPartOfSpeech::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIPartOfSpeech::getObjectSentimentPolarity() const {
    return m_object_sentiment_polarity;
}
void OAIPartOfSpeech::setObjectSentimentPolarity(const QString &object_sentiment_polarity) {
    m_object_sentiment_polarity = object_sentiment_polarity;
    m_object_sentiment_polarity_isSet = true;
}

bool OAIPartOfSpeech::is_object_sentiment_polarity_Set() const{
    return m_object_sentiment_polarity_isSet;
}

bool OAIPartOfSpeech::is_object_sentiment_polarity_Valid() const{
    return m_object_sentiment_polarity_isValid;
}

QString OAIPartOfSpeech::getObjectSentimentResultString() const {
    return m_object_sentiment_result_string;
}
void OAIPartOfSpeech::setObjectSentimentResultString(const QString &object_sentiment_result_string) {
    m_object_sentiment_result_string = object_sentiment_result_string;
    m_object_sentiment_result_string_isSet = true;
}

bool OAIPartOfSpeech::is_object_sentiment_result_string_Set() const{
    return m_object_sentiment_result_string_isSet;
}

bool OAIPartOfSpeech::is_object_sentiment_result_string_Valid() const{
    return m_object_sentiment_result_string_isValid;
}

double OAIPartOfSpeech::getObjectSentimentValue() const {
    return m_object_sentiment_value;
}
void OAIPartOfSpeech::setObjectSentimentValue(const double &object_sentiment_value) {
    m_object_sentiment_value = object_sentiment_value;
    m_object_sentiment_value_isSet = true;
}

bool OAIPartOfSpeech::is_object_sentiment_value_Set() const{
    return m_object_sentiment_value_isSet;
}

bool OAIPartOfSpeech::is_object_sentiment_value_Valid() const{
    return m_object_sentiment_value_isValid;
}

QString OAIPartOfSpeech::getSubject() const {
    return m_subject;
}
void OAIPartOfSpeech::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIPartOfSpeech::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIPartOfSpeech::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIPartOfSpeech::getText() const {
    return m_text;
}
void OAIPartOfSpeech::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPartOfSpeech::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPartOfSpeech::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIPartOfSpeech::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_sentiment_polarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_sentiment_result_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_sentiment_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartOfSpeech::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
