/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlangWord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlangWord::OAISlangWord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlangWord::OAISlangWord() {
    this->initializeModel();
}

OAISlangWord::~OAISlangWord() {}

void OAISlangWord::initializeModel() {

    m_slang_word_text_isSet = false;
    m_slang_word_text_isValid = false;

    m_slang_word_translation_isSet = false;
    m_slang_word_translation_isValid = false;
}

void OAISlangWord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlangWord::fromJsonObject(QJsonObject json) {

    m_slang_word_text_isValid = ::OpenAPI::fromJsonValue(m_slang_word_text, json[QString("SlangWordText")]);
    m_slang_word_text_isSet = !json[QString("SlangWordText")].isNull() && m_slang_word_text_isValid;

    m_slang_word_translation_isValid = ::OpenAPI::fromJsonValue(m_slang_word_translation, json[QString("SlangWordTranslation")]);
    m_slang_word_translation_isSet = !json[QString("SlangWordTranslation")].isNull() && m_slang_word_translation_isValid;
}

QString OAISlangWord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlangWord::asJsonObject() const {
    QJsonObject obj;
    if (m_slang_word_text_isSet) {
        obj.insert(QString("SlangWordText"), ::OpenAPI::toJsonValue(m_slang_word_text));
    }
    if (m_slang_word_translation_isSet) {
        obj.insert(QString("SlangWordTranslation"), ::OpenAPI::toJsonValue(m_slang_word_translation));
    }
    return obj;
}

QString OAISlangWord::getSlangWordText() const {
    return m_slang_word_text;
}
void OAISlangWord::setSlangWordText(const QString &slang_word_text) {
    m_slang_word_text = slang_word_text;
    m_slang_word_text_isSet = true;
}

bool OAISlangWord::is_slang_word_text_Set() const{
    return m_slang_word_text_isSet;
}

bool OAISlangWord::is_slang_word_text_Valid() const{
    return m_slang_word_text_isValid;
}

QString OAISlangWord::getSlangWordTranslation() const {
    return m_slang_word_translation;
}
void OAISlangWord::setSlangWordTranslation(const QString &slang_word_translation) {
    m_slang_word_translation = slang_word_translation;
    m_slang_word_translation_isSet = true;
}

bool OAISlangWord::is_slang_word_translation_Set() const{
    return m_slang_word_translation_isSet;
}

bool OAISlangWord::is_slang_word_translation_Valid() const{
    return m_slang_word_translation_isValid;
}

bool OAISlangWord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slang_word_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slang_word_translation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlangWord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
