/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiConfig::OAIApiConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiConfig::OAIApiConfig() {
    this->initializeModel();
}

OAIApiConfig::~OAIApiConfig() {}

void OAIApiConfig::initializeModel() {

    m_api_private_key_isSet = false;
    m_api_private_key_isValid = false;

    m_api_secret_isSet = false;
    m_api_secret_isValid = false;

    m_blacklisted_words_isSet = false;
    m_blacklisted_words_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_is_request_status_ok_isSet = false;
    m_is_request_status_ok_isValid = false;
}

void OAIApiConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiConfig::fromJsonObject(QJsonObject json) {

    m_api_private_key_isValid = ::OpenAPI::fromJsonValue(m_api_private_key, json[QString("APIPrivateKey")]);
    m_api_private_key_isSet = !json[QString("APIPrivateKey")].isNull() && m_api_private_key_isValid;

    m_api_secret_isValid = ::OpenAPI::fromJsonValue(m_api_secret, json[QString("APISecret")]);
    m_api_secret_isSet = !json[QString("APISecret")].isNull() && m_api_secret_isValid;

    m_blacklisted_words_isValid = ::OpenAPI::fromJsonValue(m_blacklisted_words, json[QString("BlacklistedWords")]);
    m_blacklisted_words_isSet = !json[QString("BlacklistedWords")].isNull() && m_blacklisted_words_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_is_request_status_ok_isValid = ::OpenAPI::fromJsonValue(m_is_request_status_ok, json[QString("IsRequestStatusOK")]);
    m_is_request_status_ok_isSet = !json[QString("IsRequestStatusOK")].isNull() && m_is_request_status_ok_isValid;
}

QString OAIApiConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_api_private_key_isSet) {
        obj.insert(QString("APIPrivateKey"), ::OpenAPI::toJsonValue(m_api_private_key));
    }
    if (m_api_secret_isSet) {
        obj.insert(QString("APISecret"), ::OpenAPI::toJsonValue(m_api_secret));
    }
    if (m_blacklisted_words.size() > 0) {
        obj.insert(QString("BlacklistedWords"), ::OpenAPI::toJsonValue(m_blacklisted_words));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_is_request_status_ok_isSet) {
        obj.insert(QString("IsRequestStatusOK"), ::OpenAPI::toJsonValue(m_is_request_status_ok));
    }
    return obj;
}

QString OAIApiConfig::getApiPrivateKey() const {
    return m_api_private_key;
}
void OAIApiConfig::setApiPrivateKey(const QString &api_private_key) {
    m_api_private_key = api_private_key;
    m_api_private_key_isSet = true;
}

bool OAIApiConfig::is_api_private_key_Set() const{
    return m_api_private_key_isSet;
}

bool OAIApiConfig::is_api_private_key_Valid() const{
    return m_api_private_key_isValid;
}

QString OAIApiConfig::getApiSecret() const {
    return m_api_secret;
}
void OAIApiConfig::setApiSecret(const QString &api_secret) {
    m_api_secret = api_secret;
    m_api_secret_isSet = true;
}

bool OAIApiConfig::is_api_secret_Set() const{
    return m_api_secret_isSet;
}

bool OAIApiConfig::is_api_secret_Valid() const{
    return m_api_secret_isValid;
}

QList<QString> OAIApiConfig::getBlacklistedWords() const {
    return m_blacklisted_words;
}
void OAIApiConfig::setBlacklistedWords(const QList<QString> &blacklisted_words) {
    m_blacklisted_words = blacklisted_words;
    m_blacklisted_words_isSet = true;
}

bool OAIApiConfig::is_blacklisted_words_Set() const{
    return m_blacklisted_words_isSet;
}

bool OAIApiConfig::is_blacklisted_words_Valid() const{
    return m_blacklisted_words_isValid;
}

QString OAIApiConfig::getErrorMessage() const {
    return m_error_message;
}
void OAIApiConfig::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIApiConfig::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIApiConfig::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIApiConfig::isIsRequestStatusOk() const {
    return m_is_request_status_ok;
}
void OAIApiConfig::setIsRequestStatusOk(const bool &is_request_status_ok) {
    m_is_request_status_ok = is_request_status_ok;
    m_is_request_status_ok_isSet = true;
}

bool OAIApiConfig::is_is_request_status_ok_Set() const{
    return m_is_request_status_ok_isSet;
}

bool OAIApiConfig::is_is_request_status_ok_Valid() const{
    return m_is_request_status_ok_isValid;
}

bool OAIApiConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blacklisted_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_request_status_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
