/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentencePart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentencePart::OAISentencePart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentencePart::OAISentencePart() {
    this->initializeModel();
}

OAISentencePart::~OAISentencePart() {}

void OAISentencePart::initializeModel() {

    m_keyword_type_isSet = false;
    m_keyword_type_isValid = false;

    m_magnitude_isSet = false;
    m_magnitude_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;

    m_sentence_part_type_isSet = false;
    m_sentence_part_type_isValid = false;

    m_sentence_text_isSet = false;
    m_sentence_text_isValid = false;

    m_sentiment_polarity_isSet = false;
    m_sentiment_polarity_isValid = false;

    m_sentiment_result_isSet = false;
    m_sentiment_result_isValid = false;

    m_sentiment_value_isSet = false;
    m_sentiment_value_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAISentencePart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentencePart::fromJsonObject(QJsonObject json) {

    m_keyword_type_isValid = ::OpenAPI::fromJsonValue(m_keyword_type, json[QString("KeywordType")]);
    m_keyword_type_isSet = !json[QString("KeywordType")].isNull() && m_keyword_type_isValid;

    m_magnitude_isValid = ::OpenAPI::fromJsonValue(m_magnitude, json[QString("Magnitude")]);
    m_magnitude_isSet = !json[QString("Magnitude")].isNull() && m_magnitude_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("Mentions")]);
    m_mentions_isSet = !json[QString("Mentions")].isNull() && m_mentions_isValid;

    m_sentence_part_type_isValid = ::OpenAPI::fromJsonValue(m_sentence_part_type, json[QString("SentencePartType")]);
    m_sentence_part_type_isSet = !json[QString("SentencePartType")].isNull() && m_sentence_part_type_isValid;

    m_sentence_text_isValid = ::OpenAPI::fromJsonValue(m_sentence_text, json[QString("SentenceText")]);
    m_sentence_text_isSet = !json[QString("SentenceText")].isNull() && m_sentence_text_isValid;

    m_sentiment_polarity_isValid = ::OpenAPI::fromJsonValue(m_sentiment_polarity, json[QString("SentimentPolarity")]);
    m_sentiment_polarity_isSet = !json[QString("SentimentPolarity")].isNull() && m_sentiment_polarity_isValid;

    m_sentiment_result_isValid = ::OpenAPI::fromJsonValue(m_sentiment_result, json[QString("SentimentResult")]);
    m_sentiment_result_isSet = !json[QString("SentimentResult")].isNull() && m_sentiment_result_isValid;

    m_sentiment_value_isValid = ::OpenAPI::fromJsonValue(m_sentiment_value, json[QString("SentimentValue")]);
    m_sentiment_value_isSet = !json[QString("SentimentValue")].isNull() && m_sentiment_value_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;
}

QString OAISentencePart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentencePart::asJsonObject() const {
    QJsonObject obj;
    if (m_keyword_type_isSet) {
        obj.insert(QString("KeywordType"), ::OpenAPI::toJsonValue(m_keyword_type));
    }
    if (m_magnitude_isSet) {
        obj.insert(QString("Magnitude"), ::OpenAPI::toJsonValue(m_magnitude));
    }
    if (m_mentions_isSet) {
        obj.insert(QString("Mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    if (m_sentence_part_type_isSet) {
        obj.insert(QString("SentencePartType"), ::OpenAPI::toJsonValue(m_sentence_part_type));
    }
    if (m_sentence_text_isSet) {
        obj.insert(QString("SentenceText"), ::OpenAPI::toJsonValue(m_sentence_text));
    }
    if (m_sentiment_polarity_isSet) {
        obj.insert(QString("SentimentPolarity"), ::OpenAPI::toJsonValue(m_sentiment_polarity));
    }
    if (m_sentiment_result_isSet) {
        obj.insert(QString("SentimentResult"), ::OpenAPI::toJsonValue(m_sentiment_result));
    }
    if (m_sentiment_value_isSet) {
        obj.insert(QString("SentimentValue"), ::OpenAPI::toJsonValue(m_sentiment_value));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAISentencePart::getKeywordType() const {
    return m_keyword_type;
}
void OAISentencePart::setKeywordType(const QString &keyword_type) {
    m_keyword_type = keyword_type;
    m_keyword_type_isSet = true;
}

bool OAISentencePart::is_keyword_type_Set() const{
    return m_keyword_type_isSet;
}

bool OAISentencePart::is_keyword_type_Valid() const{
    return m_keyword_type_isValid;
}

double OAISentencePart::getMagnitude() const {
    return m_magnitude;
}
void OAISentencePart::setMagnitude(const double &magnitude) {
    m_magnitude = magnitude;
    m_magnitude_isSet = true;
}

bool OAISentencePart::is_magnitude_Set() const{
    return m_magnitude_isSet;
}

bool OAISentencePart::is_magnitude_Valid() const{
    return m_magnitude_isValid;
}

qint32 OAISentencePart::getMentions() const {
    return m_mentions;
}
void OAISentencePart::setMentions(const qint32 &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAISentencePart::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAISentencePart::is_mentions_Valid() const{
    return m_mentions_isValid;
}

QString OAISentencePart::getSentencePartType() const {
    return m_sentence_part_type;
}
void OAISentencePart::setSentencePartType(const QString &sentence_part_type) {
    m_sentence_part_type = sentence_part_type;
    m_sentence_part_type_isSet = true;
}

bool OAISentencePart::is_sentence_part_type_Set() const{
    return m_sentence_part_type_isSet;
}

bool OAISentencePart::is_sentence_part_type_Valid() const{
    return m_sentence_part_type_isValid;
}

QString OAISentencePart::getSentenceText() const {
    return m_sentence_text;
}
void OAISentencePart::setSentenceText(const QString &sentence_text) {
    m_sentence_text = sentence_text;
    m_sentence_text_isSet = true;
}

bool OAISentencePart::is_sentence_text_Set() const{
    return m_sentence_text_isSet;
}

bool OAISentencePart::is_sentence_text_Valid() const{
    return m_sentence_text_isValid;
}

QString OAISentencePart::getSentimentPolarity() const {
    return m_sentiment_polarity;
}
void OAISentencePart::setSentimentPolarity(const QString &sentiment_polarity) {
    m_sentiment_polarity = sentiment_polarity;
    m_sentiment_polarity_isSet = true;
}

bool OAISentencePart::is_sentiment_polarity_Set() const{
    return m_sentiment_polarity_isSet;
}

bool OAISentencePart::is_sentiment_polarity_Valid() const{
    return m_sentiment_polarity_isValid;
}

QString OAISentencePart::getSentimentResult() const {
    return m_sentiment_result;
}
void OAISentencePart::setSentimentResult(const QString &sentiment_result) {
    m_sentiment_result = sentiment_result;
    m_sentiment_result_isSet = true;
}

bool OAISentencePart::is_sentiment_result_Set() const{
    return m_sentiment_result_isSet;
}

bool OAISentencePart::is_sentiment_result_Valid() const{
    return m_sentiment_result_isValid;
}

double OAISentencePart::getSentimentValue() const {
    return m_sentiment_value;
}
void OAISentencePart::setSentimentValue(const double &sentiment_value) {
    m_sentiment_value = sentiment_value;
    m_sentiment_value_isSet = true;
}

bool OAISentencePart::is_sentiment_value_Set() const{
    return m_sentiment_value_isSet;
}

bool OAISentencePart::is_sentiment_value_Valid() const{
    return m_sentiment_value_isValid;
}

QString OAISentencePart::getText() const {
    return m_text;
}
void OAISentencePart::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISentencePart::is_text_Set() const{
    return m_text_isSet;
}

bool OAISentencePart::is_text_Valid() const{
    return m_text_isValid;
}

bool OAISentencePart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyword_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magnitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentence_part_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentence_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_polarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentencePart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
