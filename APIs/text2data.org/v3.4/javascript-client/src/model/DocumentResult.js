/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import PartOfSpeech from './PartOfSpeech';
import Sentence from './Sentence';
import SentencePart from './SentencePart';
import SlangWord from './SlangWord';
import StorageInfo from './StorageInfo';

/**
 * The DocumentResult model module.
 * @module model/DocumentResult
 * @version v3.4
 */
class DocumentResult {
    /**
     * Constructs a new <code>DocumentResult</code>.
     * @alias module:model/DocumentResult
     */
    constructor() { 
        
        DocumentResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentResult} obj Optional instance to populate.
     * @return {module:model/DocumentResult} The populated <code>DocumentResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentResult();

            if (data.hasOwnProperty('AutoCategories')) {
                obj['AutoCategories'] = ApiClient.convertToType(data['AutoCategories'], [Category]);
            }
            if (data.hasOwnProperty('Citations')) {
                obj['Citations'] = ApiClient.convertToType(data['Citations'], [SentencePart]);
            }
            if (data.hasOwnProperty('CloudTagHTML')) {
                obj['CloudTagHTML'] = ApiClient.convertToType(data['CloudTagHTML'], 'String');
            }
            if (data.hasOwnProperty('CoreSentences')) {
                obj['CoreSentences'] = ApiClient.convertToType(data['CoreSentences'], [Sentence]);
            }
            if (data.hasOwnProperty('DetectedLanguage')) {
                obj['DetectedLanguage'] = ApiClient.convertToType(data['DetectedLanguage'], 'String');
            }
            if (data.hasOwnProperty('DocSentimentPolarity')) {
                obj['DocSentimentPolarity'] = ApiClient.convertToType(data['DocSentimentPolarity'], 'String');
            }
            if (data.hasOwnProperty('DocSentimentResultString')) {
                obj['DocSentimentResultString'] = ApiClient.convertToType(data['DocSentimentResultString'], 'String');
            }
            if (data.hasOwnProperty('DocSentimentValue')) {
                obj['DocSentimentValue'] = ApiClient.convertToType(data['DocSentimentValue'], 'Number');
            }
            if (data.hasOwnProperty('Entities')) {
                obj['Entities'] = ApiClient.convertToType(data['Entities'], [SentencePart]);
            }
            if (data.hasOwnProperty('ErrorMessage')) {
                obj['ErrorMessage'] = ApiClient.convertToType(data['ErrorMessage'], 'String');
            }
            if (data.hasOwnProperty('Keywords')) {
                obj['Keywords'] = ApiClient.convertToType(data['Keywords'], [SentencePart]);
            }
            if (data.hasOwnProperty('Magnitude')) {
                obj['Magnitude'] = ApiClient.convertToType(data['Magnitude'], 'Number');
            }
            if (data.hasOwnProperty('PartsOfSpeech')) {
                obj['PartsOfSpeech'] = ApiClient.convertToType(data['PartsOfSpeech'], [PartOfSpeech]);
            }
            if (data.hasOwnProperty('ResultTextHtml')) {
                obj['ResultTextHtml'] = ApiClient.convertToType(data['ResultTextHtml'], 'String');
            }
            if (data.hasOwnProperty('SlangWords')) {
                obj['SlangWords'] = ApiClient.convertToType(data['SlangWords'], [SlangWord]);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'Number');
            }
            if (data.hasOwnProperty('StorageInfo')) {
                obj['StorageInfo'] = StorageInfo.constructFromObject(data['StorageInfo']);
            }
            if (data.hasOwnProperty('Subjectivity')) {
                obj['Subjectivity'] = ApiClient.convertToType(data['Subjectivity'], 'String');
            }
            if (data.hasOwnProperty('SwearWords')) {
                obj['SwearWords'] = ApiClient.convertToType(data['SwearWords'], [SlangWord]);
            }
            if (data.hasOwnProperty('Themes')) {
                obj['Themes'] = ApiClient.convertToType(data['Themes'], [SentencePart]);
            }
            if (data.hasOwnProperty('Timestamp')) {
                obj['Timestamp'] = ApiClient.convertToType(data['Timestamp'], 'Number');
            }
            if (data.hasOwnProperty('TransactionCurrentDay')) {
                obj['TransactionCurrentDay'] = ApiClient.convertToType(data['TransactionCurrentDay'], 'Number');
            }
            if (data.hasOwnProperty('TransactionDailyLimit')) {
                obj['TransactionDailyLimit'] = ApiClient.convertToType(data['TransactionDailyLimit'], 'Number');
            }
            if (data.hasOwnProperty('TransactionTotalCreditsLeft')) {
                obj['TransactionTotalCreditsLeft'] = ApiClient.convertToType(data['TransactionTotalCreditsLeft'], 'Number');
            }
            if (data.hasOwnProperty('TransactionUseByDate')) {
                obj['TransactionUseByDate'] = ApiClient.convertToType(data['TransactionUseByDate'], 'Date');
            }
            if (data.hasOwnProperty('UserCategories')) {
                obj['UserCategories'] = ApiClient.convertToType(data['UserCategories'], [Category]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentResult</code>.
     */
    static validateJSON(data) {
        if (data['AutoCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AutoCategories'])) {
                throw new Error("Expected the field `AutoCategories` to be an array in the JSON data but got " + data['AutoCategories']);
            }
            // validate the optional field `AutoCategories` (array)
            for (const item of data['AutoCategories']) {
                Category.validateJSON(item);
            };
        }
        if (data['Citations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Citations'])) {
                throw new Error("Expected the field `Citations` to be an array in the JSON data but got " + data['Citations']);
            }
            // validate the optional field `Citations` (array)
            for (const item of data['Citations']) {
                SentencePart.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['CloudTagHTML'] && !(typeof data['CloudTagHTML'] === 'string' || data['CloudTagHTML'] instanceof String)) {
            throw new Error("Expected the field `CloudTagHTML` to be a primitive type in the JSON string but got " + data['CloudTagHTML']);
        }
        if (data['CoreSentences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CoreSentences'])) {
                throw new Error("Expected the field `CoreSentences` to be an array in the JSON data but got " + data['CoreSentences']);
            }
            // validate the optional field `CoreSentences` (array)
            for (const item of data['CoreSentences']) {
                Sentence.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['DetectedLanguage'] && !(typeof data['DetectedLanguage'] === 'string' || data['DetectedLanguage'] instanceof String)) {
            throw new Error("Expected the field `DetectedLanguage` to be a primitive type in the JSON string but got " + data['DetectedLanguage']);
        }
        // ensure the json data is a string
        if (data['DocSentimentPolarity'] && !(typeof data['DocSentimentPolarity'] === 'string' || data['DocSentimentPolarity'] instanceof String)) {
            throw new Error("Expected the field `DocSentimentPolarity` to be a primitive type in the JSON string but got " + data['DocSentimentPolarity']);
        }
        // ensure the json data is a string
        if (data['DocSentimentResultString'] && !(typeof data['DocSentimentResultString'] === 'string' || data['DocSentimentResultString'] instanceof String)) {
            throw new Error("Expected the field `DocSentimentResultString` to be a primitive type in the JSON string but got " + data['DocSentimentResultString']);
        }
        if (data['Entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Entities'])) {
                throw new Error("Expected the field `Entities` to be an array in the JSON data but got " + data['Entities']);
            }
            // validate the optional field `Entities` (array)
            for (const item of data['Entities']) {
                SentencePart.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ErrorMessage'] && !(typeof data['ErrorMessage'] === 'string' || data['ErrorMessage'] instanceof String)) {
            throw new Error("Expected the field `ErrorMessage` to be a primitive type in the JSON string but got " + data['ErrorMessage']);
        }
        if (data['Keywords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Keywords'])) {
                throw new Error("Expected the field `Keywords` to be an array in the JSON data but got " + data['Keywords']);
            }
            // validate the optional field `Keywords` (array)
            for (const item of data['Keywords']) {
                SentencePart.validateJSON(item);
            };
        }
        if (data['PartsOfSpeech']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PartsOfSpeech'])) {
                throw new Error("Expected the field `PartsOfSpeech` to be an array in the JSON data but got " + data['PartsOfSpeech']);
            }
            // validate the optional field `PartsOfSpeech` (array)
            for (const item of data['PartsOfSpeech']) {
                PartOfSpeech.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ResultTextHtml'] && !(typeof data['ResultTextHtml'] === 'string' || data['ResultTextHtml'] instanceof String)) {
            throw new Error("Expected the field `ResultTextHtml` to be a primitive type in the JSON string but got " + data['ResultTextHtml']);
        }
        if (data['SlangWords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SlangWords'])) {
                throw new Error("Expected the field `SlangWords` to be an array in the JSON data but got " + data['SlangWords']);
            }
            // validate the optional field `SlangWords` (array)
            for (const item of data['SlangWords']) {
                SlangWord.validateJSON(item);
            };
        }
        // validate the optional field `StorageInfo`
        if (data['StorageInfo']) { // data not null
          StorageInfo.validateJSON(data['StorageInfo']);
        }
        // ensure the json data is a string
        if (data['Subjectivity'] && !(typeof data['Subjectivity'] === 'string' || data['Subjectivity'] instanceof String)) {
            throw new Error("Expected the field `Subjectivity` to be a primitive type in the JSON string but got " + data['Subjectivity']);
        }
        if (data['SwearWords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SwearWords'])) {
                throw new Error("Expected the field `SwearWords` to be an array in the JSON data but got " + data['SwearWords']);
            }
            // validate the optional field `SwearWords` (array)
            for (const item of data['SwearWords']) {
                SlangWord.validateJSON(item);
            };
        }
        if (data['Themes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Themes'])) {
                throw new Error("Expected the field `Themes` to be an array in the JSON data but got " + data['Themes']);
            }
            // validate the optional field `Themes` (array)
            for (const item of data['Themes']) {
                SentencePart.validateJSON(item);
            };
        }
        if (data['UserCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['UserCategories'])) {
                throw new Error("Expected the field `UserCategories` to be an array in the JSON data but got " + data['UserCategories']);
            }
            // validate the optional field `UserCategories` (array)
            for (const item of data['UserCategories']) {
                Category.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Category>} AutoCategories
 */
DocumentResult.prototype['AutoCategories'] = undefined;

/**
 * @member {Array.<module:model/SentencePart>} Citations
 */
DocumentResult.prototype['Citations'] = undefined;

/**
 * @member {String} CloudTagHTML
 */
DocumentResult.prototype['CloudTagHTML'] = undefined;

/**
 * @member {Array.<module:model/Sentence>} CoreSentences
 */
DocumentResult.prototype['CoreSentences'] = undefined;

/**
 * @member {String} DetectedLanguage
 */
DocumentResult.prototype['DetectedLanguage'] = undefined;

/**
 * @member {String} DocSentimentPolarity
 */
DocumentResult.prototype['DocSentimentPolarity'] = undefined;

/**
 * @member {String} DocSentimentResultString
 */
DocumentResult.prototype['DocSentimentResultString'] = undefined;

/**
 * @member {Number} DocSentimentValue
 */
DocumentResult.prototype['DocSentimentValue'] = undefined;

/**
 * @member {Array.<module:model/SentencePart>} Entities
 */
DocumentResult.prototype['Entities'] = undefined;

/**
 * @member {String} ErrorMessage
 */
DocumentResult.prototype['ErrorMessage'] = undefined;

/**
 * @member {Array.<module:model/SentencePart>} Keywords
 */
DocumentResult.prototype['Keywords'] = undefined;

/**
 * @member {Number} Magnitude
 */
DocumentResult.prototype['Magnitude'] = undefined;

/**
 * @member {Array.<module:model/PartOfSpeech>} PartsOfSpeech
 */
DocumentResult.prototype['PartsOfSpeech'] = undefined;

/**
 * @member {String} ResultTextHtml
 */
DocumentResult.prototype['ResultTextHtml'] = undefined;

/**
 * @member {Array.<module:model/SlangWord>} SlangWords
 */
DocumentResult.prototype['SlangWords'] = undefined;

/**
 * @member {Number} Status
 */
DocumentResult.prototype['Status'] = undefined;

/**
 * @member {module:model/StorageInfo} StorageInfo
 */
DocumentResult.prototype['StorageInfo'] = undefined;

/**
 * @member {String} Subjectivity
 */
DocumentResult.prototype['Subjectivity'] = undefined;

/**
 * @member {Array.<module:model/SlangWord>} SwearWords
 */
DocumentResult.prototype['SwearWords'] = undefined;

/**
 * @member {Array.<module:model/SentencePart>} Themes
 */
DocumentResult.prototype['Themes'] = undefined;

/**
 * @member {Number} Timestamp
 */
DocumentResult.prototype['Timestamp'] = undefined;

/**
 * @member {Number} TransactionCurrentDay
 */
DocumentResult.prototype['TransactionCurrentDay'] = undefined;

/**
 * @member {Number} TransactionDailyLimit
 */
DocumentResult.prototype['TransactionDailyLimit'] = undefined;

/**
 * @member {Number} TransactionTotalCreditsLeft
 */
DocumentResult.prototype['TransactionTotalCreditsLeft'] = undefined;

/**
 * @member {Date} TransactionUseByDate
 */
DocumentResult.prototype['TransactionUseByDate'] = undefined;

/**
 * @member {Array.<module:model/Category>} UserCategories
 */
DocumentResult.prototype['UserCategories'] = undefined;






export default DocumentResult;

