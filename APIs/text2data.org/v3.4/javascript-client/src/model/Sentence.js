/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Sentence model module.
 * @module model/Sentence
 * @version v3.4
 */
class Sentence {
    /**
     * Constructs a new <code>Sentence</code>.
     * @alias module:model/Sentence
     */
    constructor() { 
        
        Sentence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Sentence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sentence} obj Optional instance to populate.
     * @return {module:model/Sentence} The populated <code>Sentence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sentence();

            if (data.hasOwnProperty('Magnitude')) {
                obj['Magnitude'] = ApiClient.convertToType(data['Magnitude'], 'Number');
            }
            if (data.hasOwnProperty('SentenceNumber')) {
                obj['SentenceNumber'] = ApiClient.convertToType(data['SentenceNumber'], 'Number');
            }
            if (data.hasOwnProperty('SentimentPolarity')) {
                obj['SentimentPolarity'] = ApiClient.convertToType(data['SentimentPolarity'], 'String');
            }
            if (data.hasOwnProperty('SentimentResultString')) {
                obj['SentimentResultString'] = ApiClient.convertToType(data['SentimentResultString'], 'String');
            }
            if (data.hasOwnProperty('SentimentValue')) {
                obj['SentimentValue'] = ApiClient.convertToType(data['SentimentValue'], 'Number');
            }
            if (data.hasOwnProperty('Text')) {
                obj['Text'] = ApiClient.convertToType(data['Text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sentence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sentence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['SentimentPolarity'] && !(typeof data['SentimentPolarity'] === 'string' || data['SentimentPolarity'] instanceof String)) {
            throw new Error("Expected the field `SentimentPolarity` to be a primitive type in the JSON string but got " + data['SentimentPolarity']);
        }
        // ensure the json data is a string
        if (data['SentimentResultString'] && !(typeof data['SentimentResultString'] === 'string' || data['SentimentResultString'] instanceof String)) {
            throw new Error("Expected the field `SentimentResultString` to be a primitive type in the JSON string but got " + data['SentimentResultString']);
        }
        // ensure the json data is a string
        if (data['Text'] && !(typeof data['Text'] === 'string' || data['Text'] instanceof String)) {
            throw new Error("Expected the field `Text` to be a primitive type in the JSON string but got " + data['Text']);
        }

        return true;
    }


}



/**
 * @member {Number} Magnitude
 */
Sentence.prototype['Magnitude'] = undefined;

/**
 * @member {Number} SentenceNumber
 */
Sentence.prototype['SentenceNumber'] = undefined;

/**
 * @member {String} SentimentPolarity
 */
Sentence.prototype['SentimentPolarity'] = undefined;

/**
 * @member {String} SentimentResultString
 */
Sentence.prototype['SentimentResultString'] = undefined;

/**
 * @member {Number} SentimentValue
 */
Sentence.prototype['SentimentValue'] = undefined;

/**
 * @member {String} Text
 */
Sentence.prototype['Text'] = undefined;






export default Sentence;

