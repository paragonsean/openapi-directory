/**
 * Text Analytics & Sentiment Analysis API | api.text2data.com
 * <p>The current api version is <b>v3.4</b></p><br><br><p>The api methods listed below can be called directly from this page to test the output. You might set the api_key to pre-authenticate all requests on this page (this will work if your secret is blank).</p><br><br> API endpoint URL: http://{apiName}.text2data.com/v3/ {method}<br><br>The api can be consumed directly or using our SDK. Our Excel Add-In and Google Sheets Add-on are also using this api to process the data.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Document model module.
 * @module model/Document
 * @version v3.4
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * @alias module:model/Document
     * @param documentText {String} 
     * @param privateKey {String} 
     */
    constructor(documentText, privateKey) { 
        
        Document.initialize(this, documentText, privateKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentText, privateKey) { 
        obj['DocumentText'] = documentText;
        obj['PrivateKey'] = privateKey;
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('DocumentLanguage')) {
                obj['DocumentLanguage'] = ApiClient.convertToType(data['DocumentLanguage'], 'String');
            }
            if (data.hasOwnProperty('DocumentText')) {
                obj['DocumentText'] = ApiClient.convertToType(data['DocumentText'], 'String');
            }
            if (data.hasOwnProperty('IsTwitterContent')) {
                obj['IsTwitterContent'] = ApiClient.convertToType(data['IsTwitterContent'], 'Boolean');
            }
            if (data.hasOwnProperty('PrivateKey')) {
                obj['PrivateKey'] = ApiClient.convertToType(data['PrivateKey'], 'String');
            }
            if (data.hasOwnProperty('RequestIdentifier')) {
                obj['RequestIdentifier'] = ApiClient.convertToType(data['RequestIdentifier'], 'String');
            }
            if (data.hasOwnProperty('Secret')) {
                obj['Secret'] = ApiClient.convertToType(data['Secret'], 'String');
            }
            if (data.hasOwnProperty('SerializeFormat')) {
                obj['SerializeFormat'] = ApiClient.convertToType(data['SerializeFormat'], 'Number');
            }
            if (data.hasOwnProperty('UserCategoryModelName')) {
                obj['UserCategoryModelName'] = ApiClient.convertToType(data['UserCategoryModelName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Document.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DocumentLanguage'] && !(typeof data['DocumentLanguage'] === 'string' || data['DocumentLanguage'] instanceof String)) {
            throw new Error("Expected the field `DocumentLanguage` to be a primitive type in the JSON string but got " + data['DocumentLanguage']);
        }
        // ensure the json data is a string
        if (data['DocumentText'] && !(typeof data['DocumentText'] === 'string' || data['DocumentText'] instanceof String)) {
            throw new Error("Expected the field `DocumentText` to be a primitive type in the JSON string but got " + data['DocumentText']);
        }
        // ensure the json data is a string
        if (data['PrivateKey'] && !(typeof data['PrivateKey'] === 'string' || data['PrivateKey'] instanceof String)) {
            throw new Error("Expected the field `PrivateKey` to be a primitive type in the JSON string but got " + data['PrivateKey']);
        }
        // ensure the json data is a string
        if (data['RequestIdentifier'] && !(typeof data['RequestIdentifier'] === 'string' || data['RequestIdentifier'] instanceof String)) {
            throw new Error("Expected the field `RequestIdentifier` to be a primitive type in the JSON string but got " + data['RequestIdentifier']);
        }
        // ensure the json data is a string
        if (data['Secret'] && !(typeof data['Secret'] === 'string' || data['Secret'] instanceof String)) {
            throw new Error("Expected the field `Secret` to be a primitive type in the JSON string but got " + data['Secret']);
        }
        // ensure the json data is a string
        if (data['UserCategoryModelName'] && !(typeof data['UserCategoryModelName'] === 'string' || data['UserCategoryModelName'] instanceof String)) {
            throw new Error("Expected the field `UserCategoryModelName` to be a primitive type in the JSON string but got " + data['UserCategoryModelName']);
        }

        return true;
    }


}

Document.RequiredProperties = ["DocumentText", "PrivateKey"];

/**
 * @member {String} DocumentLanguage
 */
Document.prototype['DocumentLanguage'] = undefined;

/**
 * @member {String} DocumentText
 */
Document.prototype['DocumentText'] = undefined;

/**
 * @member {Boolean} IsTwitterContent
 */
Document.prototype['IsTwitterContent'] = undefined;

/**
 * @member {String} PrivateKey
 */
Document.prototype['PrivateKey'] = undefined;

/**
 * @member {String} RequestIdentifier
 */
Document.prototype['RequestIdentifier'] = undefined;

/**
 * @member {String} Secret
 */
Document.prototype['Secret'] = undefined;

/**
 * @member {Number} SerializeFormat
 */
Document.prototype['SerializeFormat'] = undefined;

/**
 * @member {String} UserCategoryModelName
 */
Document.prototype['UserCategoryModelName'] = undefined;






export default Document;

