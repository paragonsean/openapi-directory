# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sentence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, magnitude: float=None, sentence_number: int=None, sentiment_polarity: str=None, sentiment_result_string: str=None, sentiment_value: float=None, text: str=None):
        """Sentence - a model defined in OpenAPI

        :param magnitude: The magnitude of this Sentence.
        :param sentence_number: The sentence_number of this Sentence.
        :param sentiment_polarity: The sentiment_polarity of this Sentence.
        :param sentiment_result_string: The sentiment_result_string of this Sentence.
        :param sentiment_value: The sentiment_value of this Sentence.
        :param text: The text of this Sentence.
        """
        self.openapi_types = {
            'magnitude': float,
            'sentence_number': int,
            'sentiment_polarity': str,
            'sentiment_result_string': str,
            'sentiment_value': float,
            'text': str
        }

        self.attribute_map = {
            'magnitude': 'Magnitude',
            'sentence_number': 'SentenceNumber',
            'sentiment_polarity': 'SentimentPolarity',
            'sentiment_result_string': 'SentimentResultString',
            'sentiment_value': 'SentimentValue',
            'text': 'Text'
        }

        self._magnitude = magnitude
        self._sentence_number = sentence_number
        self._sentiment_polarity = sentiment_polarity
        self._sentiment_result_string = sentiment_result_string
        self._sentiment_value = sentiment_value
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sentence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sentence of this Sentence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def magnitude(self):
        """Gets the magnitude of this Sentence.


        :return: The magnitude of this Sentence.
        :rtype: float
        """
        return self._magnitude

    @magnitude.setter
    def magnitude(self, magnitude):
        """Sets the magnitude of this Sentence.


        :param magnitude: The magnitude of this Sentence.
        :type magnitude: float
        """

        self._magnitude = magnitude

    @property
    def sentence_number(self):
        """Gets the sentence_number of this Sentence.


        :return: The sentence_number of this Sentence.
        :rtype: int
        """
        return self._sentence_number

    @sentence_number.setter
    def sentence_number(self, sentence_number):
        """Sets the sentence_number of this Sentence.


        :param sentence_number: The sentence_number of this Sentence.
        :type sentence_number: int
        """

        self._sentence_number = sentence_number

    @property
    def sentiment_polarity(self):
        """Gets the sentiment_polarity of this Sentence.


        :return: The sentiment_polarity of this Sentence.
        :rtype: str
        """
        return self._sentiment_polarity

    @sentiment_polarity.setter
    def sentiment_polarity(self, sentiment_polarity):
        """Sets the sentiment_polarity of this Sentence.


        :param sentiment_polarity: The sentiment_polarity of this Sentence.
        :type sentiment_polarity: str
        """

        self._sentiment_polarity = sentiment_polarity

    @property
    def sentiment_result_string(self):
        """Gets the sentiment_result_string of this Sentence.


        :return: The sentiment_result_string of this Sentence.
        :rtype: str
        """
        return self._sentiment_result_string

    @sentiment_result_string.setter
    def sentiment_result_string(self, sentiment_result_string):
        """Sets the sentiment_result_string of this Sentence.


        :param sentiment_result_string: The sentiment_result_string of this Sentence.
        :type sentiment_result_string: str
        """

        self._sentiment_result_string = sentiment_result_string

    @property
    def sentiment_value(self):
        """Gets the sentiment_value of this Sentence.


        :return: The sentiment_value of this Sentence.
        :rtype: float
        """
        return self._sentiment_value

    @sentiment_value.setter
    def sentiment_value(self, sentiment_value):
        """Sets the sentiment_value of this Sentence.


        :param sentiment_value: The sentiment_value of this Sentence.
        :type sentiment_value: float
        """

        self._sentiment_value = sentiment_value

    @property
    def text(self):
        """Gets the text of this Sentence.


        :return: The text of this Sentence.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Sentence.


        :param text: The text of this Sentence.
        :type text: str
        """

        self._text = text
