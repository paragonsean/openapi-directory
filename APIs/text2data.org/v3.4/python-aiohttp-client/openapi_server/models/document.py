# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_language: str=None, document_text: str=None, is_twitter_content: bool=None, private_key: str=None, request_identifier: str=None, secret: str=None, serialize_format: int=None, user_category_model_name: str=None):
        """Document - a model defined in OpenAPI

        :param document_language: The document_language of this Document.
        :param document_text: The document_text of this Document.
        :param is_twitter_content: The is_twitter_content of this Document.
        :param private_key: The private_key of this Document.
        :param request_identifier: The request_identifier of this Document.
        :param secret: The secret of this Document.
        :param serialize_format: The serialize_format of this Document.
        :param user_category_model_name: The user_category_model_name of this Document.
        """
        self.openapi_types = {
            'document_language': str,
            'document_text': str,
            'is_twitter_content': bool,
            'private_key': str,
            'request_identifier': str,
            'secret': str,
            'serialize_format': int,
            'user_category_model_name': str
        }

        self.attribute_map = {
            'document_language': 'DocumentLanguage',
            'document_text': 'DocumentText',
            'is_twitter_content': 'IsTwitterContent',
            'private_key': 'PrivateKey',
            'request_identifier': 'RequestIdentifier',
            'secret': 'Secret',
            'serialize_format': 'SerializeFormat',
            'user_category_model_name': 'UserCategoryModelName'
        }

        self._document_language = document_language
        self._document_text = document_text
        self._is_twitter_content = is_twitter_content
        self._private_key = private_key
        self._request_identifier = request_identifier
        self._secret = secret
        self._serialize_format = serialize_format
        self._user_category_model_name = user_category_model_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_language(self):
        """Gets the document_language of this Document.


        :return: The document_language of this Document.
        :rtype: str
        """
        return self._document_language

    @document_language.setter
    def document_language(self, document_language):
        """Sets the document_language of this Document.


        :param document_language: The document_language of this Document.
        :type document_language: str
        """

        self._document_language = document_language

    @property
    def document_text(self):
        """Gets the document_text of this Document.


        :return: The document_text of this Document.
        :rtype: str
        """
        return self._document_text

    @document_text.setter
    def document_text(self, document_text):
        """Sets the document_text of this Document.


        :param document_text: The document_text of this Document.
        :type document_text: str
        """
        if document_text is None:
            raise ValueError("Invalid value for `document_text`, must not be `None`")

        self._document_text = document_text

    @property
    def is_twitter_content(self):
        """Gets the is_twitter_content of this Document.


        :return: The is_twitter_content of this Document.
        :rtype: bool
        """
        return self._is_twitter_content

    @is_twitter_content.setter
    def is_twitter_content(self, is_twitter_content):
        """Sets the is_twitter_content of this Document.


        :param is_twitter_content: The is_twitter_content of this Document.
        :type is_twitter_content: bool
        """

        self._is_twitter_content = is_twitter_content

    @property
    def private_key(self):
        """Gets the private_key of this Document.


        :return: The private_key of this Document.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this Document.


        :param private_key: The private_key of this Document.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")

        self._private_key = private_key

    @property
    def request_identifier(self):
        """Gets the request_identifier of this Document.


        :return: The request_identifier of this Document.
        :rtype: str
        """
        return self._request_identifier

    @request_identifier.setter
    def request_identifier(self, request_identifier):
        """Sets the request_identifier of this Document.


        :param request_identifier: The request_identifier of this Document.
        :type request_identifier: str
        """

        self._request_identifier = request_identifier

    @property
    def secret(self):
        """Gets the secret of this Document.


        :return: The secret of this Document.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Document.


        :param secret: The secret of this Document.
        :type secret: str
        """

        self._secret = secret

    @property
    def serialize_format(self):
        """Gets the serialize_format of this Document.


        :return: The serialize_format of this Document.
        :rtype: int
        """
        return self._serialize_format

    @serialize_format.setter
    def serialize_format(self, serialize_format):
        """Sets the serialize_format of this Document.


        :param serialize_format: The serialize_format of this Document.
        :type serialize_format: int
        """

        self._serialize_format = serialize_format

    @property
    def user_category_model_name(self):
        """Gets the user_category_model_name of this Document.


        :return: The user_category_model_name of this Document.
        :rtype: str
        """
        return self._user_category_model_name

    @user_category_model_name.setter
    def user_category_model_name(self, user_category_model_name):
        """Sets the user_category_model_name of this Document.


        :param user_category_model_name: The user_category_model_name of this Document.
        :type user_category_model_name: str
        """

        self._user_category_model_name = user_category_model_name
