# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category import Category
from openapi_server.models.part_of_speech import PartOfSpeech
from openapi_server.models.sentence import Sentence
from openapi_server.models.sentence_part import SentencePart
from openapi_server.models.slang_word import SlangWord
from openapi_server.models.storage_info import StorageInfo
from openapi_server import util


class DocumentResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_categories: List[Category]=None, citations: List[SentencePart]=None, cloud_tag_html: str=None, core_sentences: List[Sentence]=None, detected_language: str=None, doc_sentiment_polarity: str=None, doc_sentiment_result_string: str=None, doc_sentiment_value: float=None, entities: List[SentencePart]=None, error_message: str=None, keywords: List[SentencePart]=None, magnitude: float=None, parts_of_speech: List[PartOfSpeech]=None, result_text_html: str=None, slang_words: List[SlangWord]=None, status: int=None, storage_info: StorageInfo=None, subjectivity: str=None, swear_words: List[SlangWord]=None, themes: List[SentencePart]=None, timestamp: int=None, transaction_current_day: int=None, transaction_daily_limit: int=None, transaction_total_credits_left: int=None, transaction_use_by_date: datetime=None, user_categories: List[Category]=None):
        """DocumentResult - a model defined in OpenAPI

        :param auto_categories: The auto_categories of this DocumentResult.
        :param citations: The citations of this DocumentResult.
        :param cloud_tag_html: The cloud_tag_html of this DocumentResult.
        :param core_sentences: The core_sentences of this DocumentResult.
        :param detected_language: The detected_language of this DocumentResult.
        :param doc_sentiment_polarity: The doc_sentiment_polarity of this DocumentResult.
        :param doc_sentiment_result_string: The doc_sentiment_result_string of this DocumentResult.
        :param doc_sentiment_value: The doc_sentiment_value of this DocumentResult.
        :param entities: The entities of this DocumentResult.
        :param error_message: The error_message of this DocumentResult.
        :param keywords: The keywords of this DocumentResult.
        :param magnitude: The magnitude of this DocumentResult.
        :param parts_of_speech: The parts_of_speech of this DocumentResult.
        :param result_text_html: The result_text_html of this DocumentResult.
        :param slang_words: The slang_words of this DocumentResult.
        :param status: The status of this DocumentResult.
        :param storage_info: The storage_info of this DocumentResult.
        :param subjectivity: The subjectivity of this DocumentResult.
        :param swear_words: The swear_words of this DocumentResult.
        :param themes: The themes of this DocumentResult.
        :param timestamp: The timestamp of this DocumentResult.
        :param transaction_current_day: The transaction_current_day of this DocumentResult.
        :param transaction_daily_limit: The transaction_daily_limit of this DocumentResult.
        :param transaction_total_credits_left: The transaction_total_credits_left of this DocumentResult.
        :param transaction_use_by_date: The transaction_use_by_date of this DocumentResult.
        :param user_categories: The user_categories of this DocumentResult.
        """
        self.openapi_types = {
            'auto_categories': List[Category],
            'citations': List[SentencePart],
            'cloud_tag_html': str,
            'core_sentences': List[Sentence],
            'detected_language': str,
            'doc_sentiment_polarity': str,
            'doc_sentiment_result_string': str,
            'doc_sentiment_value': float,
            'entities': List[SentencePart],
            'error_message': str,
            'keywords': List[SentencePart],
            'magnitude': float,
            'parts_of_speech': List[PartOfSpeech],
            'result_text_html': str,
            'slang_words': List[SlangWord],
            'status': int,
            'storage_info': StorageInfo,
            'subjectivity': str,
            'swear_words': List[SlangWord],
            'themes': List[SentencePart],
            'timestamp': int,
            'transaction_current_day': int,
            'transaction_daily_limit': int,
            'transaction_total_credits_left': int,
            'transaction_use_by_date': datetime,
            'user_categories': List[Category]
        }

        self.attribute_map = {
            'auto_categories': 'AutoCategories',
            'citations': 'Citations',
            'cloud_tag_html': 'CloudTagHTML',
            'core_sentences': 'CoreSentences',
            'detected_language': 'DetectedLanguage',
            'doc_sentiment_polarity': 'DocSentimentPolarity',
            'doc_sentiment_result_string': 'DocSentimentResultString',
            'doc_sentiment_value': 'DocSentimentValue',
            'entities': 'Entities',
            'error_message': 'ErrorMessage',
            'keywords': 'Keywords',
            'magnitude': 'Magnitude',
            'parts_of_speech': 'PartsOfSpeech',
            'result_text_html': 'ResultTextHtml',
            'slang_words': 'SlangWords',
            'status': 'Status',
            'storage_info': 'StorageInfo',
            'subjectivity': 'Subjectivity',
            'swear_words': 'SwearWords',
            'themes': 'Themes',
            'timestamp': 'Timestamp',
            'transaction_current_day': 'TransactionCurrentDay',
            'transaction_daily_limit': 'TransactionDailyLimit',
            'transaction_total_credits_left': 'TransactionTotalCreditsLeft',
            'transaction_use_by_date': 'TransactionUseByDate',
            'user_categories': 'UserCategories'
        }

        self._auto_categories = auto_categories
        self._citations = citations
        self._cloud_tag_html = cloud_tag_html
        self._core_sentences = core_sentences
        self._detected_language = detected_language
        self._doc_sentiment_polarity = doc_sentiment_polarity
        self._doc_sentiment_result_string = doc_sentiment_result_string
        self._doc_sentiment_value = doc_sentiment_value
        self._entities = entities
        self._error_message = error_message
        self._keywords = keywords
        self._magnitude = magnitude
        self._parts_of_speech = parts_of_speech
        self._result_text_html = result_text_html
        self._slang_words = slang_words
        self._status = status
        self._storage_info = storage_info
        self._subjectivity = subjectivity
        self._swear_words = swear_words
        self._themes = themes
        self._timestamp = timestamp
        self._transaction_current_day = transaction_current_day
        self._transaction_daily_limit = transaction_daily_limit
        self._transaction_total_credits_left = transaction_total_credits_left
        self._transaction_use_by_date = transaction_use_by_date
        self._user_categories = user_categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentResult of this DocumentResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_categories(self):
        """Gets the auto_categories of this DocumentResult.


        :return: The auto_categories of this DocumentResult.
        :rtype: List[Category]
        """
        return self._auto_categories

    @auto_categories.setter
    def auto_categories(self, auto_categories):
        """Sets the auto_categories of this DocumentResult.


        :param auto_categories: The auto_categories of this DocumentResult.
        :type auto_categories: List[Category]
        """

        self._auto_categories = auto_categories

    @property
    def citations(self):
        """Gets the citations of this DocumentResult.


        :return: The citations of this DocumentResult.
        :rtype: List[SentencePart]
        """
        return self._citations

    @citations.setter
    def citations(self, citations):
        """Sets the citations of this DocumentResult.


        :param citations: The citations of this DocumentResult.
        :type citations: List[SentencePart]
        """

        self._citations = citations

    @property
    def cloud_tag_html(self):
        """Gets the cloud_tag_html of this DocumentResult.


        :return: The cloud_tag_html of this DocumentResult.
        :rtype: str
        """
        return self._cloud_tag_html

    @cloud_tag_html.setter
    def cloud_tag_html(self, cloud_tag_html):
        """Sets the cloud_tag_html of this DocumentResult.


        :param cloud_tag_html: The cloud_tag_html of this DocumentResult.
        :type cloud_tag_html: str
        """

        self._cloud_tag_html = cloud_tag_html

    @property
    def core_sentences(self):
        """Gets the core_sentences of this DocumentResult.


        :return: The core_sentences of this DocumentResult.
        :rtype: List[Sentence]
        """
        return self._core_sentences

    @core_sentences.setter
    def core_sentences(self, core_sentences):
        """Sets the core_sentences of this DocumentResult.


        :param core_sentences: The core_sentences of this DocumentResult.
        :type core_sentences: List[Sentence]
        """

        self._core_sentences = core_sentences

    @property
    def detected_language(self):
        """Gets the detected_language of this DocumentResult.


        :return: The detected_language of this DocumentResult.
        :rtype: str
        """
        return self._detected_language

    @detected_language.setter
    def detected_language(self, detected_language):
        """Sets the detected_language of this DocumentResult.


        :param detected_language: The detected_language of this DocumentResult.
        :type detected_language: str
        """

        self._detected_language = detected_language

    @property
    def doc_sentiment_polarity(self):
        """Gets the doc_sentiment_polarity of this DocumentResult.


        :return: The doc_sentiment_polarity of this DocumentResult.
        :rtype: str
        """
        return self._doc_sentiment_polarity

    @doc_sentiment_polarity.setter
    def doc_sentiment_polarity(self, doc_sentiment_polarity):
        """Sets the doc_sentiment_polarity of this DocumentResult.


        :param doc_sentiment_polarity: The doc_sentiment_polarity of this DocumentResult.
        :type doc_sentiment_polarity: str
        """

        self._doc_sentiment_polarity = doc_sentiment_polarity

    @property
    def doc_sentiment_result_string(self):
        """Gets the doc_sentiment_result_string of this DocumentResult.


        :return: The doc_sentiment_result_string of this DocumentResult.
        :rtype: str
        """
        return self._doc_sentiment_result_string

    @doc_sentiment_result_string.setter
    def doc_sentiment_result_string(self, doc_sentiment_result_string):
        """Sets the doc_sentiment_result_string of this DocumentResult.


        :param doc_sentiment_result_string: The doc_sentiment_result_string of this DocumentResult.
        :type doc_sentiment_result_string: str
        """

        self._doc_sentiment_result_string = doc_sentiment_result_string

    @property
    def doc_sentiment_value(self):
        """Gets the doc_sentiment_value of this DocumentResult.


        :return: The doc_sentiment_value of this DocumentResult.
        :rtype: float
        """
        return self._doc_sentiment_value

    @doc_sentiment_value.setter
    def doc_sentiment_value(self, doc_sentiment_value):
        """Sets the doc_sentiment_value of this DocumentResult.


        :param doc_sentiment_value: The doc_sentiment_value of this DocumentResult.
        :type doc_sentiment_value: float
        """

        self._doc_sentiment_value = doc_sentiment_value

    @property
    def entities(self):
        """Gets the entities of this DocumentResult.


        :return: The entities of this DocumentResult.
        :rtype: List[SentencePart]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this DocumentResult.


        :param entities: The entities of this DocumentResult.
        :type entities: List[SentencePart]
        """

        self._entities = entities

    @property
    def error_message(self):
        """Gets the error_message of this DocumentResult.


        :return: The error_message of this DocumentResult.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DocumentResult.


        :param error_message: The error_message of this DocumentResult.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def keywords(self):
        """Gets the keywords of this DocumentResult.


        :return: The keywords of this DocumentResult.
        :rtype: List[SentencePart]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this DocumentResult.


        :param keywords: The keywords of this DocumentResult.
        :type keywords: List[SentencePart]
        """

        self._keywords = keywords

    @property
    def magnitude(self):
        """Gets the magnitude of this DocumentResult.


        :return: The magnitude of this DocumentResult.
        :rtype: float
        """
        return self._magnitude

    @magnitude.setter
    def magnitude(self, magnitude):
        """Sets the magnitude of this DocumentResult.


        :param magnitude: The magnitude of this DocumentResult.
        :type magnitude: float
        """

        self._magnitude = magnitude

    @property
    def parts_of_speech(self):
        """Gets the parts_of_speech of this DocumentResult.


        :return: The parts_of_speech of this DocumentResult.
        :rtype: List[PartOfSpeech]
        """
        return self._parts_of_speech

    @parts_of_speech.setter
    def parts_of_speech(self, parts_of_speech):
        """Sets the parts_of_speech of this DocumentResult.


        :param parts_of_speech: The parts_of_speech of this DocumentResult.
        :type parts_of_speech: List[PartOfSpeech]
        """

        self._parts_of_speech = parts_of_speech

    @property
    def result_text_html(self):
        """Gets the result_text_html of this DocumentResult.


        :return: The result_text_html of this DocumentResult.
        :rtype: str
        """
        return self._result_text_html

    @result_text_html.setter
    def result_text_html(self, result_text_html):
        """Sets the result_text_html of this DocumentResult.


        :param result_text_html: The result_text_html of this DocumentResult.
        :type result_text_html: str
        """

        self._result_text_html = result_text_html

    @property
    def slang_words(self):
        """Gets the slang_words of this DocumentResult.


        :return: The slang_words of this DocumentResult.
        :rtype: List[SlangWord]
        """
        return self._slang_words

    @slang_words.setter
    def slang_words(self, slang_words):
        """Sets the slang_words of this DocumentResult.


        :param slang_words: The slang_words of this DocumentResult.
        :type slang_words: List[SlangWord]
        """

        self._slang_words = slang_words

    @property
    def status(self):
        """Gets the status of this DocumentResult.


        :return: The status of this DocumentResult.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DocumentResult.


        :param status: The status of this DocumentResult.
        :type status: int
        """

        self._status = status

    @property
    def storage_info(self):
        """Gets the storage_info of this DocumentResult.


        :return: The storage_info of this DocumentResult.
        :rtype: StorageInfo
        """
        return self._storage_info

    @storage_info.setter
    def storage_info(self, storage_info):
        """Sets the storage_info of this DocumentResult.


        :param storage_info: The storage_info of this DocumentResult.
        :type storage_info: StorageInfo
        """

        self._storage_info = storage_info

    @property
    def subjectivity(self):
        """Gets the subjectivity of this DocumentResult.


        :return: The subjectivity of this DocumentResult.
        :rtype: str
        """
        return self._subjectivity

    @subjectivity.setter
    def subjectivity(self, subjectivity):
        """Sets the subjectivity of this DocumentResult.


        :param subjectivity: The subjectivity of this DocumentResult.
        :type subjectivity: str
        """

        self._subjectivity = subjectivity

    @property
    def swear_words(self):
        """Gets the swear_words of this DocumentResult.


        :return: The swear_words of this DocumentResult.
        :rtype: List[SlangWord]
        """
        return self._swear_words

    @swear_words.setter
    def swear_words(self, swear_words):
        """Sets the swear_words of this DocumentResult.


        :param swear_words: The swear_words of this DocumentResult.
        :type swear_words: List[SlangWord]
        """

        self._swear_words = swear_words

    @property
    def themes(self):
        """Gets the themes of this DocumentResult.


        :return: The themes of this DocumentResult.
        :rtype: List[SentencePart]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this DocumentResult.


        :param themes: The themes of this DocumentResult.
        :type themes: List[SentencePart]
        """

        self._themes = themes

    @property
    def timestamp(self):
        """Gets the timestamp of this DocumentResult.


        :return: The timestamp of this DocumentResult.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DocumentResult.


        :param timestamp: The timestamp of this DocumentResult.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def transaction_current_day(self):
        """Gets the transaction_current_day of this DocumentResult.


        :return: The transaction_current_day of this DocumentResult.
        :rtype: int
        """
        return self._transaction_current_day

    @transaction_current_day.setter
    def transaction_current_day(self, transaction_current_day):
        """Sets the transaction_current_day of this DocumentResult.


        :param transaction_current_day: The transaction_current_day of this DocumentResult.
        :type transaction_current_day: int
        """

        self._transaction_current_day = transaction_current_day

    @property
    def transaction_daily_limit(self):
        """Gets the transaction_daily_limit of this DocumentResult.


        :return: The transaction_daily_limit of this DocumentResult.
        :rtype: int
        """
        return self._transaction_daily_limit

    @transaction_daily_limit.setter
    def transaction_daily_limit(self, transaction_daily_limit):
        """Sets the transaction_daily_limit of this DocumentResult.


        :param transaction_daily_limit: The transaction_daily_limit of this DocumentResult.
        :type transaction_daily_limit: int
        """

        self._transaction_daily_limit = transaction_daily_limit

    @property
    def transaction_total_credits_left(self):
        """Gets the transaction_total_credits_left of this DocumentResult.


        :return: The transaction_total_credits_left of this DocumentResult.
        :rtype: int
        """
        return self._transaction_total_credits_left

    @transaction_total_credits_left.setter
    def transaction_total_credits_left(self, transaction_total_credits_left):
        """Sets the transaction_total_credits_left of this DocumentResult.


        :param transaction_total_credits_left: The transaction_total_credits_left of this DocumentResult.
        :type transaction_total_credits_left: int
        """

        self._transaction_total_credits_left = transaction_total_credits_left

    @property
    def transaction_use_by_date(self):
        """Gets the transaction_use_by_date of this DocumentResult.


        :return: The transaction_use_by_date of this DocumentResult.
        :rtype: datetime
        """
        return self._transaction_use_by_date

    @transaction_use_by_date.setter
    def transaction_use_by_date(self, transaction_use_by_date):
        """Sets the transaction_use_by_date of this DocumentResult.


        :param transaction_use_by_date: The transaction_use_by_date of this DocumentResult.
        :type transaction_use_by_date: datetime
        """

        self._transaction_use_by_date = transaction_use_by_date

    @property
    def user_categories(self):
        """Gets the user_categories of this DocumentResult.


        :return: The user_categories of this DocumentResult.
        :rtype: List[Category]
        """
        return self._user_categories

    @user_categories.setter
    def user_categories(self, user_categories):
        """Sets the user_categories of this DocumentResult.


        :param user_categories: The user_categories of this DocumentResult.
        :type user_categories: List[Category]
        """

        self._user_categories = user_categories
