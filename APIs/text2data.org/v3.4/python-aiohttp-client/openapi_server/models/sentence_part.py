# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SentencePart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keyword_type: str=None, magnitude: float=None, mentions: int=None, sentence_part_type: str=None, sentence_text: str=None, sentiment_polarity: str=None, sentiment_result: str=None, sentiment_value: float=None, text: str=None):
        """SentencePart - a model defined in OpenAPI

        :param keyword_type: The keyword_type of this SentencePart.
        :param magnitude: The magnitude of this SentencePart.
        :param mentions: The mentions of this SentencePart.
        :param sentence_part_type: The sentence_part_type of this SentencePart.
        :param sentence_text: The sentence_text of this SentencePart.
        :param sentiment_polarity: The sentiment_polarity of this SentencePart.
        :param sentiment_result: The sentiment_result of this SentencePart.
        :param sentiment_value: The sentiment_value of this SentencePart.
        :param text: The text of this SentencePart.
        """
        self.openapi_types = {
            'keyword_type': str,
            'magnitude': float,
            'mentions': int,
            'sentence_part_type': str,
            'sentence_text': str,
            'sentiment_polarity': str,
            'sentiment_result': str,
            'sentiment_value': float,
            'text': str
        }

        self.attribute_map = {
            'keyword_type': 'KeywordType',
            'magnitude': 'Magnitude',
            'mentions': 'Mentions',
            'sentence_part_type': 'SentencePartType',
            'sentence_text': 'SentenceText',
            'sentiment_polarity': 'SentimentPolarity',
            'sentiment_result': 'SentimentResult',
            'sentiment_value': 'SentimentValue',
            'text': 'Text'
        }

        self._keyword_type = keyword_type
        self._magnitude = magnitude
        self._mentions = mentions
        self._sentence_part_type = sentence_part_type
        self._sentence_text = sentence_text
        self._sentiment_polarity = sentiment_polarity
        self._sentiment_result = sentiment_result
        self._sentiment_value = sentiment_value
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SentencePart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SentencePart of this SentencePart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keyword_type(self):
        """Gets the keyword_type of this SentencePart.


        :return: The keyword_type of this SentencePart.
        :rtype: str
        """
        return self._keyword_type

    @keyword_type.setter
    def keyword_type(self, keyword_type):
        """Sets the keyword_type of this SentencePart.


        :param keyword_type: The keyword_type of this SentencePart.
        :type keyword_type: str
        """

        self._keyword_type = keyword_type

    @property
    def magnitude(self):
        """Gets the magnitude of this SentencePart.


        :return: The magnitude of this SentencePart.
        :rtype: float
        """
        return self._magnitude

    @magnitude.setter
    def magnitude(self, magnitude):
        """Sets the magnitude of this SentencePart.


        :param magnitude: The magnitude of this SentencePart.
        :type magnitude: float
        """

        self._magnitude = magnitude

    @property
    def mentions(self):
        """Gets the mentions of this SentencePart.


        :return: The mentions of this SentencePart.
        :rtype: int
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this SentencePart.


        :param mentions: The mentions of this SentencePart.
        :type mentions: int
        """

        self._mentions = mentions

    @property
    def sentence_part_type(self):
        """Gets the sentence_part_type of this SentencePart.


        :return: The sentence_part_type of this SentencePart.
        :rtype: str
        """
        return self._sentence_part_type

    @sentence_part_type.setter
    def sentence_part_type(self, sentence_part_type):
        """Sets the sentence_part_type of this SentencePart.


        :param sentence_part_type: The sentence_part_type of this SentencePart.
        :type sentence_part_type: str
        """

        self._sentence_part_type = sentence_part_type

    @property
    def sentence_text(self):
        """Gets the sentence_text of this SentencePart.


        :return: The sentence_text of this SentencePart.
        :rtype: str
        """
        return self._sentence_text

    @sentence_text.setter
    def sentence_text(self, sentence_text):
        """Sets the sentence_text of this SentencePart.


        :param sentence_text: The sentence_text of this SentencePart.
        :type sentence_text: str
        """

        self._sentence_text = sentence_text

    @property
    def sentiment_polarity(self):
        """Gets the sentiment_polarity of this SentencePart.


        :return: The sentiment_polarity of this SentencePart.
        :rtype: str
        """
        return self._sentiment_polarity

    @sentiment_polarity.setter
    def sentiment_polarity(self, sentiment_polarity):
        """Sets the sentiment_polarity of this SentencePart.


        :param sentiment_polarity: The sentiment_polarity of this SentencePart.
        :type sentiment_polarity: str
        """

        self._sentiment_polarity = sentiment_polarity

    @property
    def sentiment_result(self):
        """Gets the sentiment_result of this SentencePart.


        :return: The sentiment_result of this SentencePart.
        :rtype: str
        """
        return self._sentiment_result

    @sentiment_result.setter
    def sentiment_result(self, sentiment_result):
        """Sets the sentiment_result of this SentencePart.


        :param sentiment_result: The sentiment_result of this SentencePart.
        :type sentiment_result: str
        """

        self._sentiment_result = sentiment_result

    @property
    def sentiment_value(self):
        """Gets the sentiment_value of this SentencePart.


        :return: The sentiment_value of this SentencePart.
        :rtype: float
        """
        return self._sentiment_value

    @sentiment_value.setter
    def sentiment_value(self, sentiment_value):
        """Sets the sentiment_value of this SentencePart.


        :param sentiment_value: The sentiment_value of this SentencePart.
        :type sentiment_value: float
        """

        self._sentiment_value = sentiment_value

    @property
    def text(self):
        """Gets the text of this SentencePart.


        :return: The text of this SentencePart.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SentencePart.


        :param text: The text of this SentencePart.
        :type text: str
        """

        self._text = text
