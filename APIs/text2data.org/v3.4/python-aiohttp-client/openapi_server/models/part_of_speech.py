# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartOfSpeech(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, object: str=None, object_sentiment_polarity: str=None, object_sentiment_result_string: str=None, object_sentiment_value: float=None, subject: str=None, text: str=None):
        """PartOfSpeech - a model defined in OpenAPI

        :param action: The action of this PartOfSpeech.
        :param object: The object of this PartOfSpeech.
        :param object_sentiment_polarity: The object_sentiment_polarity of this PartOfSpeech.
        :param object_sentiment_result_string: The object_sentiment_result_string of this PartOfSpeech.
        :param object_sentiment_value: The object_sentiment_value of this PartOfSpeech.
        :param subject: The subject of this PartOfSpeech.
        :param text: The text of this PartOfSpeech.
        """
        self.openapi_types = {
            'action': str,
            'object': str,
            'object_sentiment_polarity': str,
            'object_sentiment_result_string': str,
            'object_sentiment_value': float,
            'subject': str,
            'text': str
        }

        self.attribute_map = {
            'action': 'Action',
            'object': 'Object',
            'object_sentiment_polarity': 'ObjectSentimentPolarity',
            'object_sentiment_result_string': 'ObjectSentimentResultString',
            'object_sentiment_value': 'ObjectSentimentValue',
            'subject': 'Subject',
            'text': 'Text'
        }

        self._action = action
        self._object = object
        self._object_sentiment_polarity = object_sentiment_polarity
        self._object_sentiment_result_string = object_sentiment_result_string
        self._object_sentiment_value = object_sentiment_value
        self._subject = subject
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartOfSpeech':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartOfSpeech of this PartOfSpeech.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this PartOfSpeech.


        :return: The action of this PartOfSpeech.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PartOfSpeech.


        :param action: The action of this PartOfSpeech.
        :type action: str
        """

        self._action = action

    @property
    def object(self):
        """Gets the object of this PartOfSpeech.


        :return: The object of this PartOfSpeech.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this PartOfSpeech.


        :param object: The object of this PartOfSpeech.
        :type object: str
        """

        self._object = object

    @property
    def object_sentiment_polarity(self):
        """Gets the object_sentiment_polarity of this PartOfSpeech.


        :return: The object_sentiment_polarity of this PartOfSpeech.
        :rtype: str
        """
        return self._object_sentiment_polarity

    @object_sentiment_polarity.setter
    def object_sentiment_polarity(self, object_sentiment_polarity):
        """Sets the object_sentiment_polarity of this PartOfSpeech.


        :param object_sentiment_polarity: The object_sentiment_polarity of this PartOfSpeech.
        :type object_sentiment_polarity: str
        """

        self._object_sentiment_polarity = object_sentiment_polarity

    @property
    def object_sentiment_result_string(self):
        """Gets the object_sentiment_result_string of this PartOfSpeech.


        :return: The object_sentiment_result_string of this PartOfSpeech.
        :rtype: str
        """
        return self._object_sentiment_result_string

    @object_sentiment_result_string.setter
    def object_sentiment_result_string(self, object_sentiment_result_string):
        """Sets the object_sentiment_result_string of this PartOfSpeech.


        :param object_sentiment_result_string: The object_sentiment_result_string of this PartOfSpeech.
        :type object_sentiment_result_string: str
        """

        self._object_sentiment_result_string = object_sentiment_result_string

    @property
    def object_sentiment_value(self):
        """Gets the object_sentiment_value of this PartOfSpeech.


        :return: The object_sentiment_value of this PartOfSpeech.
        :rtype: float
        """
        return self._object_sentiment_value

    @object_sentiment_value.setter
    def object_sentiment_value(self, object_sentiment_value):
        """Sets the object_sentiment_value of this PartOfSpeech.


        :param object_sentiment_value: The object_sentiment_value of this PartOfSpeech.
        :type object_sentiment_value: float
        """

        self._object_sentiment_value = object_sentiment_value

    @property
    def subject(self):
        """Gets the subject of this PartOfSpeech.


        :return: The subject of this PartOfSpeech.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PartOfSpeech.


        :param subject: The subject of this PartOfSpeech.
        :type subject: str
        """

        self._subject = subject

    @property
    def text(self):
        """Gets the text of this PartOfSpeech.


        :return: The text of this PartOfSpeech.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PartOfSpeech.


        :param text: The text of this PartOfSpeech.
        :type text: str
        """

        self._text = text
