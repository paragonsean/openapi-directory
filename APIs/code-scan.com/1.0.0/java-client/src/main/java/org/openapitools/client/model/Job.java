/*
 * CodeScan API
 * Manage your Hosted CodeScan Service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@villagechief.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:49.916219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Job {
  public static final String SERIALIZED_NAME_ALERT = "alert";
  @SerializedName(SERIALIZED_NAME_ALERT)
  private String alert;

  public static final String SERIALIZED_NAME_ALERT_DESCRIPTION = "alertDescription";
  @SerializedName(SERIALIZED_NAME_ALERT_DESCRIPTION)
  private String alertDescription;

  public static final String SERIALIZED_NAME_ANALYSIS_MODE = "analysisMode";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_MODE)
  private String analysisMode;

  public static final String SERIALIZED_NAME_COMMIT = "commit";
  @SerializedName(SERIALIZED_NAME_COMMIT)
  private String commit;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_EMAIL_REPORT_TO = "emailReportTo";
  @SerializedName(SERIALIZED_NAME_EMAIL_REPORT_TO)
  private String emailReportTo;

  public static final String SERIALIZED_NAME_FINISHED = "finished";
  @SerializedName(SERIALIZED_NAME_FINISHED)
  private String finished;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_PROJECT_BRANCH = "projectBranch";
  @SerializedName(SERIALIZED_NAME_PROJECT_BRANCH)
  private String projectBranch;

  public static final String SERIALIZED_NAME_PROJECT_KEY = "projectKey";
  @SerializedName(SERIALIZED_NAME_PROJECT_KEY)
  private String projectKey;

  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private String started;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private String warnings;

  public Job() {
  }

  public Job alert(String alert) {
    this.alert = alert;
    return this;
  }

  /**
   * Quality Gate status of a completed job
   * @return alert
   */
  @javax.annotation.Nullable
  public String getAlert() {
    return alert;
  }

  public void setAlert(String alert) {
    this.alert = alert;
  }


  public Job alertDescription(String alertDescription) {
    this.alertDescription = alertDescription;
    return this;
  }

  /**
   * Quality Gate errors of a completed job
   * @return alertDescription
   */
  @javax.annotation.Nullable
  public String getAlertDescription() {
    return alertDescription;
  }

  public void setAlertDescription(String alertDescription) {
    this.alertDescription = alertDescription;
  }


  public Job analysisMode(String analysisMode) {
    this.analysisMode = analysisMode;
    return this;
  }

  /**
   * When set to preview, analysis is not added to the database
   * @return analysisMode
   */
  @javax.annotation.Nullable
  public String getAnalysisMode() {
    return analysisMode;
  }

  public void setAnalysisMode(String analysisMode) {
    this.analysisMode = analysisMode;
  }


  public Job commit(String commit) {
    this.commit = commit;
    return this;
  }

  /**
   * The git commit that this job is evaluating
   * @return commit
   */
  @javax.annotation.Nullable
  public String getCommit() {
    return commit;
  }

  public void setCommit(String commit) {
    this.commit = commit;
  }


  public Job created(String created) {
    this.created = created;
    return this;
  }

  /**
   * DateTime that this job was queued
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Job emailReportTo(String emailReportTo) {
    this.emailReportTo = emailReportTo;
    return this;
  }

  /**
   * List of usernames to email the report to
   * @return emailReportTo
   */
  @javax.annotation.Nullable
  public String getEmailReportTo() {
    return emailReportTo;
  }

  public void setEmailReportTo(String emailReportTo) {
    this.emailReportTo = emailReportTo;
  }


  public Job finished(String finished) {
    this.finished = finished;
    return this;
  }

  /**
   * If the job has finished, then the datetime that the job finished processing
   * @return finished
   */
  @javax.annotation.Nullable
  public String getFinished() {
    return finished;
  }

  public void setFinished(String finished) {
    this.finished = finished;
  }


  public Job jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * The jobId of this job
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public Job projectBranch(String projectBranch) {
    this.projectBranch = projectBranch;
    return this;
  }

  /**
   * The project branch that this job is evaluating
   * @return projectBranch
   */
  @javax.annotation.Nullable
  public String getProjectBranch() {
    return projectBranch;
  }

  public void setProjectBranch(String projectBranch) {
    this.projectBranch = projectBranch;
  }


  public Job projectKey(String projectKey) {
    this.projectKey = projectKey;
    return this;
  }

  /**
   * The projectKey that this job is running
   * @return projectKey
   */
  @javax.annotation.Nullable
  public String getProjectKey() {
    return projectKey;
  }

  public void setProjectKey(String projectKey) {
    this.projectKey = projectKey;
  }


  public Job started(String started) {
    this.started = started;
    return this;
  }

  /**
   * If the job has started, then the datetime that the job started processing
   * @return started
   */
  @javax.annotation.Nullable
  public String getStarted() {
    return started;
  }

  public void setStarted(String started) {
    this.started = started;
  }


  public Job status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the job
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Job url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The url to view the output report
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Job version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The project version that this job is evaluating
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public Job warnings(String warnings) {
    this.warnings = warnings;
    return this;
  }

  /**
   * When creating a new job, any warnings will be listed here.
   * @return warnings
   */
  @javax.annotation.Nullable
  public String getWarnings() {
    return warnings;
  }

  public void setWarnings(String warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.alert, job.alert) &&
        Objects.equals(this.alertDescription, job.alertDescription) &&
        Objects.equals(this.analysisMode, job.analysisMode) &&
        Objects.equals(this.commit, job.commit) &&
        Objects.equals(this.created, job.created) &&
        Objects.equals(this.emailReportTo, job.emailReportTo) &&
        Objects.equals(this.finished, job.finished) &&
        Objects.equals(this.jobId, job.jobId) &&
        Objects.equals(this.projectBranch, job.projectBranch) &&
        Objects.equals(this.projectKey, job.projectKey) &&
        Objects.equals(this.started, job.started) &&
        Objects.equals(this.status, job.status) &&
        Objects.equals(this.url, job.url) &&
        Objects.equals(this.version, job.version) &&
        Objects.equals(this.warnings, job.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alert, alertDescription, analysisMode, commit, created, emailReportTo, finished, jobId, projectBranch, projectKey, started, status, url, version, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    alert: ").append(toIndentedString(alert)).append("\n");
    sb.append("    alertDescription: ").append(toIndentedString(alertDescription)).append("\n");
    sb.append("    analysisMode: ").append(toIndentedString(analysisMode)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    emailReportTo: ").append(toIndentedString(emailReportTo)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    projectBranch: ").append(toIndentedString(projectBranch)).append("\n");
    sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alert");
    openapiFields.add("alertDescription");
    openapiFields.add("analysisMode");
    openapiFields.add("commit");
    openapiFields.add("created");
    openapiFields.add("emailReportTo");
    openapiFields.add("finished");
    openapiFields.add("jobId");
    openapiFields.add("projectBranch");
    openapiFields.add("projectKey");
    openapiFields.add("started");
    openapiFields.add("status");
    openapiFields.add("url");
    openapiFields.add("version");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Job
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Job.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Job` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alert") != null && !jsonObj.get("alert").isJsonNull()) && !jsonObj.get("alert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alert").toString()));
      }
      if ((jsonObj.get("alertDescription") != null && !jsonObj.get("alertDescription").isJsonNull()) && !jsonObj.get("alertDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertDescription").toString()));
      }
      if ((jsonObj.get("analysisMode") != null && !jsonObj.get("analysisMode").isJsonNull()) && !jsonObj.get("analysisMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analysisMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analysisMode").toString()));
      }
      if ((jsonObj.get("commit") != null && !jsonObj.get("commit").isJsonNull()) && !jsonObj.get("commit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("emailReportTo") != null && !jsonObj.get("emailReportTo").isJsonNull()) && !jsonObj.get("emailReportTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailReportTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailReportTo").toString()));
      }
      if ((jsonObj.get("finished") != null && !jsonObj.get("finished").isJsonNull()) && !jsonObj.get("finished").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finished` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finished").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("projectBranch") != null && !jsonObj.get("projectBranch").isJsonNull()) && !jsonObj.get("projectBranch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectBranch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectBranch").toString()));
      }
      if ((jsonObj.get("projectKey") != null && !jsonObj.get("projectKey").isJsonNull()) && !jsonObj.get("projectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectKey").toString()));
      }
      if ((jsonObj.get("started") != null && !jsonObj.get("started").isJsonNull()) && !jsonObj.get("started").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `started` to be a primitive type in the JSON string but got `%s`", jsonObj.get("started").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) && !jsonObj.get("warnings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Job given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Job
   * @throws IOException if the JSON string is invalid with respect to Job
   */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

  /**
   * Convert an instance of Job to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

