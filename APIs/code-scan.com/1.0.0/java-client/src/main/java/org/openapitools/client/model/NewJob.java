/*
 * CodeScan API
 * Manage your Hosted CodeScan Service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@villagechief.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewJob
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:49.916219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewJob {
  public static final String SERIALIZED_NAME_ANALYSIS_MODE = "analysisMode";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_MODE)
  private String analysisMode;

  public static final String SERIALIZED_NAME_COMMIT_OVERRIDE = "commitOverride";
  @SerializedName(SERIALIZED_NAME_COMMIT_OVERRIDE)
  private String commitOverride;

  public static final String SERIALIZED_NAME_EMAIL_REPORT_TO = "emailReportTo";
  @SerializedName(SERIALIZED_NAME_EMAIL_REPORT_TO)
  private String emailReportTo;

  public static final String SERIALIZED_NAME_PROJECT_BRANCH = "projectBranch";
  @SerializedName(SERIALIZED_NAME_PROJECT_BRANCH)
  private String projectBranch;

  public static final String SERIALIZED_NAME_PROJECT_KEY = "projectKey";
  @SerializedName(SERIALIZED_NAME_PROJECT_KEY)
  private String projectKey;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public NewJob() {
  }

  public NewJob analysisMode(String analysisMode) {
    this.analysisMode = analysisMode;
    return this;
  }

  /**
   * When set to preview, analysis is not added to the database
   * @return analysisMode
   */
  @javax.annotation.Nullable
  public String getAnalysisMode() {
    return analysisMode;
  }

  public void setAnalysisMode(String analysisMode) {
    this.analysisMode = analysisMode;
  }


  public NewJob commitOverride(String commitOverride) {
    this.commitOverride = commitOverride;
    return this;
  }

  /**
   * When the project is based on git, the git commit that this job should run. Leave blank to use the project&#39;s default
   * @return commitOverride
   */
  @javax.annotation.Nullable
  public String getCommitOverride() {
    return commitOverride;
  }

  public void setCommitOverride(String commitOverride) {
    this.commitOverride = commitOverride;
  }


  public NewJob emailReportTo(String emailReportTo) {
    this.emailReportTo = emailReportTo;
    return this;
  }

  /**
   * List of usernames to email the report to
   * @return emailReportTo
   */
  @javax.annotation.Nullable
  public String getEmailReportTo() {
    return emailReportTo;
  }

  public void setEmailReportTo(String emailReportTo) {
    this.emailReportTo = emailReportTo;
  }


  public NewJob projectBranch(String projectBranch) {
    this.projectBranch = projectBranch;
    return this;
  }

  /**
   * he project branch that this job is evaluating
   * @return projectBranch
   */
  @javax.annotation.Nullable
  public String getProjectBranch() {
    return projectBranch;
  }

  public void setProjectBranch(String projectBranch) {
    this.projectBranch = projectBranch;
  }


  public NewJob projectKey(String projectKey) {
    this.projectKey = projectKey;
    return this;
  }

  /**
   * The key of the project to start
   * @return projectKey
   */
  @javax.annotation.Nonnull
  public String getProjectKey() {
    return projectKey;
  }

  public void setProjectKey(String projectKey) {
    this.projectKey = projectKey;
  }


  public NewJob version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Use this as the analysis&#39; version. On success the Project&#39;s default version will be set to this
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewJob newJob = (NewJob) o;
    return Objects.equals(this.analysisMode, newJob.analysisMode) &&
        Objects.equals(this.commitOverride, newJob.commitOverride) &&
        Objects.equals(this.emailReportTo, newJob.emailReportTo) &&
        Objects.equals(this.projectBranch, newJob.projectBranch) &&
        Objects.equals(this.projectKey, newJob.projectKey) &&
        Objects.equals(this.version, newJob.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisMode, commitOverride, emailReportTo, projectBranch, projectKey, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewJob {\n");
    sb.append("    analysisMode: ").append(toIndentedString(analysisMode)).append("\n");
    sb.append("    commitOverride: ").append(toIndentedString(commitOverride)).append("\n");
    sb.append("    emailReportTo: ").append(toIndentedString(emailReportTo)).append("\n");
    sb.append("    projectBranch: ").append(toIndentedString(projectBranch)).append("\n");
    sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysisMode");
    openapiFields.add("commitOverride");
    openapiFields.add("emailReportTo");
    openapiFields.add("projectBranch");
    openapiFields.add("projectKey");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("projectKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewJob is not found in the empty JSON string", NewJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewJob.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analysisMode") != null && !jsonObj.get("analysisMode").isJsonNull()) && !jsonObj.get("analysisMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analysisMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analysisMode").toString()));
      }
      if ((jsonObj.get("commitOverride") != null && !jsonObj.get("commitOverride").isJsonNull()) && !jsonObj.get("commitOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitOverride").toString()));
      }
      if ((jsonObj.get("emailReportTo") != null && !jsonObj.get("emailReportTo").isJsonNull()) && !jsonObj.get("emailReportTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailReportTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailReportTo").toString()));
      }
      if ((jsonObj.get("projectBranch") != null && !jsonObj.get("projectBranch").isJsonNull()) && !jsonObj.get("projectBranch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectBranch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectBranch").toString()));
      }
      if (!jsonObj.get("projectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectKey").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewJob.class));

       return (TypeAdapter<T>) new TypeAdapter<NewJob>() {
           @Override
           public void write(JsonWriter out, NewJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewJob
   * @throws IOException if the JSON string is invalid with respect to NewJob
   */
  public static NewJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewJob.class);
  }

  /**
   * Convert an instance of NewJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

