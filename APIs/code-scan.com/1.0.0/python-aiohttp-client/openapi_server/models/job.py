# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert: str=None, alert_description: str=None, analysis_mode: str=None, commit: str=None, created: str=None, email_report_to: str=None, finished: str=None, job_id: str=None, project_branch: str=None, project_key: str=None, started: str=None, status: str=None, url: str=None, version: str=None, warnings: str=None):
        """Job - a model defined in OpenAPI

        :param alert: The alert of this Job.
        :param alert_description: The alert_description of this Job.
        :param analysis_mode: The analysis_mode of this Job.
        :param commit: The commit of this Job.
        :param created: The created of this Job.
        :param email_report_to: The email_report_to of this Job.
        :param finished: The finished of this Job.
        :param job_id: The job_id of this Job.
        :param project_branch: The project_branch of this Job.
        :param project_key: The project_key of this Job.
        :param started: The started of this Job.
        :param status: The status of this Job.
        :param url: The url of this Job.
        :param version: The version of this Job.
        :param warnings: The warnings of this Job.
        """
        self.openapi_types = {
            'alert': str,
            'alert_description': str,
            'analysis_mode': str,
            'commit': str,
            'created': str,
            'email_report_to': str,
            'finished': str,
            'job_id': str,
            'project_branch': str,
            'project_key': str,
            'started': str,
            'status': str,
            'url': str,
            'version': str,
            'warnings': str
        }

        self.attribute_map = {
            'alert': 'alert',
            'alert_description': 'alertDescription',
            'analysis_mode': 'analysisMode',
            'commit': 'commit',
            'created': 'created',
            'email_report_to': 'emailReportTo',
            'finished': 'finished',
            'job_id': 'jobId',
            'project_branch': 'projectBranch',
            'project_key': 'projectKey',
            'started': 'started',
            'status': 'status',
            'url': 'url',
            'version': 'version',
            'warnings': 'warnings'
        }

        self._alert = alert
        self._alert_description = alert_description
        self._analysis_mode = analysis_mode
        self._commit = commit
        self._created = created
        self._email_report_to = email_report_to
        self._finished = finished
        self._job_id = job_id
        self._project_branch = project_branch
        self._project_key = project_key
        self._started = started
        self._status = status
        self._url = url
        self._version = version
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert(self):
        """Gets the alert of this Job.

        Quality Gate status of a completed job

        :return: The alert of this Job.
        :rtype: str
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """Sets the alert of this Job.

        Quality Gate status of a completed job

        :param alert: The alert of this Job.
        :type alert: str
        """

        self._alert = alert

    @property
    def alert_description(self):
        """Gets the alert_description of this Job.

        Quality Gate errors of a completed job

        :return: The alert_description of this Job.
        :rtype: str
        """
        return self._alert_description

    @alert_description.setter
    def alert_description(self, alert_description):
        """Sets the alert_description of this Job.

        Quality Gate errors of a completed job

        :param alert_description: The alert_description of this Job.
        :type alert_description: str
        """

        self._alert_description = alert_description

    @property
    def analysis_mode(self):
        """Gets the analysis_mode of this Job.

        When set to preview, analysis is not added to the database

        :return: The analysis_mode of this Job.
        :rtype: str
        """
        return self._analysis_mode

    @analysis_mode.setter
    def analysis_mode(self, analysis_mode):
        """Sets the analysis_mode of this Job.

        When set to preview, analysis is not added to the database

        :param analysis_mode: The analysis_mode of this Job.
        :type analysis_mode: str
        """

        self._analysis_mode = analysis_mode

    @property
    def commit(self):
        """Gets the commit of this Job.

        The git commit that this job is evaluating

        :return: The commit of this Job.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this Job.

        The git commit that this job is evaluating

        :param commit: The commit of this Job.
        :type commit: str
        """

        self._commit = commit

    @property
    def created(self):
        """Gets the created of this Job.

        DateTime that this job was queued

        :return: The created of this Job.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Job.

        DateTime that this job was queued

        :param created: The created of this Job.
        :type created: str
        """

        self._created = created

    @property
    def email_report_to(self):
        """Gets the email_report_to of this Job.

        List of usernames to email the report to

        :return: The email_report_to of this Job.
        :rtype: str
        """
        return self._email_report_to

    @email_report_to.setter
    def email_report_to(self, email_report_to):
        """Sets the email_report_to of this Job.

        List of usernames to email the report to

        :param email_report_to: The email_report_to of this Job.
        :type email_report_to: str
        """

        self._email_report_to = email_report_to

    @property
    def finished(self):
        """Gets the finished of this Job.

        If the job has finished, then the datetime that the job finished processing

        :return: The finished of this Job.
        :rtype: str
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Job.

        If the job has finished, then the datetime that the job finished processing

        :param finished: The finished of this Job.
        :type finished: str
        """

        self._finished = finished

    @property
    def job_id(self):
        """Gets the job_id of this Job.

        The jobId of this job

        :return: The job_id of this Job.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Job.

        The jobId of this job

        :param job_id: The job_id of this Job.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def project_branch(self):
        """Gets the project_branch of this Job.

        The project branch that this job is evaluating

        :return: The project_branch of this Job.
        :rtype: str
        """
        return self._project_branch

    @project_branch.setter
    def project_branch(self, project_branch):
        """Sets the project_branch of this Job.

        The project branch that this job is evaluating

        :param project_branch: The project_branch of this Job.
        :type project_branch: str
        """

        self._project_branch = project_branch

    @property
    def project_key(self):
        """Gets the project_key of this Job.

        The projectKey that this job is running

        :return: The project_key of this Job.
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this Job.

        The projectKey that this job is running

        :param project_key: The project_key of this Job.
        :type project_key: str
        """

        self._project_key = project_key

    @property
    def started(self):
        """Gets the started of this Job.

        If the job has started, then the datetime that the job started processing

        :return: The started of this Job.
        :rtype: str
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Job.

        If the job has started, then the datetime that the job started processing

        :param started: The started of this Job.
        :type started: str
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this Job.

        The status of the job

        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.

        The status of the job

        :param status: The status of this Job.
        :type status: str
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this Job.

        The url to view the output report

        :return: The url of this Job.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Job.

        The url to view the output report

        :param url: The url of this Job.
        :type url: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this Job.

        The project version that this job is evaluating

        :return: The version of this Job.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Job.

        The project version that this job is evaluating

        :param version: The version of this Job.
        :type version: str
        """

        self._version = version

    @property
    def warnings(self):
        """Gets the warnings of this Job.

        When creating a new job, any warnings will be listed here.

        :return: The warnings of this Job.
        :rtype: str
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Job.

        When creating a new job, any warnings will be listed here.

        :param warnings: The warnings of this Job.
        :type warnings: str
        """

        self._warnings = warnings
