# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_mode: str=None, commit_override: str=None, email_report_to: str=None, project_branch: str=None, project_key: str=None, version: str=None):
        """NewJob - a model defined in OpenAPI

        :param analysis_mode: The analysis_mode of this NewJob.
        :param commit_override: The commit_override of this NewJob.
        :param email_report_to: The email_report_to of this NewJob.
        :param project_branch: The project_branch of this NewJob.
        :param project_key: The project_key of this NewJob.
        :param version: The version of this NewJob.
        """
        self.openapi_types = {
            'analysis_mode': str,
            'commit_override': str,
            'email_report_to': str,
            'project_branch': str,
            'project_key': str,
            'version': str
        }

        self.attribute_map = {
            'analysis_mode': 'analysisMode',
            'commit_override': 'commitOverride',
            'email_report_to': 'emailReportTo',
            'project_branch': 'projectBranch',
            'project_key': 'projectKey',
            'version': 'version'
        }

        self._analysis_mode = analysis_mode
        self._commit_override = commit_override
        self._email_report_to = email_report_to
        self._project_branch = project_branch
        self._project_key = project_key
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewJob of this NewJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_mode(self):
        """Gets the analysis_mode of this NewJob.

        When set to preview, analysis is not added to the database

        :return: The analysis_mode of this NewJob.
        :rtype: str
        """
        return self._analysis_mode

    @analysis_mode.setter
    def analysis_mode(self, analysis_mode):
        """Sets the analysis_mode of this NewJob.

        When set to preview, analysis is not added to the database

        :param analysis_mode: The analysis_mode of this NewJob.
        :type analysis_mode: str
        """

        self._analysis_mode = analysis_mode

    @property
    def commit_override(self):
        """Gets the commit_override of this NewJob.

        When the project is based on git, the git commit that this job should run. Leave blank to use the project's default

        :return: The commit_override of this NewJob.
        :rtype: str
        """
        return self._commit_override

    @commit_override.setter
    def commit_override(self, commit_override):
        """Sets the commit_override of this NewJob.

        When the project is based on git, the git commit that this job should run. Leave blank to use the project's default

        :param commit_override: The commit_override of this NewJob.
        :type commit_override: str
        """

        self._commit_override = commit_override

    @property
    def email_report_to(self):
        """Gets the email_report_to of this NewJob.

        List of usernames to email the report to

        :return: The email_report_to of this NewJob.
        :rtype: str
        """
        return self._email_report_to

    @email_report_to.setter
    def email_report_to(self, email_report_to):
        """Sets the email_report_to of this NewJob.

        List of usernames to email the report to

        :param email_report_to: The email_report_to of this NewJob.
        :type email_report_to: str
        """

        self._email_report_to = email_report_to

    @property
    def project_branch(self):
        """Gets the project_branch of this NewJob.

        he project branch that this job is evaluating

        :return: The project_branch of this NewJob.
        :rtype: str
        """
        return self._project_branch

    @project_branch.setter
    def project_branch(self, project_branch):
        """Sets the project_branch of this NewJob.

        he project branch that this job is evaluating

        :param project_branch: The project_branch of this NewJob.
        :type project_branch: str
        """

        self._project_branch = project_branch

    @property
    def project_key(self):
        """Gets the project_key of this NewJob.

        The key of the project to start

        :return: The project_key of this NewJob.
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this NewJob.

        The key of the project to start

        :param project_key: The project_key of this NewJob.
        :type project_key: str
        """
        if project_key is None:
            raise ValueError("Invalid value for `project_key`, must not be `None`")

        self._project_key = project_key

    @property
    def version(self):
        """Gets the version of this NewJob.

        Use this as the analysis' version. On success the Project's default version will be set to this

        :return: The version of this NewJob.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NewJob.

        Use this as the analysis' version. On success the Project's default version will be set to this

        :param version: The version of this NewJob.
        :type version: str
        """

        self._version = version
