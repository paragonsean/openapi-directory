/**
 * CodeScan API
 * Manage your Hosted CodeScan Service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@villagechief.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_alert_isSet = false;
    m_alert_isValid = false;

    m_alert_description_isSet = false;
    m_alert_description_isValid = false;

    m_analysis_mode_isSet = false;
    m_analysis_mode_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_email_report_to_isSet = false;
    m_email_report_to_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_project_branch_isSet = false;
    m_project_branch_isValid = false;

    m_project_key_isSet = false;
    m_project_key_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_alert_isValid = ::OpenAPI::fromJsonValue(m_alert, json[QString("alert")]);
    m_alert_isSet = !json[QString("alert")].isNull() && m_alert_isValid;

    m_alert_description_isValid = ::OpenAPI::fromJsonValue(m_alert_description, json[QString("alertDescription")]);
    m_alert_description_isSet = !json[QString("alertDescription")].isNull() && m_alert_description_isValid;

    m_analysis_mode_isValid = ::OpenAPI::fromJsonValue(m_analysis_mode, json[QString("analysisMode")]);
    m_analysis_mode_isSet = !json[QString("analysisMode")].isNull() && m_analysis_mode_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_email_report_to_isValid = ::OpenAPI::fromJsonValue(m_email_report_to, json[QString("emailReportTo")]);
    m_email_report_to_isSet = !json[QString("emailReportTo")].isNull() && m_email_report_to_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_project_branch_isValid = ::OpenAPI::fromJsonValue(m_project_branch, json[QString("projectBranch")]);
    m_project_branch_isSet = !json[QString("projectBranch")].isNull() && m_project_branch_isValid;

    m_project_key_isValid = ::OpenAPI::fromJsonValue(m_project_key, json[QString("projectKey")]);
    m_project_key_isSet = !json[QString("projectKey")].isNull() && m_project_key_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_isSet) {
        obj.insert(QString("alert"), ::OpenAPI::toJsonValue(m_alert));
    }
    if (m_alert_description_isSet) {
        obj.insert(QString("alertDescription"), ::OpenAPI::toJsonValue(m_alert_description));
    }
    if (m_analysis_mode_isSet) {
        obj.insert(QString("analysisMode"), ::OpenAPI::toJsonValue(m_analysis_mode));
    }
    if (m_commit_isSet) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_email_report_to_isSet) {
        obj.insert(QString("emailReportTo"), ::OpenAPI::toJsonValue(m_email_report_to));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_project_branch_isSet) {
        obj.insert(QString("projectBranch"), ::OpenAPI::toJsonValue(m_project_branch));
    }
    if (m_project_key_isSet) {
        obj.insert(QString("projectKey"), ::OpenAPI::toJsonValue(m_project_key));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_warnings_isSet) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QString OAIJob::getAlert() const {
    return m_alert;
}
void OAIJob::setAlert(const QString &alert) {
    m_alert = alert;
    m_alert_isSet = true;
}

bool OAIJob::is_alert_Set() const{
    return m_alert_isSet;
}

bool OAIJob::is_alert_Valid() const{
    return m_alert_isValid;
}

QString OAIJob::getAlertDescription() const {
    return m_alert_description;
}
void OAIJob::setAlertDescription(const QString &alert_description) {
    m_alert_description = alert_description;
    m_alert_description_isSet = true;
}

bool OAIJob::is_alert_description_Set() const{
    return m_alert_description_isSet;
}

bool OAIJob::is_alert_description_Valid() const{
    return m_alert_description_isValid;
}

QString OAIJob::getAnalysisMode() const {
    return m_analysis_mode;
}
void OAIJob::setAnalysisMode(const QString &analysis_mode) {
    m_analysis_mode = analysis_mode;
    m_analysis_mode_isSet = true;
}

bool OAIJob::is_analysis_mode_Set() const{
    return m_analysis_mode_isSet;
}

bool OAIJob::is_analysis_mode_Valid() const{
    return m_analysis_mode_isValid;
}

QString OAIJob::getCommit() const {
    return m_commit;
}
void OAIJob::setCommit(const QString &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIJob::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIJob::is_commit_Valid() const{
    return m_commit_isValid;
}

QString OAIJob::getCreated() const {
    return m_created;
}
void OAIJob::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIJob::is_created_Set() const{
    return m_created_isSet;
}

bool OAIJob::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIJob::getEmailReportTo() const {
    return m_email_report_to;
}
void OAIJob::setEmailReportTo(const QString &email_report_to) {
    m_email_report_to = email_report_to;
    m_email_report_to_isSet = true;
}

bool OAIJob::is_email_report_to_Set() const{
    return m_email_report_to_isSet;
}

bool OAIJob::is_email_report_to_Valid() const{
    return m_email_report_to_isValid;
}

QString OAIJob::getFinished() const {
    return m_finished;
}
void OAIJob::setFinished(const QString &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIJob::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIJob::is_finished_Valid() const{
    return m_finished_isValid;
}

QString OAIJob::getJobId() const {
    return m_job_id;
}
void OAIJob::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJob::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJob::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIJob::getProjectBranch() const {
    return m_project_branch;
}
void OAIJob::setProjectBranch(const QString &project_branch) {
    m_project_branch = project_branch;
    m_project_branch_isSet = true;
}

bool OAIJob::is_project_branch_Set() const{
    return m_project_branch_isSet;
}

bool OAIJob::is_project_branch_Valid() const{
    return m_project_branch_isValid;
}

QString OAIJob::getProjectKey() const {
    return m_project_key;
}
void OAIJob::setProjectKey(const QString &project_key) {
    m_project_key = project_key;
    m_project_key_isSet = true;
}

bool OAIJob::is_project_key_Set() const{
    return m_project_key_isSet;
}

bool OAIJob::is_project_key_Valid() const{
    return m_project_key_isValid;
}

QString OAIJob::getStarted() const {
    return m_started;
}
void OAIJob::setStarted(const QString &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIJob::is_started_Set() const{
    return m_started_isSet;
}

bool OAIJob::is_started_Valid() const{
    return m_started_isValid;
}

QString OAIJob::getStatus() const {
    return m_status;
}
void OAIJob::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJob::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIJob::getUrl() const {
    return m_url;
}
void OAIJob::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIJob::is_url_Set() const{
    return m_url_isSet;
}

bool OAIJob::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIJob::getVersion() const {
    return m_version;
}
void OAIJob::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIJob::is_version_Set() const{
    return m_version_isSet;
}

bool OAIJob::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIJob::getWarnings() const {
    return m_warnings;
}
void OAIJob::setWarnings(const QString &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIJob::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIJob::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_report_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
