/**
 * CodeScan API
 * Manage your Hosted CodeScan Service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@villagechief.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewJob::OAINewJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewJob::OAINewJob() {
    this->initializeModel();
}

OAINewJob::~OAINewJob() {}

void OAINewJob::initializeModel() {

    m_analysis_mode_isSet = false;
    m_analysis_mode_isValid = false;

    m_commit_override_isSet = false;
    m_commit_override_isValid = false;

    m_email_report_to_isSet = false;
    m_email_report_to_isValid = false;

    m_project_branch_isSet = false;
    m_project_branch_isValid = false;

    m_project_key_isSet = false;
    m_project_key_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAINewJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewJob::fromJsonObject(QJsonObject json) {

    m_analysis_mode_isValid = ::OpenAPI::fromJsonValue(m_analysis_mode, json[QString("analysisMode")]);
    m_analysis_mode_isSet = !json[QString("analysisMode")].isNull() && m_analysis_mode_isValid;

    m_commit_override_isValid = ::OpenAPI::fromJsonValue(m_commit_override, json[QString("commitOverride")]);
    m_commit_override_isSet = !json[QString("commitOverride")].isNull() && m_commit_override_isValid;

    m_email_report_to_isValid = ::OpenAPI::fromJsonValue(m_email_report_to, json[QString("emailReportTo")]);
    m_email_report_to_isSet = !json[QString("emailReportTo")].isNull() && m_email_report_to_isValid;

    m_project_branch_isValid = ::OpenAPI::fromJsonValue(m_project_branch, json[QString("projectBranch")]);
    m_project_branch_isSet = !json[QString("projectBranch")].isNull() && m_project_branch_isValid;

    m_project_key_isValid = ::OpenAPI::fromJsonValue(m_project_key, json[QString("projectKey")]);
    m_project_key_isSet = !json[QString("projectKey")].isNull() && m_project_key_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAINewJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewJob::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_mode_isSet) {
        obj.insert(QString("analysisMode"), ::OpenAPI::toJsonValue(m_analysis_mode));
    }
    if (m_commit_override_isSet) {
        obj.insert(QString("commitOverride"), ::OpenAPI::toJsonValue(m_commit_override));
    }
    if (m_email_report_to_isSet) {
        obj.insert(QString("emailReportTo"), ::OpenAPI::toJsonValue(m_email_report_to));
    }
    if (m_project_branch_isSet) {
        obj.insert(QString("projectBranch"), ::OpenAPI::toJsonValue(m_project_branch));
    }
    if (m_project_key_isSet) {
        obj.insert(QString("projectKey"), ::OpenAPI::toJsonValue(m_project_key));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAINewJob::getAnalysisMode() const {
    return m_analysis_mode;
}
void OAINewJob::setAnalysisMode(const QString &analysis_mode) {
    m_analysis_mode = analysis_mode;
    m_analysis_mode_isSet = true;
}

bool OAINewJob::is_analysis_mode_Set() const{
    return m_analysis_mode_isSet;
}

bool OAINewJob::is_analysis_mode_Valid() const{
    return m_analysis_mode_isValid;
}

QString OAINewJob::getCommitOverride() const {
    return m_commit_override;
}
void OAINewJob::setCommitOverride(const QString &commit_override) {
    m_commit_override = commit_override;
    m_commit_override_isSet = true;
}

bool OAINewJob::is_commit_override_Set() const{
    return m_commit_override_isSet;
}

bool OAINewJob::is_commit_override_Valid() const{
    return m_commit_override_isValid;
}

QString OAINewJob::getEmailReportTo() const {
    return m_email_report_to;
}
void OAINewJob::setEmailReportTo(const QString &email_report_to) {
    m_email_report_to = email_report_to;
    m_email_report_to_isSet = true;
}

bool OAINewJob::is_email_report_to_Set() const{
    return m_email_report_to_isSet;
}

bool OAINewJob::is_email_report_to_Valid() const{
    return m_email_report_to_isValid;
}

QString OAINewJob::getProjectBranch() const {
    return m_project_branch;
}
void OAINewJob::setProjectBranch(const QString &project_branch) {
    m_project_branch = project_branch;
    m_project_branch_isSet = true;
}

bool OAINewJob::is_project_branch_Set() const{
    return m_project_branch_isSet;
}

bool OAINewJob::is_project_branch_Valid() const{
    return m_project_branch_isValid;
}

QString OAINewJob::getProjectKey() const {
    return m_project_key;
}
void OAINewJob::setProjectKey(const QString &project_key) {
    m_project_key = project_key;
    m_project_key_isSet = true;
}

bool OAINewJob::is_project_key_Set() const{
    return m_project_key_isSet;
}

bool OAINewJob::is_project_key_Valid() const{
    return m_project_key_isValid;
}

QString OAINewJob::getVersion() const {
    return m_version;
}
void OAINewJob::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAINewJob::is_version_Set() const{
    return m_version_isSet;
}

bool OAINewJob::is_version_Valid() const{
    return m_version_isValid;
}

bool OAINewJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_report_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_key_isValid && true;
}

} // namespace OpenAPI
