/**
 * CodeScan API
 * Manage your Hosted CodeScan Service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@villagechief.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Job from '../model/Job';
import NewJob from '../model/NewJob';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobGet operation.
     * @callback module:api/DefaultApi~jobGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of a job
     * Fetches the status of a job
     * @param {String} jobId Id of the Job to retrieve
     * @param {module:api/DefaultApi~jobGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    jobGet(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'jobId': jobId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['codescan_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/job', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobPost operation.
     * @callback module:api/DefaultApi~jobPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queues a job
     * Creates a new job
     * @param {module:model/NewJob} job Id of the Job to retrieve
     * @param {module:api/DefaultApi~jobPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    jobPost(job, callback) {
      let postBody = job;
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling jobPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['codescan_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
