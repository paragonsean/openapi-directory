/**
 * CodeScan API
 * Manage your Hosted CodeScan Service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@villagechief.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Job model module.
 * @module model/Job
 * @version 1.0.0
 */
class Job {
    /**
     * Constructs a new <code>Job</code>.
     * @alias module:model/Job
     */
    constructor() { 
        
        Job.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Job</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Job} obj Optional instance to populate.
     * @return {module:model/Job} The populated <code>Job</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Job();

            if (data.hasOwnProperty('alert')) {
                obj['alert'] = ApiClient.convertToType(data['alert'], 'String');
            }
            if (data.hasOwnProperty('alertDescription')) {
                obj['alertDescription'] = ApiClient.convertToType(data['alertDescription'], 'String');
            }
            if (data.hasOwnProperty('analysisMode')) {
                obj['analysisMode'] = ApiClient.convertToType(data['analysisMode'], 'String');
            }
            if (data.hasOwnProperty('commit')) {
                obj['commit'] = ApiClient.convertToType(data['commit'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('emailReportTo')) {
                obj['emailReportTo'] = ApiClient.convertToType(data['emailReportTo'], 'String');
            }
            if (data.hasOwnProperty('finished')) {
                obj['finished'] = ApiClient.convertToType(data['finished'], 'String');
            }
            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
            }
            if (data.hasOwnProperty('projectBranch')) {
                obj['projectBranch'] = ApiClient.convertToType(data['projectBranch'], 'String');
            }
            if (data.hasOwnProperty('projectKey')) {
                obj['projectKey'] = ApiClient.convertToType(data['projectKey'], 'String');
            }
            if (data.hasOwnProperty('started')) {
                obj['started'] = ApiClient.convertToType(data['started'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Job</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Job</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alert'] && !(typeof data['alert'] === 'string' || data['alert'] instanceof String)) {
            throw new Error("Expected the field `alert` to be a primitive type in the JSON string but got " + data['alert']);
        }
        // ensure the json data is a string
        if (data['alertDescription'] && !(typeof data['alertDescription'] === 'string' || data['alertDescription'] instanceof String)) {
            throw new Error("Expected the field `alertDescription` to be a primitive type in the JSON string but got " + data['alertDescription']);
        }
        // ensure the json data is a string
        if (data['analysisMode'] && !(typeof data['analysisMode'] === 'string' || data['analysisMode'] instanceof String)) {
            throw new Error("Expected the field `analysisMode` to be a primitive type in the JSON string but got " + data['analysisMode']);
        }
        // ensure the json data is a string
        if (data['commit'] && !(typeof data['commit'] === 'string' || data['commit'] instanceof String)) {
            throw new Error("Expected the field `commit` to be a primitive type in the JSON string but got " + data['commit']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['emailReportTo'] && !(typeof data['emailReportTo'] === 'string' || data['emailReportTo'] instanceof String)) {
            throw new Error("Expected the field `emailReportTo` to be a primitive type in the JSON string but got " + data['emailReportTo']);
        }
        // ensure the json data is a string
        if (data['finished'] && !(typeof data['finished'] === 'string' || data['finished'] instanceof String)) {
            throw new Error("Expected the field `finished` to be a primitive type in the JSON string but got " + data['finished']);
        }
        // ensure the json data is a string
        if (data['jobId'] && !(typeof data['jobId'] === 'string' || data['jobId'] instanceof String)) {
            throw new Error("Expected the field `jobId` to be a primitive type in the JSON string but got " + data['jobId']);
        }
        // ensure the json data is a string
        if (data['projectBranch'] && !(typeof data['projectBranch'] === 'string' || data['projectBranch'] instanceof String)) {
            throw new Error("Expected the field `projectBranch` to be a primitive type in the JSON string but got " + data['projectBranch']);
        }
        // ensure the json data is a string
        if (data['projectKey'] && !(typeof data['projectKey'] === 'string' || data['projectKey'] instanceof String)) {
            throw new Error("Expected the field `projectKey` to be a primitive type in the JSON string but got " + data['projectKey']);
        }
        // ensure the json data is a string
        if (data['started'] && !(typeof data['started'] === 'string' || data['started'] instanceof String)) {
            throw new Error("Expected the field `started` to be a primitive type in the JSON string but got " + data['started']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['warnings'] && !(typeof data['warnings'] === 'string' || data['warnings'] instanceof String)) {
            throw new Error("Expected the field `warnings` to be a primitive type in the JSON string but got " + data['warnings']);
        }

        return true;
    }


}



/**
 * Quality Gate status of a completed job
 * @member {String} alert
 */
Job.prototype['alert'] = undefined;

/**
 * Quality Gate errors of a completed job
 * @member {String} alertDescription
 */
Job.prototype['alertDescription'] = undefined;

/**
 * When set to preview, analysis is not added to the database
 * @member {String} analysisMode
 */
Job.prototype['analysisMode'] = undefined;

/**
 * The git commit that this job is evaluating
 * @member {String} commit
 */
Job.prototype['commit'] = undefined;

/**
 * DateTime that this job was queued
 * @member {String} created
 */
Job.prototype['created'] = undefined;

/**
 * List of usernames to email the report to
 * @member {String} emailReportTo
 */
Job.prototype['emailReportTo'] = undefined;

/**
 * If the job has finished, then the datetime that the job finished processing
 * @member {String} finished
 */
Job.prototype['finished'] = undefined;

/**
 * The jobId of this job
 * @member {String} jobId
 */
Job.prototype['jobId'] = undefined;

/**
 * The project branch that this job is evaluating
 * @member {String} projectBranch
 */
Job.prototype['projectBranch'] = undefined;

/**
 * The projectKey that this job is running
 * @member {String} projectKey
 */
Job.prototype['projectKey'] = undefined;

/**
 * If the job has started, then the datetime that the job started processing
 * @member {String} started
 */
Job.prototype['started'] = undefined;

/**
 * The status of the job
 * @member {String} status
 */
Job.prototype['status'] = undefined;

/**
 * The url to view the output report
 * @member {String} url
 */
Job.prototype['url'] = undefined;

/**
 * The project version that this job is evaluating
 * @member {String} version
 */
Job.prototype['version'] = undefined;

/**
 * When creating a new job, any warnings will be listed here.
 * @member {String} warnings
 */
Job.prototype['warnings'] = undefined;






export default Job;

