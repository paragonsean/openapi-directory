/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Freight model module.
 * @module model/Freight
 * @version 1.0.0
 */
class Freight {
    /**
     * Constructs a new <code>Freight</code>.
     * @alias module:model/Freight
     * @param additionalInfo {String} Aditional information for the courier
     * @param chargedAmount {Number} Shipment cost. Must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567
     * @param crossDockingTime {Number} Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer
     * @param defaultAmount {Number} Default value of this shippment.
     * @param transitTime {Number} Deliver time in seconds. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer
     */
    constructor(additionalInfo, chargedAmount, crossDockingTime, defaultAmount, transitTime) { 
        
        Freight.initialize(this, additionalInfo, chargedAmount, crossDockingTime, defaultAmount, transitTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, additionalInfo, chargedAmount, crossDockingTime, defaultAmount, transitTime) { 
        obj['additionalInfo'] = additionalInfo;
        obj['chargedAmount'] = chargedAmount;
        obj['crossDockingTime'] = crossDockingTime;
        obj['defaultAmount'] = defaultAmount;
        obj['transitTime'] = transitTime;
    }

    /**
     * Constructs a <code>Freight</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Freight} obj Optional instance to populate.
     * @return {module:model/Freight} The populated <code>Freight</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Freight();

            if (data.hasOwnProperty('ETA')) {
                obj['ETA'] = ApiClient.convertToType(data['ETA'], 'Date');
            }
            if (data.hasOwnProperty('additionalInfo')) {
                obj['additionalInfo'] = ApiClient.convertToType(data['additionalInfo'], 'String');
            }
            if (data.hasOwnProperty('chargedAmount')) {
                obj['chargedAmount'] = ApiClient.convertToType(data['chargedAmount'], 'Number');
            }
            if (data.hasOwnProperty('crossDockingTime')) {
                obj['crossDockingTime'] = ApiClient.convertToType(data['crossDockingTime'], 'Number');
            }
            if (data.hasOwnProperty('defaultAmount')) {
                obj['defaultAmount'] = ApiClient.convertToType(data['defaultAmount'], 'Number');
            }
            if (data.hasOwnProperty('scheduledPeriod')) {
                obj['scheduledPeriod'] = ApiClient.convertToType(data['scheduledPeriod'], 'String');
            }
            if (data.hasOwnProperty('transitTime')) {
                obj['transitTime'] = ApiClient.convertToType(data['transitTime'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Freight</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Freight</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Freight.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['additionalInfo'] && !(typeof data['additionalInfo'] === 'string' || data['additionalInfo'] instanceof String)) {
            throw new Error("Expected the field `additionalInfo` to be a primitive type in the JSON string but got " + data['additionalInfo']);
        }
        // ensure the json data is a string
        if (data['scheduledPeriod'] && !(typeof data['scheduledPeriod'] === 'string' || data['scheduledPeriod'] instanceof String)) {
            throw new Error("Expected the field `scheduledPeriod` to be a primitive type in the JSON string but got " + data['scheduledPeriod']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Freight.RequiredProperties = ["additionalInfo", "chargedAmount", "crossDockingTime", "defaultAmount", "transitTime"];

/**
 * Estimated time of arrival
 * @member {Date} ETA
 */
Freight.prototype['ETA'] = undefined;

/**
 * Aditional information for the courier
 * @member {String} additionalInfo
 */
Freight.prototype['additionalInfo'] = undefined;

/**
 * Shipment cost. Must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567
 * @member {Number} chargedAmount
 */
Freight.prototype['chargedAmount'] = undefined;

/**
 * Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer
 * @member {Number} crossDockingTime
 */
Freight.prototype['crossDockingTime'] = undefined;

/**
 * Default value of this shippment.
 * @member {Number} defaultAmount
 */
Freight.prototype['defaultAmount'] = undefined;

/**
 * Scheduled period
 * @member {String} scheduledPeriod
 */
Freight.prototype['scheduledPeriod'] = undefined;

/**
 * Deliver time in seconds. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer
 * @member {Number} transitTime
 */
Freight.prototype['transitTime'] = undefined;

/**
 * Freight type
 * @member {String} type
 */
Freight.prototype['type'] = undefined;






export default Freight;

