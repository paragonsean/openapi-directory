/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ControlledStock from './ControlledStock';
import Dimensions from './Dimensions';
import GiftWrap from './GiftWrap';
import Image from './Image';
import ProductAttribute from './ProductAttribute';
import ProductPrice from './ProductPrice';
import ProductReference from './ProductReference';
import ProductSiteReference from './ProductSiteReference';
import SellerItemStatus from './SellerItemStatus';

/**
 * The SellerItem model module.
 * @module model/SellerItem
 * @version 1.0.0
 */
class SellerItem {
    /**
     * Constructs a new <code>SellerItem</code>.
     * @alias module:model/SellerItem
     * @param attributes {Array.<module:model/ProductAttribute>} 
     * @param brand {String} Brand name
     * @param dimensions {module:model/Dimensions} 
     * @param images {Array.<module:model/Image>} List of valid Product image URLs.
     * @param prices {Array.<module:model/ProductPrice>} Price information for each marketplace that this product is listed
     * @param product {module:model/ProductReference} 
     * @param skuSellerId {String} Unique Product Id (SKU) in the seller system
     * @param status {Array.<module:model/SellerItemStatus>} Product status for each marketplace that this product is listed
     * @param stocks {Array.<module:model/ControlledStock>} Invetory information for each marketplace that this product is listed
     * @param title {String} Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
     */
    constructor(attributes, brand, dimensions, images, prices, product, skuSellerId, status, stocks, title) { 
        
        SellerItem.initialize(this, attributes, brand, dimensions, images, prices, product, skuSellerId, status, stocks, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes, brand, dimensions, images, prices, product, skuSellerId, status, stocks, title) { 
        obj['attributes'] = attributes;
        obj['brand'] = brand;
        obj['dimensions'] = dimensions;
        obj['images'] = images;
        obj['prices'] = prices;
        obj['product'] = product;
        obj['skuSellerId'] = skuSellerId;
        obj['status'] = status;
        obj['stocks'] = stocks;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>SellerItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SellerItem} obj Optional instance to populate.
     * @return {module:model/SellerItem} The populated <code>SellerItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SellerItem();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [ProductAttribute]);
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = Dimensions.constructFromObject(data['dimensions']);
            }
            if (data.hasOwnProperty('giftWrap')) {
                obj['giftWrap'] = GiftWrap.constructFromObject(data['giftWrap']);
            }
            if (data.hasOwnProperty('gtin')) {
                obj['gtin'] = ApiClient.convertToType(data['gtin'], ['String']);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
            if (data.hasOwnProperty('prices')) {
                obj['prices'] = ApiClient.convertToType(data['prices'], [ProductPrice]);
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ProductReference.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('skuSellerId')) {
                obj['skuSellerId'] = ApiClient.convertToType(data['skuSellerId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], [SellerItemStatus]);
            }
            if (data.hasOwnProperty('stocks')) {
                obj['stocks'] = ApiClient.convertToType(data['stocks'], [ControlledStock]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], [ProductSiteReference]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SellerItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SellerItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SellerItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                ProductAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          Dimensions.validateJSON(data['dimensions']);
        }
        // validate the optional field `giftWrap`
        if (data['giftWrap']) { // data not null
          GiftWrap.validateJSON(data['giftWrap']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['gtin'])) {
            throw new Error("Expected the field `gtin` to be an array in the JSON data but got " + data['gtin']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                Image.validateJSON(item);
            };
        }
        if (data['prices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['prices'])) {
                throw new Error("Expected the field `prices` to be an array in the JSON data but got " + data['prices']);
            }
            // validate the optional field `prices` (array)
            for (const item of data['prices']) {
                ProductPrice.validateJSON(item);
            };
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          ProductReference.validateJSON(data['product']);
        }
        // ensure the json data is a string
        if (data['skuSellerId'] && !(typeof data['skuSellerId'] === 'string' || data['skuSellerId'] instanceof String)) {
            throw new Error("Expected the field `skuSellerId` to be a primitive type in the JSON string but got " + data['skuSellerId']);
        }
        if (data['status']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['status'])) {
                throw new Error("Expected the field `status` to be an array in the JSON data but got " + data['status']);
            }
            // validate the optional field `status` (array)
            for (const item of data['status']) {
                SellerItemStatus.validateJSON(item);
            };
        }
        if (data['stocks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stocks'])) {
                throw new Error("Expected the field `stocks` to be an array in the JSON data but got " + data['stocks']);
            }
            // validate the optional field `stocks` (array)
            for (const item of data['stocks']) {
                ControlledStock.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        if (data['urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urls'])) {
                throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
            }
            // validate the optional field `urls` (array)
            for (const item of data['urls']) {
                ProductSiteReference.validateJSON(item);
            };
        }

        return true;
    }


}

SellerItem.RequiredProperties = ["attributes", "brand", "dimensions", "images", "prices", "product", "skuSellerId", "status", "stocks", "title"];

/**
 * @member {Array.<module:model/ProductAttribute>} attributes
 */
SellerItem.prototype['attributes'] = undefined;

/**
 * Brand name
 * @member {String} brand
 */
SellerItem.prototype['brand'] = undefined;

/**
 * @member {module:model/Dimensions} dimensions
 */
SellerItem.prototype['dimensions'] = undefined;

/**
 * @member {module:model/GiftWrap} giftWrap
 */
SellerItem.prototype['giftWrap'] = undefined;

/**
 * Array of product EAN and/or ISBN and/or ASIN codes
 * @member {Array.<String>} gtin
 */
SellerItem.prototype['gtin'] = undefined;

/**
 * List of valid Product image URLs.
 * @member {Array.<module:model/Image>} images
 */
SellerItem.prototype['images'] = undefined;

/**
 * Price information for each marketplace that this product is listed
 * @member {Array.<module:model/ProductPrice>} prices
 */
SellerItem.prototype['prices'] = undefined;

/**
 * @member {module:model/ProductReference} product
 */
SellerItem.prototype['product'] = undefined;

/**
 * Unique Product Id (SKU) in the seller system
 * @member {String} skuSellerId
 */
SellerItem.prototype['skuSellerId'] = undefined;

/**
 * Product status for each marketplace that this product is listed
 * @member {Array.<module:model/SellerItemStatus>} status
 */
SellerItem.prototype['status'] = undefined;

/**
 * Invetory information for each marketplace that this product is listed
 * @member {Array.<module:model/ControlledStock>} stocks
 */
SellerItem.prototype['stocks'] = undefined;

/**
 * Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
 * @member {String} title
 */
SellerItem.prototype['title'] = undefined;

/**
 * List of URLs where the product is listed for sale
 * @member {Array.<module:model/ProductSiteReference>} urls
 */
SellerItem.prototype['urls'] = undefined;






export default SellerItem;

