/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderItemReference model module.
 * @module model/OrderItemReference
 * @version 1.0.0
 */
class OrderItemReference {
    /**
     * Constructs a new <code>OrderItemReference</code>.
     * @alias module:model/OrderItemReference
     * @param quantity {Number} Quantity of items
     * @param skuSellerId {String} Unique Product Id (SKU) in the seller system. This is the key that defines witch product will be updated
     */
    constructor(quantity, skuSellerId) { 
        
        OrderItemReference.initialize(this, quantity, skuSellerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, quantity, skuSellerId) { 
        obj['quantity'] = quantity;
        obj['skuSellerId'] = skuSellerId;
    }

    /**
     * Constructs a <code>OrderItemReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderItemReference} obj Optional instance to populate.
     * @return {module:model/OrderItemReference} The populated <code>OrderItemReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderItemReference();

            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('skuSellerId')) {
                obj['skuSellerId'] = ApiClient.convertToType(data['skuSellerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderItemReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderItemReference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderItemReference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['skuSellerId'] && !(typeof data['skuSellerId'] === 'string' || data['skuSellerId'] instanceof String)) {
            throw new Error("Expected the field `skuSellerId` to be a primitive type in the JSON string but got " + data['skuSellerId']);
        }

        return true;
    }


}

OrderItemReference.RequiredProperties = ["quantity", "skuSellerId"];

/**
 * Quantity of items
 * @member {Number} quantity
 */
OrderItemReference.prototype['quantity'] = undefined;

/**
 * Unique Product Id (SKU) in the seller system. This is the key that defines witch product will be updated
 * @member {String} skuSellerId
 */
OrderItemReference.prototype['skuSellerId'] = undefined;






export default OrderItemReference;

