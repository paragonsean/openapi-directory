/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimensions from './Dimensions';
import GiftWrap from './GiftWrap';
import ProductAttribute from './ProductAttribute';
import ProductPrice from './ProductPrice';

/**
 * The Product model module.
 * @module model/Product
 * @version 1.0.0
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * @alias module:model/Product
     * @param attributes {Array.<module:model/ProductAttribute>} List of `key` `value` attributes of this product. This is very important for search and SEO optmization. Include all relevant information
     * @param brand {String} Brand name
     * @param categories {Array.<String>} Array of categories associated with this product
     * @param description {String} Product description.
     * @param images {Array.<String>} List of valid Product image URLs. HTTP or HTTPS are valid. HTTPS is prefered.
     * @param price {module:model/ProductPrice} 
     * @param skuSellerId {String} Unique Product Id (SKU) in the seller system
     * @param stock {Number} Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.
     * @param title {String} Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
     */
    constructor(attributes, brand, categories, description, images, price, skuSellerId, stock, title) { 
        
        Product.initialize(this, attributes, brand, categories, description, images, price, skuSellerId, stock, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes, brand, categories, description, images, price, skuSellerId, stock, title) { 
        obj['attributes'] = attributes;
        obj['brand'] = brand;
        obj['categories'] = categories;
        obj['description'] = description;
        obj['images'] = images;
        obj['price'] = price;
        obj['skuSellerId'] = skuSellerId;
        obj['stock'] = stock;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [ProductAttribute]);
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = Dimensions.constructFromObject(data['dimensions']);
            }
            if (data.hasOwnProperty('giftWrap')) {
                obj['giftWrap'] = GiftWrap.constructFromObject(data['giftWrap']);
            }
            if (data.hasOwnProperty('gtin')) {
                obj['gtin'] = ApiClient.convertToType(data['gtin'], ['String']);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], ['String']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ProductPrice.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('productGroupId')) {
                obj['productGroupId'] = ApiClient.convertToType(data['productGroupId'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('skuSellerId')) {
                obj['skuSellerId'] = ApiClient.convertToType(data['skuSellerId'], 'String');
            }
            if (data.hasOwnProperty('stock')) {
                obj['stock'] = ApiClient.convertToType(data['stock'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = ApiClient.convertToType(data['videos'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Product</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Product</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Product.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                ProductAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          Dimensions.validateJSON(data['dimensions']);
        }
        // validate the optional field `giftWrap`
        if (data['giftWrap']) { // data not null
          GiftWrap.validateJSON(data['giftWrap']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['gtin'])) {
            throw new Error("Expected the field `gtin` to be an array in the JSON data but got " + data['gtin']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['images'])) {
            throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          ProductPrice.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['productGroupId'] && !(typeof data['productGroupId'] === 'string' || data['productGroupId'] instanceof String)) {
            throw new Error("Expected the field `productGroupId` to be a primitive type in the JSON string but got " + data['productGroupId']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['skuSellerId'] && !(typeof data['skuSellerId'] === 'string' || data['skuSellerId'] instanceof String)) {
            throw new Error("Expected the field `skuSellerId` to be a primitive type in the JSON string but got " + data['skuSellerId']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['videos'])) {
            throw new Error("Expected the field `videos` to be an array in the JSON data but got " + data['videos']);
        }

        return true;
    }


}

Product.RequiredProperties = ["attributes", "brand", "categories", "description", "images", "price", "skuSellerId", "stock", "title"];

/**
 * List of `key` `value` attributes of this product. This is very important for search and SEO optmization. Include all relevant information
 * @member {Array.<module:model/ProductAttribute>} attributes
 */
Product.prototype['attributes'] = undefined;

/**
 * Brand name
 * @member {String} brand
 */
Product.prototype['brand'] = undefined;

/**
 * Array of categories associated with this product
 * @member {Array.<String>} categories
 */
Product.prototype['categories'] = undefined;

/**
 * Product description.
 * @member {String} description
 */
Product.prototype['description'] = undefined;

/**
 * @member {module:model/Dimensions} dimensions
 */
Product.prototype['dimensions'] = undefined;

/**
 * @member {module:model/GiftWrap} giftWrap
 */
Product.prototype['giftWrap'] = undefined;

/**
 * Array of product EAN and/or ISBN and/or ASIN codes
 * @member {Array.<String>} gtin
 */
Product.prototype['gtin'] = undefined;

/**
 * List of valid Product image URLs. HTTP or HTTPS are valid. HTTPS is prefered.
 * @member {Array.<String>} images
 */
Product.prototype['images'] = undefined;

/**
 * @member {module:model/ProductPrice} price
 */
Product.prototype['price'] = undefined;

/**
 * Unique Product Group ID. Products with the same `productGroupId` will be grouped and displayed as a unique entry. Use `productGroupId` to group diferent SKUs that represent diferent colors, sizes, capacities, etc..
 * @member {String} productGroupId
 */
Product.prototype['productGroupId'] = undefined;

/**
 * Brand Lovers Product ID. Use this to suggest a product association. This field is optional.
 * @member {String} productId
 */
Product.prototype['productId'] = undefined;

/**
 * Unique Product Id (SKU) in the seller system
 * @member {String} skuSellerId
 */
Product.prototype['skuSellerId'] = undefined;

/**
 * Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.
 * @member {Number} stock
 */
Product.prototype['stock'] = undefined;

/**
 * Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
 * @member {String} title
 */
Product.prototype['title'] = undefined;

/**
 * List of videos de URLs associated with this product. HTTP or HTTPS are valid. HTTPS is prefered.
 * @member {Array.<String>} videos
 */
Product.prototype['videos'] = undefined;






export default Product;

