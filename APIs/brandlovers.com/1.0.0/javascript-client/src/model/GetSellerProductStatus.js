/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';
import ProductPrice from './ProductPrice';

/**
 * The GetSellerProductStatus model module.
 * @module model/GetSellerProductStatus
 * @version 1.0.0
 */
class GetSellerProductStatus {
    /**
     * Constructs a new <code>GetSellerProductStatus</code>.
     * @alias module:model/GetSellerProductStatus
     * @param price {module:model/ProductPrice} 
     * @param skuSellerId {String} Unique Product Id (SKU) in the seller system.
     * @param status {String} Product status in the marketplace
     * @param stock {Number} Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.
     */
    constructor(price, skuSellerId, status, stock) { 
        
        GetSellerProductStatus.initialize(this, price, skuSellerId, status, stock);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, price, skuSellerId, status, stock) { 
        obj['price'] = price;
        obj['skuSellerId'] = skuSellerId;
        obj['status'] = status;
        obj['stock'] = stock;
    }

    /**
     * Constructs a <code>GetSellerProductStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetSellerProductStatus} obj Optional instance to populate.
     * @return {module:model/GetSellerProductStatus} The populated <code>GetSellerProductStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetSellerProductStatus();

            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ProductPrice.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('skuSellerId')) {
                obj['skuSellerId'] = ApiClient.convertToType(data['skuSellerId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('stock')) {
                obj['stock'] = ApiClient.convertToType(data['stock'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetSellerProductStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetSellerProductStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetSellerProductStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          ProductPrice.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['skuSellerId'] && !(typeof data['skuSellerId'] === 'string' || data['skuSellerId'] instanceof String)) {
            throw new Error("Expected the field `skuSellerId` to be a primitive type in the JSON string but got " + data['skuSellerId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

GetSellerProductStatus.RequiredProperties = ["price", "skuSellerId", "status", "stock"];

/**
 * @member {Array.<module:model/Error>} errors
 */
GetSellerProductStatus.prototype['errors'] = undefined;

/**
 * @member {module:model/ProductPrice} price
 */
GetSellerProductStatus.prototype['price'] = undefined;

/**
 * Unique Product Id (SKU) in the seller system.
 * @member {String} skuSellerId
 */
GetSellerProductStatus.prototype['skuSellerId'] = undefined;

/**
 * Product status in the marketplace
 * @member {String} status
 */
GetSellerProductStatus.prototype['status'] = undefined;

/**
 * Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.
 * @member {Number} stock
 */
GetSellerProductStatus.prototype['stock'] = undefined;






export default GetSellerProductStatus;

