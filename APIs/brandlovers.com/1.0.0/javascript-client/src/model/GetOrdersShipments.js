/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';
import OrderShippmentStatus from './OrderShippmentStatus';

/**
 * The GetOrdersShipments model module.
 * @module model/GetOrdersShipments
 * @version 1.0.0
 */
class GetOrdersShipments {
    /**
     * Constructs a new <code>GetOrdersShipments</code>.
     * @alias module:model/GetOrdersShipments
     */
    constructor() { 
        
        GetOrdersShipments.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetOrdersShipments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetOrdersShipments} obj Optional instance to populate.
     * @return {module:model/GetOrdersShipments} The populated <code>GetOrdersShipments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetOrdersShipments();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadata]);
            }
            if (data.hasOwnProperty('shipments')) {
                obj['shipments'] = ApiClient.convertToType(data['shipments'], [OrderShippmentStatus]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetOrdersShipments</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetOrdersShipments</code>.
     */
    static validateJSON(data) {
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                Metadata.validateJSON(item);
            };
        }
        if (data['shipments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shipments'])) {
                throw new Error("Expected the field `shipments` to be an array in the JSON data but got " + data['shipments']);
            }
            // validate the optional field `shipments` (array)
            for (const item of data['shipments']) {
                OrderShippmentStatus.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Response payload
 * @member {Array.<module:model/Metadata>} metadata
 */
GetOrdersShipments.prototype['metadata'] = undefined;

/**
 * Order Shippment Status
 * @member {Array.<module:model/OrderShippmentStatus>} shipments
 */
GetOrdersShipments.prototype['shipments'] = undefined;






export default GetOrdersShipments;

