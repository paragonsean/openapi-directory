/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Customer from './Customer';
import Freight from './Freight';
import OrderItem from './OrderItem';
import Seller from './Seller';
import Shippment from './Shippment';

/**
 * The Order model module.
 * @module model/Order
 * @version 1.0.0
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * @alias module:model/Order
     * @param billingAddress {module:model/Address} 
     * @param createdAt {Date} Date that this order was created
     * @param customer {module:model/Customer} 
     * @param freight {module:model/Freight} 
     * @param items {Array.<module:model/OrderItem>} 
     * @param orderId {String} Unique order Id (related to this seller)
     * @param orderMarketplaceId {String} Unique Order Id that will be displayed to the customer. This Id is not the same as `orderId`
     * @param shipments {Array.<module:model/Shippment>} 
     * @param shippingAddress {module:model/Address} 
     * @param status {String} Order status
     * @param totalAmount {Number} Order total in cents, this is what the customer will be charged for. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
     * @param totalDiscountAmount {Number} Total order discounts in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
     * @param totalItemsAmount {Number} Order items total amount in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
     * @param totalShippingAmount {Number} Total shipments amount items. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
     * @param updatedAt {Date} Last update data of this order
     */
    constructor(billingAddress, createdAt, customer, freight, items, orderId, orderMarketplaceId, shipments, shippingAddress, status, totalAmount, totalDiscountAmount, totalItemsAmount, totalShippingAmount, updatedAt) { 
        
        Order.initialize(this, billingAddress, createdAt, customer, freight, items, orderId, orderMarketplaceId, shipments, shippingAddress, status, totalAmount, totalDiscountAmount, totalItemsAmount, totalShippingAmount, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, billingAddress, createdAt, customer, freight, items, orderId, orderMarketplaceId, shipments, shippingAddress, status, totalAmount, totalDiscountAmount, totalItemsAmount, totalShippingAmount, updatedAt) { 
        obj['billingAddress'] = billingAddress;
        obj['createdAt'] = createdAt;
        obj['customer'] = customer;
        obj['freight'] = freight;
        obj['items'] = items;
        obj['orderId'] = orderId;
        obj['orderMarketplaceId'] = orderMarketplaceId;
        obj['shipments'] = shipments;
        obj['shippingAddress'] = shippingAddress;
        obj['status'] = status;
        obj['totalAmount'] = totalAmount;
        obj['totalDiscountAmount'] = totalDiscountAmount;
        obj['totalItemsAmount'] = totalItemsAmount;
        obj['totalShippingAmount'] = totalShippingAmount;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('approvedAt')) {
                obj['approvedAt'] = ApiClient.convertToType(data['approvedAt'], 'Date');
            }
            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = Address.constructFromObject(data['billingAddress']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = Customer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('freight')) {
                obj['freight'] = Freight.constructFromObject(data['freight']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrderItem]);
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('orderMarketplaceId')) {
                obj['orderMarketplaceId'] = ApiClient.convertToType(data['orderMarketplaceId'], 'String');
            }
            if (data.hasOwnProperty('seller')) {
                obj['seller'] = Seller.constructFromObject(data['seller']);
            }
            if (data.hasOwnProperty('shipments')) {
                obj['shipments'] = ApiClient.convertToType(data['shipments'], [Shippment]);
            }
            if (data.hasOwnProperty('shippingAddress')) {
                obj['shippingAddress'] = Address.constructFromObject(data['shippingAddress']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('totalAmount')) {
                obj['totalAmount'] = ApiClient.convertToType(data['totalAmount'], 'Number');
            }
            if (data.hasOwnProperty('totalDiscountAmount')) {
                obj['totalDiscountAmount'] = ApiClient.convertToType(data['totalDiscountAmount'], 'Number');
            }
            if (data.hasOwnProperty('totalItemsAmount')) {
                obj['totalItemsAmount'] = ApiClient.convertToType(data['totalItemsAmount'], 'Number');
            }
            if (data.hasOwnProperty('totalShippingAmount')) {
                obj['totalShippingAmount'] = ApiClient.convertToType(data['totalShippingAmount'], 'Number');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Order.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billingAddress`
        if (data['billingAddress']) { // data not null
          Address.validateJSON(data['billingAddress']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          Customer.validateJSON(data['customer']);
        }
        // validate the optional field `freight`
        if (data['freight']) { // data not null
          Freight.validateJSON(data['freight']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                OrderItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['orderMarketplaceId'] && !(typeof data['orderMarketplaceId'] === 'string' || data['orderMarketplaceId'] instanceof String)) {
            throw new Error("Expected the field `orderMarketplaceId` to be a primitive type in the JSON string but got " + data['orderMarketplaceId']);
        }
        // validate the optional field `seller`
        if (data['seller']) { // data not null
          Seller.validateJSON(data['seller']);
        }
        if (data['shipments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shipments'])) {
                throw new Error("Expected the field `shipments` to be an array in the JSON data but got " + data['shipments']);
            }
            // validate the optional field `shipments` (array)
            for (const item of data['shipments']) {
                Shippment.validateJSON(item);
            };
        }
        // validate the optional field `shippingAddress`
        if (data['shippingAddress']) { // data not null
          Address.validateJSON(data['shippingAddress']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Order.RequiredProperties = ["billingAddress", "createdAt", "customer", "freight", "items", "orderId", "orderMarketplaceId", "shipments", "shippingAddress", "status", "totalAmount", "totalDiscountAmount", "totalItemsAmount", "totalShippingAmount", "updatedAt"];

/**
 * Date that this order was approved for fullfilment
 * @member {Date} approvedAt
 */
Order.prototype['approvedAt'] = undefined;

/**
 * @member {module:model/Address} billingAddress
 */
Order.prototype['billingAddress'] = undefined;

/**
 * Date that this order was created
 * @member {Date} createdAt
 */
Order.prototype['createdAt'] = undefined;

/**
 * @member {module:model/Customer} customer
 */
Order.prototype['customer'] = undefined;

/**
 * @member {module:model/Freight} freight
 */
Order.prototype['freight'] = undefined;

/**
 * @member {Array.<module:model/OrderItem>} items
 */
Order.prototype['items'] = undefined;

/**
 * Unique order Id (related to this seller)
 * @member {String} orderId
 */
Order.prototype['orderId'] = undefined;

/**
 * Unique Order Id that will be displayed to the customer. This Id is not the same as `orderId`
 * @member {String} orderMarketplaceId
 */
Order.prototype['orderMarketplaceId'] = undefined;

/**
 * @member {module:model/Seller} seller
 */
Order.prototype['seller'] = undefined;

/**
 * @member {Array.<module:model/Shippment>} shipments
 */
Order.prototype['shipments'] = undefined;

/**
 * @member {module:model/Address} shippingAddress
 */
Order.prototype['shippingAddress'] = undefined;

/**
 * Order status
 * @member {String} status
 */
Order.prototype['status'] = undefined;

/**
 * Order total in cents, this is what the customer will be charged for. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
 * @member {Number} totalAmount
 */
Order.prototype['totalAmount'] = undefined;

/**
 * Total order discounts in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
 * @member {Number} totalDiscountAmount
 */
Order.prototype['totalDiscountAmount'] = undefined;

/**
 * Order items total amount in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
 * @member {Number} totalItemsAmount
 */
Order.prototype['totalItemsAmount'] = undefined;

/**
 * Total shipments amount items. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
 * @member {Number} totalShippingAmount
 */
Order.prototype['totalShippingAmount'] = undefined;

/**
 * Last update data of this order
 * @member {Date} updatedAt
 */
Order.prototype['updatedAt'] = undefined;






export default Order;

