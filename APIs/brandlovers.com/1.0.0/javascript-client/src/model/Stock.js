/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Stock model module.
 * @module model/Stock
 * @version 1.0.0
 */
class Stock {
    /**
     * Constructs a new <code>Stock</code>.
     * @alias module:model/Stock
     * @param quantity {Number} Stock available
     */
    constructor(quantity) { 
        
        Stock.initialize(this, quantity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, quantity) { 
        obj['quantity'] = quantity;
    }

    /**
     * Constructs a <code>Stock</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Stock} obj Optional instance to populate.
     * @return {module:model/Stock} The populated <code>Stock</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Stock();

            if (data.hasOwnProperty('crossDockingTime')) {
                obj['crossDockingTime'] = ApiClient.convertToType(data['crossDockingTime'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Stock</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Stock</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Stock.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Stock.RequiredProperties = ["quantity"];

/**
 * Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer
 * @member {Number} crossDockingTime
 */
Stock.prototype['crossDockingTime'] = undefined;

/**
 * Stock available
 * @member {Number} quantity
 */
Stock.prototype['quantity'] = undefined;






export default Stock;

