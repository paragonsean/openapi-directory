/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Courier from './Courier';
import Invoice from './Invoice';

/**
 * The Newshipmentstatus model module.
 * @module model/Newshipmentstatus
 * @version 1.0.0
 */
class Newshipmentstatus {
    /**
     * Constructs a new <code>Newshipmentstatus</code>.
     * @alias module:model/Newshipmentstatus
     * @param courier {module:model/Courier} 
     * @param invoice {module:model/Invoice} 
     * @param items {Array.<String>} List of Order IDs of this items from this order that will be updated in this shipment
     * @param occurredAt {Date} Data da ocorrência
     * @param sellerShipmentId {String} Unique Seller shipment Id. This must be unique across all orders and shipmnents
     */
    constructor(courier, invoice, items, occurredAt, sellerShipmentId) { 
        
        Newshipmentstatus.initialize(this, courier, invoice, items, occurredAt, sellerShipmentId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, courier, invoice, items, occurredAt, sellerShipmentId) { 
        obj['courier'] = courier;
        obj['invoice'] = invoice;
        obj['items'] = items;
        obj['occurredAt'] = occurredAt;
        obj['sellerShipmentId'] = sellerShipmentId;
    }

    /**
     * Constructs a <code>Newshipmentstatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Newshipmentstatus} obj Optional instance to populate.
     * @return {module:model/Newshipmentstatus} The populated <code>Newshipmentstatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Newshipmentstatus();

            if (data.hasOwnProperty('courier')) {
                obj['courier'] = Courier.constructFromObject(data['courier']);
            }
            if (data.hasOwnProperty('cte')) {
                obj['cte'] = ApiClient.convertToType(data['cte'], 'String');
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = Invoice.constructFromObject(data['invoice']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], ['String']);
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('occurredAt')) {
                obj['occurredAt'] = ApiClient.convertToType(data['occurredAt'], 'Date');
            }
            if (data.hasOwnProperty('sellerShipmentId')) {
                obj['sellerShipmentId'] = ApiClient.convertToType(data['sellerShipmentId'], 'String');
            }
            if (data.hasOwnProperty('trackingUrl')) {
                obj['trackingUrl'] = ApiClient.convertToType(data['trackingUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Newshipmentstatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Newshipmentstatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Newshipmentstatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `courier`
        if (data['courier']) { // data not null
          Courier.validateJSON(data['courier']);
        }
        // ensure the json data is a string
        if (data['cte'] && !(typeof data['cte'] === 'string' || data['cte'] instanceof String)) {
            throw new Error("Expected the field `cte` to be a primitive type in the JSON string but got " + data['cte']);
        }
        // validate the optional field `invoice`
        if (data['invoice']) { // data not null
          Invoice.validateJSON(data['invoice']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['items'])) {
            throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['sellerShipmentId'] && !(typeof data['sellerShipmentId'] === 'string' || data['sellerShipmentId'] instanceof String)) {
            throw new Error("Expected the field `sellerShipmentId` to be a primitive type in the JSON string but got " + data['sellerShipmentId']);
        }
        // ensure the json data is a string
        if (data['trackingUrl'] && !(typeof data['trackingUrl'] === 'string' || data['trackingUrl'] instanceof String)) {
            throw new Error("Expected the field `trackingUrl` to be a primitive type in the JSON string but got " + data['trackingUrl']);
        }

        return true;
    }


}

Newshipmentstatus.RequiredProperties = ["courier", "invoice", "items", "occurredAt", "sellerShipmentId"];

/**
 * @member {module:model/Courier} courier
 */
Newshipmentstatus.prototype['courier'] = undefined;

/**
 * Conhecimento do Transporte Eletrônico
 * @member {String} cte
 */
Newshipmentstatus.prototype['cte'] = undefined;

/**
 * @member {module:model/Invoice} invoice
 */
Newshipmentstatus.prototype['invoice'] = undefined;

/**
 * List of Order IDs of this items from this order that will be updated in this shipment
 * @member {Array.<String>} items
 */
Newshipmentstatus.prototype['items'] = undefined;

/**
 * Unique id shipment Id in the courier system
 * @member {String} number
 */
Newshipmentstatus.prototype['number'] = undefined;

/**
 * Data da ocorrência
 * @member {Date} occurredAt
 */
Newshipmentstatus.prototype['occurredAt'] = undefined;

/**
 * Unique Seller shipment Id. This must be unique across all orders and shipmnents
 * @member {String} sellerShipmentId
 */
Newshipmentstatus.prototype['sellerShipmentId'] = undefined;

/**
 * Courier tracking URL
 * @member {String} trackingUrl
 */
Newshipmentstatus.prototype['trackingUrl'] = undefined;






export default Newshipmentstatus;

