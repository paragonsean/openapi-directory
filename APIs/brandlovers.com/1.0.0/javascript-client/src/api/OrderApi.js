/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NewTrackingRefund from '../model/NewTrackingRefund';
import Newshipmentstatus from '../model/Newshipmentstatus';
import Order from '../model/Order';

/**
* Order service.
* @module api/OrderApi
* @version 1.0.0
*/
export default class OrderApi {

    /**
    * Constructs a new OrderApi. 
    * @alias module:api/OrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the orderOrderIdGet operation.
     * @callback module:api/OrderApi~orderOrderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all details of a order
     * Returns all details of a single order, including last status, items shipped or not.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} orderId Unique Id of this order.
     * @param {module:api/OrderApi~orderOrderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    orderOrderIdGet(authorization, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling orderOrderIdGet");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderOrderIdGet");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/order/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrderIdShipmentCancelPost operation.
     * @callback module:api/OrderApi~orderOrderIdShipmentCancelPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm shipment canceletion (when requested by the customer) or failure to deliver
     * Confirm shipment canceletion (when requested by the customer) or failure to deliver one shipment
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} orderId Unique Order Id
     * @param {module:model/NewTrackingRefund} body 
     * @param {module:api/OrderApi~orderOrderIdShipmentCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orderOrderIdShipmentCancelPost(authorization, orderId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling orderOrderIdShipmentCancelPost");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderOrderIdShipmentCancelPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orderOrderIdShipmentCancelPost");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/order/{orderId}/shipment/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrderIdShipmentDeliveredPost operation.
     * @callback module:api/OrderApi~orderOrderIdShipmentDeliveredPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirms that a shipment was delivered
     * Confirms that a shipment was delivered. Must inform quantity of successfully deliverd items even if items deliverd was less than the original order
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} orderId Unique Order Id
     * @param {module:model/Newshipmentstatus} body 
     * @param {module:api/OrderApi~orderOrderIdShipmentDeliveredPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orderOrderIdShipmentDeliveredPost(authorization, orderId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling orderOrderIdShipmentDeliveredPost");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderOrderIdShipmentDeliveredPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orderOrderIdShipmentDeliveredPost");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/order/{orderId}/shipment/delivered', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrderIdShipmentExchangePost operation.
     * @callback module:api/OrderApi~orderOrderIdShipmentExchangePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm item exchange
     * This enpoint to confirm item exchange when failure to deliver or requested by the customer. All customer requests are tracket via trouble tickets
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} orderId Unique Order Id
     * @param {module:model/NewTrackingRefund} body 
     * @param {module:api/OrderApi~orderOrderIdShipmentExchangePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orderOrderIdShipmentExchangePost(authorization, orderId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling orderOrderIdShipmentExchangePost");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderOrderIdShipmentExchangePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orderOrderIdShipmentExchangePost");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/order/{orderId}/shipment/exchange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrderIdShipmentReturnPost operation.
     * @callback module:api/OrderApi~orderOrderIdShipmentReturnPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm order item return and refund
     * Use this endpoint to return and refund items froma a order. In order to fully return an order list all items and applicate quantity.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} orderId Order unique Id
     * @param {module:model/NewTrackingRefund} body 
     * @param {module:api/OrderApi~orderOrderIdShipmentReturnPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orderOrderIdShipmentReturnPost(authorization, orderId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling orderOrderIdShipmentReturnPost");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderOrderIdShipmentReturnPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orderOrderIdShipmentReturnPost");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/order/{orderId}/shipment/return', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrderIdShipmentSentPost operation.
     * @callback module:api/OrderApi~orderOrderIdShipmentSentPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update new order to include shipment information
     * Updates order to include shipment shiped information. This endpoint can be used to include a single or multiple shipments for any give order. In order to inform that all items of a order where shipped list all of them, including applicable quantities in the payload.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} orderId Unique Order Id
     * @param {module:model/Newshipmentstatus} body 
     * @param {module:api/OrderApi~orderOrderIdShipmentSentPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orderOrderIdShipmentSentPost(authorization, orderId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling orderOrderIdShipmentSentPost");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderOrderIdShipmentSentPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orderOrderIdShipmentSentPost");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/order/{orderId}/shipment/sent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
