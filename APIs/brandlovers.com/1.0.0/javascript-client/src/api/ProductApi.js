/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetProduct from '../model/GetProduct';
import Product from '../model/Product';
import ProductPrice from '../model/ProductPrice';
import SellerItemStatus from '../model/SellerItemStatus';
import Stock from '../model/Stock';

/**
* Product service.
* @module api/ProductApi
* @version 1.0.0
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi. 
    * @alias module:api/ProductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productPost operation.
     * @callback module:api/ProductApi~productPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product to the marketplace
     * Use this enpoint to create a single new product to the Marketplace. This enpoint expects a json document with one product. If you whant to upload multiple products in a single API call use POST /products method. The server will load each product as an individual item that can be manipulated using your own `skuSellerId`. This system is idenpontent, this means that once a `skuSellerId` is created it cannot be re-created using this tool. In order to update, edit a product use the PUT method with the correct reference to your `skuSellerId`
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {module:model/Product} product New Produt that will be create
     * @param {module:api/ProductApi~productPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productPost(authorization, product, callback) {
      let postBody = product;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productPost");
      }
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling productPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/product', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productSkuSellerIdGet operation.
     * @callback module:api/ProductApi~productSkuSellerIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of a single product using the seller `skuSellerId`
     * Returns detailed information of a single product with the seller `skuSellerId`. This service will return a json document with product detail, status, price, invetory among other infomarion availble in the Brand Lovers marketplace
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} skuSellerId SKU ID do Lojista.
     * @param {module:api/ProductApi~productSkuSellerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProduct}
     */
    productSkuSellerIdGet(authorization, skuSellerId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productSkuSellerIdGet");
      }
      // verify the required parameter 'skuSellerId' is set
      if (skuSellerId === undefined || skuSellerId === null) {
        throw new Error("Missing the required parameter 'skuSellerId' when calling productSkuSellerIdGet");
      }

      let pathParams = {
        'skuSellerId': skuSellerId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProduct;
      return this.apiClient.callApi(
        '/product/{skuSellerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productSkuSellerIdPricesPut operation.
     * @callback module:api/ProductApi~productSkuSellerIdPricesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows seller to update prices of a single SKU
     * Allows seller to set the SKU prices (MSRP and/or offer price). All prices must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} skuSellerId Product SKU
     * @param {module:model/ProductPrice} body JSON document with the SKU price
     * @param {module:api/ProductApi~productSkuSellerIdPricesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productSkuSellerIdPricesPut(authorization, skuSellerId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productSkuSellerIdPricesPut");
      }
      // verify the required parameter 'skuSellerId' is set
      if (skuSellerId === undefined || skuSellerId === null) {
        throw new Error("Missing the required parameter 'skuSellerId' when calling productSkuSellerIdPricesPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productSkuSellerIdPricesPut");
      }

      let pathParams = {
        'skuSellerId': skuSellerId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/product/{skuSellerId}/prices', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productSkuSellerIdStatusPut operation.
     * @callback module:api/ProductApi~productSkuSellerIdStatusPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable/disable a single product in the Marketplace
     * Update product status in the Marketplace. Set to `true` to enable, `false` to disable sale.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} skuSellerId Unique Product Id (SKU) in the seller system
     * @param {module:model/SellerItemStatus} body Seller SKU that will be enabled or disabled
     * @param {module:api/ProductApi~productSkuSellerIdStatusPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productSkuSellerIdStatusPut(authorization, skuSellerId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productSkuSellerIdStatusPut");
      }
      // verify the required parameter 'skuSellerId' is set
      if (skuSellerId === undefined || skuSellerId === null) {
        throw new Error("Missing the required parameter 'skuSellerId' when calling productSkuSellerIdStatusPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productSkuSellerIdStatusPut");
      }

      let pathParams = {
        'skuSellerId': skuSellerId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/product/{skuSellerId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productSkuSellerIdStockPut operation.
     * @callback module:api/ProductApi~productSkuSellerIdStockPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single product stock
     * Update a single product inventory information. Products with zero stock will not be eligible for sale.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} skuSellerId Unique Product Id (SKU) in the seller system that will be updated
     * @param {module:model/Stock} body New product inventory information
     * @param {module:api/ProductApi~productSkuSellerIdStockPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productSkuSellerIdStockPut(authorization, skuSellerId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productSkuSellerIdStockPut");
      }
      // verify the required parameter 'skuSellerId' is set
      if (skuSellerId === undefined || skuSellerId === null) {
        throw new Error("Missing the required parameter 'skuSellerId' when calling productSkuSellerIdStockPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productSkuSellerIdStockPut");
      }

      let pathParams = {
        'skuSellerId': skuSellerId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/product/{skuSellerId}/stock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
