/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetOrders from '../model/GetOrders';
import GetOrdersShipments from '../model/GetOrdersShipments';
import OrdersShipments from '../model/OrdersShipments';

/**
* Orders service.
* @module api/OrdersApi
* @version 1.0.0
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ordersGet operation.
     * @callback module:api/OrdersApi~ordersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns orders details
     * Retuns a list of orders associated with this seller. The list is ordered by dateCreated.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/OrdersApi~ordersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrders}
     */
    ordersGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrders;
      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersShipmentsDeliveredGet operation.
     * @callback module:api/OrdersApi~ordersShipmentsDeliveredGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrdersShipments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of shipments
     * Returns list of shipments. By default this will return list of the last shipments ordered by dateCreated, folowed by last update date.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {String} [status] Query by shippment status.
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/OrdersApi~ordersShipmentsDeliveredGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrdersShipments}
     */
    ordersShipmentsDeliveredGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersShipmentsDeliveredGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrdersShipments;
      return this.apiClient.callApi(
        '/orders/shipments/delivered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersShipmentsDeliveredPost operation.
     * @callback module:api/OrdersApi~ordersShipmentsDeliveredPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update of order shipments
     * Bulk update of order shipments status. This alows to inform multiple shipments status
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {module:model/OrdersShipments} ordersshipments JSON body with list of shipments to be updated.
     * @param {module:api/OrdersApi~ordersShipmentsDeliveredPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ordersShipmentsDeliveredPost(authorization, ordersshipments, callback) {
      let postBody = ordersshipments;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersShipmentsDeliveredPost");
      }
      // verify the required parameter 'ordersshipments' is set
      if (ordersshipments === undefined || ordersshipments === null) {
        throw new Error("Missing the required parameter 'ordersshipments' when calling ordersShipmentsDeliveredPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/shipments/delivered', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersShipmentsShippedGet operation.
     * @callback module:api/OrdersApi~ordersShipmentsShippedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrdersShipments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of shipments shipped
     * Returns a list of shipments shipped. By Default returns items ordered by dateCreated folowed by last update
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Product status.
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/OrdersApi~ordersShipmentsShippedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrdersShipments}
     */
    ordersShipmentsShippedGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersShipmentsShippedGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrdersShipments;
      return this.apiClient.callApi(
        '/orders/shipments/shipped', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersShipmentsShippedPost operation.
     * @callback module:api/OrdersApi~ordersShipmentsShippedPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update of order shipments
     * Allows bulk updates of orders shippments.
     * @param {module:model/OrdersShipments} ordersshipments JSON payload with list of shippments of orders.
     * @param {module:api/OrdersApi~ordersShipmentsShippedPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ordersShipmentsShippedPost(ordersshipments, callback) {
      let postBody = ordersshipments;
      // verify the required parameter 'ordersshipments' is set
      if (ordersshipments === undefined || ordersshipments === null) {
        throw new Error("Missing the required parameter 'ordersshipments' when calling ordersShipmentsShippedPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/shipments/shipped', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersStatusApprovedGet operation.
     * @callback module:api/OrdersApi~ordersStatusApprovedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return list of approved orders
     * Returns a list of approved orders. Orders in the `approved` state must be fullfiled imediadetelly.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number or items to return when executing query. Defaults to 100, max 200. Use this in conjuction with `offset` to paginate across the results.
     * @param {module:api/OrdersApi~ordersStatusApprovedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrders}
     */
    ordersStatusApprovedGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersStatusApprovedGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrders;
      return this.apiClient.callApi(
        '/orders/status/approved', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersStatusCanceledGet operation.
     * @callback module:api/OrdersApi~ordersStatusCanceledGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns lists of canceled orders
     * Returns a list with canceled orders. Canceled orders should not be fullfiled.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit = 100)] Number or items to return when executing query. Default 100, max 250. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/OrdersApi~ordersStatusCanceledGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrders}
     */
    ordersStatusCanceledGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersStatusCanceledGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrders;
      return this.apiClient.callApi(
        '/orders/status/canceled', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersStatusDeliveredGet operation.
     * @callback module:api/OrdersApi~ordersStatusDeliveredGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of orders successfully delivered associated with this seller.
     * Returns a list of orders successfully delivered associated with this seller.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/OrdersApi~ordersStatusDeliveredGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrders}
     */
    ordersStatusDeliveredGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersStatusDeliveredGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrders;
      return this.apiClient.callApi(
        '/orders/status/delivered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersStatusNewGet operation.
     * @callback module:api/OrdersApi~ordersStatusNewGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of orders flagged as new.
     * Returns a list of orders flagged as new. New orders should not be fullfiled until marketplace flags them as approved.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit = 100)] Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/OrdersApi~ordersStatusNewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrders}
     */
    ordersStatusNewGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersStatusNewGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrders;
      return this.apiClient.callApi(
        '/orders/status/new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersStatusPartiallyDeliveredGet operation.
     * @callback module:api/OrdersApi~ordersStatusPartiallyDeliveredGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of partially deliverd orders
     * Returns a list of partially deliverd orders. This is a list of orders with items shipped but with not all items ackwlodged as deliverd
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit = 100)] Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/OrdersApi~ordersStatusPartiallyDeliveredGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrders}
     */
    ordersStatusPartiallyDeliveredGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersStatusPartiallyDeliveredGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrders;
      return this.apiClient.callApi(
        '/orders/status/partiallyDelivered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersStatusPartiallySentGet operation.
     * @callback module:api/OrdersApi~ordersStatusPartiallySentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of orders partially fullfiled
     * Returns a list of orders that contain one (or more) items that where not shipped. This will list the entire order as well the items with peding shipment. Use this service to track orders that need to be fullfiled.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number or items to return when executing query. Defaults to 100. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/OrdersApi~ordersStatusPartiallySentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrders}
     */
    ordersStatusPartiallySentGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersStatusPartiallySentGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrders;
      return this.apiClient.callApi(
        '/orders/status/partiallySent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersStatusSentGet operation.
     * @callback module:api/OrdersApi~ordersStatusSentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list with orders fully sent
     * Returns a list with orders completely fullfiled, this means orders with all items sent. Orders will ordered by dateCreated fowllowed by last update
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/OrdersApi~ordersStatusSentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrders}
     */
    ordersStatusSentGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ordersStatusSentGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrders;
      return this.apiClient.callApi(
        '/orders/status/sent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
