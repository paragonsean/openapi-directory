/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetTicketMessages from '../model/GetTicketMessages';
import GetTickets from '../model/GetTickets';
import NewTicket from '../model/NewTicket';
import NewTicketMessage from '../model/NewTicketMessage';
import TicketStatus from '../model/TicketStatus';

/**
* Tickets service.
* @module api/TicketsApi
* @version 1.0.0
*/
export default class TicketsApi {

    /**
    * Constructs a new TicketsApi. 
    * @alias module:api/TicketsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ticketPost operation.
     * @callback module:api/TicketsApi~ticketPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new trouble ticket
     * Use this service to create a new trouble ticket. Use this to include relevant information about the order, comunicate with the customer or marketplace team. Whenever possible message will be pushed to Mobile first. This is the primary mean of comunicaiton with the customer regarding orders, shippments, shippments status. New tickets will be automatically be set to 'OPEN'. Trouble tickets need to be associated with a orderId or customer. New tickets can optionally include a new message.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {module:model/NewTicket} newTicket JSON object with new trouble ticket
     * @param {module:api/TicketsApi~ticketPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ticketPost(authorization, newTicket, callback) {
      let postBody = newTicket;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ticketPost");
      }
      // verify the required parameter 'newTicket' is set
      if (newTicket === undefined || newTicket === null) {
        throw new Error("Missing the required parameter 'newTicket' when calling ticketPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ticket', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ticketTicketIdMessagePost operation.
     * @callback module:api/TicketsApi~ticketTicketIdMessagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new message to trouble ticket
     * Add a new message to this trouble ticket. Messages can be `CUSTOMER` (customer will be able to see it) or `INTERNAL`.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} ticketId Trouble ticket ID.
     * @param {module:model/NewTicketMessage} message New message object to append to trouble ticket.
     * @param {module:api/TicketsApi~ticketTicketIdMessagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ticketTicketIdMessagePost(authorization, ticketId, message, callback) {
      let postBody = message;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ticketTicketIdMessagePost");
      }
      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling ticketTicketIdMessagePost");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling ticketTicketIdMessagePost");
      }

      let pathParams = {
        'ticketId': ticketId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ticket/{ticketId}/message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ticketTicketIdMessagesGet operation.
     * @callback module:api/TicketsApi~ticketTicketIdMessagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTicketMessages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get trouble ticket messages
     * Returns trouble ticket history with all messages exchanged. Only tickets related to your seller will be returned. Attempt to read other tickets will return 403 (acess denied).
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} ticketId Trouble ticket ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/TicketsApi~ticketTicketIdMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTicketMessages}
     */
    ticketTicketIdMessagesGet(authorization, ticketId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ticketTicketIdMessagesGet");
      }
      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling ticketTicketIdMessagesGet");
      }

      let pathParams = {
        'ticketId': ticketId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTicketMessages;
      return this.apiClient.callApi(
        '/ticket/{ticketId}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ticketTicketIdStatusPut operation.
     * @callback module:api/TicketsApi~ticketTicketIdStatusPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update trouble ticket status
     * Alows the seller to update the status of a trouble ticket
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} ticketId Trouble ticket unique identification
     * @param {module:model/TicketStatus} body New trouble ticket status
     * @param {module:api/TicketsApi~ticketTicketIdStatusPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ticketTicketIdStatusPut(authorization, ticketId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ticketTicketIdStatusPut");
      }
      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling ticketTicketIdStatusPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ticketTicketIdStatusPut");
      }

      let pathParams = {
        'ticketId': ticketId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ticket/{ticketId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ticketsGet operation.
     * @callback module:api/TicketsApi~ticketsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTickets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customers trouble tickets
     * Allows seller to receive and status, queries, requests and complaints from customers. As well related messages
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Query by trouble ticket status
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/TicketsApi~ticketsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTickets}
     */
    ticketsGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling ticketsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTickets;
      return this.apiClient.callApi(
        '/tickets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
