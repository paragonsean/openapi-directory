/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetProductsResponse from '../model/GetProductsResponse';
import GetProductsStatusSelling from '../model/GetProductsStatusSelling';
import GetSellerProductsStatus from '../model/GetSellerProductsStatus';
import Product from '../model/Product';
import ProductStatusUpdate from '../model/ProductStatusUpdate';
import ProductStock from '../model/ProductStock';
import ProductUpdate from '../model/ProductUpdate';
import SellerItemPrices from '../model/SellerItemPrices';

/**
* Products service.
* @module api/ProductsApi
* @version 1.0.0
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productSkuSellerIdPut operation.
     * @callback module:api/ProductsApi~productSkuSellerIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product details
     * Update a single product information such as name, brand, attribute, dimension, etc. Please note that data from your request will be merged with existing data. This allows you to easliy update only certain fields without the need to re-inform the other unchanged fields. For example in order to update just the field `title` simply send just this field with new information, remaining fields will not be changed. In order to erase an item the field must be informed as its default value, for example in order to erase the `videos` field must be sent as videos:[]. The `skuSellerId` field is always mandatory in the path and in the product json Object.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {String} skuSellerId Unique Product Id (SKU) in the seller system that will be updated.
     * @param {module:model/ProductUpdate} body New product information.
     * @param {module:api/ProductsApi~productSkuSellerIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productSkuSellerIdPut(authorization, skuSellerId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productSkuSellerIdPut");
      }
      // verify the required parameter 'skuSellerId' is set
      if (skuSellerId === undefined || skuSellerId === null) {
        throw new Error("Missing the required parameter 'skuSellerId' when calling productSkuSellerIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productSkuSellerIdPut");
      }

      let pathParams = {
        'skuSellerId': skuSellerId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['authorization'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/product/{skuSellerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsGet operation.
     * @callback module:api/ProductsApi~productsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProductsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of products loaded into BrandLovers Marketplace
     * Get a list of my products loaded into the Marketplace. This dosen't means that products are eligible for sale, just that they are loaded in the database.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number of items to retun. Defaults to 100. Max alowed is 200. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/ProductsApi~productsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProductsResponse}
     */
    productsGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProductsResponse;
      return this.apiClient.callApi(
        '/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsPost operation.
     * @callback module:api/ProductsApi~productsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows new products from the seller to be loaded into the marketplace
     * This enpoint to creates new products in the Marketplace using `skuSellerId` as a primary key. This enpoint expects a json document with array of products. The server will load each product as an individual item that can be manipulated using your own `skuSellerId`. All requests to This endpoint are idenpontent with respect of the `skuSellerId`, this means that once a `skuSellerId` is created it cannot be re-created using this tool. In order to update use the PUT method with the correct `skuSellerId`. You can also use the POST /product to create a single product per request
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Array.<module:model/Product>} products JSON with a list of new products to be updloaded to the platform
     * @param {module:api/ProductsApi~productsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsPost(authorization, products, callback) {
      let postBody = products;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productsPost");
      }
      // verify the required parameter 'products' is set
      if (products === undefined || products === null) {
        throw new Error("Missing the required parameter 'products' when calling productsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsPricesPut operation.
     * @callback module:api/ProductsApi~productsPricesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows bulk update of product prices.
     * Allows bulk update of product prices. This endpoint expects a json document with an array of products with the `skuSellerId` and the new price. Server will process each new product update individually and will ackwlodge as much updates as possible, even if a single product update fails. After this request you can query product final status with GET /product/status
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Array.<module:model/SellerItemPrices>} body Data for bulk product price update
     * @param {module:api/ProductsApi~productsPricesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsPricesPut(authorization, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productsPricesPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productsPricesPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/prices', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsStatusGet operation.
     * @callback module:api/ProductsApi~productsStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerProductsStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns seller products status in the marketplace
     * Returns a list with seller products status. Please note that this endpoint will not return all details of each product, just the skuSellerId and status. Also please note that this endpoint will return 250 products per call. For full details of a given procuct use GET /product/{skuSellerId}
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number of items to return in this query. Defaults to 250. Maximum 1000. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/ProductsApi~productsStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerProductsStatus}
     */
    productsStatusGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productsStatusGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerProductsStatus;
      return this.apiClient.callApi(
        '/products/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsStatusPut operation.
     * @callback module:api/ProductsApi~productsStatusPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk enable/disable products in the marketplace
     * Bulk enable/disable products in the marketplace. This endpoint requires an array of objects with the seller SKU `skuSellerId` and boolean value that defines if the product is enabled or not for sale. This endpoint can be used to set a single product or many products.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Array.<module:model/ProductStatusUpdate>} body List of seller products with new status information
     * @param {module:api/ProductsApi~productsStatusPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsStatusPut(authorization, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productsStatusPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productsStatusPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsStatusSellingGet operation.
     * @callback module:api/ProductsApi~productsStatusSellingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProductsStatusSelling} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns products that are successfully listed for sale.
     * Returns products that are successfully listed for sale.
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with `limit` to paginate across the results.
     * @param {Number} [limit] Number or items to return when executing query. Defaults to 10. Use this conjuction with `offset` to paginate across the results.
     * @param {module:api/ProductsApi~productsStatusSellingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProductsStatusSelling}
     */
    productsStatusSellingGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productsStatusSellingGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProductsStatusSelling;
      return this.apiClient.callApi(
        '/products/status/selling', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsStocksPut operation.
     * @callback module:api/ProductsApi~productsStocksPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk product stock update
     * Bulk product stock update. This endpoint expect a array of products `skuSellerId` with new inventory data
     * @param {String} authorization Authorization token. The Authorization token can be found in your Admin console.
     * @param {Array.<module:model/ProductStock>} body Array of product SKUs.
     * @param {module:api/ProductsApi~productsStocksPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsStocksPut(authorization, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling productsStocksPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productsStocksPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/stocks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
