/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import ControlledStock from './model/ControlledStock';
import Courier from './model/Courier';
import Customer from './model/Customer';
import CustomerReference from './model/CustomerReference';
import Dimensions from './model/Dimensions';
import Error from './model/Error';
import Freight from './model/Freight';
import GetOrders from './model/GetOrders';
import GetOrdersShipments from './model/GetOrdersShipments';
import GetProduct from './model/GetProduct';
import GetProductsResponse from './model/GetProductsResponse';
import GetProductsStatusSelling from './model/GetProductsStatusSelling';
import GetSellerProductStatus from './model/GetSellerProductStatus';
import GetSellerProductsStatus from './model/GetSellerProductsStatus';
import GetTicketMessages from './model/GetTicketMessages';
import GetTickets from './model/GetTickets';
import GiftCard from './model/GiftCard';
import GiftWrap from './model/GiftWrap';
import Image from './model/Image';
import Invoice from './model/Invoice';
import Metadata from './model/Metadata';
import NewTicket from './model/NewTicket';
import NewTicketMessage from './model/NewTicketMessage';
import NewTrackingRefund from './model/NewTrackingRefund';
import Newshipmentstatus from './model/Newshipmentstatus';
import Order from './model/Order';
import OrderGiftWrap from './model/OrderGiftWrap';
import OrderItem from './model/OrderItem';
import OrderItemReference from './model/OrderItemReference';
import OrderShippment from './model/OrderShippment';
import OrderShippmentStatus from './model/OrderShippmentStatus';
import OrdersShipments from './model/OrdersShipments';
import Phone from './model/Phone';
import Product from './model/Product';
import ProductAttribute from './model/ProductAttribute';
import ProductPrice from './model/ProductPrice';
import ProductReference from './model/ProductReference';
import ProductSiteReference from './model/ProductSiteReference';
import ProductStatusUpdate from './model/ProductStatusUpdate';
import ProductStock from './model/ProductStock';
import ProductUpdate from './model/ProductUpdate';
import Promotion from './model/Promotion';
import Seller from './model/Seller';
import SellerItem from './model/SellerItem';
import SellerItemPrices from './model/SellerItemPrices';
import SellerItemStatus from './model/SellerItemStatus';
import Shippment from './model/Shippment';
import Stock from './model/Stock';
import Ticket from './model/Ticket';
import TicketMessage from './model/TicketMessage';
import TicketStatus from './model/TicketStatus';
import OrderApi from './api/OrderApi';
import OrdersApi from './api/OrdersApi';
import ProductApi from './api/ProductApi';
import ProductsApi from './api/ProductsApi';
import TicketsApi from './api/TicketsApi';


/**
* Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BrandLoversMarketplaceApiV1 = require('index'); // See note below*.
* var xxxSvc = new BrandLoversMarketplaceApiV1.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BrandLoversMarketplaceApiV1.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BrandLoversMarketplaceApiV1.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BrandLoversMarketplaceApiV1.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The ControlledStock model constructor.
     * @property {module:model/ControlledStock}
     */
    ControlledStock,

    /**
     * The Courier model constructor.
     * @property {module:model/Courier}
     */
    Courier,

    /**
     * The Customer model constructor.
     * @property {module:model/Customer}
     */
    Customer,

    /**
     * The CustomerReference model constructor.
     * @property {module:model/CustomerReference}
     */
    CustomerReference,

    /**
     * The Dimensions model constructor.
     * @property {module:model/Dimensions}
     */
    Dimensions,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Freight model constructor.
     * @property {module:model/Freight}
     */
    Freight,

    /**
     * The GetOrders model constructor.
     * @property {module:model/GetOrders}
     */
    GetOrders,

    /**
     * The GetOrdersShipments model constructor.
     * @property {module:model/GetOrdersShipments}
     */
    GetOrdersShipments,

    /**
     * The GetProduct model constructor.
     * @property {module:model/GetProduct}
     */
    GetProduct,

    /**
     * The GetProductsResponse model constructor.
     * @property {module:model/GetProductsResponse}
     */
    GetProductsResponse,

    /**
     * The GetProductsStatusSelling model constructor.
     * @property {module:model/GetProductsStatusSelling}
     */
    GetProductsStatusSelling,

    /**
     * The GetSellerProductStatus model constructor.
     * @property {module:model/GetSellerProductStatus}
     */
    GetSellerProductStatus,

    /**
     * The GetSellerProductsStatus model constructor.
     * @property {module:model/GetSellerProductsStatus}
     */
    GetSellerProductsStatus,

    /**
     * The GetTicketMessages model constructor.
     * @property {module:model/GetTicketMessages}
     */
    GetTicketMessages,

    /**
     * The GetTickets model constructor.
     * @property {module:model/GetTickets}
     */
    GetTickets,

    /**
     * The GiftCard model constructor.
     * @property {module:model/GiftCard}
     */
    GiftCard,

    /**
     * The GiftWrap model constructor.
     * @property {module:model/GiftWrap}
     */
    GiftWrap,

    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image,

    /**
     * The Invoice model constructor.
     * @property {module:model/Invoice}
     */
    Invoice,

    /**
     * The Metadata model constructor.
     * @property {module:model/Metadata}
     */
    Metadata,

    /**
     * The NewTicket model constructor.
     * @property {module:model/NewTicket}
     */
    NewTicket,

    /**
     * The NewTicketMessage model constructor.
     * @property {module:model/NewTicketMessage}
     */
    NewTicketMessage,

    /**
     * The NewTrackingRefund model constructor.
     * @property {module:model/NewTrackingRefund}
     */
    NewTrackingRefund,

    /**
     * The Newshipmentstatus model constructor.
     * @property {module:model/Newshipmentstatus}
     */
    Newshipmentstatus,

    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order,

    /**
     * The OrderGiftWrap model constructor.
     * @property {module:model/OrderGiftWrap}
     */
    OrderGiftWrap,

    /**
     * The OrderItem model constructor.
     * @property {module:model/OrderItem}
     */
    OrderItem,

    /**
     * The OrderItemReference model constructor.
     * @property {module:model/OrderItemReference}
     */
    OrderItemReference,

    /**
     * The OrderShippment model constructor.
     * @property {module:model/OrderShippment}
     */
    OrderShippment,

    /**
     * The OrderShippmentStatus model constructor.
     * @property {module:model/OrderShippmentStatus}
     */
    OrderShippmentStatus,

    /**
     * The OrdersShipments model constructor.
     * @property {module:model/OrdersShipments}
     */
    OrdersShipments,

    /**
     * The Phone model constructor.
     * @property {module:model/Phone}
     */
    Phone,

    /**
     * The Product model constructor.
     * @property {module:model/Product}
     */
    Product,

    /**
     * The ProductAttribute model constructor.
     * @property {module:model/ProductAttribute}
     */
    ProductAttribute,

    /**
     * The ProductPrice model constructor.
     * @property {module:model/ProductPrice}
     */
    ProductPrice,

    /**
     * The ProductReference model constructor.
     * @property {module:model/ProductReference}
     */
    ProductReference,

    /**
     * The ProductSiteReference model constructor.
     * @property {module:model/ProductSiteReference}
     */
    ProductSiteReference,

    /**
     * The ProductStatusUpdate model constructor.
     * @property {module:model/ProductStatusUpdate}
     */
    ProductStatusUpdate,

    /**
     * The ProductStock model constructor.
     * @property {module:model/ProductStock}
     */
    ProductStock,

    /**
     * The ProductUpdate model constructor.
     * @property {module:model/ProductUpdate}
     */
    ProductUpdate,

    /**
     * The Promotion model constructor.
     * @property {module:model/Promotion}
     */
    Promotion,

    /**
     * The Seller model constructor.
     * @property {module:model/Seller}
     */
    Seller,

    /**
     * The SellerItem model constructor.
     * @property {module:model/SellerItem}
     */
    SellerItem,

    /**
     * The SellerItemPrices model constructor.
     * @property {module:model/SellerItemPrices}
     */
    SellerItemPrices,

    /**
     * The SellerItemStatus model constructor.
     * @property {module:model/SellerItemStatus}
     */
    SellerItemStatus,

    /**
     * The Shippment model constructor.
     * @property {module:model/Shippment}
     */
    Shippment,

    /**
     * The Stock model constructor.
     * @property {module:model/Stock}
     */
    Stock,

    /**
     * The Ticket model constructor.
     * @property {module:model/Ticket}
     */
    Ticket,

    /**
     * The TicketMessage model constructor.
     * @property {module:model/TicketMessage}
     */
    TicketMessage,

    /**
     * The TicketStatus model constructor.
     * @property {module:model/TicketStatus}
     */
    TicketStatus,

    /**
    * The OrderApi service constructor.
    * @property {module:api/OrderApi}
    */
    OrderApi,

    /**
    * The OrdersApi service constructor.
    * @property {module:api/OrdersApi}
    */
    OrdersApi,

    /**
    * The ProductApi service constructor.
    * @property {module:api/ProductApi}
    */
    ProductApi,

    /**
    * The ProductsApi service constructor.
    * @property {module:api/ProductsApi}
    */
    ProductsApi,

    /**
    * The TicketsApi service constructor.
    * @property {module:api/TicketsApi}
    */
    TicketsApi
};
