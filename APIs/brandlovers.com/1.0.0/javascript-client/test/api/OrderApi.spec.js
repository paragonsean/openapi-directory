/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrandLoversMarketplaceApiV1);
  }
}(this, function(expect, BrandLoversMarketplaceApiV1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BrandLoversMarketplaceApiV1.OrderApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrderApi', function() {
    describe('orderOrderIdGet', function() {
      it('should call orderOrderIdGet successfully', function(done) {
        //uncomment below and update the code to test orderOrderIdGet
        //instance.orderOrderIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orderOrderIdShipmentCancelPost', function() {
      it('should call orderOrderIdShipmentCancelPost successfully', function(done) {
        //uncomment below and update the code to test orderOrderIdShipmentCancelPost
        //instance.orderOrderIdShipmentCancelPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orderOrderIdShipmentDeliveredPost', function() {
      it('should call orderOrderIdShipmentDeliveredPost successfully', function(done) {
        //uncomment below and update the code to test orderOrderIdShipmentDeliveredPost
        //instance.orderOrderIdShipmentDeliveredPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orderOrderIdShipmentExchangePost', function() {
      it('should call orderOrderIdShipmentExchangePost successfully', function(done) {
        //uncomment below and update the code to test orderOrderIdShipmentExchangePost
        //instance.orderOrderIdShipmentExchangePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orderOrderIdShipmentReturnPost', function() {
      it('should call orderOrderIdShipmentReturnPost successfully', function(done) {
        //uncomment below and update the code to test orderOrderIdShipmentReturnPost
        //instance.orderOrderIdShipmentReturnPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orderOrderIdShipmentSentPost', function() {
      it('should call orderOrderIdShipmentSentPost successfully', function(done) {
        //uncomment below and update the code to test orderOrderIdShipmentSentPost
        //instance.orderOrderIdShipmentSentPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
