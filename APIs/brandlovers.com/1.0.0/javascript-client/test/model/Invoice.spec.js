/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrandLoversMarketplaceApiV1);
  }
}(this, function(expect, BrandLoversMarketplaceApiV1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BrandLoversMarketplaceApiV1.Invoice();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Invoice', function() {
    it('should create an instance of Invoice', function() {
      // uncomment below and update the code to test Invoice
      //var instance = new BrandLoversMarketplaceApiV1.Invoice();
      //expect(instance).to.be.a(BrandLoversMarketplaceApiV1.Invoice);
    });

    it('should have the property accessKey (base name: "accessKey")', function() {
      // uncomment below and update the code to test the property accessKey
      //var instance = new BrandLoversMarketplaceApiV1.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property cnpj (base name: "cnpj")', function() {
      // uncomment below and update the code to test the property cnpj
      //var instance = new BrandLoversMarketplaceApiV1.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property issuedAt (base name: "issuedAt")', function() {
      // uncomment below and update the code to test the property issuedAt
      //var instance = new BrandLoversMarketplaceApiV1.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property linkDanfe (base name: "linkDanfe")', function() {
      // uncomment below and update the code to test the property linkDanfe
      //var instance = new BrandLoversMarketplaceApiV1.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property linkXml (base name: "linkXml")', function() {
      // uncomment below and update the code to test the property linkXml
      //var instance = new BrandLoversMarketplaceApiV1.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new BrandLoversMarketplaceApiV1.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property serie (base name: "serie")', function() {
      // uncomment below and update the code to test the property serie
      //var instance = new BrandLoversMarketplaceApiV1.Invoice();
      //expect(instance).to.be();
    });

  });

}));
