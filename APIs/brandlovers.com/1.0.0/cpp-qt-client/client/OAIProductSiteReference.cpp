/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductSiteReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductSiteReference::OAIProductSiteReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductSiteReference::OAIProductSiteReference() {
    this->initializeModel();
}

OAIProductSiteReference::~OAIProductSiteReference() {}

void OAIProductSiteReference::initializeModel() {

    m_sku_seller_id_isSet = false;
    m_sku_seller_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProductSiteReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductSiteReference::fromJsonObject(QJsonObject json) {

    m_sku_seller_id_isValid = ::OpenAPI::fromJsonValue(m_sku_seller_id, json[QString("skuSellerId")]);
    m_sku_seller_id_isSet = !json[QString("skuSellerId")].isNull() && m_sku_seller_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProductSiteReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductSiteReference::asJsonObject() const {
    QJsonObject obj;
    if (m_sku_seller_id_isSet) {
        obj.insert(QString("skuSellerId"), ::OpenAPI::toJsonValue(m_sku_seller_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIProductSiteReference::getSkuSellerId() const {
    return m_sku_seller_id;
}
void OAIProductSiteReference::setSkuSellerId(const QString &sku_seller_id) {
    m_sku_seller_id = sku_seller_id;
    m_sku_seller_id_isSet = true;
}

bool OAIProductSiteReference::is_sku_seller_id_Set() const{
    return m_sku_seller_id_isSet;
}

bool OAIProductSiteReference::is_sku_seller_id_Valid() const{
    return m_sku_seller_id_isValid;
}

QString OAIProductSiteReference::getUrl() const {
    return m_url;
}
void OAIProductSiteReference::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProductSiteReference::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProductSiteReference::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProductSiteReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sku_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductSiteReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sku_seller_id_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
