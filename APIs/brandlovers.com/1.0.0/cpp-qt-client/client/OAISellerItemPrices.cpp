/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISellerItemPrices.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISellerItemPrices::OAISellerItemPrices(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISellerItemPrices::OAISellerItemPrices() {
    this->initializeModel();
}

OAISellerItemPrices::~OAISellerItemPrices() {}

void OAISellerItemPrices::initializeModel() {

    m_price_isSet = false;
    m_price_isValid = false;

    m_sku_seller_id_isSet = false;
    m_sku_seller_id_isValid = false;
}

void OAISellerItemPrices::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISellerItemPrices::fromJsonObject(QJsonObject json) {

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_sku_seller_id_isValid = ::OpenAPI::fromJsonValue(m_sku_seller_id, json[QString("skuSellerId")]);
    m_sku_seller_id_isSet = !json[QString("skuSellerId")].isNull() && m_sku_seller_id_isValid;
}

QString OAISellerItemPrices::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISellerItemPrices::asJsonObject() const {
    QJsonObject obj;
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_sku_seller_id_isSet) {
        obj.insert(QString("skuSellerId"), ::OpenAPI::toJsonValue(m_sku_seller_id));
    }
    return obj;
}

OAIProductPrice OAISellerItemPrices::getPrice() const {
    return m_price;
}
void OAISellerItemPrices::setPrice(const OAIProductPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAISellerItemPrices::is_price_Set() const{
    return m_price_isSet;
}

bool OAISellerItemPrices::is_price_Valid() const{
    return m_price_isValid;
}

QString OAISellerItemPrices::getSkuSellerId() const {
    return m_sku_seller_id;
}
void OAISellerItemPrices::setSkuSellerId(const QString &sku_seller_id) {
    m_sku_seller_id = sku_seller_id;
    m_sku_seller_id_isSet = true;
}

bool OAISellerItemPrices::is_sku_seller_id_Set() const{
    return m_sku_seller_id_isSet;
}

bool OAISellerItemPrices::is_sku_seller_id_Valid() const{
    return m_sku_seller_id_isValid;
}

bool OAISellerItemPrices::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISellerItemPrices::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_price_isValid && m_sku_seller_id_isValid && true;
}

} // namespace OpenAPI
