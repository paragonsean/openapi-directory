/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromotion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromotion::OAIPromotion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromotion::OAIPromotion() {
    this->initializeModel();
}

OAIPromotion::~OAIPromotion() {}

void OAIPromotion::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPromotion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromotion::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPromotion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromotion::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIPromotion::getAmount() const {
    return m_amount;
}
void OAIPromotion::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPromotion::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPromotion::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPromotion::getId() const {
    return m_id;
}
void OAIPromotion::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPromotion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPromotion::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPromotion::getName() const {
    return m_name;
}
void OAIPromotion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPromotion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPromotion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPromotion::getType() const {
    return m_type;
}
void OAIPromotion::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPromotion::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPromotion::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPromotion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromotion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
