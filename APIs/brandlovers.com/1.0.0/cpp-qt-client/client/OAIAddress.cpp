/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_complement_isSet = false;
    m_complement_isValid = false;

    m_country_id_isSet = false;
    m_country_id_isValid = false;

    m_neighbourhood_isSet = false;
    m_neighbourhood_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_recipient_name_isSet = false;
    m_recipient_name_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_complement_isValid = ::OpenAPI::fromJsonValue(m_complement, json[QString("complement")]);
    m_complement_isSet = !json[QString("complement")].isNull() && m_complement_isValid;

    m_country_id_isValid = ::OpenAPI::fromJsonValue(m_country_id, json[QString("countryId")]);
    m_country_id_isSet = !json[QString("countryId")].isNull() && m_country_id_isValid;

    m_neighbourhood_isValid = ::OpenAPI::fromJsonValue(m_neighbourhood, json[QString("neighbourhood")]);
    m_neighbourhood_isSet = !json[QString("neighbourhood")].isNull() && m_neighbourhood_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_recipient_name_isValid = ::OpenAPI::fromJsonValue(m_recipient_name, json[QString("recipientName")]);
    m_recipient_name_isSet = !json[QString("recipientName")].isNull() && m_recipient_name_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_complement_isSet) {
        obj.insert(QString("complement"), ::OpenAPI::toJsonValue(m_complement));
    }
    if (m_country_id_isSet) {
        obj.insert(QString("countryId"), ::OpenAPI::toJsonValue(m_country_id));
    }
    if (m_neighbourhood_isSet) {
        obj.insert(QString("neighbourhood"), ::OpenAPI::toJsonValue(m_neighbourhood));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_recipient_name_isSet) {
        obj.insert(QString("recipientName"), ::OpenAPI::toJsonValue(m_recipient_name));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIAddress::getAddress() const {
    return m_address;
}
void OAIAddress::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAddress::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAddress::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIAddress::getCity() const {
    return m_city;
}
void OAIAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAddress::getComplement() const {
    return m_complement;
}
void OAIAddress::setComplement(const QString &complement) {
    m_complement = complement;
    m_complement_isSet = true;
}

bool OAIAddress::is_complement_Set() const{
    return m_complement_isSet;
}

bool OAIAddress::is_complement_Valid() const{
    return m_complement_isValid;
}

QString OAIAddress::getCountryId() const {
    return m_country_id;
}
void OAIAddress::setCountryId(const QString &country_id) {
    m_country_id = country_id;
    m_country_id_isSet = true;
}

bool OAIAddress::is_country_id_Set() const{
    return m_country_id_isSet;
}

bool OAIAddress::is_country_id_Valid() const{
    return m_country_id_isValid;
}

QString OAIAddress::getNeighbourhood() const {
    return m_neighbourhood;
}
void OAIAddress::setNeighbourhood(const QString &neighbourhood) {
    m_neighbourhood = neighbourhood;
    m_neighbourhood_isSet = true;
}

bool OAIAddress::is_neighbourhood_Set() const{
    return m_neighbourhood_isSet;
}

bool OAIAddress::is_neighbourhood_Valid() const{
    return m_neighbourhood_isValid;
}

QString OAIAddress::getNumber() const {
    return m_number;
}
void OAIAddress::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIAddress::is_number_Set() const{
    return m_number_isSet;
}

bool OAIAddress::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIAddress::getRecipientName() const {
    return m_recipient_name;
}
void OAIAddress::setRecipientName(const QString &recipient_name) {
    m_recipient_name = recipient_name;
    m_recipient_name_isSet = true;
}

bool OAIAddress::is_recipient_name_Set() const{
    return m_recipient_name_isSet;
}

bool OAIAddress::is_recipient_name_Valid() const{
    return m_recipient_name_isValid;
}

QString OAIAddress::getReference() const {
    return m_reference;
}
void OAIAddress::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIAddress::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIAddress::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIAddress::getState() const {
    return m_state;
}
void OAIAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAddress::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAddress::getZipCode() const {
    return m_zip_code;
}
void OAIAddress::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIAddress::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIAddress::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbourhood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_city_isValid && m_complement_isValid && m_country_id_isValid && m_neighbourhood_isValid && m_number_isValid && m_state_isValid && m_zip_code_isValid && true;
}

} // namespace OpenAPI
