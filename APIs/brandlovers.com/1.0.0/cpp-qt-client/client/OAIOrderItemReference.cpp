/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderItemReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderItemReference::OAIOrderItemReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderItemReference::OAIOrderItemReference() {
    this->initializeModel();
}

OAIOrderItemReference::~OAIOrderItemReference() {}

void OAIOrderItemReference::initializeModel() {

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sku_seller_id_isSet = false;
    m_sku_seller_id_isValid = false;
}

void OAIOrderItemReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderItemReference::fromJsonObject(QJsonObject json) {

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sku_seller_id_isValid = ::OpenAPI::fromJsonValue(m_sku_seller_id, json[QString("skuSellerId")]);
    m_sku_seller_id_isSet = !json[QString("skuSellerId")].isNull() && m_sku_seller_id_isValid;
}

QString OAIOrderItemReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderItemReference::asJsonObject() const {
    QJsonObject obj;
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sku_seller_id_isSet) {
        obj.insert(QString("skuSellerId"), ::OpenAPI::toJsonValue(m_sku_seller_id));
    }
    return obj;
}

qint32 OAIOrderItemReference::getQuantity() const {
    return m_quantity;
}
void OAIOrderItemReference::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOrderItemReference::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOrderItemReference::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIOrderItemReference::getSkuSellerId() const {
    return m_sku_seller_id;
}
void OAIOrderItemReference::setSkuSellerId(const QString &sku_seller_id) {
    m_sku_seller_id = sku_seller_id;
    m_sku_seller_id_isSet = true;
}

bool OAIOrderItemReference::is_sku_seller_id_Set() const{
    return m_sku_seller_id_isSet;
}

bool OAIOrderItemReference::is_sku_seller_id_Valid() const{
    return m_sku_seller_id_isValid;
}

bool OAIOrderItemReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderItemReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_quantity_isValid && m_sku_seller_id_isValid && true;
}

} // namespace OpenAPI
