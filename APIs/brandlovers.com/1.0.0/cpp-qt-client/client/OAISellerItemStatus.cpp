/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISellerItemStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISellerItemStatus::OAISellerItemStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISellerItemStatus::OAISellerItemStatus() {
    this->initializeModel();
}

OAISellerItemStatus::~OAISellerItemStatus() {}

void OAISellerItemStatus::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;
}

void OAISellerItemStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISellerItemStatus::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;
}

QString OAISellerItemStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISellerItemStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    return obj;
}

bool OAISellerItemStatus::isActive() const {
    return m_active;
}
void OAISellerItemStatus::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISellerItemStatus::is_active_Set() const{
    return m_active_isSet;
}

bool OAISellerItemStatus::is_active_Valid() const{
    return m_active_isValid;
}

bool OAISellerItemStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISellerItemStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && true;
}

} // namespace OpenAPI
