/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApi_H
#define OAI_OAIProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetProductsResponse.h"
#include "OAIGetProductsStatusSelling.h"
#include "OAIGetSellerProductsStatus.h"
#include "OAIProduct.h"
#include "OAIProductStatusUpdate.h"
#include "OAIProductStock.h"
#include "OAIProductUpdate.h"
#include "OAISellerItemPrices.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApi(const int timeOut = 0);
    ~OAIProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  sku_seller_id QString [required]
    * @param[in]  body OAIProductUpdate [required]
    */
    virtual void productSkuSellerIdPut(const QString &authorization, const QString &sku_seller_id, const OAIProductUpdate &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void productsGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  products QList<OAIProduct> [required]
    */
    virtual void productsPost(const QString &authorization, const QList<OAIProduct> &products);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body QList<OAISellerItemPrices> [required]
    */
    virtual void productsPricesPut(const QString &authorization, const QList<OAISellerItemPrices> &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void productsStatusGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body QList<OAIProductStatusUpdate> [required]
    */
    virtual void productsStatusPut(const QString &authorization, const QList<OAIProductStatusUpdate> &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void productsStatusSellingGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body QList<OAIProductStock> [required]
    */
    virtual void productsStocksPut(const QString &authorization, const QList<OAIProductStock> &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productSkuSellerIdPutCallback(OAIHttpRequestWorker *worker);
    void productsGetCallback(OAIHttpRequestWorker *worker);
    void productsPostCallback(OAIHttpRequestWorker *worker);
    void productsPricesPutCallback(OAIHttpRequestWorker *worker);
    void productsStatusGetCallback(OAIHttpRequestWorker *worker);
    void productsStatusPutCallback(OAIHttpRequestWorker *worker);
    void productsStatusSellingGetCallback(OAIHttpRequestWorker *worker);
    void productsStocksPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productSkuSellerIdPutSignal();
    void productsGetSignal(OAIGetProductsResponse summary);
    void productsPostSignal();
    void productsPricesPutSignal();
    void productsStatusGetSignal(OAIGetSellerProductsStatus summary);
    void productsStatusPutSignal();
    void productsStatusSellingGetSignal(OAIGetProductsStatusSelling summary);
    void productsStocksPutSignal();


    void productSkuSellerIdPutSignalFull(OAIHttpRequestWorker *worker);
    void productsGetSignalFull(OAIHttpRequestWorker *worker, OAIGetProductsResponse summary);
    void productsPostSignalFull(OAIHttpRequestWorker *worker);
    void productsPricesPutSignalFull(OAIHttpRequestWorker *worker);
    void productsStatusGetSignalFull(OAIHttpRequestWorker *worker, OAIGetSellerProductsStatus summary);
    void productsStatusPutSignalFull(OAIHttpRequestWorker *worker);
    void productsStatusSellingGetSignalFull(OAIHttpRequestWorker *worker, OAIGetProductsStatusSelling summary);
    void productsStocksPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use productSkuSellerIdPutSignalError() instead")
    void productSkuSellerIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productSkuSellerIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetSignalError() instead")
    void productsGetSignalE(OAIGetProductsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetSignalError(OAIGetProductsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsPostSignalError() instead")
    void productsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsPricesPutSignalError() instead")
    void productsPricesPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsPricesPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsStatusGetSignalError() instead")
    void productsStatusGetSignalE(OAIGetSellerProductsStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsStatusGetSignalError(OAIGetSellerProductsStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsStatusPutSignalError() instead")
    void productsStatusPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsStatusPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsStatusSellingGetSignalError() instead")
    void productsStatusSellingGetSignalE(OAIGetProductsStatusSelling summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsStatusSellingGetSignalError(OAIGetProductsStatusSelling summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsStocksPutSignalError() instead")
    void productsStocksPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsStocksPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productSkuSellerIdPutSignalErrorFull() instead")
    void productSkuSellerIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSkuSellerIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetSignalErrorFull() instead")
    void productsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsPostSignalErrorFull() instead")
    void productsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsPricesPutSignalErrorFull() instead")
    void productsPricesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsPricesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsStatusGetSignalErrorFull() instead")
    void productsStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsStatusPutSignalErrorFull() instead")
    void productsStatusPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsStatusPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsStatusSellingGetSignalErrorFull() instead")
    void productsStatusSellingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsStatusSellingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsStocksPutSignalErrorFull() instead")
    void productsStocksPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsStocksPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
