/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderItem::OAIOrderItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderItem::OAIOrderItem() {
    this->initializeModel();
}

OAIOrderItem::~OAIOrderItem() {}

void OAIOrderItem::initializeModel() {

    m_freight_isSet = false;
    m_freight_isValid = false;

    m_gift_wrap_isSet = false;
    m_gift_wrap_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_promotions_isSet = false;
    m_promotions_isValid = false;

    m_sale_price_isSet = false;
    m_sale_price_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_sku_seller_id_isSet = false;
    m_sku_seller_id_isValid = false;
}

void OAIOrderItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderItem::fromJsonObject(QJsonObject json) {

    m_freight_isValid = ::OpenAPI::fromJsonValue(m_freight, json[QString("freight")]);
    m_freight_isSet = !json[QString("freight")].isNull() && m_freight_isValid;

    m_gift_wrap_isValid = ::OpenAPI::fromJsonValue(m_gift_wrap, json[QString("giftWrap")]);
    m_gift_wrap_isSet = !json[QString("giftWrap")].isNull() && m_gift_wrap_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_promotions_isValid = ::OpenAPI::fromJsonValue(m_promotions, json[QString("promotions")]);
    m_promotions_isSet = !json[QString("promotions")].isNull() && m_promotions_isValid;

    m_sale_price_isValid = ::OpenAPI::fromJsonValue(m_sale_price, json[QString("salePrice")]);
    m_sale_price_isSet = !json[QString("salePrice")].isNull() && m_sale_price_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_sku_seller_id_isValid = ::OpenAPI::fromJsonValue(m_sku_seller_id, json[QString("skuSellerId")]);
    m_sku_seller_id_isSet = !json[QString("skuSellerId")].isNull() && m_sku_seller_id_isValid;
}

QString OAIOrderItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderItem::asJsonObject() const {
    QJsonObject obj;
    if (m_freight.isSet()) {
        obj.insert(QString("freight"), ::OpenAPI::toJsonValue(m_freight));
    }
    if (m_gift_wrap.isSet()) {
        obj.insert(QString("giftWrap"), ::OpenAPI::toJsonValue(m_gift_wrap));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_promotions.size() > 0) {
        obj.insert(QString("promotions"), ::OpenAPI::toJsonValue(m_promotions));
    }
    if (m_sale_price_isSet) {
        obj.insert(QString("salePrice"), ::OpenAPI::toJsonValue(m_sale_price));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_sku_seller_id_isSet) {
        obj.insert(QString("skuSellerId"), ::OpenAPI::toJsonValue(m_sku_seller_id));
    }
    return obj;
}

OAIFreight OAIOrderItem::getFreight() const {
    return m_freight;
}
void OAIOrderItem::setFreight(const OAIFreight &freight) {
    m_freight = freight;
    m_freight_isSet = true;
}

bool OAIOrderItem::is_freight_Set() const{
    return m_freight_isSet;
}

bool OAIOrderItem::is_freight_Valid() const{
    return m_freight_isValid;
}

OAIOrderGiftWrap OAIOrderItem::getGiftWrap() const {
    return m_gift_wrap;
}
void OAIOrderItem::setGiftWrap(const OAIOrderGiftWrap &gift_wrap) {
    m_gift_wrap = gift_wrap;
    m_gift_wrap_isSet = true;
}

bool OAIOrderItem::is_gift_wrap_Set() const{
    return m_gift_wrap_isSet;
}

bool OAIOrderItem::is_gift_wrap_Valid() const{
    return m_gift_wrap_isValid;
}

QString OAIOrderItem::getId() const {
    return m_id;
}
void OAIOrderItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrderItem::getName() const {
    return m_name;
}
void OAIOrderItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrderItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrderItem::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPromotion> OAIOrderItem::getPromotions() const {
    return m_promotions;
}
void OAIOrderItem::setPromotions(const QList<OAIPromotion> &promotions) {
    m_promotions = promotions;
    m_promotions_isSet = true;
}

bool OAIOrderItem::is_promotions_Set() const{
    return m_promotions_isSet;
}

bool OAIOrderItem::is_promotions_Valid() const{
    return m_promotions_isValid;
}

qint32 OAIOrderItem::getSalePrice() const {
    return m_sale_price;
}
void OAIOrderItem::setSalePrice(const qint32 &sale_price) {
    m_sale_price = sale_price;
    m_sale_price_isSet = true;
}

bool OAIOrderItem::is_sale_price_Set() const{
    return m_sale_price_isSet;
}

bool OAIOrderItem::is_sale_price_Valid() const{
    return m_sale_price_isValid;
}

bool OAIOrderItem::isSent() const {
    return m_sent;
}
void OAIOrderItem::setSent(const bool &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIOrderItem::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIOrderItem::is_sent_Valid() const{
    return m_sent_isValid;
}

QString OAIOrderItem::getSkuSellerId() const {
    return m_sku_seller_id;
}
void OAIOrderItem::setSkuSellerId(const QString &sku_seller_id) {
    m_sku_seller_id = sku_seller_id;
    m_sku_seller_id_isSet = true;
}

bool OAIOrderItem::is_sku_seller_id_Set() const{
    return m_sku_seller_id_isSet;
}

bool OAIOrderItem::is_sku_seller_id_Valid() const{
    return m_sku_seller_id_isValid;
}

bool OAIOrderItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_freight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_wrap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_freight_isValid && m_id_isValid && m_name_isValid && m_sale_price_isValid && m_sent_isValid && m_sku_seller_id_isValid && true;
}

} // namespace OpenAPI
