/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSellerProductStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSellerProductStatus::OAIGetSellerProductStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSellerProductStatus::OAIGetSellerProductStatus() {
    this->initializeModel();
}

OAIGetSellerProductStatus::~OAIGetSellerProductStatus() {}

void OAIGetSellerProductStatus::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_sku_seller_id_isSet = false;
    m_sku_seller_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stock_isSet = false;
    m_stock_isValid = false;
}

void OAIGetSellerProductStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSellerProductStatus::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_sku_seller_id_isValid = ::OpenAPI::fromJsonValue(m_sku_seller_id, json[QString("skuSellerId")]);
    m_sku_seller_id_isSet = !json[QString("skuSellerId")].isNull() && m_sku_seller_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stock_isValid = ::OpenAPI::fromJsonValue(m_stock, json[QString("stock")]);
    m_stock_isSet = !json[QString("stock")].isNull() && m_stock_isValid;
}

QString OAIGetSellerProductStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSellerProductStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_sku_seller_id_isSet) {
        obj.insert(QString("skuSellerId"), ::OpenAPI::toJsonValue(m_sku_seller_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stock_isSet) {
        obj.insert(QString("stock"), ::OpenAPI::toJsonValue(m_stock));
    }
    return obj;
}

QList<OAIError> OAIGetSellerProductStatus::getErrors() const {
    return m_errors;
}
void OAIGetSellerProductStatus::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGetSellerProductStatus::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGetSellerProductStatus::is_errors_Valid() const{
    return m_errors_isValid;
}

OAIProductPrice OAIGetSellerProductStatus::getPrice() const {
    return m_price;
}
void OAIGetSellerProductStatus::setPrice(const OAIProductPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIGetSellerProductStatus::is_price_Set() const{
    return m_price_isSet;
}

bool OAIGetSellerProductStatus::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIGetSellerProductStatus::getSkuSellerId() const {
    return m_sku_seller_id;
}
void OAIGetSellerProductStatus::setSkuSellerId(const QString &sku_seller_id) {
    m_sku_seller_id = sku_seller_id;
    m_sku_seller_id_isSet = true;
}

bool OAIGetSellerProductStatus::is_sku_seller_id_Set() const{
    return m_sku_seller_id_isSet;
}

bool OAIGetSellerProductStatus::is_sku_seller_id_Valid() const{
    return m_sku_seller_id_isValid;
}

QString OAIGetSellerProductStatus::getStatus() const {
    return m_status;
}
void OAIGetSellerProductStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetSellerProductStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetSellerProductStatus::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIGetSellerProductStatus::getStock() const {
    return m_stock;
}
void OAIGetSellerProductStatus::setStock(const qint32 &stock) {
    m_stock = stock;
    m_stock_isSet = true;
}

bool OAIGetSellerProductStatus::is_stock_Set() const{
    return m_stock_isSet;
}

bool OAIGetSellerProductStatus::is_stock_Valid() const{
    return m_stock_isValid;
}

bool OAIGetSellerProductStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSellerProductStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_price_isValid && m_sku_seller_id_isValid && m_status_isValid && m_stock_isValid && true;
}

} // namespace OpenAPI
