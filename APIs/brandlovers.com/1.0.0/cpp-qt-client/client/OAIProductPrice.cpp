/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductPrice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductPrice::OAIProductPrice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductPrice::OAIProductPrice() {
    this->initializeModel();
}

OAIProductPrice::~OAIProductPrice() {}

void OAIProductPrice::initializeModel() {

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_offer_isSet = false;
    m_offer_isValid = false;
}

void OAIProductPrice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductPrice::fromJsonObject(QJsonObject json) {

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_offer_isValid = ::OpenAPI::fromJsonValue(m_offer, json[QString("offer")]);
    m_offer_isSet = !json[QString("offer")].isNull() && m_offer_isValid;
}

QString OAIProductPrice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductPrice::asJsonObject() const {
    QJsonObject obj;
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_offer_isSet) {
        obj.insert(QString("offer"), ::OpenAPI::toJsonValue(m_offer));
    }
    return obj;
}

qint32 OAIProductPrice::getRDefault() const {
    return m_r_default;
}
void OAIProductPrice::setRDefault(const qint32 &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIProductPrice::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIProductPrice::is_r_default_Valid() const{
    return m_r_default_isValid;
}

qint32 OAIProductPrice::getOffer() const {
    return m_offer;
}
void OAIProductPrice::setOffer(const qint32 &offer) {
    m_offer = offer;
    m_offer_isSet = true;
}

bool OAIProductPrice::is_offer_Set() const{
    return m_offer_isSet;
}

bool OAIProductPrice::is_offer_Valid() const{
    return m_offer_isValid;
}

bool OAIProductPrice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductPrice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_default_isValid && m_offer_isValid && true;
}

} // namespace OpenAPI
