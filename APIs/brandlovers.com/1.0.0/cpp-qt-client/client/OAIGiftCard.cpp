/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGiftCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGiftCard::OAIGiftCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGiftCard::OAIGiftCard() {
    this->initializeModel();
}

OAIGiftCard::~OAIGiftCard() {}

void OAIGiftCard::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIGiftCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGiftCard::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIGiftCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGiftCard::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAIGiftCard::getFrom() const {
    return m_from;
}
void OAIGiftCard::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIGiftCard::is_from_Set() const{
    return m_from_isSet;
}

bool OAIGiftCard::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIGiftCard::getMessage() const {
    return m_message;
}
void OAIGiftCard::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGiftCard::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGiftCard::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIGiftCard::getTo() const {
    return m_to;
}
void OAIGiftCard::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIGiftCard::is_to_Set() const{
    return m_to_isSet;
}

bool OAIGiftCard::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIGiftCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGiftCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_message_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
