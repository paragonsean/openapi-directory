/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrderApi_H
#define OAI_OAIOrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINewTrackingRefund.h"
#include "OAINewshipmentstatus.h"
#include "OAIOrder.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrderApi : public QObject {
    Q_OBJECT

public:
    OAIOrderApi(const int timeOut = 0);
    ~OAIOrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void orderOrderIdGet(const QString &authorization, const QString &order_id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  body OAINewTrackingRefund [required]
    */
    virtual void orderOrderIdShipmentCancelPost(const QString &authorization, const QString &order_id, const OAINewTrackingRefund &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  body OAINewshipmentstatus [required]
    */
    virtual void orderOrderIdShipmentDeliveredPost(const QString &authorization, const QString &order_id, const OAINewshipmentstatus &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  body OAINewTrackingRefund [required]
    */
    virtual void orderOrderIdShipmentExchangePost(const QString &authorization, const QString &order_id, const OAINewTrackingRefund &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  body OAINewTrackingRefund [required]
    */
    virtual void orderOrderIdShipmentReturnPost(const QString &authorization, const QString &order_id, const OAINewTrackingRefund &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  body OAINewshipmentstatus [required]
    */
    virtual void orderOrderIdShipmentSentPost(const QString &authorization, const QString &order_id, const OAINewshipmentstatus &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void orderOrderIdGetCallback(OAIHttpRequestWorker *worker);
    void orderOrderIdShipmentCancelPostCallback(OAIHttpRequestWorker *worker);
    void orderOrderIdShipmentDeliveredPostCallback(OAIHttpRequestWorker *worker);
    void orderOrderIdShipmentExchangePostCallback(OAIHttpRequestWorker *worker);
    void orderOrderIdShipmentReturnPostCallback(OAIHttpRequestWorker *worker);
    void orderOrderIdShipmentSentPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void orderOrderIdGetSignal(OAIOrder summary);
    void orderOrderIdShipmentCancelPostSignal();
    void orderOrderIdShipmentDeliveredPostSignal();
    void orderOrderIdShipmentExchangePostSignal();
    void orderOrderIdShipmentReturnPostSignal();
    void orderOrderIdShipmentSentPostSignal();


    void orderOrderIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);
    void orderOrderIdShipmentCancelPostSignalFull(OAIHttpRequestWorker *worker);
    void orderOrderIdShipmentDeliveredPostSignalFull(OAIHttpRequestWorker *worker);
    void orderOrderIdShipmentExchangePostSignalFull(OAIHttpRequestWorker *worker);
    void orderOrderIdShipmentReturnPostSignalFull(OAIHttpRequestWorker *worker);
    void orderOrderIdShipmentSentPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use orderOrderIdGetSignalError() instead")
    void orderOrderIdGetSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdGetSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdShipmentCancelPostSignalError() instead")
    void orderOrderIdShipmentCancelPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdShipmentCancelPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdShipmentDeliveredPostSignalError() instead")
    void orderOrderIdShipmentDeliveredPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdShipmentDeliveredPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdShipmentExchangePostSignalError() instead")
    void orderOrderIdShipmentExchangePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdShipmentExchangePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdShipmentReturnPostSignalError() instead")
    void orderOrderIdShipmentReturnPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdShipmentReturnPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdShipmentSentPostSignalError() instead")
    void orderOrderIdShipmentSentPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdShipmentSentPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use orderOrderIdGetSignalErrorFull() instead")
    void orderOrderIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdShipmentCancelPostSignalErrorFull() instead")
    void orderOrderIdShipmentCancelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdShipmentCancelPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdShipmentDeliveredPostSignalErrorFull() instead")
    void orderOrderIdShipmentDeliveredPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdShipmentDeliveredPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdShipmentExchangePostSignalErrorFull() instead")
    void orderOrderIdShipmentExchangePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdShipmentExchangePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdShipmentReturnPostSignalErrorFull() instead")
    void orderOrderIdShipmentReturnPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdShipmentReturnPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderOrderIdShipmentSentPostSignalErrorFull() instead")
    void orderOrderIdShipmentSentPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderOrderIdShipmentSentPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
