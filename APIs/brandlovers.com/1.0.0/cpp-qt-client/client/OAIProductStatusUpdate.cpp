/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductStatusUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductStatusUpdate::OAIProductStatusUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductStatusUpdate::OAIProductStatusUpdate() {
    this->initializeModel();
}

OAIProductStatusUpdate::~OAIProductStatusUpdate() {}

void OAIProductStatusUpdate::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_sku_seller_id_isSet = false;
    m_sku_seller_id_isValid = false;
}

void OAIProductStatusUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductStatusUpdate::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_sku_seller_id_isValid = ::OpenAPI::fromJsonValue(m_sku_seller_id, json[QString("skuSellerId")]);
    m_sku_seller_id_isSet = !json[QString("skuSellerId")].isNull() && m_sku_seller_id_isValid;
}

QString OAIProductStatusUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductStatusUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_sku_seller_id_isSet) {
        obj.insert(QString("skuSellerId"), ::OpenAPI::toJsonValue(m_sku_seller_id));
    }
    return obj;
}

bool OAIProductStatusUpdate::isActive() const {
    return m_active;
}
void OAIProductStatusUpdate::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIProductStatusUpdate::is_active_Set() const{
    return m_active_isSet;
}

bool OAIProductStatusUpdate::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIProductStatusUpdate::getSkuSellerId() const {
    return m_sku_seller_id;
}
void OAIProductStatusUpdate::setSkuSellerId(const QString &sku_seller_id) {
    m_sku_seller_id = sku_seller_id;
    m_sku_seller_id_isSet = true;
}

bool OAIProductStatusUpdate::is_sku_seller_id_Set() const{
    return m_sku_seller_id_isSet;
}

bool OAIProductStatusUpdate::is_sku_seller_id_Valid() const{
    return m_sku_seller_id_isValid;
}

bool OAIProductStatusUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductStatusUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_sku_seller_id_isValid && true;
}

} // namespace OpenAPI
