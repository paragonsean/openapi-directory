/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrders.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrders::OAIGetOrders(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrders::OAIGetOrders() {
    this->initializeModel();
}

OAIGetOrders::~OAIGetOrders() {}

void OAIGetOrders::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_orders_isSet = false;
    m_orders_isValid = false;
}

void OAIGetOrders::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrders::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_orders_isValid = ::OpenAPI::fromJsonValue(m_orders, json[QString("orders")]);
    m_orders_isSet = !json[QString("orders")].isNull() && m_orders_isValid;
}

QString OAIGetOrders::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrders::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_orders.size() > 0) {
        obj.insert(QString("orders"), ::OpenAPI::toJsonValue(m_orders));
    }
    return obj;
}

QList<OAIMetadata> OAIGetOrders::getMetadata() const {
    return m_metadata;
}
void OAIGetOrders::setMetadata(const QList<OAIMetadata> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetOrders::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetOrders::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIOrder> OAIGetOrders::getOrders() const {
    return m_orders;
}
void OAIGetOrders::setOrders(const QList<OAIOrder> &orders) {
    m_orders = orders;
    m_orders_isSet = true;
}

bool OAIGetOrders::is_orders_Set() const{
    return m_orders_isSet;
}

bool OAIGetOrders::is_orders_Valid() const{
    return m_orders_isValid;
}

bool OAIGetOrders::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_orders.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrders::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metadata_isValid && m_orders_isValid && true;
}

} // namespace OpenAPI
