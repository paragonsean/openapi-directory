/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTicketMessages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTicketMessages::OAIGetTicketMessages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTicketMessages::OAIGetTicketMessages() {
    this->initializeModel();
}

OAIGetTicketMessages::~OAIGetTicketMessages() {}

void OAIGetTicketMessages::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAIGetTicketMessages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTicketMessages::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAIGetTicketMessages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTicketMessages::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

QList<OAITicketMessage> OAIGetTicketMessages::getMessages() const {
    return m_messages;
}
void OAIGetTicketMessages::setMessages(const QList<OAITicketMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIGetTicketMessages::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIGetTicketMessages::is_messages_Valid() const{
    return m_messages_isValid;
}

QList<OAIMetadata> OAIGetTicketMessages::getMetadata() const {
    return m_metadata;
}
void OAIGetTicketMessages::setMetadata(const QList<OAIMetadata> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetTicketMessages::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetTicketMessages::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIGetTicketMessages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTicketMessages::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metadata_isValid && true;
}

} // namespace OpenAPI
