/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFreight.h
 *
 * 
 */

#ifndef OAIFreight_H
#define OAIFreight_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFreight : public OAIObject {
public:
    OAIFreight();
    OAIFreight(QString json);
    ~OAIFreight() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEta() const;
    void setEta(const QDateTime &eta);
    bool is_eta_Set() const;
    bool is_eta_Valid() const;

    QString getAdditionalInfo() const;
    void setAdditionalInfo(const QString &additional_info);
    bool is_additional_info_Set() const;
    bool is_additional_info_Valid() const;

    qint32 getChargedAmount() const;
    void setChargedAmount(const qint32 &charged_amount);
    bool is_charged_amount_Set() const;
    bool is_charged_amount_Valid() const;

    qint32 getCrossDockingTime() const;
    void setCrossDockingTime(const qint32 &cross_docking_time);
    bool is_cross_docking_time_Set() const;
    bool is_cross_docking_time_Valid() const;

    qint32 getDefaultAmount() const;
    void setDefaultAmount(const qint32 &default_amount);
    bool is_default_amount_Set() const;
    bool is_default_amount_Valid() const;

    QString getScheduledPeriod() const;
    void setScheduledPeriod(const QString &scheduled_period);
    bool is_scheduled_period_Set() const;
    bool is_scheduled_period_Valid() const;

    qint32 getTransitTime() const;
    void setTransitTime(const qint32 &transit_time);
    bool is_transit_time_Set() const;
    bool is_transit_time_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_eta;
    bool m_eta_isSet;
    bool m_eta_isValid;

    QString m_additional_info;
    bool m_additional_info_isSet;
    bool m_additional_info_isValid;

    qint32 m_charged_amount;
    bool m_charged_amount_isSet;
    bool m_charged_amount_isValid;

    qint32 m_cross_docking_time;
    bool m_cross_docking_time_isSet;
    bool m_cross_docking_time_isValid;

    qint32 m_default_amount;
    bool m_default_amount_isSet;
    bool m_default_amount_isValid;

    QString m_scheduled_period;
    bool m_scheduled_period_isSet;
    bool m_scheduled_period_isValid;

    qint32 m_transit_time;
    bool m_transit_time_isSet;
    bool m_transit_time_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFreight)

#endif // OAIFreight_H
