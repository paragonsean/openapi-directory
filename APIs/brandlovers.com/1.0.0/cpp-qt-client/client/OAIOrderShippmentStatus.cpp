/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderShippmentStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderShippmentStatus::OAIOrderShippmentStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderShippmentStatus::OAIOrderShippmentStatus() {
    this->initializeModel();
}

OAIOrderShippmentStatus::~OAIOrderShippmentStatus() {}

void OAIOrderShippmentStatus::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_shipment_id_isSet = false;
    m_shipment_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_url_isSet = false;
    m_tracking_url_isValid = false;
}

void OAIOrderShippmentStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderShippmentStatus::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_shipment_id_isValid = ::OpenAPI::fromJsonValue(m_shipment_id, json[QString("shipmentId")]);
    m_shipment_id_isSet = !json[QString("shipmentId")].isNull() && m_shipment_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_tracking_url, json[QString("trackingUrl")]);
    m_tracking_url_isSet = !json[QString("trackingUrl")].isNull() && m_tracking_url_isValid;
}

QString OAIOrderShippmentStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderShippmentStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_shipment_id_isSet) {
        obj.insert(QString("shipmentId"), ::OpenAPI::toJsonValue(m_shipment_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_url_isSet) {
        obj.insert(QString("trackingUrl"), ::OpenAPI::toJsonValue(m_tracking_url));
    }
    return obj;
}

QList<OAIError> OAIOrderShippmentStatus::getErrors() const {
    return m_errors;
}
void OAIOrderShippmentStatus::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIOrderShippmentStatus::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIOrderShippmentStatus::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAIOrderItemReference> OAIOrderShippmentStatus::getItems() const {
    return m_items;
}
void OAIOrderShippmentStatus::setItems(const QList<OAIOrderItemReference> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOrderShippmentStatus::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOrderShippmentStatus::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIOrderShippmentStatus::getShipmentId() const {
    return m_shipment_id;
}
void OAIOrderShippmentStatus::setShipmentId(const QString &shipment_id) {
    m_shipment_id = shipment_id;
    m_shipment_id_isSet = true;
}

bool OAIOrderShippmentStatus::is_shipment_id_Set() const{
    return m_shipment_id_isSet;
}

bool OAIOrderShippmentStatus::is_shipment_id_Valid() const{
    return m_shipment_id_isValid;
}

QString OAIOrderShippmentStatus::getStatus() const {
    return m_status;
}
void OAIOrderShippmentStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOrderShippmentStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrderShippmentStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOrderShippmentStatus::getTrackingUrl() const {
    return m_tracking_url;
}
void OAIOrderShippmentStatus::setTrackingUrl(const QString &tracking_url) {
    m_tracking_url = tracking_url;
    m_tracking_url_isSet = true;
}

bool OAIOrderShippmentStatus::is_tracking_url_Set() const{
    return m_tracking_url_isSet;
}

bool OAIOrderShippmentStatus::is_tracking_url_Valid() const{
    return m_tracking_url_isValid;
}

bool OAIOrderShippmentStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderShippmentStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
