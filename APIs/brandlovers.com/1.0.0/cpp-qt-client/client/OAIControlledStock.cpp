/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControlledStock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControlledStock::OAIControlledStock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControlledStock::OAIControlledStock() {
    this->initializeModel();
}

OAIControlledStock::~OAIControlledStock() {}

void OAIControlledStock::initializeModel() {

    m_cross_docking_time_isSet = false;
    m_cross_docking_time_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reserved_isSet = false;
    m_reserved_isValid = false;
}

void OAIControlledStock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControlledStock::fromJsonObject(QJsonObject json) {

    m_cross_docking_time_isValid = ::OpenAPI::fromJsonValue(m_cross_docking_time, json[QString("crossDockingTime")]);
    m_cross_docking_time_isSet = !json[QString("crossDockingTime")].isNull() && m_cross_docking_time_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reserved_isValid = ::OpenAPI::fromJsonValue(m_reserved, json[QString("reserved")]);
    m_reserved_isSet = !json[QString("reserved")].isNull() && m_reserved_isValid;
}

QString OAIControlledStock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControlledStock::asJsonObject() const {
    QJsonObject obj;
    if (m_cross_docking_time_isSet) {
        obj.insert(QString("crossDockingTime"), ::OpenAPI::toJsonValue(m_cross_docking_time));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reserved_isSet) {
        obj.insert(QString("reserved"), ::OpenAPI::toJsonValue(m_reserved));
    }
    return obj;
}

qint32 OAIControlledStock::getCrossDockingTime() const {
    return m_cross_docking_time;
}
void OAIControlledStock::setCrossDockingTime(const qint32 &cross_docking_time) {
    m_cross_docking_time = cross_docking_time;
    m_cross_docking_time_isSet = true;
}

bool OAIControlledStock::is_cross_docking_time_Set() const{
    return m_cross_docking_time_isSet;
}

bool OAIControlledStock::is_cross_docking_time_Valid() const{
    return m_cross_docking_time_isValid;
}

qint32 OAIControlledStock::getQuantity() const {
    return m_quantity;
}
void OAIControlledStock::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIControlledStock::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIControlledStock::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIControlledStock::getReserved() const {
    return m_reserved;
}
void OAIControlledStock::setReserved(const qint32 &reserved) {
    m_reserved = reserved;
    m_reserved_isSet = true;
}

bool OAIControlledStock::is_reserved_Set() const{
    return m_reserved_isSet;
}

bool OAIControlledStock::is_reserved_Valid() const{
    return m_reserved_isValid;
}

bool OAIControlledStock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cross_docking_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControlledStock::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_quantity_isValid && true;
}

} // namespace OpenAPI
