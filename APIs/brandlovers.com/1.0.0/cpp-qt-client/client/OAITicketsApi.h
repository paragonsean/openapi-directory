/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITicketsApi_H
#define OAI_OAITicketsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetTicketMessages.h"
#include "OAIGetTickets.h"
#include "OAINewTicket.h"
#include "OAINewTicketMessage.h"
#include "OAITicketStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITicketsApi : public QObject {
    Q_OBJECT

public:
    OAITicketsApi(const int timeOut = 0);
    ~OAITicketsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  new_ticket OAINewTicket [required]
    */
    virtual void ticketPost(const QString &authorization, const OAINewTicket &new_ticket);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  ticket_id QString [required]
    * @param[in]  message OAINewTicketMessage [required]
    */
    virtual void ticketTicketIdMessagePost(const QString &authorization, const QString &ticket_id, const OAINewTicketMessage &message);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  ticket_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ticketTicketIdMessagesGet(const QString &authorization, const QString &ticket_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  ticket_id QString [required]
    * @param[in]  body OAITicketStatus [required]
    */
    virtual void ticketTicketIdStatusPut(const QString &authorization, const QString &ticket_id, const OAITicketStatus &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ticketsGet(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ticketPostCallback(OAIHttpRequestWorker *worker);
    void ticketTicketIdMessagePostCallback(OAIHttpRequestWorker *worker);
    void ticketTicketIdMessagesGetCallback(OAIHttpRequestWorker *worker);
    void ticketTicketIdStatusPutCallback(OAIHttpRequestWorker *worker);
    void ticketsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ticketPostSignal();
    void ticketTicketIdMessagePostSignal();
    void ticketTicketIdMessagesGetSignal(OAIGetTicketMessages summary);
    void ticketTicketIdStatusPutSignal();
    void ticketsGetSignal(OAIGetTickets summary);


    void ticketPostSignalFull(OAIHttpRequestWorker *worker);
    void ticketTicketIdMessagePostSignalFull(OAIHttpRequestWorker *worker);
    void ticketTicketIdMessagesGetSignalFull(OAIHttpRequestWorker *worker, OAIGetTicketMessages summary);
    void ticketTicketIdStatusPutSignalFull(OAIHttpRequestWorker *worker);
    void ticketsGetSignalFull(OAIHttpRequestWorker *worker, OAIGetTickets summary);

    Q_DECL_DEPRECATED_X("Use ticketPostSignalError() instead")
    void ticketPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ticketPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketTicketIdMessagePostSignalError() instead")
    void ticketTicketIdMessagePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ticketTicketIdMessagePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketTicketIdMessagesGetSignalError() instead")
    void ticketTicketIdMessagesGetSignalE(OAIGetTicketMessages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketTicketIdMessagesGetSignalError(OAIGetTicketMessages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketTicketIdStatusPutSignalError() instead")
    void ticketTicketIdStatusPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ticketTicketIdStatusPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketsGetSignalError() instead")
    void ticketsGetSignalE(OAIGetTickets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketsGetSignalError(OAIGetTickets summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ticketPostSignalErrorFull() instead")
    void ticketPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketTicketIdMessagePostSignalErrorFull() instead")
    void ticketTicketIdMessagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketTicketIdMessagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketTicketIdMessagesGetSignalErrorFull() instead")
    void ticketTicketIdMessagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketTicketIdMessagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketTicketIdStatusPutSignalErrorFull() instead")
    void ticketTicketIdStatusPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketTicketIdStatusPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketsGetSignalErrorFull() instead")
    void ticketsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
