/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetOrders.h"
#include "OAIGetOrdersShipments.h"
#include "OAIOrdersShipments.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ordersGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ordersShipmentsDeliveredGet(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  ordersshipments OAIOrdersShipments [required]
    */
    virtual void ordersShipmentsDeliveredPost(const QString &authorization, const OAIOrdersShipments &ordersshipments);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ordersShipmentsShippedGet(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ordersshipments OAIOrdersShipments [required]
    */
    virtual void ordersShipmentsShippedPost(const OAIOrdersShipments &ordersshipments);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ordersStatusApprovedGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ordersStatusCanceledGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ordersStatusDeliveredGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ordersStatusNewGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ordersStatusPartiallyDeliveredGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ordersStatusPartiallySentGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ordersStatusSentGet(const QString &authorization, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ordersGetCallback(OAIHttpRequestWorker *worker);
    void ordersShipmentsDeliveredGetCallback(OAIHttpRequestWorker *worker);
    void ordersShipmentsDeliveredPostCallback(OAIHttpRequestWorker *worker);
    void ordersShipmentsShippedGetCallback(OAIHttpRequestWorker *worker);
    void ordersShipmentsShippedPostCallback(OAIHttpRequestWorker *worker);
    void ordersStatusApprovedGetCallback(OAIHttpRequestWorker *worker);
    void ordersStatusCanceledGetCallback(OAIHttpRequestWorker *worker);
    void ordersStatusDeliveredGetCallback(OAIHttpRequestWorker *worker);
    void ordersStatusNewGetCallback(OAIHttpRequestWorker *worker);
    void ordersStatusPartiallyDeliveredGetCallback(OAIHttpRequestWorker *worker);
    void ordersStatusPartiallySentGetCallback(OAIHttpRequestWorker *worker);
    void ordersStatusSentGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ordersGetSignal(OAIGetOrders summary);
    void ordersShipmentsDeliveredGetSignal(OAIGetOrdersShipments summary);
    void ordersShipmentsDeliveredPostSignal();
    void ordersShipmentsShippedGetSignal(OAIGetOrdersShipments summary);
    void ordersShipmentsShippedPostSignal();
    void ordersStatusApprovedGetSignal(OAIGetOrders summary);
    void ordersStatusCanceledGetSignal(OAIGetOrders summary);
    void ordersStatusDeliveredGetSignal(OAIGetOrders summary);
    void ordersStatusNewGetSignal(OAIGetOrders summary);
    void ordersStatusPartiallyDeliveredGetSignal(OAIGetOrders summary);
    void ordersStatusPartiallySentGetSignal(OAIGetOrders summary);
    void ordersStatusSentGetSignal(OAIGetOrders summary);


    void ordersGetSignalFull(OAIHttpRequestWorker *worker, OAIGetOrders summary);
    void ordersShipmentsDeliveredGetSignalFull(OAIHttpRequestWorker *worker, OAIGetOrdersShipments summary);
    void ordersShipmentsDeliveredPostSignalFull(OAIHttpRequestWorker *worker);
    void ordersShipmentsShippedGetSignalFull(OAIHttpRequestWorker *worker, OAIGetOrdersShipments summary);
    void ordersShipmentsShippedPostSignalFull(OAIHttpRequestWorker *worker);
    void ordersStatusApprovedGetSignalFull(OAIHttpRequestWorker *worker, OAIGetOrders summary);
    void ordersStatusCanceledGetSignalFull(OAIHttpRequestWorker *worker, OAIGetOrders summary);
    void ordersStatusDeliveredGetSignalFull(OAIHttpRequestWorker *worker, OAIGetOrders summary);
    void ordersStatusNewGetSignalFull(OAIHttpRequestWorker *worker, OAIGetOrders summary);
    void ordersStatusPartiallyDeliveredGetSignalFull(OAIHttpRequestWorker *worker, OAIGetOrders summary);
    void ordersStatusPartiallySentGetSignalFull(OAIHttpRequestWorker *worker, OAIGetOrders summary);
    void ordersStatusSentGetSignalFull(OAIHttpRequestWorker *worker, OAIGetOrders summary);

    Q_DECL_DEPRECATED_X("Use ordersGetSignalError() instead")
    void ordersGetSignalE(OAIGetOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersGetSignalError(OAIGetOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersShipmentsDeliveredGetSignalError() instead")
    void ordersShipmentsDeliveredGetSignalE(OAIGetOrdersShipments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersShipmentsDeliveredGetSignalError(OAIGetOrdersShipments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersShipmentsDeliveredPostSignalError() instead")
    void ordersShipmentsDeliveredPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ordersShipmentsDeliveredPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersShipmentsShippedGetSignalError() instead")
    void ordersShipmentsShippedGetSignalE(OAIGetOrdersShipments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersShipmentsShippedGetSignalError(OAIGetOrdersShipments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersShipmentsShippedPostSignalError() instead")
    void ordersShipmentsShippedPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ordersShipmentsShippedPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusApprovedGetSignalError() instead")
    void ordersStatusApprovedGetSignalE(OAIGetOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusApprovedGetSignalError(OAIGetOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusCanceledGetSignalError() instead")
    void ordersStatusCanceledGetSignalE(OAIGetOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusCanceledGetSignalError(OAIGetOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusDeliveredGetSignalError() instead")
    void ordersStatusDeliveredGetSignalE(OAIGetOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusDeliveredGetSignalError(OAIGetOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusNewGetSignalError() instead")
    void ordersStatusNewGetSignalE(OAIGetOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusNewGetSignalError(OAIGetOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusPartiallyDeliveredGetSignalError() instead")
    void ordersStatusPartiallyDeliveredGetSignalE(OAIGetOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusPartiallyDeliveredGetSignalError(OAIGetOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusPartiallySentGetSignalError() instead")
    void ordersStatusPartiallySentGetSignalE(OAIGetOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusPartiallySentGetSignalError(OAIGetOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusSentGetSignalError() instead")
    void ordersStatusSentGetSignalE(OAIGetOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusSentGetSignalError(OAIGetOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ordersGetSignalErrorFull() instead")
    void ordersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersShipmentsDeliveredGetSignalErrorFull() instead")
    void ordersShipmentsDeliveredGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersShipmentsDeliveredGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersShipmentsDeliveredPostSignalErrorFull() instead")
    void ordersShipmentsDeliveredPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersShipmentsDeliveredPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersShipmentsShippedGetSignalErrorFull() instead")
    void ordersShipmentsShippedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersShipmentsShippedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersShipmentsShippedPostSignalErrorFull() instead")
    void ordersShipmentsShippedPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersShipmentsShippedPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusApprovedGetSignalErrorFull() instead")
    void ordersStatusApprovedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusApprovedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusCanceledGetSignalErrorFull() instead")
    void ordersStatusCanceledGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusCanceledGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusDeliveredGetSignalErrorFull() instead")
    void ordersStatusDeliveredGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusDeliveredGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusNewGetSignalErrorFull() instead")
    void ordersStatusNewGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusNewGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusPartiallyDeliveredGetSignalErrorFull() instead")
    void ordersStatusPartiallyDeliveredGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusPartiallyDeliveredGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusPartiallySentGetSignalErrorFull() instead")
    void ordersStatusPartiallySentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusPartiallySentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersStatusSentGetSignalErrorFull() instead")
    void ordersStatusSentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersStatusSentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
