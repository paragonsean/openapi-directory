/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISellerItem.h
 *
 * 
 */

#ifndef OAISellerItem_H
#define OAISellerItem_H

#include <QJsonObject>

#include "OAIControlledStock.h"
#include "OAIDimensions.h"
#include "OAIGiftWrap.h"
#include "OAIImage.h"
#include "OAIProductAttribute.h"
#include "OAIProductPrice.h"
#include "OAIProductReference.h"
#include "OAIProductSiteReference.h"
#include "OAISellerItemStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProductAttribute;
class OAIDimensions;
class OAIGiftWrap;
class OAIImage;
class OAIProductPrice;
class OAIProductReference;
class OAISellerItemStatus;
class OAIControlledStock;
class OAIProductSiteReference;

class OAISellerItem : public OAIObject {
public:
    OAISellerItem();
    OAISellerItem(QString json);
    ~OAISellerItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIProductAttribute> getAttributes() const;
    void setAttributes(const QList<OAIProductAttribute> &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QString getBrand() const;
    void setBrand(const QString &brand);
    bool is_brand_Set() const;
    bool is_brand_Valid() const;

    OAIDimensions getDimensions() const;
    void setDimensions(const OAIDimensions &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    OAIGiftWrap getGiftWrap() const;
    void setGiftWrap(const OAIGiftWrap &gift_wrap);
    bool is_gift_wrap_Set() const;
    bool is_gift_wrap_Valid() const;

    QList<QString> getGtin() const;
    void setGtin(const QList<QString> &gtin);
    bool is_gtin_Set() const;
    bool is_gtin_Valid() const;

    QList<OAIImage> getImages() const;
    void setImages(const QList<OAIImage> &images);
    bool is_images_Set() const;
    bool is_images_Valid() const;

    QList<OAIProductPrice> getPrices() const;
    void setPrices(const QList<OAIProductPrice> &prices);
    bool is_prices_Set() const;
    bool is_prices_Valid() const;

    OAIProductReference getProduct() const;
    void setProduct(const OAIProductReference &product);
    bool is_product_Set() const;
    bool is_product_Valid() const;

    QString getSkuSellerId() const;
    void setSkuSellerId(const QString &sku_seller_id);
    bool is_sku_seller_id_Set() const;
    bool is_sku_seller_id_Valid() const;

    QList<OAISellerItemStatus> getStatus() const;
    void setStatus(const QList<OAISellerItemStatus> &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<OAIControlledStock> getStocks() const;
    void setStocks(const QList<OAIControlledStock> &stocks);
    bool is_stocks_Set() const;
    bool is_stocks_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QList<OAIProductSiteReference> getUrls() const;
    void setUrls(const QList<OAIProductSiteReference> &urls);
    bool is_urls_Set() const;
    bool is_urls_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIProductAttribute> m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QString m_brand;
    bool m_brand_isSet;
    bool m_brand_isValid;

    OAIDimensions m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    OAIGiftWrap m_gift_wrap;
    bool m_gift_wrap_isSet;
    bool m_gift_wrap_isValid;

    QList<QString> m_gtin;
    bool m_gtin_isSet;
    bool m_gtin_isValid;

    QList<OAIImage> m_images;
    bool m_images_isSet;
    bool m_images_isValid;

    QList<OAIProductPrice> m_prices;
    bool m_prices_isSet;
    bool m_prices_isValid;

    OAIProductReference m_product;
    bool m_product_isSet;
    bool m_product_isValid;

    QString m_sku_seller_id;
    bool m_sku_seller_id_isSet;
    bool m_sku_seller_id_isValid;

    QList<OAISellerItemStatus> m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<OAIControlledStock> m_stocks;
    bool m_stocks_isSet;
    bool m_stocks_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QList<OAIProductSiteReference> m_urls;
    bool m_urls_isSet;
    bool m_urls_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISellerItem)

#endif // OAISellerItem_H
