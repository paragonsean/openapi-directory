/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTickets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTickets::OAIGetTickets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTickets::OAIGetTickets() {
    this->initializeModel();
}

OAIGetTickets::~OAIGetTickets() {}

void OAIGetTickets::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_tickets_isSet = false;
    m_tickets_isValid = false;
}

void OAIGetTickets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTickets::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_tickets_isValid = ::OpenAPI::fromJsonValue(m_tickets, json[QString("tickets")]);
    m_tickets_isSet = !json[QString("tickets")].isNull() && m_tickets_isValid;
}

QString OAIGetTickets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTickets::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_tickets.size() > 0) {
        obj.insert(QString("tickets"), ::OpenAPI::toJsonValue(m_tickets));
    }
    return obj;
}

QList<OAIMetadata> OAIGetTickets::getMetadata() const {
    return m_metadata;
}
void OAIGetTickets::setMetadata(const QList<OAIMetadata> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetTickets::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetTickets::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAITicket> OAIGetTickets::getTickets() const {
    return m_tickets;
}
void OAIGetTickets::setTickets(const QList<OAITicket> &tickets) {
    m_tickets = tickets;
    m_tickets_isSet = true;
}

bool OAIGetTickets::is_tickets_Set() const{
    return m_tickets_isSet;
}

bool OAIGetTickets::is_tickets_Valid() const{
    return m_tickets_isValid;
}

bool OAIGetTickets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tickets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTickets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
