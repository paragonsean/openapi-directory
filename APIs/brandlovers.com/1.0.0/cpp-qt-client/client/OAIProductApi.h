/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductApi_H
#define OAI_OAIProductApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetProduct.h"
#include "OAIProduct.h"
#include "OAIProductPrice.h"
#include "OAISellerItemStatus.h"
#include "OAIStock.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductApi : public QObject {
    Q_OBJECT

public:
    OAIProductApi(const int timeOut = 0);
    ~OAIProductApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  product OAIProduct [required]
    */
    virtual void productPost(const QString &authorization, const OAIProduct &product);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  sku_seller_id QString [required]
    */
    virtual void productSkuSellerIdGet(const QString &authorization, const QString &sku_seller_id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  sku_seller_id QString [required]
    * @param[in]  body OAIProductPrice [required]
    */
    virtual void productSkuSellerIdPricesPut(const QString &authorization, const QString &sku_seller_id, const OAIProductPrice &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  sku_seller_id QString [required]
    * @param[in]  body OAISellerItemStatus [required]
    */
    virtual void productSkuSellerIdStatusPut(const QString &authorization, const QString &sku_seller_id, const OAISellerItemStatus &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  sku_seller_id QString [required]
    * @param[in]  body OAIStock [required]
    */
    virtual void productSkuSellerIdStockPut(const QString &authorization, const QString &sku_seller_id, const OAIStock &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productPostCallback(OAIHttpRequestWorker *worker);
    void productSkuSellerIdGetCallback(OAIHttpRequestWorker *worker);
    void productSkuSellerIdPricesPutCallback(OAIHttpRequestWorker *worker);
    void productSkuSellerIdStatusPutCallback(OAIHttpRequestWorker *worker);
    void productSkuSellerIdStockPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productPostSignal();
    void productSkuSellerIdGetSignal(OAIGetProduct summary);
    void productSkuSellerIdPricesPutSignal();
    void productSkuSellerIdStatusPutSignal();
    void productSkuSellerIdStockPutSignal();


    void productPostSignalFull(OAIHttpRequestWorker *worker);
    void productSkuSellerIdGetSignalFull(OAIHttpRequestWorker *worker, OAIGetProduct summary);
    void productSkuSellerIdPricesPutSignalFull(OAIHttpRequestWorker *worker);
    void productSkuSellerIdStatusPutSignalFull(OAIHttpRequestWorker *worker);
    void productSkuSellerIdStockPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use productPostSignalError() instead")
    void productPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSkuSellerIdGetSignalError() instead")
    void productSkuSellerIdGetSignalE(OAIGetProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productSkuSellerIdGetSignalError(OAIGetProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSkuSellerIdPricesPutSignalError() instead")
    void productSkuSellerIdPricesPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productSkuSellerIdPricesPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSkuSellerIdStatusPutSignalError() instead")
    void productSkuSellerIdStatusPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productSkuSellerIdStatusPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSkuSellerIdStockPutSignalError() instead")
    void productSkuSellerIdStockPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productSkuSellerIdStockPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productPostSignalErrorFull() instead")
    void productPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSkuSellerIdGetSignalErrorFull() instead")
    void productSkuSellerIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSkuSellerIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSkuSellerIdPricesPutSignalErrorFull() instead")
    void productSkuSellerIdPricesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSkuSellerIdPricesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSkuSellerIdStatusPutSignalErrorFull() instead")
    void productSkuSellerIdStatusPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSkuSellerIdStatusPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSkuSellerIdStockPutSignalErrorFull() instead")
    void productSkuSellerIdStockPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSkuSellerIdStockPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
