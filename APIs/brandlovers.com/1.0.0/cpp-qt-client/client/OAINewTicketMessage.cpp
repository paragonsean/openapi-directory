/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewTicketMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewTicketMessage::OAINewTicketMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewTicketMessage::OAINewTicketMessage() {
    this->initializeModel();
}

OAINewTicketMessage::~OAINewTicketMessage() {}

void OAINewTicketMessage::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAINewTicketMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewTicketMessage::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAINewTicketMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewTicketMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAINewTicketMessage::getBody() const {
    return m_body;
}
void OAINewTicketMessage::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINewTicketMessage::is_body_Set() const{
    return m_body_isSet;
}

bool OAINewTicketMessage::is_body_Valid() const{
    return m_body_isValid;
}

QString OAINewTicketMessage::getVisibility() const {
    return m_visibility;
}
void OAINewTicketMessage::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAINewTicketMessage::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAINewTicketMessage::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAINewTicketMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewTicketMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_visibility_isValid && true;
}

} // namespace OpenAPI
