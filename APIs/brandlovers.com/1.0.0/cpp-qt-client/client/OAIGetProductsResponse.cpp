/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetProductsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetProductsResponse::OAIGetProductsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetProductsResponse::OAIGetProductsResponse() {
    this->initializeModel();
}

OAIGetProductsResponse::~OAIGetProductsResponse() {}

void OAIGetProductsResponse::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_skus_isSet = false;
    m_skus_isValid = false;
}

void OAIGetProductsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetProductsResponse::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_skus_isValid = ::OpenAPI::fromJsonValue(m_skus, json[QString("skus")]);
    m_skus_isSet = !json[QString("skus")].isNull() && m_skus_isValid;
}

QString OAIGetProductsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetProductsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_skus.size() > 0) {
        obj.insert(QString("skus"), ::OpenAPI::toJsonValue(m_skus));
    }
    return obj;
}

QList<OAIMetadata> OAIGetProductsResponse::getMetadata() const {
    return m_metadata;
}
void OAIGetProductsResponse::setMetadata(const QList<OAIMetadata> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetProductsResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetProductsResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIGetProduct> OAIGetProductsResponse::getSkus() const {
    return m_skus;
}
void OAIGetProductsResponse::setSkus(const QList<OAIGetProduct> &skus) {
    m_skus = skus;
    m_skus_isSet = true;
}

bool OAIGetProductsResponse::is_skus_Set() const{
    return m_skus_isSet;
}

bool OAIGetProductsResponse::is_skus_Valid() const{
    return m_skus_isValid;
}

bool OAIGetProductsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skus.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetProductsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
