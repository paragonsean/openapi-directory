/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_main_isSet = false;
    m_main_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_main_isValid = ::OpenAPI::fromJsonValue(m_main, json[QString("main")]);
    m_main_isSet = !json[QString("main")].isNull() && m_main_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_main_isSet) {
        obj.insert(QString("main"), ::OpenAPI::toJsonValue(m_main));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIImage::isMain() const {
    return m_main;
}
void OAIImage::setMain(const bool &main) {
    m_main = main;
    m_main_isSet = true;
}

bool OAIImage::is_main_Set() const{
    return m_main_isSet;
}

bool OAIImage::is_main_Valid() const{
    return m_main_isValid;
}

QString OAIImage::getType() const {
    return m_type;
}
void OAIImage::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImage::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImage::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIImage::getUrl() const {
    return m_url;
}
void OAIImage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImage::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_main_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_main_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
