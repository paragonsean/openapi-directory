/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISellerItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISellerItem::OAISellerItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISellerItem::OAISellerItem() {
    this->initializeModel();
}

OAISellerItem::~OAISellerItem() {}

void OAISellerItem::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_gift_wrap_isSet = false;
    m_gift_wrap_isValid = false;

    m_gtin_isSet = false;
    m_gtin_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_prices_isSet = false;
    m_prices_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_sku_seller_id_isSet = false;
    m_sku_seller_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stocks_isSet = false;
    m_stocks_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAISellerItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISellerItem::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_gift_wrap_isValid = ::OpenAPI::fromJsonValue(m_gift_wrap, json[QString("giftWrap")]);
    m_gift_wrap_isSet = !json[QString("giftWrap")].isNull() && m_gift_wrap_isValid;

    m_gtin_isValid = ::OpenAPI::fromJsonValue(m_gtin, json[QString("gtin")]);
    m_gtin_isSet = !json[QString("gtin")].isNull() && m_gtin_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_prices_isValid = ::OpenAPI::fromJsonValue(m_prices, json[QString("prices")]);
    m_prices_isSet = !json[QString("prices")].isNull() && m_prices_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_sku_seller_id_isValid = ::OpenAPI::fromJsonValue(m_sku_seller_id, json[QString("skuSellerId")]);
    m_sku_seller_id_isSet = !json[QString("skuSellerId")].isNull() && m_sku_seller_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stocks_isValid = ::OpenAPI::fromJsonValue(m_stocks, json[QString("stocks")]);
    m_stocks_isSet = !json[QString("stocks")].isNull() && m_stocks_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAISellerItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISellerItem::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_gift_wrap.isSet()) {
        obj.insert(QString("giftWrap"), ::OpenAPI::toJsonValue(m_gift_wrap));
    }
    if (m_gtin.size() > 0) {
        obj.insert(QString("gtin"), ::OpenAPI::toJsonValue(m_gtin));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_prices.size() > 0) {
        obj.insert(QString("prices"), ::OpenAPI::toJsonValue(m_prices));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_sku_seller_id_isSet) {
        obj.insert(QString("skuSellerId"), ::OpenAPI::toJsonValue(m_sku_seller_id));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stocks.size() > 0) {
        obj.insert(QString("stocks"), ::OpenAPI::toJsonValue(m_stocks));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

QList<OAIProductAttribute> OAISellerItem::getAttributes() const {
    return m_attributes;
}
void OAISellerItem::setAttributes(const QList<OAIProductAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISellerItem::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISellerItem::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAISellerItem::getBrand() const {
    return m_brand;
}
void OAISellerItem::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAISellerItem::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAISellerItem::is_brand_Valid() const{
    return m_brand_isValid;
}

OAIDimensions OAISellerItem::getDimensions() const {
    return m_dimensions;
}
void OAISellerItem::setDimensions(const OAIDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAISellerItem::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAISellerItem::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAIGiftWrap OAISellerItem::getGiftWrap() const {
    return m_gift_wrap;
}
void OAISellerItem::setGiftWrap(const OAIGiftWrap &gift_wrap) {
    m_gift_wrap = gift_wrap;
    m_gift_wrap_isSet = true;
}

bool OAISellerItem::is_gift_wrap_Set() const{
    return m_gift_wrap_isSet;
}

bool OAISellerItem::is_gift_wrap_Valid() const{
    return m_gift_wrap_isValid;
}

QList<QString> OAISellerItem::getGtin() const {
    return m_gtin;
}
void OAISellerItem::setGtin(const QList<QString> &gtin) {
    m_gtin = gtin;
    m_gtin_isSet = true;
}

bool OAISellerItem::is_gtin_Set() const{
    return m_gtin_isSet;
}

bool OAISellerItem::is_gtin_Valid() const{
    return m_gtin_isValid;
}

QList<OAIImage> OAISellerItem::getImages() const {
    return m_images;
}
void OAISellerItem::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAISellerItem::is_images_Set() const{
    return m_images_isSet;
}

bool OAISellerItem::is_images_Valid() const{
    return m_images_isValid;
}

QList<OAIProductPrice> OAISellerItem::getPrices() const {
    return m_prices;
}
void OAISellerItem::setPrices(const QList<OAIProductPrice> &prices) {
    m_prices = prices;
    m_prices_isSet = true;
}

bool OAISellerItem::is_prices_Set() const{
    return m_prices_isSet;
}

bool OAISellerItem::is_prices_Valid() const{
    return m_prices_isValid;
}

OAIProductReference OAISellerItem::getProduct() const {
    return m_product;
}
void OAISellerItem::setProduct(const OAIProductReference &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAISellerItem::is_product_Set() const{
    return m_product_isSet;
}

bool OAISellerItem::is_product_Valid() const{
    return m_product_isValid;
}

QString OAISellerItem::getSkuSellerId() const {
    return m_sku_seller_id;
}
void OAISellerItem::setSkuSellerId(const QString &sku_seller_id) {
    m_sku_seller_id = sku_seller_id;
    m_sku_seller_id_isSet = true;
}

bool OAISellerItem::is_sku_seller_id_Set() const{
    return m_sku_seller_id_isSet;
}

bool OAISellerItem::is_sku_seller_id_Valid() const{
    return m_sku_seller_id_isValid;
}

QList<OAISellerItemStatus> OAISellerItem::getStatus() const {
    return m_status;
}
void OAISellerItem::setStatus(const QList<OAISellerItemStatus> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISellerItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAISellerItem::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIControlledStock> OAISellerItem::getStocks() const {
    return m_stocks;
}
void OAISellerItem::setStocks(const QList<OAIControlledStock> &stocks) {
    m_stocks = stocks;
    m_stocks_isSet = true;
}

bool OAISellerItem::is_stocks_Set() const{
    return m_stocks_isSet;
}

bool OAISellerItem::is_stocks_Valid() const{
    return m_stocks_isValid;
}

QString OAISellerItem::getTitle() const {
    return m_title;
}
void OAISellerItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISellerItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAISellerItem::is_title_Valid() const{
    return m_title_isValid;
}

QList<OAIProductSiteReference> OAISellerItem::getUrls() const {
    return m_urls;
}
void OAISellerItem::setUrls(const QList<OAIProductSiteReference> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAISellerItem::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAISellerItem::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAISellerItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_wrap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtin.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stocks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISellerItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attributes_isValid && m_brand_isValid && m_dimensions_isValid && m_images_isValid && m_prices_isValid && m_product_isValid && m_sku_seller_id_isValid && m_status_isValid && m_stocks_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
