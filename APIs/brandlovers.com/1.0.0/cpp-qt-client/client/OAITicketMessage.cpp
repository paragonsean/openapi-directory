/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketMessage::OAITicketMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketMessage::OAITicketMessage() {
    this->initializeModel();
}

OAITicketMessage::~OAITicketMessage() {}

void OAITicketMessage::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAITicketMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicketMessage::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAITicketMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicketMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAITicketMessage::getBody() const {
    return m_body;
}
void OAITicketMessage::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITicketMessage::is_body_Set() const{
    return m_body_isSet;
}

bool OAITicketMessage::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAITicketMessage::getCreatedAt() const {
    return m_created_at;
}
void OAITicketMessage::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITicketMessage::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITicketMessage::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITicketMessage::getId() const {
    return m_id;
}
void OAITicketMessage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITicketMessage::is_id_Set() const{
    return m_id_isSet;
}

bool OAITicketMessage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITicketMessage::getVisibility() const {
    return m_visibility;
}
void OAITicketMessage::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAITicketMessage::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAITicketMessage::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAITicketMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicketMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_created_at_isValid && m_id_isValid && m_visibility_isValid && true;
}

} // namespace OpenAPI
