/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGiftWrap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGiftWrap::OAIGiftWrap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGiftWrap::OAIGiftWrap() {
    this->initializeModel();
}

OAIGiftWrap::~OAIGiftWrap() {}

void OAIGiftWrap::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_message_support_isSet = false;
    m_message_support_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGiftWrap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGiftWrap::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_message_support_isValid = ::OpenAPI::fromJsonValue(m_message_support, json[QString("messageSupport")]);
    m_message_support_isSet = !json[QString("messageSupport")].isNull() && m_message_support_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGiftWrap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGiftWrap::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_message_support_isSet) {
        obj.insert(QString("messageSupport"), ::OpenAPI::toJsonValue(m_message_support));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIGiftWrap::isAvailable() const {
    return m_available;
}
void OAIGiftWrap::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIGiftWrap::is_available_Set() const{
    return m_available_isSet;
}

bool OAIGiftWrap::is_available_Valid() const{
    return m_available_isValid;
}

bool OAIGiftWrap::isMessageSupport() const {
    return m_message_support;
}
void OAIGiftWrap::setMessageSupport(const bool &message_support) {
    m_message_support = message_support;
    m_message_support_isSet = true;
}

bool OAIGiftWrap::is_message_support_Set() const{
    return m_message_support_isSet;
}

bool OAIGiftWrap::is_message_support_Valid() const{
    return m_message_support_isValid;
}

qint32 OAIGiftWrap::getValue() const {
    return m_value;
}
void OAIGiftWrap::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGiftWrap::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGiftWrap::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGiftWrap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGiftWrap::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
