/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStock::OAIStock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStock::OAIStock() {
    this->initializeModel();
}

OAIStock::~OAIStock() {}

void OAIStock::initializeModel() {

    m_cross_docking_time_isSet = false;
    m_cross_docking_time_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAIStock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStock::fromJsonObject(QJsonObject json) {

    m_cross_docking_time_isValid = ::OpenAPI::fromJsonValue(m_cross_docking_time, json[QString("crossDockingTime")]);
    m_cross_docking_time_isSet = !json[QString("crossDockingTime")].isNull() && m_cross_docking_time_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAIStock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStock::asJsonObject() const {
    QJsonObject obj;
    if (m_cross_docking_time_isSet) {
        obj.insert(QString("crossDockingTime"), ::OpenAPI::toJsonValue(m_cross_docking_time));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

qint32 OAIStock::getCrossDockingTime() const {
    return m_cross_docking_time;
}
void OAIStock::setCrossDockingTime(const qint32 &cross_docking_time) {
    m_cross_docking_time = cross_docking_time;
    m_cross_docking_time_isSet = true;
}

bool OAIStock::is_cross_docking_time_Set() const{
    return m_cross_docking_time_isSet;
}

bool OAIStock::is_cross_docking_time_Valid() const{
    return m_cross_docking_time_isValid;
}

qint32 OAIStock::getQuantity() const {
    return m_quantity;
}
void OAIStock::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIStock::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIStock::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIStock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cross_docking_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStock::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_quantity_isValid && true;
}

} // namespace OpenAPI
