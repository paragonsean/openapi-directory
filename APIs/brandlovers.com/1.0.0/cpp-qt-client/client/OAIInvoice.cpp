/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoice::OAIInvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoice::OAIInvoice() {
    this->initializeModel();
}

OAIInvoice::~OAIInvoice() {}

void OAIInvoice::initializeModel() {

    m_access_key_isSet = false;
    m_access_key_isValid = false;

    m_cnpj_isSet = false;
    m_cnpj_isValid = false;

    m_issued_at_isSet = false;
    m_issued_at_isValid = false;

    m_link_danfe_isSet = false;
    m_link_danfe_isValid = false;

    m_link_xml_isSet = false;
    m_link_xml_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_serie_isSet = false;
    m_serie_isValid = false;
}

void OAIInvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoice::fromJsonObject(QJsonObject json) {

    m_access_key_isValid = ::OpenAPI::fromJsonValue(m_access_key, json[QString("accessKey")]);
    m_access_key_isSet = !json[QString("accessKey")].isNull() && m_access_key_isValid;

    m_cnpj_isValid = ::OpenAPI::fromJsonValue(m_cnpj, json[QString("cnpj")]);
    m_cnpj_isSet = !json[QString("cnpj")].isNull() && m_cnpj_isValid;

    m_issued_at_isValid = ::OpenAPI::fromJsonValue(m_issued_at, json[QString("issuedAt")]);
    m_issued_at_isSet = !json[QString("issuedAt")].isNull() && m_issued_at_isValid;

    m_link_danfe_isValid = ::OpenAPI::fromJsonValue(m_link_danfe, json[QString("linkDanfe")]);
    m_link_danfe_isSet = !json[QString("linkDanfe")].isNull() && m_link_danfe_isValid;

    m_link_xml_isValid = ::OpenAPI::fromJsonValue(m_link_xml, json[QString("linkXml")]);
    m_link_xml_isSet = !json[QString("linkXml")].isNull() && m_link_xml_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_serie_isValid = ::OpenAPI::fromJsonValue(m_serie, json[QString("serie")]);
    m_serie_isSet = !json[QString("serie")].isNull() && m_serie_isValid;
}

QString OAIInvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_access_key_isSet) {
        obj.insert(QString("accessKey"), ::OpenAPI::toJsonValue(m_access_key));
    }
    if (m_cnpj_isSet) {
        obj.insert(QString("cnpj"), ::OpenAPI::toJsonValue(m_cnpj));
    }
    if (m_issued_at_isSet) {
        obj.insert(QString("issuedAt"), ::OpenAPI::toJsonValue(m_issued_at));
    }
    if (m_link_danfe_isSet) {
        obj.insert(QString("linkDanfe"), ::OpenAPI::toJsonValue(m_link_danfe));
    }
    if (m_link_xml_isSet) {
        obj.insert(QString("linkXml"), ::OpenAPI::toJsonValue(m_link_xml));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_serie_isSet) {
        obj.insert(QString("serie"), ::OpenAPI::toJsonValue(m_serie));
    }
    return obj;
}

QString OAIInvoice::getAccessKey() const {
    return m_access_key;
}
void OAIInvoice::setAccessKey(const QString &access_key) {
    m_access_key = access_key;
    m_access_key_isSet = true;
}

bool OAIInvoice::is_access_key_Set() const{
    return m_access_key_isSet;
}

bool OAIInvoice::is_access_key_Valid() const{
    return m_access_key_isValid;
}

QString OAIInvoice::getCnpj() const {
    return m_cnpj;
}
void OAIInvoice::setCnpj(const QString &cnpj) {
    m_cnpj = cnpj;
    m_cnpj_isSet = true;
}

bool OAIInvoice::is_cnpj_Set() const{
    return m_cnpj_isSet;
}

bool OAIInvoice::is_cnpj_Valid() const{
    return m_cnpj_isValid;
}

QDateTime OAIInvoice::getIssuedAt() const {
    return m_issued_at;
}
void OAIInvoice::setIssuedAt(const QDateTime &issued_at) {
    m_issued_at = issued_at;
    m_issued_at_isSet = true;
}

bool OAIInvoice::is_issued_at_Set() const{
    return m_issued_at_isSet;
}

bool OAIInvoice::is_issued_at_Valid() const{
    return m_issued_at_isValid;
}

QString OAIInvoice::getLinkDanfe() const {
    return m_link_danfe;
}
void OAIInvoice::setLinkDanfe(const QString &link_danfe) {
    m_link_danfe = link_danfe;
    m_link_danfe_isSet = true;
}

bool OAIInvoice::is_link_danfe_Set() const{
    return m_link_danfe_isSet;
}

bool OAIInvoice::is_link_danfe_Valid() const{
    return m_link_danfe_isValid;
}

QString OAIInvoice::getLinkXml() const {
    return m_link_xml;
}
void OAIInvoice::setLinkXml(const QString &link_xml) {
    m_link_xml = link_xml;
    m_link_xml_isSet = true;
}

bool OAIInvoice::is_link_xml_Set() const{
    return m_link_xml_isSet;
}

bool OAIInvoice::is_link_xml_Valid() const{
    return m_link_xml_isValid;
}

QString OAIInvoice::getNumber() const {
    return m_number;
}
void OAIInvoice::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIInvoice::is_number_Set() const{
    return m_number_isSet;
}

bool OAIInvoice::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIInvoice::getSerie() const {
    return m_serie;
}
void OAIInvoice::setSerie(const QString &serie) {
    m_serie = serie;
    m_serie_isSet = true;
}

bool OAIInvoice::is_serie_Set() const{
    return m_serie_isSet;
}

bool OAIInvoice::is_serie_Valid() const{
    return m_serie_isValid;
}

bool OAIInvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnpj_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_danfe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serie_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_key_isValid && m_number_isValid && m_serie_isValid && true;
}

} // namespace OpenAPI
