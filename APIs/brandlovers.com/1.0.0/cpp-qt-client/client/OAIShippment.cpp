/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippment::OAIShippment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippment::OAIShippment() {
    this->initializeModel();
}

OAIShippment::~OAIShippment() {}

void OAIShippment::initializeModel() {

    m_courier_isSet = false;
    m_courier_isValid = false;

    m_cte_isSet = false;
    m_cte_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_occurred_at_isSet = false;
    m_occurred_at_isValid = false;

    m_seller_shipment_id_isSet = false;
    m_seller_shipment_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_url_isSet = false;
    m_tracking_url_isValid = false;
}

void OAIShippment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippment::fromJsonObject(QJsonObject json) {

    m_courier_isValid = ::OpenAPI::fromJsonValue(m_courier, json[QString("courier")]);
    m_courier_isSet = !json[QString("courier")].isNull() && m_courier_isValid;

    m_cte_isValid = ::OpenAPI::fromJsonValue(m_cte, json[QString("cte")]);
    m_cte_isSet = !json[QString("cte")].isNull() && m_cte_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("invoice")]);
    m_invoice_isSet = !json[QString("invoice")].isNull() && m_invoice_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_occurred_at, json[QString("occurredAt")]);
    m_occurred_at_isSet = !json[QString("occurredAt")].isNull() && m_occurred_at_isValid;

    m_seller_shipment_id_isValid = ::OpenAPI::fromJsonValue(m_seller_shipment_id, json[QString("sellerShipmentId")]);
    m_seller_shipment_id_isSet = !json[QString("sellerShipmentId")].isNull() && m_seller_shipment_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_tracking_url, json[QString("trackingUrl")]);
    m_tracking_url_isSet = !json[QString("trackingUrl")].isNull() && m_tracking_url_isValid;
}

QString OAIShippment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippment::asJsonObject() const {
    QJsonObject obj;
    if (m_courier.isSet()) {
        obj.insert(QString("courier"), ::OpenAPI::toJsonValue(m_courier));
    }
    if (m_cte_isSet) {
        obj.insert(QString("cte"), ::OpenAPI::toJsonValue(m_cte));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice.isSet()) {
        obj.insert(QString("invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_occurred_at_isSet) {
        obj.insert(QString("occurredAt"), ::OpenAPI::toJsonValue(m_occurred_at));
    }
    if (m_seller_shipment_id_isSet) {
        obj.insert(QString("sellerShipmentId"), ::OpenAPI::toJsonValue(m_seller_shipment_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_url_isSet) {
        obj.insert(QString("trackingUrl"), ::OpenAPI::toJsonValue(m_tracking_url));
    }
    return obj;
}

OAICourier OAIShippment::getCourier() const {
    return m_courier;
}
void OAIShippment::setCourier(const OAICourier &courier) {
    m_courier = courier;
    m_courier_isSet = true;
}

bool OAIShippment::is_courier_Set() const{
    return m_courier_isSet;
}

bool OAIShippment::is_courier_Valid() const{
    return m_courier_isValid;
}

QString OAIShippment::getCte() const {
    return m_cte;
}
void OAIShippment::setCte(const QString &cte) {
    m_cte = cte;
    m_cte_isSet = true;
}

bool OAIShippment::is_cte_Set() const{
    return m_cte_isSet;
}

bool OAIShippment::is_cte_Valid() const{
    return m_cte_isValid;
}

QString OAIShippment::getDescription() const {
    return m_description;
}
void OAIShippment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIShippment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIShippment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIShippment::getId() const {
    return m_id;
}
void OAIShippment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShippment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShippment::is_id_Valid() const{
    return m_id_isValid;
}

OAIInvoice OAIShippment::getInvoice() const {
    return m_invoice;
}
void OAIShippment::setInvoice(const OAIInvoice &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIShippment::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIShippment::is_invoice_Valid() const{
    return m_invoice_isValid;
}

QList<OAIOrderItemReference> OAIShippment::getItems() const {
    return m_items;
}
void OAIShippment::setItems(const QList<OAIOrderItemReference> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIShippment::is_items_Set() const{
    return m_items_isSet;
}

bool OAIShippment::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIShippment::getNumber() const {
    return m_number;
}
void OAIShippment::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIShippment::is_number_Set() const{
    return m_number_isSet;
}

bool OAIShippment::is_number_Valid() const{
    return m_number_isValid;
}

QDateTime OAIShippment::getOccurredAt() const {
    return m_occurred_at;
}
void OAIShippment::setOccurredAt(const QDateTime &occurred_at) {
    m_occurred_at = occurred_at;
    m_occurred_at_isSet = true;
}

bool OAIShippment::is_occurred_at_Set() const{
    return m_occurred_at_isSet;
}

bool OAIShippment::is_occurred_at_Valid() const{
    return m_occurred_at_isValid;
}

QString OAIShippment::getSellerShipmentId() const {
    return m_seller_shipment_id;
}
void OAIShippment::setSellerShipmentId(const QString &seller_shipment_id) {
    m_seller_shipment_id = seller_shipment_id;
    m_seller_shipment_id_isSet = true;
}

bool OAIShippment::is_seller_shipment_id_Set() const{
    return m_seller_shipment_id_isSet;
}

bool OAIShippment::is_seller_shipment_id_Valid() const{
    return m_seller_shipment_id_isValid;
}

QString OAIShippment::getStatus() const {
    return m_status;
}
void OAIShippment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIShippment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIShippment::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIShippment::getTrackingUrl() const {
    return m_tracking_url;
}
void OAIShippment::setTrackingUrl(const QString &tracking_url) {
    m_tracking_url = tracking_url;
    m_tracking_url_isSet = true;
}

bool OAIShippment::is_tracking_url_Set() const{
    return m_tracking_url_isSet;
}

bool OAIShippment::is_tracking_url_Valid() const{
    return m_tracking_url_isValid;
}

bool OAIShippment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_courier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_shipment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_courier_isValid && m_invoice_isValid && m_items_isValid && m_occurred_at_isValid && m_seller_shipment_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
