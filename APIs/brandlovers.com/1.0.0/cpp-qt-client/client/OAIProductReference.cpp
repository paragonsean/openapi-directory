/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductReference::OAIProductReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductReference::OAIProductReference() {
    this->initializeModel();
}

OAIProductReference::~OAIProductReference() {}

void OAIProductReference::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIProductReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductReference::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIProductReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductReference::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIProductReference::getHref() const {
    return m_href;
}
void OAIProductReference::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIProductReference::is_href_Set() const{
    return m_href_isSet;
}

bool OAIProductReference::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIProductReference::getId() const {
    return m_id;
}
void OAIProductReference::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProductReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProductReference::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIProductReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
