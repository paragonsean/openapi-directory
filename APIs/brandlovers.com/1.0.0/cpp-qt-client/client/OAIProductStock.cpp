/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductStock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductStock::OAIProductStock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductStock::OAIProductStock() {
    this->initializeModel();
}

OAIProductStock::~OAIProductStock() {}

void OAIProductStock::initializeModel() {

    m_sku_seller_id_isSet = false;
    m_sku_seller_id_isValid = false;

    m_stocks_isSet = false;
    m_stocks_isValid = false;
}

void OAIProductStock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductStock::fromJsonObject(QJsonObject json) {

    m_sku_seller_id_isValid = ::OpenAPI::fromJsonValue(m_sku_seller_id, json[QString("skuSellerId")]);
    m_sku_seller_id_isSet = !json[QString("skuSellerId")].isNull() && m_sku_seller_id_isValid;

    m_stocks_isValid = ::OpenAPI::fromJsonValue(m_stocks, json[QString("stocks")]);
    m_stocks_isSet = !json[QString("stocks")].isNull() && m_stocks_isValid;
}

QString OAIProductStock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductStock::asJsonObject() const {
    QJsonObject obj;
    if (m_sku_seller_id_isSet) {
        obj.insert(QString("skuSellerId"), ::OpenAPI::toJsonValue(m_sku_seller_id));
    }
    if (m_stocks.size() > 0) {
        obj.insert(QString("stocks"), ::OpenAPI::toJsonValue(m_stocks));
    }
    return obj;
}

QString OAIProductStock::getSkuSellerId() const {
    return m_sku_seller_id;
}
void OAIProductStock::setSkuSellerId(const QString &sku_seller_id) {
    m_sku_seller_id = sku_seller_id;
    m_sku_seller_id_isSet = true;
}

bool OAIProductStock::is_sku_seller_id_Set() const{
    return m_sku_seller_id_isSet;
}

bool OAIProductStock::is_sku_seller_id_Valid() const{
    return m_sku_seller_id_isValid;
}

QList<OAIStock> OAIProductStock::getStocks() const {
    return m_stocks;
}
void OAIProductStock::setStocks(const QList<OAIStock> &stocks) {
    m_stocks = stocks;
    m_stocks_isSet = true;
}

bool OAIProductStock::is_stocks_Set() const{
    return m_stocks_isSet;
}

bool OAIProductStock::is_stocks_Valid() const{
    return m_stocks_isValid;
}

bool OAIProductStock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sku_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stocks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductStock::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sku_seller_id_isValid && m_stocks_isValid && true;
}

} // namespace OpenAPI
