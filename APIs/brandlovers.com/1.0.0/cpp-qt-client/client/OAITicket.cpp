/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicket::OAITicket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicket::OAITicket() {
    this->initializeModel();
}

OAITicket::~OAITicket() {}

void OAITicket::initializeModel() {

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_sla_isSet = false;
    m_sla_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_ticket_id_isSet = false;
    m_ticket_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITicket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicket::fromJsonObject(QJsonObject json) {

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closedAt")]);
    m_closed_at_isSet = !json[QString("closedAt")].isNull() && m_closed_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_sla_isValid = ::OpenAPI::fromJsonValue(m_sla, json[QString("sla")]);
    m_sla_isSet = !json[QString("sla")].isNull() && m_sla_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_ticket_id_isValid = ::OpenAPI::fromJsonValue(m_ticket_id, json[QString("ticketId")]);
    m_ticket_id_isSet = !json[QString("ticketId")].isNull() && m_ticket_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAITicket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicket::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_at_isSet) {
        obj.insert(QString("closedAt"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_sla_isSet) {
        obj.insert(QString("sla"), ::OpenAPI::toJsonValue(m_sla));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_ticket_id_isSet) {
        obj.insert(QString("ticketId"), ::OpenAPI::toJsonValue(m_ticket_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAITicket::getClosedAt() const {
    return m_closed_at;
}
void OAITicket::setClosedAt(const QDateTime &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAITicket::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAITicket::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

QDateTime OAITicket::getCreatedAt() const {
    return m_created_at;
}
void OAITicket::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITicket::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITicket::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICustomerReference OAITicket::getCustomer() const {
    return m_customer;
}
void OAITicket::setCustomer(const OAICustomerReference &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAITicket::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAITicket::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAITicket::getDescription() const {
    return m_description;
}
void OAITicket::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITicket::is_description_Set() const{
    return m_description_isSet;
}

bool OAITicket::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIMetadata> OAITicket::getMetadata() const {
    return m_metadata;
}
void OAITicket::setMetadata(const QList<OAIMetadata> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAITicket::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAITicket::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAITicket::getPriority() const {
    return m_priority;
}
void OAITicket::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITicket::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITicket::is_priority_Valid() const{
    return m_priority_isValid;
}

QDateTime OAITicket::getSla() const {
    return m_sla;
}
void OAITicket::setSla(const QDateTime &sla) {
    m_sla = sla;
    m_sla_isSet = true;
}

bool OAITicket::is_sla_Set() const{
    return m_sla_isSet;
}

bool OAITicket::is_sla_Valid() const{
    return m_sla_isValid;
}

QString OAITicket::getStatus() const {
    return m_status;
}
void OAITicket::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITicket::is_status_Set() const{
    return m_status_isSet;
}

bool OAITicket::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITicket::getSubject() const {
    return m_subject;
}
void OAITicket::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAITicket::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAITicket::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAITicket::getTicketId() const {
    return m_ticket_id;
}
void OAITicket::setTicketId(const QString &ticket_id) {
    m_ticket_id = ticket_id;
    m_ticket_id_isSet = true;
}

bool OAITicket::is_ticket_id_Set() const{
    return m_ticket_id_isSet;
}

bool OAITicket::is_ticket_id_Valid() const{
    return m_ticket_id_isValid;
}

QString OAITicket::getType() const {
    return m_type;
}
void OAITicket::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITicket::is_type_Set() const{
    return m_type_isSet;
}

bool OAITicket::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAITicket::getUpdatedAt() const {
    return m_updated_at;
}
void OAITicket::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITicket::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITicket::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITicket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sla_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
