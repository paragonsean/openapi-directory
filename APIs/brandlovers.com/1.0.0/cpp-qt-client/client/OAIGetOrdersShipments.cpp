/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrdersShipments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrdersShipments::OAIGetOrdersShipments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrdersShipments::OAIGetOrdersShipments() {
    this->initializeModel();
}

OAIGetOrdersShipments::~OAIGetOrdersShipments() {}

void OAIGetOrdersShipments::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_shipments_isSet = false;
    m_shipments_isValid = false;
}

void OAIGetOrdersShipments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrdersShipments::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_shipments_isValid = ::OpenAPI::fromJsonValue(m_shipments, json[QString("shipments")]);
    m_shipments_isSet = !json[QString("shipments")].isNull() && m_shipments_isValid;
}

QString OAIGetOrdersShipments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrdersShipments::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_shipments.size() > 0) {
        obj.insert(QString("shipments"), ::OpenAPI::toJsonValue(m_shipments));
    }
    return obj;
}

QList<OAIMetadata> OAIGetOrdersShipments::getMetadata() const {
    return m_metadata;
}
void OAIGetOrdersShipments::setMetadata(const QList<OAIMetadata> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetOrdersShipments::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetOrdersShipments::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIOrderShippmentStatus> OAIGetOrdersShipments::getShipments() const {
    return m_shipments;
}
void OAIGetOrdersShipments::setShipments(const QList<OAIOrderShippmentStatus> &shipments) {
    m_shipments = shipments;
    m_shipments_isSet = true;
}

bool OAIGetOrdersShipments::is_shipments_Set() const{
    return m_shipments_isSet;
}

bool OAIGetOrdersShipments::is_shipments_Valid() const{
    return m_shipments_isValid;
}

bool OAIGetOrdersShipments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrdersShipments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
