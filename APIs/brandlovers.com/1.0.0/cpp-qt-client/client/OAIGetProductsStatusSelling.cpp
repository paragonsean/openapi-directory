/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetProductsStatusSelling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetProductsStatusSelling::OAIGetProductsStatusSelling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetProductsStatusSelling::OAIGetProductsStatusSelling() {
    this->initializeModel();
}

OAIGetProductsStatusSelling::~OAIGetProductsStatusSelling() {}

void OAIGetProductsStatusSelling::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_seller_items_isSet = false;
    m_seller_items_isValid = false;
}

void OAIGetProductsStatusSelling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetProductsStatusSelling::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_seller_items_isValid = ::OpenAPI::fromJsonValue(m_seller_items, json[QString("sellerItems")]);
    m_seller_items_isSet = !json[QString("sellerItems")].isNull() && m_seller_items_isValid;
}

QString OAIGetProductsStatusSelling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetProductsStatusSelling::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_seller_items.size() > 0) {
        obj.insert(QString("sellerItems"), ::OpenAPI::toJsonValue(m_seller_items));
    }
    return obj;
}

QList<OAIMetadata> OAIGetProductsStatusSelling::getMetadata() const {
    return m_metadata;
}
void OAIGetProductsStatusSelling::setMetadata(const QList<OAIMetadata> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetProductsStatusSelling::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetProductsStatusSelling::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAISellerItem> OAIGetProductsStatusSelling::getSellerItems() const {
    return m_seller_items;
}
void OAIGetProductsStatusSelling::setSellerItems(const QList<OAISellerItem> &seller_items) {
    m_seller_items = seller_items;
    m_seller_items_isSet = true;
}

bool OAIGetProductsStatusSelling::is_seller_items_Set() const{
    return m_seller_items_isSet;
}

bool OAIGetProductsStatusSelling::is_seller_items_Valid() const{
    return m_seller_items_isValid;
}

bool OAIGetProductsStatusSelling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetProductsStatusSelling::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metadata_isValid && m_seller_items_isValid && true;
}

} // namespace OpenAPI
