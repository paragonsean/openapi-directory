/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewTrackingRefund.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewTrackingRefund::OAINewTrackingRefund(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewTrackingRefund::OAINewTrackingRefund() {
    this->initializeModel();
}

OAINewTrackingRefund::~OAINewTrackingRefund() {}

void OAINewTrackingRefund::initializeModel() {

    m_courier_isSet = false;
    m_courier_isValid = false;

    m_cte_isSet = false;
    m_cte_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_occurred_at_isSet = false;
    m_occurred_at_isValid = false;

    m_seller_shipment_id_isSet = false;
    m_seller_shipment_id_isValid = false;

    m_trancking_url_isSet = false;
    m_trancking_url_isValid = false;
}

void OAINewTrackingRefund::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewTrackingRefund::fromJsonObject(QJsonObject json) {

    m_courier_isValid = ::OpenAPI::fromJsonValue(m_courier, json[QString("courier")]);
    m_courier_isSet = !json[QString("courier")].isNull() && m_courier_isValid;

    m_cte_isValid = ::OpenAPI::fromJsonValue(m_cte, json[QString("cte")]);
    m_cte_isSet = !json[QString("cte")].isNull() && m_cte_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_occurred_at, json[QString("occurredAt")]);
    m_occurred_at_isSet = !json[QString("occurredAt")].isNull() && m_occurred_at_isValid;

    m_seller_shipment_id_isValid = ::OpenAPI::fromJsonValue(m_seller_shipment_id, json[QString("sellerShipmentId")]);
    m_seller_shipment_id_isSet = !json[QString("sellerShipmentId")].isNull() && m_seller_shipment_id_isValid;

    m_trancking_url_isValid = ::OpenAPI::fromJsonValue(m_trancking_url, json[QString("tranckingUrl")]);
    m_trancking_url_isSet = !json[QString("tranckingUrl")].isNull() && m_trancking_url_isValid;
}

QString OAINewTrackingRefund::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewTrackingRefund::asJsonObject() const {
    QJsonObject obj;
    if (m_courier.isSet()) {
        obj.insert(QString("courier"), ::OpenAPI::toJsonValue(m_courier));
    }
    if (m_cte_isSet) {
        obj.insert(QString("cte"), ::OpenAPI::toJsonValue(m_cte));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_occurred_at_isSet) {
        obj.insert(QString("occurredAt"), ::OpenAPI::toJsonValue(m_occurred_at));
    }
    if (m_seller_shipment_id_isSet) {
        obj.insert(QString("sellerShipmentId"), ::OpenAPI::toJsonValue(m_seller_shipment_id));
    }
    if (m_trancking_url_isSet) {
        obj.insert(QString("tranckingUrl"), ::OpenAPI::toJsonValue(m_trancking_url));
    }
    return obj;
}

OAICourier OAINewTrackingRefund::getCourier() const {
    return m_courier;
}
void OAINewTrackingRefund::setCourier(const OAICourier &courier) {
    m_courier = courier;
    m_courier_isSet = true;
}

bool OAINewTrackingRefund::is_courier_Set() const{
    return m_courier_isSet;
}

bool OAINewTrackingRefund::is_courier_Valid() const{
    return m_courier_isValid;
}

QString OAINewTrackingRefund::getCte() const {
    return m_cte;
}
void OAINewTrackingRefund::setCte(const QString &cte) {
    m_cte = cte;
    m_cte_isSet = true;
}

bool OAINewTrackingRefund::is_cte_Set() const{
    return m_cte_isSet;
}

bool OAINewTrackingRefund::is_cte_Valid() const{
    return m_cte_isValid;
}

QString OAINewTrackingRefund::getInfo() const {
    return m_info;
}
void OAINewTrackingRefund::setInfo(const QString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAINewTrackingRefund::is_info_Set() const{
    return m_info_isSet;
}

bool OAINewTrackingRefund::is_info_Valid() const{
    return m_info_isValid;
}

QList<OAIOrderItemReference> OAINewTrackingRefund::getItems() const {
    return m_items;
}
void OAINewTrackingRefund::setItems(const QList<OAIOrderItemReference> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAINewTrackingRefund::is_items_Set() const{
    return m_items_isSet;
}

bool OAINewTrackingRefund::is_items_Valid() const{
    return m_items_isValid;
}

QString OAINewTrackingRefund::getNumber() const {
    return m_number;
}
void OAINewTrackingRefund::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAINewTrackingRefund::is_number_Set() const{
    return m_number_isSet;
}

bool OAINewTrackingRefund::is_number_Valid() const{
    return m_number_isValid;
}

QDateTime OAINewTrackingRefund::getOccurredAt() const {
    return m_occurred_at;
}
void OAINewTrackingRefund::setOccurredAt(const QDateTime &occurred_at) {
    m_occurred_at = occurred_at;
    m_occurred_at_isSet = true;
}

bool OAINewTrackingRefund::is_occurred_at_Set() const{
    return m_occurred_at_isSet;
}

bool OAINewTrackingRefund::is_occurred_at_Valid() const{
    return m_occurred_at_isValid;
}

QString OAINewTrackingRefund::getSellerShipmentId() const {
    return m_seller_shipment_id;
}
void OAINewTrackingRefund::setSellerShipmentId(const QString &seller_shipment_id) {
    m_seller_shipment_id = seller_shipment_id;
    m_seller_shipment_id_isSet = true;
}

bool OAINewTrackingRefund::is_seller_shipment_id_Set() const{
    return m_seller_shipment_id_isSet;
}

bool OAINewTrackingRefund::is_seller_shipment_id_Valid() const{
    return m_seller_shipment_id_isValid;
}

QString OAINewTrackingRefund::getTranckingUrl() const {
    return m_trancking_url;
}
void OAINewTrackingRefund::setTranckingUrl(const QString &trancking_url) {
    m_trancking_url = trancking_url;
    m_trancking_url_isSet = true;
}

bool OAINewTrackingRefund::is_trancking_url_Set() const{
    return m_trancking_url_isSet;
}

bool OAINewTrackingRefund::is_trancking_url_Valid() const{
    return m_trancking_url_isValid;
}

bool OAINewTrackingRefund::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_courier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_shipment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trancking_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewTrackingRefund::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_info_isValid && m_items_isValid && true;
}

} // namespace OpenAPI
