/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewTicket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewTicket::OAINewTicket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewTicket::OAINewTicket() {
    this->initializeModel();
}

OAINewTicket::~OAINewTicket() {}

void OAINewTicket::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINewTicket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewTicket::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINewTicket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewTicket::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAINewTicket::getBody() const {
    return m_body;
}
void OAINewTicket::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINewTicket::is_body_Set() const{
    return m_body_isSet;
}

bool OAINewTicket::is_body_Valid() const{
    return m_body_isValid;
}

OAICustomerReference OAINewTicket::getCustomer() const {
    return m_customer;
}
void OAINewTicket::setCustomer(const OAICustomerReference &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAINewTicket::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAINewTicket::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAINewTicket::getDescription() const {
    return m_description;
}
void OAINewTicket::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINewTicket::is_description_Set() const{
    return m_description_isSet;
}

bool OAINewTicket::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINewTicket::getFrom() const {
    return m_from;
}
void OAINewTicket::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAINewTicket::is_from_Set() const{
    return m_from_isSet;
}

bool OAINewTicket::is_from_Valid() const{
    return m_from_isValid;
}

OAINewTicketMessage OAINewTicket::getMessage() const {
    return m_message;
}
void OAINewTicket::setMessage(const OAINewTicketMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINewTicket::is_message_Set() const{
    return m_message_isSet;
}

bool OAINewTicket::is_message_Valid() const{
    return m_message_isValid;
}

QString OAINewTicket::getOrderId() const {
    return m_order_id;
}
void OAINewTicket::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAINewTicket::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAINewTicket::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAINewTicket::getType() const {
    return m_type;
}
void OAINewTicket::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINewTicket::is_type_Set() const{
    return m_type_isSet;
}

bool OAINewTicket::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINewTicket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewTicket::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_from_isValid && m_order_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
