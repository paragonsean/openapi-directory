/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_gift_wrap_isSet = false;
    m_gift_wrap_isValid = false;

    m_gtin_isSet = false;
    m_gtin_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_product_group_id_isSet = false;
    m_product_group_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_sku_seller_id_isSet = false;
    m_sku_seller_id_isValid = false;

    m_stock_isSet = false;
    m_stock_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_gift_wrap_isValid = ::OpenAPI::fromJsonValue(m_gift_wrap, json[QString("giftWrap")]);
    m_gift_wrap_isSet = !json[QString("giftWrap")].isNull() && m_gift_wrap_isValid;

    m_gtin_isValid = ::OpenAPI::fromJsonValue(m_gtin, json[QString("gtin")]);
    m_gtin_isSet = !json[QString("gtin")].isNull() && m_gtin_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_product_group_id_isValid = ::OpenAPI::fromJsonValue(m_product_group_id, json[QString("productGroupId")]);
    m_product_group_id_isSet = !json[QString("productGroupId")].isNull() && m_product_group_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_sku_seller_id_isValid = ::OpenAPI::fromJsonValue(m_sku_seller_id, json[QString("skuSellerId")]);
    m_sku_seller_id_isSet = !json[QString("skuSellerId")].isNull() && m_sku_seller_id_isValid;

    m_stock_isValid = ::OpenAPI::fromJsonValue(m_stock, json[QString("stock")]);
    m_stock_isSet = !json[QString("stock")].isNull() && m_stock_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_gift_wrap.isSet()) {
        obj.insert(QString("giftWrap"), ::OpenAPI::toJsonValue(m_gift_wrap));
    }
    if (m_gtin.size() > 0) {
        obj.insert(QString("gtin"), ::OpenAPI::toJsonValue(m_gtin));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_product_group_id_isSet) {
        obj.insert(QString("productGroupId"), ::OpenAPI::toJsonValue(m_product_group_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_sku_seller_id_isSet) {
        obj.insert(QString("skuSellerId"), ::OpenAPI::toJsonValue(m_sku_seller_id));
    }
    if (m_stock_isSet) {
        obj.insert(QString("stock"), ::OpenAPI::toJsonValue(m_stock));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_videos.size() > 0) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    return obj;
}

QList<OAIProductAttribute> OAIProduct::getAttributes() const {
    return m_attributes;
}
void OAIProduct::setAttributes(const QList<OAIProductAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIProduct::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIProduct::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIProduct::getBrand() const {
    return m_brand;
}
void OAIProduct::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIProduct::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIProduct::is_brand_Valid() const{
    return m_brand_isValid;
}

QList<QString> OAIProduct::getCategories() const {
    return m_categories;
}
void OAIProduct::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIProduct::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIProduct::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIProduct::getDescription() const {
    return m_description;
}
void OAIProduct::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProduct::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProduct::is_description_Valid() const{
    return m_description_isValid;
}

OAIDimensions OAIProduct::getDimensions() const {
    return m_dimensions;
}
void OAIProduct::setDimensions(const OAIDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIProduct::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIProduct::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAIGiftWrap OAIProduct::getGiftWrap() const {
    return m_gift_wrap;
}
void OAIProduct::setGiftWrap(const OAIGiftWrap &gift_wrap) {
    m_gift_wrap = gift_wrap;
    m_gift_wrap_isSet = true;
}

bool OAIProduct::is_gift_wrap_Set() const{
    return m_gift_wrap_isSet;
}

bool OAIProduct::is_gift_wrap_Valid() const{
    return m_gift_wrap_isValid;
}

QList<QString> OAIProduct::getGtin() const {
    return m_gtin;
}
void OAIProduct::setGtin(const QList<QString> &gtin) {
    m_gtin = gtin;
    m_gtin_isSet = true;
}

bool OAIProduct::is_gtin_Set() const{
    return m_gtin_isSet;
}

bool OAIProduct::is_gtin_Valid() const{
    return m_gtin_isValid;
}

QList<QString> OAIProduct::getImages() const {
    return m_images;
}
void OAIProduct::setImages(const QList<QString> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIProduct::is_images_Set() const{
    return m_images_isSet;
}

bool OAIProduct::is_images_Valid() const{
    return m_images_isValid;
}

OAIProductPrice OAIProduct::getPrice() const {
    return m_price;
}
void OAIProduct::setPrice(const OAIProductPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProduct::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProduct::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIProduct::getProductGroupId() const {
    return m_product_group_id;
}
void OAIProduct::setProductGroupId(const QString &product_group_id) {
    m_product_group_id = product_group_id;
    m_product_group_id_isSet = true;
}

bool OAIProduct::is_product_group_id_Set() const{
    return m_product_group_id_isSet;
}

bool OAIProduct::is_product_group_id_Valid() const{
    return m_product_group_id_isValid;
}

QString OAIProduct::getProductId() const {
    return m_product_id;
}
void OAIProduct::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProduct::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProduct::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProduct::getSkuSellerId() const {
    return m_sku_seller_id;
}
void OAIProduct::setSkuSellerId(const QString &sku_seller_id) {
    m_sku_seller_id = sku_seller_id;
    m_sku_seller_id_isSet = true;
}

bool OAIProduct::is_sku_seller_id_Set() const{
    return m_sku_seller_id_isSet;
}

bool OAIProduct::is_sku_seller_id_Valid() const{
    return m_sku_seller_id_isValid;
}

qint32 OAIProduct::getStock() const {
    return m_stock;
}
void OAIProduct::setStock(const qint32 &stock) {
    m_stock = stock;
    m_stock_isSet = true;
}

bool OAIProduct::is_stock_Set() const{
    return m_stock_isSet;
}

bool OAIProduct::is_stock_Valid() const{
    return m_stock_isValid;
}

QString OAIProduct::getTitle() const {
    return m_title;
}
void OAIProduct::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProduct::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProduct::is_title_Valid() const{
    return m_title_isValid;
}

QList<QString> OAIProduct::getVideos() const {
    return m_videos;
}
void OAIProduct::setVideos(const QList<QString> &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIProduct::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIProduct::is_videos_Valid() const{
    return m_videos_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_wrap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtin.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attributes_isValid && m_brand_isValid && m_categories_isValid && m_description_isValid && m_images_isValid && m_price_isValid && m_sku_seller_id_isValid && m_stock_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
