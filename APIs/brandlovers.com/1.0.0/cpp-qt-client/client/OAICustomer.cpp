/**
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer::OAICustomer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer::OAICustomer() {
    this->initializeModel();
}

OAICustomer::~OAICustomer() {}

void OAICustomer::initializeModel() {

    m_document_number_isSet = false;
    m_document_number_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phones_isSet = false;
    m_phones_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICustomer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer::fromJsonObject(QJsonObject json) {

    m_document_number_isValid = ::OpenAPI::fromJsonValue(m_document_number, json[QString("documentNumber")]);
    m_document_number_isSet = !json[QString("documentNumber")].isNull() && m_document_number_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phones_isValid = ::OpenAPI::fromJsonValue(m_phones, json[QString("phones")]);
    m_phones_isSet = !json[QString("phones")].isNull() && m_phones_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICustomer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer::asJsonObject() const {
    QJsonObject obj;
    if (m_document_number_isSet) {
        obj.insert(QString("documentNumber"), ::OpenAPI::toJsonValue(m_document_number));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phones.size() > 0) {
        obj.insert(QString("phones"), ::OpenAPI::toJsonValue(m_phones));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICustomer::getDocumentNumber() const {
    return m_document_number;
}
void OAICustomer::setDocumentNumber(const QString &document_number) {
    m_document_number = document_number;
    m_document_number_isSet = true;
}

bool OAICustomer::is_document_number_Set() const{
    return m_document_number_isSet;
}

bool OAICustomer::is_document_number_Valid() const{
    return m_document_number_isValid;
}

QString OAICustomer::getEmail() const {
    return m_email;
}
void OAICustomer::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICustomer::is_email_Set() const{
    return m_email_isSet;
}

bool OAICustomer::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICustomer::getId() const {
    return m_id;
}
void OAICustomer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomer::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomer::getName() const {
    return m_name;
}
void OAICustomer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomer::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomer::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPhone> OAICustomer::getPhones() const {
    return m_phones;
}
void OAICustomer::setPhones(const QList<OAIPhone> &phones) {
    m_phones = phones;
    m_phones_isSet = true;
}

bool OAICustomer::is_phones_Set() const{
    return m_phones_isSet;
}

bool OAICustomer::is_phones_Valid() const{
    return m_phones_isValid;
}

QString OAICustomer::getType() const {
    return m_type;
}
void OAICustomer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomer::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomer::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICustomer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_number_isValid && m_id_isValid && m_name_isValid && m_phones_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
