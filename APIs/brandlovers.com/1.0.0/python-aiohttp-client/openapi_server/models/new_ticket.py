# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_reference import CustomerReference
from openapi_server.models.new_ticket_message import NewTicketMessage
from openapi_server import util


class NewTicket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, customer: CustomerReference=None, description: str=None, _from: str=None, message: NewTicketMessage=None, order_id: str=None, type: str=None):
        """NewTicket - a model defined in OpenAPI

        :param body: The body of this NewTicket.
        :param customer: The customer of this NewTicket.
        :param description: The description of this NewTicket.
        :param _from: The _from of this NewTicket.
        :param message: The message of this NewTicket.
        :param order_id: The order_id of this NewTicket.
        :param type: The type of this NewTicket.
        """
        self.openapi_types = {
            'body': str,
            'customer': CustomerReference,
            'description': str,
            '_from': str,
            'message': NewTicketMessage,
            'order_id': str,
            'type': str
        }

        self.attribute_map = {
            'body': 'body',
            'customer': 'customer',
            'description': 'description',
            '_from': 'from',
            'message': 'message',
            'order_id': 'orderId',
            'type': 'type'
        }

        self._body = body
        self._customer = customer
        self._description = description
        self.__from = _from
        self._message = message
        self._order_id = order_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewTicket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewTicket of this NewTicket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this NewTicket.

        Message to the customer

        :return: The body of this NewTicket.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this NewTicket.

        Message to the customer

        :param body: The body of this NewTicket.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def customer(self):
        """Gets the customer of this NewTicket.


        :return: The customer of this NewTicket.
        :rtype: CustomerReference
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this NewTicket.


        :param customer: The customer of this NewTicket.
        :type customer: CustomerReference
        """

        self._customer = customer

    @property
    def description(self):
        """Gets the description of this NewTicket.

        Trouble ticked brief description

        :return: The description of this NewTicket.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewTicket.

        Trouble ticked brief description

        :param description: The description of this NewTicket.
        :type description: str
        """

        self._description = description

    @property
    def _from(self):
        """Gets the _from of this NewTicket.

        Friendly name of the person sending this message, if not provided the seller `name` will be used

        :return: The _from of this NewTicket.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this NewTicket.

        Friendly name of the person sending this message, if not provided the seller `name` will be used

        :param _from: The _from of this NewTicket.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def message(self):
        """Gets the message of this NewTicket.


        :return: The message of this NewTicket.
        :rtype: NewTicketMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NewTicket.


        :param message: The message of this NewTicket.
        :type message: NewTicketMessage
        """

        self._message = message

    @property
    def order_id(self):
        """Gets the order_id of this NewTicket.

        Unique order Id that this trouble ticket belongs to

        :return: The order_id of this NewTicket.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this NewTicket.

        Unique order Id that this trouble ticket belongs to

        :param order_id: The order_id of this NewTicket.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def type(self):
        """Gets the type of this NewTicket.

        Trouble ticket type.

        :return: The type of this NewTicket.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewTicket.

        Trouble ticket type.

        :param type: The type of this NewTicket.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
