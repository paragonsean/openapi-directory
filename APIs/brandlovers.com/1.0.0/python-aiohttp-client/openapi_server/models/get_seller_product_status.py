# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.product_price import ProductPrice
from openapi_server import util


class GetSellerProductStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[Error]=None, price: ProductPrice=None, sku_seller_id: str=None, status: str=None, stock: int=None):
        """GetSellerProductStatus - a model defined in OpenAPI

        :param errors: The errors of this GetSellerProductStatus.
        :param price: The price of this GetSellerProductStatus.
        :param sku_seller_id: The sku_seller_id of this GetSellerProductStatus.
        :param status: The status of this GetSellerProductStatus.
        :param stock: The stock of this GetSellerProductStatus.
        """
        self.openapi_types = {
            'errors': List[Error],
            'price': ProductPrice,
            'sku_seller_id': str,
            'status': str,
            'stock': int
        }

        self.attribute_map = {
            'errors': 'errors',
            'price': 'price',
            'sku_seller_id': 'skuSellerId',
            'status': 'status',
            'stock': 'stock'
        }

        self._errors = errors
        self._price = price
        self._sku_seller_id = sku_seller_id
        self._status = status
        self._stock = stock

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSellerProductStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSellerProductStatus of this GetSellerProductStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this GetSellerProductStatus.


        :return: The errors of this GetSellerProductStatus.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GetSellerProductStatus.


        :param errors: The errors of this GetSellerProductStatus.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def price(self):
        """Gets the price of this GetSellerProductStatus.


        :return: The price of this GetSellerProductStatus.
        :rtype: ProductPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetSellerProductStatus.


        :param price: The price of this GetSellerProductStatus.
        :type price: ProductPrice
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def sku_seller_id(self):
        """Gets the sku_seller_id of this GetSellerProductStatus.

        Unique Product Id (SKU) in the seller system.

        :return: The sku_seller_id of this GetSellerProductStatus.
        :rtype: str
        """
        return self._sku_seller_id

    @sku_seller_id.setter
    def sku_seller_id(self, sku_seller_id):
        """Sets the sku_seller_id of this GetSellerProductStatus.

        Unique Product Id (SKU) in the seller system.

        :param sku_seller_id: The sku_seller_id of this GetSellerProductStatus.
        :type sku_seller_id: str
        """
        if sku_seller_id is None:
            raise ValueError("Invalid value for `sku_seller_id`, must not be `None`")

        self._sku_seller_id = sku_seller_id

    @property
    def status(self):
        """Gets the status of this GetSellerProductStatus.

        Product status in the marketplace

        :return: The status of this GetSellerProductStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetSellerProductStatus.

        Product status in the marketplace

        :param status: The status of this GetSellerProductStatus.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def stock(self):
        """Gets the stock of this GetSellerProductStatus.

        Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.

        :return: The stock of this GetSellerProductStatus.
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this GetSellerProductStatus.

        Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.

        :param stock: The stock of this GetSellerProductStatus.
        :type stock: int
        """
        if stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")

        self._stock = stock
