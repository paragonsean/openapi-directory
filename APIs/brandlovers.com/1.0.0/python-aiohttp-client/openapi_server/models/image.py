# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, main: bool=None, type: str=None, url: str=None):
        """Image - a model defined in OpenAPI

        :param main: The main of this Image.
        :param type: The type of this Image.
        :param url: The url of this Image.
        """
        self.openapi_types = {
            'main': bool,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'main': 'main',
            'type': 'type',
            'url': 'url'
        }

        self._main = main
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def main(self):
        """Gets the main of this Image.

        Sets as main image

        :return: The main of this Image.
        :rtype: bool
        """
        return self._main

    @main.setter
    def main(self, main):
        """Sets the main of this Image.

        Sets as main image

        :param main: The main of this Image.
        :type main: bool
        """
        if main is None:
            raise ValueError("Invalid value for `main`, must not be `None`")

        self._main = main

    @property
    def type(self):
        """Gets the type of this Image.

        Image format

        :return: The type of this Image.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Image.

        Image format

        :param type: The type of this Image.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this Image.

        Image URL

        :return: The url of this Image.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Image.

        Image URL

        :param url: The url of this Image.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
