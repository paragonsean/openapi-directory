# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.controlled_stock import ControlledStock
from openapi_server.models.dimensions import Dimensions
from openapi_server.models.gift_wrap import GiftWrap
from openapi_server.models.image import Image
from openapi_server.models.product_attribute import ProductAttribute
from openapi_server.models.product_price import ProductPrice
from openapi_server.models.product_reference import ProductReference
from openapi_server.models.product_site_reference import ProductSiteReference
from openapi_server.models.seller_item_status import SellerItemStatus
from openapi_server import util


class SellerItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[ProductAttribute]=None, brand: str=None, dimensions: Dimensions=None, gift_wrap: GiftWrap=None, gtin: List[str]=None, images: List[Image]=None, prices: List[ProductPrice]=None, product: ProductReference=None, sku_seller_id: str=None, status: List[SellerItemStatus]=None, stocks: List[ControlledStock]=None, title: str=None, urls: List[ProductSiteReference]=None):
        """SellerItem - a model defined in OpenAPI

        :param attributes: The attributes of this SellerItem.
        :param brand: The brand of this SellerItem.
        :param dimensions: The dimensions of this SellerItem.
        :param gift_wrap: The gift_wrap of this SellerItem.
        :param gtin: The gtin of this SellerItem.
        :param images: The images of this SellerItem.
        :param prices: The prices of this SellerItem.
        :param product: The product of this SellerItem.
        :param sku_seller_id: The sku_seller_id of this SellerItem.
        :param status: The status of this SellerItem.
        :param stocks: The stocks of this SellerItem.
        :param title: The title of this SellerItem.
        :param urls: The urls of this SellerItem.
        """
        self.openapi_types = {
            'attributes': List[ProductAttribute],
            'brand': str,
            'dimensions': Dimensions,
            'gift_wrap': GiftWrap,
            'gtin': List[str],
            'images': List[Image],
            'prices': List[ProductPrice],
            'product': ProductReference,
            'sku_seller_id': str,
            'status': List[SellerItemStatus],
            'stocks': List[ControlledStock],
            'title': str,
            'urls': List[ProductSiteReference]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'brand': 'brand',
            'dimensions': 'dimensions',
            'gift_wrap': 'giftWrap',
            'gtin': 'gtin',
            'images': 'images',
            'prices': 'prices',
            'product': 'product',
            'sku_seller_id': 'skuSellerId',
            'status': 'status',
            'stocks': 'stocks',
            'title': 'title',
            'urls': 'urls'
        }

        self._attributes = attributes
        self._brand = brand
        self._dimensions = dimensions
        self._gift_wrap = gift_wrap
        self._gtin = gtin
        self._images = images
        self._prices = prices
        self._product = product
        self._sku_seller_id = sku_seller_id
        self._status = status
        self._stocks = stocks
        self._title = title
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SellerItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SellerItem of this SellerItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this SellerItem.


        :return: The attributes of this SellerItem.
        :rtype: List[ProductAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SellerItem.


        :param attributes: The attributes of this SellerItem.
        :type attributes: List[ProductAttribute]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def brand(self):
        """Gets the brand of this SellerItem.

        Brand name

        :return: The brand of this SellerItem.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this SellerItem.

        Brand name

        :param brand: The brand of this SellerItem.
        :type brand: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def dimensions(self):
        """Gets the dimensions of this SellerItem.


        :return: The dimensions of this SellerItem.
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SellerItem.


        :param dimensions: The dimensions of this SellerItem.
        :type dimensions: Dimensions
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")

        self._dimensions = dimensions

    @property
    def gift_wrap(self):
        """Gets the gift_wrap of this SellerItem.


        :return: The gift_wrap of this SellerItem.
        :rtype: GiftWrap
        """
        return self._gift_wrap

    @gift_wrap.setter
    def gift_wrap(self, gift_wrap):
        """Sets the gift_wrap of this SellerItem.


        :param gift_wrap: The gift_wrap of this SellerItem.
        :type gift_wrap: GiftWrap
        """

        self._gift_wrap = gift_wrap

    @property
    def gtin(self):
        """Gets the gtin of this SellerItem.

        Array of product EAN and/or ISBN and/or ASIN codes

        :return: The gtin of this SellerItem.
        :rtype: List[str]
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this SellerItem.

        Array of product EAN and/or ISBN and/or ASIN codes

        :param gtin: The gtin of this SellerItem.
        :type gtin: List[str]
        """

        self._gtin = gtin

    @property
    def images(self):
        """Gets the images of this SellerItem.

        List of valid Product image URLs.

        :return: The images of this SellerItem.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this SellerItem.

        List of valid Product image URLs.

        :param images: The images of this SellerItem.
        :type images: List[Image]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def prices(self):
        """Gets the prices of this SellerItem.

        Price information for each marketplace that this product is listed

        :return: The prices of this SellerItem.
        :rtype: List[ProductPrice]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this SellerItem.

        Price information for each marketplace that this product is listed

        :param prices: The prices of this SellerItem.
        :type prices: List[ProductPrice]
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")

        self._prices = prices

    @property
    def product(self):
        """Gets the product of this SellerItem.


        :return: The product of this SellerItem.
        :rtype: ProductReference
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this SellerItem.


        :param product: The product of this SellerItem.
        :type product: ProductReference
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def sku_seller_id(self):
        """Gets the sku_seller_id of this SellerItem.

        Unique Product Id (SKU) in the seller system

        :return: The sku_seller_id of this SellerItem.
        :rtype: str
        """
        return self._sku_seller_id

    @sku_seller_id.setter
    def sku_seller_id(self, sku_seller_id):
        """Sets the sku_seller_id of this SellerItem.

        Unique Product Id (SKU) in the seller system

        :param sku_seller_id: The sku_seller_id of this SellerItem.
        :type sku_seller_id: str
        """
        if sku_seller_id is None:
            raise ValueError("Invalid value for `sku_seller_id`, must not be `None`")

        self._sku_seller_id = sku_seller_id

    @property
    def status(self):
        """Gets the status of this SellerItem.

        Product status for each marketplace that this product is listed

        :return: The status of this SellerItem.
        :rtype: List[SellerItemStatus]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SellerItem.

        Product status for each marketplace that this product is listed

        :param status: The status of this SellerItem.
        :type status: List[SellerItemStatus]
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def stocks(self):
        """Gets the stocks of this SellerItem.

        Invetory information for each marketplace that this product is listed

        :return: The stocks of this SellerItem.
        :rtype: List[ControlledStock]
        """
        return self._stocks

    @stocks.setter
    def stocks(self, stocks):
        """Sets the stocks of this SellerItem.

        Invetory information for each marketplace that this product is listed

        :param stocks: The stocks of this SellerItem.
        :type stocks: List[ControlledStock]
        """
        if stocks is None:
            raise ValueError("Invalid value for `stocks`, must not be `None`")

        self._stocks = stocks

    @property
    def title(self):
        """Gets the title of this SellerItem.

        Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace

        :return: The title of this SellerItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SellerItem.

        Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace

        :param title: The title of this SellerItem.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def urls(self):
        """Gets the urls of this SellerItem.

        List of URLs where the product is listed for sale

        :return: The urls of this SellerItem.
        :rtype: List[ProductSiteReference]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this SellerItem.

        List of URLs where the product is listed for sale

        :param urls: The urls of this SellerItem.
        :type urls: List[ProductSiteReference]
        """

        self._urls = urls
