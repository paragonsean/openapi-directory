# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.customer import Customer
from openapi_server.models.freight import Freight
from openapi_server.models.order_item import OrderItem
from openapi_server.models.seller import Seller
from openapi_server.models.shippment import Shippment
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved_at: datetime=None, billing_address: Address=None, created_at: datetime=None, customer: Customer=None, freight: Freight=None, items: List[OrderItem]=None, order_id: str=None, order_marketplace_id: str=None, seller: Seller=None, shipments: List[Shippment]=None, shipping_address: Address=None, status: str=None, total_amount: int=None, total_discount_amount: int=None, total_items_amount: int=None, total_shipping_amount: int=None, updated_at: datetime=None):
        """Order - a model defined in OpenAPI

        :param approved_at: The approved_at of this Order.
        :param billing_address: The billing_address of this Order.
        :param created_at: The created_at of this Order.
        :param customer: The customer of this Order.
        :param freight: The freight of this Order.
        :param items: The items of this Order.
        :param order_id: The order_id of this Order.
        :param order_marketplace_id: The order_marketplace_id of this Order.
        :param seller: The seller of this Order.
        :param shipments: The shipments of this Order.
        :param shipping_address: The shipping_address of this Order.
        :param status: The status of this Order.
        :param total_amount: The total_amount of this Order.
        :param total_discount_amount: The total_discount_amount of this Order.
        :param total_items_amount: The total_items_amount of this Order.
        :param total_shipping_amount: The total_shipping_amount of this Order.
        :param updated_at: The updated_at of this Order.
        """
        self.openapi_types = {
            'approved_at': datetime,
            'billing_address': Address,
            'created_at': datetime,
            'customer': Customer,
            'freight': Freight,
            'items': List[OrderItem],
            'order_id': str,
            'order_marketplace_id': str,
            'seller': Seller,
            'shipments': List[Shippment],
            'shipping_address': Address,
            'status': str,
            'total_amount': int,
            'total_discount_amount': int,
            'total_items_amount': int,
            'total_shipping_amount': int,
            'updated_at': datetime
        }

        self.attribute_map = {
            'approved_at': 'approvedAt',
            'billing_address': 'billingAddress',
            'created_at': 'createdAt',
            'customer': 'customer',
            'freight': 'freight',
            'items': 'items',
            'order_id': 'orderId',
            'order_marketplace_id': 'orderMarketplaceId',
            'seller': 'seller',
            'shipments': 'shipments',
            'shipping_address': 'shippingAddress',
            'status': 'status',
            'total_amount': 'totalAmount',
            'total_discount_amount': 'totalDiscountAmount',
            'total_items_amount': 'totalItemsAmount',
            'total_shipping_amount': 'totalShippingAmount',
            'updated_at': 'updatedAt'
        }

        self._approved_at = approved_at
        self._billing_address = billing_address
        self._created_at = created_at
        self._customer = customer
        self._freight = freight
        self._items = items
        self._order_id = order_id
        self._order_marketplace_id = order_marketplace_id
        self._seller = seller
        self._shipments = shipments
        self._shipping_address = shipping_address
        self._status = status
        self._total_amount = total_amount
        self._total_discount_amount = total_discount_amount
        self._total_items_amount = total_items_amount
        self._total_shipping_amount = total_shipping_amount
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved_at(self):
        """Gets the approved_at of this Order.

        Date that this order was approved for fullfilment

        :return: The approved_at of this Order.
        :rtype: datetime
        """
        return self._approved_at

    @approved_at.setter
    def approved_at(self, approved_at):
        """Sets the approved_at of this Order.

        Date that this order was approved for fullfilment

        :param approved_at: The approved_at of this Order.
        :type approved_at: datetime
        """

        self._approved_at = approved_at

    @property
    def billing_address(self):
        """Gets the billing_address of this Order.


        :return: The billing_address of this Order.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Order.


        :param billing_address: The billing_address of this Order.
        :type billing_address: Address
        """
        if billing_address is None:
            raise ValueError("Invalid value for `billing_address`, must not be `None`")

        self._billing_address = billing_address

    @property
    def created_at(self):
        """Gets the created_at of this Order.

        Date that this order was created

        :return: The created_at of this Order.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Order.

        Date that this order was created

        :param created_at: The created_at of this Order.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def customer(self):
        """Gets the customer of this Order.


        :return: The customer of this Order.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Order.


        :param customer: The customer of this Order.
        :type customer: Customer
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def freight(self):
        """Gets the freight of this Order.


        :return: The freight of this Order.
        :rtype: Freight
        """
        return self._freight

    @freight.setter
    def freight(self, freight):
        """Sets the freight of this Order.


        :param freight: The freight of this Order.
        :type freight: Freight
        """
        if freight is None:
            raise ValueError("Invalid value for `freight`, must not be `None`")

        self._freight = freight

    @property
    def items(self):
        """Gets the items of this Order.


        :return: The items of this Order.
        :rtype: List[OrderItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Order.


        :param items: The items of this Order.
        :type items: List[OrderItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def order_id(self):
        """Gets the order_id of this Order.

        Unique order Id (related to this seller)

        :return: The order_id of this Order.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Order.

        Unique order Id (related to this seller)

        :param order_id: The order_id of this Order.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def order_marketplace_id(self):
        """Gets the order_marketplace_id of this Order.

        Unique Order Id that will be displayed to the customer. This Id is not the same as `orderId`

        :return: The order_marketplace_id of this Order.
        :rtype: str
        """
        return self._order_marketplace_id

    @order_marketplace_id.setter
    def order_marketplace_id(self, order_marketplace_id):
        """Sets the order_marketplace_id of this Order.

        Unique Order Id that will be displayed to the customer. This Id is not the same as `orderId`

        :param order_marketplace_id: The order_marketplace_id of this Order.
        :type order_marketplace_id: str
        """
        if order_marketplace_id is None:
            raise ValueError("Invalid value for `order_marketplace_id`, must not be `None`")

        self._order_marketplace_id = order_marketplace_id

    @property
    def seller(self):
        """Gets the seller of this Order.


        :return: The seller of this Order.
        :rtype: Seller
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Order.


        :param seller: The seller of this Order.
        :type seller: Seller
        """

        self._seller = seller

    @property
    def shipments(self):
        """Gets the shipments of this Order.


        :return: The shipments of this Order.
        :rtype: List[Shippment]
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """Sets the shipments of this Order.


        :param shipments: The shipments of this Order.
        :type shipments: List[Shippment]
        """
        if shipments is None:
            raise ValueError("Invalid value for `shipments`, must not be `None`")

        self._shipments = shipments

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Order.


        :return: The shipping_address of this Order.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Order.


        :param shipping_address: The shipping_address of this Order.
        :type shipping_address: Address
        """
        if shipping_address is None:
            raise ValueError("Invalid value for `shipping_address`, must not be `None`")

        self._shipping_address = shipping_address

    @property
    def status(self):
        """Gets the status of this Order.

        Order status

        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.

        Order status

        :param status: The status of this Order.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def total_amount(self):
        """Gets the total_amount of this Order.

        Order total in cents, this is what the customer will be charged for. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :return: The total_amount of this Order.
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Order.

        Order total in cents, this is what the customer will be charged for. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :param total_amount: The total_amount of this Order.
        :type total_amount: int
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")

        self._total_amount = total_amount

    @property
    def total_discount_amount(self):
        """Gets the total_discount_amount of this Order.

        Total order discounts in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :return: The total_discount_amount of this Order.
        :rtype: int
        """
        return self._total_discount_amount

    @total_discount_amount.setter
    def total_discount_amount(self, total_discount_amount):
        """Sets the total_discount_amount of this Order.

        Total order discounts in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :param total_discount_amount: The total_discount_amount of this Order.
        :type total_discount_amount: int
        """
        if total_discount_amount is None:
            raise ValueError("Invalid value for `total_discount_amount`, must not be `None`")

        self._total_discount_amount = total_discount_amount

    @property
    def total_items_amount(self):
        """Gets the total_items_amount of this Order.

        Order items total amount in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :return: The total_items_amount of this Order.
        :rtype: int
        """
        return self._total_items_amount

    @total_items_amount.setter
    def total_items_amount(self, total_items_amount):
        """Sets the total_items_amount of this Order.

        Order items total amount in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :param total_items_amount: The total_items_amount of this Order.
        :type total_items_amount: int
        """
        if total_items_amount is None:
            raise ValueError("Invalid value for `total_items_amount`, must not be `None`")

        self._total_items_amount = total_items_amount

    @property
    def total_shipping_amount(self):
        """Gets the total_shipping_amount of this Order.

        Total shipments amount items. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :return: The total_shipping_amount of this Order.
        :rtype: int
        """
        return self._total_shipping_amount

    @total_shipping_amount.setter
    def total_shipping_amount(self, total_shipping_amount):
        """Sets the total_shipping_amount of this Order.

        Total shipments amount items. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :param total_shipping_amount: The total_shipping_amount of this Order.
        :type total_shipping_amount: int
        """
        if total_shipping_amount is None:
            raise ValueError("Invalid value for `total_shipping_amount`, must not be `None`")

        self._total_shipping_amount = total_shipping_amount

    @property
    def updated_at(self):
        """Gets the updated_at of this Order.

        Last update data of this order

        :return: The updated_at of this Order.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Order.

        Last update data of this order

        :param updated_at: The updated_at of this Order.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
