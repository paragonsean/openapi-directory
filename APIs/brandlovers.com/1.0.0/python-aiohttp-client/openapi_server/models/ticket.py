# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_reference import CustomerReference
from openapi_server.models.metadata import Metadata
from openapi_server import util


class Ticket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_at: datetime=None, created_at: datetime=None, customer: CustomerReference=None, description: str=None, metadata: List[Metadata]=None, priority: str=None, sla: datetime=None, status: str=None, subject: str=None, ticket_id: str=None, type: str=None, updated_at: datetime=None):
        """Ticket - a model defined in OpenAPI

        :param closed_at: The closed_at of this Ticket.
        :param created_at: The created_at of this Ticket.
        :param customer: The customer of this Ticket.
        :param description: The description of this Ticket.
        :param metadata: The metadata of this Ticket.
        :param priority: The priority of this Ticket.
        :param sla: The sla of this Ticket.
        :param status: The status of this Ticket.
        :param subject: The subject of this Ticket.
        :param ticket_id: The ticket_id of this Ticket.
        :param type: The type of this Ticket.
        :param updated_at: The updated_at of this Ticket.
        """
        self.openapi_types = {
            'closed_at': datetime,
            'created_at': datetime,
            'customer': CustomerReference,
            'description': str,
            'metadata': List[Metadata],
            'priority': str,
            'sla': datetime,
            'status': str,
            'subject': str,
            'ticket_id': str,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'closed_at': 'closedAt',
            'created_at': 'createdAt',
            'customer': 'customer',
            'description': 'description',
            'metadata': 'metadata',
            'priority': 'priority',
            'sla': 'sla',
            'status': 'status',
            'subject': 'subject',
            'ticket_id': 'ticketId',
            'type': 'type',
            'updated_at': 'updatedAt'
        }

        self._closed_at = closed_at
        self._created_at = created_at
        self._customer = customer
        self._description = description
        self._metadata = metadata
        self._priority = priority
        self._sla = sla
        self._status = status
        self._subject = subject
        self._ticket_id = ticket_id
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ticket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ticket of this Ticket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_at(self):
        """Gets the closed_at of this Ticket.

        Date-time when ticket was closed

        :return: The closed_at of this Ticket.
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this Ticket.

        Date-time when ticket was closed

        :param closed_at: The closed_at of this Ticket.
        :type closed_at: datetime
        """

        self._closed_at = closed_at

    @property
    def created_at(self):
        """Gets the created_at of this Ticket.

        Date time that ticket was created

        :return: The created_at of this Ticket.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Ticket.

        Date time that ticket was created

        :param created_at: The created_at of this Ticket.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def customer(self):
        """Gets the customer of this Ticket.


        :return: The customer of this Ticket.
        :rtype: CustomerReference
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Ticket.


        :param customer: The customer of this Ticket.
        :type customer: CustomerReference
        """

        self._customer = customer

    @property
    def description(self):
        """Gets the description of this Ticket.

        Trouble ticked brief description

        :return: The description of this Ticket.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Ticket.

        Trouble ticked brief description

        :param description: The description of this Ticket.
        :type description: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this Ticket.


        :return: The metadata of this Ticket.
        :rtype: List[Metadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Ticket.


        :param metadata: The metadata of this Ticket.
        :type metadata: List[Metadata]
        """

        self._metadata = metadata

    @property
    def priority(self):
        """Gets the priority of this Ticket.

        Trouble ticket priority

        :return: The priority of this Ticket.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Ticket.

        Trouble ticket priority

        :param priority: The priority of this Ticket.
        :type priority: str
        """

        self._priority = priority

    @property
    def sla(self):
        """Gets the sla of this Ticket.

        Date-time with a promisse for the customer when this ticket will be resolved

        :return: The sla of this Ticket.
        :rtype: datetime
        """
        return self._sla

    @sla.setter
    def sla(self, sla):
        """Sets the sla of this Ticket.

        Date-time with a promisse for the customer when this ticket will be resolved

        :param sla: The sla of this Ticket.
        :type sla: datetime
        """

        self._sla = sla

    @property
    def status(self):
        """Gets the status of this Ticket.

        Trouble Ticket status. 'OPEN','CLOSED','REOPENED'

        :return: The status of this Ticket.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Ticket.

        Trouble Ticket status. 'OPEN','CLOSED','REOPENED'

        :param status: The status of this Ticket.
        :type status: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this Ticket.

        Short one line title describing ticket.

        :return: The subject of this Ticket.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Ticket.

        Short one line title describing ticket.

        :param subject: The subject of this Ticket.
        :type subject: str
        """

        self._subject = subject

    @property
    def ticket_id(self):
        """Gets the ticket_id of this Ticket.

        Trouble Ticket unique identification Id

        :return: The ticket_id of this Ticket.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this Ticket.

        Trouble Ticket unique identification Id

        :param ticket_id: The ticket_id of this Ticket.
        :type ticket_id: str
        """

        self._ticket_id = ticket_id

    @property
    def type(self):
        """Gets the type of this Ticket.

        Trouble ticket type.

        :return: The type of this Ticket.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Ticket.

        Trouble ticket type.

        :param type: The type of this Ticket.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Ticket.

        Date-time with last update of this ticket

        :return: The updated_at of this Ticket.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Ticket.

        Date-time with last update of this ticket

        :param updated_at: The updated_at of this Ticket.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
