# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.freight import Freight
from openapi_server.models.order_gift_wrap import OrderGiftWrap
from openapi_server.models.promotion import Promotion
from openapi_server import util


class OrderItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, freight: Freight=None, gift_wrap: OrderGiftWrap=None, id: str=None, name: str=None, promotions: List[Promotion]=None, sale_price: int=None, sent: bool=None, sku_seller_id: str=None):
        """OrderItem - a model defined in OpenAPI

        :param freight: The freight of this OrderItem.
        :param gift_wrap: The gift_wrap of this OrderItem.
        :param id: The id of this OrderItem.
        :param name: The name of this OrderItem.
        :param promotions: The promotions of this OrderItem.
        :param sale_price: The sale_price of this OrderItem.
        :param sent: The sent of this OrderItem.
        :param sku_seller_id: The sku_seller_id of this OrderItem.
        """
        self.openapi_types = {
            'freight': Freight,
            'gift_wrap': OrderGiftWrap,
            'id': str,
            'name': str,
            'promotions': List[Promotion],
            'sale_price': int,
            'sent': bool,
            'sku_seller_id': str
        }

        self.attribute_map = {
            'freight': 'freight',
            'gift_wrap': 'giftWrap',
            'id': 'id',
            'name': 'name',
            'promotions': 'promotions',
            'sale_price': 'salePrice',
            'sent': 'sent',
            'sku_seller_id': 'skuSellerId'
        }

        self._freight = freight
        self._gift_wrap = gift_wrap
        self._id = id
        self._name = name
        self._promotions = promotions
        self._sale_price = sale_price
        self._sent = sent
        self._sku_seller_id = sku_seller_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderItem of this OrderItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def freight(self):
        """Gets the freight of this OrderItem.


        :return: The freight of this OrderItem.
        :rtype: Freight
        """
        return self._freight

    @freight.setter
    def freight(self, freight):
        """Sets the freight of this OrderItem.


        :param freight: The freight of this OrderItem.
        :type freight: Freight
        """
        if freight is None:
            raise ValueError("Invalid value for `freight`, must not be `None`")

        self._freight = freight

    @property
    def gift_wrap(self):
        """Gets the gift_wrap of this OrderItem.


        :return: The gift_wrap of this OrderItem.
        :rtype: OrderGiftWrap
        """
        return self._gift_wrap

    @gift_wrap.setter
    def gift_wrap(self, gift_wrap):
        """Sets the gift_wrap of this OrderItem.


        :param gift_wrap: The gift_wrap of this OrderItem.
        :type gift_wrap: OrderGiftWrap
        """

        self._gift_wrap = gift_wrap

    @property
    def id(self):
        """Gets the id of this OrderItem.

        Unique Id representing this item

        :return: The id of this OrderItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderItem.

        Unique Id representing this item

        :param id: The id of this OrderItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this OrderItem.

        Product name

        :return: The name of this OrderItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderItem.

        Product name

        :param name: The name of this OrderItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def promotions(self):
        """Gets the promotions of this OrderItem.

        Promotions array

        :return: The promotions of this OrderItem.
        :rtype: List[Promotion]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this OrderItem.

        Promotions array

        :param promotions: The promotions of this OrderItem.
        :type promotions: List[Promotion]
        """

        self._promotions = promotions

    @property
    def sale_price(self):
        """Gets the sale_price of this OrderItem.

        Product unit price

        :return: The sale_price of this OrderItem.
        :rtype: int
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this OrderItem.

        Product unit price

        :param sale_price: The sale_price of this OrderItem.
        :type sale_price: int
        """
        if sale_price is None:
            raise ValueError("Invalid value for `sale_price`, must not be `None`")

        self._sale_price = sale_price

    @property
    def sent(self):
        """Gets the sent of this OrderItem.

        Flag if product was already shipped

        :return: The sent of this OrderItem.
        :rtype: bool
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this OrderItem.

        Flag if product was already shipped

        :param sent: The sent of this OrderItem.
        :type sent: bool
        """
        if sent is None:
            raise ValueError("Invalid value for `sent`, must not be `None`")

        self._sent = sent

    @property
    def sku_seller_id(self):
        """Gets the sku_seller_id of this OrderItem.

        Unique Product Id (SKU) in the seller system

        :return: The sku_seller_id of this OrderItem.
        :rtype: str
        """
        return self._sku_seller_id

    @sku_seller_id.setter
    def sku_seller_id(self, sku_seller_id):
        """Sets the sku_seller_id of this OrderItem.

        Unique Product Id (SKU) in the seller system

        :param sku_seller_id: The sku_seller_id of this OrderItem.
        :type sku_seller_id: str
        """
        if sku_seller_id is None:
            raise ValueError("Invalid value for `sku_seller_id`, must not be `None`")

        self._sku_seller_id = sku_seller_id
