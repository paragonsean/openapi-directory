# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Invoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_key: str=None, cnpj: str=None, issued_at: datetime=None, link_danfe: str=None, link_xml: str=None, number: str=None, serie: str=None):
        """Invoice - a model defined in OpenAPI

        :param access_key: The access_key of this Invoice.
        :param cnpj: The cnpj of this Invoice.
        :param issued_at: The issued_at of this Invoice.
        :param link_danfe: The link_danfe of this Invoice.
        :param link_xml: The link_xml of this Invoice.
        :param number: The number of this Invoice.
        :param serie: The serie of this Invoice.
        """
        self.openapi_types = {
            'access_key': str,
            'cnpj': str,
            'issued_at': datetime,
            'link_danfe': str,
            'link_xml': str,
            'number': str,
            'serie': str
        }

        self.attribute_map = {
            'access_key': 'accessKey',
            'cnpj': 'cnpj',
            'issued_at': 'issuedAt',
            'link_danfe': 'linkDanfe',
            'link_xml': 'linkXml',
            'number': 'number',
            'serie': 'serie'
        }

        self._access_key = access_key
        self._cnpj = cnpj
        self._issued_at = issued_at
        self._link_danfe = link_danfe
        self._link_xml = link_xml
        self._number = number
        self._serie = serie

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoice of this Invoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_key(self):
        """Gets the access_key of this Invoice.

        Número da chave de acesso à nota fiscal. A chave possui 44 dígitos e contém todas as informações da DANFE

        :return: The access_key of this Invoice.
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this Invoice.

        Número da chave de acesso à nota fiscal. A chave possui 44 dígitos e contém todas as informações da DANFE

        :param access_key: The access_key of this Invoice.
        :type access_key: str
        """
        if access_key is None:
            raise ValueError("Invalid value for `access_key`, must not be `None`")

        self._access_key = access_key

    @property
    def cnpj(self):
        """Gets the cnpj of this Invoice.

        CNPJ responsável pelo envio dos produtos. Pode ser diferente caso a empresa possua diversos Centros de Distribuição (CDs)

        :return: The cnpj of this Invoice.
        :rtype: str
        """
        return self._cnpj

    @cnpj.setter
    def cnpj(self, cnpj):
        """Sets the cnpj of this Invoice.

        CNPJ responsável pelo envio dos produtos. Pode ser diferente caso a empresa possua diversos Centros de Distribuição (CDs)

        :param cnpj: The cnpj of this Invoice.
        :type cnpj: str
        """

        self._cnpj = cnpj

    @property
    def issued_at(self):
        """Gets the issued_at of this Invoice.

        Data de emissão da Nota Fiscal

        :return: The issued_at of this Invoice.
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this Invoice.

        Data de emissão da Nota Fiscal

        :param issued_at: The issued_at of this Invoice.
        :type issued_at: datetime
        """

        self._issued_at = issued_at

    @property
    def link_danfe(self):
        """Gets the link_danfe of this Invoice.

        Url para consulta da DANFE

        :return: The link_danfe of this Invoice.
        :rtype: str
        """
        return self._link_danfe

    @link_danfe.setter
    def link_danfe(self, link_danfe):
        """Sets the link_danfe of this Invoice.

        Url para consulta da DANFE

        :param link_danfe: The link_danfe of this Invoice.
        :type link_danfe: str
        """

        self._link_danfe = link_danfe

    @property
    def link_xml(self):
        """Gets the link_xml of this Invoice.

        Url para consulta da NFE

        :return: The link_xml of this Invoice.
        :rtype: str
        """
        return self._link_xml

    @link_xml.setter
    def link_xml(self, link_xml):
        """Sets the link_xml of this Invoice.

        Url para consulta da NFE

        :param link_xml: The link_xml of this Invoice.
        :type link_xml: str
        """

        self._link_xml = link_xml

    @property
    def number(self):
        """Gets the number of this Invoice.

        Número da Nota Fiscal

        :return: The number of this Invoice.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Invoice.

        Número da Nota Fiscal

        :param number: The number of this Invoice.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def serie(self):
        """Gets the serie of this Invoice.

        Número de serie da Nota Fiscal

        :return: The serie of this Invoice.
        :rtype: str
        """
        return self._serie

    @serie.setter
    def serie(self, serie):
        """Sets the serie of this Invoice.

        Número de serie da Nota Fiscal

        :param serie: The serie of this Invoice.
        :type serie: str
        """
        if serie is None:
            raise ValueError("Invalid value for `serie`, must not be `None`")

        self._serie = serie
