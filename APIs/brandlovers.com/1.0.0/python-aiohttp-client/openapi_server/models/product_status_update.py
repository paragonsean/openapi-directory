# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductStatusUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, sku_seller_id: str=None):
        """ProductStatusUpdate - a model defined in OpenAPI

        :param active: The active of this ProductStatusUpdate.
        :param sku_seller_id: The sku_seller_id of this ProductStatusUpdate.
        """
        self.openapi_types = {
            'active': bool,
            'sku_seller_id': str
        }

        self.attribute_map = {
            'active': 'active',
            'sku_seller_id': 'skuSellerId'
        }

        self._active = active
        self._sku_seller_id = sku_seller_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductStatusUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductStatusUpdate of this ProductStatusUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ProductStatusUpdate.

        Defines if this product is ready for sale. Active `true`, disabled `false`

        :return: The active of this ProductStatusUpdate.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProductStatusUpdate.

        Defines if this product is ready for sale. Active `true`, disabled `false`

        :param active: The active of this ProductStatusUpdate.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def sku_seller_id(self):
        """Gets the sku_seller_id of this ProductStatusUpdate.

        Seller product unique Id that will be updated

        :return: The sku_seller_id of this ProductStatusUpdate.
        :rtype: str
        """
        return self._sku_seller_id

    @sku_seller_id.setter
    def sku_seller_id(self, sku_seller_id):
        """Sets the sku_seller_id of this ProductStatusUpdate.

        Seller product unique Id that will be updated

        :param sku_seller_id: The sku_seller_id of this ProductStatusUpdate.
        :type sku_seller_id: str
        """
        if sku_seller_id is None:
            raise ValueError("Invalid value for `sku_seller_id`, must not be `None`")

        self._sku_seller_id = sku_seller_id
