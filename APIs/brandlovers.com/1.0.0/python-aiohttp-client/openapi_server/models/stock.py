# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Stock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cross_docking_time: int=None, quantity: int=None):
        """Stock - a model defined in OpenAPI

        :param cross_docking_time: The cross_docking_time of this Stock.
        :param quantity: The quantity of this Stock.
        """
        self.openapi_types = {
            'cross_docking_time': int,
            'quantity': int
        }

        self.attribute_map = {
            'cross_docking_time': 'crossDockingTime',
            'quantity': 'quantity'
        }

        self._cross_docking_time = cross_docking_time
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stock':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stock of this Stock.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cross_docking_time(self):
        """Gets the cross_docking_time of this Stock.

        Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer

        :return: The cross_docking_time of this Stock.
        :rtype: int
        """
        return self._cross_docking_time

    @cross_docking_time.setter
    def cross_docking_time(self, cross_docking_time):
        """Sets the cross_docking_time of this Stock.

        Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer

        :param cross_docking_time: The cross_docking_time of this Stock.
        :type cross_docking_time: int
        """

        self._cross_docking_time = cross_docking_time

    @property
    def quantity(self):
        """Gets the quantity of this Stock.

        Stock available

        :return: The quantity of this Stock.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Stock.

        Stock available

        :param quantity: The quantity of this Stock.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
