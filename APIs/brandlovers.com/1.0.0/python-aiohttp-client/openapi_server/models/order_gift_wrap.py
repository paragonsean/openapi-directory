# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gift_card import GiftCard
from openapi_server import util


class OrderGiftWrap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, gift_card: GiftCard=None, message_support: bool=None, value: int=None):
        """OrderGiftWrap - a model defined in OpenAPI

        :param available: The available of this OrderGiftWrap.
        :param gift_card: The gift_card of this OrderGiftWrap.
        :param message_support: The message_support of this OrderGiftWrap.
        :param value: The value of this OrderGiftWrap.
        """
        self.openapi_types = {
            'available': bool,
            'gift_card': GiftCard,
            'message_support': bool,
            'value': int
        }

        self.attribute_map = {
            'available': 'available',
            'gift_card': 'giftCard',
            'message_support': 'messageSupport',
            'value': 'value'
        }

        self._available = available
        self._gift_card = gift_card
        self._message_support = message_support
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderGiftWrap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderGiftWrap of this OrderGiftWrap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this OrderGiftWrap.

        Defines if giftwrpping is available for this product.

        :return: The available of this OrderGiftWrap.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this OrderGiftWrap.

        Defines if giftwrpping is available for this product.

        :param available: The available of this OrderGiftWrap.
        :type available: bool
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def gift_card(self):
        """Gets the gift_card of this OrderGiftWrap.


        :return: The gift_card of this OrderGiftWrap.
        :rtype: GiftCard
        """
        return self._gift_card

    @gift_card.setter
    def gift_card(self, gift_card):
        """Sets the gift_card of this OrderGiftWrap.


        :param gift_card: The gift_card of this OrderGiftWrap.
        :type gift_card: GiftCard
        """

        self._gift_card = gift_card

    @property
    def message_support(self):
        """Gets the message_support of this OrderGiftWrap.

        Defines if giftwrpping is available for this product.

        :return: The message_support of this OrderGiftWrap.
        :rtype: bool
        """
        return self._message_support

    @message_support.setter
    def message_support(self, message_support):
        """Sets the message_support of this OrderGiftWrap.

        Defines if giftwrpping is available for this product.

        :param message_support: The message_support of this OrderGiftWrap.
        :type message_support: bool
        """

        self._message_support = message_support

    @property
    def value(self):
        """Gets the value of this OrderGiftWrap.

        Amount charged for gift wrap. All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :return: The value of this OrderGiftWrap.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OrderGiftWrap.

        Amount charged for gift wrap. All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :param value: The value of this OrderGiftWrap.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
