# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TicketMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, created_at: datetime=None, id: str=None, visibility: str=None):
        """TicketMessage - a model defined in OpenAPI

        :param body: The body of this TicketMessage.
        :param created_at: The created_at of this TicketMessage.
        :param id: The id of this TicketMessage.
        :param visibility: The visibility of this TicketMessage.
        """
        self.openapi_types = {
            'body': str,
            'created_at': datetime,
            'id': str,
            'visibility': str
        }

        self.attribute_map = {
            'body': 'body',
            'created_at': 'createdAt',
            'id': 'id',
            'visibility': 'visibility'
        }

        self._body = body
        self._created_at = created_at
        self._id = id
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketMessage of this TicketMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this TicketMessage.

        Message text

        :return: The body of this TicketMessage.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TicketMessage.

        Message text

        :param body: The body of this TicketMessage.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this TicketMessage.

        Date created

        :return: The created_at of this TicketMessage.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TicketMessage.

        Date created

        :param created_at: The created_at of this TicketMessage.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this TicketMessage.

        Trouble Ticket Id.

        :return: The id of this TicketMessage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketMessage.

        Trouble Ticket Id.

        :param id: The id of this TicketMessage.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def visibility(self):
        """Gets the visibility of this TicketMessage.

        Defines if this message is `CUSTOMER` (customer will receive a copy) or `INTERNAL`

        :return: The visibility of this TicketMessage.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this TicketMessage.

        Defines if this message is `CUSTOMER` (customer will receive a copy) or `INTERNAL`

        :param visibility: The visibility of this TicketMessage.
        :type visibility: str
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")

        self._visibility = visibility
