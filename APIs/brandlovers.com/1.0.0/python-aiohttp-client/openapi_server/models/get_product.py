# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimensions import Dimensions
from openapi_server.models.error import Error
from openapi_server.models.gift_wrap import GiftWrap
from openapi_server.models.product_attribute import ProductAttribute
from openapi_server.models.product_price import ProductPrice
from openapi_server import util


class GetProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[ProductAttribute]=None, brand: str=None, categories: List[str]=None, description: str=None, dimensions: Dimensions=None, errors: List[Error]=None, gift_wrap: GiftWrap=None, gtin: List[str]=None, images: List[str]=None, price: ProductPrice=None, product_group_id: str=None, sku_seller_id: str=None, status: str=None, stock: int=None, title: str=None, videos: List[str]=None):
        """GetProduct - a model defined in OpenAPI

        :param attributes: The attributes of this GetProduct.
        :param brand: The brand of this GetProduct.
        :param categories: The categories of this GetProduct.
        :param description: The description of this GetProduct.
        :param dimensions: The dimensions of this GetProduct.
        :param errors: The errors of this GetProduct.
        :param gift_wrap: The gift_wrap of this GetProduct.
        :param gtin: The gtin of this GetProduct.
        :param images: The images of this GetProduct.
        :param price: The price of this GetProduct.
        :param product_group_id: The product_group_id of this GetProduct.
        :param sku_seller_id: The sku_seller_id of this GetProduct.
        :param status: The status of this GetProduct.
        :param stock: The stock of this GetProduct.
        :param title: The title of this GetProduct.
        :param videos: The videos of this GetProduct.
        """
        self.openapi_types = {
            'attributes': List[ProductAttribute],
            'brand': str,
            'categories': List[str],
            'description': str,
            'dimensions': Dimensions,
            'errors': List[Error],
            'gift_wrap': GiftWrap,
            'gtin': List[str],
            'images': List[str],
            'price': ProductPrice,
            'product_group_id': str,
            'sku_seller_id': str,
            'status': str,
            'stock': int,
            'title': str,
            'videos': List[str]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'brand': 'brand',
            'categories': 'categories',
            'description': 'description',
            'dimensions': 'dimensions',
            'errors': 'errors',
            'gift_wrap': 'giftWrap',
            'gtin': 'gtin',
            'images': 'images',
            'price': 'price',
            'product_group_id': 'productGroupId',
            'sku_seller_id': 'skuSellerId',
            'status': 'status',
            'stock': 'stock',
            'title': 'title',
            'videos': 'videos'
        }

        self._attributes = attributes
        self._brand = brand
        self._categories = categories
        self._description = description
        self._dimensions = dimensions
        self._errors = errors
        self._gift_wrap = gift_wrap
        self._gtin = gtin
        self._images = images
        self._price = price
        self._product_group_id = product_group_id
        self._sku_seller_id = sku_seller_id
        self._status = status
        self._stock = stock
        self._title = title
        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetProduct of this GetProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this GetProduct.


        :return: The attributes of this GetProduct.
        :rtype: List[ProductAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GetProduct.


        :param attributes: The attributes of this GetProduct.
        :type attributes: List[ProductAttribute]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def brand(self):
        """Gets the brand of this GetProduct.

        Brand name

        :return: The brand of this GetProduct.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this GetProduct.

        Brand name

        :param brand: The brand of this GetProduct.
        :type brand: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def categories(self):
        """Gets the categories of this GetProduct.

        Array of categories associated with this product

        :return: The categories of this GetProduct.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this GetProduct.

        Array of categories associated with this product

        :param categories: The categories of this GetProduct.
        :type categories: List[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def description(self):
        """Gets the description of this GetProduct.

        Product text description.

        :return: The description of this GetProduct.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetProduct.

        Product text description.

        :param description: The description of this GetProduct.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def dimensions(self):
        """Gets the dimensions of this GetProduct.


        :return: The dimensions of this GetProduct.
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this GetProduct.


        :param dimensions: The dimensions of this GetProduct.
        :type dimensions: Dimensions
        """

        self._dimensions = dimensions

    @property
    def errors(self):
        """Gets the errors of this GetProduct.


        :return: The errors of this GetProduct.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GetProduct.


        :param errors: The errors of this GetProduct.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def gift_wrap(self):
        """Gets the gift_wrap of this GetProduct.


        :return: The gift_wrap of this GetProduct.
        :rtype: GiftWrap
        """
        return self._gift_wrap

    @gift_wrap.setter
    def gift_wrap(self, gift_wrap):
        """Sets the gift_wrap of this GetProduct.


        :param gift_wrap: The gift_wrap of this GetProduct.
        :type gift_wrap: GiftWrap
        """

        self._gift_wrap = gift_wrap

    @property
    def gtin(self):
        """Gets the gtin of this GetProduct.

        Array of product EAN and/or ISBN and/or ASIN codes

        :return: The gtin of this GetProduct.
        :rtype: List[str]
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this GetProduct.

        Array of product EAN and/or ISBN and/or ASIN codes

        :param gtin: The gtin of this GetProduct.
        :type gtin: List[str]
        """

        self._gtin = gtin

    @property
    def images(self):
        """Gets the images of this GetProduct.

        List of valid Product image URLs. HTTP or HTTPS are valid. HTTPS is prefered.

        :return: The images of this GetProduct.
        :rtype: List[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this GetProduct.

        List of valid Product image URLs. HTTP or HTTPS are valid. HTTPS is prefered.

        :param images: The images of this GetProduct.
        :type images: List[str]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def price(self):
        """Gets the price of this GetProduct.


        :return: The price of this GetProduct.
        :rtype: ProductPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetProduct.


        :param price: The price of this GetProduct.
        :type price: ProductPrice
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def product_group_id(self):
        """Gets the product_group_id of this GetProduct.

        Unique Product Group ID. Products with the same `productGroupId` will be grouped and displayed as a unique entry. Use `productGroupId` to group diferent SKUs that represent diferent colors, sizes, capacities, etc..

        :return: The product_group_id of this GetProduct.
        :rtype: str
        """
        return self._product_group_id

    @product_group_id.setter
    def product_group_id(self, product_group_id):
        """Sets the product_group_id of this GetProduct.

        Unique Product Group ID. Products with the same `productGroupId` will be grouped and displayed as a unique entry. Use `productGroupId` to group diferent SKUs that represent diferent colors, sizes, capacities, etc..

        :param product_group_id: The product_group_id of this GetProduct.
        :type product_group_id: str
        """

        self._product_group_id = product_group_id

    @property
    def sku_seller_id(self):
        """Gets the sku_seller_id of this GetProduct.

        Unique Product Id (SKU) in the seller system

        :return: The sku_seller_id of this GetProduct.
        :rtype: str
        """
        return self._sku_seller_id

    @sku_seller_id.setter
    def sku_seller_id(self, sku_seller_id):
        """Sets the sku_seller_id of this GetProduct.

        Unique Product Id (SKU) in the seller system

        :param sku_seller_id: The sku_seller_id of this GetProduct.
        :type sku_seller_id: str
        """
        if sku_seller_id is None:
            raise ValueError("Invalid value for `sku_seller_id`, must not be `None`")

        self._sku_seller_id = sku_seller_id

    @property
    def status(self):
        """Gets the status of this GetProduct.

        Product status

        :return: The status of this GetProduct.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetProduct.

        Product status

        :param status: The status of this GetProduct.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def stock(self):
        """Gets the stock of this GetProduct.

        Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.

        :return: The stock of this GetProduct.
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this GetProduct.

        Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.

        :param stock: The stock of this GetProduct.
        :type stock: int
        """
        if stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")

        self._stock = stock

    @property
    def title(self):
        """Gets the title of this GetProduct.

        Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace

        :return: The title of this GetProduct.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetProduct.

        Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace

        :param title: The title of this GetProduct.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def videos(self):
        """Gets the videos of this GetProduct.

        List of videos de URLs associated with this product. HTTP or HTTPS are valid. HTTPS is prefered.

        :return: The videos of this GetProduct.
        :rtype: List[str]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this GetProduct.

        List of videos de URLs associated with this product. HTTP or HTTPS are valid. HTTPS is prefered.

        :param videos: The videos of this GetProduct.
        :type videos: List[str]
        """

        self._videos = videos
