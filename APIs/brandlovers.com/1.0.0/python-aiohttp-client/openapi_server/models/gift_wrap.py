# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GiftWrap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, message_support: bool=None, value: int=None):
        """GiftWrap - a model defined in OpenAPI

        :param available: The available of this GiftWrap.
        :param message_support: The message_support of this GiftWrap.
        :param value: The value of this GiftWrap.
        """
        self.openapi_types = {
            'available': bool,
            'message_support': bool,
            'value': int
        }

        self.attribute_map = {
            'available': 'available',
            'message_support': 'messageSupport',
            'value': 'value'
        }

        self._available = available
        self._message_support = message_support
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftWrap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GiftWrap of this GiftWrap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this GiftWrap.

        Flag that defines if this product is eligible for giftwrapping

        :return: The available of this GiftWrap.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this GiftWrap.

        Flag that defines if this product is eligible for giftwrapping

        :param available: The available of this GiftWrap.
        :type available: bool
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def message_support(self):
        """Gets the message_support of this GiftWrap.

        Flag that defines if seller supports giftwrapp with a message

        :return: The message_support of this GiftWrap.
        :rtype: bool
        """
        return self._message_support

    @message_support.setter
    def message_support(self, message_support):
        """Sets the message_support of this GiftWrap.

        Flag that defines if seller supports giftwrapp with a message

        :param message_support: The message_support of this GiftWrap.
        :type message_support: bool
        """

        self._message_support = message_support

    @property
    def value(self):
        """Gets the value of this GiftWrap.

        Amount charged for gift wrap. All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :return: The value of this GiftWrap.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GiftWrap.

        Amount charged for gift wrap. All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :param value: The value of this GiftWrap.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
