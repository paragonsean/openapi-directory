# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.phone import Phone
from openapi_server import util


class Customer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_number: str=None, email: str=None, id: str=None, name: str=None, phones: List[Phone]=None, type: str=None):
        """Customer - a model defined in OpenAPI

        :param document_number: The document_number of this Customer.
        :param email: The email of this Customer.
        :param id: The id of this Customer.
        :param name: The name of this Customer.
        :param phones: The phones of this Customer.
        :param type: The type of this Customer.
        """
        self.openapi_types = {
            'document_number': str,
            'email': str,
            'id': str,
            'name': str,
            'phones': List[Phone],
            'type': str
        }

        self.attribute_map = {
            'document_number': 'documentNumber',
            'email': 'email',
            'id': 'id',
            'name': 'name',
            'phones': 'phones',
            'type': 'type'
        }

        self._document_number = document_number
        self._email = email
        self._id = id
        self._name = name
        self._phones = phones
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Customer of this Customer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_number(self):
        """Gets the document_number of this Customer.

        Customer tax information

        :return: The document_number of this Customer.
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this Customer.

        Customer tax information

        :param document_number: The document_number of this Customer.
        :type document_number: str
        """
        if document_number is None:
            raise ValueError("Invalid value for `document_number`, must not be `None`")

        self._document_number = document_number

    @property
    def email(self):
        """Gets the email of this Customer.

        Customer Email (when available). Please note: Email is not a mandatory field

        :return: The email of this Customer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Customer.

        Customer Email (when available). Please note: Email is not a mandatory field

        :param email: The email of this Customer.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this Customer.

        Customer unqiue Id

        :return: The id of this Customer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.

        Customer unqiue Id

        :param id: The id of this Customer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Customer.

        Customer Name

        :return: The name of this Customer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Customer.

        Customer Name

        :param name: The name of this Customer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def phones(self):
        """Gets the phones of this Customer.

        Customer phone number

        :return: The phones of this Customer.
        :rtype: List[Phone]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this Customer.

        Customer phone number

        :param phones: The phones of this Customer.
        :type phones: List[Phone]
        """
        if phones is None:
            raise ValueError("Invalid value for `phones`, must not be `None`")

        self._phones = phones

    @property
    def type(self):
        """Gets the type of this Customer.

        Customer type: Enterprise or Consumer

        :return: The type of this Customer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Customer.

        Customer type: Enterprise or Consumer

        :param type: The type of this Customer.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
