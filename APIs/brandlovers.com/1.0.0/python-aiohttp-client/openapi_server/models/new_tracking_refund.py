# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.courier import Courier
from openapi_server.models.order_item_reference import OrderItemReference
from openapi_server import util


class NewTrackingRefund(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, courier: Courier=None, cte: str=None, info: str=None, items: List[OrderItemReference]=None, number: str=None, occurred_at: datetime=None, seller_shipment_id: str=None, trancking_url: str=None):
        """NewTrackingRefund - a model defined in OpenAPI

        :param courier: The courier of this NewTrackingRefund.
        :param cte: The cte of this NewTrackingRefund.
        :param info: The info of this NewTrackingRefund.
        :param items: The items of this NewTrackingRefund.
        :param number: The number of this NewTrackingRefund.
        :param occurred_at: The occurred_at of this NewTrackingRefund.
        :param seller_shipment_id: The seller_shipment_id of this NewTrackingRefund.
        :param trancking_url: The trancking_url of this NewTrackingRefund.
        """
        self.openapi_types = {
            'courier': Courier,
            'cte': str,
            'info': str,
            'items': List[OrderItemReference],
            'number': str,
            'occurred_at': datetime,
            'seller_shipment_id': str,
            'trancking_url': str
        }

        self.attribute_map = {
            'courier': 'courier',
            'cte': 'cte',
            'info': 'info',
            'items': 'items',
            'number': 'number',
            'occurred_at': 'occurredAt',
            'seller_shipment_id': 'sellerShipmentId',
            'trancking_url': 'tranckingUrl'
        }

        self._courier = courier
        self._cte = cte
        self._info = info
        self._items = items
        self._number = number
        self._occurred_at = occurred_at
        self._seller_shipment_id = seller_shipment_id
        self._trancking_url = trancking_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewTrackingRefund':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewTrackingRefund of this NewTrackingRefund.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def courier(self):
        """Gets the courier of this NewTrackingRefund.


        :return: The courier of this NewTrackingRefund.
        :rtype: Courier
        """
        return self._courier

    @courier.setter
    def courier(self, courier):
        """Sets the courier of this NewTrackingRefund.


        :param courier: The courier of this NewTrackingRefund.
        :type courier: Courier
        """

        self._courier = courier

    @property
    def cte(self):
        """Gets the cte of this NewTrackingRefund.

        Conhecimento do Transporte Eletrônico

        :return: The cte of this NewTrackingRefund.
        :rtype: str
        """
        return self._cte

    @cte.setter
    def cte(self, cte):
        """Sets the cte of this NewTrackingRefund.

        Conhecimento do Transporte Eletrônico

        :param cte: The cte of this NewTrackingRefund.
        :type cte: str
        """

        self._cte = cte

    @property
    def info(self):
        """Gets the info of this NewTrackingRefund.

        Aditional information about this shippment

        :return: The info of this NewTrackingRefund.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this NewTrackingRefund.

        Aditional information about this shippment

        :param info: The info of this NewTrackingRefund.
        :type info: str
        """
        if info is None:
            raise ValueError("Invalid value for `info`, must not be `None`")

        self._info = info

    @property
    def items(self):
        """Gets the items of this NewTrackingRefund.


        :return: The items of this NewTrackingRefund.
        :rtype: List[OrderItemReference]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this NewTrackingRefund.


        :param items: The items of this NewTrackingRefund.
        :type items: List[OrderItemReference]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def number(self):
        """Gets the number of this NewTrackingRefund.

        Tracking Id in the courier

        :return: The number of this NewTrackingRefund.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NewTrackingRefund.

        Tracking Id in the courier

        :param number: The number of this NewTrackingRefund.
        :type number: str
        """

        self._number = number

    @property
    def occurred_at(self):
        """Gets the occurred_at of this NewTrackingRefund.

        Date time that this was created

        :return: The occurred_at of this NewTrackingRefund.
        :rtype: datetime
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this NewTrackingRefund.

        Date time that this was created

        :param occurred_at: The occurred_at of this NewTrackingRefund.
        :type occurred_at: datetime
        """

        self._occurred_at = occurred_at

    @property
    def seller_shipment_id(self):
        """Gets the seller_shipment_id of this NewTrackingRefund.

        Unique Seller shipment Id. This must be unique across all orders and shipments

        :return: The seller_shipment_id of this NewTrackingRefund.
        :rtype: str
        """
        return self._seller_shipment_id

    @seller_shipment_id.setter
    def seller_shipment_id(self, seller_shipment_id):
        """Sets the seller_shipment_id of this NewTrackingRefund.

        Unique Seller shipment Id. This must be unique across all orders and shipments

        :param seller_shipment_id: The seller_shipment_id of this NewTrackingRefund.
        :type seller_shipment_id: str
        """

        self._seller_shipment_id = seller_shipment_id

    @property
    def trancking_url(self):
        """Gets the trancking_url of this NewTrackingRefund.

        Courier tracking URL

        :return: The trancking_url of this NewTrackingRefund.
        :rtype: str
        """
        return self._trancking_url

    @trancking_url.setter
    def trancking_url(self, trancking_url):
        """Sets the trancking_url of this NewTrackingRefund.

        Courier tracking URL

        :param trancking_url: The trancking_url of this NewTrackingRefund.
        :type trancking_url: str
        """

        self._trancking_url = trancking_url
