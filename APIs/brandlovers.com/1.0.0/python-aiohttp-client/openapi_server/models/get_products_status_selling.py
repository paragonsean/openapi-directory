# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata import Metadata
from openapi_server.models.seller_item import SellerItem
from openapi_server import util


class GetProductsStatusSelling(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: List[Metadata]=None, seller_items: List[SellerItem]=None):
        """GetProductsStatusSelling - a model defined in OpenAPI

        :param metadata: The metadata of this GetProductsStatusSelling.
        :param seller_items: The seller_items of this GetProductsStatusSelling.
        """
        self.openapi_types = {
            'metadata': List[Metadata],
            'seller_items': List[SellerItem]
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'seller_items': 'sellerItems'
        }

        self._metadata = metadata
        self._seller_items = seller_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetProductsStatusSelling':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetProductsStatusSelling of this GetProductsStatusSelling.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this GetProductsStatusSelling.


        :return: The metadata of this GetProductsStatusSelling.
        :rtype: List[Metadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GetProductsStatusSelling.


        :param metadata: The metadata of this GetProductsStatusSelling.
        :type metadata: List[Metadata]
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def seller_items(self):
        """Gets the seller_items of this GetProductsStatusSelling.


        :return: The seller_items of this GetProductsStatusSelling.
        :rtype: List[SellerItem]
        """
        return self._seller_items

    @seller_items.setter
    def seller_items(self, seller_items):
        """Sets the seller_items of this GetProductsStatusSelling.


        :param seller_items: The seller_items of this GetProductsStatusSelling.
        :type seller_items: List[SellerItem]
        """
        if seller_items is None:
            raise ValueError("Invalid value for `seller_items`, must not be `None`")

        self._seller_items = seller_items
