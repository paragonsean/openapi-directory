# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TicketStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ticket_status: str=None):
        """TicketStatus - a model defined in OpenAPI

        :param ticket_status: The ticket_status of this TicketStatus.
        """
        self.openapi_types = {
            'ticket_status': str
        }

        self.attribute_map = {
            'ticket_status': 'ticketStatus'
        }

        self._ticket_status = ticket_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketStatus of this TicketStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ticket_status(self):
        """Gets the ticket_status of this TicketStatus.

        New trouble ticket status. Valid options are `REOPENED`, `CLOSED`

        :return: The ticket_status of this TicketStatus.
        :rtype: str
        """
        return self._ticket_status

    @ticket_status.setter
    def ticket_status(self, ticket_status):
        """Sets the ticket_status of this TicketStatus.

        New trouble ticket status. Valid options are `REOPENED`, `CLOSED`

        :param ticket_status: The ticket_status of this TicketStatus.
        :type ticket_status: str
        """
        if ticket_status is None:
            raise ValueError("Invalid value for `ticket_status`, must not be `None`")

        self._ticket_status = ticket_status
