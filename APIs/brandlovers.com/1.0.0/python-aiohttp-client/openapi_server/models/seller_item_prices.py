# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_price import ProductPrice
from openapi_server import util


class SellerItemPrices(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, price: ProductPrice=None, sku_seller_id: str=None):
        """SellerItemPrices - a model defined in OpenAPI

        :param price: The price of this SellerItemPrices.
        :param sku_seller_id: The sku_seller_id of this SellerItemPrices.
        """
        self.openapi_types = {
            'price': ProductPrice,
            'sku_seller_id': str
        }

        self.attribute_map = {
            'price': 'price',
            'sku_seller_id': 'skuSellerId'
        }

        self._price = price
        self._sku_seller_id = sku_seller_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SellerItemPrices':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SellerItemPrices of this SellerItemPrices.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def price(self):
        """Gets the price of this SellerItemPrices.


        :return: The price of this SellerItemPrices.
        :rtype: ProductPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SellerItemPrices.


        :param price: The price of this SellerItemPrices.
        :type price: ProductPrice
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def sku_seller_id(self):
        """Gets the sku_seller_id of this SellerItemPrices.

        Unique product Id from seller that will be updated

        :return: The sku_seller_id of this SellerItemPrices.
        :rtype: str
        """
        return self._sku_seller_id

    @sku_seller_id.setter
    def sku_seller_id(self, sku_seller_id):
        """Sets the sku_seller_id of this SellerItemPrices.

        Unique product Id from seller that will be updated

        :param sku_seller_id: The sku_seller_id of this SellerItemPrices.
        :type sku_seller_id: str
        """
        if sku_seller_id is None:
            raise ValueError("Invalid value for `sku_seller_id`, must not be `None`")

        self._sku_seller_id = sku_seller_id
