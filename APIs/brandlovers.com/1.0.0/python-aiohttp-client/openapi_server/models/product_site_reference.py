# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductSiteReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sku_seller_id: str=None, url: str=None):
        """ProductSiteReference - a model defined in OpenAPI

        :param sku_seller_id: The sku_seller_id of this ProductSiteReference.
        :param url: The url of this ProductSiteReference.
        """
        self.openapi_types = {
            'sku_seller_id': str,
            'url': str
        }

        self.attribute_map = {
            'sku_seller_id': 'skuSellerId',
            'url': 'url'
        }

        self._sku_seller_id = sku_seller_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductSiteReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductSiteReference of this ProductSiteReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sku_seller_id(self):
        """Gets the sku_seller_id of this ProductSiteReference.

        Seller unique product Id

        :return: The sku_seller_id of this ProductSiteReference.
        :rtype: str
        """
        return self._sku_seller_id

    @sku_seller_id.setter
    def sku_seller_id(self, sku_seller_id):
        """Sets the sku_seller_id of this ProductSiteReference.

        Seller unique product Id

        :param sku_seller_id: The sku_seller_id of this ProductSiteReference.
        :type sku_seller_id: str
        """
        if sku_seller_id is None:
            raise ValueError("Invalid value for `sku_seller_id`, must not be `None`")

        self._sku_seller_id = sku_seller_id

    @property
    def url(self):
        """Gets the url of this ProductSiteReference.

        Link do produto no site

        :return: The url of this ProductSiteReference.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProductSiteReference.

        Link do produto no site

        :param url: The url of this ProductSiteReference.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
