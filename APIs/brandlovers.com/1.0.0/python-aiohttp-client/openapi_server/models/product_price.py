# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: int=None, offer: int=None):
        """ProductPrice - a model defined in OpenAPI

        :param default: The default of this ProductPrice.
        :param offer: The offer of this ProductPrice.
        """
        self.openapi_types = {
            'default': int,
            'offer': int
        }

        self.attribute_map = {
            'default': 'default',
            'offer': 'offer'
        }

        self._default = default
        self._offer = offer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductPrice of this ProductPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this ProductPrice.

        List price, also known as MSRP (Manufacturer Suggest Retail Price) or the recommended retail price (RRP). All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :return: The default of this ProductPrice.
        :rtype: int
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ProductPrice.

        List price, also known as MSRP (Manufacturer Suggest Retail Price) or the recommended retail price (RRP). All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :param default: The default of this ProductPrice.
        :type default: int
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")

        self._default = default

    @property
    def offer(self):
        """Gets the offer of this ProductPrice.

        Product price. This is what will be offered to the customer. All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :return: The offer of this ProductPrice.
        :rtype: int
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this ProductPrice.

        Product price. This is what will be offered to the customer. All prices must be provided in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567

        :param offer: The offer of this ProductPrice.
        :type offer: int
        """
        if offer is None:
            raise ValueError("Invalid value for `offer`, must not be `None`")

        self._offer = offer
