# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, complement: str=None, country_id: str=None, neighbourhood: str=None, number: str=None, recipient_name: str=None, reference: str=None, state: str=None, zip_code: str=None):
        """Address - a model defined in OpenAPI

        :param address: The address of this Address.
        :param city: The city of this Address.
        :param complement: The complement of this Address.
        :param country_id: The country_id of this Address.
        :param neighbourhood: The neighbourhood of this Address.
        :param number: The number of this Address.
        :param recipient_name: The recipient_name of this Address.
        :param reference: The reference of this Address.
        :param state: The state of this Address.
        :param zip_code: The zip_code of this Address.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'complement': str,
            'country_id': str,
            'neighbourhood': str,
            'number': str,
            'recipient_name': str,
            'reference': str,
            'state': str,
            'zip_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'complement': 'complement',
            'country_id': 'countryId',
            'neighbourhood': 'neighbourhood',
            'number': 'number',
            'recipient_name': 'recipientName',
            'reference': 'reference',
            'state': 'state',
            'zip_code': 'zipCode'
        }

        self._address = address
        self._city = city
        self._complement = complement
        self._country_id = country_id
        self._neighbourhood = neighbourhood
        self._number = number
        self._recipient_name = recipient_name
        self._reference = reference
        self._state = state
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Address.

        Address first line (ave, street name, etc..)

        :return: The address of this Address.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Address.

        Address first line (ave, street name, etc..)

        :param address: The address of this Address.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def city(self):
        """Gets the city of this Address.

        City

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        City

        :param city: The city of this Address.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def complement(self):
        """Gets the complement of this Address.

        Complementary info (aptartament number, building name, suite)

        :return: The complement of this Address.
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this Address.

        Complementary info (aptartament number, building name, suite)

        :param complement: The complement of this Address.
        :type complement: str
        """
        if complement is None:
            raise ValueError("Invalid value for `complement`, must not be `None`")

        self._complement = complement

    @property
    def country_id(self):
        """Gets the country_id of this Address.

        Contry code using aplpha ISO-3166, Example: BR, US, AR, GB, CN

        :return: The country_id of this Address.
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this Address.

        Contry code using aplpha ISO-3166, Example: BR, US, AR, GB, CN

        :param country_id: The country_id of this Address.
        :type country_id: str
        """
        if country_id is None:
            raise ValueError("Invalid value for `country_id`, must not be `None`")

        self._country_id = country_id

    @property
    def neighbourhood(self):
        """Gets the neighbourhood of this Address.

        Address neighbourhood

        :return: The neighbourhood of this Address.
        :rtype: str
        """
        return self._neighbourhood

    @neighbourhood.setter
    def neighbourhood(self, neighbourhood):
        """Sets the neighbourhood of this Address.

        Address neighbourhood

        :param neighbourhood: The neighbourhood of this Address.
        :type neighbourhood: str
        """
        if neighbourhood is None:
            raise ValueError("Invalid value for `neighbourhood`, must not be `None`")

        self._neighbourhood = neighbourhood

    @property
    def number(self):
        """Gets the number of this Address.

        Address number

        :return: The number of this Address.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Address.

        Address number

        :param number: The number of this Address.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def recipient_name(self):
        """Gets the recipient_name of this Address.

        Recipient Name

        :return: The recipient_name of this Address.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this Address.

        Recipient Name

        :param recipient_name: The recipient_name of this Address.
        :type recipient_name: str
        """

        self._recipient_name = recipient_name

    @property
    def reference(self):
        """Gets the reference of this Address.

        Pontos de referência

        :return: The reference of this Address.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Address.

        Pontos de referência

        :param reference: The reference of this Address.
        :type reference: str
        """

        self._reference = reference

    @property
    def state(self):
        """Gets the state of this Address.

        State

        :return: The state of this Address.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.

        State

        :param state: The state of this Address.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def zip_code(self):
        """Gets the zip_code of this Address.

        Zip Code

        :return: The zip_code of this Address.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Address.

        Zip Code

        :param zip_code: The zip_code of this Address.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")

        self._zip_code = zip_code
