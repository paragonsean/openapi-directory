# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stock import Stock
from openapi_server import util


class ProductStock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sku_seller_id: str=None, stocks: List[Stock]=None):
        """ProductStock - a model defined in OpenAPI

        :param sku_seller_id: The sku_seller_id of this ProductStock.
        :param stocks: The stocks of this ProductStock.
        """
        self.openapi_types = {
            'sku_seller_id': str,
            'stocks': List[Stock]
        }

        self.attribute_map = {
            'sku_seller_id': 'skuSellerId',
            'stocks': 'stocks'
        }

        self._sku_seller_id = sku_seller_id
        self._stocks = stocks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductStock':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductStock of this ProductStock.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sku_seller_id(self):
        """Gets the sku_seller_id of this ProductStock.

        Unique Product Id (SKU) in the seller system

        :return: The sku_seller_id of this ProductStock.
        :rtype: str
        """
        return self._sku_seller_id

    @sku_seller_id.setter
    def sku_seller_id(self, sku_seller_id):
        """Sets the sku_seller_id of this ProductStock.

        Unique Product Id (SKU) in the seller system

        :param sku_seller_id: The sku_seller_id of this ProductStock.
        :type sku_seller_id: str
        """
        if sku_seller_id is None:
            raise ValueError("Invalid value for `sku_seller_id`, must not be `None`")

        self._sku_seller_id = sku_seller_id

    @property
    def stocks(self):
        """Gets the stocks of this ProductStock.

        Invetory information

        :return: The stocks of this ProductStock.
        :rtype: List[Stock]
        """
        return self._stocks

    @stocks.setter
    def stocks(self, stocks):
        """Sets the stocks of this ProductStock.

        Invetory information

        :param stocks: The stocks of this ProductStock.
        :type stocks: List[Stock]
        """
        if stocks is None:
            raise ValueError("Invalid value for `stocks`, must not be `None`")

        self._stocks = stocks
