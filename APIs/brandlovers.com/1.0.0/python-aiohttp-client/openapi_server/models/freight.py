# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Freight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eta: datetime=None, additional_info: str=None, charged_amount: int=None, cross_docking_time: int=None, default_amount: int=None, scheduled_period: str=None, transit_time: int=None, type: str=None):
        """Freight - a model defined in OpenAPI

        :param eta: The eta of this Freight.
        :param additional_info: The additional_info of this Freight.
        :param charged_amount: The charged_amount of this Freight.
        :param cross_docking_time: The cross_docking_time of this Freight.
        :param default_amount: The default_amount of this Freight.
        :param scheduled_period: The scheduled_period of this Freight.
        :param transit_time: The transit_time of this Freight.
        :param type: The type of this Freight.
        """
        self.openapi_types = {
            'eta': datetime,
            'additional_info': str,
            'charged_amount': int,
            'cross_docking_time': int,
            'default_amount': int,
            'scheduled_period': str,
            'transit_time': int,
            'type': str
        }

        self.attribute_map = {
            'eta': 'ETA',
            'additional_info': 'additionalInfo',
            'charged_amount': 'chargedAmount',
            'cross_docking_time': 'crossDockingTime',
            'default_amount': 'defaultAmount',
            'scheduled_period': 'scheduledPeriod',
            'transit_time': 'transitTime',
            'type': 'type'
        }

        self._eta = eta
        self._additional_info = additional_info
        self._charged_amount = charged_amount
        self._cross_docking_time = cross_docking_time
        self._default_amount = default_amount
        self._scheduled_period = scheduled_period
        self._transit_time = transit_time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Freight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Freight of this Freight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eta(self):
        """Gets the eta of this Freight.

        Estimated time of arrival

        :return: The eta of this Freight.
        :rtype: datetime
        """
        return self._eta

    @eta.setter
    def eta(self, eta):
        """Sets the eta of this Freight.

        Estimated time of arrival

        :param eta: The eta of this Freight.
        :type eta: datetime
        """

        self._eta = eta

    @property
    def additional_info(self):
        """Gets the additional_info of this Freight.

        Aditional information for the courier

        :return: The additional_info of this Freight.
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this Freight.

        Aditional information for the courier

        :param additional_info: The additional_info of this Freight.
        :type additional_info: str
        """
        if additional_info is None:
            raise ValueError("Invalid value for `additional_info`, must not be `None`")

        self._additional_info = additional_info

    @property
    def charged_amount(self):
        """Gets the charged_amount of this Freight.

        Shipment cost. Must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567

        :return: The charged_amount of this Freight.
        :rtype: int
        """
        return self._charged_amount

    @charged_amount.setter
    def charged_amount(self, charged_amount):
        """Sets the charged_amount of this Freight.

        Shipment cost. Must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567

        :param charged_amount: The charged_amount of this Freight.
        :type charged_amount: int
        """
        if charged_amount is None:
            raise ValueError("Invalid value for `charged_amount`, must not be `None`")

        self._charged_amount = charged_amount

    @property
    def cross_docking_time(self):
        """Gets the cross_docking_time of this Freight.

        Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer

        :return: The cross_docking_time of this Freight.
        :rtype: int
        """
        return self._cross_docking_time

    @cross_docking_time.setter
    def cross_docking_time(self, cross_docking_time):
        """Sets the cross_docking_time of this Freight.

        Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer

        :param cross_docking_time: The cross_docking_time of this Freight.
        :type cross_docking_time: int
        """
        if cross_docking_time is None:
            raise ValueError("Invalid value for `cross_docking_time`, must not be `None`")

        self._cross_docking_time = cross_docking_time

    @property
    def default_amount(self):
        """Gets the default_amount of this Freight.

        Default value of this shippment.

        :return: The default_amount of this Freight.
        :rtype: int
        """
        return self._default_amount

    @default_amount.setter
    def default_amount(self, default_amount):
        """Sets the default_amount of this Freight.

        Default value of this shippment.

        :param default_amount: The default_amount of this Freight.
        :type default_amount: int
        """
        if default_amount is None:
            raise ValueError("Invalid value for `default_amount`, must not be `None`")

        self._default_amount = default_amount

    @property
    def scheduled_period(self):
        """Gets the scheduled_period of this Freight.

        Scheduled period

        :return: The scheduled_period of this Freight.
        :rtype: str
        """
        return self._scheduled_period

    @scheduled_period.setter
    def scheduled_period(self, scheduled_period):
        """Sets the scheduled_period of this Freight.

        Scheduled period

        :param scheduled_period: The scheduled_period of this Freight.
        :type scheduled_period: str
        """

        self._scheduled_period = scheduled_period

    @property
    def transit_time(self):
        """Gets the transit_time of this Freight.

        Deliver time in seconds. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer

        :return: The transit_time of this Freight.
        :rtype: int
        """
        return self._transit_time

    @transit_time.setter
    def transit_time(self, transit_time):
        """Sets the transit_time of this Freight.

        Deliver time in seconds. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer

        :param transit_time: The transit_time of this Freight.
        :type transit_time: int
        """
        if transit_time is None:
            raise ValueError("Invalid value for `transit_time`, must not be `None`")

        self._transit_time = transit_time

    @property
    def type(self):
        """Gets the type of this Freight.

        Freight type

        :return: The type of this Freight.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Freight.

        Freight type

        :param type: The type of this Freight.
        :type type: str
        """

        self._type = type
