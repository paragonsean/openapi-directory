# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, sku_seller_id: str=None, type: str=None):
        """Error - a model defined in OpenAPI

        :param message: The message of this Error.
        :param sku_seller_id: The sku_seller_id of this Error.
        :param type: The type of this Error.
        """
        self.openapi_types = {
            'message': str,
            'sku_seller_id': str,
            'type': str
        }

        self.attribute_map = {
            'message': 'message',
            'sku_seller_id': 'skuSellerId',
            'type': 'type'
        }

        self._message = message
        self._sku_seller_id = sku_seller_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Error.

        Friendly message describing the error

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        Friendly message describing the error

        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def sku_seller_id(self):
        """Gets the sku_seller_id of this Error.

        When applicabe will include `skuSellerId` related to this error

        :return: The sku_seller_id of this Error.
        :rtype: str
        """
        return self._sku_seller_id

    @sku_seller_id.setter
    def sku_seller_id(self, sku_seller_id):
        """Sets the sku_seller_id of this Error.

        When applicabe will include `skuSellerId` related to this error

        :param sku_seller_id: The sku_seller_id of this Error.
        :type sku_seller_id: str
        """

        self._sku_seller_id = sku_seller_id

    @property
    def type(self):
        """Gets the type of this Error.

        Error type

        :return: The type of this Error.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Error.

        Error type

        :param type: The type of this Error.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
