/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetOrders;
import org.openapitools.client.model.GetOrdersShipments;
import org.openapitools.client.model.OrdersShipments;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ordersGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersGet(Async)");
        }

        return ordersGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Returns orders details
     * Retuns a list of orders associated with this seller. The list is ordered by dateCreated.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrders ordersGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetOrders> localVarResp = ordersGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns orders details
     * Retuns a list of orders associated with this seller. The list is ordered by dateCreated.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrders> ordersGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ordersGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns orders details (asynchronously)
     * Retuns a list of orders associated with this seller. The list is ordered by dateCreated.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersShipmentsDeliveredGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Query by shippment status. (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersShipmentsDeliveredGetCall(String authorization, String status, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/shipments/delivered";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersShipmentsDeliveredGetValidateBeforeCall(String authorization, String status, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersShipmentsDeliveredGet(Async)");
        }

        return ordersShipmentsDeliveredGetCall(authorization, status, offset, limit, _callback);

    }

    /**
     * Returns list of shipments
     * Returns list of shipments. By default this will return list of the last shipments ordered by dateCreated, folowed by last update date.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Query by shippment status. (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetOrdersShipments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrdersShipments ordersShipmentsDeliveredGet(String authorization, String status, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetOrdersShipments> localVarResp = ordersShipmentsDeliveredGetWithHttpInfo(authorization, status, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns list of shipments
     * Returns list of shipments. By default this will return list of the last shipments ordered by dateCreated, folowed by last update date.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Query by shippment status. (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetOrdersShipments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrdersShipments> ordersShipmentsDeliveredGetWithHttpInfo(String authorization, String status, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ordersShipmentsDeliveredGetValidateBeforeCall(authorization, status, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetOrdersShipments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of shipments (asynchronously)
     * Returns list of shipments. By default this will return list of the last shipments ordered by dateCreated, folowed by last update date.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Query by shippment status. (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersShipmentsDeliveredGetAsync(String authorization, String status, Integer offset, Integer limit, final ApiCallback<GetOrdersShipments> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersShipmentsDeliveredGetValidateBeforeCall(authorization, status, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetOrdersShipments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersShipmentsDeliveredPost
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ordersshipments JSON body with list of shipments to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersShipmentsDeliveredPostCall(String authorization, OrdersShipments ordersshipments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ordersshipments;

        // create path and map variables
        String localVarPath = "/orders/shipments/delivered";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersShipmentsDeliveredPostValidateBeforeCall(String authorization, OrdersShipments ordersshipments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersShipmentsDeliveredPost(Async)");
        }

        // verify the required parameter 'ordersshipments' is set
        if (ordersshipments == null) {
            throw new ApiException("Missing the required parameter 'ordersshipments' when calling ordersShipmentsDeliveredPost(Async)");
        }

        return ordersShipmentsDeliveredPostCall(authorization, ordersshipments, _callback);

    }

    /**
     * Bulk update of order shipments
     * Bulk update of order shipments status. This alows to inform multiple shipments status
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ordersshipments JSON body with list of shipments to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public void ordersShipmentsDeliveredPost(String authorization, OrdersShipments ordersshipments) throws ApiException {
        ordersShipmentsDeliveredPostWithHttpInfo(authorization, ordersshipments);
    }

    /**
     * Bulk update of order shipments
     * Bulk update of order shipments status. This alows to inform multiple shipments status
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ordersshipments JSON body with list of shipments to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ordersShipmentsDeliveredPostWithHttpInfo(String authorization, OrdersShipments ordersshipments) throws ApiException {
        okhttp3.Call localVarCall = ordersShipmentsDeliveredPostValidateBeforeCall(authorization, ordersshipments, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk update of order shipments (asynchronously)
     * Bulk update of order shipments status. This alows to inform multiple shipments status
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ordersshipments JSON body with list of shipments to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersShipmentsDeliveredPostAsync(String authorization, OrdersShipments ordersshipments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersShipmentsDeliveredPostValidateBeforeCall(authorization, ordersshipments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersShipmentsShippedGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Product status. (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersShipmentsShippedGetCall(String authorization, String status, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/shipments/shipped";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersShipmentsShippedGetValidateBeforeCall(String authorization, String status, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersShipmentsShippedGet(Async)");
        }

        return ordersShipmentsShippedGetCall(authorization, status, offset, limit, _callback);

    }

    /**
     * Returns a list of shipments shipped
     * Returns a list of shipments shipped. By Default returns items ordered by dateCreated folowed by last update
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Product status. (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetOrdersShipments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrdersShipments ordersShipmentsShippedGet(String authorization, String status, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetOrdersShipments> localVarResp = ordersShipmentsShippedGetWithHttpInfo(authorization, status, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns a list of shipments shipped
     * Returns a list of shipments shipped. By Default returns items ordered by dateCreated folowed by last update
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Product status. (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetOrdersShipments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrdersShipments> ordersShipmentsShippedGetWithHttpInfo(String authorization, String status, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ordersShipmentsShippedGetValidateBeforeCall(authorization, status, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetOrdersShipments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of shipments shipped (asynchronously)
     * Returns a list of shipments shipped. By Default returns items ordered by dateCreated folowed by last update
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Product status. (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersShipmentsShippedGetAsync(String authorization, String status, Integer offset, Integer limit, final ApiCallback<GetOrdersShipments> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersShipmentsShippedGetValidateBeforeCall(authorization, status, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetOrdersShipments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersShipmentsShippedPost
     * @param ordersshipments JSON payload with list of shippments of orders. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersShipmentsShippedPostCall(OrdersShipments ordersshipments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ordersshipments;

        // create path and map variables
        String localVarPath = "/orders/shipments/shipped";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersShipmentsShippedPostValidateBeforeCall(OrdersShipments ordersshipments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ordersshipments' is set
        if (ordersshipments == null) {
            throw new ApiException("Missing the required parameter 'ordersshipments' when calling ordersShipmentsShippedPost(Async)");
        }

        return ordersShipmentsShippedPostCall(ordersshipments, _callback);

    }

    /**
     * Bulk update of order shipments
     * Allows bulk updates of orders shippments.
     * @param ordersshipments JSON payload with list of shippments of orders. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public void ordersShipmentsShippedPost(OrdersShipments ordersshipments) throws ApiException {
        ordersShipmentsShippedPostWithHttpInfo(ordersshipments);
    }

    /**
     * Bulk update of order shipments
     * Allows bulk updates of orders shippments.
     * @param ordersshipments JSON payload with list of shippments of orders. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ordersShipmentsShippedPostWithHttpInfo(OrdersShipments ordersshipments) throws ApiException {
        okhttp3.Call localVarCall = ordersShipmentsShippedPostValidateBeforeCall(ordersshipments, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk update of order shipments (asynchronously)
     * Allows bulk updates of orders shippments.
     * @param ordersshipments JSON payload with list of shippments of orders. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersShipmentsShippedPostAsync(OrdersShipments ordersshipments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersShipmentsShippedPostValidateBeforeCall(ordersshipments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersStatusApprovedGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100, max 200. Use this in conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusApprovedGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/status/approved";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersStatusApprovedGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersStatusApprovedGet(Async)");
        }

        return ordersStatusApprovedGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Return list of approved orders
     * Returns a list of approved orders. Orders in the &#x60;approved&#x60; state must be fullfiled imediadetelly.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100, max 200. Use this in conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrders ordersStatusApprovedGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetOrders> localVarResp = ordersStatusApprovedGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Return list of approved orders
     * Returns a list of approved orders. Orders in the &#x60;approved&#x60; state must be fullfiled imediadetelly.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100, max 200. Use this in conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrders> ordersStatusApprovedGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ordersStatusApprovedGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of approved orders (asynchronously)
     * Returns a list of approved orders. Orders in the &#x60;approved&#x60; state must be fullfiled imediadetelly.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100, max 200. Use this in conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusApprovedGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersStatusApprovedGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersStatusCanceledGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Default 100, max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusCanceledGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/status/canceled";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersStatusCanceledGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersStatusCanceledGet(Async)");
        }

        return ordersStatusCanceledGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Returns lists of canceled orders
     * Returns a list with canceled orders. Canceled orders should not be fullfiled.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Default 100, max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @return GetOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrders ordersStatusCanceledGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetOrders> localVarResp = ordersStatusCanceledGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns lists of canceled orders
     * Returns a list with canceled orders. Canceled orders should not be fullfiled.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Default 100, max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @return ApiResponse&lt;GetOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrders> ordersStatusCanceledGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ordersStatusCanceledGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns lists of canceled orders (asynchronously)
     * Returns a list with canceled orders. Canceled orders should not be fullfiled.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Default 100, max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusCanceledGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersStatusCanceledGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersStatusDeliveredGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusDeliveredGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/status/delivered";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersStatusDeliveredGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersStatusDeliveredGet(Async)");
        }

        return ordersStatusDeliveredGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Returns a list of orders successfully delivered associated with this seller.
     * Returns a list of orders successfully delivered associated with this seller.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrders ordersStatusDeliveredGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetOrders> localVarResp = ordersStatusDeliveredGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns a list of orders successfully delivered associated with this seller.
     * Returns a list of orders successfully delivered associated with this seller.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrders> ordersStatusDeliveredGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ordersStatusDeliveredGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of orders successfully delivered associated with this seller. (asynchronously)
     * Returns a list of orders successfully delivered associated with this seller.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusDeliveredGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersStatusDeliveredGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersStatusNewGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusNewGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/status/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersStatusNewGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersStatusNewGet(Async)");
        }

        return ordersStatusNewGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Returns a list of orders flagged as new.
     * Returns a list of orders flagged as new. New orders should not be fullfiled until marketplace flags them as approved.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @return GetOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrders ordersStatusNewGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetOrders> localVarResp = ordersStatusNewGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns a list of orders flagged as new.
     * Returns a list of orders flagged as new. New orders should not be fullfiled until marketplace flags them as approved.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @return ApiResponse&lt;GetOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrders> ordersStatusNewGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ordersStatusNewGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of orders flagged as new. (asynchronously)
     * Returns a list of orders flagged as new. New orders should not be fullfiled until marketplace flags them as approved.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusNewGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersStatusNewGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersStatusPartiallyDeliveredGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusPartiallyDeliveredGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/status/partiallyDelivered";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersStatusPartiallyDeliveredGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersStatusPartiallyDeliveredGet(Async)");
        }

        return ordersStatusPartiallyDeliveredGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Returns a list of partially deliverd orders
     * Returns a list of partially deliverd orders. This is a list of orders with items shipped but with not all items ackwlodged as deliverd
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @return GetOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrders ordersStatusPartiallyDeliveredGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetOrders> localVarResp = ordersStatusPartiallyDeliveredGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns a list of partially deliverd orders
     * Returns a list of partially deliverd orders. This is a list of orders with items shipped but with not all items ackwlodged as deliverd
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @return ApiResponse&lt;GetOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrders> ordersStatusPartiallyDeliveredGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ordersStatusPartiallyDeliveredGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of partially deliverd orders (asynchronously)
     * Returns a list of partially deliverd orders. This is a list of orders with items shipped but with not all items ackwlodged as deliverd
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Max 250. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusPartiallyDeliveredGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersStatusPartiallyDeliveredGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersStatusPartiallySentGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusPartiallySentGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/status/partiallySent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersStatusPartiallySentGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersStatusPartiallySentGet(Async)");
        }

        return ordersStatusPartiallySentGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Returns a list of orders partially fullfiled
     * Returns a list of orders that contain one (or more) items that where not shipped. This will list the entire order as well the items with peding shipment. Use this service to track orders that need to be fullfiled.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrders ordersStatusPartiallySentGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetOrders> localVarResp = ordersStatusPartiallySentGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns a list of orders partially fullfiled
     * Returns a list of orders that contain one (or more) items that where not shipped. This will list the entire order as well the items with peding shipment. Use this service to track orders that need to be fullfiled.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrders> ordersStatusPartiallySentGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ordersStatusPartiallySentGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of orders partially fullfiled (asynchronously)
     * Returns a list of orders that contain one (or more) items that where not shipped. This will list the entire order as well the items with peding shipment. Use this service to track orders that need to be fullfiled.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 100. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusPartiallySentGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersStatusPartiallySentGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersStatusSentGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusSentGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/status/sent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersStatusSentGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ordersStatusSentGet(Async)");
        }

        return ordersStatusSentGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Returns a list with orders fully sent
     * Returns a list with orders completely fullfiled, this means orders with all items sent. Orders will ordered by dateCreated fowllowed by last update
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrders ordersStatusSentGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetOrders> localVarResp = ordersStatusSentGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns a list with orders fully sent
     * Returns a list with orders completely fullfiled, this means orders with all items sent. Orders will ordered by dateCreated fowllowed by last update
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrders> ordersStatusSentGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ordersStatusSentGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list with orders fully sent (asynchronously)
     * Returns a list with orders completely fullfiled, this means orders with all items sent. Orders will ordered by dateCreated fowllowed by last update
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersStatusSentGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersStatusSentGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
