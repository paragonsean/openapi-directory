/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Freight;
import org.openapitools.client.model.OrderGiftWrap;
import org.openapitools.client.model.Promotion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:33.374218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderItem {
  public static final String SERIALIZED_NAME_FREIGHT = "freight";
  @SerializedName(SERIALIZED_NAME_FREIGHT)
  private Freight freight;

  public static final String SERIALIZED_NAME_GIFT_WRAP = "giftWrap";
  @SerializedName(SERIALIZED_NAME_GIFT_WRAP)
  private OrderGiftWrap giftWrap;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROMOTIONS = "promotions";
  @SerializedName(SERIALIZED_NAME_PROMOTIONS)
  private List<Promotion> promotions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SALE_PRICE = "salePrice";
  @SerializedName(SERIALIZED_NAME_SALE_PRICE)
  private Integer salePrice;

  public static final String SERIALIZED_NAME_SENT = "sent";
  @SerializedName(SERIALIZED_NAME_SENT)
  private Boolean sent;

  public static final String SERIALIZED_NAME_SKU_SELLER_ID = "skuSellerId";
  @SerializedName(SERIALIZED_NAME_SKU_SELLER_ID)
  private String skuSellerId;

  public OrderItem() {
  }

  public OrderItem freight(Freight freight) {
    this.freight = freight;
    return this;
  }

  /**
   * Get freight
   * @return freight
   */
  @javax.annotation.Nonnull
  public Freight getFreight() {
    return freight;
  }

  public void setFreight(Freight freight) {
    this.freight = freight;
  }


  public OrderItem giftWrap(OrderGiftWrap giftWrap) {
    this.giftWrap = giftWrap;
    return this;
  }

  /**
   * Get giftWrap
   * @return giftWrap
   */
  @javax.annotation.Nullable
  public OrderGiftWrap getGiftWrap() {
    return giftWrap;
  }

  public void setGiftWrap(OrderGiftWrap giftWrap) {
    this.giftWrap = giftWrap;
  }


  public OrderItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique Id representing this item
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OrderItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Product name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderItem promotions(List<Promotion> promotions) {
    this.promotions = promotions;
    return this;
  }

  public OrderItem addPromotionsItem(Promotion promotionsItem) {
    if (this.promotions == null) {
      this.promotions = new ArrayList<>();
    }
    this.promotions.add(promotionsItem);
    return this;
  }

  /**
   * Promotions array
   * @return promotions
   */
  @javax.annotation.Nullable
  public List<Promotion> getPromotions() {
    return promotions;
  }

  public void setPromotions(List<Promotion> promotions) {
    this.promotions = promotions;
  }


  public OrderItem salePrice(Integer salePrice) {
    this.salePrice = salePrice;
    return this;
  }

  /**
   * Product unit price
   * @return salePrice
   */
  @javax.annotation.Nonnull
  public Integer getSalePrice() {
    return salePrice;
  }

  public void setSalePrice(Integer salePrice) {
    this.salePrice = salePrice;
  }


  public OrderItem sent(Boolean sent) {
    this.sent = sent;
    return this;
  }

  /**
   * Flag if product was already shipped
   * @return sent
   */
  @javax.annotation.Nonnull
  public Boolean getSent() {
    return sent;
  }

  public void setSent(Boolean sent) {
    this.sent = sent;
  }


  public OrderItem skuSellerId(String skuSellerId) {
    this.skuSellerId = skuSellerId;
    return this;
  }

  /**
   * Unique Product Id (SKU) in the seller system
   * @return skuSellerId
   */
  @javax.annotation.Nonnull
  public String getSkuSellerId() {
    return skuSellerId;
  }

  public void setSkuSellerId(String skuSellerId) {
    this.skuSellerId = skuSellerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderItem orderItem = (OrderItem) o;
    return Objects.equals(this.freight, orderItem.freight) &&
        Objects.equals(this.giftWrap, orderItem.giftWrap) &&
        Objects.equals(this.id, orderItem.id) &&
        Objects.equals(this.name, orderItem.name) &&
        Objects.equals(this.promotions, orderItem.promotions) &&
        Objects.equals(this.salePrice, orderItem.salePrice) &&
        Objects.equals(this.sent, orderItem.sent) &&
        Objects.equals(this.skuSellerId, orderItem.skuSellerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(freight, giftWrap, id, name, promotions, salePrice, sent, skuSellerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderItem {\n");
    sb.append("    freight: ").append(toIndentedString(freight)).append("\n");
    sb.append("    giftWrap: ").append(toIndentedString(giftWrap)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    promotions: ").append(toIndentedString(promotions)).append("\n");
    sb.append("    salePrice: ").append(toIndentedString(salePrice)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("    skuSellerId: ").append(toIndentedString(skuSellerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("freight");
    openapiFields.add("giftWrap");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("promotions");
    openapiFields.add("salePrice");
    openapiFields.add("sent");
    openapiFields.add("skuSellerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("freight");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("salePrice");
    openapiRequiredFields.add("sent");
    openapiRequiredFields.add("skuSellerId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderItem is not found in the empty JSON string", OrderItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `freight`
      Freight.validateJsonElement(jsonObj.get("freight"));
      // validate the optional field `giftWrap`
      if (jsonObj.get("giftWrap") != null && !jsonObj.get("giftWrap").isJsonNull()) {
        OrderGiftWrap.validateJsonElement(jsonObj.get("giftWrap"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("promotions") != null && !jsonObj.get("promotions").isJsonNull()) {
        JsonArray jsonArraypromotions = jsonObj.getAsJsonArray("promotions");
        if (jsonArraypromotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promotions` to be an array in the JSON string but got `%s`", jsonObj.get("promotions").toString()));
          }

          // validate the optional field `promotions` (array)
          for (int i = 0; i < jsonArraypromotions.size(); i++) {
            Promotion.validateJsonElement(jsonArraypromotions.get(i));
          };
        }
      }
      if (!jsonObj.get("skuSellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuSellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuSellerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderItem.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderItem>() {
           @Override
           public void write(JsonWriter out, OrderItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderItem
   * @throws IOException if the JSON string is invalid with respect to OrderItem
   */
  public static OrderItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderItem.class);
  }

  /**
   * Convert an instance of OrderItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

