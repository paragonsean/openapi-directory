/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetProductsResponse;
import org.openapitools.client.model.GetProductsStatusSelling;
import org.openapitools.client.model.GetSellerProductsStatus;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductStatusUpdate;
import org.openapitools.client.model.ProductStock;
import org.openapitools.client.model.ProductUpdate;
import org.openapitools.client.model.SellerItemPrices;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productSkuSellerIdPut
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system that will be updated. (required)
     * @param body New product information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSkuSellerIdPutCall(String authorization, String skuSellerId, ProductUpdate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/product/{skuSellerId}"
            .replace("{" + "skuSellerId" + "}", localVarApiClient.escapeString(skuSellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productSkuSellerIdPutValidateBeforeCall(String authorization, String skuSellerId, ProductUpdate body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productSkuSellerIdPut(Async)");
        }

        // verify the required parameter 'skuSellerId' is set
        if (skuSellerId == null) {
            throw new ApiException("Missing the required parameter 'skuSellerId' when calling productSkuSellerIdPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productSkuSellerIdPut(Async)");
        }

        return productSkuSellerIdPutCall(authorization, skuSellerId, body, _callback);

    }

    /**
     * Update product details
     * Update a single product information such as name, brand, attribute, dimension, etc. Please note that data from your request will be merged with existing data. This allows you to easliy update only certain fields without the need to re-inform the other unchanged fields. For example in order to update just the field &#x60;title&#x60; simply send just this field with new information, remaining fields will not be changed. In order to erase an item the field must be informed as its default value, for example in order to erase the &#x60;videos&#x60; field must be sent as videos:[]. The &#x60;skuSellerId&#x60; field is always mandatory in the path and in the product json Object.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system that will be updated. (required)
     * @param body New product information. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public void productSkuSellerIdPut(String authorization, String skuSellerId, ProductUpdate body) throws ApiException {
        productSkuSellerIdPutWithHttpInfo(authorization, skuSellerId, body);
    }

    /**
     * Update product details
     * Update a single product information such as name, brand, attribute, dimension, etc. Please note that data from your request will be merged with existing data. This allows you to easliy update only certain fields without the need to re-inform the other unchanged fields. For example in order to update just the field &#x60;title&#x60; simply send just this field with new information, remaining fields will not be changed. In order to erase an item the field must be informed as its default value, for example in order to erase the &#x60;videos&#x60; field must be sent as videos:[]. The &#x60;skuSellerId&#x60; field is always mandatory in the path and in the product json Object.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system that will be updated. (required)
     * @param body New product information. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productSkuSellerIdPutWithHttpInfo(String authorization, String skuSellerId, ProductUpdate body) throws ApiException {
        okhttp3.Call localVarCall = productSkuSellerIdPutValidateBeforeCall(authorization, skuSellerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update product details (asynchronously)
     * Update a single product information such as name, brand, attribute, dimension, etc. Please note that data from your request will be merged with existing data. This allows you to easliy update only certain fields without the need to re-inform the other unchanged fields. For example in order to update just the field &#x60;title&#x60; simply send just this field with new information, remaining fields will not be changed. In order to erase an item the field must be informed as its default value, for example in order to erase the &#x60;videos&#x60; field must be sent as videos:[]. The &#x60;skuSellerId&#x60; field is always mandatory in the path and in the product json Object.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system that will be updated. (required)
     * @param body New product information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSkuSellerIdPutAsync(String authorization, String skuSellerId, ProductUpdate body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productSkuSellerIdPutValidateBeforeCall(authorization, skuSellerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number of items to retun. Defaults to 100. Max alowed is 200. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productsGet(Async)");
        }

        return productsGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Returns a list of products loaded into BrandLovers Marketplace
     * Get a list of my products loaded into the Marketplace. This dosen&#39;t means that products are eligible for sale, just that they are loaded in the database.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number of items to retun. Defaults to 100. Max alowed is 200. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetProductsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetProductsResponse productsGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetProductsResponse> localVarResp = productsGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns a list of products loaded into BrandLovers Marketplace
     * Get a list of my products loaded into the Marketplace. This dosen&#39;t means that products are eligible for sale, just that they are loaded in the database.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number of items to retun. Defaults to 100. Max alowed is 200. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetProductsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProductsResponse> productsGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = productsGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetProductsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of products loaded into BrandLovers Marketplace (asynchronously)
     * Get a list of my products loaded into the Marketplace. This dosen&#39;t means that products are eligible for sale, just that they are loaded in the database.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number of items to retun. Defaults to 100. Max alowed is 200. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetProductsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsPost
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param products JSON with a list of new products to be updloaded to the platform (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! Server received your request and will start background processing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsPostCall(String authorization, List<Product> products, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = products;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsPostValidateBeforeCall(String authorization, List<Product> products, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productsPost(Async)");
        }

        // verify the required parameter 'products' is set
        if (products == null) {
            throw new ApiException("Missing the required parameter 'products' when calling productsPost(Async)");
        }

        return productsPostCall(authorization, products, _callback);

    }

    /**
     * Allows new products from the seller to be loaded into the marketplace
     * This enpoint to creates new products in the Marketplace using &#x60;skuSellerId&#x60; as a primary key. This enpoint expects a json document with array of products. The server will load each product as an individual item that can be manipulated using your own &#x60;skuSellerId&#x60;. All requests to This endpoint are idenpontent with respect of the &#x60;skuSellerId&#x60;, this means that once a &#x60;skuSellerId&#x60; is created it cannot be re-created using this tool. In order to update use the PUT method with the correct &#x60;skuSellerId&#x60;. You can also use the POST /product to create a single product per request
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param products JSON with a list of new products to be updloaded to the platform (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! Server received your request and will start background processing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public void productsPost(String authorization, List<Product> products) throws ApiException {
        productsPostWithHttpInfo(authorization, products);
    }

    /**
     * Allows new products from the seller to be loaded into the marketplace
     * This enpoint to creates new products in the Marketplace using &#x60;skuSellerId&#x60; as a primary key. This enpoint expects a json document with array of products. The server will load each product as an individual item that can be manipulated using your own &#x60;skuSellerId&#x60;. All requests to This endpoint are idenpontent with respect of the &#x60;skuSellerId&#x60;, this means that once a &#x60;skuSellerId&#x60; is created it cannot be re-created using this tool. In order to update use the PUT method with the correct &#x60;skuSellerId&#x60;. You can also use the POST /product to create a single product per request
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param products JSON with a list of new products to be updloaded to the platform (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! Server received your request and will start background processing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productsPostWithHttpInfo(String authorization, List<Product> products) throws ApiException {
        okhttp3.Call localVarCall = productsPostValidateBeforeCall(authorization, products, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Allows new products from the seller to be loaded into the marketplace (asynchronously)
     * This enpoint to creates new products in the Marketplace using &#x60;skuSellerId&#x60; as a primary key. This enpoint expects a json document with array of products. The server will load each product as an individual item that can be manipulated using your own &#x60;skuSellerId&#x60;. All requests to This endpoint are idenpontent with respect of the &#x60;skuSellerId&#x60;, this means that once a &#x60;skuSellerId&#x60; is created it cannot be re-created using this tool. In order to update use the PUT method with the correct &#x60;skuSellerId&#x60;. You can also use the POST /product to create a single product per request
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param products JSON with a list of new products to be updloaded to the platform (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! Server received your request and will start background processing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsPostAsync(String authorization, List<Product> products, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsPostValidateBeforeCall(authorization, products, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsPricesPut
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body Data for bulk product price update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsPricesPutCall(String authorization, List<SellerItemPrices> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/products/prices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsPricesPutValidateBeforeCall(String authorization, List<SellerItemPrices> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productsPricesPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productsPricesPut(Async)");
        }

        return productsPricesPutCall(authorization, body, _callback);

    }

    /**
     * Allows bulk update of product prices.
     * Allows bulk update of product prices. This endpoint expects a json document with an array of products with the &#x60;skuSellerId&#x60; and the new price. Server will process each new product update individually and will ackwlodge as much updates as possible, even if a single product update fails. After this request you can query product final status with GET /product/status
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body Data for bulk product price update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public void productsPricesPut(String authorization, List<SellerItemPrices> body) throws ApiException {
        productsPricesPutWithHttpInfo(authorization, body);
    }

    /**
     * Allows bulk update of product prices.
     * Allows bulk update of product prices. This endpoint expects a json document with an array of products with the &#x60;skuSellerId&#x60; and the new price. Server will process each new product update individually and will ackwlodge as much updates as possible, even if a single product update fails. After this request you can query product final status with GET /product/status
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body Data for bulk product price update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productsPricesPutWithHttpInfo(String authorization, List<SellerItemPrices> body) throws ApiException {
        okhttp3.Call localVarCall = productsPricesPutValidateBeforeCall(authorization, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Allows bulk update of product prices. (asynchronously)
     * Allows bulk update of product prices. This endpoint expects a json document with an array of products with the &#x60;skuSellerId&#x60; and the new price. Server will process each new product update individually and will ackwlodge as much updates as possible, even if a single product update fails. After this request you can query product final status with GET /product/status
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body Data for bulk product price update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsPricesPutAsync(String authorization, List<SellerItemPrices> body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsPricesPutValidateBeforeCall(authorization, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsStatusGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number of items to return in this query. Defaults to 250. Maximum 1000. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success fetching results. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsStatusGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsStatusGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productsStatusGet(Async)");
        }

        return productsStatusGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Returns seller products status in the marketplace
     * Returns a list with seller products status. Please note that this endpoint will not return all details of each product, just the skuSellerId and status. Also please note that this endpoint will return 250 products per call. For full details of a given procuct use GET /product/{skuSellerId}
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number of items to return in this query. Defaults to 250. Maximum 1000. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetSellerProductsStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success fetching results. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetSellerProductsStatus productsStatusGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetSellerProductsStatus> localVarResp = productsStatusGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns seller products status in the marketplace
     * Returns a list with seller products status. Please note that this endpoint will not return all details of each product, just the skuSellerId and status. Also please note that this endpoint will return 250 products per call. For full details of a given procuct use GET /product/{skuSellerId}
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number of items to return in this query. Defaults to 250. Maximum 1000. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetSellerProductsStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success fetching results. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSellerProductsStatus> productsStatusGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = productsStatusGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetSellerProductsStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns seller products status in the marketplace (asynchronously)
     * Returns a list with seller products status. Please note that this endpoint will not return all details of each product, just the skuSellerId and status. Also please note that this endpoint will return 250 products per call. For full details of a given procuct use GET /product/{skuSellerId}
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number of items to return in this query. Defaults to 250. Maximum 1000. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success fetching results. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsStatusGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetSellerProductsStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsStatusGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetSellerProductsStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsStatusPut
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body List of seller products with new status information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsStatusPutCall(String authorization, List<ProductStatusUpdate> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/products/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsStatusPutValidateBeforeCall(String authorization, List<ProductStatusUpdate> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productsStatusPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productsStatusPut(Async)");
        }

        return productsStatusPutCall(authorization, body, _callback);

    }

    /**
     * Bulk enable/disable products in the marketplace
     * Bulk enable/disable products in the marketplace. This endpoint requires an array of objects with the seller SKU &#x60;skuSellerId&#x60; and boolean value that defines if the product is enabled or not for sale. This endpoint can be used to set a single product or many products.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body List of seller products with new status information (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public void productsStatusPut(String authorization, List<ProductStatusUpdate> body) throws ApiException {
        productsStatusPutWithHttpInfo(authorization, body);
    }

    /**
     * Bulk enable/disable products in the marketplace
     * Bulk enable/disable products in the marketplace. This endpoint requires an array of objects with the seller SKU &#x60;skuSellerId&#x60; and boolean value that defines if the product is enabled or not for sale. This endpoint can be used to set a single product or many products.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body List of seller products with new status information (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productsStatusPutWithHttpInfo(String authorization, List<ProductStatusUpdate> body) throws ApiException {
        okhttp3.Call localVarCall = productsStatusPutValidateBeforeCall(authorization, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk enable/disable products in the marketplace (asynchronously)
     * Bulk enable/disable products in the marketplace. This endpoint requires an array of objects with the seller SKU &#x60;skuSellerId&#x60; and boolean value that defines if the product is enabled or not for sale. This endpoint can be used to set a single product or many products.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body List of seller products with new status information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsStatusPutAsync(String authorization, List<ProductStatusUpdate> body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsStatusPutValidateBeforeCall(authorization, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsStatusSellingGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsStatusSellingGetCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/status/selling";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsStatusSellingGetValidateBeforeCall(String authorization, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productsStatusSellingGet(Async)");
        }

        return productsStatusSellingGetCall(authorization, offset, limit, _callback);

    }

    /**
     * Returns products that are successfully listed for sale.
     * Returns products that are successfully listed for sale.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetProductsStatusSelling
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public GetProductsStatusSelling productsStatusSellingGet(String authorization, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetProductsStatusSelling> localVarResp = productsStatusSellingGetWithHttpInfo(authorization, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Returns products that are successfully listed for sale.
     * Returns products that are successfully listed for sale.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetProductsStatusSelling&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProductsStatusSelling> productsStatusSellingGetWithHttpInfo(String authorization, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = productsStatusSellingGetValidateBeforeCall(authorization, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetProductsStatusSelling>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns products that are successfully listed for sale. (asynchronously)
     * Returns products that are successfully listed for sale.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsStatusSellingGetAsync(String authorization, Integer offset, Integer limit, final ApiCallback<GetProductsStatusSelling> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsStatusSellingGetValidateBeforeCall(authorization, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetProductsStatusSelling>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsStocksPut
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body Array of product SKUs. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsStocksPutCall(String authorization, List<ProductStock> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/products/stocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsStocksPutValidateBeforeCall(String authorization, List<ProductStock> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productsStocksPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productsStocksPut(Async)");
        }

        return productsStocksPutCall(authorization, body, _callback);

    }

    /**
     * Bulk product stock update
     * Bulk product stock update. This endpoint expect a array of products &#x60;skuSellerId&#x60; with new inventory data
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body Array of product SKUs. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public void productsStocksPut(String authorization, List<ProductStock> body) throws ApiException {
        productsStocksPutWithHttpInfo(authorization, body);
    }

    /**
     * Bulk product stock update
     * Bulk product stock update. This endpoint expect a array of products &#x60;skuSellerId&#x60; with new inventory data
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body Array of product SKUs. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productsStocksPutWithHttpInfo(String authorization, List<ProductStock> body) throws ApiException {
        okhttp3.Call localVarCall = productsStocksPutValidateBeforeCall(authorization, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk product stock update (asynchronously)
     * Bulk product stock update. This endpoint expect a array of products &#x60;skuSellerId&#x60; with new inventory data
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param body Array of product SKUs. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsStocksPutAsync(String authorization, List<ProductStock> body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsStocksPutValidateBeforeCall(authorization, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
