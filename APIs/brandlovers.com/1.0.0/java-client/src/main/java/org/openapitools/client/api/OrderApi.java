/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NewTrackingRefund;
import org.openapitools.client.model.Newshipmentstatus;
import org.openapitools.client.model.Order;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for orderOrderIdGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Id of this order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdGetCall(String authorization, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/{orderId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderOrderIdGetValidateBeforeCall(String authorization, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling orderOrderIdGet(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrderIdGet(Async)");
        }

        return orderOrderIdGetCall(authorization, orderId, _callback);

    }

    /**
     * Returns all details of a order
     * Returns all details of a single order, including last status, items shipped or not.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Id of this order. (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public Order orderOrderIdGet(String authorization, String orderId) throws ApiException {
        ApiResponse<Order> localVarResp = orderOrderIdGetWithHttpInfo(authorization, orderId);
        return localVarResp.getData();
    }

    /**
     * Returns all details of a order
     * Returns all details of a single order, including last status, items shipped or not.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Id of this order. (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> orderOrderIdGetWithHttpInfo(String authorization, String orderId) throws ApiException {
        okhttp3.Call localVarCall = orderOrderIdGetValidateBeforeCall(authorization, orderId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all details of a order (asynchronously)
     * Returns all details of a single order, including last status, items shipped or not.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Id of this order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdGetAsync(String authorization, String orderId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderOrderIdGetValidateBeforeCall(authorization, orderId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderOrderIdShipmentCancelPost
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdShipmentCancelPostCall(String authorization, String orderId, NewTrackingRefund body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/order/{orderId}/shipment/cancel"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderOrderIdShipmentCancelPostValidateBeforeCall(String authorization, String orderId, NewTrackingRefund body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling orderOrderIdShipmentCancelPost(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrderIdShipmentCancelPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orderOrderIdShipmentCancelPost(Async)");
        }

        return orderOrderIdShipmentCancelPostCall(authorization, orderId, body, _callback);

    }

    /**
     * Confirm shipment canceletion (when requested by the customer) or failure to deliver
     * Confirm shipment canceletion (when requested by the customer) or failure to deliver one shipment
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public void orderOrderIdShipmentCancelPost(String authorization, String orderId, NewTrackingRefund body) throws ApiException {
        orderOrderIdShipmentCancelPostWithHttpInfo(authorization, orderId, body);
    }

    /**
     * Confirm shipment canceletion (when requested by the customer) or failure to deliver
     * Confirm shipment canceletion (when requested by the customer) or failure to deliver one shipment
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orderOrderIdShipmentCancelPostWithHttpInfo(String authorization, String orderId, NewTrackingRefund body) throws ApiException {
        okhttp3.Call localVarCall = orderOrderIdShipmentCancelPostValidateBeforeCall(authorization, orderId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirm shipment canceletion (when requested by the customer) or failure to deliver (asynchronously)
     * Confirm shipment canceletion (when requested by the customer) or failure to deliver one shipment
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdShipmentCancelPostAsync(String authorization, String orderId, NewTrackingRefund body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderOrderIdShipmentCancelPostValidateBeforeCall(authorization, orderId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderOrderIdShipmentDeliveredPost
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdShipmentDeliveredPostCall(String authorization, String orderId, Newshipmentstatus body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/order/{orderId}/shipment/delivered"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderOrderIdShipmentDeliveredPostValidateBeforeCall(String authorization, String orderId, Newshipmentstatus body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling orderOrderIdShipmentDeliveredPost(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrderIdShipmentDeliveredPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orderOrderIdShipmentDeliveredPost(Async)");
        }

        return orderOrderIdShipmentDeliveredPostCall(authorization, orderId, body, _callback);

    }

    /**
     * Confirms that a shipment was delivered
     * Confirms that a shipment was delivered. Must inform quantity of successfully deliverd items even if items deliverd was less than the original order
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public void orderOrderIdShipmentDeliveredPost(String authorization, String orderId, Newshipmentstatus body) throws ApiException {
        orderOrderIdShipmentDeliveredPostWithHttpInfo(authorization, orderId, body);
    }

    /**
     * Confirms that a shipment was delivered
     * Confirms that a shipment was delivered. Must inform quantity of successfully deliverd items even if items deliverd was less than the original order
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orderOrderIdShipmentDeliveredPostWithHttpInfo(String authorization, String orderId, Newshipmentstatus body) throws ApiException {
        okhttp3.Call localVarCall = orderOrderIdShipmentDeliveredPostValidateBeforeCall(authorization, orderId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirms that a shipment was delivered (asynchronously)
     * Confirms that a shipment was delivered. Must inform quantity of successfully deliverd items even if items deliverd was less than the original order
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdShipmentDeliveredPostAsync(String authorization, String orderId, Newshipmentstatus body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderOrderIdShipmentDeliveredPostValidateBeforeCall(authorization, orderId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderOrderIdShipmentExchangePost
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdShipmentExchangePostCall(String authorization, String orderId, NewTrackingRefund body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/order/{orderId}/shipment/exchange"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderOrderIdShipmentExchangePostValidateBeforeCall(String authorization, String orderId, NewTrackingRefund body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling orderOrderIdShipmentExchangePost(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrderIdShipmentExchangePost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orderOrderIdShipmentExchangePost(Async)");
        }

        return orderOrderIdShipmentExchangePostCall(authorization, orderId, body, _callback);

    }

    /**
     * Confirm item exchange
     * This enpoint to confirm item exchange when failure to deliver or requested by the customer. All customer requests are tracket via trouble tickets
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public void orderOrderIdShipmentExchangePost(String authorization, String orderId, NewTrackingRefund body) throws ApiException {
        orderOrderIdShipmentExchangePostWithHttpInfo(authorization, orderId, body);
    }

    /**
     * Confirm item exchange
     * This enpoint to confirm item exchange when failure to deliver or requested by the customer. All customer requests are tracket via trouble tickets
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orderOrderIdShipmentExchangePostWithHttpInfo(String authorization, String orderId, NewTrackingRefund body) throws ApiException {
        okhttp3.Call localVarCall = orderOrderIdShipmentExchangePostValidateBeforeCall(authorization, orderId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirm item exchange (asynchronously)
     * This enpoint to confirm item exchange when failure to deliver or requested by the customer. All customer requests are tracket via trouble tickets
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdShipmentExchangePostAsync(String authorization, String orderId, NewTrackingRefund body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderOrderIdShipmentExchangePostValidateBeforeCall(authorization, orderId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderOrderIdShipmentReturnPost
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Order unique Id (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdShipmentReturnPostCall(String authorization, String orderId, NewTrackingRefund body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/order/{orderId}/shipment/return"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderOrderIdShipmentReturnPostValidateBeforeCall(String authorization, String orderId, NewTrackingRefund body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling orderOrderIdShipmentReturnPost(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrderIdShipmentReturnPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orderOrderIdShipmentReturnPost(Async)");
        }

        return orderOrderIdShipmentReturnPostCall(authorization, orderId, body, _callback);

    }

    /**
     * Confirm order item return and refund
     * Use this endpoint to return and refund items froma a order. In order to fully return an order list all items and applicate quantity.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Order unique Id (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public void orderOrderIdShipmentReturnPost(String authorization, String orderId, NewTrackingRefund body) throws ApiException {
        orderOrderIdShipmentReturnPostWithHttpInfo(authorization, orderId, body);
    }

    /**
     * Confirm order item return and refund
     * Use this endpoint to return and refund items froma a order. In order to fully return an order list all items and applicate quantity.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Order unique Id (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orderOrderIdShipmentReturnPostWithHttpInfo(String authorization, String orderId, NewTrackingRefund body) throws ApiException {
        okhttp3.Call localVarCall = orderOrderIdShipmentReturnPostValidateBeforeCall(authorization, orderId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirm order item return and refund (asynchronously)
     * Use this endpoint to return and refund items froma a order. In order to fully return an order list all items and applicate quantity.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Order unique Id (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdShipmentReturnPostAsync(String authorization, String orderId, NewTrackingRefund body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderOrderIdShipmentReturnPostValidateBeforeCall(authorization, orderId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderOrderIdShipmentSentPost
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdShipmentSentPostCall(String authorization, String orderId, Newshipmentstatus body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/order/{orderId}/shipment/sent"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderOrderIdShipmentSentPostValidateBeforeCall(String authorization, String orderId, Newshipmentstatus body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling orderOrderIdShipmentSentPost(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrderIdShipmentSentPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orderOrderIdShipmentSentPost(Async)");
        }

        return orderOrderIdShipmentSentPostCall(authorization, orderId, body, _callback);

    }

    /**
     * Update new order to include shipment information
     * Updates order to include shipment shiped information. This endpoint can be used to include a single or multiple shipments for any give order. In order to inform that all items of a order where shipped list all of them, including applicable quantities in the payload.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public void orderOrderIdShipmentSentPost(String authorization, String orderId, Newshipmentstatus body) throws ApiException {
        orderOrderIdShipmentSentPostWithHttpInfo(authorization, orderId, body);
    }

    /**
     * Update new order to include shipment information
     * Updates order to include shipment shiped information. This endpoint can be used to include a single or multiple shipments for any give order. In order to inform that all items of a order where shipped list all of them, including applicable quantities in the payload.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orderOrderIdShipmentSentPostWithHttpInfo(String authorization, String orderId, Newshipmentstatus body) throws ApiException {
        okhttp3.Call localVarCall = orderOrderIdShipmentSentPostValidateBeforeCall(authorization, orderId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update new order to include shipment information (asynchronously)
     * Updates order to include shipment shiped information. This endpoint can be used to include a single or multiple shipments for any give order. In order to inform that all items of a order where shipped list all of them, including applicable quantities in the payload.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param orderId Unique Order Id (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. Was not able to find orderId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderOrderIdShipmentSentPostAsync(String authorization, String orderId, Newshipmentstatus body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderOrderIdShipmentSentPostValidateBeforeCall(authorization, orderId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
