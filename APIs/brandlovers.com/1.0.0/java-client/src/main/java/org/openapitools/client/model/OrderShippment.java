/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Courier;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.OrderItemReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderShippment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:33.374218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderShippment {
  public static final String SERIALIZED_NAME_COURIER = "courier";
  @SerializedName(SERIALIZED_NAME_COURIER)
  private Courier courier;

  public static final String SERIALIZED_NAME_CTE = "cte";
  @SerializedName(SERIALIZED_NAME_CTE)
  private String cte;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private Invoice invoice;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderItemReference> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurredAt";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private OffsetDateTime occurredAt;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private String order;

  public static final String SERIALIZED_NAME_SELLER_SHIPMENT_ID = "sellerShipmentId";
  @SerializedName(SERIALIZED_NAME_SELLER_SHIPMENT_ID)
  private String sellerShipmentId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TRACKING_URL = "trackingUrl";
  @SerializedName(SERIALIZED_NAME_TRACKING_URL)
  private String trackingUrl;

  public OrderShippment() {
  }

  public OrderShippment courier(Courier courier) {
    this.courier = courier;
    return this;
  }

  /**
   * Get courier
   * @return courier
   */
  @javax.annotation.Nullable
  public Courier getCourier() {
    return courier;
  }

  public void setCourier(Courier courier) {
    this.courier = courier;
  }


  public OrderShippment cte(String cte) {
    this.cte = cte;
    return this;
  }

  /**
   * Conhecimento de Transporte Elet√¥niconico
   * @return cte
   */
  @javax.annotation.Nullable
  public String getCte() {
    return cte;
  }

  public void setCte(String cte) {
    this.cte = cte;
  }


  public OrderShippment invoice(Invoice invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public Invoice getInvoice() {
    return invoice;
  }

  public void setInvoice(Invoice invoice) {
    this.invoice = invoice;
  }


  public OrderShippment items(List<OrderItemReference> items) {
    this.items = items;
    return this;
  }

  public OrderShippment addItemsItem(OrderItemReference itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<OrderItemReference> getItems() {
    return items;
  }

  public void setItems(List<OrderItemReference> items) {
    this.items = items;
  }


  public OrderShippment number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Courier unique trackign Id associated with this shipment
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public OrderShippment occurredAt(OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * Date that this shippment was shiped
   * @return occurredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOccurredAt() {
    return occurredAt;
  }

  public void setOccurredAt(OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
  }


  public OrderShippment order(String order) {
    this.order = order;
    return this;
  }

  /**
   * Order unique Id
   * @return order
   */
  @javax.annotation.Nullable
  public String getOrder() {
    return order;
  }

  public void setOrder(String order) {
    this.order = order;
  }


  public OrderShippment sellerShipmentId(String sellerShipmentId) {
    this.sellerShipmentId = sellerShipmentId;
    return this;
  }

  /**
   * Unique Seller shipment Id. This must be unique across all orders and shipments
   * @return sellerShipmentId
   */
  @javax.annotation.Nullable
  public String getSellerShipmentId() {
    return sellerShipmentId;
  }

  public void setSellerShipmentId(String sellerShipmentId) {
    this.sellerShipmentId = sellerShipmentId;
  }


  public OrderShippment status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Shipment status.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public OrderShippment trackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
    return this;
  }

  /**
   * Courier tracking URL
   * @return trackingUrl
   */
  @javax.annotation.Nullable
  public String getTrackingUrl() {
    return trackingUrl;
  }

  public void setTrackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderShippment orderShippment = (OrderShippment) o;
    return Objects.equals(this.courier, orderShippment.courier) &&
        Objects.equals(this.cte, orderShippment.cte) &&
        Objects.equals(this.invoice, orderShippment.invoice) &&
        Objects.equals(this.items, orderShippment.items) &&
        Objects.equals(this.number, orderShippment.number) &&
        Objects.equals(this.occurredAt, orderShippment.occurredAt) &&
        Objects.equals(this.order, orderShippment.order) &&
        Objects.equals(this.sellerShipmentId, orderShippment.sellerShipmentId) &&
        Objects.equals(this.status, orderShippment.status) &&
        Objects.equals(this.trackingUrl, orderShippment.trackingUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courier, cte, invoice, items, number, occurredAt, order, sellerShipmentId, status, trackingUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderShippment {\n");
    sb.append("    courier: ").append(toIndentedString(courier)).append("\n");
    sb.append("    cte: ").append(toIndentedString(cte)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    sellerShipmentId: ").append(toIndentedString(sellerShipmentId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courier");
    openapiFields.add("cte");
    openapiFields.add("invoice");
    openapiFields.add("items");
    openapiFields.add("number");
    openapiFields.add("occurredAt");
    openapiFields.add("order");
    openapiFields.add("sellerShipmentId");
    openapiFields.add("status");
    openapiFields.add("trackingUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderShippment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderShippment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderShippment is not found in the empty JSON string", OrderShippment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderShippment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderShippment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `courier`
      if (jsonObj.get("courier") != null && !jsonObj.get("courier").isJsonNull()) {
        Courier.validateJsonElement(jsonObj.get("courier"));
      }
      if ((jsonObj.get("cte") != null && !jsonObj.get("cte").isJsonNull()) && !jsonObj.get("cte").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cte` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cte").toString()));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        Invoice.validateJsonElement(jsonObj.get("invoice"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            OrderItemReference.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) && !jsonObj.get("order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order").toString()));
      }
      if ((jsonObj.get("sellerShipmentId") != null && !jsonObj.get("sellerShipmentId").isJsonNull()) && !jsonObj.get("sellerShipmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerShipmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerShipmentId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("trackingUrl") != null && !jsonObj.get("trackingUrl").isJsonNull()) && !jsonObj.get("trackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderShippment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderShippment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderShippment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderShippment.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderShippment>() {
           @Override
           public void write(JsonWriter out, OrderShippment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderShippment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderShippment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderShippment
   * @throws IOException if the JSON string is invalid with respect to OrderShippment
   */
  public static OrderShippment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderShippment.class);
  }

  /**
   * Convert an instance of OrderShippment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

