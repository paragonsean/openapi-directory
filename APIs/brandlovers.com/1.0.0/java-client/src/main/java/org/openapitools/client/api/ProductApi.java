/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetProduct;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductPrice;
import org.openapitools.client.model.SellerItemStatus;
import org.openapitools.client.model.Stock;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productPost
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param product New Produt that will be create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! Server received your request and will start background processing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPostCall(String authorization, Product product, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product;

        // create path and map variables
        String localVarPath = "/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPostValidateBeforeCall(String authorization, Product product, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productPost(Async)");
        }

        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling productPost(Async)");
        }

        return productPostCall(authorization, product, _callback);

    }

    /**
     * Create a new product to the marketplace
     * Use this enpoint to create a single new product to the Marketplace. This enpoint expects a json document with one product. If you whant to upload multiple products in a single API call use POST /products method. The server will load each product as an individual item that can be manipulated using your own &#x60;skuSellerId&#x60;. This system is idenpontent, this means that once a &#x60;skuSellerId&#x60; is created it cannot be re-created using this tool. In order to update, edit a product use the PUT method with the correct reference to your &#x60;skuSellerId&#x60;
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param product New Produt that will be create (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! Server received your request and will start background processing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public void productPost(String authorization, Product product) throws ApiException {
        productPostWithHttpInfo(authorization, product);
    }

    /**
     * Create a new product to the marketplace
     * Use this enpoint to create a single new product to the Marketplace. This enpoint expects a json document with one product. If you whant to upload multiple products in a single API call use POST /products method. The server will load each product as an individual item that can be manipulated using your own &#x60;skuSellerId&#x60;. This system is idenpontent, this means that once a &#x60;skuSellerId&#x60; is created it cannot be re-created using this tool. In order to update, edit a product use the PUT method with the correct reference to your &#x60;skuSellerId&#x60;
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param product New Produt that will be create (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! Server received your request and will start background processing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productPostWithHttpInfo(String authorization, Product product) throws ApiException {
        okhttp3.Call localVarCall = productPostValidateBeforeCall(authorization, product, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new product to the marketplace (asynchronously)
     * Use this enpoint to create a single new product to the Marketplace. This enpoint expects a json document with one product. If you whant to upload multiple products in a single API call use POST /products method. The server will load each product as an individual item that can be manipulated using your own &#x60;skuSellerId&#x60;. This system is idenpontent, this means that once a &#x60;skuSellerId&#x60; is created it cannot be re-created using this tool. In order to update, edit a product use the PUT method with the correct reference to your &#x60;skuSellerId&#x60;
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param product New Produt that will be create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess! Server received your request and will start background processing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPostAsync(String authorization, Product product, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPostValidateBeforeCall(authorization, product, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productSkuSellerIdGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId SKU ID do Lojista. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. In general this means a invalid skuSellerId. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSkuSellerIdGetCall(String authorization, String skuSellerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/{skuSellerId}"
            .replace("{" + "skuSellerId" + "}", localVarApiClient.escapeString(skuSellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productSkuSellerIdGetValidateBeforeCall(String authorization, String skuSellerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productSkuSellerIdGet(Async)");
        }

        // verify the required parameter 'skuSellerId' is set
        if (skuSellerId == null) {
            throw new ApiException("Missing the required parameter 'skuSellerId' when calling productSkuSellerIdGet(Async)");
        }

        return productSkuSellerIdGetCall(authorization, skuSellerId, _callback);

    }

    /**
     * Returns details of a single product using the seller &#x60;skuSellerId&#x60;
     * Returns detailed information of a single product with the seller &#x60;skuSellerId&#x60;. This service will return a json document with product detail, status, price, invetory among other infomarion availble in the Brand Lovers marketplace
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId SKU ID do Lojista. (required)
     * @return GetProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. In general this means a invalid skuSellerId. </td><td>  -  </td></tr>
     </table>
     */
    public GetProduct productSkuSellerIdGet(String authorization, String skuSellerId) throws ApiException {
        ApiResponse<GetProduct> localVarResp = productSkuSellerIdGetWithHttpInfo(authorization, skuSellerId);
        return localVarResp.getData();
    }

    /**
     * Returns details of a single product using the seller &#x60;skuSellerId&#x60;
     * Returns detailed information of a single product with the seller &#x60;skuSellerId&#x60;. This service will return a json document with product detail, status, price, invetory among other infomarion availble in the Brand Lovers marketplace
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId SKU ID do Lojista. (required)
     * @return ApiResponse&lt;GetProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. In general this means a invalid skuSellerId. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProduct> productSkuSellerIdGetWithHttpInfo(String authorization, String skuSellerId) throws ApiException {
        okhttp3.Call localVarCall = productSkuSellerIdGetValidateBeforeCall(authorization, skuSellerId, null);
        Type localVarReturnType = new TypeToken<GetProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns details of a single product using the seller &#x60;skuSellerId&#x60; (asynchronously)
     * Returns detailed information of a single product with the seller &#x60;skuSellerId&#x60;. This service will return a json document with product detail, status, price, invetory among other infomarion availble in the Brand Lovers marketplace
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId SKU ID do Lojista. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. In general this means a invalid skuSellerId. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSkuSellerIdGetAsync(String authorization, String skuSellerId, final ApiCallback<GetProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = productSkuSellerIdGetValidateBeforeCall(authorization, skuSellerId, _callback);
        Type localVarReturnType = new TypeToken<GetProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productSkuSellerIdPricesPut
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Product SKU (required)
     * @param body JSON document with the SKU price (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSkuSellerIdPricesPutCall(String authorization, String skuSellerId, ProductPrice body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/product/{skuSellerId}/prices"
            .replace("{" + "skuSellerId" + "}", localVarApiClient.escapeString(skuSellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productSkuSellerIdPricesPutValidateBeforeCall(String authorization, String skuSellerId, ProductPrice body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productSkuSellerIdPricesPut(Async)");
        }

        // verify the required parameter 'skuSellerId' is set
        if (skuSellerId == null) {
            throw new ApiException("Missing the required parameter 'skuSellerId' when calling productSkuSellerIdPricesPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productSkuSellerIdPricesPut(Async)");
        }

        return productSkuSellerIdPricesPutCall(authorization, skuSellerId, body, _callback);

    }

    /**
     * Allows seller to update prices of a single SKU
     * Allows seller to set the SKU prices (MSRP and/or offer price). All prices must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Product SKU (required)
     * @param body JSON document with the SKU price (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public void productSkuSellerIdPricesPut(String authorization, String skuSellerId, ProductPrice body) throws ApiException {
        productSkuSellerIdPricesPutWithHttpInfo(authorization, skuSellerId, body);
    }

    /**
     * Allows seller to update prices of a single SKU
     * Allows seller to set the SKU prices (MSRP and/or offer price). All prices must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Product SKU (required)
     * @param body JSON document with the SKU price (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productSkuSellerIdPricesPutWithHttpInfo(String authorization, String skuSellerId, ProductPrice body) throws ApiException {
        okhttp3.Call localVarCall = productSkuSellerIdPricesPutValidateBeforeCall(authorization, skuSellerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Allows seller to update prices of a single SKU (asynchronously)
     * Allows seller to set the SKU prices (MSRP and/or offer price). All prices must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Product SKU (required)
     * @param body JSON document with the SKU price (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSkuSellerIdPricesPutAsync(String authorization, String skuSellerId, ProductPrice body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productSkuSellerIdPricesPutValidateBeforeCall(authorization, skuSellerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productSkuSellerIdStatusPut
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system (required)
     * @param body Seller SKU that will be enabled or disabled (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSkuSellerIdStatusPutCall(String authorization, String skuSellerId, SellerItemStatus body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/product/{skuSellerId}/status"
            .replace("{" + "skuSellerId" + "}", localVarApiClient.escapeString(skuSellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productSkuSellerIdStatusPutValidateBeforeCall(String authorization, String skuSellerId, SellerItemStatus body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productSkuSellerIdStatusPut(Async)");
        }

        // verify the required parameter 'skuSellerId' is set
        if (skuSellerId == null) {
            throw new ApiException("Missing the required parameter 'skuSellerId' when calling productSkuSellerIdStatusPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productSkuSellerIdStatusPut(Async)");
        }

        return productSkuSellerIdStatusPutCall(authorization, skuSellerId, body, _callback);

    }

    /**
     * Enable/disable a single product in the Marketplace
     * Update product status in the Marketplace. Set to &#x60;true&#x60; to enable, &#x60;false&#x60; to disable sale.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system (required)
     * @param body Seller SKU that will be enabled or disabled (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public void productSkuSellerIdStatusPut(String authorization, String skuSellerId, SellerItemStatus body) throws ApiException {
        productSkuSellerIdStatusPutWithHttpInfo(authorization, skuSellerId, body);
    }

    /**
     * Enable/disable a single product in the Marketplace
     * Update product status in the Marketplace. Set to &#x60;true&#x60; to enable, &#x60;false&#x60; to disable sale.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system (required)
     * @param body Seller SKU that will be enabled or disabled (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productSkuSellerIdStatusPutWithHttpInfo(String authorization, String skuSellerId, SellerItemStatus body) throws ApiException {
        okhttp3.Call localVarCall = productSkuSellerIdStatusPutValidateBeforeCall(authorization, skuSellerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable/disable a single product in the Marketplace (asynchronously)
     * Update product status in the Marketplace. Set to &#x60;true&#x60; to enable, &#x60;false&#x60; to disable sale.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system (required)
     * @param body Seller SKU that will be enabled or disabled (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSkuSellerIdStatusPutAsync(String authorization, String skuSellerId, SellerItemStatus body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productSkuSellerIdStatusPutValidateBeforeCall(authorization, skuSellerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productSkuSellerIdStockPut
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system that will be updated (required)
     * @param body New product inventory information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSkuSellerIdStockPutCall(String authorization, String skuSellerId, Stock body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/product/{skuSellerId}/stock"
            .replace("{" + "skuSellerId" + "}", localVarApiClient.escapeString(skuSellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productSkuSellerIdStockPutValidateBeforeCall(String authorization, String skuSellerId, Stock body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling productSkuSellerIdStockPut(Async)");
        }

        // verify the required parameter 'skuSellerId' is set
        if (skuSellerId == null) {
            throw new ApiException("Missing the required parameter 'skuSellerId' when calling productSkuSellerIdStockPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productSkuSellerIdStockPut(Async)");
        }

        return productSkuSellerIdStockPutCall(authorization, skuSellerId, body, _callback);

    }

    /**
     * Update a single product stock
     * Update a single product inventory information. Products with zero stock will not be eligible for sale.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system that will be updated (required)
     * @param body New product inventory information (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public void productSkuSellerIdStockPut(String authorization, String skuSellerId, Stock body) throws ApiException {
        productSkuSellerIdStockPutWithHttpInfo(authorization, skuSellerId, body);
    }

    /**
     * Update a single product stock
     * Update a single product inventory information. Products with zero stock will not be eligible for sale.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system that will be updated (required)
     * @param body New product inventory information (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productSkuSellerIdStockPutWithHttpInfo(String authorization, String skuSellerId, Stock body) throws ApiException {
        okhttp3.Call localVarCall = productSkuSellerIdStockPutValidateBeforeCall(authorization, skuSellerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a single product stock (asynchronously)
     * Update a single product inventory information. Products with zero stock will not be eligible for sale.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param skuSellerId Unique Product Id (SKU) in the seller system that will be updated (required)
     * @param body New product inventory information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSkuSellerIdStockPutAsync(String authorization, String skuSellerId, Stock body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productSkuSellerIdStockPutValidateBeforeCall(authorization, skuSellerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
