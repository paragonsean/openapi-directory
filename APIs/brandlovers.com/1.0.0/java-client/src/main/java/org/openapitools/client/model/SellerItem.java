/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ControlledStock;
import org.openapitools.client.model.Dimensions;
import org.openapitools.client.model.GiftWrap;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ProductAttribute;
import org.openapitools.client.model.ProductPrice;
import org.openapitools.client.model.ProductReference;
import org.openapitools.client.model.ProductSiteReference;
import org.openapitools.client.model.SellerItemStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SellerItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:33.374218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SellerItem {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<ProductAttribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_GIFT_WRAP = "giftWrap";
  @SerializedName(SERIALIZED_NAME_GIFT_WRAP)
  private GiftWrap giftWrap;

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private List<String> gtin = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICES = "prices";
  @SerializedName(SERIALIZED_NAME_PRICES)
  private List<ProductPrice> prices = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private ProductReference product;

  public static final String SERIALIZED_NAME_SKU_SELLER_ID = "skuSellerId";
  @SerializedName(SERIALIZED_NAME_SKU_SELLER_ID)
  private String skuSellerId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<SellerItemStatus> status = new ArrayList<>();

  public static final String SERIALIZED_NAME_STOCKS = "stocks";
  @SerializedName(SERIALIZED_NAME_STOCKS)
  private List<ControlledStock> stocks = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List<ProductSiteReference> urls = new ArrayList<>();

  public SellerItem() {
  }

  public SellerItem attributes(List<ProductAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public SellerItem addAttributesItem(ProductAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nonnull
  public List<ProductAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<ProductAttribute> attributes) {
    this.attributes = attributes;
  }


  public SellerItem brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Brand name
   * @return brand
   */
  @javax.annotation.Nonnull
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public SellerItem dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nonnull
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  public SellerItem giftWrap(GiftWrap giftWrap) {
    this.giftWrap = giftWrap;
    return this;
  }

  /**
   * Get giftWrap
   * @return giftWrap
   */
  @javax.annotation.Nullable
  public GiftWrap getGiftWrap() {
    return giftWrap;
  }

  public void setGiftWrap(GiftWrap giftWrap) {
    this.giftWrap = giftWrap;
  }


  public SellerItem gtin(List<String> gtin) {
    this.gtin = gtin;
    return this;
  }

  public SellerItem addGtinItem(String gtinItem) {
    if (this.gtin == null) {
      this.gtin = new ArrayList<>();
    }
    this.gtin.add(gtinItem);
    return this;
  }

  /**
   * Array of product EAN and/or ISBN and/or ASIN codes
   * @return gtin
   */
  @javax.annotation.Nullable
  public List<String> getGtin() {
    return gtin;
  }

  public void setGtin(List<String> gtin) {
    this.gtin = gtin;
  }


  public SellerItem images(List<Image> images) {
    this.images = images;
    return this;
  }

  public SellerItem addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * List of valid Product image URLs.
   * @return images
   */
  @javax.annotation.Nonnull
  public List<Image> getImages() {
    return images;
  }

  public void setImages(List<Image> images) {
    this.images = images;
  }


  public SellerItem prices(List<ProductPrice> prices) {
    this.prices = prices;
    return this;
  }

  public SellerItem addPricesItem(ProductPrice pricesItem) {
    if (this.prices == null) {
      this.prices = new ArrayList<>();
    }
    this.prices.add(pricesItem);
    return this;
  }

  /**
   * Price information for each marketplace that this product is listed
   * @return prices
   */
  @javax.annotation.Nonnull
  public List<ProductPrice> getPrices() {
    return prices;
  }

  public void setPrices(List<ProductPrice> prices) {
    this.prices = prices;
  }


  public SellerItem product(ProductReference product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nonnull
  public ProductReference getProduct() {
    return product;
  }

  public void setProduct(ProductReference product) {
    this.product = product;
  }


  public SellerItem skuSellerId(String skuSellerId) {
    this.skuSellerId = skuSellerId;
    return this;
  }

  /**
   * Unique Product Id (SKU) in the seller system
   * @return skuSellerId
   */
  @javax.annotation.Nonnull
  public String getSkuSellerId() {
    return skuSellerId;
  }

  public void setSkuSellerId(String skuSellerId) {
    this.skuSellerId = skuSellerId;
  }


  public SellerItem status(List<SellerItemStatus> status) {
    this.status = status;
    return this;
  }

  public SellerItem addStatusItem(SellerItemStatus statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

  /**
   * Product status for each marketplace that this product is listed
   * @return status
   */
  @javax.annotation.Nonnull
  public List<SellerItemStatus> getStatus() {
    return status;
  }

  public void setStatus(List<SellerItemStatus> status) {
    this.status = status;
  }


  public SellerItem stocks(List<ControlledStock> stocks) {
    this.stocks = stocks;
    return this;
  }

  public SellerItem addStocksItem(ControlledStock stocksItem) {
    if (this.stocks == null) {
      this.stocks = new ArrayList<>();
    }
    this.stocks.add(stocksItem);
    return this;
  }

  /**
   * Invetory information for each marketplace that this product is listed
   * @return stocks
   */
  @javax.annotation.Nonnull
  public List<ControlledStock> getStocks() {
    return stocks;
  }

  public void setStocks(List<ControlledStock> stocks) {
    this.stocks = stocks;
  }


  public SellerItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SellerItem urls(List<ProductSiteReference> urls) {
    this.urls = urls;
    return this;
  }

  public SellerItem addUrlsItem(ProductSiteReference urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

  /**
   * List of URLs where the product is listed for sale
   * @return urls
   */
  @javax.annotation.Nullable
  public List<ProductSiteReference> getUrls() {
    return urls;
  }

  public void setUrls(List<ProductSiteReference> urls) {
    this.urls = urls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SellerItem sellerItem = (SellerItem) o;
    return Objects.equals(this.attributes, sellerItem.attributes) &&
        Objects.equals(this.brand, sellerItem.brand) &&
        Objects.equals(this.dimensions, sellerItem.dimensions) &&
        Objects.equals(this.giftWrap, sellerItem.giftWrap) &&
        Objects.equals(this.gtin, sellerItem.gtin) &&
        Objects.equals(this.images, sellerItem.images) &&
        Objects.equals(this.prices, sellerItem.prices) &&
        Objects.equals(this.product, sellerItem.product) &&
        Objects.equals(this.skuSellerId, sellerItem.skuSellerId) &&
        Objects.equals(this.status, sellerItem.status) &&
        Objects.equals(this.stocks, sellerItem.stocks) &&
        Objects.equals(this.title, sellerItem.title) &&
        Objects.equals(this.urls, sellerItem.urls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, brand, dimensions, giftWrap, gtin, images, prices, product, skuSellerId, status, stocks, title, urls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SellerItem {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    giftWrap: ").append(toIndentedString(giftWrap)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    skuSellerId: ").append(toIndentedString(skuSellerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stocks: ").append(toIndentedString(stocks)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("brand");
    openapiFields.add("dimensions");
    openapiFields.add("giftWrap");
    openapiFields.add("gtin");
    openapiFields.add("images");
    openapiFields.add("prices");
    openapiFields.add("product");
    openapiFields.add("skuSellerId");
    openapiFields.add("status");
    openapiFields.add("stocks");
    openapiFields.add("title");
    openapiFields.add("urls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("brand");
    openapiRequiredFields.add("dimensions");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("prices");
    openapiRequiredFields.add("product");
    openapiRequiredFields.add("skuSellerId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("stocks");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SellerItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SellerItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SellerItem is not found in the empty JSON string", SellerItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SellerItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SellerItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SellerItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }

      JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
      // validate the required field `attributes` (array)
      for (int i = 0; i < jsonArrayattributes.size(); i++) {
        ProductAttribute.validateJsonElement(jsonArrayattributes.get(i));
      };
      if (!jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // validate the required field `dimensions`
      Dimensions.validateJsonElement(jsonObj.get("dimensions"));
      // validate the optional field `giftWrap`
      if (jsonObj.get("giftWrap") != null && !jsonObj.get("giftWrap").isJsonNull()) {
        GiftWrap.validateJsonElement(jsonObj.get("giftWrap"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull() && !jsonObj.get("gtin").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be an array in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        Image.validateJsonElement(jsonArrayimages.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("prices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prices` to be an array in the JSON string but got `%s`", jsonObj.get("prices").toString()));
      }

      JsonArray jsonArrayprices = jsonObj.getAsJsonArray("prices");
      // validate the required field `prices` (array)
      for (int i = 0; i < jsonArrayprices.size(); i++) {
        ProductPrice.validateJsonElement(jsonArrayprices.get(i));
      };
      // validate the required field `product`
      ProductReference.validateJsonElement(jsonObj.get("product"));
      if (!jsonObj.get("skuSellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuSellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuSellerId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("status").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }

      JsonArray jsonArraystatus = jsonObj.getAsJsonArray("status");
      // validate the required field `status` (array)
      for (int i = 0; i < jsonArraystatus.size(); i++) {
        SellerItemStatus.validateJsonElement(jsonArraystatus.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("stocks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stocks` to be an array in the JSON string but got `%s`", jsonObj.get("stocks").toString()));
      }

      JsonArray jsonArraystocks = jsonObj.getAsJsonArray("stocks");
      // validate the required field `stocks` (array)
      for (int i = 0; i < jsonArraystocks.size(); i++) {
        ControlledStock.validateJsonElement(jsonArraystocks.get(i));
      };
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonNull()) {
        JsonArray jsonArrayurls = jsonObj.getAsJsonArray("urls");
        if (jsonArrayurls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urls` to be an array in the JSON string but got `%s`", jsonObj.get("urls").toString()));
          }

          // validate the optional field `urls` (array)
          for (int i = 0; i < jsonArrayurls.size(); i++) {
            ProductSiteReference.validateJsonElement(jsonArrayurls.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SellerItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SellerItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SellerItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SellerItem.class));

       return (TypeAdapter<T>) new TypeAdapter<SellerItem>() {
           @Override
           public void write(JsonWriter out, SellerItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SellerItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SellerItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SellerItem
   * @throws IOException if the JSON string is invalid with respect to SellerItem
   */
  public static SellerItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SellerItem.class);
  }

  /**
   * Convert an instance of SellerItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

