/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimensions;
import org.openapitools.client.model.GiftWrap;
import org.openapitools.client.model.ProductAttribute;
import org.openapitools.client.model.ProductPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:33.374218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductUpdate {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<ProductAttribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_GIFT_WRAP = "giftWrap";
  @SerializedName(SERIALIZED_NAME_GIFT_WRAP)
  private GiftWrap giftWrap;

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private List<String> gtin = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<String> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private ProductPrice price;

  public static final String SERIALIZED_NAME_PRODUCT_GROUP_ID = "productGroupId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_GROUP_ID)
  private String productGroupId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_SKU_SELLER_ID = "skuSellerId";
  @SerializedName(SERIALIZED_NAME_SKU_SELLER_ID)
  private String skuSellerId;

  public static final String SERIALIZED_NAME_STOCK = "stock";
  @SerializedName(SERIALIZED_NAME_STOCK)
  private Integer stock;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<String> videos = new ArrayList<>();

  public ProductUpdate() {
  }

  public ProductUpdate attributes(List<ProductAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ProductUpdate addAttributesItem(ProductAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * List of &#x60;key&#x60; &#x60;value&#x60; attributes of this product. This is very important for search and SEO optmization. Include all relevant information
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<ProductAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<ProductAttribute> attributes) {
    this.attributes = attributes;
  }


  public ProductUpdate brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Brand name
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public ProductUpdate categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public ProductUpdate addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Array of categories associated with this product
   * @return categories
   */
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public ProductUpdate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Product text description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProductUpdate dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  public ProductUpdate giftWrap(GiftWrap giftWrap) {
    this.giftWrap = giftWrap;
    return this;
  }

  /**
   * Get giftWrap
   * @return giftWrap
   */
  @javax.annotation.Nullable
  public GiftWrap getGiftWrap() {
    return giftWrap;
  }

  public void setGiftWrap(GiftWrap giftWrap) {
    this.giftWrap = giftWrap;
  }


  public ProductUpdate gtin(List<String> gtin) {
    this.gtin = gtin;
    return this;
  }

  public ProductUpdate addGtinItem(String gtinItem) {
    if (this.gtin == null) {
      this.gtin = new ArrayList<>();
    }
    this.gtin.add(gtinItem);
    return this;
  }

  /**
   * Array of product EAN and/or ISBN and/or ASIN codes
   * @return gtin
   */
  @javax.annotation.Nullable
  public List<String> getGtin() {
    return gtin;
  }

  public void setGtin(List<String> gtin) {
    this.gtin = gtin;
  }


  public ProductUpdate images(List<String> images) {
    this.images = images;
    return this;
  }

  public ProductUpdate addImagesItem(String imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * List of valid Product image URLs. HTTP or HTTPS are valid. HTTPS is prefered.
   * @return images
   */
  @javax.annotation.Nullable
  public List<String> getImages() {
    return images;
  }

  public void setImages(List<String> images) {
    this.images = images;
  }


  public ProductUpdate price(ProductPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public ProductPrice getPrice() {
    return price;
  }

  public void setPrice(ProductPrice price) {
    this.price = price;
  }


  public ProductUpdate productGroupId(String productGroupId) {
    this.productGroupId = productGroupId;
    return this;
  }

  /**
   * Unique Product Group ID. Products with the same &#x60;productGroupId&#x60; will be grouped and displayed as a unique entry. Use &#x60;productGroupId&#x60; to group diferent SKUs that represent diferent colors, sizes, capacities, etc..
   * @return productGroupId
   */
  @javax.annotation.Nullable
  public String getProductGroupId() {
    return productGroupId;
  }

  public void setProductGroupId(String productGroupId) {
    this.productGroupId = productGroupId;
  }


  public ProductUpdate productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Brand Lovers Product Id. Use this to recommend a product association
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public ProductUpdate skuSellerId(String skuSellerId) {
    this.skuSellerId = skuSellerId;
    return this;
  }

  /**
   * Unique Product Id (SKU) in the seller system
   * @return skuSellerId
   */
  @javax.annotation.Nonnull
  public String getSkuSellerId() {
    return skuSellerId;
  }

  public void setSkuSellerId(String skuSellerId) {
    this.skuSellerId = skuSellerId;
  }


  public ProductUpdate stock(Integer stock) {
    this.stock = stock;
    return this;
  }

  /**
   * Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.
   * @return stock
   */
  @javax.annotation.Nullable
  public Integer getStock() {
    return stock;
  }

  public void setStock(Integer stock) {
    this.stock = stock;
  }


  public ProductUpdate title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ProductUpdate videos(List<String> videos) {
    this.videos = videos;
    return this;
  }

  public ProductUpdate addVideosItem(String videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

  /**
   * List of videos de URLs associated with this product. HTTP or HTTPS are valid. HTTPS is prefered.
   * @return videos
   */
  @javax.annotation.Nullable
  public List<String> getVideos() {
    return videos;
  }

  public void setVideos(List<String> videos) {
    this.videos = videos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductUpdate productUpdate = (ProductUpdate) o;
    return Objects.equals(this.attributes, productUpdate.attributes) &&
        Objects.equals(this.brand, productUpdate.brand) &&
        Objects.equals(this.categories, productUpdate.categories) &&
        Objects.equals(this.description, productUpdate.description) &&
        Objects.equals(this.dimensions, productUpdate.dimensions) &&
        Objects.equals(this.giftWrap, productUpdate.giftWrap) &&
        Objects.equals(this.gtin, productUpdate.gtin) &&
        Objects.equals(this.images, productUpdate.images) &&
        Objects.equals(this.price, productUpdate.price) &&
        Objects.equals(this.productGroupId, productUpdate.productGroupId) &&
        Objects.equals(this.productId, productUpdate.productId) &&
        Objects.equals(this.skuSellerId, productUpdate.skuSellerId) &&
        Objects.equals(this.stock, productUpdate.stock) &&
        Objects.equals(this.title, productUpdate.title) &&
        Objects.equals(this.videos, productUpdate.videos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, brand, categories, description, dimensions, giftWrap, gtin, images, price, productGroupId, productId, skuSellerId, stock, title, videos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductUpdate {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    giftWrap: ").append(toIndentedString(giftWrap)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    productGroupId: ").append(toIndentedString(productGroupId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    skuSellerId: ").append(toIndentedString(skuSellerId)).append("\n");
    sb.append("    stock: ").append(toIndentedString(stock)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("brand");
    openapiFields.add("categories");
    openapiFields.add("description");
    openapiFields.add("dimensions");
    openapiFields.add("giftWrap");
    openapiFields.add("gtin");
    openapiFields.add("images");
    openapiFields.add("price");
    openapiFields.add("productGroupId");
    openapiFields.add("productId");
    openapiFields.add("skuSellerId");
    openapiFields.add("stock");
    openapiFields.add("title");
    openapiFields.add("videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("skuSellerId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductUpdate is not found in the empty JSON string", ProductUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            ProductAttribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Dimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      // validate the optional field `giftWrap`
      if (jsonObj.get("giftWrap") != null && !jsonObj.get("giftWrap").isJsonNull()) {
        GiftWrap.validateJsonElement(jsonObj.get("giftWrap"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull() && !jsonObj.get("gtin").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be an array in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull() && !jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        ProductPrice.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("productGroupId") != null && !jsonObj.get("productGroupId").isJsonNull()) && !jsonObj.get("productGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productGroupId").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if (!jsonObj.get("skuSellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuSellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuSellerId").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull() && !jsonObj.get("videos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `videos` to be an array in the JSON string but got `%s`", jsonObj.get("videos").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductUpdate>() {
           @Override
           public void write(JsonWriter out, ProductUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductUpdate
   * @throws IOException if the JSON string is invalid with respect to ProductUpdate
   */
  public static ProductUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductUpdate.class);
  }

  /**
   * Convert an instance of ProductUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

