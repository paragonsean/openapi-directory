/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Courier;
import org.openapitools.client.model.OrderItemReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewTrackingRefund
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:33.374218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewTrackingRefund {
  public static final String SERIALIZED_NAME_COURIER = "courier";
  @SerializedName(SERIALIZED_NAME_COURIER)
  private Courier courier;

  public static final String SERIALIZED_NAME_CTE = "cte";
  @SerializedName(SERIALIZED_NAME_CTE)
  private String cte;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private String info;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderItemReference> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurredAt";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private OffsetDateTime occurredAt;

  public static final String SERIALIZED_NAME_SELLER_SHIPMENT_ID = "sellerShipmentId";
  @SerializedName(SERIALIZED_NAME_SELLER_SHIPMENT_ID)
  private String sellerShipmentId;

  public static final String SERIALIZED_NAME_TRANCKING_URL = "tranckingUrl";
  @SerializedName(SERIALIZED_NAME_TRANCKING_URL)
  private String tranckingUrl;

  public NewTrackingRefund() {
  }

  public NewTrackingRefund courier(Courier courier) {
    this.courier = courier;
    return this;
  }

  /**
   * Get courier
   * @return courier
   */
  @javax.annotation.Nullable
  public Courier getCourier() {
    return courier;
  }

  public void setCourier(Courier courier) {
    this.courier = courier;
  }


  public NewTrackingRefund cte(String cte) {
    this.cte = cte;
    return this;
  }

  /**
   * Conhecimento do Transporte Eletr√¥nico
   * @return cte
   */
  @javax.annotation.Nullable
  public String getCte() {
    return cte;
  }

  public void setCte(String cte) {
    this.cte = cte;
  }


  public NewTrackingRefund info(String info) {
    this.info = info;
    return this;
  }

  /**
   * Aditional information about this shippment
   * @return info
   */
  @javax.annotation.Nonnull
  public String getInfo() {
    return info;
  }

  public void setInfo(String info) {
    this.info = info;
  }


  public NewTrackingRefund items(List<OrderItemReference> items) {
    this.items = items;
    return this;
  }

  public NewTrackingRefund addItemsItem(OrderItemReference itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nonnull
  public List<OrderItemReference> getItems() {
    return items;
  }

  public void setItems(List<OrderItemReference> items) {
    this.items = items;
  }


  public NewTrackingRefund number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Tracking Id in the courier
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public NewTrackingRefund occurredAt(OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * Date time that this was created
   * @return occurredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOccurredAt() {
    return occurredAt;
  }

  public void setOccurredAt(OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
  }


  public NewTrackingRefund sellerShipmentId(String sellerShipmentId) {
    this.sellerShipmentId = sellerShipmentId;
    return this;
  }

  /**
   * Unique Seller shipment Id. This must be unique across all orders and shipments
   * @return sellerShipmentId
   */
  @javax.annotation.Nullable
  public String getSellerShipmentId() {
    return sellerShipmentId;
  }

  public void setSellerShipmentId(String sellerShipmentId) {
    this.sellerShipmentId = sellerShipmentId;
  }


  public NewTrackingRefund tranckingUrl(String tranckingUrl) {
    this.tranckingUrl = tranckingUrl;
    return this;
  }

  /**
   * Courier tracking URL
   * @return tranckingUrl
   */
  @javax.annotation.Nullable
  public String getTranckingUrl() {
    return tranckingUrl;
  }

  public void setTranckingUrl(String tranckingUrl) {
    this.tranckingUrl = tranckingUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewTrackingRefund newTrackingRefund = (NewTrackingRefund) o;
    return Objects.equals(this.courier, newTrackingRefund.courier) &&
        Objects.equals(this.cte, newTrackingRefund.cte) &&
        Objects.equals(this.info, newTrackingRefund.info) &&
        Objects.equals(this.items, newTrackingRefund.items) &&
        Objects.equals(this.number, newTrackingRefund.number) &&
        Objects.equals(this.occurredAt, newTrackingRefund.occurredAt) &&
        Objects.equals(this.sellerShipmentId, newTrackingRefund.sellerShipmentId) &&
        Objects.equals(this.tranckingUrl, newTrackingRefund.tranckingUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courier, cte, info, items, number, occurredAt, sellerShipmentId, tranckingUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewTrackingRefund {\n");
    sb.append("    courier: ").append(toIndentedString(courier)).append("\n");
    sb.append("    cte: ").append(toIndentedString(cte)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    sellerShipmentId: ").append(toIndentedString(sellerShipmentId)).append("\n");
    sb.append("    tranckingUrl: ").append(toIndentedString(tranckingUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courier");
    openapiFields.add("cte");
    openapiFields.add("info");
    openapiFields.add("items");
    openapiFields.add("number");
    openapiFields.add("occurredAt");
    openapiFields.add("sellerShipmentId");
    openapiFields.add("tranckingUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("info");
    openapiRequiredFields.add("items");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewTrackingRefund
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewTrackingRefund.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewTrackingRefund is not found in the empty JSON string", NewTrackingRefund.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewTrackingRefund.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewTrackingRefund` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewTrackingRefund.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `courier`
      if (jsonObj.get("courier") != null && !jsonObj.get("courier").isJsonNull()) {
        Courier.validateJsonElement(jsonObj.get("courier"));
      }
      if ((jsonObj.get("cte") != null && !jsonObj.get("cte").isJsonNull()) && !jsonObj.get("cte").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cte` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cte").toString()));
      }
      if (!jsonObj.get("info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("info").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        OrderItemReference.validateJsonElement(jsonArrayitems.get(i));
      };
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("sellerShipmentId") != null && !jsonObj.get("sellerShipmentId").isJsonNull()) && !jsonObj.get("sellerShipmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerShipmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerShipmentId").toString()));
      }
      if ((jsonObj.get("tranckingUrl") != null && !jsonObj.get("tranckingUrl").isJsonNull()) && !jsonObj.get("tranckingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tranckingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tranckingUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewTrackingRefund.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewTrackingRefund' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewTrackingRefund> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewTrackingRefund.class));

       return (TypeAdapter<T>) new TypeAdapter<NewTrackingRefund>() {
           @Override
           public void write(JsonWriter out, NewTrackingRefund value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewTrackingRefund read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewTrackingRefund given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewTrackingRefund
   * @throws IOException if the JSON string is invalid with respect to NewTrackingRefund
   */
  public static NewTrackingRefund fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewTrackingRefund.class);
  }

  /**
   * Convert an instance of NewTrackingRefund to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

