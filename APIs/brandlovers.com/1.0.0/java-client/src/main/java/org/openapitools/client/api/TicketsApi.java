/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetTicketMessages;
import org.openapitools.client.model.GetTickets;
import org.openapitools.client.model.NewTicket;
import org.openapitools.client.model.NewTicketMessage;
import org.openapitools.client.model.TicketStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TicketsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TicketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TicketsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ticketPost
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param newTicket JSON object with new trouble ticket (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticketPostCall(String authorization, NewTicket newTicket, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newTicket;

        // create path and map variables
        String localVarPath = "/ticket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ticketPostValidateBeforeCall(String authorization, NewTicket newTicket, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ticketPost(Async)");
        }

        // verify the required parameter 'newTicket' is set
        if (newTicket == null) {
            throw new ApiException("Missing the required parameter 'newTicket' when calling ticketPost(Async)");
        }

        return ticketPostCall(authorization, newTicket, _callback);

    }

    /**
     * Creates a new trouble ticket
     * Use this service to create a new trouble ticket. Use this to include relevant information about the order, comunicate with the customer or marketplace team. Whenever possible message will be pushed to Mobile first. This is the primary mean of comunicaiton with the customer regarding orders, shippments, shippments status. New tickets will be automatically be set to &#39;OPEN&#39;. Trouble tickets need to be associated with a orderId or customer. New tickets can optionally include a new message.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param newTicket JSON object with new trouble ticket (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public void ticketPost(String authorization, NewTicket newTicket) throws ApiException {
        ticketPostWithHttpInfo(authorization, newTicket);
    }

    /**
     * Creates a new trouble ticket
     * Use this service to create a new trouble ticket. Use this to include relevant information about the order, comunicate with the customer or marketplace team. Whenever possible message will be pushed to Mobile first. This is the primary mean of comunicaiton with the customer regarding orders, shippments, shippments status. New tickets will be automatically be set to &#39;OPEN&#39;. Trouble tickets need to be associated with a orderId or customer. New tickets can optionally include a new message.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param newTicket JSON object with new trouble ticket (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ticketPostWithHttpInfo(String authorization, NewTicket newTicket) throws ApiException {
        okhttp3.Call localVarCall = ticketPostValidateBeforeCall(authorization, newTicket, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new trouble ticket (asynchronously)
     * Use this service to create a new trouble ticket. Use this to include relevant information about the order, comunicate with the customer or marketplace team. Whenever possible message will be pushed to Mobile first. This is the primary mean of comunicaiton with the customer regarding orders, shippments, shippments status. New tickets will be automatically be set to &#39;OPEN&#39;. Trouble tickets need to be associated with a orderId or customer. New tickets can optionally include a new message.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param newTicket JSON object with new trouble ticket (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticketPostAsync(String authorization, NewTicket newTicket, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ticketPostValidateBeforeCall(authorization, newTicket, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ticketTicketIdMessagePost
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket ID. (required)
     * @param message New message object to append to trouble ticket. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticketTicketIdMessagePostCall(String authorization, String ticketId, NewTicketMessage message, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = message;

        // create path and map variables
        String localVarPath = "/ticket/{ticketId}/message"
            .replace("{" + "ticketId" + "}", localVarApiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ticketTicketIdMessagePostValidateBeforeCall(String authorization, String ticketId, NewTicketMessage message, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ticketTicketIdMessagePost(Async)");
        }

        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling ticketTicketIdMessagePost(Async)");
        }

        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling ticketTicketIdMessagePost(Async)");
        }

        return ticketTicketIdMessagePostCall(authorization, ticketId, message, _callback);

    }

    /**
     * Add new message to trouble ticket
     * Add a new message to this trouble ticket. Messages can be &#x60;CUSTOMER&#x60; (customer will be able to see it) or &#x60;INTERNAL&#x60;.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket ID. (required)
     * @param message New message object to append to trouble ticket. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public void ticketTicketIdMessagePost(String authorization, String ticketId, NewTicketMessage message) throws ApiException {
        ticketTicketIdMessagePostWithHttpInfo(authorization, ticketId, message);
    }

    /**
     * Add new message to trouble ticket
     * Add a new message to this trouble ticket. Messages can be &#x60;CUSTOMER&#x60; (customer will be able to see it) or &#x60;INTERNAL&#x60;.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket ID. (required)
     * @param message New message object to append to trouble ticket. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ticketTicketIdMessagePostWithHttpInfo(String authorization, String ticketId, NewTicketMessage message) throws ApiException {
        okhttp3.Call localVarCall = ticketTicketIdMessagePostValidateBeforeCall(authorization, ticketId, message, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new message to trouble ticket (asynchronously)
     * Add a new message to this trouble ticket. Messages can be &#x60;CUSTOMER&#x60; (customer will be able to see it) or &#x60;INTERNAL&#x60;.
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket ID. (required)
     * @param message New message object to append to trouble ticket. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticketTicketIdMessagePostAsync(String authorization, String ticketId, NewTicketMessage message, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ticketTicketIdMessagePostValidateBeforeCall(authorization, ticketId, message, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ticketTicketIdMessagesGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket ID. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied. You can only access your trouble tickets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticketTicketIdMessagesGetCall(String authorization, String ticketId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ticket/{ticketId}/messages"
            .replace("{" + "ticketId" + "}", localVarApiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ticketTicketIdMessagesGetValidateBeforeCall(String authorization, String ticketId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ticketTicketIdMessagesGet(Async)");
        }

        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling ticketTicketIdMessagesGet(Async)");
        }

        return ticketTicketIdMessagesGetCall(authorization, ticketId, offset, limit, _callback);

    }

    /**
     * Get trouble ticket messages
     * Returns trouble ticket history with all messages exchanged. Only tickets related to your seller will be returned. Attempt to read other tickets will return 403 (acess denied).
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket ID. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetTicketMessages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied. You can only access your trouble tickets </td><td>  -  </td></tr>
     </table>
     */
    public GetTicketMessages ticketTicketIdMessagesGet(String authorization, String ticketId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetTicketMessages> localVarResp = ticketTicketIdMessagesGetWithHttpInfo(authorization, ticketId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get trouble ticket messages
     * Returns trouble ticket history with all messages exchanged. Only tickets related to your seller will be returned. Attempt to read other tickets will return 403 (acess denied).
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket ID. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetTicketMessages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied. You can only access your trouble tickets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTicketMessages> ticketTicketIdMessagesGetWithHttpInfo(String authorization, String ticketId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ticketTicketIdMessagesGetValidateBeforeCall(authorization, ticketId, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetTicketMessages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get trouble ticket messages (asynchronously)
     * Returns trouble ticket history with all messages exchanged. Only tickets related to your seller will be returned. Attempt to read other tickets will return 403 (acess denied).
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket ID. (required)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied. You can only access your trouble tickets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticketTicketIdMessagesGetAsync(String authorization, String ticketId, Integer offset, Integer limit, final ApiCallback<GetTicketMessages> _callback) throws ApiException {

        okhttp3.Call localVarCall = ticketTicketIdMessagesGetValidateBeforeCall(authorization, ticketId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetTicketMessages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ticketTicketIdStatusPut
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket unique identification (required)
     * @param body New trouble ticket status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully received transaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticketTicketIdStatusPutCall(String authorization, String ticketId, TicketStatus body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ticket/{ticketId}/status"
            .replace("{" + "ticketId" + "}", localVarApiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ticketTicketIdStatusPutValidateBeforeCall(String authorization, String ticketId, TicketStatus body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ticketTicketIdStatusPut(Async)");
        }

        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling ticketTicketIdStatusPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ticketTicketIdStatusPut(Async)");
        }

        return ticketTicketIdStatusPutCall(authorization, ticketId, body, _callback);

    }

    /**
     * Update trouble ticket status
     * Alows the seller to update the status of a trouble ticket
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket unique identification (required)
     * @param body New trouble ticket status (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully received transaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public void ticketTicketIdStatusPut(String authorization, String ticketId, TicketStatus body) throws ApiException {
        ticketTicketIdStatusPutWithHttpInfo(authorization, ticketId, body);
    }

    /**
     * Update trouble ticket status
     * Alows the seller to update the status of a trouble ticket
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket unique identification (required)
     * @param body New trouble ticket status (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully received transaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ticketTicketIdStatusPutWithHttpInfo(String authorization, String ticketId, TicketStatus body) throws ApiException {
        okhttp3.Call localVarCall = ticketTicketIdStatusPutValidateBeforeCall(authorization, ticketId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update trouble ticket status (asynchronously)
     * Alows the seller to update the status of a trouble ticket
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param ticketId Trouble ticket unique identification (required)
     * @param body New trouble ticket status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully received transaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied. You&#39;re not authenticated or token expired. Check your request header the &#x60;authorization&#x60; field is required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server refused to process your request. Please check the API SLA and reduce number of requests per second. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticketTicketIdStatusPutAsync(String authorization, String ticketId, TicketStatus body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ticketTicketIdStatusPutValidateBeforeCall(authorization, ticketId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ticketsGet
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Query by trouble ticket status (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticketsGetCall(String authorization, String status, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ticketsGetValidateBeforeCall(String authorization, String status, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling ticketsGet(Async)");
        }

        return ticketsGetCall(authorization, status, offset, limit, _callback);

    }

    /**
     * Get customers trouble tickets
     * Allows seller to receive and status, queries, requests and complaints from customers. As well related messages
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Query by trouble ticket status (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return GetTickets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public GetTickets ticketsGet(String authorization, String status, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetTickets> localVarResp = ticketsGetWithHttpInfo(authorization, status, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get customers trouble tickets
     * Allows seller to receive and status, queries, requests and complaints from customers. As well related messages
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Query by trouble ticket status (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @return ApiResponse&lt;GetTickets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTickets> ticketsGetWithHttpInfo(String authorization, String status, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ticketsGetValidateBeforeCall(authorization, status, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetTickets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customers trouble tickets (asynchronously)
     * Allows seller to receive and status, queries, requests and complaints from customers. As well related messages
     * @param authorization Authorization token. The Authorization token can be found in your Admin console. (required)
     * @param status Query by trouble ticket status (optional)
     * @param offset Number or items to skip when executing query. List starts at zero. If omitted will default to zero. Use this conjuction with &#x60;limit&#x60; to paginate across the results. (optional)
     * @param limit Number or items to return when executing query. Defaults to 10. Use this conjuction with &#x60;offset&#x60; to paginate across the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticketsGetAsync(String authorization, String status, Integer offset, Integer limit, final ApiCallback<GetTickets> _callback) throws ApiException {

        okhttp3.Call localVarCall = ticketsGetValidateBeforeCall(authorization, status, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetTickets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
