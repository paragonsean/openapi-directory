/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimensions;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GiftWrap;
import org.openapitools.client.model.ProductAttribute;
import org.openapitools.client.model.ProductPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetProduct
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:33.374218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetProduct {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<ProductAttribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_GIFT_WRAP = "giftWrap";
  @SerializedName(SERIALIZED_NAME_GIFT_WRAP)
  private GiftWrap giftWrap;

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private List<String> gtin = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<String> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private ProductPrice price;

  public static final String SERIALIZED_NAME_PRODUCT_GROUP_ID = "productGroupId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_GROUP_ID)
  private String productGroupId;

  public static final String SERIALIZED_NAME_SKU_SELLER_ID = "skuSellerId";
  @SerializedName(SERIALIZED_NAME_SKU_SELLER_ID)
  private String skuSellerId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STOCK = "stock";
  @SerializedName(SERIALIZED_NAME_STOCK)
  private Integer stock;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<String> videos = new ArrayList<>();

  public GetProduct() {
  }

  public GetProduct attributes(List<ProductAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public GetProduct addAttributesItem(ProductAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nonnull
  public List<ProductAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<ProductAttribute> attributes) {
    this.attributes = attributes;
  }


  public GetProduct brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Brand name
   * @return brand
   */
  @javax.annotation.Nonnull
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public GetProduct categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public GetProduct addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Array of categories associated with this product
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public GetProduct description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Product text description.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetProduct dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  public GetProduct errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public GetProduct addErrorsItem(Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }


  public GetProduct giftWrap(GiftWrap giftWrap) {
    this.giftWrap = giftWrap;
    return this;
  }

  /**
   * Get giftWrap
   * @return giftWrap
   */
  @javax.annotation.Nullable
  public GiftWrap getGiftWrap() {
    return giftWrap;
  }

  public void setGiftWrap(GiftWrap giftWrap) {
    this.giftWrap = giftWrap;
  }


  public GetProduct gtin(List<String> gtin) {
    this.gtin = gtin;
    return this;
  }

  public GetProduct addGtinItem(String gtinItem) {
    if (this.gtin == null) {
      this.gtin = new ArrayList<>();
    }
    this.gtin.add(gtinItem);
    return this;
  }

  /**
   * Array of product EAN and/or ISBN and/or ASIN codes
   * @return gtin
   */
  @javax.annotation.Nullable
  public List<String> getGtin() {
    return gtin;
  }

  public void setGtin(List<String> gtin) {
    this.gtin = gtin;
  }


  public GetProduct images(List<String> images) {
    this.images = images;
    return this;
  }

  public GetProduct addImagesItem(String imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * List of valid Product image URLs. HTTP or HTTPS are valid. HTTPS is prefered.
   * @return images
   */
  @javax.annotation.Nonnull
  public List<String> getImages() {
    return images;
  }

  public void setImages(List<String> images) {
    this.images = images;
  }


  public GetProduct price(ProductPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public ProductPrice getPrice() {
    return price;
  }

  public void setPrice(ProductPrice price) {
    this.price = price;
  }


  public GetProduct productGroupId(String productGroupId) {
    this.productGroupId = productGroupId;
    return this;
  }

  /**
   * Unique Product Group ID. Products with the same &#x60;productGroupId&#x60; will be grouped and displayed as a unique entry. Use &#x60;productGroupId&#x60; to group diferent SKUs that represent diferent colors, sizes, capacities, etc..
   * @return productGroupId
   */
  @javax.annotation.Nullable
  public String getProductGroupId() {
    return productGroupId;
  }

  public void setProductGroupId(String productGroupId) {
    this.productGroupId = productGroupId;
  }


  public GetProduct skuSellerId(String skuSellerId) {
    this.skuSellerId = skuSellerId;
    return this;
  }

  /**
   * Unique Product Id (SKU) in the seller system
   * @return skuSellerId
   */
  @javax.annotation.Nonnull
  public String getSkuSellerId() {
    return skuSellerId;
  }

  public void setSkuSellerId(String skuSellerId) {
    this.skuSellerId = skuSellerId;
  }


  public GetProduct status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Product status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public GetProduct stock(Integer stock) {
    this.stock = stock;
    return this;
  }

  /**
   * Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.
   * @return stock
   */
  @javax.annotation.Nonnull
  public Integer getStock() {
    return stock;
  }

  public void setStock(Integer stock) {
    this.stock = stock;
  }


  public GetProduct title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GetProduct videos(List<String> videos) {
    this.videos = videos;
    return this;
  }

  public GetProduct addVideosItem(String videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

  /**
   * List of videos de URLs associated with this product. HTTP or HTTPS are valid. HTTPS is prefered.
   * @return videos
   */
  @javax.annotation.Nullable
  public List<String> getVideos() {
    return videos;
  }

  public void setVideos(List<String> videos) {
    this.videos = videos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetProduct getProduct = (GetProduct) o;
    return Objects.equals(this.attributes, getProduct.attributes) &&
        Objects.equals(this.brand, getProduct.brand) &&
        Objects.equals(this.categories, getProduct.categories) &&
        Objects.equals(this.description, getProduct.description) &&
        Objects.equals(this.dimensions, getProduct.dimensions) &&
        Objects.equals(this.errors, getProduct.errors) &&
        Objects.equals(this.giftWrap, getProduct.giftWrap) &&
        Objects.equals(this.gtin, getProduct.gtin) &&
        Objects.equals(this.images, getProduct.images) &&
        Objects.equals(this.price, getProduct.price) &&
        Objects.equals(this.productGroupId, getProduct.productGroupId) &&
        Objects.equals(this.skuSellerId, getProduct.skuSellerId) &&
        Objects.equals(this.status, getProduct.status) &&
        Objects.equals(this.stock, getProduct.stock) &&
        Objects.equals(this.title, getProduct.title) &&
        Objects.equals(this.videos, getProduct.videos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, brand, categories, description, dimensions, errors, giftWrap, gtin, images, price, productGroupId, skuSellerId, status, stock, title, videos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetProduct {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    giftWrap: ").append(toIndentedString(giftWrap)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    productGroupId: ").append(toIndentedString(productGroupId)).append("\n");
    sb.append("    skuSellerId: ").append(toIndentedString(skuSellerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stock: ").append(toIndentedString(stock)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("brand");
    openapiFields.add("categories");
    openapiFields.add("description");
    openapiFields.add("dimensions");
    openapiFields.add("errors");
    openapiFields.add("giftWrap");
    openapiFields.add("gtin");
    openapiFields.add("images");
    openapiFields.add("price");
    openapiFields.add("productGroupId");
    openapiFields.add("skuSellerId");
    openapiFields.add("status");
    openapiFields.add("stock");
    openapiFields.add("title");
    openapiFields.add("videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("brand");
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("skuSellerId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("stock");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetProduct
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetProduct is not found in the empty JSON string", GetProduct.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetProduct.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetProduct` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetProduct.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }

      JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
      // validate the required field `attributes` (array)
      for (int i = 0; i < jsonArrayattributes.size(); i++) {
        ProductAttribute.validateJsonElement(jsonArrayattributes.get(i));
      };
      if (!jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Dimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      // validate the optional field `giftWrap`
      if (jsonObj.get("giftWrap") != null && !jsonObj.get("giftWrap").isJsonNull()) {
        GiftWrap.validateJsonElement(jsonObj.get("giftWrap"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull() && !jsonObj.get("gtin").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be an array in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("images") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }
      // validate the required field `price`
      ProductPrice.validateJsonElement(jsonObj.get("price"));
      if ((jsonObj.get("productGroupId") != null && !jsonObj.get("productGroupId").isJsonNull()) && !jsonObj.get("productGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productGroupId").toString()));
      }
      if (!jsonObj.get("skuSellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuSellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuSellerId").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull() && !jsonObj.get("videos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `videos` to be an array in the JSON string but got `%s`", jsonObj.get("videos").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<GetProduct>() {
           @Override
           public void write(JsonWriter out, GetProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetProduct read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetProduct given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetProduct
   * @throws IOException if the JSON string is invalid with respect to GetProduct
   */
  public static GetProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetProduct.class);
  }

  /**
   * Convert an instance of GetProduct to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

