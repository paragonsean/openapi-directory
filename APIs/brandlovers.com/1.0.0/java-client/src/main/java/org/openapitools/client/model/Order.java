/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Customer;
import org.openapitools.client.model.Freight;
import org.openapitools.client.model.OrderItem;
import org.openapitools.client.model.Seller;
import org.openapitools.client.model.Shippment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Order
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:33.374218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Order {
  public static final String SERIALIZED_NAME_APPROVED_AT = "approvedAt";
  @SerializedName(SERIALIZED_NAME_APPROVED_AT)
  private OffsetDateTime approvedAt;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_FREIGHT = "freight";
  @SerializedName(SERIALIZED_NAME_FREIGHT)
  private Freight freight;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_MARKETPLACE_ID = "orderMarketplaceId";
  @SerializedName(SERIALIZED_NAME_ORDER_MARKETPLACE_ID)
  private String orderMarketplaceId;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private Seller seller;

  public static final String SERIALIZED_NAME_SHIPMENTS = "shipments";
  @SerializedName(SERIALIZED_NAME_SHIPMENTS)
  private List<Shippment> shipments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private Integer totalAmount;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT_AMOUNT = "totalDiscountAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT_AMOUNT)
  private Integer totalDiscountAmount;

  public static final String SERIALIZED_NAME_TOTAL_ITEMS_AMOUNT = "totalItemsAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEMS_AMOUNT)
  private Integer totalItemsAmount;

  public static final String SERIALIZED_NAME_TOTAL_SHIPPING_AMOUNT = "totalShippingAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHIPPING_AMOUNT)
  private Integer totalShippingAmount;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Order() {
  }

  public Order approvedAt(OffsetDateTime approvedAt) {
    this.approvedAt = approvedAt;
    return this;
  }

  /**
   * Date that this order was approved for fullfilment
   * @return approvedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApprovedAt() {
    return approvedAt;
  }

  public void setApprovedAt(OffsetDateTime approvedAt) {
    this.approvedAt = approvedAt;
  }


  public Order billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nonnull
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  public Order createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date that this order was created
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Order customer(Customer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nonnull
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }


  public Order freight(Freight freight) {
    this.freight = freight;
    return this;
  }

  /**
   * Get freight
   * @return freight
   */
  @javax.annotation.Nonnull
  public Freight getFreight() {
    return freight;
  }

  public void setFreight(Freight freight) {
    this.freight = freight;
  }


  public Order items(List<OrderItem> items) {
    this.items = items;
    return this;
  }

  public Order addItemsItem(OrderItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nonnull
  public List<OrderItem> getItems() {
    return items;
  }

  public void setItems(List<OrderItem> items) {
    this.items = items;
  }


  public Order orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Unique order Id (related to this seller)
   * @return orderId
   */
  @javax.annotation.Nonnull
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public Order orderMarketplaceId(String orderMarketplaceId) {
    this.orderMarketplaceId = orderMarketplaceId;
    return this;
  }

  /**
   * Unique Order Id that will be displayed to the customer. This Id is not the same as &#x60;orderId&#x60;
   * @return orderMarketplaceId
   */
  @javax.annotation.Nonnull
  public String getOrderMarketplaceId() {
    return orderMarketplaceId;
  }

  public void setOrderMarketplaceId(String orderMarketplaceId) {
    this.orderMarketplaceId = orderMarketplaceId;
  }


  public Order seller(Seller seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nullable
  public Seller getSeller() {
    return seller;
  }

  public void setSeller(Seller seller) {
    this.seller = seller;
  }


  public Order shipments(List<Shippment> shipments) {
    this.shipments = shipments;
    return this;
  }

  public Order addShipmentsItem(Shippment shipmentsItem) {
    if (this.shipments == null) {
      this.shipments = new ArrayList<>();
    }
    this.shipments.add(shipmentsItem);
    return this;
  }

  /**
   * Get shipments
   * @return shipments
   */
  @javax.annotation.Nonnull
  public List<Shippment> getShipments() {
    return shipments;
  }

  public void setShipments(List<Shippment> shipments) {
    this.shipments = shipments;
  }


  public Order shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nonnull
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public Order status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Order status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Order totalAmount(Integer totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Order total in cents, this is what the customer will be charged for. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
   * @return totalAmount
   */
  @javax.annotation.Nonnull
  public Integer getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(Integer totalAmount) {
    this.totalAmount = totalAmount;
  }


  public Order totalDiscountAmount(Integer totalDiscountAmount) {
    this.totalDiscountAmount = totalDiscountAmount;
    return this;
  }

  /**
   * Total order discounts in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
   * @return totalDiscountAmount
   */
  @javax.annotation.Nonnull
  public Integer getTotalDiscountAmount() {
    return totalDiscountAmount;
  }

  public void setTotalDiscountAmount(Integer totalDiscountAmount) {
    this.totalDiscountAmount = totalDiscountAmount;
  }


  public Order totalItemsAmount(Integer totalItemsAmount) {
    this.totalItemsAmount = totalItemsAmount;
    return this;
  }

  /**
   * Order items total amount in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
   * @return totalItemsAmount
   */
  @javax.annotation.Nonnull
  public Integer getTotalItemsAmount() {
    return totalItemsAmount;
  }

  public void setTotalItemsAmount(Integer totalItemsAmount) {
    this.totalItemsAmount = totalItemsAmount;
  }


  public Order totalShippingAmount(Integer totalShippingAmount) {
    this.totalShippingAmount = totalShippingAmount;
    return this;
  }

  /**
   * Total shipments amount items. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567
   * @return totalShippingAmount
   */
  @javax.annotation.Nonnull
  public Integer getTotalShippingAmount() {
    return totalShippingAmount;
  }

  public void setTotalShippingAmount(Integer totalShippingAmount) {
    this.totalShippingAmount = totalShippingAmount;
  }


  public Order updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Last update data of this order
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.approvedAt, order.approvedAt) &&
        Objects.equals(this.billingAddress, order.billingAddress) &&
        Objects.equals(this.createdAt, order.createdAt) &&
        Objects.equals(this.customer, order.customer) &&
        Objects.equals(this.freight, order.freight) &&
        Objects.equals(this.items, order.items) &&
        Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.orderMarketplaceId, order.orderMarketplaceId) &&
        Objects.equals(this.seller, order.seller) &&
        Objects.equals(this.shipments, order.shipments) &&
        Objects.equals(this.shippingAddress, order.shippingAddress) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.totalAmount, order.totalAmount) &&
        Objects.equals(this.totalDiscountAmount, order.totalDiscountAmount) &&
        Objects.equals(this.totalItemsAmount, order.totalItemsAmount) &&
        Objects.equals(this.totalShippingAmount, order.totalShippingAmount) &&
        Objects.equals(this.updatedAt, order.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvedAt, billingAddress, createdAt, customer, freight, items, orderId, orderMarketplaceId, seller, shipments, shippingAddress, status, totalAmount, totalDiscountAmount, totalItemsAmount, totalShippingAmount, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    approvedAt: ").append(toIndentedString(approvedAt)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    freight: ").append(toIndentedString(freight)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderMarketplaceId: ").append(toIndentedString(orderMarketplaceId)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    shipments: ").append(toIndentedString(shipments)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    totalDiscountAmount: ").append(toIndentedString(totalDiscountAmount)).append("\n");
    sb.append("    totalItemsAmount: ").append(toIndentedString(totalItemsAmount)).append("\n");
    sb.append("    totalShippingAmount: ").append(toIndentedString(totalShippingAmount)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approvedAt");
    openapiFields.add("billingAddress");
    openapiFields.add("createdAt");
    openapiFields.add("customer");
    openapiFields.add("freight");
    openapiFields.add("items");
    openapiFields.add("orderId");
    openapiFields.add("orderMarketplaceId");
    openapiFields.add("seller");
    openapiFields.add("shipments");
    openapiFields.add("shippingAddress");
    openapiFields.add("status");
    openapiFields.add("totalAmount");
    openapiFields.add("totalDiscountAmount");
    openapiFields.add("totalItemsAmount");
    openapiFields.add("totalShippingAmount");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("billingAddress");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("customer");
    openapiRequiredFields.add("freight");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("orderId");
    openapiRequiredFields.add("orderMarketplaceId");
    openapiRequiredFields.add("shipments");
    openapiRequiredFields.add("shippingAddress");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("totalAmount");
    openapiRequiredFields.add("totalDiscountAmount");
    openapiRequiredFields.add("totalItemsAmount");
    openapiRequiredFields.add("totalShippingAmount");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Order.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `billingAddress`
      Address.validateJsonElement(jsonObj.get("billingAddress"));
      // validate the required field `customer`
      Customer.validateJsonElement(jsonObj.get("customer"));
      // validate the required field `freight`
      Freight.validateJsonElement(jsonObj.get("freight"));
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        OrderItem.validateJsonElement(jsonArrayitems.get(i));
      };
      if (!jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if (!jsonObj.get("orderMarketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderMarketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderMarketplaceId").toString()));
      }
      // validate the optional field `seller`
      if (jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) {
        Seller.validateJsonElement(jsonObj.get("seller"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("shipments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipments` to be an array in the JSON string but got `%s`", jsonObj.get("shipments").toString()));
      }

      JsonArray jsonArrayshipments = jsonObj.getAsJsonArray("shipments");
      // validate the required field `shipments` (array)
      for (int i = 0; i < jsonArrayshipments.size(); i++) {
        Shippment.validateJsonElement(jsonArrayshipments.get(i));
      };
      // validate the required field `shippingAddress`
      Address.validateJsonElement(jsonObj.get("shippingAddress"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Order
   * @throws IOException if the JSON string is invalid with respect to Order
   */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

  /**
   * Convert an instance of Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

