/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetTicketMessages;
import org.openapitools.client.model.GetTickets;
import org.openapitools.client.model.NewTicket;
import org.openapitools.client.model.NewTicketMessage;
import org.openapitools.client.model.TicketStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TicketsApi
 */
@Disabled
public class TicketsApiTest {

    private final TicketsApi api = new TicketsApi();

    /**
     * Creates a new trouble ticket
     *
     * Use this service to create a new trouble ticket. Use this to include relevant information about the order, comunicate with the customer or marketplace team. Whenever possible message will be pushed to Mobile first. This is the primary mean of comunicaiton with the customer regarding orders, shippments, shippments status. New tickets will be automatically be set to &#39;OPEN&#39;. Trouble tickets need to be associated with a orderId or customer. New tickets can optionally include a new message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ticketPostTest() throws ApiException {
        String authorization = null;
        NewTicket newTicket = null;
        api.ticketPost(authorization, newTicket);
        // TODO: test validations
    }

    /**
     * Add new message to trouble ticket
     *
     * Add a new message to this trouble ticket. Messages can be &#x60;CUSTOMER&#x60; (customer will be able to see it) or &#x60;INTERNAL&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ticketTicketIdMessagePostTest() throws ApiException {
        String authorization = null;
        String ticketId = null;
        NewTicketMessage message = null;
        api.ticketTicketIdMessagePost(authorization, ticketId, message);
        // TODO: test validations
    }

    /**
     * Get trouble ticket messages
     *
     * Returns trouble ticket history with all messages exchanged. Only tickets related to your seller will be returned. Attempt to read other tickets will return 403 (acess denied).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ticketTicketIdMessagesGetTest() throws ApiException {
        String authorization = null;
        String ticketId = null;
        Integer offset = null;
        Integer limit = null;
        GetTicketMessages response = api.ticketTicketIdMessagesGet(authorization, ticketId, offset, limit);
        // TODO: test validations
    }

    /**
     * Update trouble ticket status
     *
     * Alows the seller to update the status of a trouble ticket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ticketTicketIdStatusPutTest() throws ApiException {
        String authorization = null;
        String ticketId = null;
        TicketStatus body = null;
        api.ticketTicketIdStatusPut(authorization, ticketId, body);
        // TODO: test validations
    }

    /**
     * Get customers trouble tickets
     *
     * Allows seller to receive and status, queries, requests and complaints from customers. As well related messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ticketsGetTest() throws ApiException {
        String authorization = null;
        String status = null;
        Integer offset = null;
        Integer limit = null;
        GetTickets response = api.ticketsGet(authorization, status, offset, limit);
        // TODO: test validations
    }

}
