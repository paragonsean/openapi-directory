/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetOrders;
import org.openapitools.client.model.GetOrdersShipments;
import org.openapitools.client.model.OrdersShipments;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrdersApi
 */
@Disabled
public class OrdersApiTest {

    private final OrdersApi api = new OrdersApi();

    /**
     * Returns orders details
     *
     * Retuns a list of orders associated with this seller. The list is ordered by dateCreated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetOrders response = api.ordersGet(authorization, offset, limit);
        // TODO: test validations
    }

    /**
     * Returns list of shipments
     *
     * Returns list of shipments. By default this will return list of the last shipments ordered by dateCreated, folowed by last update date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersShipmentsDeliveredGetTest() throws ApiException {
        String authorization = null;
        String status = null;
        Integer offset = null;
        Integer limit = null;
        GetOrdersShipments response = api.ordersShipmentsDeliveredGet(authorization, status, offset, limit);
        // TODO: test validations
    }

    /**
     * Bulk update of order shipments
     *
     * Bulk update of order shipments status. This alows to inform multiple shipments status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersShipmentsDeliveredPostTest() throws ApiException {
        String authorization = null;
        OrdersShipments ordersshipments = null;
        api.ordersShipmentsDeliveredPost(authorization, ordersshipments);
        // TODO: test validations
    }

    /**
     * Returns a list of shipments shipped
     *
     * Returns a list of shipments shipped. By Default returns items ordered by dateCreated folowed by last update
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersShipmentsShippedGetTest() throws ApiException {
        String authorization = null;
        String status = null;
        Integer offset = null;
        Integer limit = null;
        GetOrdersShipments response = api.ordersShipmentsShippedGet(authorization, status, offset, limit);
        // TODO: test validations
    }

    /**
     * Bulk update of order shipments
     *
     * Allows bulk updates of orders shippments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersShipmentsShippedPostTest() throws ApiException {
        OrdersShipments ordersshipments = null;
        api.ordersShipmentsShippedPost(ordersshipments);
        // TODO: test validations
    }

    /**
     * Return list of approved orders
     *
     * Returns a list of approved orders. Orders in the &#x60;approved&#x60; state must be fullfiled imediadetelly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersStatusApprovedGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetOrders response = api.ordersStatusApprovedGet(authorization, offset, limit);
        // TODO: test validations
    }

    /**
     * Returns lists of canceled orders
     *
     * Returns a list with canceled orders. Canceled orders should not be fullfiled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersStatusCanceledGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetOrders response = api.ordersStatusCanceledGet(authorization, offset, limit);
        // TODO: test validations
    }

    /**
     * Returns a list of orders successfully delivered associated with this seller.
     *
     * Returns a list of orders successfully delivered associated with this seller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersStatusDeliveredGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetOrders response = api.ordersStatusDeliveredGet(authorization, offset, limit);
        // TODO: test validations
    }

    /**
     * Returns a list of orders flagged as new.
     *
     * Returns a list of orders flagged as new. New orders should not be fullfiled until marketplace flags them as approved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersStatusNewGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetOrders response = api.ordersStatusNewGet(authorization, offset, limit);
        // TODO: test validations
    }

    /**
     * Returns a list of partially deliverd orders
     *
     * Returns a list of partially deliverd orders. This is a list of orders with items shipped but with not all items ackwlodged as deliverd
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersStatusPartiallyDeliveredGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetOrders response = api.ordersStatusPartiallyDeliveredGet(authorization, offset, limit);
        // TODO: test validations
    }

    /**
     * Returns a list of orders partially fullfiled
     *
     * Returns a list of orders that contain one (or more) items that where not shipped. This will list the entire order as well the items with peding shipment. Use this service to track orders that need to be fullfiled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersStatusPartiallySentGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetOrders response = api.ordersStatusPartiallySentGet(authorization, offset, limit);
        // TODO: test validations
    }

    /**
     * Returns a list with orders fully sent
     *
     * Returns a list with orders completely fullfiled, this means orders with all items sent. Orders will ordered by dateCreated fowllowed by last update
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersStatusSentGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetOrders response = api.ordersStatusSentGet(authorization, offset, limit);
        // TODO: test validations
    }

}
