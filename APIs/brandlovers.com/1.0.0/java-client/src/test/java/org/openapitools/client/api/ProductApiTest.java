/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetProduct;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductPrice;
import org.openapitools.client.model.SellerItemStatus;
import org.openapitools.client.model.Stock;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductApi
 */
@Disabled
public class ProductApiTest {

    private final ProductApi api = new ProductApi();

    /**
     * Create a new product to the marketplace
     *
     * Use this enpoint to create a single new product to the Marketplace. This enpoint expects a json document with one product. If you whant to upload multiple products in a single API call use POST /products method. The server will load each product as an individual item that can be manipulated using your own &#x60;skuSellerId&#x60;. This system is idenpontent, this means that once a &#x60;skuSellerId&#x60; is created it cannot be re-created using this tool. In order to update, edit a product use the PUT method with the correct reference to your &#x60;skuSellerId&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPostTest() throws ApiException {
        String authorization = null;
        Product product = null;
        api.productPost(authorization, product);
        // TODO: test validations
    }

    /**
     * Returns details of a single product using the seller &#x60;skuSellerId&#x60;
     *
     * Returns detailed information of a single product with the seller &#x60;skuSellerId&#x60;. This service will return a json document with product detail, status, price, invetory among other infomarion availble in the Brand Lovers marketplace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSkuSellerIdGetTest() throws ApiException {
        String authorization = null;
        String skuSellerId = null;
        GetProduct response = api.productSkuSellerIdGet(authorization, skuSellerId);
        // TODO: test validations
    }

    /**
     * Allows seller to update prices of a single SKU
     *
     * Allows seller to set the SKU prices (MSRP and/or offer price). All prices must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSkuSellerIdPricesPutTest() throws ApiException {
        String authorization = null;
        String skuSellerId = null;
        ProductPrice body = null;
        api.productSkuSellerIdPricesPut(authorization, skuSellerId, body);
        // TODO: test validations
    }

    /**
     * Enable/disable a single product in the Marketplace
     *
     * Update product status in the Marketplace. Set to &#x60;true&#x60; to enable, &#x60;false&#x60; to disable sale.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSkuSellerIdStatusPutTest() throws ApiException {
        String authorization = null;
        String skuSellerId = null;
        SellerItemStatus body = null;
        api.productSkuSellerIdStatusPut(authorization, skuSellerId, body);
        // TODO: test validations
    }

    /**
     * Update a single product stock
     *
     * Update a single product inventory information. Products with zero stock will not be eligible for sale.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSkuSellerIdStockPutTest() throws ApiException {
        String authorization = null;
        String skuSellerId = null;
        Stock body = null;
        api.productSkuSellerIdStockPut(authorization, skuSellerId, body);
        // TODO: test validations
    }

}
