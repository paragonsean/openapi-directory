/*
 * BrandLovers Marketplace API V1
 * Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetProductsResponse;
import org.openapitools.client.model.GetProductsStatusSelling;
import org.openapitools.client.model.GetSellerProductsStatus;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductStatusUpdate;
import org.openapitools.client.model.ProductStock;
import org.openapitools.client.model.ProductUpdate;
import org.openapitools.client.model.SellerItemPrices;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Update product details
     *
     * Update a single product information such as name, brand, attribute, dimension, etc. Please note that data from your request will be merged with existing data. This allows you to easliy update only certain fields without the need to re-inform the other unchanged fields. For example in order to update just the field &#x60;title&#x60; simply send just this field with new information, remaining fields will not be changed. In order to erase an item the field must be informed as its default value, for example in order to erase the &#x60;videos&#x60; field must be sent as videos:[]. The &#x60;skuSellerId&#x60; field is always mandatory in the path and in the product json Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSkuSellerIdPutTest() throws ApiException {
        String authorization = null;
        String skuSellerId = null;
        ProductUpdate body = null;
        api.productSkuSellerIdPut(authorization, skuSellerId, body);
        // TODO: test validations
    }

    /**
     * Returns a list of products loaded into BrandLovers Marketplace
     *
     * Get a list of my products loaded into the Marketplace. This dosen&#39;t means that products are eligible for sale, just that they are loaded in the database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetProductsResponse response = api.productsGet(authorization, offset, limit);
        // TODO: test validations
    }

    /**
     * Allows new products from the seller to be loaded into the marketplace
     *
     * This enpoint to creates new products in the Marketplace using &#x60;skuSellerId&#x60; as a primary key. This enpoint expects a json document with array of products. The server will load each product as an individual item that can be manipulated using your own &#x60;skuSellerId&#x60;. All requests to This endpoint are idenpontent with respect of the &#x60;skuSellerId&#x60;, this means that once a &#x60;skuSellerId&#x60; is created it cannot be re-created using this tool. In order to update use the PUT method with the correct &#x60;skuSellerId&#x60;. You can also use the POST /product to create a single product per request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsPostTest() throws ApiException {
        String authorization = null;
        List<Product> products = null;
        api.productsPost(authorization, products);
        // TODO: test validations
    }

    /**
     * Allows bulk update of product prices.
     *
     * Allows bulk update of product prices. This endpoint expects a json document with an array of products with the &#x60;skuSellerId&#x60; and the new price. Server will process each new product update individually and will ackwlodge as much updates as possible, even if a single product update fails. After this request you can query product final status with GET /product/status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsPricesPutTest() throws ApiException {
        String authorization = null;
        List<SellerItemPrices> body = null;
        api.productsPricesPut(authorization, body);
        // TODO: test validations
    }

    /**
     * Returns seller products status in the marketplace
     *
     * Returns a list with seller products status. Please note that this endpoint will not return all details of each product, just the skuSellerId and status. Also please note that this endpoint will return 250 products per call. For full details of a given procuct use GET /product/{skuSellerId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsStatusGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetSellerProductsStatus response = api.productsStatusGet(authorization, offset, limit);
        // TODO: test validations
    }

    /**
     * Bulk enable/disable products in the marketplace
     *
     * Bulk enable/disable products in the marketplace. This endpoint requires an array of objects with the seller SKU &#x60;skuSellerId&#x60; and boolean value that defines if the product is enabled or not for sale. This endpoint can be used to set a single product or many products.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsStatusPutTest() throws ApiException {
        String authorization = null;
        List<ProductStatusUpdate> body = null;
        api.productsStatusPut(authorization, body);
        // TODO: test validations
    }

    /**
     * Returns products that are successfully listed for sale.
     *
     * Returns products that are successfully listed for sale.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsStatusSellingGetTest() throws ApiException {
        String authorization = null;
        Integer offset = null;
        Integer limit = null;
        GetProductsStatusSelling response = api.productsStatusSellingGet(authorization, offset, limit);
        // TODO: test validations
    }

    /**
     * Bulk product stock update
     *
     * Bulk product stock update. This endpoint expect a array of products &#x60;skuSellerId&#x60; with new inventory data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsStocksPutTest() throws ApiException {
        String authorization = null;
        List<ProductStock> body = null;
        api.productsStocksPut(authorization, body);
        // TODO: test validations
    }

}
