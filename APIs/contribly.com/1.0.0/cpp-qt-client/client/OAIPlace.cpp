/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlace::OAIPlace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlace::OAIPlace() {
    this->initializeModel();
}

OAIPlace::~OAIPlace() {}

void OAIPlace::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_geohash_isSet = false;
    m_geohash_isValid = false;

    m_google_isSet = false;
    m_google_isValid = false;

    m_lat_long_isSet = false;
    m_lat_long_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_osm_isSet = false;
    m_osm_isValid = false;
}

void OAIPlace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlace::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_geohash_isValid = ::OpenAPI::fromJsonValue(m_geohash, json[QString("geohash")]);
    m_geohash_isSet = !json[QString("geohash")].isNull() && m_geohash_isValid;

    m_google_isValid = ::OpenAPI::fromJsonValue(m_google, json[QString("google")]);
    m_google_isSet = !json[QString("google")].isNull() && m_google_isValid;

    m_lat_long_isValid = ::OpenAPI::fromJsonValue(m_lat_long, json[QString("latLong")]);
    m_lat_long_isSet = !json[QString("latLong")].isNull() && m_lat_long_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_osm_isValid = ::OpenAPI::fromJsonValue(m_osm, json[QString("osm")]);
    m_osm_isSet = !json[QString("osm")].isNull() && m_osm_isValid;
}

QString OAIPlace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlace::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_geohash_isSet) {
        obj.insert(QString("geohash"), ::OpenAPI::toJsonValue(m_geohash));
    }
    if (m_google_isSet) {
        obj.insert(QString("google"), ::OpenAPI::toJsonValue(m_google));
    }
    if (m_lat_long.isSet()) {
        obj.insert(QString("latLong"), ::OpenAPI::toJsonValue(m_lat_long));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_osm.isSet()) {
        obj.insert(QString("osm"), ::OpenAPI::toJsonValue(m_osm));
    }
    return obj;
}

QString OAIPlace::getCountry() const {
    return m_country;
}
void OAIPlace::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPlace::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPlace::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPlace::getGeohash() const {
    return m_geohash;
}
void OAIPlace::setGeohash(const QString &geohash) {
    m_geohash = geohash;
    m_geohash_isSet = true;
}

bool OAIPlace::is_geohash_Set() const{
    return m_geohash_isSet;
}

bool OAIPlace::is_geohash_Valid() const{
    return m_geohash_isValid;
}

QString OAIPlace::getGoogle() const {
    return m_google;
}
void OAIPlace::setGoogle(const QString &google) {
    m_google = google;
    m_google_isSet = true;
}

bool OAIPlace::is_google_Set() const{
    return m_google_isSet;
}

bool OAIPlace::is_google_Valid() const{
    return m_google_isValid;
}

OAILatLong OAIPlace::getLatLong() const {
    return m_lat_long;
}
void OAIPlace::setLatLong(const OAILatLong &lat_long) {
    m_lat_long = lat_long;
    m_lat_long_isSet = true;
}

bool OAIPlace::is_lat_long_Set() const{
    return m_lat_long_isSet;
}

bool OAIPlace::is_lat_long_Valid() const{
    return m_lat_long_isValid;
}

QString OAIPlace::getName() const {
    return m_name;
}
void OAIPlace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlace::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlace::is_name_Valid() const{
    return m_name_isValid;
}

OAIOsmId OAIPlace::getOsm() const {
    return m_osm;
}
void OAIPlace::setOsm(const OAIOsmId &osm) {
    m_osm = osm;
    m_osm_isSet = true;
}

bool OAIPlace::is_osm_Set() const{
    return m_osm_isSet;
}

bool OAIPlace::is_osm_Valid() const{
    return m_osm_isValid;
}

bool OAIPlace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geohash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_long.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_osm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
