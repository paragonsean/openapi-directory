/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFormApi_H
#define OAI_OAIFormApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIForm.h"
#include "OAIFormResponse.h"
#include "OAIFormResponseSubmission.h"
#include "OAIFormSubmission.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFormApi : public QObject {
    Q_OBJECT

public:
    OAIFormApi(const int timeOut = 0);
    ~OAIFormApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user QString [optional]
    * @param[in]  form QString [optional]
    * @param[in]  contribution QString [optional]
    */
    virtual void formResponsesGet(const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &form = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contribution = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void formResponsesIdGet(const QString &id);

    /**
    * @param[in]  oai_form_response_submission OAIFormResponseSubmission [required]
    */
    virtual void formResponsesPost(const OAIFormResponseSubmission &oai_form_response_submission);

    /**
    * @param[in]  owned_by QString [required]
    */
    virtual void formsGet(const QString &owned_by);

    /**
    * @param[in]  id QString [required]
    */
    virtual void formsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void formsIdGet(const QString &id);

    /**
    * @param[in]  oai_form_submission OAIFormSubmission [required]
    */
    virtual void formsPost(const OAIFormSubmission &oai_form_submission);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void formResponsesGetCallback(OAIHttpRequestWorker *worker);
    void formResponsesIdGetCallback(OAIHttpRequestWorker *worker);
    void formResponsesPostCallback(OAIHttpRequestWorker *worker);
    void formsGetCallback(OAIHttpRequestWorker *worker);
    void formsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void formsIdGetCallback(OAIHttpRequestWorker *worker);
    void formsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void formResponsesGetSignal(QList<OAIFormResponse> summary);
    void formResponsesIdGetSignal(OAIFormResponse summary);
    void formResponsesPostSignal(OAIFormResponse summary);
    void formsGetSignal(QList<OAIForm> summary);
    void formsIdDeleteSignal();
    void formsIdGetSignal(OAIForm summary);
    void formsPostSignal(OAIForm summary);


    void formResponsesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFormResponse> summary);
    void formResponsesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIFormResponse summary);
    void formResponsesPostSignalFull(OAIHttpRequestWorker *worker, OAIFormResponse summary);
    void formsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIForm> summary);
    void formsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void formsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIForm summary);
    void formsPostSignalFull(OAIHttpRequestWorker *worker, OAIForm summary);

    Q_DECL_DEPRECATED_X("Use formResponsesGetSignalError() instead")
    void formResponsesGetSignalE(QList<OAIFormResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void formResponsesGetSignalError(QList<OAIFormResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formResponsesIdGetSignalError() instead")
    void formResponsesIdGetSignalE(OAIFormResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void formResponsesIdGetSignalError(OAIFormResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formResponsesPostSignalError() instead")
    void formResponsesPostSignalE(OAIFormResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void formResponsesPostSignalError(OAIFormResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formsGetSignalError() instead")
    void formsGetSignalE(QList<OAIForm> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void formsGetSignalError(QList<OAIForm> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formsIdDeleteSignalError() instead")
    void formsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void formsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formsIdGetSignalError() instead")
    void formsIdGetSignalE(OAIForm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void formsIdGetSignalError(OAIForm summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formsPostSignalError() instead")
    void formsPostSignalE(OAIForm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void formsPostSignalError(OAIForm summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use formResponsesGetSignalErrorFull() instead")
    void formResponsesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void formResponsesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formResponsesIdGetSignalErrorFull() instead")
    void formResponsesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void formResponsesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formResponsesPostSignalErrorFull() instead")
    void formResponsesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void formResponsesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formsGetSignalErrorFull() instead")
    void formsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void formsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formsIdDeleteSignalErrorFull() instead")
    void formsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void formsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formsIdGetSignalErrorFull() instead")
    void formsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void formsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use formsPostSignalErrorFull() instead")
    void formsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void formsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
