/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifact::OAIArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifact::OAIArtifact() {
    this->initializeModel();
}

OAIArtifact::~OAIArtifact() {}

void OAIArtifact::initializeModel() {

    m_content_length_isSet = false;
    m_content_length_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifact::fromJsonObject(QJsonObject json) {

    m_content_length_isValid = ::OpenAPI::fromJsonValue(m_content_length, json[QString("contentLength")]);
    m_content_length_isSet = !json[QString("contentLength")].isNull() && m_content_length_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_content_length_isSet) {
        obj.insert(QString("contentLength"), ::OpenAPI::toJsonValue(m_content_length));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

double OAIArtifact::getContentLength() const {
    return m_content_length;
}
void OAIArtifact::setContentLength(const double &content_length) {
    m_content_length = content_length;
    m_content_length_isSet = true;
}

bool OAIArtifact::is_content_length_Set() const{
    return m_content_length_isSet;
}

bool OAIArtifact::is_content_length_Valid() const{
    return m_content_length_isValid;
}

QString OAIArtifact::getContentType() const {
    return m_content_type;
}
void OAIArtifact::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIArtifact::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIArtifact::is_content_type_Valid() const{
    return m_content_type_isValid;
}

double OAIArtifact::getHeight() const {
    return m_height;
}
void OAIArtifact::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIArtifact::is_height_Set() const{
    return m_height_isSet;
}

bool OAIArtifact::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIArtifact::getLabel() const {
    return m_label;
}
void OAIArtifact::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIArtifact::is_label_Set() const{
    return m_label_isSet;
}

bool OAIArtifact::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIArtifact::getUrl() const {
    return m_url;
}
void OAIArtifact::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIArtifact::is_url_Set() const{
    return m_url_isSet;
}

bool OAIArtifact::is_url_Valid() const{
    return m_url_isValid;
}

double OAIArtifact::getWidth() const {
    return m_width;
}
void OAIArtifact::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIArtifact::is_width_Set() const{
    return m_width_isSet;
}

bool OAIArtifact::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
