/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExport::OAIExport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExport::OAIExport() {
    this->initializeModel();
}

OAIExport::~OAIExport() {}

void OAIExport::initializeModel() {

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;
}

void OAIExport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExport::fromJsonObject(QJsonObject json) {

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("downloadUrl")]);
    m_download_url_isSet = !json[QString("downloadUrl")].isNull() && m_download_url_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;
}

QString OAIExport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExport::asJsonObject() const {
    QJsonObject obj;
    if (m_download_url_isSet) {
        obj.insert(QString("downloadUrl"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_step_isSet) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    return obj;
}

QString OAIExport::getDownloadUrl() const {
    return m_download_url;
}
void OAIExport::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIExport::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIExport::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QDateTime OAIExport::getFinished() const {
    return m_finished;
}
void OAIExport::setFinished(const QDateTime &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIExport::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIExport::is_finished_Valid() const{
    return m_finished_isValid;
}

QString OAIExport::getId() const {
    return m_id;
}
void OAIExport::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExport::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExport::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExport::getOwner() const {
    return m_owner;
}
void OAIExport::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIExport::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIExport::is_owner_Valid() const{
    return m_owner_isValid;
}

double OAIExport::getProgress() const {
    return m_progress;
}
void OAIExport::setProgress(const double &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIExport::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIExport::is_progress_Valid() const{
    return m_progress_isValid;
}

QDateTime OAIExport::getStarted() const {
    return m_started;
}
void OAIExport::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIExport::is_started_Set() const{
    return m_started_isSet;
}

bool OAIExport::is_started_Valid() const{
    return m_started_isValid;
}

QString OAIExport::getStep() const {
    return m_step;
}
void OAIExport::setStep(const QString &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIExport::is_step_Set() const{
    return m_step_isSet;
}

bool OAIExport::is_step_Valid() const{
    return m_step_isValid;
}

bool OAIExport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_owner_isValid && m_started_isValid && true;
}

} // namespace OpenAPI
