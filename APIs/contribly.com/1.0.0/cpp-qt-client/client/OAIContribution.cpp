/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContribution::OAIContribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContribution::OAIContribution() {
    this->initializeModel();
}

OAIContribution::~OAIContribution() {}

void OAIContribution::initializeModel() {

    m_assignment_isSet = false;
    m_assignment_isValid = false;

    m_attribution_isSet = false;
    m_attribution_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_usages_isSet = false;
    m_media_usages_isValid = false;

    m_moderation_history_isSet = false;
    m_moderation_history_isValid = false;

    m_place_isSet = false;
    m_place_isValid = false;

    m_url_words_isSet = false;
    m_url_words_isValid = false;

    m_via_isSet = false;
    m_via_isValid = false;
}

void OAIContribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContribution::fromJsonObject(QJsonObject json) {

    m_assignment_isValid = ::OpenAPI::fromJsonValue(m_assignment, json[QString("assignment")]);
    m_assignment_isSet = !json[QString("assignment")].isNull() && m_assignment_isValid;

    m_attribution_isValid = ::OpenAPI::fromJsonValue(m_attribution, json[QString("attribution")]);
    m_attribution_isSet = !json[QString("attribution")].isNull() && m_attribution_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("headline")]);
    m_headline_isSet = !json[QString("headline")].isNull() && m_headline_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_usages_isValid = ::OpenAPI::fromJsonValue(m_media_usages, json[QString("mediaUsages")]);
    m_media_usages_isSet = !json[QString("mediaUsages")].isNull() && m_media_usages_isValid;

    m_moderation_history_isValid = ::OpenAPI::fromJsonValue(m_moderation_history, json[QString("moderationHistory")]);
    m_moderation_history_isSet = !json[QString("moderationHistory")].isNull() && m_moderation_history_isValid;

    m_place_isValid = ::OpenAPI::fromJsonValue(m_place, json[QString("place")]);
    m_place_isSet = !json[QString("place")].isNull() && m_place_isValid;

    m_url_words_isValid = ::OpenAPI::fromJsonValue(m_url_words, json[QString("urlWords")]);
    m_url_words_isSet = !json[QString("urlWords")].isNull() && m_url_words_isValid;

    m_via_isValid = ::OpenAPI::fromJsonValue(m_via, json[QString("via")]);
    m_via_isSet = !json[QString("via")].isNull() && m_via_isValid;
}

QString OAIContribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContribution::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment.isSet()) {
        obj.insert(QString("assignment"), ::OpenAPI::toJsonValue(m_assignment));
    }
    if (m_attribution_isSet) {
        obj.insert(QString("attribution"), ::OpenAPI::toJsonValue(m_attribution));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_headline_isSet) {
        obj.insert(QString("headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media_usages.size() > 0) {
        obj.insert(QString("mediaUsages"), ::OpenAPI::toJsonValue(m_media_usages));
    }
    if (m_moderation_history.size() > 0) {
        obj.insert(QString("moderationHistory"), ::OpenAPI::toJsonValue(m_moderation_history));
    }
    if (m_place.isSet()) {
        obj.insert(QString("place"), ::OpenAPI::toJsonValue(m_place));
    }
    if (m_url_words_isSet) {
        obj.insert(QString("urlWords"), ::OpenAPI::toJsonValue(m_url_words));
    }
    if (m_via.isSet()) {
        obj.insert(QString("via"), ::OpenAPI::toJsonValue(m_via));
    }
    return obj;
}

OAIAssignment OAIContribution::getAssignment() const {
    return m_assignment;
}
void OAIContribution::setAssignment(const OAIAssignment &assignment) {
    m_assignment = assignment;
    m_assignment_isSet = true;
}

bool OAIContribution::is_assignment_Set() const{
    return m_assignment_isSet;
}

bool OAIContribution::is_assignment_Valid() const{
    return m_assignment_isValid;
}

QString OAIContribution::getAttribution() const {
    return m_attribution;
}
void OAIContribution::setAttribution(const QString &attribution) {
    m_attribution = attribution;
    m_attribution_isSet = true;
}

bool OAIContribution::is_attribution_Set() const{
    return m_attribution_isSet;
}

bool OAIContribution::is_attribution_Valid() const{
    return m_attribution_isValid;
}

QString OAIContribution::getBody() const {
    return m_body;
}
void OAIContribution::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIContribution::is_body_Set() const{
    return m_body_isSet;
}

bool OAIContribution::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAIContribution::getCreated() const {
    return m_created;
}
void OAIContribution::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIContribution::is_created_Set() const{
    return m_created_isSet;
}

bool OAIContribution::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIContribution::getHeadline() const {
    return m_headline;
}
void OAIContribution::setHeadline(const QString &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAIContribution::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAIContribution::is_headline_Valid() const{
    return m_headline_isValid;
}

QString OAIContribution::getId() const {
    return m_id;
}
void OAIContribution::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContribution::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContribution::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIMediaUsage> OAIContribution::getMediaUsages() const {
    return m_media_usages;
}
void OAIContribution::setMediaUsages(const QList<OAIMediaUsage> &media_usages) {
    m_media_usages = media_usages;
    m_media_usages_isSet = true;
}

bool OAIContribution::is_media_usages_Set() const{
    return m_media_usages_isSet;
}

bool OAIContribution::is_media_usages_Valid() const{
    return m_media_usages_isValid;
}

QList<OAIModerationHistoryItem> OAIContribution::getModerationHistory() const {
    return m_moderation_history;
}
void OAIContribution::setModerationHistory(const QList<OAIModerationHistoryItem> &moderation_history) {
    m_moderation_history = moderation_history;
    m_moderation_history_isSet = true;
}

bool OAIContribution::is_moderation_history_Set() const{
    return m_moderation_history_isSet;
}

bool OAIContribution::is_moderation_history_Valid() const{
    return m_moderation_history_isValid;
}

OAIPlace OAIContribution::getPlace() const {
    return m_place;
}
void OAIContribution::setPlace(const OAIPlace &place) {
    m_place = place;
    m_place_isSet = true;
}

bool OAIContribution::is_place_Set() const{
    return m_place_isSet;
}

bool OAIContribution::is_place_Valid() const{
    return m_place_isValid;
}

QString OAIContribution::getUrlWords() const {
    return m_url_words;
}
void OAIContribution::setUrlWords(const QString &url_words) {
    m_url_words = url_words;
    m_url_words_isSet = true;
}

bool OAIContribution::is_url_words_Set() const{
    return m_url_words_isSet;
}

bool OAIContribution::is_url_words_Valid() const{
    return m_url_words_isValid;
}

OAIVia OAIContribution::getVia() const {
    return m_via;
}
void OAIContribution::setVia(const OAIVia &via) {
    m_via = via;
    m_via_isSet = true;
}

bool OAIContribution::is_via_Set() const{
    return m_via_isSet;
}

bool OAIContribution::is_via_Valid() const{
    return m_via_isValid;
}

bool OAIContribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_usages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderation_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_place.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_via.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
