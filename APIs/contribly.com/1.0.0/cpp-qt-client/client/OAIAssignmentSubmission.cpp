/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentSubmission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentSubmission::OAIAssignmentSubmission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentSubmission::OAIAssignmentSubmission() {
    this->initializeModel();
}

OAIAssignmentSubmission::~OAIAssignmentSubmission() {}

void OAIAssignmentSubmission::initializeModel() {

    m_allows_anonymous_contributions_isSet = false;
    m_allows_anonymous_contributions_isValid = false;

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_embargo_isSet = false;
    m_embargo_isValid = false;

    m_ends_isSet = false;
    m_ends_isValid = false;

    m_featured_isSet = false;
    m_featured_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_required_isSet = false;
    m_media_required_isValid = false;

    m_moderator_isSet = false;
    m_moderator_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_receipt_message_isSet = false;
    m_receipt_message_isValid = false;

    m_starts_isSet = false;
    m_starts_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_words_isSet = false;
    m_url_words_isValid = false;
}

void OAIAssignmentSubmission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentSubmission::fromJsonObject(QJsonObject json) {

    m_allows_anonymous_contributions_isValid = ::OpenAPI::fromJsonValue(m_allows_anonymous_contributions, json[QString("allowsAnonymousContributions")]);
    m_allows_anonymous_contributions_isSet = !json[QString("allowsAnonymousContributions")].isNull() && m_allows_anonymous_contributions_isValid;

    m_cover_isValid = ::OpenAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_embargo_isValid = ::OpenAPI::fromJsonValue(m_embargo, json[QString("embargo")]);
    m_embargo_isSet = !json[QString("embargo")].isNull() && m_embargo_isValid;

    m_ends_isValid = ::OpenAPI::fromJsonValue(m_ends, json[QString("ends")]);
    m_ends_isSet = !json[QString("ends")].isNull() && m_ends_isValid;

    m_featured_isValid = ::OpenAPI::fromJsonValue(m_featured, json[QString("featured")]);
    m_featured_isSet = !json[QString("featured")].isNull() && m_featured_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_required_isValid = ::OpenAPI::fromJsonValue(m_media_required, json[QString("mediaRequired")]);
    m_media_required_isSet = !json[QString("mediaRequired")].isNull() && m_media_required_isValid;

    m_moderator_isValid = ::OpenAPI::fromJsonValue(m_moderator, json[QString("moderator")]);
    m_moderator_isSet = !json[QString("moderator")].isNull() && m_moderator_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_receipt_message_isValid = ::OpenAPI::fromJsonValue(m_receipt_message, json[QString("receiptMessage")]);
    m_receipt_message_isSet = !json[QString("receiptMessage")].isNull() && m_receipt_message_isValid;

    m_starts_isValid = ::OpenAPI::fromJsonValue(m_starts, json[QString("starts")]);
    m_starts_isSet = !json[QString("starts")].isNull() && m_starts_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_url_words_isValid = ::OpenAPI::fromJsonValue(m_url_words, json[QString("urlWords")]);
    m_url_words_isSet = !json[QString("urlWords")].isNull() && m_url_words_isValid;
}

QString OAIAssignmentSubmission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentSubmission::asJsonObject() const {
    QJsonObject obj;
    if (m_allows_anonymous_contributions_isSet) {
        obj.insert(QString("allowsAnonymousContributions"), ::OpenAPI::toJsonValue(m_allows_anonymous_contributions));
    }
    if (m_cover.isSet()) {
        obj.insert(QString("cover"), ::OpenAPI::toJsonValue(m_cover));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_embargo_isSet) {
        obj.insert(QString("embargo"), ::OpenAPI::toJsonValue(m_embargo));
    }
    if (m_ends_isSet) {
        obj.insert(QString("ends"), ::OpenAPI::toJsonValue(m_ends));
    }
    if (m_featured_isSet) {
        obj.insert(QString("featured"), ::OpenAPI::toJsonValue(m_featured));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media_required_isSet) {
        obj.insert(QString("mediaRequired"), ::OpenAPI::toJsonValue(m_media_required));
    }
    if (m_moderator_isSet) {
        obj.insert(QString("moderator"), ::OpenAPI::toJsonValue(m_moderator));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_receipt_message_isSet) {
        obj.insert(QString("receiptMessage"), ::OpenAPI::toJsonValue(m_receipt_message));
    }
    if (m_starts_isSet) {
        obj.insert(QString("starts"), ::OpenAPI::toJsonValue(m_starts));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_words_isSet) {
        obj.insert(QString("urlWords"), ::OpenAPI::toJsonValue(m_url_words));
    }
    return obj;
}

bool OAIAssignmentSubmission::isAllowsAnonymousContributions() const {
    return m_allows_anonymous_contributions;
}
void OAIAssignmentSubmission::setAllowsAnonymousContributions(const bool &allows_anonymous_contributions) {
    m_allows_anonymous_contributions = allows_anonymous_contributions;
    m_allows_anonymous_contributions_isSet = true;
}

bool OAIAssignmentSubmission::is_allows_anonymous_contributions_Set() const{
    return m_allows_anonymous_contributions_isSet;
}

bool OAIAssignmentSubmission::is_allows_anonymous_contributions_Valid() const{
    return m_allows_anonymous_contributions_isValid;
}

OAIMediaUsage OAIAssignmentSubmission::getCover() const {
    return m_cover;
}
void OAIAssignmentSubmission::setCover(const OAIMediaUsage &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool OAIAssignmentSubmission::is_cover_Set() const{
    return m_cover_isSet;
}

bool OAIAssignmentSubmission::is_cover_Valid() const{
    return m_cover_isValid;
}

QString OAIAssignmentSubmission::getDescription() const {
    return m_description;
}
void OAIAssignmentSubmission::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssignmentSubmission::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssignmentSubmission::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIAssignmentSubmission::getEmbargo() const {
    return m_embargo;
}
void OAIAssignmentSubmission::setEmbargo(const QDateTime &embargo) {
    m_embargo = embargo;
    m_embargo_isSet = true;
}

bool OAIAssignmentSubmission::is_embargo_Set() const{
    return m_embargo_isSet;
}

bool OAIAssignmentSubmission::is_embargo_Valid() const{
    return m_embargo_isValid;
}

QDateTime OAIAssignmentSubmission::getEnds() const {
    return m_ends;
}
void OAIAssignmentSubmission::setEnds(const QDateTime &ends) {
    m_ends = ends;
    m_ends_isSet = true;
}

bool OAIAssignmentSubmission::is_ends_Set() const{
    return m_ends_isSet;
}

bool OAIAssignmentSubmission::is_ends_Valid() const{
    return m_ends_isValid;
}

bool OAIAssignmentSubmission::isFeatured() const {
    return m_featured;
}
void OAIAssignmentSubmission::setFeatured(const bool &featured) {
    m_featured = featured;
    m_featured_isSet = true;
}

bool OAIAssignmentSubmission::is_featured_Set() const{
    return m_featured_isSet;
}

bool OAIAssignmentSubmission::is_featured_Valid() const{
    return m_featured_isValid;
}

QString OAIAssignmentSubmission::getId() const {
    return m_id;
}
void OAIAssignmentSubmission::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssignmentSubmission::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssignmentSubmission::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAssignmentSubmission::isMediaRequired() const {
    return m_media_required;
}
void OAIAssignmentSubmission::setMediaRequired(const bool &media_required) {
    m_media_required = media_required;
    m_media_required_isSet = true;
}

bool OAIAssignmentSubmission::is_media_required_Set() const{
    return m_media_required_isSet;
}

bool OAIAssignmentSubmission::is_media_required_Valid() const{
    return m_media_required_isValid;
}

QString OAIAssignmentSubmission::getModerator() const {
    return m_moderator;
}
void OAIAssignmentSubmission::setModerator(const QString &moderator) {
    m_moderator = moderator;
    m_moderator_isSet = true;
}

bool OAIAssignmentSubmission::is_moderator_Set() const{
    return m_moderator_isSet;
}

bool OAIAssignmentSubmission::is_moderator_Valid() const{
    return m_moderator_isValid;
}

QString OAIAssignmentSubmission::getName() const {
    return m_name;
}
void OAIAssignmentSubmission::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssignmentSubmission::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssignmentSubmission::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAssignmentSubmission::getReceiptMessage() const {
    return m_receipt_message;
}
void OAIAssignmentSubmission::setReceiptMessage(const QString &receipt_message) {
    m_receipt_message = receipt_message;
    m_receipt_message_isSet = true;
}

bool OAIAssignmentSubmission::is_receipt_message_Set() const{
    return m_receipt_message_isSet;
}

bool OAIAssignmentSubmission::is_receipt_message_Valid() const{
    return m_receipt_message_isValid;
}

QDateTime OAIAssignmentSubmission::getStarts() const {
    return m_starts;
}
void OAIAssignmentSubmission::setStarts(const QDateTime &starts) {
    m_starts = starts;
    m_starts_isSet = true;
}

bool OAIAssignmentSubmission::is_starts_Set() const{
    return m_starts_isSet;
}

bool OAIAssignmentSubmission::is_starts_Valid() const{
    return m_starts_isValid;
}

QList<OAITag> OAIAssignmentSubmission::getTags() const {
    return m_tags;
}
void OAIAssignmentSubmission::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAssignmentSubmission::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAssignmentSubmission::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIAssignmentSubmission::getUrlWords() const {
    return m_url_words;
}
void OAIAssignmentSubmission::setUrlWords(const QString &url_words) {
    m_url_words = url_words;
    m_url_words_isSet = true;
}

bool OAIAssignmentSubmission::is_url_words_Set() const{
    return m_url_words_isSet;
}

bool OAIAssignmentSubmission::is_url_words_Valid() const{
    return m_url_words_isValid;
}

bool OAIAssignmentSubmission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allows_anonymous_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ends_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_words_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentSubmission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
