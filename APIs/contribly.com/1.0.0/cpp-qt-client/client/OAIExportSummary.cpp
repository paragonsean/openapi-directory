/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportSummary::OAIExportSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportSummary::OAIExportSummary() {
    this->initializeModel();
}

OAIExportSummary::~OAIExportSummary() {}

void OAIExportSummary::initializeModel() {

    m_contributions_isSet = false;
    m_contributions_isValid = false;

    m_estimated_size_isSet = false;
    m_estimated_size_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_total_media_size_isSet = false;
    m_total_media_size_isValid = false;
}

void OAIExportSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportSummary::fromJsonObject(QJsonObject json) {

    m_contributions_isValid = ::OpenAPI::fromJsonValue(m_contributions, json[QString("contributions")]);
    m_contributions_isSet = !json[QString("contributions")].isNull() && m_contributions_isValid;

    m_estimated_size_isValid = ::OpenAPI::fromJsonValue(m_estimated_size, json[QString("estimatedSize")]);
    m_estimated_size_isSet = !json[QString("estimatedSize")].isNull() && m_estimated_size_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_total_media_size_isValid = ::OpenAPI::fromJsonValue(m_total_media_size, json[QString("totalMediaSize")]);
    m_total_media_size_isSet = !json[QString("totalMediaSize")].isNull() && m_total_media_size_isValid;
}

QString OAIExportSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_contributions_isSet) {
        obj.insert(QString("contributions"), ::OpenAPI::toJsonValue(m_contributions));
    }
    if (m_estimated_size_isSet) {
        obj.insert(QString("estimatedSize"), ::OpenAPI::toJsonValue(m_estimated_size));
    }
    if (m_media_isSet) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_total_media_size_isSet) {
        obj.insert(QString("totalMediaSize"), ::OpenAPI::toJsonValue(m_total_media_size));
    }
    return obj;
}

double OAIExportSummary::getContributions() const {
    return m_contributions;
}
void OAIExportSummary::setContributions(const double &contributions) {
    m_contributions = contributions;
    m_contributions_isSet = true;
}

bool OAIExportSummary::is_contributions_Set() const{
    return m_contributions_isSet;
}

bool OAIExportSummary::is_contributions_Valid() const{
    return m_contributions_isValid;
}

QString OAIExportSummary::getEstimatedSize() const {
    return m_estimated_size;
}
void OAIExportSummary::setEstimatedSize(const QString &estimated_size) {
    m_estimated_size = estimated_size;
    m_estimated_size_isSet = true;
}

bool OAIExportSummary::is_estimated_size_Set() const{
    return m_estimated_size_isSet;
}

bool OAIExportSummary::is_estimated_size_Valid() const{
    return m_estimated_size_isValid;
}

double OAIExportSummary::getMedia() const {
    return m_media;
}
void OAIExportSummary::setMedia(const double &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIExportSummary::is_media_Set() const{
    return m_media_isSet;
}

bool OAIExportSummary::is_media_Valid() const{
    return m_media_isValid;
}

double OAIExportSummary::getTotalMediaSize() const {
    return m_total_media_size;
}
void OAIExportSummary::setTotalMediaSize(const double &total_media_size) {
    m_total_media_size = total_media_size;
    m_total_media_size_isSet = true;
}

bool OAIExportSummary::is_total_media_size_Set() const{
    return m_total_media_size_isSet;
}

bool OAIExportSummary::is_total_media_size_Valid() const{
    return m_total_media_size_isValid;
}

bool OAIExportSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_media_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contributions_isValid && m_media_isValid && m_total_media_size_isValid && true;
}

} // namespace OpenAPI
