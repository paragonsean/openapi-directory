/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContributionApi_H
#define OAI_OAIContributionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContribution.h"
#include "OAIErrorResponse.h"
#include "OAIExport.h"
#include "OAIExportSummary.h"
#include "OAIFlag.h"
#include "OAIModerationHistoryItemSubmission.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContributionApi : public QObject {
    Q_OBJECT

public:
    OAIContributionApi(const int timeOut = 0);
    ~OAIContributionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void contributionRefinementTypesGet();

    /**
    * @param[in]  assignment QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  created_before QDateTime [optional]
    * @param[in]  created_after QDateTime [optional]
    * @param[in]  geohash QString [optional]
    * @param[in]  has_location bool [optional]
    * @param[in]  lat_long QString [optional]
    * @param[in]  radius double [optional]
    * @param[in]  media_type QString [optional]
    * @param[in]  owned_by QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  url_words QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  refinements QString [optional]
    * @param[in]  refinement_size double [optional]
    */
    virtual void contributionRefinementsGet(const ::OpenAPI::OptionalParam<QString> &assignment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &geohash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &has_location = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &lat_long = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &media_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owned_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url_words = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &refinements = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &refinement_size = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  assignment QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  created_before QDateTime [optional]
    * @param[in]  created_after QDateTime [optional]
    * @param[in]  created_day QDate [optional]
    * @param[in]  created_month QString [optional]
    * @param[in]  geohash QString [optional]
    * @param[in]  has_location bool [optional]
    * @param[in]  lat_long QString [optional]
    * @param[in]  radius double [optional]
    * @param[in]  media_type QString [optional]
    * @param[in]  owned_by QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  url_words QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  ids QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void contributionsGet(const ::OpenAPI::OptionalParam<QString> &assignment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDate> &created_day = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &created_month = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &geohash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &has_location = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &lat_long = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &media_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owned_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url_words = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void contributionsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_flag OAIFlag [required]
    */
    virtual void contributionsIdFlagPost(const QString &id, const OAIFlag &oai_flag);

    /**
    * @param[in]  id QString [required]
    */
    virtual void contributionsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void contributionsIdLikePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void contributionsIdLikesGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_moderation_history_item_submission OAIModerationHistoryItemSubmission [required]
    */
    virtual void contributionsIdModeratePost(const QString &id, const OAIModerationHistoryItemSubmission &oai_moderation_history_item_submission);

    /**
    * @param[in]  oai_contribution OAIContribution [required]
    */
    virtual void contributionsPost(const OAIContribution &oai_contribution);

    /**
    * @param[in]  assignment QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  created_before QDateTime [optional]
    * @param[in]  created_after QDateTime [optional]
    * @param[in]  geohash QString [optional]
    * @param[in]  has_location bool [optional]
    * @param[in]  lat_long QString [optional]
    * @param[in]  radius double [optional]
    * @param[in]  media_type QString [optional]
    * @param[in]  owned_by QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  url_words QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  tagged bool [optional]
    * @param[in]  combined bool [optional]
    * @param[in]  individual bool [optional]
    * @param[in]  format QString [optional]
    * @param[in]  json bool [optional]
    */
    virtual void exportPost(const ::OpenAPI::OptionalParam<QString> &assignment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &geohash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &has_location = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &lat_long = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &media_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owned_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url_words = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &tagged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &combined = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &individual = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &json = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  assignment QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  created_before QDateTime [optional]
    * @param[in]  created_after QDateTime [optional]
    * @param[in]  geohash QString [optional]
    * @param[in]  has_location bool [optional]
    * @param[in]  lat_long QString [optional]
    * @param[in]  radius double [optional]
    * @param[in]  media_type QString [optional]
    * @param[in]  owned_by QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  url_words QString [optional]
    * @param[in]  user QString [optional]
    */
    virtual void exportSummaryPost(const ::OpenAPI::OptionalParam<QString> &assignment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &geohash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &has_location = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &lat_long = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &media_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owned_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url_words = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void exportsIdGet(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void contributionRefinementTypesGetCallback(OAIHttpRequestWorker *worker);
    void contributionRefinementsGetCallback(OAIHttpRequestWorker *worker);
    void contributionsGetCallback(OAIHttpRequestWorker *worker);
    void contributionsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void contributionsIdFlagPostCallback(OAIHttpRequestWorker *worker);
    void contributionsIdGetCallback(OAIHttpRequestWorker *worker);
    void contributionsIdLikePostCallback(OAIHttpRequestWorker *worker);
    void contributionsIdLikesGetCallback(OAIHttpRequestWorker *worker);
    void contributionsIdModeratePostCallback(OAIHttpRequestWorker *worker);
    void contributionsPostCallback(OAIHttpRequestWorker *worker);
    void exportPostCallback(OAIHttpRequestWorker *worker);
    void exportSummaryPostCallback(OAIHttpRequestWorker *worker);
    void exportsIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void contributionRefinementTypesGetSignal(QList<QString> summary);
    void contributionRefinementsGetSignal(QMap<QString, QList<QString>> summary);
    void contributionsGetSignal(QList<OAIContribution> summary);
    void contributionsIdDeleteSignal(OAIContribution summary);
    void contributionsIdFlagPostSignal(OAIFlag summary);
    void contributionsIdGetSignal(OAIContribution summary);
    void contributionsIdLikePostSignal(double summary);
    void contributionsIdLikesGetSignal(QList<QString> summary);
    void contributionsIdModeratePostSignal(QString summary);
    void contributionsPostSignal(OAIContribution summary);
    void exportPostSignal(OAIExport summary);
    void exportSummaryPostSignal(OAIExportSummary summary);
    void exportsIdGetSignal(OAIExport summary);


    void contributionRefinementTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void contributionRefinementsGetSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QList<QString>> summary);
    void contributionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIContribution> summary);
    void contributionsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIContribution summary);
    void contributionsIdFlagPostSignalFull(OAIHttpRequestWorker *worker, OAIFlag summary);
    void contributionsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIContribution summary);
    void contributionsIdLikePostSignalFull(OAIHttpRequestWorker *worker, double summary);
    void contributionsIdLikesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void contributionsIdModeratePostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void contributionsPostSignalFull(OAIHttpRequestWorker *worker, OAIContribution summary);
    void exportPostSignalFull(OAIHttpRequestWorker *worker, OAIExport summary);
    void exportSummaryPostSignalFull(OAIHttpRequestWorker *worker, OAIExportSummary summary);
    void exportsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIExport summary);

    Q_DECL_DEPRECATED_X("Use contributionRefinementTypesGetSignalError() instead")
    void contributionRefinementTypesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionRefinementTypesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionRefinementsGetSignalError() instead")
    void contributionRefinementsGetSignalE(QMap<QString, QList<QString>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionRefinementsGetSignalError(QMap<QString, QList<QString>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsGetSignalError() instead")
    void contributionsGetSignalE(QList<OAIContribution> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsGetSignalError(QList<OAIContribution> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdDeleteSignalError() instead")
    void contributionsIdDeleteSignalE(OAIContribution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdDeleteSignalError(OAIContribution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdFlagPostSignalError() instead")
    void contributionsIdFlagPostSignalE(OAIFlag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdFlagPostSignalError(OAIFlag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdGetSignalError() instead")
    void contributionsIdGetSignalE(OAIContribution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdGetSignalError(OAIContribution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdLikePostSignalError() instead")
    void contributionsIdLikePostSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdLikePostSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdLikesGetSignalError() instead")
    void contributionsIdLikesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdLikesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdModeratePostSignalError() instead")
    void contributionsIdModeratePostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdModeratePostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsPostSignalError() instead")
    void contributionsPostSignalE(OAIContribution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsPostSignalError(OAIContribution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportPostSignalError() instead")
    void exportPostSignalE(OAIExport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportPostSignalError(OAIExport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSummaryPostSignalError() instead")
    void exportSummaryPostSignalE(OAIExportSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSummaryPostSignalError(OAIExportSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsIdGetSignalError() instead")
    void exportsIdGetSignalE(OAIExport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsIdGetSignalError(OAIExport summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use contributionRefinementTypesGetSignalErrorFull() instead")
    void contributionRefinementTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionRefinementTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionRefinementsGetSignalErrorFull() instead")
    void contributionRefinementsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionRefinementsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsGetSignalErrorFull() instead")
    void contributionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdDeleteSignalErrorFull() instead")
    void contributionsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdFlagPostSignalErrorFull() instead")
    void contributionsIdFlagPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdFlagPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdGetSignalErrorFull() instead")
    void contributionsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdLikePostSignalErrorFull() instead")
    void contributionsIdLikePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdLikePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdLikesGetSignalErrorFull() instead")
    void contributionsIdLikesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdLikesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsIdModeratePostSignalErrorFull() instead")
    void contributionsIdModeratePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsIdModeratePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contributionsPostSignalErrorFull() instead")
    void contributionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportPostSignalErrorFull() instead")
    void exportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSummaryPostSignalErrorFull() instead")
    void exportSummaryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSummaryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsIdGetSignalErrorFull() instead")
    void exportsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
