/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlag::OAIFlag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlag::OAIFlag() {
    this->initializeModel();
}

OAIFlag::~OAIFlag() {}

void OAIFlag::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFlag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlag::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFlag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlag::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIFlag::getDate() const {
    return m_date;
}
void OAIFlag::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIFlag::is_date_Set() const{
    return m_date_isSet;
}

bool OAIFlag::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIFlag::getEmail() const {
    return m_email;
}
void OAIFlag::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIFlag::is_email_Set() const{
    return m_email_isSet;
}

bool OAIFlag::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIFlag::getId() const {
    return m_id;
}
void OAIFlag::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFlag::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFlag::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFlag::getNotes() const {
    return m_notes;
}
void OAIFlag::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIFlag::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIFlag::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIFlag::getType() const {
    return m_type;
}
void OAIFlag::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFlag::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFlag::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFlag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
