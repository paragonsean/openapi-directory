/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaUsage::OAIMediaUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaUsage::OAIMediaUsage() {
    this->initializeModel();
}

OAIMediaUsage::~OAIMediaUsage() {}

void OAIMediaUsage::initializeModel() {

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;
}

void OAIMediaUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaUsage::fromJsonObject(QJsonObject json) {

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;
}

QString OAIMediaUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_artifacts.size() > 0) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media.isSet()) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    return obj;
}

QList<OAIArtifact> OAIMediaUsage::getArtifacts() const {
    return m_artifacts;
}
void OAIMediaUsage::setArtifacts(const QList<OAIArtifact> &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAIMediaUsage::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAIMediaUsage::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

QString OAIMediaUsage::getId() const {
    return m_id;
}
void OAIMediaUsage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMediaUsage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMediaUsage::is_id_Valid() const{
    return m_id_isValid;
}

OAIMedia OAIMediaUsage::getMedia() const {
    return m_media;
}
void OAIMediaUsage::setMedia(const OAIMedia &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIMediaUsage::is_media_Set() const{
    return m_media_isSet;
}

bool OAIMediaUsage::is_media_Valid() const{
    return m_media_isValid;
}

bool OAIMediaUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
