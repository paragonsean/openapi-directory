/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVia::OAIVia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVia::OAIVia() {
    this->initializeModel();
}

OAIVia::~OAIVia() {}

void OAIVia::initializeModel() {

    m_authority_isSet = false;
    m_authority_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_ip_address_place_isSet = false;
    m_ip_address_place_isValid = false;
}

void OAIVia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVia::fromJsonObject(QJsonObject json) {

    m_authority_isValid = ::OpenAPI::fromJsonValue(m_authority, json[QString("authority")]);
    m_authority_isSet = !json[QString("authority")].isNull() && m_authority_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_ip_address_place_isValid = ::OpenAPI::fromJsonValue(m_ip_address_place, json[QString("ipAddressPlace")]);
    m_ip_address_place_isSet = !json[QString("ipAddressPlace")].isNull() && m_ip_address_place_isValid;
}

QString OAIVia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVia::asJsonObject() const {
    QJsonObject obj;
    if (m_authority.isSet()) {
        obj.insert(QString("authority"), ::OpenAPI::toJsonValue(m_authority));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_ip_address_place.isSet()) {
        obj.insert(QString("ipAddressPlace"), ::OpenAPI::toJsonValue(m_ip_address_place));
    }
    return obj;
}

OAIAuthority OAIVia::getAuthority() const {
    return m_authority;
}
void OAIVia::setAuthority(const OAIAuthority &authority) {
    m_authority = authority;
    m_authority_isSet = true;
}

bool OAIVia::is_authority_Set() const{
    return m_authority_isSet;
}

bool OAIVia::is_authority_Valid() const{
    return m_authority_isValid;
}

QString OAIVia::getIpAddress() const {
    return m_ip_address;
}
void OAIVia::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIVia::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIVia::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

OAIPlace OAIVia::getIpAddressPlace() const {
    return m_ip_address_place;
}
void OAIVia::setIpAddressPlace(const OAIPlace &ip_address_place) {
    m_ip_address_place = ip_address_place;
    m_ip_address_place_isSet = true;
}

bool OAIVia::is_ip_address_place_Set() const{
    return m_ip_address_place_isSet;
}

bool OAIVia::is_ip_address_place_Valid() const{
    return m_ip_address_place_isValid;
}

bool OAIVia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_place.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVia::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
