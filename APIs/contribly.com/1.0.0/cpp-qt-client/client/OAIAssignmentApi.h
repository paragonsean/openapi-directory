/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssignmentApi_H
#define OAI_OAIAssignmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignment.h"
#include "OAIAssignmentSubmission.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssignmentApi : public QObject {
    Q_OBJECT

public:
    OAIAssignmentApi(const int timeOut = 0);
    ~OAIAssignmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owned_by QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  q QString [optional]
    * @param[in]  url_words QString [optional]
    * @param[in]  open bool [optional]
    * @param[in]  always_open bool [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void assignmentsGet(const ::OpenAPI::OptionalParam<QString> &owned_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url_words = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &open = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &always_open = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void assignmentsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void assignmentsIdGet(const QString &id);

    /**
    * @param[in]  oai_assignment_submission OAIAssignmentSubmission [required]
    */
    virtual void assignmentsPost(const OAIAssignmentSubmission &oai_assignment_submission);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignmentsGetCallback(OAIHttpRequestWorker *worker);
    void assignmentsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void assignmentsIdGetCallback(OAIHttpRequestWorker *worker);
    void assignmentsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assignmentsGetSignal(QList<OAIAssignment> summary);
    void assignmentsIdDeleteSignal();
    void assignmentsIdGetSignal(OAIAssignment summary);
    void assignmentsPostSignal(OAIAssignment summary);


    void assignmentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignment> summary);
    void assignmentsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void assignmentsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void assignmentsPostSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);

    Q_DECL_DEPRECATED_X("Use assignmentsGetSignalError() instead")
    void assignmentsGetSignalE(QList<OAIAssignment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignmentsGetSignalError(QList<OAIAssignment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignmentsIdDeleteSignalError() instead")
    void assignmentsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assignmentsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignmentsIdGetSignalError() instead")
    void assignmentsIdGetSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignmentsIdGetSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignmentsPostSignalError() instead")
    void assignmentsPostSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignmentsPostSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assignmentsGetSignalErrorFull() instead")
    void assignmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignmentsIdDeleteSignalErrorFull() instead")
    void assignmentsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignmentsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignmentsIdGetSignalErrorFull() instead")
    void assignmentsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignmentsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignmentsPostSignalErrorFull() instead")
    void assignmentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignmentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
