/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactFormat::OAIArtifactFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactFormat::OAIArtifactFormat() {
    this->initializeModel();
}

OAIArtifactFormat::~OAIArtifactFormat() {}

void OAIArtifactFormat::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_file_extension_isSet = false;
    m_file_extension_isValid = false;

    m_for_content_type_isSet = false;
    m_for_content_type_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_preserve_aspect_ratio_isSet = false;
    m_preserve_aspect_ratio_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_upscale_allowed_isSet = false;
    m_upscale_allowed_isValid = false;
}

void OAIArtifactFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactFormat::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_file_extension_isValid = ::OpenAPI::fromJsonValue(m_file_extension, json[QString("fileExtension")]);
    m_file_extension_isSet = !json[QString("fileExtension")].isNull() && m_file_extension_isValid;

    m_for_content_type_isValid = ::OpenAPI::fromJsonValue(m_for_content_type, json[QString("forContentType")]);
    m_for_content_type_isSet = !json[QString("forContentType")].isNull() && m_for_content_type_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_preserve_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_preserve_aspect_ratio, json[QString("preserveAspectRatio")]);
    m_preserve_aspect_ratio_isSet = !json[QString("preserveAspectRatio")].isNull() && m_preserve_aspect_ratio_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_upscale_allowed_isValid = ::OpenAPI::fromJsonValue(m_upscale_allowed, json[QString("upscaleAllowed")]);
    m_upscale_allowed_isSet = !json[QString("upscaleAllowed")].isNull() && m_upscale_allowed_isValid;
}

QString OAIArtifactFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_file_extension_isSet) {
        obj.insert(QString("fileExtension"), ::OpenAPI::toJsonValue(m_file_extension));
    }
    if (m_for_content_type_isSet) {
        obj.insert(QString("forContentType"), ::OpenAPI::toJsonValue(m_for_content_type));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_preserve_aspect_ratio_isSet) {
        obj.insert(QString("preserveAspectRatio"), ::OpenAPI::toJsonValue(m_preserve_aspect_ratio));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_upscale_allowed_isSet) {
        obj.insert(QString("upscaleAllowed"), ::OpenAPI::toJsonValue(m_upscale_allowed));
    }
    return obj;
}

QString OAIArtifactFormat::getContentType() const {
    return m_content_type;
}
void OAIArtifactFormat::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIArtifactFormat::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIArtifactFormat::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIArtifactFormat::getFileExtension() const {
    return m_file_extension;
}
void OAIArtifactFormat::setFileExtension(const QString &file_extension) {
    m_file_extension = file_extension;
    m_file_extension_isSet = true;
}

bool OAIArtifactFormat::is_file_extension_Set() const{
    return m_file_extension_isSet;
}

bool OAIArtifactFormat::is_file_extension_Valid() const{
    return m_file_extension_isValid;
}

QString OAIArtifactFormat::getForContentType() const {
    return m_for_content_type;
}
void OAIArtifactFormat::setForContentType(const QString &for_content_type) {
    m_for_content_type = for_content_type;
    m_for_content_type_isSet = true;
}

bool OAIArtifactFormat::is_for_content_type_Set() const{
    return m_for_content_type_isSet;
}

bool OAIArtifactFormat::is_for_content_type_Valid() const{
    return m_for_content_type_isValid;
}

QString OAIArtifactFormat::getLabel() const {
    return m_label;
}
void OAIArtifactFormat::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIArtifactFormat::is_label_Set() const{
    return m_label_isSet;
}

bool OAIArtifactFormat::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIArtifactFormat::isPreserveAspectRatio() const {
    return m_preserve_aspect_ratio;
}
void OAIArtifactFormat::setPreserveAspectRatio(const bool &preserve_aspect_ratio) {
    m_preserve_aspect_ratio = preserve_aspect_ratio;
    m_preserve_aspect_ratio_isSet = true;
}

bool OAIArtifactFormat::is_preserve_aspect_ratio_Set() const{
    return m_preserve_aspect_ratio_isSet;
}

bool OAIArtifactFormat::is_preserve_aspect_ratio_Valid() const{
    return m_preserve_aspect_ratio_isValid;
}

bool OAIArtifactFormat::isRPublic() const {
    return m_r_public;
}
void OAIArtifactFormat::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIArtifactFormat::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIArtifactFormat::is_r_public_Valid() const{
    return m_r_public_isValid;
}

bool OAIArtifactFormat::isUpscaleAllowed() const {
    return m_upscale_allowed;
}
void OAIArtifactFormat::setUpscaleAllowed(const bool &upscale_allowed) {
    m_upscale_allowed = upscale_allowed;
    m_upscale_allowed_isSet = true;
}

bool OAIArtifactFormat::is_upscale_allowed_Set() const{
    return m_upscale_allowed_isSet;
}

bool OAIArtifactFormat::is_upscale_allowed_Valid() const{
    return m_upscale_allowed_isValid;
}

bool OAIArtifactFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_for_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preserve_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upscale_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
