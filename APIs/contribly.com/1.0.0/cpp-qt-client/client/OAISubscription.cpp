/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_assignment_isSet = false;
    m_assignment_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_include_body_isSet = false;
    m_include_body_isValid = false;

    m_include_thumbenail_isSet = false;
    m_include_thumbenail_isValid = false;

    m_slack_channel_isSet = false;
    m_slack_channel_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_assignment_isValid = ::OpenAPI::fromJsonValue(m_assignment, json[QString("assignment")]);
    m_assignment_isSet = !json[QString("assignment")].isNull() && m_assignment_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_include_body_isValid = ::OpenAPI::fromJsonValue(m_include_body, json[QString("includeBody")]);
    m_include_body_isSet = !json[QString("includeBody")].isNull() && m_include_body_isValid;

    m_include_thumbenail_isValid = ::OpenAPI::fromJsonValue(m_include_thumbenail, json[QString("includeThumbenail")]);
    m_include_thumbenail_isSet = !json[QString("includeThumbenail")].isNull() && m_include_thumbenail_isValid;

    m_slack_channel_isValid = ::OpenAPI::fromJsonValue(m_slack_channel, json[QString("slackChannel")]);
    m_slack_channel_isSet = !json[QString("slackChannel")].isNull() && m_slack_channel_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_isSet) {
        obj.insert(QString("assignment"), ::OpenAPI::toJsonValue(m_assignment));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_include_body_isSet) {
        obj.insert(QString("includeBody"), ::OpenAPI::toJsonValue(m_include_body));
    }
    if (m_include_thumbenail_isSet) {
        obj.insert(QString("includeThumbenail"), ::OpenAPI::toJsonValue(m_include_thumbenail));
    }
    if (m_slack_channel_isSet) {
        obj.insert(QString("slackChannel"), ::OpenAPI::toJsonValue(m_slack_channel));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAISubscription::getAssignment() const {
    return m_assignment;
}
void OAISubscription::setAssignment(const QString &assignment) {
    m_assignment = assignment;
    m_assignment_isSet = true;
}

bool OAISubscription::is_assignment_Set() const{
    return m_assignment_isSet;
}

bool OAISubscription::is_assignment_Valid() const{
    return m_assignment_isValid;
}

QString OAISubscription::getEmail() const {
    return m_email;
}
void OAISubscription::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISubscription::is_email_Set() const{
    return m_email_isSet;
}

bool OAISubscription::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISubscription::getId() const {
    return m_id;
}
void OAISubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscription::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISubscription::isIncludeBody() const {
    return m_include_body;
}
void OAISubscription::setIncludeBody(const bool &include_body) {
    m_include_body = include_body;
    m_include_body_isSet = true;
}

bool OAISubscription::is_include_body_Set() const{
    return m_include_body_isSet;
}

bool OAISubscription::is_include_body_Valid() const{
    return m_include_body_isValid;
}

bool OAISubscription::isIncludeThumbenail() const {
    return m_include_thumbenail;
}
void OAISubscription::setIncludeThumbenail(const bool &include_thumbenail) {
    m_include_thumbenail = include_thumbenail;
    m_include_thumbenail_isSet = true;
}

bool OAISubscription::is_include_thumbenail_Set() const{
    return m_include_thumbenail_isSet;
}

bool OAISubscription::is_include_thumbenail_Valid() const{
    return m_include_thumbenail_isValid;
}

QString OAISubscription::getSlackChannel() const {
    return m_slack_channel;
}
void OAISubscription::setSlackChannel(const QString &slack_channel) {
    m_slack_channel = slack_channel;
    m_slack_channel_isSet = true;
}

bool OAISubscription::is_slack_channel_Set() const{
    return m_slack_channel_isSet;
}

bool OAISubscription::is_slack_channel_Valid() const{
    return m_slack_channel_isValid;
}

QString OAISubscription::getToken() const {
    return m_token;
}
void OAISubscription::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAISubscription::is_token_Set() const{
    return m_token_isSet;
}

bool OAISubscription::is_token_Valid() const{
    return m_token_isValid;
}

QList<QString> OAISubscription::getTypes() const {
    return m_types;
}
void OAISubscription::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAISubscription::is_types_Set() const{
    return m_types_isSet;
}

bool OAISubscription::is_types_Valid() const{
    return m_types_isValid;
}

QString OAISubscription::getUser() const {
    return m_user;
}
void OAISubscription::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISubscription::is_user_Set() const{
    return m_user_isSet;
}

bool OAISubscription::is_user_Valid() const{
    return m_user_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_thumbenail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_include_body_isValid && m_token_isValid && m_types_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
