/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionSubmission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionSubmission::OAISubscriptionSubmission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionSubmission::OAISubscriptionSubmission() {
    this->initializeModel();
}

OAISubscriptionSubmission::~OAISubscriptionSubmission() {}

void OAISubscriptionSubmission::initializeModel() {

    m_assignment_isSet = false;
    m_assignment_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_include_body_isSet = false;
    m_include_body_isValid = false;

    m_include_thumbenail_isSet = false;
    m_include_thumbenail_isValid = false;

    m_slack_channel_isSet = false;
    m_slack_channel_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAISubscriptionSubmission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionSubmission::fromJsonObject(QJsonObject json) {

    m_assignment_isValid = ::OpenAPI::fromJsonValue(m_assignment, json[QString("assignment")]);
    m_assignment_isSet = !json[QString("assignment")].isNull() && m_assignment_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_include_body_isValid = ::OpenAPI::fromJsonValue(m_include_body, json[QString("includeBody")]);
    m_include_body_isSet = !json[QString("includeBody")].isNull() && m_include_body_isValid;

    m_include_thumbenail_isValid = ::OpenAPI::fromJsonValue(m_include_thumbenail, json[QString("includeThumbenail")]);
    m_include_thumbenail_isSet = !json[QString("includeThumbenail")].isNull() && m_include_thumbenail_isValid;

    m_slack_channel_isValid = ::OpenAPI::fromJsonValue(m_slack_channel, json[QString("slackChannel")]);
    m_slack_channel_isSet = !json[QString("slackChannel")].isNull() && m_slack_channel_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAISubscriptionSubmission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionSubmission::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_isSet) {
        obj.insert(QString("assignment"), ::OpenAPI::toJsonValue(m_assignment));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_include_body_isSet) {
        obj.insert(QString("includeBody"), ::OpenAPI::toJsonValue(m_include_body));
    }
    if (m_include_thumbenail_isSet) {
        obj.insert(QString("includeThumbenail"), ::OpenAPI::toJsonValue(m_include_thumbenail));
    }
    if (m_slack_channel_isSet) {
        obj.insert(QString("slackChannel"), ::OpenAPI::toJsonValue(m_slack_channel));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QString OAISubscriptionSubmission::getAssignment() const {
    return m_assignment;
}
void OAISubscriptionSubmission::setAssignment(const QString &assignment) {
    m_assignment = assignment;
    m_assignment_isSet = true;
}

bool OAISubscriptionSubmission::is_assignment_Set() const{
    return m_assignment_isSet;
}

bool OAISubscriptionSubmission::is_assignment_Valid() const{
    return m_assignment_isValid;
}

QString OAISubscriptionSubmission::getEmail() const {
    return m_email;
}
void OAISubscriptionSubmission::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISubscriptionSubmission::is_email_Set() const{
    return m_email_isSet;
}

bool OAISubscriptionSubmission::is_email_Valid() const{
    return m_email_isValid;
}

bool OAISubscriptionSubmission::isIncludeBody() const {
    return m_include_body;
}
void OAISubscriptionSubmission::setIncludeBody(const bool &include_body) {
    m_include_body = include_body;
    m_include_body_isSet = true;
}

bool OAISubscriptionSubmission::is_include_body_Set() const{
    return m_include_body_isSet;
}

bool OAISubscriptionSubmission::is_include_body_Valid() const{
    return m_include_body_isValid;
}

bool OAISubscriptionSubmission::isIncludeThumbenail() const {
    return m_include_thumbenail;
}
void OAISubscriptionSubmission::setIncludeThumbenail(const bool &include_thumbenail) {
    m_include_thumbenail = include_thumbenail;
    m_include_thumbenail_isSet = true;
}

bool OAISubscriptionSubmission::is_include_thumbenail_Set() const{
    return m_include_thumbenail_isSet;
}

bool OAISubscriptionSubmission::is_include_thumbenail_Valid() const{
    return m_include_thumbenail_isValid;
}

QString OAISubscriptionSubmission::getSlackChannel() const {
    return m_slack_channel;
}
void OAISubscriptionSubmission::setSlackChannel(const QString &slack_channel) {
    m_slack_channel = slack_channel;
    m_slack_channel_isSet = true;
}

bool OAISubscriptionSubmission::is_slack_channel_Set() const{
    return m_slack_channel_isSet;
}

bool OAISubscriptionSubmission::is_slack_channel_Valid() const{
    return m_slack_channel_isValid;
}

QList<QString> OAISubscriptionSubmission::getTypes() const {
    return m_types;
}
void OAISubscriptionSubmission::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAISubscriptionSubmission::is_types_Set() const{
    return m_types_isSet;
}

bool OAISubscriptionSubmission::is_types_Valid() const{
    return m_types_isValid;
}

bool OAISubscriptionSubmission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_thumbenail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionSubmission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_include_body_isValid && m_types_isValid && true;
}

} // namespace OpenAPI
