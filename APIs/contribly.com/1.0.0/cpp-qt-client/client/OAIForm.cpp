/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForm::OAIForm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForm::OAIForm() {
    this->initializeModel();
}

OAIForm::~OAIForm() {}

void OAIForm::initializeModel() {

    m_call_to_action_isSet = false;
    m_call_to_action_isValid = false;

    m_css_url_isSet = false;
    m_css_url_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_heading_isSet = false;
    m_heading_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_no_css_isSet = false;
    m_no_css_isValid = false;

    m_owned_by_isSet = false;
    m_owned_by_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIForm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForm::fromJsonObject(QJsonObject json) {

    m_call_to_action_isValid = ::OpenAPI::fromJsonValue(m_call_to_action, json[QString("callToAction")]);
    m_call_to_action_isSet = !json[QString("callToAction")].isNull() && m_call_to_action_isValid;

    m_css_url_isValid = ::OpenAPI::fromJsonValue(m_css_url, json[QString("cssUrl")]);
    m_css_url_isSet = !json[QString("cssUrl")].isNull() && m_css_url_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_heading_isValid = ::OpenAPI::fromJsonValue(m_heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_no_css_isValid = ::OpenAPI::fromJsonValue(m_no_css, json[QString("noCss")]);
    m_no_css_isSet = !json[QString("noCss")].isNull() && m_no_css_isValid;

    m_owned_by_isValid = ::OpenAPI::fromJsonValue(m_owned_by, json[QString("ownedBy")]);
    m_owned_by_isSet = !json[QString("ownedBy")].isNull() && m_owned_by_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIForm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForm::asJsonObject() const {
    QJsonObject obj;
    if (m_call_to_action_isSet) {
        obj.insert(QString("callToAction"), ::OpenAPI::toJsonValue(m_call_to_action));
    }
    if (m_css_url_isSet) {
        obj.insert(QString("cssUrl"), ::OpenAPI::toJsonValue(m_css_url));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(m_heading));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_no_css_isSet) {
        obj.insert(QString("noCss"), ::OpenAPI::toJsonValue(m_no_css));
    }
    if (m_owned_by_isSet) {
        obj.insert(QString("ownedBy"), ::OpenAPI::toJsonValue(m_owned_by));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIForm::getCallToAction() const {
    return m_call_to_action;
}
void OAIForm::setCallToAction(const QString &call_to_action) {
    m_call_to_action = call_to_action;
    m_call_to_action_isSet = true;
}

bool OAIForm::is_call_to_action_Set() const{
    return m_call_to_action_isSet;
}

bool OAIForm::is_call_to_action_Valid() const{
    return m_call_to_action_isValid;
}

QString OAIForm::getCssUrl() const {
    return m_css_url;
}
void OAIForm::setCssUrl(const QString &css_url) {
    m_css_url = css_url;
    m_css_url_isSet = true;
}

bool OAIForm::is_css_url_Set() const{
    return m_css_url_isSet;
}

bool OAIForm::is_css_url_Valid() const{
    return m_css_url_isValid;
}

QList<OAIFormField> OAIForm::getFields() const {
    return m_fields;
}
void OAIForm::setFields(const QList<OAIFormField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIForm::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIForm::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIForm::getHeading() const {
    return m_heading;
}
void OAIForm::setHeading(const QString &heading) {
    m_heading = heading;
    m_heading_isSet = true;
}

bool OAIForm::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAIForm::is_heading_Valid() const{
    return m_heading_isValid;
}

QString OAIForm::getId() const {
    return m_id;
}
void OAIForm::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIForm::is_id_Set() const{
    return m_id_isSet;
}

bool OAIForm::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIForm::getName() const {
    return m_name;
}
void OAIForm::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIForm::is_name_Set() const{
    return m_name_isSet;
}

bool OAIForm::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIForm::isNoCss() const {
    return m_no_css;
}
void OAIForm::setNoCss(const bool &no_css) {
    m_no_css = no_css;
    m_no_css_isSet = true;
}

bool OAIForm::is_no_css_Set() const{
    return m_no_css_isSet;
}

bool OAIForm::is_no_css_Valid() const{
    return m_no_css_isValid;
}

QString OAIForm::getOwnedBy() const {
    return m_owned_by;
}
void OAIForm::setOwnedBy(const QString &owned_by) {
    m_owned_by = owned_by;
    m_owned_by_isSet = true;
}

bool OAIForm::is_owned_by_Set() const{
    return m_owned_by_isSet;
}

bool OAIForm::is_owned_by_Valid() const{
    return m_owned_by_isValid;
}

QList<OAITag> OAIForm::getTags() const {
    return m_tags;
}
void OAIForm::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIForm::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIForm::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIForm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_to_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_css_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owned_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
