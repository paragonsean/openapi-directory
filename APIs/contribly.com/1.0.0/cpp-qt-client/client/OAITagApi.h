/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITagApi_H
#define OAI_OAITagApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAITag.h"
#include "OAITagSet.h"
#include "OAITagSetSubmission.h"
#include "OAITagSubmission.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITagApi : public QObject {
    Q_OBJECT

public:
    OAITagApi(const int timeOut = 0);
    ~OAITagApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owned_by QString [optional]
    * @param[in]  tag_set QString [optional]
    * @param[in]  url_words QString [optional]
    */
    virtual void tagsGet(const ::OpenAPI::OptionalParam<QString> &owned_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url_words = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void tagsIdGet(const QString &id);

    /**
    * @param[in]  oai_tag_submission OAITagSubmission [required]
    */
    virtual void tagsPost(const OAITagSubmission &oai_tag_submission);

    /**
    * @param[in]  owned_by QString [optional]
    * @param[in]  url_words QString [optional]
    */
    virtual void tagsetsGet(const ::OpenAPI::OptionalParam<QString> &owned_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url_words = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void tagsetsIdGet(const QString &id);

    /**
    * @param[in]  oai_tag_set_submission OAITagSetSubmission [required]
    */
    virtual void tagsetsPost(const OAITagSetSubmission &oai_tag_set_submission);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tagsGetCallback(OAIHttpRequestWorker *worker);
    void tagsIdGetCallback(OAIHttpRequestWorker *worker);
    void tagsPostCallback(OAIHttpRequestWorker *worker);
    void tagsetsGetCallback(OAIHttpRequestWorker *worker);
    void tagsetsIdGetCallback(OAIHttpRequestWorker *worker);
    void tagsetsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tagsGetSignal(QList<OAITag> summary);
    void tagsIdGetSignal(OAITag summary);
    void tagsPostSignal(OAITag summary);
    void tagsetsGetSignal(QList<OAITagSet> summary);
    void tagsetsIdGetSignal(OAITagSet summary);
    void tagsetsPostSignal(OAITagSet summary);


    void tagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITag> summary);
    void tagsIdGetSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void tagsPostSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void tagsetsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITagSet> summary);
    void tagsetsIdGetSignalFull(OAIHttpRequestWorker *worker, OAITagSet summary);
    void tagsetsPostSignalFull(OAIHttpRequestWorker *worker, OAITagSet summary);

    Q_DECL_DEPRECATED_X("Use tagsGetSignalError() instead")
    void tagsGetSignalE(QList<OAITag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetSignalError(QList<OAITag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsIdGetSignalError() instead")
    void tagsIdGetSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsIdGetSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsPostSignalError() instead")
    void tagsPostSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsPostSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsetsGetSignalError() instead")
    void tagsetsGetSignalE(QList<OAITagSet> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsetsGetSignalError(QList<OAITagSet> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsetsIdGetSignalError() instead")
    void tagsetsIdGetSignalE(OAITagSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsetsIdGetSignalError(OAITagSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsetsPostSignalError() instead")
    void tagsetsPostSignalE(OAITagSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsetsPostSignalError(OAITagSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tagsGetSignalErrorFull() instead")
    void tagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsIdGetSignalErrorFull() instead")
    void tagsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsPostSignalErrorFull() instead")
    void tagsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsetsGetSignalErrorFull() instead")
    void tagsetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsetsIdGetSignalErrorFull() instead")
    void tagsetsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsetsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsetsPostSignalErrorFull() instead")
    void tagsetsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsetsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
