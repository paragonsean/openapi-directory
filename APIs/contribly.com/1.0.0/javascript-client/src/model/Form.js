/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FormField from './FormField';
import Tag from './Tag';

/**
 * The Form model module.
 * @module model/Form
 * @version 1.0.0
 */
class Form {
    /**
     * Constructs a new <code>Form</code>.
     * @alias module:model/Form
     */
    constructor() { 
        
        Form.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Form</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Form} obj Optional instance to populate.
     * @return {module:model/Form} The populated <code>Form</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Form();

            if (data.hasOwnProperty('callToAction')) {
                obj['callToAction'] = ApiClient.convertToType(data['callToAction'], 'String');
            }
            if (data.hasOwnProperty('cssUrl')) {
                obj['cssUrl'] = ApiClient.convertToType(data['cssUrl'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [FormField]);
            }
            if (data.hasOwnProperty('heading')) {
                obj['heading'] = ApiClient.convertToType(data['heading'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('noCss')) {
                obj['noCss'] = ApiClient.convertToType(data['noCss'], 'Boolean');
            }
            if (data.hasOwnProperty('ownedBy')) {
                obj['ownedBy'] = ApiClient.convertToType(data['ownedBy'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Form</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Form</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['callToAction'] && !(typeof data['callToAction'] === 'string' || data['callToAction'] instanceof String)) {
            throw new Error("Expected the field `callToAction` to be a primitive type in the JSON string but got " + data['callToAction']);
        }
        // ensure the json data is a string
        if (data['cssUrl'] && !(typeof data['cssUrl'] === 'string' || data['cssUrl'] instanceof String)) {
            throw new Error("Expected the field `cssUrl` to be a primitive type in the JSON string but got " + data['cssUrl']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                FormField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['heading'] && !(typeof data['heading'] === 'string' || data['heading'] instanceof String)) {
            throw new Error("Expected the field `heading` to be a primitive type in the JSON string but got " + data['heading']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownedBy'] && !(typeof data['ownedBy'] === 'string' || data['ownedBy'] instanceof String)) {
            throw new Error("Expected the field `ownedBy` to be a primitive type in the JSON string but got " + data['ownedBy']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} callToAction
 */
Form.prototype['callToAction'] = undefined;

/**
 * @member {String} cssUrl
 */
Form.prototype['cssUrl'] = undefined;

/**
 * @member {Array.<module:model/FormField>} fields
 */
Form.prototype['fields'] = undefined;

/**
 * @member {String} heading
 */
Form.prototype['heading'] = undefined;

/**
 * @member {String} id
 */
Form.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Form.prototype['name'] = undefined;

/**
 * @member {Boolean} noCss
 */
Form.prototype['noCss'] = undefined;

/**
 * @member {String} ownedBy
 */
Form.prototype['ownedBy'] = undefined;

/**
 * @member {Array.<module:model/Tag>} tags
 */
Form.prototype['tags'] = undefined;






export default Form;

