/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArtifactFormat model module.
 * @module model/ArtifactFormat
 * @version 1.0.0
 */
class ArtifactFormat {
    /**
     * Constructs a new <code>ArtifactFormat</code>.
     * @alias module:model/ArtifactFormat
     */
    constructor() { 
        
        ArtifactFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArtifactFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArtifactFormat} obj Optional instance to populate.
     * @return {module:model/ArtifactFormat} The populated <code>ArtifactFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArtifactFormat();

            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('fileExtension')) {
                obj['fileExtension'] = ApiClient.convertToType(data['fileExtension'], 'String');
            }
            if (data.hasOwnProperty('forContentType')) {
                obj['forContentType'] = ApiClient.convertToType(data['forContentType'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('preserveAspectRatio')) {
                obj['preserveAspectRatio'] = ApiClient.convertToType(data['preserveAspectRatio'], 'Boolean');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('upscaleAllowed')) {
                obj['upscaleAllowed'] = ApiClient.convertToType(data['upscaleAllowed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArtifactFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArtifactFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['fileExtension'] && !(typeof data['fileExtension'] === 'string' || data['fileExtension'] instanceof String)) {
            throw new Error("Expected the field `fileExtension` to be a primitive type in the JSON string but got " + data['fileExtension']);
        }
        // ensure the json data is a string
        if (data['forContentType'] && !(typeof data['forContentType'] === 'string' || data['forContentType'] instanceof String)) {
            throw new Error("Expected the field `forContentType` to be a primitive type in the JSON string but got " + data['forContentType']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }

        return true;
    }


}



/**
 * @member {String} contentType
 */
ArtifactFormat.prototype['contentType'] = undefined;

/**
 * @member {String} fileExtension
 */
ArtifactFormat.prototype['fileExtension'] = undefined;

/**
 * @member {String} forContentType
 */
ArtifactFormat.prototype['forContentType'] = undefined;

/**
 * @member {String} label
 */
ArtifactFormat.prototype['label'] = undefined;

/**
 * @member {Boolean} preserveAspectRatio
 */
ArtifactFormat.prototype['preserveAspectRatio'] = undefined;

/**
 * @member {Boolean} public
 */
ArtifactFormat.prototype['public'] = undefined;

/**
 * @member {Boolean} upscaleAllowed
 */
ArtifactFormat.prototype['upscaleAllowed'] = undefined;






export default ArtifactFormat;

