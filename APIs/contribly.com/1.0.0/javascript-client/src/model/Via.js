/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Authority from './Authority';
import Place from './Place';

/**
 * The Via model module.
 * @module model/Via
 * @version 1.0.0
 */
class Via {
    /**
     * Constructs a new <code>Via</code>.
     * @alias module:model/Via
     */
    constructor() { 
        
        Via.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Via</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Via} obj Optional instance to populate.
     * @return {module:model/Via} The populated <code>Via</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Via();

            if (data.hasOwnProperty('authority')) {
                obj['authority'] = Authority.constructFromObject(data['authority']);
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('ipAddressPlace')) {
                obj['ipAddressPlace'] = Place.constructFromObject(data['ipAddressPlace']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Via</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Via</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authority`
        if (data['authority']) { // data not null
          Authority.validateJSON(data['authority']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // validate the optional field `ipAddressPlace`
        if (data['ipAddressPlace']) { // data not null
          Place.validateJSON(data['ipAddressPlace']);
        }

        return true;
    }


}



/**
 * @member {module:model/Authority} authority
 */
Via.prototype['authority'] = undefined;

/**
 * @member {String} ipAddress
 */
Via.prototype['ipAddress'] = undefined;

/**
 * @member {module:model/Place} ipAddressPlace
 */
Via.prototype['ipAddressPlace'] = undefined;






export default Via;

