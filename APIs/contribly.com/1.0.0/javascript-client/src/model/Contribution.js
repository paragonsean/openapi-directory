/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Assignment from './Assignment';
import MediaUsage from './MediaUsage';
import ModerationHistoryItem from './ModerationHistoryItem';
import Place from './Place';
import Via from './Via';

/**
 * The Contribution model module.
 * @module model/Contribution
 * @version 1.0.0
 */
class Contribution {
    /**
     * Constructs a new <code>Contribution</code>.
     * @alias module:model/Contribution
     */
    constructor() { 
        
        Contribution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Contribution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contribution} obj Optional instance to populate.
     * @return {module:model/Contribution} The populated <code>Contribution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contribution();

            if (data.hasOwnProperty('assignment')) {
                obj['assignment'] = Assignment.constructFromObject(data['assignment']);
            }
            if (data.hasOwnProperty('attribution')) {
                obj['attribution'] = ApiClient.convertToType(data['attribution'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('headline')) {
                obj['headline'] = ApiClient.convertToType(data['headline'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mediaUsages')) {
                obj['mediaUsages'] = ApiClient.convertToType(data['mediaUsages'], [MediaUsage]);
            }
            if (data.hasOwnProperty('moderationHistory')) {
                obj['moderationHistory'] = ApiClient.convertToType(data['moderationHistory'], [ModerationHistoryItem]);
            }
            if (data.hasOwnProperty('place')) {
                obj['place'] = Place.constructFromObject(data['place']);
            }
            if (data.hasOwnProperty('urlWords')) {
                obj['urlWords'] = ApiClient.convertToType(data['urlWords'], 'String');
            }
            if (data.hasOwnProperty('via')) {
                obj['via'] = Via.constructFromObject(data['via']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contribution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contribution</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assignment`
        if (data['assignment']) { // data not null
          Assignment.validateJSON(data['assignment']);
        }
        // ensure the json data is a string
        if (data['attribution'] && !(typeof data['attribution'] === 'string' || data['attribution'] instanceof String)) {
            throw new Error("Expected the field `attribution` to be a primitive type in the JSON string but got " + data['attribution']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['headline'] && !(typeof data['headline'] === 'string' || data['headline'] instanceof String)) {
            throw new Error("Expected the field `headline` to be a primitive type in the JSON string but got " + data['headline']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['mediaUsages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mediaUsages'])) {
                throw new Error("Expected the field `mediaUsages` to be an array in the JSON data but got " + data['mediaUsages']);
            }
            // validate the optional field `mediaUsages` (array)
            for (const item of data['mediaUsages']) {
                MediaUsage.validateJSON(item);
            };
        }
        if (data['moderationHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['moderationHistory'])) {
                throw new Error("Expected the field `moderationHistory` to be an array in the JSON data but got " + data['moderationHistory']);
            }
            // validate the optional field `moderationHistory` (array)
            for (const item of data['moderationHistory']) {
                ModerationHistoryItem.validateJSON(item);
            };
        }
        // validate the optional field `place`
        if (data['place']) { // data not null
          Place.validateJSON(data['place']);
        }
        // ensure the json data is a string
        if (data['urlWords'] && !(typeof data['urlWords'] === 'string' || data['urlWords'] instanceof String)) {
            throw new Error("Expected the field `urlWords` to be a primitive type in the JSON string but got " + data['urlWords']);
        }
        // validate the optional field `via`
        if (data['via']) { // data not null
          Via.validateJSON(data['via']);
        }

        return true;
    }


}



/**
 * @member {module:model/Assignment} assignment
 */
Contribution.prototype['assignment'] = undefined;

/**
 * The public attribution for this contribution. This will be the display name of the registered user or the contributor's first and last name if they provided them while making a non authenticated contribution. A blank attribution field indicates and anonymous contribution.
 * @member {String} attribution
 */
Contribution.prototype['attribution'] = undefined;

/**
 * @member {String} body
 */
Contribution.prototype['body'] = undefined;

/**
 * @member {Date} created
 */
Contribution.prototype['created'] = undefined;

/**
 * @member {String} headline
 */
Contribution.prototype['headline'] = undefined;

/**
 * @member {String} id
 */
Contribution.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/MediaUsage>} mediaUsages
 */
Contribution.prototype['mediaUsages'] = undefined;

/**
 * @member {Array.<module:model/ModerationHistoryItem>} moderationHistory
 */
Contribution.prototype['moderationHistory'] = undefined;

/**
 * @member {module:model/Place} place
 */
Contribution.prototype['place'] = undefined;

/**
 * @member {String} urlWords
 */
Contribution.prototype['urlWords'] = undefined;

/**
 * @member {module:model/Via} via
 */
Contribution.prototype['via'] = undefined;






export default Contribution;

