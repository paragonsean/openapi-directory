/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TagSet from './TagSet';

/**
 * The TagSubmission model module.
 * @module model/TagSubmission
 * @version 1.0.0
 */
class TagSubmission {
    /**
     * Constructs a new <code>TagSubmission</code>.
     * @alias module:model/TagSubmission
     * @param name {String} 
     */
    constructor(name) { 
        
        TagSubmission.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>TagSubmission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagSubmission} obj Optional instance to populate.
     * @return {module:model/TagSubmission} The populated <code>TagSubmission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagSubmission();

            if (data.hasOwnProperty('colour')) {
                obj['colour'] = ApiClient.convertToType(data['colour'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tagSet')) {
                obj['tagSet'] = TagSet.constructFromObject(data['tagSet']);
            }
            if (data.hasOwnProperty('urlWords')) {
                obj['urlWords'] = ApiClient.convertToType(data['urlWords'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagSubmission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagSubmission</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TagSubmission.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['colour'] && !(typeof data['colour'] === 'string' || data['colour'] instanceof String)) {
            throw new Error("Expected the field `colour` to be a primitive type in the JSON string but got " + data['colour']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `tagSet`
        if (data['tagSet']) { // data not null
          TagSet.validateJSON(data['tagSet']);
        }
        // ensure the json data is a string
        if (data['urlWords'] && !(typeof data['urlWords'] === 'string' || data['urlWords'] instanceof String)) {
            throw new Error("Expected the field `urlWords` to be a primitive type in the JSON string but got " + data['urlWords']);
        }

        return true;
    }


}

TagSubmission.RequiredProperties = ["name"];

/**
 * @member {String} colour
 */
TagSubmission.prototype['colour'] = undefined;

/**
 * @member {String} name
 */
TagSubmission.prototype['name'] = undefined;

/**
 * @member {module:model/TagSet} tagSet
 */
TagSubmission.prototype['tagSet'] = undefined;

/**
 * @member {String} urlWords
 */
TagSubmission.prototype['urlWords'] = undefined;






export default TagSubmission;

