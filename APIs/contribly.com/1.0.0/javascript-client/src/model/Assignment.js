/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaUsage from './MediaUsage';
import Tag from './Tag';

/**
 * The Assignment model module.
 * @module model/Assignment
 * @version 1.0.0
 */
class Assignment {
    /**
     * Constructs a new <code>Assignment</code>.
     * @alias module:model/Assignment
     */
    constructor() { 
        
        Assignment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Assignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Assignment} obj Optional instance to populate.
     * @return {module:model/Assignment} The populated <code>Assignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Assignment();

            if (data.hasOwnProperty('allowsAnonymousContributions')) {
                obj['allowsAnonymousContributions'] = ApiClient.convertToType(data['allowsAnonymousContributions'], 'Boolean');
            }
            if (data.hasOwnProperty('callToAction')) {
                obj['callToAction'] = ApiClient.convertToType(data['callToAction'], 'String');
            }
            if (data.hasOwnProperty('cover')) {
                obj['cover'] = MediaUsage.constructFromObject(data['cover']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('embargo')) {
                obj['embargo'] = ApiClient.convertToType(data['embargo'], 'Date');
            }
            if (data.hasOwnProperty('ends')) {
                obj['ends'] = ApiClient.convertToType(data['ends'], 'Date');
            }
            if (data.hasOwnProperty('featured')) {
                obj['featured'] = ApiClient.convertToType(data['featured'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mediaRequired')) {
                obj['mediaRequired'] = ApiClient.convertToType(data['mediaRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('moderator')) {
                obj['moderator'] = ApiClient.convertToType(data['moderator'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('open')) {
                obj['open'] = ApiClient.convertToType(data['open'], 'Boolean');
            }
            if (data.hasOwnProperty('receiptMessage')) {
                obj['receiptMessage'] = ApiClient.convertToType(data['receiptMessage'], 'String');
            }
            if (data.hasOwnProperty('starts')) {
                obj['starts'] = ApiClient.convertToType(data['starts'], 'Date');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('urlWords')) {
                obj['urlWords'] = ApiClient.convertToType(data['urlWords'], 'String');
            }
            if (data.hasOwnProperty('webUrl')) {
                obj['webUrl'] = ApiClient.convertToType(data['webUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Assignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Assignment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['callToAction'] && !(typeof data['callToAction'] === 'string' || data['callToAction'] instanceof String)) {
            throw new Error("Expected the field `callToAction` to be a primitive type in the JSON string but got " + data['callToAction']);
        }
        // validate the optional field `cover`
        if (data['cover']) { // data not null
          MediaUsage.validateJSON(data['cover']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['moderator'] && !(typeof data['moderator'] === 'string' || data['moderator'] instanceof String)) {
            throw new Error("Expected the field `moderator` to be a primitive type in the JSON string but got " + data['moderator']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['receiptMessage'] && !(typeof data['receiptMessage'] === 'string' || data['receiptMessage'] instanceof String)) {
            throw new Error("Expected the field `receiptMessage` to be a primitive type in the JSON string but got " + data['receiptMessage']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['urlWords'] && !(typeof data['urlWords'] === 'string' || data['urlWords'] instanceof String)) {
            throw new Error("Expected the field `urlWords` to be a primitive type in the JSON string but got " + data['urlWords']);
        }
        // ensure the json data is a string
        if (data['webUrl'] && !(typeof data['webUrl'] === 'string' || data['webUrl'] instanceof String)) {
            throw new Error("Expected the field `webUrl` to be a primitive type in the JSON string but got " + data['webUrl']);
        }

        return true;
    }


}



/**
 * @member {Boolean} allowsAnonymousContributions
 */
Assignment.prototype['allowsAnonymousContributions'] = undefined;

/**
 * An optional call to action specific to this assignment. ie. Submit your snow pictures.
 * @member {String} callToAction
 */
Assignment.prototype['callToAction'] = undefined;

/**
 * @member {module:model/MediaUsage} cover
 */
Assignment.prototype['cover'] = undefined;

/**
 * @member {Date} created
 */
Assignment.prototype['created'] = undefined;

/**
 * @member {String} description
 */
Assignment.prototype['description'] = undefined;

/**
 * @member {Date} embargo
 */
Assignment.prototype['embargo'] = undefined;

/**
 * @member {Date} ends
 */
Assignment.prototype['ends'] = undefined;

/**
 * @member {Boolean} featured
 */
Assignment.prototype['featured'] = undefined;

/**
 * @member {String} id
 */
Assignment.prototype['id'] = undefined;

/**
 * @member {Boolean} mediaRequired
 */
Assignment.prototype['mediaRequired'] = undefined;

/**
 * Optional credential id of the moderator who owns this particular assignment.
 * @member {String} moderator
 */
Assignment.prototype['moderator'] = undefined;

/**
 * @member {String} name
 */
Assignment.prototype['name'] = undefined;

/**
 * Helper value. Is this assignment currently open? Based on the value of the ends field.
 * @member {Boolean} open
 */
Assignment.prototype['open'] = undefined;

/**
 * An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.
 * @member {String} receiptMessage
 */
Assignment.prototype['receiptMessage'] = undefined;

/**
 * @member {Date} starts
 */
Assignment.prototype['starts'] = undefined;

/**
 * @member {Array.<module:model/Tag>} tags
 */
Assignment.prototype['tags'] = undefined;

/**
 * @member {String} urlWords
 */
Assignment.prototype['urlWords'] = undefined;

/**
 * @member {String} webUrl
 */
Assignment.prototype['webUrl'] = undefined;






export default Assignment;

