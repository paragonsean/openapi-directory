/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FormResponse model module.
 * @module model/FormResponse
 * @version 1.0.0
 */
class FormResponse {
    /**
     * Constructs a new <code>FormResponse</code>.
     * @alias module:model/FormResponse
     */
    constructor() { 
        
        FormResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FormResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormResponse} obj Optional instance to populate.
     * @return {module:model/FormResponse} The populated <code>FormResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormResponse();

            if (data.hasOwnProperty('contribution')) {
                obj['contribution'] = ApiClient.convertToType(data['contribution'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('form')) {
                obj['form'] = ApiClient.convertToType(data['form'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('responses')) {
                obj['responses'] = ApiClient.convertToType(data['responses'], {'String': 'String'});
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FormResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contribution'] && !(typeof data['contribution'] === 'string' || data['contribution'] instanceof String)) {
            throw new Error("Expected the field `contribution` to be a primitive type in the JSON string but got " + data['contribution']);
        }
        // ensure the json data is a string
        if (data['form'] && !(typeof data['form'] === 'string' || data['form'] instanceof String)) {
            throw new Error("Expected the field `form` to be a primitive type in the JSON string but got " + data['form']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}



/**
 * @member {String} contribution
 */
FormResponse.prototype['contribution'] = undefined;

/**
 * @member {Date} date
 */
FormResponse.prototype['date'] = undefined;

/**
 * @member {String} form
 */
FormResponse.prototype['form'] = undefined;

/**
 * @member {String} id
 */
FormResponse.prototype['id'] = undefined;

/**
 * @member {Object.<String, String>} responses
 */
FormResponse.prototype['responses'] = undefined;

/**
 * @member {String} user
 */
FormResponse.prototype['user'] = undefined;






export default FormResponse;

