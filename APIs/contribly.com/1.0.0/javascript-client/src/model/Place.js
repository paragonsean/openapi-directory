/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LatLong from './LatLong';
import OsmId from './OsmId';

/**
 * The Place model module.
 * @module model/Place
 * @version 1.0.0
 */
class Place {
    /**
     * Constructs a new <code>Place</code>.
     * @alias module:model/Place
     */
    constructor() { 
        
        Place.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Place</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Place} obj Optional instance to populate.
     * @return {module:model/Place} The populated <code>Place</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Place();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('geohash')) {
                obj['geohash'] = ApiClient.convertToType(data['geohash'], 'String');
            }
            if (data.hasOwnProperty('google')) {
                obj['google'] = ApiClient.convertToType(data['google'], 'String');
            }
            if (data.hasOwnProperty('latLong')) {
                obj['latLong'] = LatLong.constructFromObject(data['latLong']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('osm')) {
                obj['osm'] = OsmId.constructFromObject(data['osm']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Place</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Place</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['geohash'] && !(typeof data['geohash'] === 'string' || data['geohash'] instanceof String)) {
            throw new Error("Expected the field `geohash` to be a primitive type in the JSON string but got " + data['geohash']);
        }
        // ensure the json data is a string
        if (data['google'] && !(typeof data['google'] === 'string' || data['google'] instanceof String)) {
            throw new Error("Expected the field `google` to be a primitive type in the JSON string but got " + data['google']);
        }
        // validate the optional field `latLong`
        if (data['latLong']) { // data not null
          LatLong.validateJSON(data['latLong']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `osm`
        if (data['osm']) { // data not null
          OsmId.validateJSON(data['osm']);
        }

        return true;
    }


}



/**
 * @member {String} country
 */
Place.prototype['country'] = undefined;

/**
 * @member {String} geohash
 */
Place.prototype['geohash'] = undefined;

/**
 * @member {String} google
 */
Place.prototype['google'] = undefined;

/**
 * @member {module:model/LatLong} latLong
 */
Place.prototype['latLong'] = undefined;

/**
 * @member {String} name
 */
Place.prototype['name'] = undefined;

/**
 * @member {module:model/OsmId} osm
 */
Place.prototype['osm'] = undefined;






export default Place;

