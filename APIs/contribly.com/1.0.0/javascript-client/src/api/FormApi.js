/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Form from '../model/Form';
import FormResponse from '../model/FormResponse';
import FormResponseSubmission from '../model/FormResponseSubmission';
import FormSubmission from '../model/FormSubmission';

/**
* Form service.
* @module api/FormApi
* @version 1.0.0
*/
export default class FormApi {

    /**
    * Constructs a new FormApi. 
    * @alias module:api/FormApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the formResponsesGet operation.
     * @callback module:api/FormApi~formResponsesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FormResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List form responses
     * @param {Object} opts Optional parameters
     * @param {String} [user] Restrict results to responses submitted by this user.
     * @param {String} [form] Restrict results to responses submitted to this form.
     * @param {String} [contribution] Restrict results to responses relating to this contribution.
     * @param {module:api/FormApi~formResponsesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FormResponse>}
     */
    formResponsesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user': opts['user'],
        'form': opts['form'],
        'contribution': opts['contribution']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FormResponse];
      return this.apiClient.callApi(
        '/form-responses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formResponsesIdGet operation.
     * @callback module:api/FormApi~formResponsesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single form response by id
     * @param {String} id Id of the assignment to return
     * @param {module:api/FormApi~formResponsesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormResponse}
     */
    formResponsesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling formResponsesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormResponse;
      return this.apiClient.callApi(
        '/form-responses/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formResponsesPost operation.
     * @callback module:api/FormApi~formResponsesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a response to a form
     * @param {module:model/FormResponseSubmission} formResponseSubmission Form response
     * @param {module:api/FormApi~formResponsesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormResponse}
     */
    formResponsesPost(formResponseSubmission, callback) {
      let postBody = formResponseSubmission;
      // verify the required parameter 'formResponseSubmission' is set
      if (formResponseSubmission === undefined || formResponseSubmission === null) {
        throw new Error("Missing the required parameter 'formResponseSubmission' when calling formResponsesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FormResponse;
      return this.apiClient.callApi(
        '/form-responses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formsGet operation.
     * @callback module:api/FormApi~formsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Form>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List forms
     * @param {String} ownedBy Restrict results to forms owned by this user.
     * @param {module:api/FormApi~formsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Form>}
     */
    formsGet(ownedBy, callback) {
      let postBody = null;
      // verify the required parameter 'ownedBy' is set
      if (ownedBy === undefined || ownedBy === null) {
        throw new Error("Missing the required parameter 'ownedBy' when calling formsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'ownedBy': ownedBy
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Form];
      return this.apiClient.callApi(
        '/forms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formsIdDelete operation.
     * @callback module:api/FormApi~formsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete this form and all of it's responses.
     * @param {String} id Id of the form to delete
     * @param {module:api/FormApi~formsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    formsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling formsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forms/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formsIdGet operation.
     * @callback module:api/FormApi~formsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Form} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single form by id
     * @param {String} id Id of the form to return
     * @param {module:api/FormApi~formsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Form}
     */
    formsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling formsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Form;
      return this.apiClient.callApi(
        '/forms/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formsPost operation.
     * @callback module:api/FormApi~formsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Form} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a form
     * @param {module:model/FormSubmission} formSubmission Form object to be created
     * @param {module:api/FormApi~formsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Form}
     */
    formsPost(formSubmission, callback) {
      let postBody = formSubmission;
      // verify the required parameter 'formSubmission' is set
      if (formSubmission === undefined || formSubmission === null) {
        throw new Error("Missing the required parameter 'formSubmission' when calling formsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Form;
      return this.apiClient.callApi(
        '/forms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
