/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Subscription from '../model/Subscription';
import SubscriptionSubmission from '../model/SubscriptionSubmission';
import SubscriptionType from '../model/SubscriptionType';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version 1.0.0
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionTypesGet operation.
     * @callback module:api/SubscriptionsApi~subscriptionTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscription types
     * List available subscription types
     * @param {module:api/SubscriptionsApi~subscriptionTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubscriptionType>}
     */
    subscriptionTypesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SubscriptionType];
      return this.apiClient.callApi(
        '/subscription-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsGet operation.
     * @callback module:api/SubscriptionsApi~subscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Subscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List subscriptions for the authorised user.
     * @param {module:model/SubscriptionSubmission} subscriptionSubmission Subscription to be created
     * @param {module:api/SubscriptionsApi~subscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Subscription>}
     */
    subscriptionsGet(subscriptionSubmission, callback) {
      let postBody = subscriptionSubmission;
      // verify the required parameter 'subscriptionSubmission' is set
      if (subscriptionSubmission === undefined || subscriptionSubmission === null) {
        throw new Error("Missing the required parameter 'subscriptionSubmission' when calling subscriptionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Subscription];
      return this.apiClient.callApi(
        '/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsIdDelete operation.
     * @callback module:api/SubscriptionsApi~subscriptionsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a subscription.
     * @param {String} id Id of the subscription to delete
     * @param {module:api/SubscriptionsApi~subscriptionsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
