/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Tag from '../model/Tag';
import TagSet from '../model/TagSet';
import TagSetSubmission from '../model/TagSetSubmission';
import TagSubmission from '../model/TagSubmission';

/**
* Tag service.
* @module api/TagApi
* @version 1.0.0
*/
export default class TagApi {

    /**
    * Constructs a new TagApi. 
    * @alias module:api/TagApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tagsGet operation.
     * @callback module:api/TagApi~tagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tags
     * Retrieve tags.
     * @param {Object} opts Optional parameters
     * @param {String} [ownedBy] Restrict results to those owned by this user.
     * @param {String} [tagSet] Restrict results to tags belonging to this tag set.
     * @param {String} [urlWords] Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tags.
     * @param {module:api/TagApi~tagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    tagsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ownedBy': opts['ownedBy'],
        'tagSet': opts['tagSet'],
        'urlWords': opts['urlWords']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tag];
      return this.apiClient.callApi(
        '/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsIdGet operation.
     * @callback module:api/TagApi~tagsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single tag by id
     * @param {String} id Id of the tag to return
     * @param {module:api/TagApi~tagsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    tagsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tagsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/tags/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsPost operation.
     * @callback module:api/TagApi~tagsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new tag
     * @param {module:model/TagSubmission} tagSubmission Tag object to be created
     * @param {module:api/TagApi~tagsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    tagsPost(tagSubmission, callback) {
      let postBody = tagSubmission;
      // verify the required parameter 'tagSubmission' is set
      if (tagSubmission === undefined || tagSubmission === null) {
        throw new Error("Missing the required parameter 'tagSubmission' when calling tagsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsetsGet operation.
     * @callback module:api/TagApi~tagsetsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tag sets
     * Retrieve tag sets.
     * @param {Object} opts Optional parameters
     * @param {String} [ownedBy] Restrict results to those owned by this user.
     * @param {String} [urlWords] Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tag sets.
     * @param {module:api/TagApi~tagsetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagSet>}
     */
    tagsetsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ownedBy': opts['ownedBy'],
        'urlWords': opts['urlWords']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagSet];
      return this.apiClient.callApi(
        '/tagsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsetsIdGet operation.
     * @callback module:api/TagApi~tagsetsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single tag set by id
     * @param {String} id Id of the tag set to return
     * @param {module:api/TagApi~tagsetsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagSet}
     */
    tagsetsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tagsetsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagSet;
      return this.apiClient.callApi(
        '/tagsets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsetsPost operation.
     * @callback module:api/TagApi~tagsetsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new tag set
     * @param {module:model/TagSetSubmission} tagSetSubmission Tag set to be created
     * @param {module:api/TagApi~tagsetsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagSet}
     */
    tagsetsPost(tagSetSubmission, callback) {
      let postBody = tagSetSubmission;
      // verify the required parameter 'tagSetSubmission' is set
      if (tagSetSubmission === undefined || tagSetSubmission === null) {
        throw new Error("Missing the required parameter 'tagSetSubmission' when calling tagsetsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TagSet;
      return this.apiClient.callApi(
        '/tagsets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
