/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LinkedProfile from '../model/LinkedProfile';
import User from '../model/User';

/**
* User service.
* @module api/UserApi
* @version 1.0.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/UserApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users
     * @param {Object} opts Optional parameters
     * @param {String} [assignment] Restrict results to the users who have contributed to this assignment.
     * @param {String} [country] Restrict results to the users who have submitted a contribution with a public location located within this country.
     * @param {Number} [minimumContributions] Restrict results to the users who have submitted at least this many contributions.
     * @param {String} [linkedProfile] Restrict results to the users who a linked profile of this type.
     * @param {String} [ownedBy] Restrict results to the users who are owned by of this owner.
     * @param {Date} [submittedBefore] Limit results to users who have submitted at least one contribution before this date time.
     * @param {Date} [submittedAfter] Limit results to users who have submitted at least one contribution after this date time.
     * @param {String} [username] Restrict results to the user with this username.
     * @param {module:api/UserApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    usersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'assignment': opts['assignment'],
        'country': opts['country'],
        'minimumContributions': opts['minimumContributions'],
        'linkedProfile': opts['linkedProfile'],
        'ownedBy': opts['ownedBy'],
        'submittedBefore': opts['submittedBefore'],
        'submittedAfter': opts['submittedAfter'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdGet operation.
     * @callback module:api/UserApi~usersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single user by id
     * @param {String} id Id of the user to return
     * @param {module:api/UserApi~usersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdLinkedTypeGet operation.
     * @callback module:api/UserApi~usersIdLinkedTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a users linked profile by type
     * @param {String} id Id of the user to return
     * @param {String} type Type of the linked profile to fetch
     * @param {module:api/UserApi~usersIdLinkedTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedProfile}
     */
    usersIdLinkedTypeGet(id, type, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdLinkedTypeGet");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling usersIdLinkedTypeGet");
      }

      let pathParams = {
        'id': id,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkedProfile;
      return this.apiClient.callApi(
        '/users/{id}/linked/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
