/**
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Contribution from '../model/Contribution';
import ErrorResponse from '../model/ErrorResponse';
import Export from '../model/Export';
import ExportSummary from '../model/ExportSummary';
import Flag from '../model/Flag';
import ModerationHistoryItemSubmission from '../model/ModerationHistoryItemSubmission';

/**
* Contribution service.
* @module api/ContributionApi
* @version 1.0.0
*/
export default class ContributionApi {

    /**
    * Constructs a new ContributionApi. 
    * @alias module:api/ContributionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contributionRefinementTypesGet operation.
     * @callback module:api/ContributionApi~contributionRefinementTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List valid contribution refinement types
     * @param {module:api/ContributionApi~contributionRefinementTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    contributionRefinementTypesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/contribution-refinement-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contributionRefinementsGet operation.
     * @callback module:api/ContributionApi~contributionRefinementsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List contribution refinement options
     * Given a contribution list query determine the available filter options. Can be used to generate the UI to refinement a filter.
     * @param {Object} opts Optional parameters
     * @param {String} [assignment] Restrict results to contributions submitted to this assignment.
     * @param {String} [country] Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code).
     * @param {Date} [createdBefore] Limit results to contributions created before this date time.
     * @param {Date} [createdAfter] Limit results to contributions created after this date time.
     * @param {String} [geohash] Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes)
     * @param {Boolean} [hasLocation] Restrict results to contributions which have a publicly visible location.
     * @param {String} [latLong] Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius
     * @param {Number} [radius] When limiting result by location with the latLong parameter, specify the radius in kilometers.
     * @param {String} [mediaType] Restrict results to contributions which include a media file of the given type (ie. image / video)
     * @param {String} [ownedBy] Restrict results to contributions which are fall under the jurisdiction by this user.
     * @param {String} [q] Restrict results to contributions whose headline text matches this keyword.
     * @param {String} [urlWords] Locate a specific contribution by URL words
     * @param {String} [user] Restrict results to contributions by this user identified by id.
     * @param {String} [refinements] Comma seperated list of refinement names.
     * @param {Number} [refinementSize] Number of refinement options to return.
     * @param {module:api/ContributionApi~contributionRefinementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [String]}>}
     */
    contributionRefinementsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'assignment': opts['assignment'],
        'country': opts['country'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'geohash': opts['geohash'],
        'hasLocation': opts['hasLocation'],
        'latLong': opts['latLong'],
        'radius': opts['radius'],
        'mediaType': opts['mediaType'],
        'ownedBy': opts['ownedBy'],
        'q': opts['q'],
        'urlWords': opts['urlWords'],
        'user': opts['user'],
        'refinements': opts['refinements'],
        'refinementSize': opts['refinementSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': ['String']};
      return this.apiClient.callApi(
        '/contribution-refinements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contributionsGet operation.
     * @callback module:api/ContributionApi~contributionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Contribution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List contributions
     * Retrieve contributions.
     * @param {Object} opts Optional parameters
     * @param {String} [assignment] Restrict results to contributions submitted to this assignment.
     * @param {String} [country] Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code).
     * @param {Date} [createdBefore] Limit results to contributions created before this date time.
     * @param {Date} [createdAfter] Limit results to contributions created after this date time.
     * @param {Date} [createdDay] Limit results to contributions created on this day.
     * @param {String} [createdMonth] Limit results to contributions created during this month.
     * @param {String} [geohash] Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes)
     * @param {Boolean} [hasLocation] Restrict results to contributions which have a publicly visible location.
     * @param {String} [latLong] Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius
     * @param {Number} [radius] When limiting result by location with the latLong parameter, specify the radius in kilometers.
     * @param {String} [mediaType] Restrict results to contributions which include a media file of the given type (ie. image / video)
     * @param {String} [ownedBy] Restrict results to contributions which are fall under the jurisdiction by this user.
     * @param {String} [q] Restrict results to contributions whose headline text matches this keyword.
     * @param {String} [urlWords] Locate a specific contribution by URL words
     * @param {String} [user] Restrict results to contributions by this user identified by id.
     * @param {String} [ids] Restrict results to a list of specific contributions identified by a comma seperated list of ids.
     * @param {String} [format] Select output format. 'json' or 'rss'. Defaults to JSON.
     * @param {module:api/ContributionApi~contributionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Contribution>}
     */
    contributionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'assignment': opts['assignment'],
        'country': opts['country'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'createdDay': opts['createdDay'],
        'createdMonth': opts['createdMonth'],
        'geohash': opts['geohash'],
        'hasLocation': opts['hasLocation'],
        'latLong': opts['latLong'],
        'radius': opts['radius'],
        'mediaType': opts['mediaType'],
        'ownedBy': opts['ownedBy'],
        'q': opts['q'],
        'urlWords': opts['urlWords'],
        'user': opts['user'],
        'ids': opts['ids'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Contribution];
      return this.apiClient.callApi(
        '/contributions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contributionsIdDelete operation.
     * @callback module:api/ContributionApi~contributionsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contribution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete this contribution
     * @param {String} id Id of the contribution to delete
     * @param {module:api/ContributionApi~contributionsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contribution}
     */
    contributionsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contributionsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contribution;
      return this.apiClient.callApi(
        '/contributions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contributionsIdFlagPost operation.
     * @callback module:api/ContributionApi~contributionsIdFlagPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Flag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Raise a flag against this contribution
     * Allows end users to bring potential issues with publicly visible content to the attention of moderators.
     * @param {String} id Id of the contribution to flag
     * @param {module:model/Flag} flag Flag to be created
     * @param {module:api/ContributionApi~contributionsIdFlagPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Flag}
     */
    contributionsIdFlagPost(id, flag, callback) {
      let postBody = flag;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contributionsIdFlagPost");
      }
      // verify the required parameter 'flag' is set
      if (flag === undefined || flag === null) {
        throw new Error("Missing the required parameter 'flag' when calling contributionsIdFlagPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Flag;
      return this.apiClient.callApi(
        '/contributions/{id}/flag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contributionsIdGet operation.
     * @callback module:api/ContributionApi~contributionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contribution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single contribution by id
     * @param {String} id Id of the contribution to return
     * @param {module:api/ContributionApi~contributionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contribution}
     */
    contributionsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contributionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contribution;
      return this.apiClient.callApi(
        '/contributions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contributionsIdLikePost operation.
     * @callback module:api/ContributionApi~contributionsIdLikePostCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows a user to mark a contribution as liked
     * @param {String} id Id of the contribution
     * @param {module:api/ContributionApi~contributionsIdLikePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    contributionsIdLikePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contributionsIdLikePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/contributions/{id}/like', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contributionsIdLikesGet operation.
     * @callback module:api/ContributionApi~contributionsIdLikesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users who have liked this contributions
     * Returns a list of user ids of users who have liked this conribution
     * @param {String} id Id of the contribution
     * @param {module:api/ContributionApi~contributionsIdLikesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    contributionsIdLikesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contributionsIdLikesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/contributions/{id}/likes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contributionsIdModeratePost operation.
     * @callback module:api/ContributionApi~contributionsIdModeratePostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a moderation action on this contribution
     * Allows the contribution to approved of rejected.
     * @param {String} id Id of the contribution to moderate
     * @param {module:model/ModerationHistoryItemSubmission} moderationHistoryItemSubmission A moderation action
     * @param {module:api/ContributionApi~contributionsIdModeratePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    contributionsIdModeratePost(id, moderationHistoryItemSubmission, callback) {
      let postBody = moderationHistoryItemSubmission;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contributionsIdModeratePost");
      }
      // verify the required parameter 'moderationHistoryItemSubmission' is set
      if (moderationHistoryItemSubmission === undefined || moderationHistoryItemSubmission === null) {
        throw new Error("Missing the required parameter 'moderationHistoryItemSubmission' when calling contributionsIdModeratePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/contributions/{id}/moderate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contributionsPost operation.
     * @callback module:api/ContributionApi~contributionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contribution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new contribution
     * @param {module:model/Contribution} contribution Contribution object to be created
     * @param {module:api/ContributionApi~contributionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contribution}
     */
    contributionsPost(contribution, callback) {
      let postBody = contribution;
      // verify the required parameter 'contribution' is set
      if (contribution === undefined || contribution === null) {
        throw new Error("Missing the required parameter 'contribution' when calling contributionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contribution;
      return this.apiClient.callApi(
        '/contributions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPost operation.
     * @callback module:api/ContributionApi~exportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Export} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export contributions.
     * Begin an export job. Returns a export job which can be polled to follow the progress of an export.
     * @param {Object} opts Optional parameters
     * @param {String} [assignment] Restrict results to contributions submitted to this assignment.
     * @param {String} [country] Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code).
     * @param {Date} [createdBefore] Limit results to contributions created before this date time.
     * @param {Date} [createdAfter] Limit results to contributions created after this date time.
     * @param {String} [geohash] Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes)
     * @param {Boolean} [hasLocation] Restrict results to contributions which have a publicly visible location.
     * @param {String} [latLong] Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius
     * @param {Number} [radius] When limiting result by location with the latLong parameter, specify the radius in kilometers.
     * @param {String} [mediaType] Restrict results to contributions which include a media file of the given type (ie. image / video)
     * @param {String} [ownedBy] Restrict results to contributions which are fall under the jurisdiction by this user.
     * @param {String} [q] Restrict results to contributions whose headline text matches this keyword.
     * @param {String} [urlWords] Locate a specific contribution by URL words
     * @param {String} [user] Restrict results to contributions by this user identified by id.
     * @param {Boolean} [tagged] Should exported media files be tagged with metadata. Deprecated; use format instead.
     * @param {Boolean} [combined] Included a combined file with all contribution text.
     * @param {Boolean} [individual] Include individual text files for each contribution.
     * @param {String} [format] Media format to export; none, fullsize, tagged or original.
     * @param {Boolean} [json] Include raw JSON for each contribution.
     * @param {module:api/ContributionApi~exportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Export}
     */
    exportPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'assignment': opts['assignment'],
        'country': opts['country'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'geohash': opts['geohash'],
        'hasLocation': opts['hasLocation'],
        'latLong': opts['latLong'],
        'radius': opts['radius'],
        'mediaType': opts['mediaType'],
        'ownedBy': opts['ownedBy'],
        'q': opts['q'],
        'urlWords': opts['urlWords'],
        'user': opts['user'],
        'tagged': opts['tagged'],
        'combined': opts['combined'],
        'individual': opts['individual'],
        'format': opts['format'],
        'json': opts['json']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Export;
      return this.apiClient.callApi(
        '/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportSummaryPost operation.
     * @callback module:api/ContributionApi~exportSummaryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export contributions preflight summary.
     * Provide a preflight summary of an export request.
     * @param {Object} opts Optional parameters
     * @param {String} [assignment] Restrict results to contributions submitted to this assignment.
     * @param {String} [country] Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code).
     * @param {Date} [createdBefore] Limit results to contributions created before this date time.
     * @param {Date} [createdAfter] Limit results to contributions created after this date time.
     * @param {String} [geohash] Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes)
     * @param {Boolean} [hasLocation] Restrict results to contributions which have a publicly visible location.
     * @param {String} [latLong] Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius
     * @param {Number} [radius] When limiting result by location with the latLong parameter, specify the radius in kilometers.
     * @param {String} [mediaType] Restrict results to contributions which include a media file of the given type (ie. image / video)
     * @param {String} [ownedBy] Restrict results to contributions which are fall under the jurisdiction by this user.
     * @param {String} [q] Restrict results to contributions whose headline text matches this keyword.
     * @param {String} [urlWords] Locate a specific contribution by URL words
     * @param {String} [user] Restrict results to contributions by this user identified by id.
     * @param {module:api/ContributionApi~exportSummaryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportSummary}
     */
    exportSummaryPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'assignment': opts['assignment'],
        'country': opts['country'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'geohash': opts['geohash'],
        'hasLocation': opts['hasLocation'],
        'latLong': opts['latLong'],
        'radius': opts['radius'],
        'mediaType': opts['mediaType'],
        'ownedBy': opts['ownedBy'],
        'q': opts['q'],
        'urlWords': opts['urlWords'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportSummary;
      return this.apiClient.callApi(
        '/export-summary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportsIdGet operation.
     * @callback module:api/ContributionApi~exportsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Export} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single export job; poll to follow export progress.
     * @param {String} id Id of the export job to return
     * @param {module:api/ContributionApi~exportsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Export}
     */
    exportsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Export;
      return this.apiClient.callApi(
        '/exports/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
