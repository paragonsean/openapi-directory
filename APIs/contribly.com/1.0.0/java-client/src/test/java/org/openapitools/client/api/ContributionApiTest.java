/*
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Contribution;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Export;
import org.openapitools.client.model.ExportSummary;
import org.openapitools.client.model.Flag;
import java.time.LocalDate;
import org.openapitools.client.model.ModerationHistoryItemSubmission;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContributionApi
 */
@Disabled
public class ContributionApiTest {

    private final ContributionApi api = new ContributionApi();

    /**
     * List valid contribution refinement types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contributionRefinementTypesGetTest() throws ApiException {
        List<String> response = api.contributionRefinementTypesGet();
        // TODO: test validations
    }

    /**
     * List contribution refinement options
     *
     * Given a contribution list query determine the available filter options. Can be used to generate the UI to refinement a filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contributionRefinementsGetTest() throws ApiException {
        String assignment = null;
        String country = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String geohash = null;
        Boolean hasLocation = null;
        String latLong = null;
        Double radius = null;
        String mediaType = null;
        String ownedBy = null;
        String q = null;
        String urlWords = null;
        String user = null;
        String refinements = null;
        BigDecimal refinementSize = null;
        Map<String, List<String>> response = api.contributionRefinementsGet(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, refinements, refinementSize);
        // TODO: test validations
    }

    /**
     * List contributions
     *
     * Retrieve contributions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contributionsGetTest() throws ApiException {
        String assignment = null;
        String country = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        LocalDate createdDay = null;
        String createdMonth = null;
        String geohash = null;
        Boolean hasLocation = null;
        String latLong = null;
        Double radius = null;
        String mediaType = null;
        String ownedBy = null;
        String q = null;
        String urlWords = null;
        String user = null;
        String ids = null;
        String format = null;
        List<Contribution> response = api.contributionsGet(assignment, country, createdBefore, createdAfter, createdDay, createdMonth, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, ids, format);
        // TODO: test validations
    }

    /**
     * Delete this contribution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contributionsIdDeleteTest() throws ApiException {
        String id = null;
        Contribution response = api.contributionsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Raise a flag against this contribution
     *
     * Allows end users to bring potential issues with publicly visible content to the attention of moderators.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contributionsIdFlagPostTest() throws ApiException {
        String id = null;
        Flag flag = null;
        Flag response = api.contributionsIdFlagPost(id, flag);
        // TODO: test validations
    }

    /**
     * Get a single contribution by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contributionsIdGetTest() throws ApiException {
        String id = null;
        Contribution response = api.contributionsIdGet(id);
        // TODO: test validations
    }

    /**
     * Allows a user to mark a contribution as liked
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contributionsIdLikePostTest() throws ApiException {
        String id = null;
        BigDecimal response = api.contributionsIdLikePost(id);
        // TODO: test validations
    }

    /**
     * List users who have liked this contributions
     *
     * Returns a list of user ids of users who have liked this conribution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contributionsIdLikesGetTest() throws ApiException {
        String id = null;
        List<String> response = api.contributionsIdLikesGet(id);
        // TODO: test validations
    }

    /**
     * Perform a moderation action on this contribution
     *
     * Allows the contribution to approved of rejected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contributionsIdModeratePostTest() throws ApiException {
        String id = null;
        ModerationHistoryItemSubmission moderationHistoryItemSubmission = null;
        String response = api.contributionsIdModeratePost(id, moderationHistoryItemSubmission);
        // TODO: test validations
    }

    /**
     * Create a new contribution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contributionsPostTest() throws ApiException {
        Contribution contribution = null;
        Contribution response = api.contributionsPost(contribution);
        // TODO: test validations
    }

    /**
     * Export contributions.
     *
     * Begin an export job. Returns a export job which can be polled to follow the progress of an export.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportPostTest() throws ApiException {
        String assignment = null;
        String country = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String geohash = null;
        Boolean hasLocation = null;
        String latLong = null;
        Double radius = null;
        String mediaType = null;
        String ownedBy = null;
        String q = null;
        String urlWords = null;
        String user = null;
        Boolean tagged = null;
        Boolean combined = null;
        Boolean individual = null;
        String format = null;
        Boolean json = null;
        Export response = api.exportPost(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, tagged, combined, individual, format, json);
        // TODO: test validations
    }

    /**
     * Export contributions preflight summary.
     *
     * Provide a preflight summary of an export request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSummaryPostTest() throws ApiException {
        String assignment = null;
        String country = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String geohash = null;
        Boolean hasLocation = null;
        String latLong = null;
        Double radius = null;
        String mediaType = null;
        String ownedBy = null;
        String q = null;
        String urlWords = null;
        String user = null;
        ExportSummary response = api.exportSummaryPost(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user);
        // TODO: test validations
    }

    /**
     * Get a single export job; poll to follow export progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportsIdGetTest() throws ApiException {
        String id = null;
        Export response = api.exportsIdGet(id);
        // TODO: test validations
    }

}
