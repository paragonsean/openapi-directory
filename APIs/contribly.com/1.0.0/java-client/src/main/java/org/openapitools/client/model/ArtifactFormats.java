/*
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArtifactFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArtifactFormats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:26.140477-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArtifactFormats {
  public static final String SERIALIZED_NAME_CONTRIBUTION = "contribution";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTION)
  private List<ArtifactFormat> contribution = new ArrayList<>();

  public static final String SERIALIZED_NAME_COVER = "cover";
  @SerializedName(SERIALIZED_NAME_COVER)
  private List<ArtifactFormat> cover = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILE_IMAGE = "profileImage";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE)
  private List<ArtifactFormat> profileImage = new ArrayList<>();

  public ArtifactFormats() {
  }

  public ArtifactFormats contribution(List<ArtifactFormat> contribution) {
    this.contribution = contribution;
    return this;
  }

  public ArtifactFormats addContributionItem(ArtifactFormat contributionItem) {
    if (this.contribution == null) {
      this.contribution = new ArrayList<>();
    }
    this.contribution.add(contributionItem);
    return this;
  }

  /**
   * Get contribution
   * @return contribution
   */
  @javax.annotation.Nullable
  public List<ArtifactFormat> getContribution() {
    return contribution;
  }

  public void setContribution(List<ArtifactFormat> contribution) {
    this.contribution = contribution;
  }


  public ArtifactFormats cover(List<ArtifactFormat> cover) {
    this.cover = cover;
    return this;
  }

  public ArtifactFormats addCoverItem(ArtifactFormat coverItem) {
    if (this.cover == null) {
      this.cover = new ArrayList<>();
    }
    this.cover.add(coverItem);
    return this;
  }

  /**
   * Get cover
   * @return cover
   */
  @javax.annotation.Nullable
  public List<ArtifactFormat> getCover() {
    return cover;
  }

  public void setCover(List<ArtifactFormat> cover) {
    this.cover = cover;
  }


  public ArtifactFormats profileImage(List<ArtifactFormat> profileImage) {
    this.profileImage = profileImage;
    return this;
  }

  public ArtifactFormats addProfileImageItem(ArtifactFormat profileImageItem) {
    if (this.profileImage == null) {
      this.profileImage = new ArrayList<>();
    }
    this.profileImage.add(profileImageItem);
    return this;
  }

  /**
   * Get profileImage
   * @return profileImage
   */
  @javax.annotation.Nullable
  public List<ArtifactFormat> getProfileImage() {
    return profileImage;
  }

  public void setProfileImage(List<ArtifactFormat> profileImage) {
    this.profileImage = profileImage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtifactFormats artifactFormats = (ArtifactFormats) o;
    return Objects.equals(this.contribution, artifactFormats.contribution) &&
        Objects.equals(this.cover, artifactFormats.cover) &&
        Objects.equals(this.profileImage, artifactFormats.profileImage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contribution, cover, profileImage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtifactFormats {\n");
    sb.append("    contribution: ").append(toIndentedString(contribution)).append("\n");
    sb.append("    cover: ").append(toIndentedString(cover)).append("\n");
    sb.append("    profileImage: ").append(toIndentedString(profileImage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contribution");
    openapiFields.add("cover");
    openapiFields.add("profileImage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArtifactFormats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArtifactFormats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtifactFormats is not found in the empty JSON string", ArtifactFormats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArtifactFormats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtifactFormats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("contribution") != null && !jsonObj.get("contribution").isJsonNull()) {
        JsonArray jsonArraycontribution = jsonObj.getAsJsonArray("contribution");
        if (jsonArraycontribution != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contribution").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contribution` to be an array in the JSON string but got `%s`", jsonObj.get("contribution").toString()));
          }

          // validate the optional field `contribution` (array)
          for (int i = 0; i < jsonArraycontribution.size(); i++) {
            ArtifactFormat.validateJsonElement(jsonArraycontribution.get(i));
          };
        }
      }
      if (jsonObj.get("cover") != null && !jsonObj.get("cover").isJsonNull()) {
        JsonArray jsonArraycover = jsonObj.getAsJsonArray("cover");
        if (jsonArraycover != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cover").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cover` to be an array in the JSON string but got `%s`", jsonObj.get("cover").toString()));
          }

          // validate the optional field `cover` (array)
          for (int i = 0; i < jsonArraycover.size(); i++) {
            ArtifactFormat.validateJsonElement(jsonArraycover.get(i));
          };
        }
      }
      if (jsonObj.get("profileImage") != null && !jsonObj.get("profileImage").isJsonNull()) {
        JsonArray jsonArrayprofileImage = jsonObj.getAsJsonArray("profileImage");
        if (jsonArrayprofileImage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("profileImage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `profileImage` to be an array in the JSON string but got `%s`", jsonObj.get("profileImage").toString()));
          }

          // validate the optional field `profileImage` (array)
          for (int i = 0; i < jsonArrayprofileImage.size(); i++) {
            ArtifactFormat.validateJsonElement(jsonArrayprofileImage.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtifactFormats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtifactFormats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtifactFormats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtifactFormats.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtifactFormats>() {
           @Override
           public void write(JsonWriter out, ArtifactFormats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtifactFormats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArtifactFormats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArtifactFormats
   * @throws IOException if the JSON string is invalid with respect to ArtifactFormats
   */
  public static ArtifactFormats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtifactFormats.class);
  }

  /**
   * Convert an instance of ArtifactFormats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

