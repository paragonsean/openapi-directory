/*
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TagSet;
import org.openapitools.client.model.TagSetSubmission;
import org.openapitools.client.model.TagSubmission;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TagApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TagApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TagApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tagsGet
     * @param ownedBy Restrict results to those owned by this user. (optional)
     * @param tagSet Restrict results to tags belonging to this tag set. (optional)
     * @param urlWords Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tags. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tags </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public okhttp3.Call tagsGetCall(String ownedBy, String tagSet, String urlWords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ownedBy", ownedBy));
        }

        if (tagSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagSet", tagSet));
        }

        if (urlWords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlWords", urlWords));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsGetValidateBeforeCall(String ownedBy, String tagSet, String urlWords, final ApiCallback _callback) throws ApiException {
        return tagsGetCall(ownedBy, tagSet, urlWords, _callback);

    }

    /**
     * List tags
     * Retrieve tags.
     * @param ownedBy Restrict results to those owned by this user. (optional)
     * @param tagSet Restrict results to tags belonging to this tag set. (optional)
     * @param urlWords Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tags. (optional)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tags </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public List<Tag> tagsGet(String ownedBy, String tagSet, String urlWords) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = tagsGetWithHttpInfo(ownedBy, tagSet, urlWords);
        return localVarResp.getData();
    }

    /**
     * List tags
     * Retrieve tags.
     * @param ownedBy Restrict results to those owned by this user. (optional)
     * @param tagSet Restrict results to tags belonging to this tag set. (optional)
     * @param urlWords Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tags. (optional)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tags </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> tagsGetWithHttpInfo(String ownedBy, String tagSet, String urlWords) throws ApiException {
        okhttp3.Call localVarCall = tagsGetValidateBeforeCall(ownedBy, tagSet, urlWords, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List tags (asynchronously)
     * Retrieve tags.
     * @param ownedBy Restrict results to those owned by this user. (optional)
     * @param tagSet Restrict results to tags belonging to this tag set. (optional)
     * @param urlWords Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tags. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tags </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public okhttp3.Call tagsGetAsync(String ownedBy, String tagSet, String urlWords, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsGetValidateBeforeCall(ownedBy, tagSet, urlWords, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsIdGet
     * @param id Id of the tag to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tagsIdGet(Async)");
        }

        return tagsIdGetCall(id, _callback);

    }

    /**
     * Retrieve a single tag by id
     * 
     * @param id Id of the tag to return (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Tag tagsIdGet(String id) throws ApiException {
        ApiResponse<Tag> localVarResp = tagsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single tag by id
     * 
     * @param id Id of the tag to return (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> tagsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = tagsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single tag by id (asynchronously)
     * 
     * @param id Id of the tag to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsIdGetAsync(String id, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsPost
     * @param tagSubmission Tag object to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new tag submission failed to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create the new tag due to an unexcepted error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsPostCall(TagSubmission tagSubmission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagSubmission;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsPostValidateBeforeCall(TagSubmission tagSubmission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagSubmission' is set
        if (tagSubmission == null) {
            throw new ApiException("Missing the required parameter 'tagSubmission' when calling tagsPost(Async)");
        }

        return tagsPostCall(tagSubmission, _callback);

    }

    /**
     * Create a new tag
     * 
     * @param tagSubmission Tag object to be created (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new tag submission failed to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create the new tag due to an unexcepted error. </td><td>  -  </td></tr>
     </table>
     */
    public Tag tagsPost(TagSubmission tagSubmission) throws ApiException {
        ApiResponse<Tag> localVarResp = tagsPostWithHttpInfo(tagSubmission);
        return localVarResp.getData();
    }

    /**
     * Create a new tag
     * 
     * @param tagSubmission Tag object to be created (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new tag submission failed to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create the new tag due to an unexcepted error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> tagsPostWithHttpInfo(TagSubmission tagSubmission) throws ApiException {
        okhttp3.Call localVarCall = tagsPostValidateBeforeCall(tagSubmission, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new tag (asynchronously)
     * 
     * @param tagSubmission Tag object to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new tag submission failed to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create the new tag due to an unexcepted error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsPostAsync(TagSubmission tagSubmission, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsPostValidateBeforeCall(tagSubmission, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsetsGet
     * @param ownedBy Restrict results to those owned by this user. (optional)
     * @param urlWords Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tag sets. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tag sets </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public okhttp3.Call tagsetsGetCall(String ownedBy, String urlWords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tagsets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ownedBy", ownedBy));
        }

        if (urlWords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlWords", urlWords));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsetsGetValidateBeforeCall(String ownedBy, String urlWords, final ApiCallback _callback) throws ApiException {
        return tagsetsGetCall(ownedBy, urlWords, _callback);

    }

    /**
     * List tag sets
     * Retrieve tag sets.
     * @param ownedBy Restrict results to those owned by this user. (optional)
     * @param urlWords Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tag sets. (optional)
     * @return List&lt;TagSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tag sets </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public List<TagSet> tagsetsGet(String ownedBy, String urlWords) throws ApiException {
        ApiResponse<List<TagSet>> localVarResp = tagsetsGetWithHttpInfo(ownedBy, urlWords);
        return localVarResp.getData();
    }

    /**
     * List tag sets
     * Retrieve tag sets.
     * @param ownedBy Restrict results to those owned by this user. (optional)
     * @param urlWords Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tag sets. (optional)
     * @return ApiResponse&lt;List&lt;TagSet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tag sets </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<TagSet>> tagsetsGetWithHttpInfo(String ownedBy, String urlWords) throws ApiException {
        okhttp3.Call localVarCall = tagsetsGetValidateBeforeCall(ownedBy, urlWords, null);
        Type localVarReturnType = new TypeToken<List<TagSet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List tag sets (asynchronously)
     * Retrieve tag sets.
     * @param ownedBy Restrict results to those owned by this user. (optional)
     * @param urlWords Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tag sets. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tag sets </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public okhttp3.Call tagsetsGetAsync(String ownedBy, String urlWords, final ApiCallback<List<TagSet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsetsGetValidateBeforeCall(ownedBy, urlWords, _callback);
        Type localVarReturnType = new TypeToken<List<TagSet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsetsIdGet
     * @param id Id of the tag set to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag set </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsetsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tagsets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsetsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tagsetsIdGet(Async)");
        }

        return tagsetsIdGetCall(id, _callback);

    }

    /**
     * Retrieve a single tag set by id
     * 
     * @param id Id of the tag set to return (required)
     * @return TagSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag set </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public TagSet tagsetsIdGet(String id) throws ApiException {
        ApiResponse<TagSet> localVarResp = tagsetsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single tag set by id
     * 
     * @param id Id of the tag set to return (required)
     * @return ApiResponse&lt;TagSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag set </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagSet> tagsetsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = tagsetsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TagSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single tag set by id (asynchronously)
     * 
     * @param id Id of the tag set to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag set </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsetsIdGetAsync(String id, final ApiCallback<TagSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsetsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TagSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsetsPost
     * @param tagSetSubmission Tag set to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tagset created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsetsPostCall(TagSetSubmission tagSetSubmission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagSetSubmission;

        // create path and map variables
        String localVarPath = "/tagsets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsetsPostValidateBeforeCall(TagSetSubmission tagSetSubmission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagSetSubmission' is set
        if (tagSetSubmission == null) {
            throw new ApiException("Missing the required parameter 'tagSetSubmission' when calling tagsetsPost(Async)");
        }

        return tagsetsPostCall(tagSetSubmission, _callback);

    }

    /**
     * Create a new tag set
     * 
     * @param tagSetSubmission Tag set to be created (required)
     * @return TagSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tagset created </td><td>  -  </td></tr>
     </table>
     */
    public TagSet tagsetsPost(TagSetSubmission tagSetSubmission) throws ApiException {
        ApiResponse<TagSet> localVarResp = tagsetsPostWithHttpInfo(tagSetSubmission);
        return localVarResp.getData();
    }

    /**
     * Create a new tag set
     * 
     * @param tagSetSubmission Tag set to be created (required)
     * @return ApiResponse&lt;TagSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tagset created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagSet> tagsetsPostWithHttpInfo(TagSetSubmission tagSetSubmission) throws ApiException {
        okhttp3.Call localVarCall = tagsetsPostValidateBeforeCall(tagSetSubmission, null);
        Type localVarReturnType = new TypeToken<TagSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new tag set (asynchronously)
     * 
     * @param tagSetSubmission Tag set to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tagset created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsetsPostAsync(TagSetSubmission tagSetSubmission, final ApiCallback<TagSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsetsPostValidateBeforeCall(tagSetSubmission, _callback);
        Type localVarReturnType = new TypeToken<TagSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
