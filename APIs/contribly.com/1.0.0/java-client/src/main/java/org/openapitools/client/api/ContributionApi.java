/*
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Contribution;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Export;
import org.openapitools.client.model.ExportSummary;
import org.openapitools.client.model.Flag;
import java.time.LocalDate;
import org.openapitools.client.model.ModerationHistoryItemSubmission;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContributionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContributionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContributionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for contributionRefinementTypesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of refinement types. These are the possible values of the get contribution refinements parameter. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionRefinementTypesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contribution-refinement-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contributionRefinementTypesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return contributionRefinementTypesGetCall(_callback);

    }

    /**
     * List valid contribution refinement types
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of refinement types. These are the possible values of the get contribution refinements parameter. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> contributionRefinementTypesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = contributionRefinementTypesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List valid contribution refinement types
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of refinement types. These are the possible values of the get contribution refinements parameter. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> contributionRefinementTypesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = contributionRefinementTypesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List valid contribution refinement types (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of refinement types. These are the possible values of the get contribution refinements parameter. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionRefinementTypesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contributionRefinementTypesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contributionRefinementsGet
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param refinements Comma seperated list of refinement names. (optional)
     * @param refinementSize Number of refinement options to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A map of refinement names to lists of options </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionRefinementsGetCall(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, String refinements, BigDecimal refinementSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contribution-refinements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assignment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignment", assignment));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (geohash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geohash", geohash));
        }

        if (hasLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasLocation", hasLocation));
        }

        if (latLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latLong", latLong));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (mediaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mediaType", mediaType));
        }

        if (ownedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ownedBy", ownedBy));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (urlWords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlWords", urlWords));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (refinements != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refinements", refinements));
        }

        if (refinementSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refinementSize", refinementSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contributionRefinementsGetValidateBeforeCall(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, String refinements, BigDecimal refinementSize, final ApiCallback _callback) throws ApiException {
        return contributionRefinementsGetCall(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, refinements, refinementSize, _callback);

    }

    /**
     * List contribution refinement options
     * Given a contribution list query determine the available filter options. Can be used to generate the UI to refinement a filter.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param refinements Comma seperated list of refinement names. (optional)
     * @param refinementSize Number of refinement options to return. (optional)
     * @return Map&lt;String, List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A map of refinement names to lists of options </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<String>> contributionRefinementsGet(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, String refinements, BigDecimal refinementSize) throws ApiException {
        ApiResponse<Map<String, List<String>>> localVarResp = contributionRefinementsGetWithHttpInfo(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, refinements, refinementSize);
        return localVarResp.getData();
    }

    /**
     * List contribution refinement options
     * Given a contribution list query determine the available filter options. Can be used to generate the UI to refinement a filter.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param refinements Comma seperated list of refinement names. (optional)
     * @param refinementSize Number of refinement options to return. (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A map of refinement names to lists of options </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<String>>> contributionRefinementsGetWithHttpInfo(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, String refinements, BigDecimal refinementSize) throws ApiException {
        okhttp3.Call localVarCall = contributionRefinementsGetValidateBeforeCall(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, refinements, refinementSize, null);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List contribution refinement options (asynchronously)
     * Given a contribution list query determine the available filter options. Can be used to generate the UI to refinement a filter.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param refinements Comma seperated list of refinement names. (optional)
     * @param refinementSize Number of refinement options to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A map of refinement names to lists of options </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionRefinementsGetAsync(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, String refinements, BigDecimal refinementSize, final ApiCallback<Map<String, List<String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contributionRefinementsGetValidateBeforeCall(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, refinements, refinementSize, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contributionsGet
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param createdDay Limit results to contributions created on this day. (optional)
     * @param createdMonth Limit results to contributions created during this month. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param ids Restrict results to a list of specific contributions identified by a comma seperated list of ids. (optional)
     * @param format Select output format. &#39;json&#39; or &#39;rss&#39;. Defaults to JSON. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of contributions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsGetCall(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, LocalDate createdDay, String createdMonth, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, String ids, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contributions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assignment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignment", assignment));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDay", createdDay));
        }

        if (createdMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdMonth", createdMonth));
        }

        if (geohash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geohash", geohash));
        }

        if (hasLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasLocation", hasLocation));
        }

        if (latLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latLong", latLong));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (mediaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mediaType", mediaType));
        }

        if (ownedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ownedBy", ownedBy));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (urlWords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlWords", urlWords));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contributionsGetValidateBeforeCall(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, LocalDate createdDay, String createdMonth, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, String ids, String format, final ApiCallback _callback) throws ApiException {
        return contributionsGetCall(assignment, country, createdBefore, createdAfter, createdDay, createdMonth, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, ids, format, _callback);

    }

    /**
     * List contributions
     * Retrieve contributions.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param createdDay Limit results to contributions created on this day. (optional)
     * @param createdMonth Limit results to contributions created during this month. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param ids Restrict results to a list of specific contributions identified by a comma seperated list of ids. (optional)
     * @param format Select output format. &#39;json&#39; or &#39;rss&#39;. Defaults to JSON. (optional)
     * @return List&lt;Contribution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of contributions </td><td>  -  </td></tr>
     </table>
     */
    public List<Contribution> contributionsGet(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, LocalDate createdDay, String createdMonth, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, String ids, String format) throws ApiException {
        ApiResponse<List<Contribution>> localVarResp = contributionsGetWithHttpInfo(assignment, country, createdBefore, createdAfter, createdDay, createdMonth, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, ids, format);
        return localVarResp.getData();
    }

    /**
     * List contributions
     * Retrieve contributions.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param createdDay Limit results to contributions created on this day. (optional)
     * @param createdMonth Limit results to contributions created during this month. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param ids Restrict results to a list of specific contributions identified by a comma seperated list of ids. (optional)
     * @param format Select output format. &#39;json&#39; or &#39;rss&#39;. Defaults to JSON. (optional)
     * @return ApiResponse&lt;List&lt;Contribution&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of contributions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Contribution>> contributionsGetWithHttpInfo(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, LocalDate createdDay, String createdMonth, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, String ids, String format) throws ApiException {
        okhttp3.Call localVarCall = contributionsGetValidateBeforeCall(assignment, country, createdBefore, createdAfter, createdDay, createdMonth, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, ids, format, null);
        Type localVarReturnType = new TypeToken<List<Contribution>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List contributions (asynchronously)
     * Retrieve contributions.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param createdDay Limit results to contributions created on this day. (optional)
     * @param createdMonth Limit results to contributions created during this month. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param ids Restrict results to a list of specific contributions identified by a comma seperated list of ids. (optional)
     * @param format Select output format. &#39;json&#39; or &#39;rss&#39;. Defaults to JSON. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of contributions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsGetAsync(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, LocalDate createdDay, String createdMonth, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, String ids, String format, final ApiCallback<List<Contribution>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contributionsGetValidateBeforeCall(assignment, country, createdBefore, createdAfter, createdDay, createdMonth, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, ids, format, _callback);
        Type localVarReturnType = new TypeToken<List<Contribution>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contributionsIdDelete
     * @param id Id of the contribution to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deletion request has been accepted and will be processed in the background. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The currently authorised user is not allowed to delete this contribution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contributions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contributionsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contributionsIdDelete(Async)");
        }

        return contributionsIdDeleteCall(id, _callback);

    }

    /**
     * Delete this contribution
     * 
     * @param id Id of the contribution to delete (required)
     * @return Contribution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deletion request has been accepted and will be processed in the background. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The currently authorised user is not allowed to delete this contribution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Contribution contributionsIdDelete(String id) throws ApiException {
        ApiResponse<Contribution> localVarResp = contributionsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete this contribution
     * 
     * @param id Id of the contribution to delete (required)
     * @return ApiResponse&lt;Contribution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deletion request has been accepted and will be processed in the background. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The currently authorised user is not allowed to delete this contribution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contribution> contributionsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = contributionsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Contribution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete this contribution (asynchronously)
     * 
     * @param id Id of the contribution to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deletion request has been accepted and will be processed in the background. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The currently authorised user is not allowed to delete this contribution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdDeleteAsync(String id, final ApiCallback<Contribution> _callback) throws ApiException {

        okhttp3.Call localVarCall = contributionsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Contribution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contributionsIdFlagPost
     * @param id Id of the contribution to flag (required)
     * @param flag Flag to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flag created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdFlagPostCall(String id, Flag flag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = flag;

        // create path and map variables
        String localVarPath = "/contributions/{id}/flag"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contributionsIdFlagPostValidateBeforeCall(String id, Flag flag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contributionsIdFlagPost(Async)");
        }

        // verify the required parameter 'flag' is set
        if (flag == null) {
            throw new ApiException("Missing the required parameter 'flag' when calling contributionsIdFlagPost(Async)");
        }

        return contributionsIdFlagPostCall(id, flag, _callback);

    }

    /**
     * Raise a flag against this contribution
     * Allows end users to bring potential issues with publicly visible content to the attention of moderators.
     * @param id Id of the contribution to flag (required)
     * @param flag Flag to be created (required)
     * @return Flag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flag created </td><td>  -  </td></tr>
     </table>
     */
    public Flag contributionsIdFlagPost(String id, Flag flag) throws ApiException {
        ApiResponse<Flag> localVarResp = contributionsIdFlagPostWithHttpInfo(id, flag);
        return localVarResp.getData();
    }

    /**
     * Raise a flag against this contribution
     * Allows end users to bring potential issues with publicly visible content to the attention of moderators.
     * @param id Id of the contribution to flag (required)
     * @param flag Flag to be created (required)
     * @return ApiResponse&lt;Flag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flag created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Flag> contributionsIdFlagPostWithHttpInfo(String id, Flag flag) throws ApiException {
        okhttp3.Call localVarCall = contributionsIdFlagPostValidateBeforeCall(id, flag, null);
        Type localVarReturnType = new TypeToken<Flag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Raise a flag against this contribution (asynchronously)
     * Allows end users to bring potential issues with publicly visible content to the attention of moderators.
     * @param id Id of the contribution to flag (required)
     * @param flag Flag to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flag created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdFlagPostAsync(String id, Flag flag, final ApiCallback<Flag> _callback) throws ApiException {

        okhttp3.Call localVarCall = contributionsIdFlagPostValidateBeforeCall(id, flag, _callback);
        Type localVarReturnType = new TypeToken<Flag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contributionsIdGet
     * @param id Id of the contribution to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contributions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contributionsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contributionsIdGet(Async)");
        }

        return contributionsIdGetCall(id, _callback);

    }

    /**
     * Get a single contribution by id
     * 
     * @param id Id of the contribution to return (required)
     * @return Contribution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Contribution contributionsIdGet(String id) throws ApiException {
        ApiResponse<Contribution> localVarResp = contributionsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a single contribution by id
     * 
     * @param id Id of the contribution to return (required)
     * @return ApiResponse&lt;Contribution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contribution> contributionsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = contributionsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Contribution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single contribution by id (asynchronously)
     * 
     * @param id Id of the contribution to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdGetAsync(String id, final ApiCallback<Contribution> _callback) throws ApiException {

        okhttp3.Call localVarCall = contributionsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Contribution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contributionsIdLikePost
     * @param id Id of the contribution (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated like count for this contribution. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdLikePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contributions/{id}/like"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contributionsIdLikePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contributionsIdLikePost(Async)");
        }

        return contributionsIdLikePostCall(id, _callback);

    }

    /**
     * Allows a user to mark a contribution as liked
     * 
     * @param id Id of the contribution (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated like count for this contribution. </td><td>  -  </td></tr>
     </table>
     */
    public BigDecimal contributionsIdLikePost(String id) throws ApiException {
        ApiResponse<BigDecimal> localVarResp = contributionsIdLikePostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Allows a user to mark a contribution as liked
     * 
     * @param id Id of the contribution (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated like count for this contribution. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigDecimal> contributionsIdLikePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = contributionsIdLikePostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allows a user to mark a contribution as liked (asynchronously)
     * 
     * @param id Id of the contribution (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated like count for this contribution. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdLikePostAsync(String id, final ApiCallback<BigDecimal> _callback) throws ApiException {

        okhttp3.Call localVarCall = contributionsIdLikePostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contributionsIdLikesGet
     * @param id Id of the contribution (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of user ids. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdLikesGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contributions/{id}/likes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contributionsIdLikesGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contributionsIdLikesGet(Async)");
        }

        return contributionsIdLikesGetCall(id, _callback);

    }

    /**
     * List users who have liked this contributions
     * Returns a list of user ids of users who have liked this conribution
     * @param id Id of the contribution (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of user ids. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> contributionsIdLikesGet(String id) throws ApiException {
        ApiResponse<List<String>> localVarResp = contributionsIdLikesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * List users who have liked this contributions
     * Returns a list of user ids of users who have liked this conribution
     * @param id Id of the contribution (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of user ids. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> contributionsIdLikesGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = contributionsIdLikesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List users who have liked this contributions (asynchronously)
     * Returns a list of user ids of users who have liked this conribution
     * @param id Id of the contribution (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of user ids. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdLikesGetAsync(String id, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contributionsIdLikesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contributionsIdModeratePost
     * @param id Id of the contribution to moderate (required)
     * @param moderationHistoryItemSubmission A moderation action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderation action was successfully applied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The submission falied to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not correctly authorised. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to perform this moderation action. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdModeratePostCall(String id, ModerationHistoryItemSubmission moderationHistoryItemSubmission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moderationHistoryItemSubmission;

        // create path and map variables
        String localVarPath = "/contributions/{id}/moderate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contributionsIdModeratePostValidateBeforeCall(String id, ModerationHistoryItemSubmission moderationHistoryItemSubmission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contributionsIdModeratePost(Async)");
        }

        // verify the required parameter 'moderationHistoryItemSubmission' is set
        if (moderationHistoryItemSubmission == null) {
            throw new ApiException("Missing the required parameter 'moderationHistoryItemSubmission' when calling contributionsIdModeratePost(Async)");
        }

        return contributionsIdModeratePostCall(id, moderationHistoryItemSubmission, _callback);

    }

    /**
     * Perform a moderation action on this contribution
     * Allows the contribution to approved of rejected.
     * @param id Id of the contribution to moderate (required)
     * @param moderationHistoryItemSubmission A moderation action (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderation action was successfully applied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The submission falied to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not correctly authorised. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to perform this moderation action. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public String contributionsIdModeratePost(String id, ModerationHistoryItemSubmission moderationHistoryItemSubmission) throws ApiException {
        ApiResponse<String> localVarResp = contributionsIdModeratePostWithHttpInfo(id, moderationHistoryItemSubmission);
        return localVarResp.getData();
    }

    /**
     * Perform a moderation action on this contribution
     * Allows the contribution to approved of rejected.
     * @param id Id of the contribution to moderate (required)
     * @param moderationHistoryItemSubmission A moderation action (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderation action was successfully applied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The submission falied to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not correctly authorised. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to perform this moderation action. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> contributionsIdModeratePostWithHttpInfo(String id, ModerationHistoryItemSubmission moderationHistoryItemSubmission) throws ApiException {
        okhttp3.Call localVarCall = contributionsIdModeratePostValidateBeforeCall(id, moderationHistoryItemSubmission, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform a moderation action on this contribution (asynchronously)
     * Allows the contribution to approved of rejected.
     * @param id Id of the contribution to moderate (required)
     * @param moderationHistoryItemSubmission A moderation action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderation action was successfully applied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The submission falied to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not correctly authorised. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to perform this moderation action. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsIdModeratePostAsync(String id, ModerationHistoryItemSubmission moderationHistoryItemSubmission, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = contributionsIdModeratePostValidateBeforeCall(id, moderationHistoryItemSubmission, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contributionsPost
     * @param contribution Contribution object to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contribution created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsPostCall(Contribution contribution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contribution;

        // create path and map variables
        String localVarPath = "/contributions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contributionsPostValidateBeforeCall(Contribution contribution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contribution' is set
        if (contribution == null) {
            throw new ApiException("Missing the required parameter 'contribution' when calling contributionsPost(Async)");
        }

        return contributionsPostCall(contribution, _callback);

    }

    /**
     * Create a new contribution
     * 
     * @param contribution Contribution object to be created (required)
     * @return Contribution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contribution created </td><td>  -  </td></tr>
     </table>
     */
    public Contribution contributionsPost(Contribution contribution) throws ApiException {
        ApiResponse<Contribution> localVarResp = contributionsPostWithHttpInfo(contribution);
        return localVarResp.getData();
    }

    /**
     * Create a new contribution
     * 
     * @param contribution Contribution object to be created (required)
     * @return ApiResponse&lt;Contribution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contribution created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contribution> contributionsPostWithHttpInfo(Contribution contribution) throws ApiException {
        okhttp3.Call localVarCall = contributionsPostValidateBeforeCall(contribution, null);
        Type localVarReturnType = new TypeToken<Contribution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new contribution (asynchronously)
     * 
     * @param contribution Contribution object to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contribution created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contributionsPostAsync(Contribution contribution, final ApiCallback<Contribution> _callback) throws ApiException {

        okhttp3.Call localVarCall = contributionsPostValidateBeforeCall(contribution, _callback);
        Type localVarReturnType = new TypeToken<Contribution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportPost
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param tagged Should exported media files be tagged with metadata. Deprecated; use format instead. (optional)
     * @param combined Included a combined file with all contribution text. (optional)
     * @param individual Include individual text files for each contribution. (optional)
     * @param format Media format to export; none, fullsize, tagged or original. (optional)
     * @param json Include raw JSON for each contribution. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An export job describing the state of an export job. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportPostCall(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, Boolean tagged, Boolean combined, Boolean individual, String format, Boolean json, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assignment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignment", assignment));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (geohash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geohash", geohash));
        }

        if (hasLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasLocation", hasLocation));
        }

        if (latLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latLong", latLong));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (mediaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mediaType", mediaType));
        }

        if (ownedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ownedBy", ownedBy));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (urlWords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlWords", urlWords));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (tagged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagged", tagged));
        }

        if (combined != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("combined", combined));
        }

        if (individual != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("individual", individual));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (json != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("json", json));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportPostValidateBeforeCall(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, Boolean tagged, Boolean combined, Boolean individual, String format, Boolean json, final ApiCallback _callback) throws ApiException {
        return exportPostCall(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, tagged, combined, individual, format, json, _callback);

    }

    /**
     * Export contributions.
     * Begin an export job. Returns a export job which can be polled to follow the progress of an export.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param tagged Should exported media files be tagged with metadata. Deprecated; use format instead. (optional)
     * @param combined Included a combined file with all contribution text. (optional)
     * @param individual Include individual text files for each contribution. (optional)
     * @param format Media format to export; none, fullsize, tagged or original. (optional)
     * @param json Include raw JSON for each contribution. (optional)
     * @return Export
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An export job describing the state of an export job. </td><td>  -  </td></tr>
     </table>
     */
    public Export exportPost(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, Boolean tagged, Boolean combined, Boolean individual, String format, Boolean json) throws ApiException {
        ApiResponse<Export> localVarResp = exportPostWithHttpInfo(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, tagged, combined, individual, format, json);
        return localVarResp.getData();
    }

    /**
     * Export contributions.
     * Begin an export job. Returns a export job which can be polled to follow the progress of an export.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param tagged Should exported media files be tagged with metadata. Deprecated; use format instead. (optional)
     * @param combined Included a combined file with all contribution text. (optional)
     * @param individual Include individual text files for each contribution. (optional)
     * @param format Media format to export; none, fullsize, tagged or original. (optional)
     * @param json Include raw JSON for each contribution. (optional)
     * @return ApiResponse&lt;Export&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An export job describing the state of an export job. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Export> exportPostWithHttpInfo(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, Boolean tagged, Boolean combined, Boolean individual, String format, Boolean json) throws ApiException {
        okhttp3.Call localVarCall = exportPostValidateBeforeCall(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, tagged, combined, individual, format, json, null);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export contributions. (asynchronously)
     * Begin an export job. Returns a export job which can be polled to follow the progress of an export.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param tagged Should exported media files be tagged with metadata. Deprecated; use format instead. (optional)
     * @param combined Included a combined file with all contribution text. (optional)
     * @param individual Include individual text files for each contribution. (optional)
     * @param format Media format to export; none, fullsize, tagged or original. (optional)
     * @param json Include raw JSON for each contribution. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An export job describing the state of an export job. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportPostAsync(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, Boolean tagged, Boolean combined, Boolean individual, String format, Boolean json, final ApiCallback<Export> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportPostValidateBeforeCall(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, tagged, combined, individual, format, json, _callback);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportSummaryPost
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of the number of contributions, media files and approximate total size of media files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSummaryPostCall(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export-summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assignment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignment", assignment));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (geohash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geohash", geohash));
        }

        if (hasLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasLocation", hasLocation));
        }

        if (latLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latLong", latLong));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (mediaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mediaType", mediaType));
        }

        if (ownedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ownedBy", ownedBy));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (urlWords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlWords", urlWords));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportSummaryPostValidateBeforeCall(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, final ApiCallback _callback) throws ApiException {
        return exportSummaryPostCall(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, _callback);

    }

    /**
     * Export contributions preflight summary.
     * Provide a preflight summary of an export request.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @return ExportSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of the number of contributions, media files and approximate total size of media files. </td><td>  -  </td></tr>
     </table>
     */
    public ExportSummary exportSummaryPost(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user) throws ApiException {
        ApiResponse<ExportSummary> localVarResp = exportSummaryPostWithHttpInfo(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user);
        return localVarResp.getData();
    }

    /**
     * Export contributions preflight summary.
     * Provide a preflight summary of an export request.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @return ApiResponse&lt;ExportSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of the number of contributions, media files and approximate total size of media files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportSummary> exportSummaryPostWithHttpInfo(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user) throws ApiException {
        okhttp3.Call localVarCall = exportSummaryPostValidateBeforeCall(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, null);
        Type localVarReturnType = new TypeToken<ExportSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export contributions preflight summary. (asynchronously)
     * Provide a preflight summary of an export request.
     * @param assignment Restrict results to contributions submitted to this assignment. (optional)
     * @param country Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code). (optional)
     * @param createdBefore Limit results to contributions created before this date time. (optional)
     * @param createdAfter Limit results to contributions created after this date time. (optional)
     * @param geohash Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes) (optional)
     * @param hasLocation Restrict results to contributions which have a publicly visible location. (optional)
     * @param latLong Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius (optional)
     * @param radius When limiting result by location with the latLong parameter, specify the radius in kilometers. (optional)
     * @param mediaType Restrict results to contributions which include a media file of the given type (ie. image / video) (optional)
     * @param ownedBy Restrict results to contributions which are fall under the jurisdiction by this user. (optional)
     * @param q Restrict results to contributions whose headline text matches this keyword. (optional)
     * @param urlWords Locate a specific contribution by URL words (optional)
     * @param user Restrict results to contributions by this user identified by id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of the number of contributions, media files and approximate total size of media files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSummaryPostAsync(String assignment, String country, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String geohash, Boolean hasLocation, String latLong, Double radius, String mediaType, String ownedBy, String q, String urlWords, String user, final ApiCallback<ExportSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportSummaryPostValidateBeforeCall(assignment, country, createdBefore, createdAfter, geohash, hasLocation, latLong, radius, mediaType, ownedBy, q, urlWords, user, _callback);
        Type localVarReturnType = new TypeToken<ExportSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportsIdGet
     * @param id Id of the export job to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/exports/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling exportsIdGet(Async)");
        }

        return exportsIdGetCall(id, _callback);

    }

    /**
     * Get a single export job; poll to follow export progress.
     * 
     * @param id Id of the export job to return (required)
     * @return Export
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Export exportsIdGet(String id) throws ApiException {
        ApiResponse<Export> localVarResp = exportsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a single export job; poll to follow export progress.
     * 
     * @param id Id of the export job to return (required)
     * @return ApiResponse&lt;Export&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Export> exportsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = exportsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single export job; poll to follow export progress. (asynchronously)
     * 
     * @param id Id of the export job to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportsIdGetAsync(String id, final ApiCallback<Export> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
