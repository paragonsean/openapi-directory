/*
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MediaUsage;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assignment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:26.140477-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Assignment {
  public static final String SERIALIZED_NAME_ALLOWS_ANONYMOUS_CONTRIBUTIONS = "allowsAnonymousContributions";
  @SerializedName(SERIALIZED_NAME_ALLOWS_ANONYMOUS_CONTRIBUTIONS)
  private Boolean allowsAnonymousContributions;

  public static final String SERIALIZED_NAME_CALL_TO_ACTION = "callToAction";
  @SerializedName(SERIALIZED_NAME_CALL_TO_ACTION)
  private String callToAction;

  public static final String SERIALIZED_NAME_COVER = "cover";
  @SerializedName(SERIALIZED_NAME_COVER)
  private MediaUsage cover;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMBARGO = "embargo";
  @SerializedName(SERIALIZED_NAME_EMBARGO)
  private OffsetDateTime embargo;

  public static final String SERIALIZED_NAME_ENDS = "ends";
  @SerializedName(SERIALIZED_NAME_ENDS)
  private OffsetDateTime ends;

  public static final String SERIALIZED_NAME_FEATURED = "featured";
  @SerializedName(SERIALIZED_NAME_FEATURED)
  private Boolean featured;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MEDIA_REQUIRED = "mediaRequired";
  @SerializedName(SERIALIZED_NAME_MEDIA_REQUIRED)
  private Boolean mediaRequired;

  public static final String SERIALIZED_NAME_MODERATOR = "moderator";
  @SerializedName(SERIALIZED_NAME_MODERATOR)
  private String moderator;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN = "open";
  @SerializedName(SERIALIZED_NAME_OPEN)
  private Boolean open;

  public static final String SERIALIZED_NAME_RECEIPT_MESSAGE = "receiptMessage";
  @SerializedName(SERIALIZED_NAME_RECEIPT_MESSAGE)
  private String receiptMessage;

  public static final String SERIALIZED_NAME_STARTS = "starts";
  @SerializedName(SERIALIZED_NAME_STARTS)
  private OffsetDateTime starts;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL_WORDS = "urlWords";
  @SerializedName(SERIALIZED_NAME_URL_WORDS)
  private String urlWords;

  public static final String SERIALIZED_NAME_WEB_URL = "webUrl";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public Assignment() {
  }

  public Assignment allowsAnonymousContributions(Boolean allowsAnonymousContributions) {
    this.allowsAnonymousContributions = allowsAnonymousContributions;
    return this;
  }

  /**
   * Get allowsAnonymousContributions
   * @return allowsAnonymousContributions
   */
  @javax.annotation.Nullable
  public Boolean getAllowsAnonymousContributions() {
    return allowsAnonymousContributions;
  }

  public void setAllowsAnonymousContributions(Boolean allowsAnonymousContributions) {
    this.allowsAnonymousContributions = allowsAnonymousContributions;
  }


  public Assignment callToAction(String callToAction) {
    this.callToAction = callToAction;
    return this;
  }

  /**
   * An optional call to action specific to this assignment. ie. Submit your snow pictures.
   * @return callToAction
   */
  @javax.annotation.Nullable
  public String getCallToAction() {
    return callToAction;
  }

  public void setCallToAction(String callToAction) {
    this.callToAction = callToAction;
  }


  public Assignment cover(MediaUsage cover) {
    this.cover = cover;
    return this;
  }

  /**
   * Get cover
   * @return cover
   */
  @javax.annotation.Nullable
  public MediaUsage getCover() {
    return cover;
  }

  public void setCover(MediaUsage cover) {
    this.cover = cover;
  }


  public Assignment created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Assignment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Assignment embargo(OffsetDateTime embargo) {
    this.embargo = embargo;
    return this;
  }

  /**
   * Get embargo
   * @return embargo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEmbargo() {
    return embargo;
  }

  public void setEmbargo(OffsetDateTime embargo) {
    this.embargo = embargo;
  }


  public Assignment ends(OffsetDateTime ends) {
    this.ends = ends;
    return this;
  }

  /**
   * Get ends
   * @return ends
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEnds() {
    return ends;
  }

  public void setEnds(OffsetDateTime ends) {
    this.ends = ends;
  }


  public Assignment featured(Boolean featured) {
    this.featured = featured;
    return this;
  }

  /**
   * Get featured
   * @return featured
   */
  @javax.annotation.Nullable
  public Boolean getFeatured() {
    return featured;
  }

  public void setFeatured(Boolean featured) {
    this.featured = featured;
  }


  public Assignment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Assignment mediaRequired(Boolean mediaRequired) {
    this.mediaRequired = mediaRequired;
    return this;
  }

  /**
   * Get mediaRequired
   * @return mediaRequired
   */
  @javax.annotation.Nullable
  public Boolean getMediaRequired() {
    return mediaRequired;
  }

  public void setMediaRequired(Boolean mediaRequired) {
    this.mediaRequired = mediaRequired;
  }


  public Assignment moderator(String moderator) {
    this.moderator = moderator;
    return this;
  }

  /**
   * Optional credential id of the moderator who owns this particular assignment.
   * @return moderator
   */
  @javax.annotation.Nullable
  public String getModerator() {
    return moderator;
  }

  public void setModerator(String moderator) {
    this.moderator = moderator;
  }


  public Assignment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Assignment open(Boolean open) {
    this.open = open;
    return this;
  }

  /**
   * Helper value. Is this assignment currently open? Based on the value of the ends field.
   * @return open
   */
  @javax.annotation.Nullable
  public Boolean getOpen() {
    return open;
  }

  public void setOpen(Boolean open) {
    this.open = open;
  }


  public Assignment receiptMessage(String receiptMessage) {
    this.receiptMessage = receiptMessage;
    return this;
  }

  /**
   * An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.
   * @return receiptMessage
   */
  @javax.annotation.Nullable
  public String getReceiptMessage() {
    return receiptMessage;
  }

  public void setReceiptMessage(String receiptMessage) {
    this.receiptMessage = receiptMessage;
  }


  public Assignment starts(OffsetDateTime starts) {
    this.starts = starts;
    return this;
  }

  /**
   * Get starts
   * @return starts
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStarts() {
    return starts;
  }

  public void setStarts(OffsetDateTime starts) {
    this.starts = starts;
  }


  public Assignment tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public Assignment addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public Assignment urlWords(String urlWords) {
    this.urlWords = urlWords;
    return this;
  }

  /**
   * Get urlWords
   * @return urlWords
   */
  @javax.annotation.Nullable
  public String getUrlWords() {
    return urlWords;
  }

  public void setUrlWords(String urlWords) {
    this.urlWords = urlWords;
  }


  public Assignment webUrl(String webUrl) {
    this.webUrl = webUrl;
    return this;
  }

  /**
   * Get webUrl
   * @return webUrl
   */
  @javax.annotation.Nullable
  public String getWebUrl() {
    return webUrl;
  }

  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assignment assignment = (Assignment) o;
    return Objects.equals(this.allowsAnonymousContributions, assignment.allowsAnonymousContributions) &&
        Objects.equals(this.callToAction, assignment.callToAction) &&
        Objects.equals(this.cover, assignment.cover) &&
        Objects.equals(this.created, assignment.created) &&
        Objects.equals(this.description, assignment.description) &&
        Objects.equals(this.embargo, assignment.embargo) &&
        Objects.equals(this.ends, assignment.ends) &&
        Objects.equals(this.featured, assignment.featured) &&
        Objects.equals(this.id, assignment.id) &&
        Objects.equals(this.mediaRequired, assignment.mediaRequired) &&
        Objects.equals(this.moderator, assignment.moderator) &&
        Objects.equals(this.name, assignment.name) &&
        Objects.equals(this.open, assignment.open) &&
        Objects.equals(this.receiptMessage, assignment.receiptMessage) &&
        Objects.equals(this.starts, assignment.starts) &&
        Objects.equals(this.tags, assignment.tags) &&
        Objects.equals(this.urlWords, assignment.urlWords) &&
        Objects.equals(this.webUrl, assignment.webUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowsAnonymousContributions, callToAction, cover, created, description, embargo, ends, featured, id, mediaRequired, moderator, name, open, receiptMessage, starts, tags, urlWords, webUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assignment {\n");
    sb.append("    allowsAnonymousContributions: ").append(toIndentedString(allowsAnonymousContributions)).append("\n");
    sb.append("    callToAction: ").append(toIndentedString(callToAction)).append("\n");
    sb.append("    cover: ").append(toIndentedString(cover)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    embargo: ").append(toIndentedString(embargo)).append("\n");
    sb.append("    ends: ").append(toIndentedString(ends)).append("\n");
    sb.append("    featured: ").append(toIndentedString(featured)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mediaRequired: ").append(toIndentedString(mediaRequired)).append("\n");
    sb.append("    moderator: ").append(toIndentedString(moderator)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    open: ").append(toIndentedString(open)).append("\n");
    sb.append("    receiptMessage: ").append(toIndentedString(receiptMessage)).append("\n");
    sb.append("    starts: ").append(toIndentedString(starts)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    urlWords: ").append(toIndentedString(urlWords)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowsAnonymousContributions");
    openapiFields.add("callToAction");
    openapiFields.add("cover");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("embargo");
    openapiFields.add("ends");
    openapiFields.add("featured");
    openapiFields.add("id");
    openapiFields.add("mediaRequired");
    openapiFields.add("moderator");
    openapiFields.add("name");
    openapiFields.add("open");
    openapiFields.add("receiptMessage");
    openapiFields.add("starts");
    openapiFields.add("tags");
    openapiFields.add("urlWords");
    openapiFields.add("webUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Assignment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assignment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assignment is not found in the empty JSON string", Assignment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assignment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callToAction") != null && !jsonObj.get("callToAction").isJsonNull()) && !jsonObj.get("callToAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callToAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callToAction").toString()));
      }
      // validate the optional field `cover`
      if (jsonObj.get("cover") != null && !jsonObj.get("cover").isJsonNull()) {
        MediaUsage.validateJsonElement(jsonObj.get("cover"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("moderator") != null && !jsonObj.get("moderator").isJsonNull()) && !jsonObj.get("moderator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moderator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moderator").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("receiptMessage") != null && !jsonObj.get("receiptMessage").isJsonNull()) && !jsonObj.get("receiptMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiptMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiptMessage").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("urlWords") != null && !jsonObj.get("urlWords").isJsonNull()) && !jsonObj.get("urlWords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlWords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlWords").toString()));
      }
      if ((jsonObj.get("webUrl") != null && !jsonObj.get("webUrl").isJsonNull()) && !jsonObj.get("webUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assignment.class));

       return (TypeAdapter<T>) new TypeAdapter<Assignment>() {
           @Override
           public void write(JsonWriter out, Assignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assignment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Assignment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Assignment
   * @throws IOException if the JSON string is invalid with respect to Assignment
   */
  public static Assignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assignment.class);
  }

  /**
   * Convert an instance of Assignment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

