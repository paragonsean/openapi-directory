/*
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LinkedProfile;
import java.time.OffsetDateTime;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usersGet
     * @param assignment Restrict results to the users who have contributed to this assignment. (optional)
     * @param country Restrict results to the users who have submitted a contribution with a public location located within this country. (optional)
     * @param minimumContributions Restrict results to the users who have submitted at least this many contributions. (optional)
     * @param linkedProfile Restrict results to the users who a linked profile of this type. (optional)
     * @param ownedBy Restrict results to the users who are owned by of this owner. (optional)
     * @param submittedBefore Limit results to users who have submitted at least one contribution before this date time. (optional)
     * @param submittedAfter Limit results to users who have submitted at least one contribution after this date time. (optional)
     * @param username Restrict results to the user with this username. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(String assignment, String country, BigDecimal minimumContributions, String linkedProfile, String ownedBy, OffsetDateTime submittedBefore, OffsetDateTime submittedAfter, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assignment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignment", assignment));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (minimumContributions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumContributions", minimumContributions));
        }

        if (linkedProfile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linkedProfile", linkedProfile));
        }

        if (ownedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ownedBy", ownedBy));
        }

        if (submittedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submittedBefore", submittedBefore));
        }

        if (submittedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submittedAfter", submittedAfter));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(String assignment, String country, BigDecimal minimumContributions, String linkedProfile, String ownedBy, OffsetDateTime submittedBefore, OffsetDateTime submittedAfter, String username, final ApiCallback _callback) throws ApiException {
        return usersGetCall(assignment, country, minimumContributions, linkedProfile, ownedBy, submittedBefore, submittedAfter, username, _callback);

    }

    /**
     * List users
     * 
     * @param assignment Restrict results to the users who have contributed to this assignment. (optional)
     * @param country Restrict results to the users who have submitted a contribution with a public location located within this country. (optional)
     * @param minimumContributions Restrict results to the users who have submitted at least this many contributions. (optional)
     * @param linkedProfile Restrict results to the users who a linked profile of this type. (optional)
     * @param ownedBy Restrict results to the users who are owned by of this owner. (optional)
     * @param submittedBefore Limit results to users who have submitted at least one contribution before this date time. (optional)
     * @param submittedAfter Limit results to users who have submitted at least one contribution after this date time. (optional)
     * @param username Restrict results to the user with this username. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public List<User> usersGet(String assignment, String country, BigDecimal minimumContributions, String linkedProfile, String ownedBy, OffsetDateTime submittedBefore, OffsetDateTime submittedAfter, String username) throws ApiException {
        ApiResponse<List<User>> localVarResp = usersGetWithHttpInfo(assignment, country, minimumContributions, linkedProfile, ownedBy, submittedBefore, submittedAfter, username);
        return localVarResp.getData();
    }

    /**
     * List users
     * 
     * @param assignment Restrict results to the users who have contributed to this assignment. (optional)
     * @param country Restrict results to the users who have submitted a contribution with a public location located within this country. (optional)
     * @param minimumContributions Restrict results to the users who have submitted at least this many contributions. (optional)
     * @param linkedProfile Restrict results to the users who a linked profile of this type. (optional)
     * @param ownedBy Restrict results to the users who are owned by of this owner. (optional)
     * @param submittedBefore Limit results to users who have submitted at least one contribution before this date time. (optional)
     * @param submittedAfter Limit results to users who have submitted at least one contribution after this date time. (optional)
     * @param username Restrict results to the user with this username. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> usersGetWithHttpInfo(String assignment, String country, BigDecimal minimumContributions, String linkedProfile, String ownedBy, OffsetDateTime submittedBefore, OffsetDateTime submittedAfter, String username) throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall(assignment, country, minimumContributions, linkedProfile, ownedBy, submittedBefore, submittedAfter, username, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List users (asynchronously)
     * 
     * @param assignment Restrict results to the users who have contributed to this assignment. (optional)
     * @param country Restrict results to the users who have submitted a contribution with a public location located within this country. (optional)
     * @param minimumContributions Restrict results to the users who have submitted at least this many contributions. (optional)
     * @param linkedProfile Restrict results to the users who a linked profile of this type. (optional)
     * @param ownedBy Restrict results to the users who are owned by of this owner. (optional)
     * @param submittedBefore Limit results to users who have submitted at least one contribution before this date time. (optional)
     * @param submittedAfter Limit results to users who have submitted at least one contribution after this date time. (optional)
     * @param username Restrict results to the user with this username. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(String assignment, String country, BigDecimal minimumContributions, String linkedProfile, String ownedBy, OffsetDateTime submittedBefore, OffsetDateTime submittedAfter, String username, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall(assignment, country, minimumContributions, linkedProfile, ownedBy, submittedBefore, submittedAfter, username, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersIdGet
     * @param id Id of the user to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersIdGet(Async)");
        }

        return usersIdGetCall(id, _callback);

    }

    /**
     * Retrieve a single user by id
     * 
     * @param id Id of the user to return (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public User usersIdGet(String id) throws ApiException {
        ApiResponse<User> localVarResp = usersIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single user by id
     * 
     * @param id Id of the user to return (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = usersIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single user by id (asynchronously)
     * 
     * @param id Id of the user to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersIdGetAsync(String id, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersIdLinkedTypeGet
     * @param id Id of the user to return (required)
     * @param type Type of the linked profile to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersIdLinkedTypeGetCall(String id, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}/linked/{type}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersIdLinkedTypeGetValidateBeforeCall(String id, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersIdLinkedTypeGet(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling usersIdLinkedTypeGet(Async)");
        }

        return usersIdLinkedTypeGetCall(id, type, _callback);

    }

    /**
     * Retrieve a users linked profile by type
     * 
     * @param id Id of the user to return (required)
     * @param type Type of the linked profile to fetch (required)
     * @return LinkedProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public LinkedProfile usersIdLinkedTypeGet(String id, String type) throws ApiException {
        ApiResponse<LinkedProfile> localVarResp = usersIdLinkedTypeGetWithHttpInfo(id, type);
        return localVarResp.getData();
    }

    /**
     * Retrieve a users linked profile by type
     * 
     * @param id Id of the user to return (required)
     * @param type Type of the linked profile to fetch (required)
     * @return ApiResponse&lt;LinkedProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkedProfile> usersIdLinkedTypeGetWithHttpInfo(String id, String type) throws ApiException {
        okhttp3.Call localVarCall = usersIdLinkedTypeGetValidateBeforeCall(id, type, null);
        Type localVarReturnType = new TypeToken<LinkedProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a users linked profile by type (asynchronously)
     * 
     * @param id Id of the user to return (required)
     * @param type Type of the linked profile to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersIdLinkedTypeGetAsync(String id, String type, final ApiCallback<LinkedProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersIdLinkedTypeGetValidateBeforeCall(id, type, _callback);
        Type localVarReturnType = new TypeToken<LinkedProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
