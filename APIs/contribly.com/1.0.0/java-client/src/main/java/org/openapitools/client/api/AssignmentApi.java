/*
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Assignment;
import org.openapitools.client.model.AssignmentSubmission;
import java.math.BigDecimal;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssignmentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssignmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssignmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assignmentsGet
     * @param ownedBy Restrict results to assignments owned by this user. (optional)
     * @param page Pagination page (optional)
     * @param pageSize Pagination page size (optional)
     * @param q Restrict results to assignments whose name or description matches this keyword. (optional)
     * @param urlWords Select an assignment by urlWords. (optional)
     * @param open Select open or closed assignments (optional)
     * @param alwaysOpen Select assignments with no closing date. (optional)
     * @param tag Restrict results to assignments which are tagged with this tag. (optional)
     * @param name Restrict results to the assignment (or potentially assignments) with this exact name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of assignments </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assignmentsGetCall(String ownedBy, Integer page, Integer pageSize, String q, String urlWords, Boolean open, Boolean alwaysOpen, String tag, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ownedBy", ownedBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (urlWords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urlWords", urlWords));
        }

        if (open != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("open", open));
        }

        if (alwaysOpen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alwaysOpen", alwaysOpen));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignmentsGetValidateBeforeCall(String ownedBy, Integer page, Integer pageSize, String q, String urlWords, Boolean open, Boolean alwaysOpen, String tag, String name, final ApiCallback _callback) throws ApiException {
        return assignmentsGetCall(ownedBy, page, pageSize, q, urlWords, open, alwaysOpen, tag, name, _callback);

    }

    /**
     * List assignments
     * 
     * @param ownedBy Restrict results to assignments owned by this user. (optional)
     * @param page Pagination page (optional)
     * @param pageSize Pagination page size (optional)
     * @param q Restrict results to assignments whose name or description matches this keyword. (optional)
     * @param urlWords Select an assignment by urlWords. (optional)
     * @param open Select open or closed assignments (optional)
     * @param alwaysOpen Select assignments with no closing date. (optional)
     * @param tag Restrict results to assignments which are tagged with this tag. (optional)
     * @param name Restrict results to the assignment (or potentially assignments) with this exact name (optional)
     * @return List&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of assignments </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public List<Assignment> assignmentsGet(String ownedBy, Integer page, Integer pageSize, String q, String urlWords, Boolean open, Boolean alwaysOpen, String tag, String name) throws ApiException {
        ApiResponse<List<Assignment>> localVarResp = assignmentsGetWithHttpInfo(ownedBy, page, pageSize, q, urlWords, open, alwaysOpen, tag, name);
        return localVarResp.getData();
    }

    /**
     * List assignments
     * 
     * @param ownedBy Restrict results to assignments owned by this user. (optional)
     * @param page Pagination page (optional)
     * @param pageSize Pagination page size (optional)
     * @param q Restrict results to assignments whose name or description matches this keyword. (optional)
     * @param urlWords Select an assignment by urlWords. (optional)
     * @param open Select open or closed assignments (optional)
     * @param alwaysOpen Select assignments with no closing date. (optional)
     * @param tag Restrict results to assignments which are tagged with this tag. (optional)
     * @param name Restrict results to the assignment (or potentially assignments) with this exact name (optional)
     * @return ApiResponse&lt;List&lt;Assignment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of assignments </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Assignment>> assignmentsGetWithHttpInfo(String ownedBy, Integer page, Integer pageSize, String q, String urlWords, Boolean open, Boolean alwaysOpen, String tag, String name) throws ApiException {
        okhttp3.Call localVarCall = assignmentsGetValidateBeforeCall(ownedBy, page, pageSize, q, urlWords, open, alwaysOpen, tag, name, null);
        Type localVarReturnType = new TypeToken<List<Assignment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List assignments (asynchronously)
     * 
     * @param ownedBy Restrict results to assignments owned by this user. (optional)
     * @param page Pagination page (optional)
     * @param pageSize Pagination page size (optional)
     * @param q Restrict results to assignments whose name or description matches this keyword. (optional)
     * @param urlWords Select an assignment by urlWords. (optional)
     * @param open Select open or closed assignments (optional)
     * @param alwaysOpen Select assignments with no closing date. (optional)
     * @param tag Restrict results to assignments which are tagged with this tag. (optional)
     * @param name Restrict results to the assignment (or potentially assignments) with this exact name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of assignments </td><td>  * X-total-count - Total number of matching users <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assignmentsGetAsync(String ownedBy, Integer page, Integer pageSize, String q, String urlWords, Boolean open, Boolean alwaysOpen, String tag, String name, final ApiCallback<List<Assignment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignmentsGetValidateBeforeCall(ownedBy, page, pageSize, q, urlWords, open, alwaysOpen, tag, name, _callback);
        Type localVarReturnType = new TypeToken<List<Assignment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assignmentsIdDelete
     * @param id Id of the assignment to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not permitted to delete this assignment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignmentsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assignments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignmentsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling assignmentsIdDelete(Async)");
        }

        return assignmentsIdDeleteCall(id, _callback);

    }

    /**
     * Delete this assignment and all of it&#39;s contributions
     * 
     * @param id Id of the assignment to return (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not permitted to delete this assignment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void assignmentsIdDelete(String id) throws ApiException {
        assignmentsIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete this assignment and all of it&#39;s contributions
     * 
     * @param id Id of the assignment to return (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not permitted to delete this assignment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assignmentsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = assignmentsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete this assignment and all of it&#39;s contributions (asynchronously)
     * 
     * @param id Id of the assignment to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not permitted to delete this assignment. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignmentsIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignmentsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assignmentsIdGet
     * @param id Id of the assignment to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignmentsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assignments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignmentsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling assignmentsIdGet(Async)");
        }

        return assignmentsIdGetCall(id, _callback);

    }

    /**
     * Get a single assigment by id
     * 
     * @param id Id of the assignment to return (required)
     * @return Assignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Assignment assignmentsIdGet(String id) throws ApiException {
        ApiResponse<Assignment> localVarResp = assignmentsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a single assigment by id
     * 
     * @param id Id of the assignment to return (required)
     * @return ApiResponse&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assignment> assignmentsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = assignmentsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single assigment by id (asynchronously)
     * 
     * @param id Id of the assignment to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignmentsIdGetAsync(String id, final ApiCallback<Assignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignmentsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assignmentsPost
     * @param assignmentSubmission Assignment object to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new assignment vailed to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create the new assignment due to an unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignmentsPostCall(AssignmentSubmission assignmentSubmission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignmentSubmission;

        // create path and map variables
        String localVarPath = "/assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignmentsPostValidateBeforeCall(AssignmentSubmission assignmentSubmission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assignmentSubmission' is set
        if (assignmentSubmission == null) {
            throw new ApiException("Missing the required parameter 'assignmentSubmission' when calling assignmentsPost(Async)");
        }

        return assignmentsPostCall(assignmentSubmission, _callback);

    }

    /**
     * Create a new assignment
     * 
     * @param assignmentSubmission Assignment object to be created (required)
     * @return Assignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new assignment vailed to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create the new assignment due to an unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public Assignment assignmentsPost(AssignmentSubmission assignmentSubmission) throws ApiException {
        ApiResponse<Assignment> localVarResp = assignmentsPostWithHttpInfo(assignmentSubmission);
        return localVarResp.getData();
    }

    /**
     * Create a new assignment
     * 
     * @param assignmentSubmission Assignment object to be created (required)
     * @return ApiResponse&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new assignment vailed to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create the new assignment due to an unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assignment> assignmentsPostWithHttpInfo(AssignmentSubmission assignmentSubmission) throws ApiException {
        okhttp3.Call localVarCall = assignmentsPostValidateBeforeCall(assignmentSubmission, null);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new assignment (asynchronously)
     * 
     * @param assignmentSubmission Assignment object to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assignment created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new assignment vailed to validate. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create the new assignment due to an unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignmentsPostAsync(AssignmentSubmission assignmentSubmission, final ApiCallback<Assignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignmentsPostValidateBeforeCall(assignmentSubmission, _callback);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
