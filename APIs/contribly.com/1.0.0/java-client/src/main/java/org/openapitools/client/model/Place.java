/*
 * Contribly
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LatLong;
import org.openapitools.client.model.OsmId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Place
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:26.140477-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Place {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_GEOHASH = "geohash";
  @SerializedName(SERIALIZED_NAME_GEOHASH)
  private String geohash;

  public static final String SERIALIZED_NAME_GOOGLE = "google";
  @SerializedName(SERIALIZED_NAME_GOOGLE)
  private String google;

  public static final String SERIALIZED_NAME_LAT_LONG = "latLong";
  @SerializedName(SERIALIZED_NAME_LAT_LONG)
  private LatLong latLong;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OSM = "osm";
  @SerializedName(SERIALIZED_NAME_OSM)
  private OsmId osm;

  public Place() {
  }

  public Place country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Place geohash(String geohash) {
    this.geohash = geohash;
    return this;
  }

  /**
   * Get geohash
   * @return geohash
   */
  @javax.annotation.Nullable
  public String getGeohash() {
    return geohash;
  }

  public void setGeohash(String geohash) {
    this.geohash = geohash;
  }


  public Place google(String google) {
    this.google = google;
    return this;
  }

  /**
   * Get google
   * @return google
   */
  @javax.annotation.Nullable
  public String getGoogle() {
    return google;
  }

  public void setGoogle(String google) {
    this.google = google;
  }


  public Place latLong(LatLong latLong) {
    this.latLong = latLong;
    return this;
  }

  /**
   * Get latLong
   * @return latLong
   */
  @javax.annotation.Nullable
  public LatLong getLatLong() {
    return latLong;
  }

  public void setLatLong(LatLong latLong) {
    this.latLong = latLong;
  }


  public Place name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Place osm(OsmId osm) {
    this.osm = osm;
    return this;
  }

  /**
   * Get osm
   * @return osm
   */
  @javax.annotation.Nullable
  public OsmId getOsm() {
    return osm;
  }

  public void setOsm(OsmId osm) {
    this.osm = osm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Place place = (Place) o;
    return Objects.equals(this.country, place.country) &&
        Objects.equals(this.geohash, place.geohash) &&
        Objects.equals(this.google, place.google) &&
        Objects.equals(this.latLong, place.latLong) &&
        Objects.equals(this.name, place.name) &&
        Objects.equals(this.osm, place.osm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, geohash, google, latLong, name, osm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Place {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    geohash: ").append(toIndentedString(geohash)).append("\n");
    sb.append("    google: ").append(toIndentedString(google)).append("\n");
    sb.append("    latLong: ").append(toIndentedString(latLong)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osm: ").append(toIndentedString(osm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("geohash");
    openapiFields.add("google");
    openapiFields.add("latLong");
    openapiFields.add("name");
    openapiFields.add("osm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Place
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Place.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Place is not found in the empty JSON string", Place.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Place.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Place` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("geohash") != null && !jsonObj.get("geohash").isJsonNull()) && !jsonObj.get("geohash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geohash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geohash").toString()));
      }
      if ((jsonObj.get("google") != null && !jsonObj.get("google").isJsonNull()) && !jsonObj.get("google").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `google` to be a primitive type in the JSON string but got `%s`", jsonObj.get("google").toString()));
      }
      // validate the optional field `latLong`
      if (jsonObj.get("latLong") != null && !jsonObj.get("latLong").isJsonNull()) {
        LatLong.validateJsonElement(jsonObj.get("latLong"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `osm`
      if (jsonObj.get("osm") != null && !jsonObj.get("osm").isJsonNull()) {
        OsmId.validateJsonElement(jsonObj.get("osm"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Place.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Place' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Place> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Place.class));

       return (TypeAdapter<T>) new TypeAdapter<Place>() {
           @Override
           public void write(JsonWriter out, Place value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Place read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Place given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Place
   * @throws IOException if the JSON string is invalid with respect to Place
   */
  public static Place fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Place.class);
  }

  /**
   * Convert an instance of Place to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

