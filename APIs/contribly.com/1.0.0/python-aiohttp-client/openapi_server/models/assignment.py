# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_usage import MediaUsage
from openapi_server.models.tag import Tag
from openapi_server import util


class Assignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allows_anonymous_contributions: bool=None, call_to_action: str=None, cover: MediaUsage=None, created: datetime=None, description: str=None, embargo: datetime=None, ends: datetime=None, featured: bool=None, id: str=None, media_required: bool=None, moderator: str=None, name: str=None, open: bool=None, receipt_message: str=None, starts: datetime=None, tags: List[Tag]=None, url_words: str=None, web_url: str=None):
        """Assignment - a model defined in OpenAPI

        :param allows_anonymous_contributions: The allows_anonymous_contributions of this Assignment.
        :param call_to_action: The call_to_action of this Assignment.
        :param cover: The cover of this Assignment.
        :param created: The created of this Assignment.
        :param description: The description of this Assignment.
        :param embargo: The embargo of this Assignment.
        :param ends: The ends of this Assignment.
        :param featured: The featured of this Assignment.
        :param id: The id of this Assignment.
        :param media_required: The media_required of this Assignment.
        :param moderator: The moderator of this Assignment.
        :param name: The name of this Assignment.
        :param open: The open of this Assignment.
        :param receipt_message: The receipt_message of this Assignment.
        :param starts: The starts of this Assignment.
        :param tags: The tags of this Assignment.
        :param url_words: The url_words of this Assignment.
        :param web_url: The web_url of this Assignment.
        """
        self.openapi_types = {
            'allows_anonymous_contributions': bool,
            'call_to_action': str,
            'cover': MediaUsage,
            'created': datetime,
            'description': str,
            'embargo': datetime,
            'ends': datetime,
            'featured': bool,
            'id': str,
            'media_required': bool,
            'moderator': str,
            'name': str,
            'open': bool,
            'receipt_message': str,
            'starts': datetime,
            'tags': List[Tag],
            'url_words': str,
            'web_url': str
        }

        self.attribute_map = {
            'allows_anonymous_contributions': 'allowsAnonymousContributions',
            'call_to_action': 'callToAction',
            'cover': 'cover',
            'created': 'created',
            'description': 'description',
            'embargo': 'embargo',
            'ends': 'ends',
            'featured': 'featured',
            'id': 'id',
            'media_required': 'mediaRequired',
            'moderator': 'moderator',
            'name': 'name',
            'open': 'open',
            'receipt_message': 'receiptMessage',
            'starts': 'starts',
            'tags': 'tags',
            'url_words': 'urlWords',
            'web_url': 'webUrl'
        }

        self._allows_anonymous_contributions = allows_anonymous_contributions
        self._call_to_action = call_to_action
        self._cover = cover
        self._created = created
        self._description = description
        self._embargo = embargo
        self._ends = ends
        self._featured = featured
        self._id = id
        self._media_required = media_required
        self._moderator = moderator
        self._name = name
        self._open = open
        self._receipt_message = receipt_message
        self._starts = starts
        self._tags = tags
        self._url_words = url_words
        self._web_url = web_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assignment of this Assignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allows_anonymous_contributions(self):
        """Gets the allows_anonymous_contributions of this Assignment.


        :return: The allows_anonymous_contributions of this Assignment.
        :rtype: bool
        """
        return self._allows_anonymous_contributions

    @allows_anonymous_contributions.setter
    def allows_anonymous_contributions(self, allows_anonymous_contributions):
        """Sets the allows_anonymous_contributions of this Assignment.


        :param allows_anonymous_contributions: The allows_anonymous_contributions of this Assignment.
        :type allows_anonymous_contributions: bool
        """

        self._allows_anonymous_contributions = allows_anonymous_contributions

    @property
    def call_to_action(self):
        """Gets the call_to_action of this Assignment.

        An optional call to action specific to this assignment. ie. Submit your snow pictures.

        :return: The call_to_action of this Assignment.
        :rtype: str
        """
        return self._call_to_action

    @call_to_action.setter
    def call_to_action(self, call_to_action):
        """Sets the call_to_action of this Assignment.

        An optional call to action specific to this assignment. ie. Submit your snow pictures.

        :param call_to_action: The call_to_action of this Assignment.
        :type call_to_action: str
        """

        self._call_to_action = call_to_action

    @property
    def cover(self):
        """Gets the cover of this Assignment.


        :return: The cover of this Assignment.
        :rtype: MediaUsage
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this Assignment.


        :param cover: The cover of this Assignment.
        :type cover: MediaUsage
        """

        self._cover = cover

    @property
    def created(self):
        """Gets the created of this Assignment.


        :return: The created of this Assignment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Assignment.


        :param created: The created of this Assignment.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Assignment.


        :return: The description of this Assignment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Assignment.


        :param description: The description of this Assignment.
        :type description: str
        """

        self._description = description

    @property
    def embargo(self):
        """Gets the embargo of this Assignment.


        :return: The embargo of this Assignment.
        :rtype: datetime
        """
        return self._embargo

    @embargo.setter
    def embargo(self, embargo):
        """Sets the embargo of this Assignment.


        :param embargo: The embargo of this Assignment.
        :type embargo: datetime
        """

        self._embargo = embargo

    @property
    def ends(self):
        """Gets the ends of this Assignment.


        :return: The ends of this Assignment.
        :rtype: datetime
        """
        return self._ends

    @ends.setter
    def ends(self, ends):
        """Sets the ends of this Assignment.


        :param ends: The ends of this Assignment.
        :type ends: datetime
        """

        self._ends = ends

    @property
    def featured(self):
        """Gets the featured of this Assignment.


        :return: The featured of this Assignment.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this Assignment.


        :param featured: The featured of this Assignment.
        :type featured: bool
        """

        self._featured = featured

    @property
    def id(self):
        """Gets the id of this Assignment.


        :return: The id of this Assignment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assignment.


        :param id: The id of this Assignment.
        :type id: str
        """

        self._id = id

    @property
    def media_required(self):
        """Gets the media_required of this Assignment.


        :return: The media_required of this Assignment.
        :rtype: bool
        """
        return self._media_required

    @media_required.setter
    def media_required(self, media_required):
        """Sets the media_required of this Assignment.


        :param media_required: The media_required of this Assignment.
        :type media_required: bool
        """

        self._media_required = media_required

    @property
    def moderator(self):
        """Gets the moderator of this Assignment.

        Optional credential id of the moderator who owns this particular assignment.

        :return: The moderator of this Assignment.
        :rtype: str
        """
        return self._moderator

    @moderator.setter
    def moderator(self, moderator):
        """Sets the moderator of this Assignment.

        Optional credential id of the moderator who owns this particular assignment.

        :param moderator: The moderator of this Assignment.
        :type moderator: str
        """

        self._moderator = moderator

    @property
    def name(self):
        """Gets the name of this Assignment.


        :return: The name of this Assignment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Assignment.


        :param name: The name of this Assignment.
        :type name: str
        """

        self._name = name

    @property
    def open(self):
        """Gets the open of this Assignment.

        Helper value. Is this assignment currently open? Based on the value of the ends field.

        :return: The open of this Assignment.
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this Assignment.

        Helper value. Is this assignment currently open? Based on the value of the ends field.

        :param open: The open of this Assignment.
        :type open: bool
        """

        self._open = open

    @property
    def receipt_message(self):
        """Gets the receipt_message of this Assignment.

        An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.

        :return: The receipt_message of this Assignment.
        :rtype: str
        """
        return self._receipt_message

    @receipt_message.setter
    def receipt_message(self, receipt_message):
        """Sets the receipt_message of this Assignment.

        An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.

        :param receipt_message: The receipt_message of this Assignment.
        :type receipt_message: str
        """

        self._receipt_message = receipt_message

    @property
    def starts(self):
        """Gets the starts of this Assignment.


        :return: The starts of this Assignment.
        :rtype: datetime
        """
        return self._starts

    @starts.setter
    def starts(self, starts):
        """Sets the starts of this Assignment.


        :param starts: The starts of this Assignment.
        :type starts: datetime
        """

        self._starts = starts

    @property
    def tags(self):
        """Gets the tags of this Assignment.


        :return: The tags of this Assignment.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Assignment.


        :param tags: The tags of this Assignment.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def url_words(self):
        """Gets the url_words of this Assignment.


        :return: The url_words of this Assignment.
        :rtype: str
        """
        return self._url_words

    @url_words.setter
    def url_words(self, url_words):
        """Sets the url_words of this Assignment.


        :param url_words: The url_words of this Assignment.
        :type url_words: str
        """

        self._url_words = url_words

    @property
    def web_url(self):
        """Gets the web_url of this Assignment.


        :return: The web_url of this Assignment.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this Assignment.


        :param web_url: The web_url of this Assignment.
        :type web_url: str
        """

        self._web_url = web_url
