# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.moderation_state import ModerationState
from openapi_server import util


class ModerationAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, label: str=None, resulting_state: ModerationState=None):
        """ModerationAction - a model defined in OpenAPI

        :param id: The id of this ModerationAction.
        :param label: The label of this ModerationAction.
        :param resulting_state: The resulting_state of this ModerationAction.
        """
        self.openapi_types = {
            'id': str,
            'label': str,
            'resulting_state': ModerationState
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'resulting_state': 'resultingState'
        }

        self._id = id
        self._label = label
        self._resulting_state = resulting_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModerationAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModerationAction of this ModerationAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ModerationAction.


        :return: The id of this ModerationAction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModerationAction.


        :param id: The id of this ModerationAction.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """Gets the label of this ModerationAction.


        :return: The label of this ModerationAction.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ModerationAction.


        :param label: The label of this ModerationAction.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def resulting_state(self):
        """Gets the resulting_state of this ModerationAction.


        :return: The resulting_state of this ModerationAction.
        :rtype: ModerationState
        """
        return self._resulting_state

    @resulting_state.setter
    def resulting_state(self, resulting_state):
        """Sets the resulting_state of this ModerationAction.


        :param resulting_state: The resulting_state of this ModerationAction.
        :type resulting_state: ModerationState
        """
        if resulting_state is None:
            raise ValueError("Invalid value for `resulting_state`, must not be `None`")

        self._resulting_state = resulting_state
