# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArtifactFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, file_extension: str=None, for_content_type: str=None, label: str=None, preserve_aspect_ratio: bool=None, public: bool=None, upscale_allowed: bool=None):
        """ArtifactFormat - a model defined in OpenAPI

        :param content_type: The content_type of this ArtifactFormat.
        :param file_extension: The file_extension of this ArtifactFormat.
        :param for_content_type: The for_content_type of this ArtifactFormat.
        :param label: The label of this ArtifactFormat.
        :param preserve_aspect_ratio: The preserve_aspect_ratio of this ArtifactFormat.
        :param public: The public of this ArtifactFormat.
        :param upscale_allowed: The upscale_allowed of this ArtifactFormat.
        """
        self.openapi_types = {
            'content_type': str,
            'file_extension': str,
            'for_content_type': str,
            'label': str,
            'preserve_aspect_ratio': bool,
            'public': bool,
            'upscale_allowed': bool
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'file_extension': 'fileExtension',
            'for_content_type': 'forContentType',
            'label': 'label',
            'preserve_aspect_ratio': 'preserveAspectRatio',
            'public': 'public',
            'upscale_allowed': 'upscaleAllowed'
        }

        self._content_type = content_type
        self._file_extension = file_extension
        self._for_content_type = for_content_type
        self._label = label
        self._preserve_aspect_ratio = preserve_aspect_ratio
        self._public = public
        self._upscale_allowed = upscale_allowed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactFormat of this ArtifactFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this ArtifactFormat.


        :return: The content_type of this ArtifactFormat.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ArtifactFormat.


        :param content_type: The content_type of this ArtifactFormat.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def file_extension(self):
        """Gets the file_extension of this ArtifactFormat.


        :return: The file_extension of this ArtifactFormat.
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this ArtifactFormat.


        :param file_extension: The file_extension of this ArtifactFormat.
        :type file_extension: str
        """

        self._file_extension = file_extension

    @property
    def for_content_type(self):
        """Gets the for_content_type of this ArtifactFormat.


        :return: The for_content_type of this ArtifactFormat.
        :rtype: str
        """
        return self._for_content_type

    @for_content_type.setter
    def for_content_type(self, for_content_type):
        """Sets the for_content_type of this ArtifactFormat.


        :param for_content_type: The for_content_type of this ArtifactFormat.
        :type for_content_type: str
        """

        self._for_content_type = for_content_type

    @property
    def label(self):
        """Gets the label of this ArtifactFormat.


        :return: The label of this ArtifactFormat.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ArtifactFormat.


        :param label: The label of this ArtifactFormat.
        :type label: str
        """

        self._label = label

    @property
    def preserve_aspect_ratio(self):
        """Gets the preserve_aspect_ratio of this ArtifactFormat.


        :return: The preserve_aspect_ratio of this ArtifactFormat.
        :rtype: bool
        """
        return self._preserve_aspect_ratio

    @preserve_aspect_ratio.setter
    def preserve_aspect_ratio(self, preserve_aspect_ratio):
        """Sets the preserve_aspect_ratio of this ArtifactFormat.


        :param preserve_aspect_ratio: The preserve_aspect_ratio of this ArtifactFormat.
        :type preserve_aspect_ratio: bool
        """

        self._preserve_aspect_ratio = preserve_aspect_ratio

    @property
    def public(self):
        """Gets the public of this ArtifactFormat.


        :return: The public of this ArtifactFormat.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ArtifactFormat.


        :param public: The public of this ArtifactFormat.
        :type public: bool
        """

        self._public = public

    @property
    def upscale_allowed(self):
        """Gets the upscale_allowed of this ArtifactFormat.


        :return: The upscale_allowed of this ArtifactFormat.
        :rtype: bool
        """
        return self._upscale_allowed

    @upscale_allowed.setter
    def upscale_allowed(self, upscale_allowed):
        """Sets the upscale_allowed of this ArtifactFormat.


        :param upscale_allowed: The upscale_allowed of this ArtifactFormat.
        :type upscale_allowed: bool
        """

        self._upscale_allowed = upscale_allowed
