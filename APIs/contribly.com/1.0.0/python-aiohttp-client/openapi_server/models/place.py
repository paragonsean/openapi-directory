# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lat_long import LatLong
from openapi_server.models.osm_id import OsmId
from openapi_server import util


class Place(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, geohash: str=None, google: str=None, lat_long: LatLong=None, name: str=None, osm: OsmId=None):
        """Place - a model defined in OpenAPI

        :param country: The country of this Place.
        :param geohash: The geohash of this Place.
        :param google: The google of this Place.
        :param lat_long: The lat_long of this Place.
        :param name: The name of this Place.
        :param osm: The osm of this Place.
        """
        self.openapi_types = {
            'country': str,
            'geohash': str,
            'google': str,
            'lat_long': LatLong,
            'name': str,
            'osm': OsmId
        }

        self.attribute_map = {
            'country': 'country',
            'geohash': 'geohash',
            'google': 'google',
            'lat_long': 'latLong',
            'name': 'name',
            'osm': 'osm'
        }

        self._country = country
        self._geohash = geohash
        self._google = google
        self._lat_long = lat_long
        self._name = name
        self._osm = osm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Place':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Place of this Place.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Place.


        :return: The country of this Place.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Place.


        :param country: The country of this Place.
        :type country: str
        """

        self._country = country

    @property
    def geohash(self):
        """Gets the geohash of this Place.


        :return: The geohash of this Place.
        :rtype: str
        """
        return self._geohash

    @geohash.setter
    def geohash(self, geohash):
        """Sets the geohash of this Place.


        :param geohash: The geohash of this Place.
        :type geohash: str
        """

        self._geohash = geohash

    @property
    def google(self):
        """Gets the google of this Place.


        :return: The google of this Place.
        :rtype: str
        """
        return self._google

    @google.setter
    def google(self, google):
        """Sets the google of this Place.


        :param google: The google of this Place.
        :type google: str
        """

        self._google = google

    @property
    def lat_long(self):
        """Gets the lat_long of this Place.


        :return: The lat_long of this Place.
        :rtype: LatLong
        """
        return self._lat_long

    @lat_long.setter
    def lat_long(self, lat_long):
        """Sets the lat_long of this Place.


        :param lat_long: The lat_long of this Place.
        :type lat_long: LatLong
        """

        self._lat_long = lat_long

    @property
    def name(self):
        """Gets the name of this Place.


        :return: The name of this Place.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Place.


        :param name: The name of this Place.
        :type name: str
        """

        self._name = name

    @property
    def osm(self):
        """Gets the osm of this Place.


        :return: The osm of this Place.
        :rtype: OsmId
        """
        return self._osm

    @osm.setter
    def osm(self, osm):
        """Sets the osm of this Place.


        :param osm: The osm of this Place.
        :type osm: OsmId
        """

        self._osm = osm
