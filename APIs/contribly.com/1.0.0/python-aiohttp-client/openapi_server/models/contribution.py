# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment import Assignment
from openapi_server.models.media_usage import MediaUsage
from openapi_server.models.moderation_history_item import ModerationHistoryItem
from openapi_server.models.place import Place
from openapi_server.models.via import Via
from openapi_server import util


class Contribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignment: Assignment=None, attribution: str=None, body: str=None, created: datetime=None, headline: str=None, id: str=None, media_usages: List[MediaUsage]=None, moderation_history: List[ModerationHistoryItem]=None, place: Place=None, url_words: str=None, via: Via=None):
        """Contribution - a model defined in OpenAPI

        :param assignment: The assignment of this Contribution.
        :param attribution: The attribution of this Contribution.
        :param body: The body of this Contribution.
        :param created: The created of this Contribution.
        :param headline: The headline of this Contribution.
        :param id: The id of this Contribution.
        :param media_usages: The media_usages of this Contribution.
        :param moderation_history: The moderation_history of this Contribution.
        :param place: The place of this Contribution.
        :param url_words: The url_words of this Contribution.
        :param via: The via of this Contribution.
        """
        self.openapi_types = {
            'assignment': Assignment,
            'attribution': str,
            'body': str,
            'created': datetime,
            'headline': str,
            'id': str,
            'media_usages': List[MediaUsage],
            'moderation_history': List[ModerationHistoryItem],
            'place': Place,
            'url_words': str,
            'via': Via
        }

        self.attribute_map = {
            'assignment': 'assignment',
            'attribution': 'attribution',
            'body': 'body',
            'created': 'created',
            'headline': 'headline',
            'id': 'id',
            'media_usages': 'mediaUsages',
            'moderation_history': 'moderationHistory',
            'place': 'place',
            'url_words': 'urlWords',
            'via': 'via'
        }

        self._assignment = assignment
        self._attribution = attribution
        self._body = body
        self._created = created
        self._headline = headline
        self._id = id
        self._media_usages = media_usages
        self._moderation_history = moderation_history
        self._place = place
        self._url_words = url_words
        self._via = via

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contribution of this Contribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignment(self):
        """Gets the assignment of this Contribution.


        :return: The assignment of this Contribution.
        :rtype: Assignment
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this Contribution.


        :param assignment: The assignment of this Contribution.
        :type assignment: Assignment
        """

        self._assignment = assignment

    @property
    def attribution(self):
        """Gets the attribution of this Contribution.

        The public attribution for this contribution. This will be the display name of the registered user or the contributor's first and last name if they provided them while making a non authenticated contribution. A blank attribution field indicates and anonymous contribution.

        :return: The attribution of this Contribution.
        :rtype: str
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this Contribution.

        The public attribution for this contribution. This will be the display name of the registered user or the contributor's first and last name if they provided them while making a non authenticated contribution. A blank attribution field indicates and anonymous contribution.

        :param attribution: The attribution of this Contribution.
        :type attribution: str
        """

        self._attribution = attribution

    @property
    def body(self):
        """Gets the body of this Contribution.


        :return: The body of this Contribution.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Contribution.


        :param body: The body of this Contribution.
        :type body: str
        """

        self._body = body

    @property
    def created(self):
        """Gets the created of this Contribution.


        :return: The created of this Contribution.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Contribution.


        :param created: The created of this Contribution.
        :type created: datetime
        """

        self._created = created

    @property
    def headline(self):
        """Gets the headline of this Contribution.


        :return: The headline of this Contribution.
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this Contribution.


        :param headline: The headline of this Contribution.
        :type headline: str
        """

        self._headline = headline

    @property
    def id(self):
        """Gets the id of this Contribution.


        :return: The id of this Contribution.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contribution.


        :param id: The id of this Contribution.
        :type id: str
        """

        self._id = id

    @property
    def media_usages(self):
        """Gets the media_usages of this Contribution.


        :return: The media_usages of this Contribution.
        :rtype: List[MediaUsage]
        """
        return self._media_usages

    @media_usages.setter
    def media_usages(self, media_usages):
        """Sets the media_usages of this Contribution.


        :param media_usages: The media_usages of this Contribution.
        :type media_usages: List[MediaUsage]
        """

        self._media_usages = media_usages

    @property
    def moderation_history(self):
        """Gets the moderation_history of this Contribution.


        :return: The moderation_history of this Contribution.
        :rtype: List[ModerationHistoryItem]
        """
        return self._moderation_history

    @moderation_history.setter
    def moderation_history(self, moderation_history):
        """Sets the moderation_history of this Contribution.


        :param moderation_history: The moderation_history of this Contribution.
        :type moderation_history: List[ModerationHistoryItem]
        """

        self._moderation_history = moderation_history

    @property
    def place(self):
        """Gets the place of this Contribution.


        :return: The place of this Contribution.
        :rtype: Place
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this Contribution.


        :param place: The place of this Contribution.
        :type place: Place
        """

        self._place = place

    @property
    def url_words(self):
        """Gets the url_words of this Contribution.


        :return: The url_words of this Contribution.
        :rtype: str
        """
        return self._url_words

    @url_words.setter
    def url_words(self, url_words):
        """Sets the url_words of this Contribution.


        :param url_words: The url_words of this Contribution.
        :type url_words: str
        """

        self._url_words = url_words

    @property
    def via(self):
        """Gets the via of this Contribution.


        :return: The via of this Contribution.
        :rtype: Via
        """
        return self._via

    @via.setter
    def via(self, via):
        """Sets the via of this Contribution.


        :param via: The via of this Contribution.
        :type via: Via
        """

        self._via = via
