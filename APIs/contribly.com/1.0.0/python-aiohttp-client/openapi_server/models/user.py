# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bio: str=None, display_name: str=None, id: str=None, registered: datetime=None, username: str=None):
        """User - a model defined in OpenAPI

        :param bio: The bio of this User.
        :param display_name: The display_name of this User.
        :param id: The id of this User.
        :param registered: The registered of this User.
        :param username: The username of this User.
        """
        self.openapi_types = {
            'bio': str,
            'display_name': str,
            'id': str,
            'registered': datetime,
            'username': str
        }

        self.attribute_map = {
            'bio': 'bio',
            'display_name': 'displayName',
            'id': 'id',
            'registered': 'registered',
            'username': 'username'
        }

        self._bio = bio
        self._display_name = display_name
        self._id = id
        self._registered = registered
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bio(self):
        """Gets the bio of this User.


        :return: The bio of this User.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this User.


        :param bio: The bio of this User.
        :type bio: str
        """

        self._bio = bio

    @property
    def display_name(self):
        """Gets the display_name of this User.


        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.


        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def registered(self):
        """Gets the registered of this User.


        :return: The registered of this User.
        :rtype: datetime
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this User.


        :param registered: The registered of this User.
        :type registered: datetime
        """

        self._registered = registered

    @property
    def username(self):
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username
