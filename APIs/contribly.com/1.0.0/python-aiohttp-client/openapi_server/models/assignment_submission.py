# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_usage import MediaUsage
from openapi_server.models.tag import Tag
from openapi_server import util


class AssignmentSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allows_anonymous_contributions: bool=None, cover: MediaUsage=None, description: str=None, embargo: datetime=None, ends: datetime=None, featured: bool=None, id: str=None, media_required: bool=None, moderator: str=None, name: str=None, receipt_message: str=None, starts: datetime=None, tags: List[Tag]=None, url_words: str=None):
        """AssignmentSubmission - a model defined in OpenAPI

        :param allows_anonymous_contributions: The allows_anonymous_contributions of this AssignmentSubmission.
        :param cover: The cover of this AssignmentSubmission.
        :param description: The description of this AssignmentSubmission.
        :param embargo: The embargo of this AssignmentSubmission.
        :param ends: The ends of this AssignmentSubmission.
        :param featured: The featured of this AssignmentSubmission.
        :param id: The id of this AssignmentSubmission.
        :param media_required: The media_required of this AssignmentSubmission.
        :param moderator: The moderator of this AssignmentSubmission.
        :param name: The name of this AssignmentSubmission.
        :param receipt_message: The receipt_message of this AssignmentSubmission.
        :param starts: The starts of this AssignmentSubmission.
        :param tags: The tags of this AssignmentSubmission.
        :param url_words: The url_words of this AssignmentSubmission.
        """
        self.openapi_types = {
            'allows_anonymous_contributions': bool,
            'cover': MediaUsage,
            'description': str,
            'embargo': datetime,
            'ends': datetime,
            'featured': bool,
            'id': str,
            'media_required': bool,
            'moderator': str,
            'name': str,
            'receipt_message': str,
            'starts': datetime,
            'tags': List[Tag],
            'url_words': str
        }

        self.attribute_map = {
            'allows_anonymous_contributions': 'allowsAnonymousContributions',
            'cover': 'cover',
            'description': 'description',
            'embargo': 'embargo',
            'ends': 'ends',
            'featured': 'featured',
            'id': 'id',
            'media_required': 'mediaRequired',
            'moderator': 'moderator',
            'name': 'name',
            'receipt_message': 'receiptMessage',
            'starts': 'starts',
            'tags': 'tags',
            'url_words': 'urlWords'
        }

        self._allows_anonymous_contributions = allows_anonymous_contributions
        self._cover = cover
        self._description = description
        self._embargo = embargo
        self._ends = ends
        self._featured = featured
        self._id = id
        self._media_required = media_required
        self._moderator = moderator
        self._name = name
        self._receipt_message = receipt_message
        self._starts = starts
        self._tags = tags
        self._url_words = url_words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignmentSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignmentSubmission of this AssignmentSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allows_anonymous_contributions(self):
        """Gets the allows_anonymous_contributions of this AssignmentSubmission.


        :return: The allows_anonymous_contributions of this AssignmentSubmission.
        :rtype: bool
        """
        return self._allows_anonymous_contributions

    @allows_anonymous_contributions.setter
    def allows_anonymous_contributions(self, allows_anonymous_contributions):
        """Sets the allows_anonymous_contributions of this AssignmentSubmission.


        :param allows_anonymous_contributions: The allows_anonymous_contributions of this AssignmentSubmission.
        :type allows_anonymous_contributions: bool
        """

        self._allows_anonymous_contributions = allows_anonymous_contributions

    @property
    def cover(self):
        """Gets the cover of this AssignmentSubmission.


        :return: The cover of this AssignmentSubmission.
        :rtype: MediaUsage
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this AssignmentSubmission.


        :param cover: The cover of this AssignmentSubmission.
        :type cover: MediaUsage
        """

        self._cover = cover

    @property
    def description(self):
        """Gets the description of this AssignmentSubmission.


        :return: The description of this AssignmentSubmission.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssignmentSubmission.


        :param description: The description of this AssignmentSubmission.
        :type description: str
        """

        self._description = description

    @property
    def embargo(self):
        """Gets the embargo of this AssignmentSubmission.


        :return: The embargo of this AssignmentSubmission.
        :rtype: datetime
        """
        return self._embargo

    @embargo.setter
    def embargo(self, embargo):
        """Sets the embargo of this AssignmentSubmission.


        :param embargo: The embargo of this AssignmentSubmission.
        :type embargo: datetime
        """

        self._embargo = embargo

    @property
    def ends(self):
        """Gets the ends of this AssignmentSubmission.


        :return: The ends of this AssignmentSubmission.
        :rtype: datetime
        """
        return self._ends

    @ends.setter
    def ends(self, ends):
        """Sets the ends of this AssignmentSubmission.


        :param ends: The ends of this AssignmentSubmission.
        :type ends: datetime
        """

        self._ends = ends

    @property
    def featured(self):
        """Gets the featured of this AssignmentSubmission.


        :return: The featured of this AssignmentSubmission.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this AssignmentSubmission.


        :param featured: The featured of this AssignmentSubmission.
        :type featured: bool
        """

        self._featured = featured

    @property
    def id(self):
        """Gets the id of this AssignmentSubmission.


        :return: The id of this AssignmentSubmission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssignmentSubmission.


        :param id: The id of this AssignmentSubmission.
        :type id: str
        """

        self._id = id

    @property
    def media_required(self):
        """Gets the media_required of this AssignmentSubmission.


        :return: The media_required of this AssignmentSubmission.
        :rtype: bool
        """
        return self._media_required

    @media_required.setter
    def media_required(self, media_required):
        """Sets the media_required of this AssignmentSubmission.


        :param media_required: The media_required of this AssignmentSubmission.
        :type media_required: bool
        """

        self._media_required = media_required

    @property
    def moderator(self):
        """Gets the moderator of this AssignmentSubmission.

        Optional credential id of the login which will moderator this assignment.

        :return: The moderator of this AssignmentSubmission.
        :rtype: str
        """
        return self._moderator

    @moderator.setter
    def moderator(self, moderator):
        """Sets the moderator of this AssignmentSubmission.

        Optional credential id of the login which will moderator this assignment.

        :param moderator: The moderator of this AssignmentSubmission.
        :type moderator: str
        """

        self._moderator = moderator

    @property
    def name(self):
        """Gets the name of this AssignmentSubmission.


        :return: The name of this AssignmentSubmission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssignmentSubmission.


        :param name: The name of this AssignmentSubmission.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def receipt_message(self):
        """Gets the receipt_message of this AssignmentSubmission.

        An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.

        :return: The receipt_message of this AssignmentSubmission.
        :rtype: str
        """
        return self._receipt_message

    @receipt_message.setter
    def receipt_message(self, receipt_message):
        """Sets the receipt_message of this AssignmentSubmission.

        An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.

        :param receipt_message: The receipt_message of this AssignmentSubmission.
        :type receipt_message: str
        """

        self._receipt_message = receipt_message

    @property
    def starts(self):
        """Gets the starts of this AssignmentSubmission.


        :return: The starts of this AssignmentSubmission.
        :rtype: datetime
        """
        return self._starts

    @starts.setter
    def starts(self, starts):
        """Sets the starts of this AssignmentSubmission.


        :param starts: The starts of this AssignmentSubmission.
        :type starts: datetime
        """

        self._starts = starts

    @property
    def tags(self):
        """Gets the tags of this AssignmentSubmission.


        :return: The tags of this AssignmentSubmission.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssignmentSubmission.


        :param tags: The tags of this AssignmentSubmission.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def url_words(self):
        """Gets the url_words of this AssignmentSubmission.


        :return: The url_words of this AssignmentSubmission.
        :rtype: str
        """
        return self._url_words

    @url_words.setter
    def url_words(self, url_words):
        """Sets the url_words of this AssignmentSubmission.


        :param url_words: The url_words of this AssignmentSubmission.
        :type url_words: str
        """

        self._url_words = url_words
