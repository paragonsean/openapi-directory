# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contributions: float=None, estimated_size: str=None, media: float=None, total_media_size: float=None):
        """ExportSummary - a model defined in OpenAPI

        :param contributions: The contributions of this ExportSummary.
        :param estimated_size: The estimated_size of this ExportSummary.
        :param media: The media of this ExportSummary.
        :param total_media_size: The total_media_size of this ExportSummary.
        """
        self.openapi_types = {
            'contributions': float,
            'estimated_size': str,
            'media': float,
            'total_media_size': float
        }

        self.attribute_map = {
            'contributions': 'contributions',
            'estimated_size': 'estimatedSize',
            'media': 'media',
            'total_media_size': 'totalMediaSize'
        }

        self._contributions = contributions
        self._estimated_size = estimated_size
        self._media = media
        self._total_media_size = total_media_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportSummary of this ExportSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contributions(self):
        """Gets the contributions of this ExportSummary.

        The number of contributions selected for export.

        :return: The contributions of this ExportSummary.
        :rtype: float
        """
        return self._contributions

    @contributions.setter
    def contributions(self, contributions):
        """Sets the contributions of this ExportSummary.

        The number of contributions selected for export.

        :param contributions: The contributions of this ExportSummary.
        :type contributions: float
        """
        if contributions is None:
            raise ValueError("Invalid value for `contributions`, must not be `None`")

        self._contributions = contributions

    @property
    def estimated_size(self):
        """Gets the estimated_size of this ExportSummary.

        Human readable estimate of the export size. ie. '10MB'.

        :return: The estimated_size of this ExportSummary.
        :rtype: str
        """
        return self._estimated_size

    @estimated_size.setter
    def estimated_size(self, estimated_size):
        """Sets the estimated_size of this ExportSummary.

        Human readable estimate of the export size. ie. '10MB'.

        :param estimated_size: The estimated_size of this ExportSummary.
        :type estimated_size: str
        """

        self._estimated_size = estimated_size

    @property
    def media(self):
        """Gets the media of this ExportSummary.

        The number of media files included in this export.

        :return: The media of this ExportSummary.
        :rtype: float
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this ExportSummary.

        The number of media files included in this export.

        :param media: The media of this ExportSummary.
        :type media: float
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def total_media_size(self):
        """Gets the total_media_size of this ExportSummary.

        The expected total size of the media files to be exported.

        :return: The total_media_size of this ExportSummary.
        :rtype: float
        """
        return self._total_media_size

    @total_media_size.setter
    def total_media_size(self, total_media_size):
        """Sets the total_media_size of this ExportSummary.

        The expected total size of the media files to be exported.

        :param total_media_size: The total_media_size of this ExportSummary.
        :type total_media_size: float
        """
        if total_media_size is None:
            raise ValueError("Invalid value for `total_media_size`, must not be `None`")

        self._total_media_size = total_media_size
