# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignment: str=None, email: str=None, id: str=None, include_body: bool=None, include_thumbenail: bool=None, slack_channel: str=None, token: str=None, types: List[str]=None, user: str=None):
        """Subscription - a model defined in OpenAPI

        :param assignment: The assignment of this Subscription.
        :param email: The email of this Subscription.
        :param id: The id of this Subscription.
        :param include_body: The include_body of this Subscription.
        :param include_thumbenail: The include_thumbenail of this Subscription.
        :param slack_channel: The slack_channel of this Subscription.
        :param token: The token of this Subscription.
        :param types: The types of this Subscription.
        :param user: The user of this Subscription.
        """
        self.openapi_types = {
            'assignment': str,
            'email': str,
            'id': str,
            'include_body': bool,
            'include_thumbenail': bool,
            'slack_channel': str,
            'token': str,
            'types': List[str],
            'user': str
        }

        self.attribute_map = {
            'assignment': 'assignment',
            'email': 'email',
            'id': 'id',
            'include_body': 'includeBody',
            'include_thumbenail': 'includeThumbenail',
            'slack_channel': 'slackChannel',
            'token': 'token',
            'types': 'types',
            'user': 'user'
        }

        self._assignment = assignment
        self._email = email
        self._id = id
        self._include_body = include_body
        self._include_thumbenail = include_thumbenail
        self._slack_channel = slack_channel
        self._token = token
        self._types = types
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignment(self):
        """Gets the assignment of this Subscription.


        :return: The assignment of this Subscription.
        :rtype: str
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this Subscription.


        :param assignment: The assignment of this Subscription.
        :type assignment: str
        """

        self._assignment = assignment

    @property
    def email(self):
        """Gets the email of this Subscription.


        :return: The email of this Subscription.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Subscription.


        :param email: The email of this Subscription.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this Subscription.


        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def include_body(self):
        """Gets the include_body of this Subscription.


        :return: The include_body of this Subscription.
        :rtype: bool
        """
        return self._include_body

    @include_body.setter
    def include_body(self, include_body):
        """Sets the include_body of this Subscription.


        :param include_body: The include_body of this Subscription.
        :type include_body: bool
        """
        if include_body is None:
            raise ValueError("Invalid value for `include_body`, must not be `None`")

        self._include_body = include_body

    @property
    def include_thumbenail(self):
        """Gets the include_thumbenail of this Subscription.


        :return: The include_thumbenail of this Subscription.
        :rtype: bool
        """
        return self._include_thumbenail

    @include_thumbenail.setter
    def include_thumbenail(self, include_thumbenail):
        """Sets the include_thumbenail of this Subscription.


        :param include_thumbenail: The include_thumbenail of this Subscription.
        :type include_thumbenail: bool
        """

        self._include_thumbenail = include_thumbenail

    @property
    def slack_channel(self):
        """Gets the slack_channel of this Subscription.


        :return: The slack_channel of this Subscription.
        :rtype: str
        """
        return self._slack_channel

    @slack_channel.setter
    def slack_channel(self, slack_channel):
        """Sets the slack_channel of this Subscription.


        :param slack_channel: The slack_channel of this Subscription.
        :type slack_channel: str
        """

        self._slack_channel = slack_channel

    @property
    def token(self):
        """Gets the token of this Subscription.


        :return: The token of this Subscription.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Subscription.


        :param token: The token of this Subscription.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def types(self):
        """Gets the types of this Subscription.


        :return: The types of this Subscription.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this Subscription.


        :param types: The types of this Subscription.
        :type types: List[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types

    @property
    def user(self):
        """Gets the user of this Subscription.


        :return: The user of this Subscription.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Subscription.


        :param user: The user of this Subscription.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
