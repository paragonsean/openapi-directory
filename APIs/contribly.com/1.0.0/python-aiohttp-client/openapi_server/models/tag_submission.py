# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag_set import TagSet
from openapi_server import util


class TagSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, colour: str=None, name: str=None, tag_set: TagSet=None, url_words: str=None):
        """TagSubmission - a model defined in OpenAPI

        :param colour: The colour of this TagSubmission.
        :param name: The name of this TagSubmission.
        :param tag_set: The tag_set of this TagSubmission.
        :param url_words: The url_words of this TagSubmission.
        """
        self.openapi_types = {
            'colour': str,
            'name': str,
            'tag_set': TagSet,
            'url_words': str
        }

        self.attribute_map = {
            'colour': 'colour',
            'name': 'name',
            'tag_set': 'tagSet',
            'url_words': 'urlWords'
        }

        self._colour = colour
        self._name = name
        self._tag_set = tag_set
        self._url_words = url_words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagSubmission of this TagSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def colour(self):
        """Gets the colour of this TagSubmission.


        :return: The colour of this TagSubmission.
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this TagSubmission.


        :param colour: The colour of this TagSubmission.
        :type colour: str
        """

        self._colour = colour

    @property
    def name(self):
        """Gets the name of this TagSubmission.


        :return: The name of this TagSubmission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagSubmission.


        :param name: The name of this TagSubmission.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def tag_set(self):
        """Gets the tag_set of this TagSubmission.


        :return: The tag_set of this TagSubmission.
        :rtype: TagSet
        """
        return self._tag_set

    @tag_set.setter
    def tag_set(self, tag_set):
        """Sets the tag_set of this TagSubmission.


        :param tag_set: The tag_set of this TagSubmission.
        :type tag_set: TagSet
        """

        self._tag_set = tag_set

    @property
    def url_words(self):
        """Gets the url_words of this TagSubmission.


        :return: The url_words of this TagSubmission.
        :rtype: str
        """
        return self._url_words

    @url_words.setter
    def url_words(self, url_words):
        """Sets the url_words of this TagSubmission.


        :param url_words: The url_words of this TagSubmission.
        :type url_words: str
        """

        self._url_words = url_words
