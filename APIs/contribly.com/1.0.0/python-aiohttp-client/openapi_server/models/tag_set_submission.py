# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagSetSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, url_words: str=None):
        """TagSetSubmission - a model defined in OpenAPI

        :param name: The name of this TagSetSubmission.
        :param url_words: The url_words of this TagSetSubmission.
        """
        self.openapi_types = {
            'name': str,
            'url_words': str
        }

        self.attribute_map = {
            'name': 'name',
            'url_words': 'urlWords'
        }

        self._name = name
        self._url_words = url_words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagSetSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagSetSubmission of this TagSetSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TagSetSubmission.


        :return: The name of this TagSetSubmission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagSetSubmission.


        :param name: The name of this TagSetSubmission.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def url_words(self):
        """Gets the url_words of this TagSetSubmission.


        :return: The url_words of this TagSetSubmission.
        :rtype: str
        """
        return self._url_words

    @url_words.setter
    def url_words(self, url_words):
        """Sets the url_words of this TagSetSubmission.


        :param url_words: The url_words of this TagSetSubmission.
        :type url_words: str
        """
        if url_words is None:
            raise ValueError("Invalid value for `url_words`, must not be `None`")

        self._url_words = url_words
