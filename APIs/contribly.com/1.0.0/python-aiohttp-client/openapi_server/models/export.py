# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Export(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, download_url: str=None, finished: datetime=None, id: str=None, owner: str=None, progress: float=None, started: datetime=None, step: str=None):
        """Export - a model defined in OpenAPI

        :param download_url: The download_url of this Export.
        :param finished: The finished of this Export.
        :param id: The id of this Export.
        :param owner: The owner of this Export.
        :param progress: The progress of this Export.
        :param started: The started of this Export.
        :param step: The step of this Export.
        """
        self.openapi_types = {
            'download_url': str,
            'finished': datetime,
            'id': str,
            'owner': str,
            'progress': float,
            'started': datetime,
            'step': str
        }

        self.attribute_map = {
            'download_url': 'downloadUrl',
            'finished': 'finished',
            'id': 'id',
            'owner': 'owner',
            'progress': 'progress',
            'started': 'started',
            'step': 'step'
        }

        self._download_url = download_url
        self._finished = finished
        self._id = id
        self._owner = owner
        self._progress = progress
        self._started = started
        self._step = step

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Export':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Export of this Export.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def download_url(self):
        """Gets the download_url of this Export.


        :return: The download_url of this Export.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Export.


        :param download_url: The download_url of this Export.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def finished(self):
        """Gets the finished of this Export.


        :return: The finished of this Export.
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Export.


        :param finished: The finished of this Export.
        :type finished: datetime
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this Export.


        :return: The id of this Export.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Export.


        :param id: The id of this Export.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this Export.


        :return: The owner of this Export.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Export.


        :param owner: The owner of this Export.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def progress(self):
        """Gets the progress of this Export.


        :return: The progress of this Export.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Export.


        :param progress: The progress of this Export.
        :type progress: float
        """

        self._progress = progress

    @property
    def started(self):
        """Gets the started of this Export.


        :return: The started of this Export.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Export.


        :param started: The started of this Export.
        :type started: datetime
        """
        if started is None:
            raise ValueError("Invalid value for `started`, must not be `None`")

        self._started = started

    @property
    def step(self):
        """Gets the step of this Export.


        :return: The step of this Export.
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this Export.


        :param step: The step of this Export.
        :type step: str
        """

        self._step = step
