# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FormField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, label: str=None, name: str=None, options: List[str]=None, public: bool=None, required: bool=None, type: str=None):
        """FormField - a model defined in OpenAPI

        :param description: The description of this FormField.
        :param label: The label of this FormField.
        :param name: The name of this FormField.
        :param options: The options of this FormField.
        :param public: The public of this FormField.
        :param required: The required of this FormField.
        :param type: The type of this FormField.
        """
        self.openapi_types = {
            'description': str,
            'label': str,
            'name': str,
            'options': List[str],
            'public': bool,
            'required': bool,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'label': 'label',
            'name': 'name',
            'options': 'options',
            'public': 'public',
            'required': 'required',
            'type': 'type'
        }

        self._description = description
        self._label = label
        self._name = name
        self._options = options
        self._public = public
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FormField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FormField of this FormField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this FormField.


        :return: The description of this FormField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FormField.


        :param description: The description of this FormField.
        :type description: str
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this FormField.


        :return: The label of this FormField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FormField.


        :param label: The label of this FormField.
        :type label: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this FormField.


        :return: The name of this FormField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormField.


        :param name: The name of this FormField.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this FormField.


        :return: The options of this FormField.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FormField.


        :param options: The options of this FormField.
        :type options: List[str]
        """

        self._options = options

    @property
    def public(self):
        """Gets the public of this FormField.


        :return: The public of this FormField.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this FormField.


        :param public: The public of this FormField.
        :type public: bool
        """

        self._public = public

    @property
    def required(self):
        """Gets the required of this FormField.


        :return: The required of this FormField.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this FormField.


        :param required: The required of this FormField.
        :type required: bool
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this FormField.


        :return: The type of this FormField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FormField.


        :param type: The type of this FormField.
        :type type: str
        """

        self._type = type
