/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Deployment model module.
 * @module model/Deployment
 * @version 1.0.0
 */
class Deployment {
    /**
     * Constructs a new <code>Deployment</code>.
     * @alias module:model/Deployment
     * @param repoState {String} 
     * @param shutdownable {Boolean} 
     * @param type {String} 
     * @param url {String} 
     */
    constructor(repoState, shutdownable, type, url) { 
        
        Deployment.initialize(this, repoState, shutdownable, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repoState, shutdownable, type, url) { 
        obj['repoState'] = repoState;
        obj['shutdownable'] = shutdownable || false;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Deployment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Deployment} obj Optional instance to populate.
     * @return {module:model/Deployment} The populated <code>Deployment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Deployment();

            if (data.hasOwnProperty('httpUrl')) {
                obj['httpUrl'] = ApiClient.convertToType(data['httpUrl'], 'String');
            }
            if (data.hasOwnProperty('repoState')) {
                obj['repoState'] = ApiClient.convertToType(data['repoState'], 'String');
            }
            if (data.hasOwnProperty('shutdownable')) {
                obj['shutdownable'] = ApiClient.convertToType(data['shutdownable'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Deployment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Deployment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Deployment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['httpUrl'] && !(typeof data['httpUrl'] === 'string' || data['httpUrl'] instanceof String)) {
            throw new Error("Expected the field `httpUrl` to be a primitive type in the JSON string but got " + data['httpUrl']);
        }
        // ensure the json data is a string
        if (data['repoState'] && !(typeof data['repoState'] === 'string' || data['repoState'] instanceof String)) {
            throw new Error("Expected the field `repoState` to be a primitive type in the JSON string but got " + data['repoState']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Deployment.RequiredProperties = ["repoState", "shutdownable", "type", "url"];

/**
 * @member {String} httpUrl
 */
Deployment.prototype['httpUrl'] = undefined;

/**
 * @member {String} repoState
 */
Deployment.prototype['repoState'] = undefined;

/**
 * @member {Boolean} shutdownable
 * @default false
 */
Deployment.prototype['shutdownable'] = false;

/**
 * @member {String} type
 */
Deployment.prototype['type'] = undefined;

/**
 * @member {String} url
 */
Deployment.prototype['url'] = undefined;






export default Deployment;

