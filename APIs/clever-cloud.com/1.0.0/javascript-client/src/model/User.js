/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 1.0.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * A user representation
     * @alias module:model/User
     * @param address {String} The address of the user
     * @param admin {Boolean} Is the user an administrator ?
     * @param avatar {String} The location of the user's avatar
     * @param canPay {Boolean} Does the user can pay ?
     * @param city {String} The city of the user
     * @param country {String} The country of the user
     * @param creationDate {Number} The creation timestamp of the user
     * @param email {String} The email of the user
     * @param emailValidated {Boolean} Does the user email is validate
     * @param id {String} The id of the user : `user_${uuid}`
     * @param lang {String} The lang of the user
     * @param name {String} The name of the user
     * @param oauthApps {Array.<String>} The list of token oauth
     * @param phone {String} The phone of the user
     * @param zipcode {String} The zipcode of the user
     */
    constructor(address, admin, avatar, canPay, city, country, creationDate, email, emailValidated, id, lang, name, oauthApps, phone, zipcode) { 
        
        User.initialize(this, address, admin, avatar, canPay, city, country, creationDate, email, emailValidated, id, lang, name, oauthApps, phone, zipcode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, admin, avatar, canPay, city, country, creationDate, email, emailValidated, id, lang, name, oauthApps, phone, zipcode) { 
        obj['address'] = address;
        obj['admin'] = admin || false;
        obj['avatar'] = avatar;
        obj['canPay'] = canPay || false;
        obj['city'] = city;
        obj['country'] = country;
        obj['creationDate'] = creationDate;
        obj['email'] = email;
        obj['emailValidated'] = emailValidated || false;
        obj['hasPassword'] = false;
        obj['id'] = id;
        obj['lang'] = lang;
        obj['name'] = name;
        obj['oauthApps'] = oauthApps;
        obj['phone'] = phone;
        obj['zipcode'] = zipcode;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'Boolean');
            }
            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('canPay')) {
                obj['canPay'] = ApiClient.convertToType(data['canPay'], 'Boolean');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('emailValidated')) {
                obj['emailValidated'] = ApiClient.convertToType(data['emailValidated'], 'Boolean');
            }
            if (data.hasOwnProperty('hasPassword')) {
                obj['hasPassword'] = ApiClient.convertToType(data['hasPassword'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('oauthApps')) {
                obj['oauthApps'] = ApiClient.convertToType(data['oauthApps'], ['String']);
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('preferredMFA')) {
                obj['preferredMFA'] = ApiClient.convertToType(data['preferredMFA'], 'String');
            }
            if (data.hasOwnProperty('zipcode')) {
                obj['zipcode'] = ApiClient.convertToType(data['zipcode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['oauthApps'])) {
            throw new Error("Expected the field `oauthApps` to be an array in the JSON data but got " + data['oauthApps']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['preferredMFA'] && !(typeof data['preferredMFA'] === 'string' || data['preferredMFA'] instanceof String)) {
            throw new Error("Expected the field `preferredMFA` to be a primitive type in the JSON string but got " + data['preferredMFA']);
        }
        // ensure the json data is a string
        if (data['zipcode'] && !(typeof data['zipcode'] === 'string' || data['zipcode'] instanceof String)) {
            throw new Error("Expected the field `zipcode` to be a primitive type in the JSON string but got " + data['zipcode']);
        }

        return true;
    }


}

User.RequiredProperties = ["address", "admin", "avatar", "canPay", "city", "country", "creationDate", "email", "emailValidated", "id", "lang", "name", "oauthApps", "phone", "zipcode"];

/**
 * The address of the user
 * @member {String} address
 */
User.prototype['address'] = undefined;

/**
 * Is the user an administrator ?
 * @member {Boolean} admin
 * @default false
 */
User.prototype['admin'] = false;

/**
 * The location of the user's avatar
 * @member {String} avatar
 */
User.prototype['avatar'] = undefined;

/**
 * Does the user can pay ?
 * @member {Boolean} canPay
 * @default false
 */
User.prototype['canPay'] = false;

/**
 * The city of the user
 * @member {String} city
 */
User.prototype['city'] = undefined;

/**
 * The country of the user
 * @member {String} country
 */
User.prototype['country'] = undefined;

/**
 * The creation timestamp of the user
 * @member {Number} creationDate
 */
User.prototype['creationDate'] = undefined;

/**
 * The email of the user
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * Does the user email is validate
 * @member {Boolean} emailValidated
 * @default false
 */
User.prototype['emailValidated'] = false;

/**
 * @member {Boolean} hasPassword
 * @default false
 */
User.prototype['hasPassword'] = false;

/**
 * The id of the user : `user_${uuid}`
 * @member {String} id
 */
User.prototype['id'] = undefined;

/**
 * The lang of the user
 * @member {String} lang
 */
User.prototype['lang'] = undefined;

/**
 * The name of the user
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * The list of token oauth
 * @member {Array.<String>} oauthApps
 */
User.prototype['oauthApps'] = undefined;

/**
 * The phone of the user
 * @member {String} phone
 */
User.prototype['phone'] = undefined;

/**
 * @member {String} preferredMFA
 */
User.prototype['preferredMFA'] = undefined;

/**
 * The zipcode of the user
 * @member {String} zipcode
 */
User.prototype['zipcode'] = undefined;






export default User;

