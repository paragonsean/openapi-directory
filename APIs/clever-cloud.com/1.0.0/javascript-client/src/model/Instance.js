/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Flavor from './Flavor';
import Variant from './Variant';

/**
 * The Instance model module.
 * @module model/Instance
 * @version 1.0.0
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * @alias module:model/Instance
     * @param defaultEnv {Object} 
     * @param flavors {Array.<module:model/Flavor>} 
     * @param instanceAndVersion {String} 
     * @param maxAllowedInstances {Number} 
     * @param maxFlavor {module:model/Flavor} 
     * @param maxInstances {Number} 
     * @param minFlavor {module:model/Flavor} 
     * @param minInstances {Number} 
     * @param type {String} 
     * @param variant {module:model/Variant} 
     * @param version {String} 
     */
    constructor(defaultEnv, flavors, instanceAndVersion, maxAllowedInstances, maxFlavor, maxInstances, minFlavor, minInstances, type, variant, version) { 
        
        Instance.initialize(this, defaultEnv, flavors, instanceAndVersion, maxAllowedInstances, maxFlavor, maxInstances, minFlavor, minInstances, type, variant, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, defaultEnv, flavors, instanceAndVersion, maxAllowedInstances, maxFlavor, maxInstances, minFlavor, minInstances, type, variant, version) { 
        obj['comingSoon'] = false;
        obj['defaultEnv'] = defaultEnv;
        obj['enabled'] = false;
        obj['flavors'] = flavors;
        obj['instanceAndVersion'] = instanceAndVersion;
        obj['maxAllowedInstances'] = maxAllowedInstances;
        obj['maxFlavor'] = maxFlavor;
        obj['maxInstances'] = maxInstances;
        obj['minFlavor'] = minFlavor;
        obj['minInstances'] = minInstances;
        obj['type'] = type;
        obj['variant'] = variant;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('buildFlavor')) {
                obj['buildFlavor'] = Flavor.constructFromObject(data['buildFlavor']);
            }
            if (data.hasOwnProperty('comingSoon')) {
                obj['comingSoon'] = ApiClient.convertToType(data['comingSoon'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultEnv')) {
                obj['defaultEnv'] = ApiClient.convertToType(data['defaultEnv'], Object);
            }
            if (data.hasOwnProperty('defaultFlavor')) {
                obj['defaultFlavor'] = Flavor.constructFromObject(data['defaultFlavor']);
            }
            if (data.hasOwnProperty('deployments')) {
                obj['deployments'] = ApiClient.convertToType(data['deployments'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('flavors')) {
                obj['flavors'] = ApiClient.convertToType(data['flavors'], [Flavor]);
            }
            if (data.hasOwnProperty('instanceAndVersion')) {
                obj['instanceAndVersion'] = ApiClient.convertToType(data['instanceAndVersion'], 'String');
            }
            if (data.hasOwnProperty('maxAllowedInstances')) {
                obj['maxAllowedInstances'] = ApiClient.convertToType(data['maxAllowedInstances'], 'Number');
            }
            if (data.hasOwnProperty('maxFlavor')) {
                obj['maxFlavor'] = Flavor.constructFromObject(data['maxFlavor']);
            }
            if (data.hasOwnProperty('maxInstances')) {
                obj['maxInstances'] = ApiClient.convertToType(data['maxInstances'], 'Number');
            }
            if (data.hasOwnProperty('minFlavor')) {
                obj['minFlavor'] = Flavor.constructFromObject(data['minFlavor']);
            }
            if (data.hasOwnProperty('minInstances')) {
                obj['minInstances'] = ApiClient.convertToType(data['minInstances'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('variant')) {
                obj['variant'] = Variant.constructFromObject(data['variant']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Instance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `buildFlavor`
        if (data['buildFlavor']) { // data not null
          Flavor.validateJSON(data['buildFlavor']);
        }
        // validate the optional field `defaultFlavor`
        if (data['defaultFlavor']) { // data not null
          Flavor.validateJSON(data['defaultFlavor']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deployments'])) {
            throw new Error("Expected the field `deployments` to be an array in the JSON data but got " + data['deployments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['flavors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flavors'])) {
                throw new Error("Expected the field `flavors` to be an array in the JSON data but got " + data['flavors']);
            }
            // validate the optional field `flavors` (array)
            for (const item of data['flavors']) {
                Flavor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['instanceAndVersion'] && !(typeof data['instanceAndVersion'] === 'string' || data['instanceAndVersion'] instanceof String)) {
            throw new Error("Expected the field `instanceAndVersion` to be a primitive type in the JSON string but got " + data['instanceAndVersion']);
        }
        // validate the optional field `maxFlavor`
        if (data['maxFlavor']) { // data not null
          Flavor.validateJSON(data['maxFlavor']);
        }
        // validate the optional field `minFlavor`
        if (data['minFlavor']) { // data not null
          Flavor.validateJSON(data['minFlavor']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `variant`
        if (data['variant']) { // data not null
          Variant.validateJSON(data['variant']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

Instance.RequiredProperties = ["defaultEnv", "flavors", "instanceAndVersion", "maxAllowedInstances", "maxFlavor", "maxInstances", "minFlavor", "minInstances", "type", "variant", "version"];

/**
 * @member {module:model/Flavor} buildFlavor
 */
Instance.prototype['buildFlavor'] = undefined;

/**
 * @member {Boolean} comingSoon
 * @default false
 */
Instance.prototype['comingSoon'] = false;

/**
 * @member {Object} defaultEnv
 */
Instance.prototype['defaultEnv'] = undefined;

/**
 * @member {module:model/Flavor} defaultFlavor
 */
Instance.prototype['defaultFlavor'] = undefined;

/**
 * @member {Array.<String>} deployments
 */
Instance.prototype['deployments'] = undefined;

/**
 * @member {String} description
 */
Instance.prototype['description'] = undefined;

/**
 * @member {Boolean} enabled
 * @default false
 */
Instance.prototype['enabled'] = false;

/**
 * @member {Array.<module:model/Flavor>} flavors
 */
Instance.prototype['flavors'] = undefined;

/**
 * @member {String} instanceAndVersion
 */
Instance.prototype['instanceAndVersion'] = undefined;

/**
 * @member {Number} maxAllowedInstances
 */
Instance.prototype['maxAllowedInstances'] = undefined;

/**
 * @member {module:model/Flavor} maxFlavor
 */
Instance.prototype['maxFlavor'] = undefined;

/**
 * @member {Number} maxInstances
 */
Instance.prototype['maxInstances'] = undefined;

/**
 * @member {module:model/Flavor} minFlavor
 */
Instance.prototype['minFlavor'] = undefined;

/**
 * @member {Number} minInstances
 */
Instance.prototype['minInstances'] = undefined;

/**
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * @member {Array.<String>} tags
 */
Instance.prototype['tags'] = undefined;

/**
 * @member {String} type
 */
Instance.prototype['type'] = undefined;

/**
 * @member {module:model/Variant} variant
 */
Instance.prototype['variant'] = undefined;

/**
 * @member {String} version
 */
Instance.prototype['version'] = undefined;






export default Instance;

