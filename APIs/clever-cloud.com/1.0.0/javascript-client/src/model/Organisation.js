/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Organisation model module.
 * @module model/Organisation
 * @version 1.0.0
 */
class Organisation {
    /**
     * Constructs a new <code>Organisation</code>.
     * @alias module:model/Organisation
     * @param VAT {String} 
     * @param address {String} 
     * @param avatar {String} 
     * @param city {String} 
     * @param company {String} 
     * @param country {String} 
     * @param description {String} 
     * @param id {String} 
     * @param name {String} 
     * @param vatState {String} 
     * @param zipcode {String} 
     */
    constructor(VAT, address, avatar, city, company, country, description, id, name, vatState, zipcode) { 
        
        Organisation.initialize(this, VAT, address, avatar, city, company, country, description, id, name, vatState, zipcode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, VAT, address, avatar, city, company, country, description, id, name, vatState, zipcode) { 
        obj['VAT'] = VAT;
        obj['address'] = address;
        obj['avatar'] = avatar;
        obj['city'] = city;
        obj['company'] = company;
        obj['country'] = country;
        obj['description'] = description;
        obj['id'] = id;
        obj['name'] = name;
        obj['vatState'] = vatState;
        obj['zipcode'] = zipcode;
    }

    /**
     * Constructs a <code>Organisation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organisation} obj Optional instance to populate.
     * @return {module:model/Organisation} The populated <code>Organisation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organisation();

            if (data.hasOwnProperty('VAT')) {
                obj['VAT'] = ApiClient.convertToType(data['VAT'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('vatState')) {
                obj['vatState'] = ApiClient.convertToType(data['vatState'], 'String');
            }
            if (data.hasOwnProperty('zipcode')) {
                obj['zipcode'] = ApiClient.convertToType(data['zipcode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Organisation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Organisation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Organisation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['VAT'] && !(typeof data['VAT'] === 'string' || data['VAT'] instanceof String)) {
            throw new Error("Expected the field `VAT` to be a primitive type in the JSON string but got " + data['VAT']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['vatState'] && !(typeof data['vatState'] === 'string' || data['vatState'] instanceof String)) {
            throw new Error("Expected the field `vatState` to be a primitive type in the JSON string but got " + data['vatState']);
        }
        // ensure the json data is a string
        if (data['zipcode'] && !(typeof data['zipcode'] === 'string' || data['zipcode'] instanceof String)) {
            throw new Error("Expected the field `zipcode` to be a primitive type in the JSON string but got " + data['zipcode']);
        }

        return true;
    }


}

Organisation.RequiredProperties = ["VAT", "address", "avatar", "city", "company", "country", "description", "id", "name", "vatState", "zipcode"];

/**
 * @member {String} VAT
 */
Organisation.prototype['VAT'] = undefined;

/**
 * @member {String} address
 */
Organisation.prototype['address'] = undefined;

/**
 * @member {String} avatar
 */
Organisation.prototype['avatar'] = undefined;

/**
 * @member {String} city
 */
Organisation.prototype['city'] = undefined;

/**
 * @member {String} company
 */
Organisation.prototype['company'] = undefined;

/**
 * @member {String} country
 */
Organisation.prototype['country'] = undefined;

/**
 * @member {String} description
 */
Organisation.prototype['description'] = undefined;

/**
 * @member {String} id
 */
Organisation.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Organisation.prototype['name'] = undefined;

/**
 * @member {String} vatState
 */
Organisation.prototype['vatState'] = undefined;

/**
 * @member {String} zipcode
 */
Organisation.prototype['zipcode'] = undefined;






export default Organisation;

