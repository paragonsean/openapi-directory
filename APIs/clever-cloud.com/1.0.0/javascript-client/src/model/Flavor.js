/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Flavor model module.
 * @module model/Flavor
 * @version 1.0.0
 */
class Flavor {
    /**
     * Constructs a new <code>Flavor</code>.
     * @alias module:model/Flavor
     * @param cpus {Number} 
     * @param mem {Number} 
     * @param name {String} 
     * @param price {Number} 
     */
    constructor(cpus, mem, name, price) { 
        
        Flavor.initialize(this, cpus, mem, name, price);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cpus, mem, name, price) { 
        obj['available'] = false;
        obj['cpus'] = cpus;
        obj['mem'] = mem;
        obj['microservice'] = false;
        obj['name'] = name;
        obj['price'] = price;
    }

    /**
     * Constructs a <code>Flavor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Flavor} obj Optional instance to populate.
     * @return {module:model/Flavor} The populated <code>Flavor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Flavor();

            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Boolean');
            }
            if (data.hasOwnProperty('cpus')) {
                obj['cpus'] = ApiClient.convertToType(data['cpus'], 'Number');
            }
            if (data.hasOwnProperty('disk')) {
                obj['disk'] = ApiClient.convertToType(data['disk'], 'Number');
            }
            if (data.hasOwnProperty('mem')) {
                obj['mem'] = ApiClient.convertToType(data['mem'], 'Number');
            }
            if (data.hasOwnProperty('microservice')) {
                obj['microservice'] = ApiClient.convertToType(data['microservice'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nice')) {
                obj['nice'] = ApiClient.convertToType(data['nice'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Flavor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Flavor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Flavor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Flavor.RequiredProperties = ["cpus", "mem", "name", "price"];

/**
 * @member {Boolean} available
 * @default false
 */
Flavor.prototype['available'] = false;

/**
 * @member {Number} cpus
 */
Flavor.prototype['cpus'] = undefined;

/**
 * @member {Number} disk
 */
Flavor.prototype['disk'] = undefined;

/**
 * @member {Number} mem
 */
Flavor.prototype['mem'] = undefined;

/**
 * @member {Boolean} microservice
 * @default false
 */
Flavor.prototype['microservice'] = false;

/**
 * @member {String} name
 */
Flavor.prototype['name'] = undefined;

/**
 * @member {Number} nice
 */
Flavor.prototype['nice'] = undefined;

/**
 * @member {Number} price
 */
Flavor.prototype['price'] = undefined;






export default Flavor;

