/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Flavor from './Flavor';

/**
 * The AppInstance model module.
 * @module model/AppInstance
 * @version 1.0.0
 */
class AppInstance {
    /**
     * Constructs a new <code>AppInstance</code>.
     * @alias module:model/AppInstance
     */
    constructor() { 
        
        AppInstance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppInstance} obj Optional instance to populate.
     * @return {module:model/AppInstance} The populated <code>AppInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppInstance();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('appPort')) {
                obj['appPort'] = ApiClient.convertToType(data['appPort'], 'Number');
            }
            if (data.hasOwnProperty('commit')) {
                obj['commit'] = ApiClient.convertToType(data['commit'], 'String');
            }
            if (data.hasOwnProperty('deployNumber')) {
                obj['deployNumber'] = ApiClient.convertToType(data['deployNumber'], 'Number');
            }
            if (data.hasOwnProperty('flavor')) {
                obj['flavor'] = Flavor.constructFromObject(data['flavor']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppInstance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['commit'] && !(typeof data['commit'] === 'string' || data['commit'] instanceof String)) {
            throw new Error("Expected the field `commit` to be a primitive type in the JSON string but got " + data['commit']);
        }
        // validate the optional field `flavor`
        if (data['flavor']) { // data not null
          Flavor.validateJSON(data['flavor']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {String} appId
 */
AppInstance.prototype['appId'] = undefined;

/**
 * @member {Number} appPort
 */
AppInstance.prototype['appPort'] = undefined;

/**
 * @member {String} commit
 */
AppInstance.prototype['commit'] = undefined;

/**
 * @member {Number} deployNumber
 */
AppInstance.prototype['deployNumber'] = undefined;

/**
 * @member {module:model/Flavor} flavor
 */
AppInstance.prototype['flavor'] = undefined;

/**
 * @member {String} id
 */
AppInstance.prototype['id'] = undefined;

/**
 * @member {String} ip
 */
AppInstance.prototype['ip'] = undefined;

/**
 * @member {String} state
 */
AppInstance.prototype['state'] = undefined;






export default AppInstance;

