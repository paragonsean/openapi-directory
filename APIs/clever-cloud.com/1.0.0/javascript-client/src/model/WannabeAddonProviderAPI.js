/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WannabeAddonProviderAPIUrl from './WannabeAddonProviderAPIUrl';

/**
 * The WannabeAddonProviderAPI model module.
 * @module model/WannabeAddonProviderAPI
 * @version 1.0.0
 */
class WannabeAddonProviderAPI {
    /**
     * Constructs a new <code>WannabeAddonProviderAPI</code>.
     * @alias module:model/WannabeAddonProviderAPI
     * @param configVars {Array.<String>} 
     * @param password {String} 
     * @param ssoSalt {String} 
     */
    constructor(configVars, password, ssoSalt) { 
        
        WannabeAddonProviderAPI.initialize(this, configVars, password, ssoSalt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configVars, password, ssoSalt) { 
        obj['config_vars'] = configVars;
        obj['password'] = password;
        obj['sso_salt'] = ssoSalt;
    }

    /**
     * Constructs a <code>WannabeAddonProviderAPI</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WannabeAddonProviderAPI} obj Optional instance to populate.
     * @return {module:model/WannabeAddonProviderAPI} The populated <code>WannabeAddonProviderAPI</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WannabeAddonProviderAPI();

            if (data.hasOwnProperty('config_vars')) {
                obj['config_vars'] = ApiClient.convertToType(data['config_vars'], ['String']);
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('production')) {
                obj['production'] = WannabeAddonProviderAPIUrl.constructFromObject(data['production']);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], ['String']);
            }
            if (data.hasOwnProperty('sso_salt')) {
                obj['sso_salt'] = ApiClient.convertToType(data['sso_salt'], 'String');
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = WannabeAddonProviderAPIUrl.constructFromObject(data['test']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WannabeAddonProviderAPI</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WannabeAddonProviderAPI</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WannabeAddonProviderAPI.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['config_vars'])) {
            throw new Error("Expected the field `config_vars` to be an array in the JSON data but got " + data['config_vars']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `production`
        if (data['production']) { // data not null
          WannabeAddonProviderAPIUrl.validateJSON(data['production']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['regions'])) {
            throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
        }
        // ensure the json data is a string
        if (data['sso_salt'] && !(typeof data['sso_salt'] === 'string' || data['sso_salt'] instanceof String)) {
            throw new Error("Expected the field `sso_salt` to be a primitive type in the JSON string but got " + data['sso_salt']);
        }
        // validate the optional field `test`
        if (data['test']) { // data not null
          WannabeAddonProviderAPIUrl.validateJSON(data['test']);
        }

        return true;
    }


}

WannabeAddonProviderAPI.RequiredProperties = ["config_vars", "password", "sso_salt"];

/**
 * @member {Array.<String>} config_vars
 */
WannabeAddonProviderAPI.prototype['config_vars'] = undefined;

/**
 * @member {String} password
 */
WannabeAddonProviderAPI.prototype['password'] = undefined;

/**
 * @member {module:model/WannabeAddonProviderAPIUrl} production
 */
WannabeAddonProviderAPI.prototype['production'] = undefined;

/**
 * @member {Array.<String>} regions
 */
WannabeAddonProviderAPI.prototype['regions'] = undefined;

/**
 * @member {String} sso_salt
 */
WannabeAddonProviderAPI.prototype['sso_salt'] = undefined;

/**
 * @member {module:model/WannabeAddonProviderAPIUrl} test
 */
WannabeAddonProviderAPI.prototype['test'] = undefined;






export default WannabeAddonProviderAPI;

