/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SupernovaInstanceViewFlavor from './SupernovaInstanceViewFlavor';

/**
 * The SupernovaInstanceView model module.
 * @module model/SupernovaInstanceView
 * @version 1.0.0
 */
class SupernovaInstanceView {
    /**
     * Constructs a new <code>SupernovaInstanceView</code>.
     * @alias module:model/SupernovaInstanceView
     * @param appPort {Number} Port of the HV that's redirected to 8080 on VM
     * @param flavor {module:model/SupernovaInstanceViewFlavor} 
     * @param hv {String} String name of hv.
     * @param image {String} Base system image. E.g. java-20181030, node-20180912â€¦
     * @param ip {String} Public IP of the HV
     * @param source {String} Who/what started this instance? E.g. \"app\", \"cli\"
     * @param uuid {String} 
     * @param zabbixPort {Number} Port of the HV that's redirected to 10050 on VM
     */
    constructor(appPort, flavor, hv, image, ip, source, uuid, zabbixPort) { 
        
        SupernovaInstanceView.initialize(this, appPort, flavor, hv, image, ip, source, uuid, zabbixPort);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appPort, flavor, hv, image, ip, source, uuid, zabbixPort) { 
        obj['appPort'] = appPort;
        obj['flavor'] = flavor;
        obj['hv'] = hv;
        obj['image'] = image;
        obj['ip'] = ip;
        obj['source'] = source;
        obj['uuid'] = uuid;
        obj['zabbixPort'] = zabbixPort;
    }

    /**
     * Constructs a <code>SupernovaInstanceView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SupernovaInstanceView} obj Optional instance to populate.
     * @return {module:model/SupernovaInstanceView} The populated <code>SupernovaInstanceView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SupernovaInstanceView();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('appPort')) {
                obj['appPort'] = ApiClient.convertToType(data['appPort'], 'Number');
            }
            if (data.hasOwnProperty('commitId')) {
                obj['commitId'] = ApiClient.convertToType(data['commitId'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Number');
            }
            if (data.hasOwnProperty('deployId')) {
                obj['deployId'] = ApiClient.convertToType(data['deployId'], 'String');
            }
            if (data.hasOwnProperty('deployNumber')) {
                obj['deployNumber'] = ApiClient.convertToType(data['deployNumber'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('flavor')) {
                obj['flavor'] = SupernovaInstanceViewFlavor.constructFromObject(data['flavor']);
            }
            if (data.hasOwnProperty('hv')) {
                obj['hv'] = ApiClient.convertToType(data['hv'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('instanceNumber')) {
                obj['instanceNumber'] = ApiClient.convertToType(data['instanceNumber'], 'Number');
            }
            if (data.hasOwnProperty('internalIP')) {
                obj['internalIP'] = ApiClient.convertToType(data['internalIP'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('sshPort')) {
                obj['sshPort'] = ApiClient.convertToType(data['sshPort'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('zabbixPort')) {
                obj['zabbixPort'] = ApiClient.convertToType(data['zabbixPort'], 'Number');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SupernovaInstanceView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SupernovaInstanceView</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SupernovaInstanceView.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['commitId'] && !(typeof data['commitId'] === 'string' || data['commitId'] instanceof String)) {
            throw new Error("Expected the field `commitId` to be a primitive type in the JSON string but got " + data['commitId']);
        }
        // ensure the json data is a string
        if (data['deployId'] && !(typeof data['deployId'] === 'string' || data['deployId'] instanceof String)) {
            throw new Error("Expected the field `deployId` to be a primitive type in the JSON string but got " + data['deployId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `flavor`
        if (data['flavor']) { // data not null
          SupernovaInstanceViewFlavor.validateJSON(data['flavor']);
        }
        // ensure the json data is a string
        if (data['hv'] && !(typeof data['hv'] === 'string' || data['hv'] instanceof String)) {
            throw new Error("Expected the field `hv` to be a primitive type in the JSON string but got " + data['hv']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['internalIP'] && !(typeof data['internalIP'] === 'string' || data['internalIP'] instanceof String)) {
            throw new Error("Expected the field `internalIP` to be a primitive type in the JSON string but got " + data['internalIP']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}

SupernovaInstanceView.RequiredProperties = ["appPort", "flavor", "hv", "image", "ip", "source", "uuid", "zabbixPort"];

/**
 * Identifier of running app/add-on
 * @member {String} appId
 */
SupernovaInstanceView.prototype['appId'] = undefined;

/**
 * Port of the HV that's redirected to 8080 on VM
 * @member {Number} appPort
 */
SupernovaInstanceView.prototype['appPort'] = undefined;

/**
 * @member {String} commitId
 */
SupernovaInstanceView.prototype['commitId'] = undefined;

/**
 * Integer unix timestamp
 * @member {Number} createdAt
 */
SupernovaInstanceView.prototype['createdAt'] = undefined;

/**
 * @member {String} deployId
 */
SupernovaInstanceView.prototype['deployId'] = undefined;

/**
 * @member {Number} deployNumber
 */
SupernovaInstanceView.prototype['deployNumber'] = undefined;

/**
 * Generated PokÃ©Name. This name is generated from the uuid.
 * @member {String} displayName
 */
SupernovaInstanceView.prototype['displayName'] = undefined;

/**
 * @member {module:model/SupernovaInstanceViewFlavor} flavor
 */
SupernovaInstanceView.prototype['flavor'] = undefined;

/**
 * String name of hv.
 * @member {String} hv
 */
SupernovaInstanceView.prototype['hv'] = undefined;

/**
 * Base system image. E.g. java-20181030, node-20180912â€¦
 * @member {String} image
 */
SupernovaInstanceView.prototype['image'] = undefined;

/**
 * @member {Number} instanceNumber
 */
SupernovaInstanceView.prototype['instanceNumber'] = undefined;

/**
 * @member {String} internalIP
 */
SupernovaInstanceView.prototype['internalIP'] = undefined;

/**
 * Public IP of the HV
 * @member {String} ip
 */
SupernovaInstanceView.prototype['ip'] = undefined;

/**
 * Identifier of the owner of the app/add-on running
 * @member {String} ownerId
 */
SupernovaInstanceView.prototype['ownerId'] = undefined;

/**
 * Who/what started this instance? E.g. \"app\", \"cli\"
 * @member {String} source
 */
SupernovaInstanceView.prototype['source'] = undefined;

/**
 * Port of the HV that's redirected to 22 on VM
 * @member {Number} sshPort
 */
SupernovaInstanceView.prototype['sshPort'] = undefined;

/**
 * @member {String} state
 */
SupernovaInstanceView.prototype['state'] = undefined;

/**
 * @member {String} uuid
 */
SupernovaInstanceView.prototype['uuid'] = undefined;

/**
 * Port of the HV that's redirected to 10050 on VM
 * @member {Number} zabbixPort
 */
SupernovaInstanceView.prototype['zabbixPort'] = undefined;

/**
 * @member {String} zone
 */
SupernovaInstanceView.prototype['zone'] = undefined;






export default SupernovaInstanceView;

