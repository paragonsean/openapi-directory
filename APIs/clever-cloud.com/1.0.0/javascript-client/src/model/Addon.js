/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Plan from './Plan';
import Provider from './Provider';

/**
 * The Addon model module.
 * @module model/Addon
 * @version 1.0.0
 */
class Addon {
    /**
     * Constructs a new <code>Addon</code>.
     * An addon
     * @alias module:model/Addon
     * @param configKeys {Array.<String>} Environments variables link to the addon.
     * @param creationDate {Date} The creation timestamp of the addon
     * @param id {String} `addon_${uuid}`
     * @param name {String} 
     * @param plan {module:model/Plan} 
     * @param provider {module:model/Provider} 
     * @param realId {String} `${provider}_${uuid2}`
     * @param region {String} 
     */
    constructor(configKeys, creationDate, id, name, plan, provider, realId, region) { 
        
        Addon.initialize(this, configKeys, creationDate, id, name, plan, provider, realId, region);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configKeys, creationDate, id, name, plan, provider, realId, region) { 
        obj['configKeys'] = configKeys;
        obj['creationDate'] = creationDate;
        obj['id'] = id;
        obj['name'] = name;
        obj['plan'] = plan;
        obj['provider'] = provider;
        obj['realId'] = realId;
        obj['region'] = region;
    }

    /**
     * Constructs a <code>Addon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Addon} obj Optional instance to populate.
     * @return {module:model/Addon} The populated <code>Addon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Addon();

            if (data.hasOwnProperty('configKeys')) {
                obj['configKeys'] = ApiClient.convertToType(data['configKeys'], ['String']);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = Plan.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = Provider.constructFromObject(data['provider']);
            }
            if (data.hasOwnProperty('realId')) {
                obj['realId'] = ApiClient.convertToType(data['realId'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Addon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Addon</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Addon.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['configKeys'])) {
            throw new Error("Expected the field `configKeys` to be an array in the JSON data but got " + data['configKeys']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          Plan.validateJSON(data['plan']);
        }
        // validate the optional field `provider`
        if (data['provider']) { // data not null
          Provider.validateJSON(data['provider']);
        }
        // ensure the json data is a string
        if (data['realId'] && !(typeof data['realId'] === 'string' || data['realId'] instanceof String)) {
            throw new Error("Expected the field `realId` to be a primitive type in the JSON string but got " + data['realId']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }

        return true;
    }


}

Addon.RequiredProperties = ["configKeys", "creationDate", "id", "name", "plan", "provider", "realId", "region"];

/**
 * Environments variables link to the addon.
 * @member {Array.<String>} configKeys
 */
Addon.prototype['configKeys'] = undefined;

/**
 * The creation timestamp of the addon
 * @member {Date} creationDate
 */
Addon.prototype['creationDate'] = undefined;

/**
 * `addon_${uuid}`
 * @member {String} id
 */
Addon.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Addon.prototype['name'] = undefined;

/**
 * @member {module:model/Plan} plan
 */
Addon.prototype['plan'] = undefined;

/**
 * @member {module:model/Provider} provider
 */
Addon.prototype['provider'] = undefined;

/**
 * `${provider}_${uuid2}`
 * @member {String} realId
 */
Addon.prototype['realId'] = undefined;

/**
 * @member {String} region
 */
Addon.prototype['region'] = undefined;






export default Addon;

