/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Deployment from './Deployment';
import Flavor from './Flavor';
import Instance from './Instance';
import Vhost from './Vhost';

/**
 * The Application model module.
 * @module model/Application
 * @version 1.0.0
 */
class Application {
    /**
     * Constructs a new <code>Application</code>.
     * @alias module:model/Application
     * @param archived {Boolean} 
     * @param branch {String} 
     * @param buildFlavor {module:model/Flavor} 
     * @param cancelOnPush {Boolean} 
     * @param commitId {String} 
     * @param creationDate {Date} 
     * @param deployUrl {String} 
     * @param deployment {module:model/Deployment} 
     * @param description {String} 
     * @param favourite {Boolean} 
     * @param homogeneous {Boolean} 
     * @param id {String} 
     * @param instance {module:model/Instance} 
     * @param lastDeploy {Number} 
     * @param name {String} 
     * @param ownerId {String} 
     * @param separateBuild {Boolean} 
     * @param state {String} 
     * @param stickySessions {Boolean} 
     * @param vhosts {Array.<module:model/Vhost>} 
     * @param webhookSecret {String} 
     * @param webhookUrl {String} 
     * @param zone {String} `par` ou `mtl`
     */
    constructor(archived, branch, buildFlavor, cancelOnPush, commitId, creationDate, deployUrl, deployment, description, favourite, homogeneous, id, instance, lastDeploy, name, ownerId, separateBuild, state, stickySessions, vhosts, webhookSecret, webhookUrl, zone) { 
        
        Application.initialize(this, archived, branch, buildFlavor, cancelOnPush, commitId, creationDate, deployUrl, deployment, description, favourite, homogeneous, id, instance, lastDeploy, name, ownerId, separateBuild, state, stickySessions, vhosts, webhookSecret, webhookUrl, zone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, archived, branch, buildFlavor, cancelOnPush, commitId, creationDate, deployUrl, deployment, description, favourite, homogeneous, id, instance, lastDeploy, name, ownerId, separateBuild, state, stickySessions, vhosts, webhookSecret, webhookUrl, zone) { 
        obj['archived'] = archived || false;
        obj['branch'] = branch;
        obj['buildFlavor'] = buildFlavor;
        obj['cancelOnPush'] = cancelOnPush || false;
        obj['commitId'] = commitId;
        obj['creationDate'] = creationDate;
        obj['deployUrl'] = deployUrl;
        obj['deployment'] = deployment;
        obj['description'] = description;
        obj['favourite'] = favourite || false;
        obj['homogeneous'] = homogeneous || false;
        obj['id'] = id;
        obj['instance'] = instance;
        obj['last_deploy'] = lastDeploy;
        obj['name'] = name;
        obj['ownerId'] = ownerId;
        obj['separateBuild'] = separateBuild || false;
        obj['state'] = state;
        obj['stickySessions'] = stickySessions || false;
        obj['vhosts'] = vhosts;
        obj['webhookSecret'] = webhookSecret;
        obj['webhookUrl'] = webhookUrl;
        obj['zone'] = zone;
    }

    /**
     * Constructs a <code>Application</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Application} obj Optional instance to populate.
     * @return {module:model/Application} The populated <code>Application</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Application();

            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('buildFlavor')) {
                obj['buildFlavor'] = Flavor.constructFromObject(data['buildFlavor']);
            }
            if (data.hasOwnProperty('cancelOnPush')) {
                obj['cancelOnPush'] = ApiClient.convertToType(data['cancelOnPush'], 'Boolean');
            }
            if (data.hasOwnProperty('commitId')) {
                obj['commitId'] = ApiClient.convertToType(data['commitId'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('deployUrl')) {
                obj['deployUrl'] = ApiClient.convertToType(data['deployUrl'], 'String');
            }
            if (data.hasOwnProperty('deployment')) {
                obj['deployment'] = Deployment.constructFromObject(data['deployment']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('favourite')) {
                obj['favourite'] = ApiClient.convertToType(data['favourite'], 'Boolean');
            }
            if (data.hasOwnProperty('homogeneous')) {
                obj['homogeneous'] = ApiClient.convertToType(data['homogeneous'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = Instance.constructFromObject(data['instance']);
            }
            if (data.hasOwnProperty('last_deploy')) {
                obj['last_deploy'] = ApiClient.convertToType(data['last_deploy'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('separateBuild')) {
                obj['separateBuild'] = ApiClient.convertToType(data['separateBuild'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stickySessions')) {
                obj['stickySessions'] = ApiClient.convertToType(data['stickySessions'], 'Boolean');
            }
            if (data.hasOwnProperty('vhosts')) {
                obj['vhosts'] = ApiClient.convertToType(data['vhosts'], [Vhost]);
            }
            if (data.hasOwnProperty('webhookSecret')) {
                obj['webhookSecret'] = ApiClient.convertToType(data['webhookSecret'], 'String');
            }
            if (data.hasOwnProperty('webhookUrl')) {
                obj['webhookUrl'] = ApiClient.convertToType(data['webhookUrl'], 'String');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Application</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Application</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Application.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // validate the optional field `buildFlavor`
        if (data['buildFlavor']) { // data not null
          Flavor.validateJSON(data['buildFlavor']);
        }
        // ensure the json data is a string
        if (data['commitId'] && !(typeof data['commitId'] === 'string' || data['commitId'] instanceof String)) {
            throw new Error("Expected the field `commitId` to be a primitive type in the JSON string but got " + data['commitId']);
        }
        // ensure the json data is a string
        if (data['deployUrl'] && !(typeof data['deployUrl'] === 'string' || data['deployUrl'] instanceof String)) {
            throw new Error("Expected the field `deployUrl` to be a primitive type in the JSON string but got " + data['deployUrl']);
        }
        // validate the optional field `deployment`
        if (data['deployment']) { // data not null
          Deployment.validateJSON(data['deployment']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `instance`
        if (data['instance']) { // data not null
          Instance.validateJSON(data['instance']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['vhosts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vhosts'])) {
                throw new Error("Expected the field `vhosts` to be an array in the JSON data but got " + data['vhosts']);
            }
            // validate the optional field `vhosts` (array)
            for (const item of data['vhosts']) {
                Vhost.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['webhookSecret'] && !(typeof data['webhookSecret'] === 'string' || data['webhookSecret'] instanceof String)) {
            throw new Error("Expected the field `webhookSecret` to be a primitive type in the JSON string but got " + data['webhookSecret']);
        }
        // ensure the json data is a string
        if (data['webhookUrl'] && !(typeof data['webhookUrl'] === 'string' || data['webhookUrl'] instanceof String)) {
            throw new Error("Expected the field `webhookUrl` to be a primitive type in the JSON string but got " + data['webhookUrl']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}

Application.RequiredProperties = ["archived", "branch", "buildFlavor", "cancelOnPush", "commitId", "creationDate", "deployUrl", "deployment", "description", "favourite", "homogeneous", "id", "instance", "last_deploy", "name", "ownerId", "separateBuild", "state", "stickySessions", "vhosts", "webhookSecret", "webhookUrl", "zone"];

/**
 * @member {Boolean} archived
 * @default false
 */
Application.prototype['archived'] = false;

/**
 * @member {String} branch
 */
Application.prototype['branch'] = undefined;

/**
 * @member {module:model/Flavor} buildFlavor
 */
Application.prototype['buildFlavor'] = undefined;

/**
 * @member {Boolean} cancelOnPush
 * @default false
 */
Application.prototype['cancelOnPush'] = false;

/**
 * @member {String} commitId
 */
Application.prototype['commitId'] = undefined;

/**
 * @member {Date} creationDate
 */
Application.prototype['creationDate'] = undefined;

/**
 * @member {String} deployUrl
 */
Application.prototype['deployUrl'] = undefined;

/**
 * @member {module:model/Deployment} deployment
 */
Application.prototype['deployment'] = undefined;

/**
 * @member {String} description
 */
Application.prototype['description'] = undefined;

/**
 * @member {Boolean} favourite
 * @default false
 */
Application.prototype['favourite'] = false;

/**
 * @member {Boolean} homogeneous
 * @default false
 */
Application.prototype['homogeneous'] = false;

/**
 * @member {String} id
 */
Application.prototype['id'] = undefined;

/**
 * @member {module:model/Instance} instance
 */
Application.prototype['instance'] = undefined;

/**
 * @member {Number} last_deploy
 */
Application.prototype['last_deploy'] = undefined;

/**
 * @member {String} name
 */
Application.prototype['name'] = undefined;

/**
 * @member {String} ownerId
 */
Application.prototype['ownerId'] = undefined;

/**
 * @member {Boolean} separateBuild
 * @default false
 */
Application.prototype['separateBuild'] = false;

/**
 * @member {String} state
 */
Application.prototype['state'] = undefined;

/**
 * @member {Boolean} stickySessions
 * @default false
 */
Application.prototype['stickySessions'] = false;

/**
 * @member {Array.<module:model/Vhost>} vhosts
 */
Application.prototype['vhosts'] = undefined;

/**
 * @member {String} webhookSecret
 */
Application.prototype['webhookSecret'] = undefined;

/**
 * @member {String} webhookUrl
 */
Application.prototype['webhookUrl'] = undefined;

/**
 * `par` ou `mtl`
 * @member {String} zone
 */
Application.prototype['zone'] = undefined;






export default Application;

