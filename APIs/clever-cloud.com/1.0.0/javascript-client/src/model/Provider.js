/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Feature from './Feature';
import Plan from './Plan';

/**
 * The Provider model module.
 * @module model/Provider
 * @version 1.0.0
 */
class Provider {
    /**
     * Constructs a new <code>Provider</code>.
     * A provider
     * @alias module:model/Provider
     * @param analyticsId {String} The id of the analytics page link to this addon
     * @param canUpgrade {Boolean} Can the addon be upgraded
     * @param googlePlusName {String} The name of the google + page link to this addon (could be empty)
     * @param id {String} The id of the provider
     * @param logoUrl {String} The url of the addon's logo
     * @param longDesc {String} A less concise description of the addon
     * @param name {String} 
     * @param openInNewTab {Boolean} Does the addon panel need to be open in a new tab
     * @param regions {Array.<String>} The differents regions where the addon is available
     * @param shortDesc {String} A short description of the addon
     * @param status {String} The status of this addon (RELEASE, BETA, ...)
     * @param supportEmail {String} The mail to contact in case of issue with this addon
     * @param twitterName {String} The name of the user to contact on twitter for this addon (could be empty)
     * @param website {String} The website of the provider. If the addon is developped by clever-cloud, the site is \"http://www.clever-cloud.com/\"
     */
    constructor(analyticsId, canUpgrade, googlePlusName, id, logoUrl, longDesc, name, openInNewTab, regions, shortDesc, status, supportEmail, twitterName, website) { 
        
        Provider.initialize(this, analyticsId, canUpgrade, googlePlusName, id, logoUrl, longDesc, name, openInNewTab, regions, shortDesc, status, supportEmail, twitterName, website);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, analyticsId, canUpgrade, googlePlusName, id, logoUrl, longDesc, name, openInNewTab, regions, shortDesc, status, supportEmail, twitterName, website) { 
        obj['analyticsId'] = analyticsId;
        obj['canUpgrade'] = canUpgrade || false;
        obj['googlePlusName'] = googlePlusName;
        obj['id'] = id;
        obj['logoUrl'] = logoUrl;
        obj['longDesc'] = longDesc;
        obj['name'] = name;
        obj['openInNewTab'] = openInNewTab || false;
        obj['regions'] = regions;
        obj['shortDesc'] = shortDesc;
        obj['status'] = status;
        obj['supportEmail'] = supportEmail;
        obj['twitterName'] = twitterName;
        obj['website'] = website;
    }

    /**
     * Constructs a <code>Provider</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Provider} obj Optional instance to populate.
     * @return {module:model/Provider} The populated <code>Provider</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Provider();

            if (data.hasOwnProperty('analyticsId')) {
                obj['analyticsId'] = ApiClient.convertToType(data['analyticsId'], 'String');
            }
            if (data.hasOwnProperty('canUpgrade')) {
                obj['canUpgrade'] = ApiClient.convertToType(data['canUpgrade'], 'Boolean');
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [Feature]);
            }
            if (data.hasOwnProperty('googlePlusName')) {
                obj['googlePlusName'] = ApiClient.convertToType(data['googlePlusName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('logoUrl')) {
                obj['logoUrl'] = ApiClient.convertToType(data['logoUrl'], 'String');
            }
            if (data.hasOwnProperty('longDesc')) {
                obj['longDesc'] = ApiClient.convertToType(data['longDesc'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('openInNewTab')) {
                obj['openInNewTab'] = ApiClient.convertToType(data['openInNewTab'], 'Boolean');
            }
            if (data.hasOwnProperty('plans')) {
                obj['plans'] = ApiClient.convertToType(data['plans'], [Plan]);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], ['String']);
            }
            if (data.hasOwnProperty('shortDesc')) {
                obj['shortDesc'] = ApiClient.convertToType(data['shortDesc'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('supportEmail')) {
                obj['supportEmail'] = ApiClient.convertToType(data['supportEmail'], 'String');
            }
            if (data.hasOwnProperty('twitterName')) {
                obj['twitterName'] = ApiClient.convertToType(data['twitterName'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Provider</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Provider</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Provider.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['analyticsId'] && !(typeof data['analyticsId'] === 'string' || data['analyticsId'] instanceof String)) {
            throw new Error("Expected the field `analyticsId` to be a primitive type in the JSON string but got " + data['analyticsId']);
        }
        if (data['features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['features'])) {
                throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
            }
            // validate the optional field `features` (array)
            for (const item of data['features']) {
                Feature.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['googlePlusName'] && !(typeof data['googlePlusName'] === 'string' || data['googlePlusName'] instanceof String)) {
            throw new Error("Expected the field `googlePlusName` to be a primitive type in the JSON string but got " + data['googlePlusName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['logoUrl'] && !(typeof data['logoUrl'] === 'string' || data['logoUrl'] instanceof String)) {
            throw new Error("Expected the field `logoUrl` to be a primitive type in the JSON string but got " + data['logoUrl']);
        }
        // ensure the json data is a string
        if (data['longDesc'] && !(typeof data['longDesc'] === 'string' || data['longDesc'] instanceof String)) {
            throw new Error("Expected the field `longDesc` to be a primitive type in the JSON string but got " + data['longDesc']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['plans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['plans'])) {
                throw new Error("Expected the field `plans` to be an array in the JSON data but got " + data['plans']);
            }
            // validate the optional field `plans` (array)
            for (const item of data['plans']) {
                Plan.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['regions'])) {
            throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
        }
        // ensure the json data is a string
        if (data['shortDesc'] && !(typeof data['shortDesc'] === 'string' || data['shortDesc'] instanceof String)) {
            throw new Error("Expected the field `shortDesc` to be a primitive type in the JSON string but got " + data['shortDesc']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['supportEmail'] && !(typeof data['supportEmail'] === 'string' || data['supportEmail'] instanceof String)) {
            throw new Error("Expected the field `supportEmail` to be a primitive type in the JSON string but got " + data['supportEmail']);
        }
        // ensure the json data is a string
        if (data['twitterName'] && !(typeof data['twitterName'] === 'string' || data['twitterName'] instanceof String)) {
            throw new Error("Expected the field `twitterName` to be a primitive type in the JSON string but got " + data['twitterName']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

Provider.RequiredProperties = ["analyticsId", "canUpgrade", "googlePlusName", "id", "logoUrl", "longDesc", "name", "openInNewTab", "regions", "shortDesc", "status", "supportEmail", "twitterName", "website"];

/**
 * The id of the analytics page link to this addon
 * @member {String} analyticsId
 */
Provider.prototype['analyticsId'] = undefined;

/**
 * Can the addon be upgraded
 * @member {Boolean} canUpgrade
 * @default false
 */
Provider.prototype['canUpgrade'] = false;

/**
 * @member {Array.<module:model/Feature>} features
 */
Provider.prototype['features'] = undefined;

/**
 * The name of the google + page link to this addon (could be empty)
 * @member {String} googlePlusName
 */
Provider.prototype['googlePlusName'] = undefined;

/**
 * The id of the provider
 * @member {String} id
 */
Provider.prototype['id'] = undefined;

/**
 * The url of the addon's logo
 * @member {String} logoUrl
 */
Provider.prototype['logoUrl'] = undefined;

/**
 * A less concise description of the addon
 * @member {String} longDesc
 */
Provider.prototype['longDesc'] = undefined;

/**
 * @member {String} name
 */
Provider.prototype['name'] = undefined;

/**
 * Does the addon panel need to be open in a new tab
 * @member {Boolean} openInNewTab
 * @default false
 */
Provider.prototype['openInNewTab'] = false;

/**
 * @member {Array.<module:model/Plan>} plans
 */
Provider.prototype['plans'] = undefined;

/**
 * The differents regions where the addon is available
 * @member {Array.<String>} regions
 */
Provider.prototype['regions'] = undefined;

/**
 * A short description of the addon
 * @member {String} shortDesc
 */
Provider.prototype['shortDesc'] = undefined;

/**
 * The status of this addon (RELEASE, BETA, ...)
 * @member {String} status
 */
Provider.prototype['status'] = undefined;

/**
 * The mail to contact in case of issue with this addon
 * @member {String} supportEmail
 */
Provider.prototype['supportEmail'] = undefined;

/**
 * The name of the user to contact on twitter for this addon (could be empty)
 * @member {String} twitterName
 */
Provider.prototype['twitterName'] = undefined;

/**
 * The website of the provider. If the addon is developped by clever-cloud, the site is \"http://www.clever-cloud.com/\"
 * @member {String} website
 */
Provider.prototype['website'] = undefined;






export default Provider;

