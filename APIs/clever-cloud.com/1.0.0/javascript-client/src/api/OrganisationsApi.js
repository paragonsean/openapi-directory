/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Addon from '../model/Addon';
import AddonMigration from '../model/AddonMigration';
import AddonProviderSso from '../model/AddonProviderSso';
import AppInstance from '../model/AppInstance';
import Application from '../model/Application';
import Body from '../model/Body';
import Conso from '../model/Conso';
import Consumer from '../model/Consumer';
import Credits from '../model/Credits';
import Deployment from '../model/Deployment';
import DeploymentSummary from '../model/DeploymentSummary';
import Env from '../model/Env';
import Error from '../model/Error';
import Feature from '../model/Feature';
import LinkedAppEnv from '../model/LinkedAppEnv';
import ListEnv from '../model/ListEnv';
import Organisation from '../model/Organisation';
import OrganisationsIdAddonsAddonIdMigrationsPostRequest from '../model/OrganisationsIdAddonsAddonIdMigrationsPostRequest';
import PaymentData from '../model/PaymentData';
import Plan from '../model/Plan';
import Provider from '../model/Provider';
import Schema1 from '../model/Schema1';
import Schema2 from '../model/Schema2';
import Secret from '../model/Secret';
import Sso from '../model/Sso';
import SupernovaInstanceView from '../model/SupernovaInstanceView';
import Vhost from '../model/Vhost';
import WannabeAddon from '../model/WannabeAddon';
import WannabeAddonProvider from '../model/WannabeAddonProvider';
import WannabeApplication from '../model/WannabeApplication';
import WannabeConsumer from '../model/WannabeConsumer';
import WannabeEnv from '../model/WannabeEnv';
import WannabeFeature from '../model/WannabeFeature';
import WannabeOrganisation from '../model/WannabeOrganisation';
import WannabePlan from '../model/WannabePlan';
import WannabePlanFeature from '../model/WannabePlanFeature';

/**
* Organisations service.
* @module api/OrganisationsApi
* @version 1.0.0
*/
export default class OrganisationsApi {

    /**
    * Constructs a new OrganisationsApi. 
    * @alias module:api/OrganisationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkGroupExternalPeer_0 operation.
     * @callback module:api/OrganisationsApi~createNetworkGroupExternalPeer_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add external peer
     * Adds an external peer to a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~createNetworkGroupExternalPeer_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkGroupExternalPeer_0(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling createNetworkGroupExternalPeer_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling createNetworkGroupExternalPeer_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain; charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroupMember_0 operation.
     * @callback module:api/OrganisationsApi~createNetworkGroupMember_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add member
     * Adds a member to a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {module:model/Schema2} [schema2] 
     * @param {module:api/OrganisationsApi~createNetworkGroupMember_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    createNetworkGroupMember_0(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['schema2'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling createNetworkGroupMember_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling createNetworkGroupMember_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroup_0 operation.
     * @callback module:api/OrganisationsApi~createNetworkGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Network Group
     * Creates a Network Group.
     * @param {String} ownerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~createNetworkGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkGroup_0(ownerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling createNetworkGroup_0");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain; charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupExternalPeer_0 operation.
     * @callback module:api/OrganisationsApi~deleteNetworkGroupExternalPeer_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove external peer
     * Removes an external peer from a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~deleteNetworkGroupExternalPeer_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupExternalPeer_0(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroupExternalPeer_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupExternalPeer_0");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling deleteNetworkGroupExternalPeer_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers/{peerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupMember_0 operation.
     * @callback module:api/OrganisationsApi~deleteNetworkGroupMember_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove member
     * Removes a member from a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} memberId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~deleteNetworkGroupMember_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupMember_0(ownerId, networkGroupId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroupMember_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupMember_0");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling deleteNetworkGroupMember_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupPeer_0 operation.
     * @callback module:api/OrganisationsApi~deleteNetworkGroupPeer_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove peer
     * Removes a peer from a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~deleteNetworkGroupPeer_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupPeer_0(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroupPeer_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupPeer_0");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling deleteNetworkGroupPeer_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroup_0 operation.
     * @callback module:api/OrganisationsApi~deleteNetworkGroup_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Network Group
     * Deletes a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~deleteNetworkGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroup_0(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroup_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroup_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} featureId 
     * @param {String} providerId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0(id, featureId, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0");
      }
      // verify the required parameter 'featureId' is set
      if (featureId === undefined || featureId === null) {
        throw new Error("Missing the required parameter 'featureId' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0");
      }

      let pathParams = {
        'id': id,
        'featureId': featureId,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/features/{featureId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} featureName 
     * @param {String} providerId 
     * @param {String} planId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(id, featureName, providerId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0");
      }

      let pathParams = {
        'id': id,
        'featureName': featureName,
        'providerId': providerId,
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans/{planId}/features/{featureName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {String} planId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(id, providerId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId,
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans/{planId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonsAddonIdTagsTag_1 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdAddonsAddonIdTagsTag_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdAddonsAddonIdTagsTag_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonsAddonIdTagsTag_1(id, tag, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_1");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_1");
      }

      let pathParams = {
        'id': id,
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonsAddonId_1 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdAddonsAddonId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdAddonsAddonId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonsAddonId_1(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonId_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonId_1");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2(id, appId, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(dependencyId, appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies/{dependencyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1(id, appId, deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/deployments/{deploymentId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdEnvEnvName_1 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdEnvEnvName_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdEnvEnvName_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdEnvEnvName_1(id, appId, envName, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_1");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env/{envName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdInstances_1 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdInstances_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdInstances_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdInstances_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdInstances_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdInstances_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdTagsTag_1 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdTagsTag_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdTagsTag_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdTagsTag_1(id, appId, tag, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_1");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdVhostsDomain_1 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdVhostsDomain_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdVhostsDomain_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdVhostsDomain_1(id, appId, domain, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_1");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/favourite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppId_1 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdApplicationsAppId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppId_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppId_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppId_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdConsumersKey_0 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdConsumersKey_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} key 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdConsumersKey_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdConsumersKey_0(id, key, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdConsumersKey_0");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteOrganisationsIdConsumersKey_0");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/consumers/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdMembersUserId_0 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdMembersUserId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} userId 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdMembersUserId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdMembersUserId_0(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdMembersUserId_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteOrganisationsIdMembersUserId_0");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdPaymentsBillingsBid_0 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdPaymentsBillingsBid_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdPaymentsBillingsBid_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdPaymentsBillingsBid_0(id, bid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdPaymentsBillingsBid_0");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling deleteOrganisationsIdPaymentsBillingsBid_0");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdPaymentsRecurring_0 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsIdPaymentsRecurring_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~deleteOrganisationsIdPaymentsRecurring_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdPaymentsRecurring_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdPaymentsRecurring_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/recurring', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsId_0 operation.
     * @callback module:api/OrganisationsApi~deleteOrganisationsId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~deleteOrganisationsId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsId_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsId_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupMember_0 operation.
     * @callback module:api/OrganisationsApi~getNetworkGroupMember_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get member
     * Gets details of a Network Group member.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} memberId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~getNetworkGroupMember_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema1}
     */
    getNetworkGroupMember_0(ownerId, networkGroupId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupMember_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupMember_0");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getNetworkGroupMember_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schema1;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupPeer_0 operation.
     * @callback module:api/OrganisationsApi~getNetworkGroupPeer_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get peer
     * Gets details of a Network Group peer.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~getNetworkGroupPeer_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupPeer_0(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupPeer_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupPeer_0");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling getNetworkGroupPeer_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupStream_0 operation.
     * @callback module:api/OrganisationsApi~getNetworkGroupStream_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Network Group SSE
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~getNetworkGroupStream_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupStream_0(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupStream_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupStream_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupWireGuardConfigurationStream_0 operation.
     * @callback module:api/OrganisationsApi~getNetworkGroupWireGuardConfigurationStream_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~getNetworkGroupWireGuardConfigurationStream_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupWireGuardConfigurationStream_0(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfigurationStream_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfigurationStream_0");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfigurationStream_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupWireGuardConfiguration_0 operation.
     * @callback module:api/OrganisationsApi~getNetworkGroupWireGuardConfiguration_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~getNetworkGroupWireGuardConfiguration_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupWireGuardConfiguration_0(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfiguration_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfiguration_0");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfiguration_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroup_0 operation.
     * @callback module:api/OrganisationsApi~getNetworkGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Network Group
     * Gets details of a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~getNetworkGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroup_0(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroup_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroup_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonprovidersProviderIdFeatures_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonprovidersProviderIdFeatures_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Feature>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonprovidersProviderIdFeatures_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Feature>}
     */
    getOrganisationsIdAddonprovidersProviderIdFeatures_0(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdFeatures_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdFeatures_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Feature];
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Plan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {String} planId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plan}
     */
    getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(id, providerId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId,
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Plan;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans/{planId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonprovidersProviderIdPlans_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonprovidersProviderIdPlans_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Plan>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonprovidersProviderIdPlans_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Plan>}
     */
    getOrganisationsIdAddonprovidersProviderIdPlans_0(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdPlans_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdPlans_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Plan];
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonprovidersProviderIdTags_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonprovidersProviderIdTags_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonprovidersProviderIdTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getOrganisationsIdAddonprovidersProviderIdTags_0(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdTags_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdTags_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonprovidersProviderId_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonprovidersProviderId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonprovidersProviderId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    getOrganisationsIdAddonprovidersProviderId_0(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderId_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderId_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonproviders_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonproviders_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Provider>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonproviders_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Provider>}
     */
    getOrganisationsIdAddonproviders_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonproviders_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Provider];
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdApplications_2 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonsAddonIdApplications_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonsAddonIdApplications_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdAddonsAddonIdApplications_2(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdApplications_2");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdApplications_2");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdEnv_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonsAddonIdEnv_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonsAddonIdEnv_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getOrganisationsIdAddonsAddonIdEnv_1(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdEnv_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdEnv_1");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdSso_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonsAddonIdSso_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AddonProviderSso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} providerId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonsAddonIdSso_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddonProviderSso}
     */
    getOrganisationsIdAddonsAddonIdSso_0(providerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonsAddonIdSso_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdSso_0");
      }

      let pathParams = {
        'providerId': providerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddonProviderSso;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/sso', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdTags_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonsAddonIdTags_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonsAddonIdTags_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getOrganisationsIdAddonsAddonIdTags_1(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdTags_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdTags_1");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonId_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddonsAddonId_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddonsAddonId_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    getOrganisationsIdAddonsAddonId_1(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonId_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonId_1");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddons_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdAddons_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdAddons_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getOrganisationsIdAddons_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddons_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/organisations/{id}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdAddonsEnv_2 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdAddonsEnv_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Env>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdAddonsEnv_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Env>}
     */
    getOrganisationsIdApplicationsAppIdAddonsEnv_2(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_2");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_2");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Env];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdAddons_2 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdAddons_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdAddons_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getOrganisationsIdApplicationsAppIdAddons_2(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddons_2");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddons_2");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdDependencies_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdDependencies_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdDependencies_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdApplicationsAppIdDependencies_1(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependencies_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependencies_1");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdDependents_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdDependents_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdDependents_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdApplicationsAppIdDependents_1(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependents_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependents_1");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdDeployments_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdDeployments_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [limit] 
     * @param {String} [offset] 
     * @param {String} [action] 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdDeployments_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    getOrganisationsIdApplicationsAppIdDeployments_1(id, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDeployments_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDeployments_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deployment];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdEnv_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdEnv_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdEnv_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getOrganisationsIdApplicationsAppIdEnv_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdEnv_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdEnv_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdInstances_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdInstances_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppInstance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdInstances_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppInstance>}
     */
    getOrganisationsIdApplicationsAppIdInstances_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdInstances_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdInstances_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppInstance];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdTags_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdTags_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdTags_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getOrganisationsIdApplicationsAppIdTags_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdTags_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdTags_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdVhostsFavourite_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdVhostsFavourite_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Vhost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdVhostsFavourite_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vhost}
     */
    getOrganisationsIdApplicationsAppIdVhostsFavourite_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vhost;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/favourite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdVhosts_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdVhosts_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vhost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppIdVhosts_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vhost>}
     */
    getOrganisationsIdApplicationsAppIdVhosts_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhosts_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhosts_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vhost];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppId_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplicationsAppId_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplicationsAppId_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    getOrganisationsIdApplicationsAppId_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppId_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppId_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplications_1 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdApplications_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdApplications_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdApplications_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplications_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdConsumersKeySecret_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdConsumersKeySecret_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} key 
     * @param {module:api/OrganisationsApi~getOrganisationsIdConsumersKeySecret_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    getOrganisationsIdConsumersKeySecret_0(id, key, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdConsumersKeySecret_0");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganisationsIdConsumersKeySecret_0");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/organisations/{id}/consumers/{key}/secret', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdConsumersKey_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdConsumersKey_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Consumer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} key 
     * @param {module:api/OrganisationsApi~getOrganisationsIdConsumersKey_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Consumer}
     */
    getOrganisationsIdConsumersKey_0(id, key, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdConsumersKey_0");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganisationsIdConsumersKey_0");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Consumer;
      return this.apiClient.callApi(
        '/organisations/{id}/consumers/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdConsumers_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdConsumers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Consumer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdConsumers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Consumer>}
     */
    getOrganisationsIdConsumers_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdConsumers_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Consumer];
      return this.apiClient.callApi(
        '/organisations/{id}/consumers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdConsumptions_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdConsumptions_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Conso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [appId] 
     * @param {String} [from] 
     * @param {String} [to] 
     * @param {module:api/OrganisationsApi~getOrganisationsIdConsumptions_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conso}
     */
    getOrganisationsIdConsumptions_0(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdConsumptions_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'appId': opts['appId'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Conso;
      return this.apiClient.callApi(
        '/organisations/{id}/consumptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdCredits_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdCredits_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Credits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdCredits_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credits}
     */
    getOrganisationsIdCredits_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdCredits_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credits;
      return this.apiClient.callApi(
        '/organisations/{id}/credits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdDeployments_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdDeployments_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdDeployments_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentSummary}
     */
    getOrganisationsIdDeployments_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdDeployments_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentSummary;
      return this.apiClient.callApi(
        '/organisations/{id}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdInstances_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdInstances_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganisationsIdInstances_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdInstances_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organisations/{id}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdMembers_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdMembers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdMembers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema1>}
     */
    getOrganisationsIdMembers_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdMembers_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schema1];
      return this.apiClient.callApi(
        '/organisations/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentInfo_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdPaymentInfo_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdPaymentInfo_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentInfo_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentInfo_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payment-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsBillingsBidPdf_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdPaymentsBillingsBidPdf_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {Object} opts Optional parameters
     * @param {String} [token] 
     * @param {module:api/OrganisationsApi~getOrganisationsIdPaymentsBillingsBidPdf_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsBillingsBidPdf_0(id, bid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillingsBidPdf_0");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getOrganisationsIdPaymentsBillingsBidPdf_0");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}.pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsBillingsBid_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdPaymentsBillingsBid_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {module:api/OrganisationsApi~getOrganisationsIdPaymentsBillingsBid_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsBillingsBid_0(id, bid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillingsBid_0");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getOrganisationsIdPaymentsBillingsBid_0");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsBillings_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdPaymentsBillings_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsIdPaymentsBillings_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsBillings_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillings_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsFullPricePrice_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsIdPaymentsFullPricePrice_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} price 
     * @param {module:api/OrganisationsApi~getOrganisationsIdPaymentsFullPricePrice_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsFullPricePrice_0(id, price, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsFullPricePrice_0");
      }
      // verify the required parameter 'price' is set
      if (price === undefined || price === null) {
        throw new Error("Missing the required parameter 'price' when calling getOrganisationsIdPaymentsFullPricePrice_0");
      }

      let pathParams = {
        'id': id,
        'price': price
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/fullprice/{price}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsId_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisationsId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~getOrganisationsId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
    getOrganisationsId_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsId_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organisation;
      return this.apiClient.callApi(
        '/organisations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisations_0 operation.
     * @callback module:api/OrganisationsApi~getOrganisations_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organisation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [user] 
     * @param {module:api/OrganisationsApi~getOrganisations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organisation>}
     */
    getOrganisations_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organisation];
      return this.apiClient.callApi(
        '/organisations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkGroupMembers_0 operation.
     * @callback module:api/OrganisationsApi~listNetworkGroupMembers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List members
     * Lists members in a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~listNetworkGroupMembers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema1>}
     */
    listNetworkGroupMembers_0(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling listNetworkGroupMembers_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling listNetworkGroupMembers_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schema1];
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkGroupPeers_0 operation.
     * @callback module:api/OrganisationsApi~listNetworkGroupPeers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List peers
     * Lists peers in a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~listNetworkGroupPeers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    listNetworkGroupPeers_0(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling listNetworkGroupPeers_0");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling listNetworkGroupPeers_0");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkGroups_0 operation.
     * @callback module:api/OrganisationsApi~listNetworkGroups_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Network Groups
     * Lists Network Groups from an owner.
     * @param {String} ownerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/OrganisationsApi~listNetworkGroups_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    listNetworkGroups_0(ownerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling listNetworkGroups_0");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonprovidersProviderIdDelete_0 operation.
     * @callback module:api/OrganisationsApi~organisationsIdAddonprovidersProviderIdDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an add-on provider
     * Remove a given add-on provider. providerId must be owned by organisation {id}.
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/OrganisationsApi~organisationsIdAddonprovidersProviderIdDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdAddonprovidersProviderIdDelete_0(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonprovidersProviderIdDelete_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling organisationsIdAddonprovidersProviderIdDelete_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdInstancesGet_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdAddonsAddonIdInstancesGet_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupernovaInstanceView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List instances for this add-on.
     * @param {String} id 
     * @param {String} addonId 
     * @param {Object} opts Optional parameters
     * @param {String} [deploymentId] 
     * @param {String} [withDeleted] 
     * @param {module:api/OrganisationsApi~organisationsIdAddonsAddonIdInstancesGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupernovaInstanceView>}
     */
    organisationsIdAddonsAddonIdInstancesGet_1(id, addonId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesGet_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesGet_1");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
        'deploymentId': opts['deploymentId'],
        'withDeleted': opts['withDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SupernovaInstanceView];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdInstancesInstanceIdGet_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdAddonsAddonIdInstancesInstanceIdGet_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SupernovaInstanceView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific instance for {addonId}
     * @param {String} instanceId 
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~organisationsIdAddonsAddonIdInstancesInstanceIdGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupernovaInstanceView}
     */
    organisationsIdAddonsAddonIdInstancesInstanceIdGet_1(instanceId, id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_1");
      }

      let pathParams = {
        'instanceId': instanceId,
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupernovaInstanceView;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdMigrationsGet_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdAddonsAddonIdMigrationsGet_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddonMigration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get past migrations from add-on.
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~organisationsIdAddonsAddonIdMigrationsGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddonMigration>}
     */
    organisationsIdAddonsAddonIdMigrationsGet_1(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsGet_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsGet_1");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AddonMigration];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/migrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AddonMigration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a given migration
     * @param {String} migrationId 
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddonMigration}
     */
    organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1(migrationId, id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1");
      }

      let pathParams = {
        'migrationId': migrationId,
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddonMigration;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/migrations/{migrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdMigrationsPost_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdAddonsAddonIdMigrationsPost_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new add-on migration
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:model/OrganisationsIdAddonsAddonIdMigrationsPostRequest} organisationsIdAddonsAddonIdMigrationsPostRequest 
     * @param {module:api/OrganisationsApi~organisationsIdAddonsAddonIdMigrationsPost_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    organisationsIdAddonsAddonIdMigrationsPost_1(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, callback) {
      let postBody = organisationsIdAddonsAddonIdMigrationsPostRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsPost_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsPost_1");
      }
      // verify the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' is set
      if (organisationsIdAddonsAddonIdMigrationsPostRequest === undefined || organisationsIdAddonsAddonIdMigrationsPostRequest === null) {
        throw new Error("Missing the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' when calling organisationsIdAddonsAddonIdMigrationsPost_1");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/migrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdSsoGet_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdAddonsAddonIdSsoGet_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Sso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/OrganisationsApi~organisationsIdAddonsAddonIdSsoGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sso}
     */
    organisationsIdAddonsAddonIdSsoGet_1(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdSsoGet_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdSsoGet_1");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sso;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/sso', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsPreordersPost_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdAddonsPreordersPost_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/OrganisationsApi~organisationsIdAddonsPreordersPost_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdAddonsPreordersPost_1(id, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsPreordersPost_1");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling organisationsIdAddonsPreordersPost_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/preorders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdBranchPut_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdApplicationsAppIdBranchPut_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdApplicationsAppIdBranchPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdBranchPut_1(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchPut_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchPut_1");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/branch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdBranchesGet_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdApplicationsAppIdBranchesGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdApplicationsAppIdBranchesGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdBranchesGet_1(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchesGet_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchesGet_1");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdBuildflavorPut_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdApplicationsAppIdBuildflavorPut_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdApplicationsAppIdBuildflavorPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdBuildflavorPut_1(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBuildflavorPut_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBuildflavorPut_1");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/buildflavor', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdDependenciesEnvGet_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdApplicationsAppIdDependenciesEnvGet_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LinkedAppEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdApplicationsAppIdDependenciesEnvGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LinkedAppEnv>}
     */
    organisationsIdApplicationsAppIdDependenciesEnvGet_1(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDependenciesEnvGet_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDependenciesEnvGet_1");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LinkedAppEnv];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1(appId, deploymentId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1");
      }

      let pathParams = {
        'appId': appId,
        'deploymentId': deploymentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/deployments/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdExposedEnvGet_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdApplicationsAppIdExposedEnvGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdApplicationsAppIdExposedEnvGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdExposedEnvGet_1(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvGet_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvGet_1");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/exposed_env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdExposedEnvPut_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdApplicationsAppIdExposedEnvPut_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdApplicationsAppIdExposedEnvPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdExposedEnvPut_1(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvPut_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvPut_1");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/exposed_env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdInstancesInstanceIdGet_1 operation.
     * @callback module:api/OrganisationsApi~organisationsIdApplicationsAppIdInstancesInstanceIdGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} instanceId 
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdApplicationsAppIdInstancesInstanceIdGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdInstancesInstanceIdGet_1(instanceId, appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_1");
      }

      let pathParams = {
        'instanceId': instanceId,
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsBillingsUnpaidGet_0 operation.
     * @callback module:api/OrganisationsApi~organisationsIdPaymentsBillingsUnpaidGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdPaymentsBillingsUnpaidGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsBillingsUnpaidGet_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsBillingsUnpaidGet_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/unpaid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsDefaultGet_0 operation.
     * @callback module:api/OrganisationsApi~organisationsIdPaymentsMethodsDefaultGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdPaymentsMethodsDefaultGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsDefaultGet_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsDefaultGet_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsDefaultPut_0 operation.
     * @callback module:api/OrganisationsApi~organisationsIdPaymentsMethodsDefaultPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/PaymentData} paymentData 
     * @param {module:api/OrganisationsApi~organisationsIdPaymentsMethodsDefaultPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsDefaultPut_0(id, paymentData, callback) {
      let postBody = paymentData;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsDefaultPut_0");
      }
      // verify the required parameter 'paymentData' is set
      if (paymentData === undefined || paymentData === null) {
        throw new Error("Missing the required parameter 'paymentData' when calling organisationsIdPaymentsMethodsDefaultPut_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsGet_0 operation.
     * @callback module:api/OrganisationsApi~organisationsIdPaymentsMethodsGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdPaymentsMethodsGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsGet_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsGet_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsMIdDelete_0 operation.
     * @callback module:api/OrganisationsApi~organisationsIdPaymentsMethodsMIdDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} mId 
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdPaymentsMethodsMIdDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsMIdDelete_0(mId, id, callback) {
      let postBody = null;
      // verify the required parameter 'mId' is set
      if (mId === undefined || mId === null) {
        throw new Error("Missing the required parameter 'mId' when calling organisationsIdPaymentsMethodsMIdDelete_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsMIdDelete_0");
      }

      let pathParams = {
        'mId': mId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods/{mId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsPost_0 operation.
     * @callback module:api/OrganisationsApi~organisationsIdPaymentsMethodsPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/Body} body 
     * @param {module:api/OrganisationsApi~organisationsIdPaymentsMethodsPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsPost_0(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsPost_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organisationsIdPaymentsMethodsPost_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMonthlyinvoiceGet_0 operation.
     * @callback module:api/OrganisationsApi~organisationsIdPaymentsMonthlyinvoiceGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdPaymentsMonthlyinvoiceGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMonthlyinvoiceGet_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMonthlyinvoiceGet_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/monthlyinvoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0 operation.
     * @callback module:api/OrganisationsApi~organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/monthlyinvoice/maxcredit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsRecurringGet_0 operation.
     * @callback module:api/OrganisationsApi~organisationsIdPaymentsRecurringGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~organisationsIdPaymentsRecurringGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsRecurringGet_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsRecurringGet_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/recurring', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddonprovidersProviderIdFeatures_0 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdAddonprovidersProviderIdFeatures_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Feature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:model/WannabeFeature} wannabeFeature 
     * @param {module:api/OrganisationsApi~postOrganisationsIdAddonprovidersProviderIdFeatures_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feature}
     */
    postOrganisationsIdAddonprovidersProviderIdFeatures_0(id, providerId, wannabeFeature, callback) {
      let postBody = wannabeFeature;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdFeatures_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdFeatures_0");
      }
      // verify the required parameter 'wannabeFeature' is set
      if (wannabeFeature === undefined || wannabeFeature === null) {
        throw new Error("Missing the required parameter 'wannabeFeature' when calling postOrganisationsIdAddonprovidersProviderIdFeatures_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Feature;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/features', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddonprovidersProviderIdPlans_0 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdAddonprovidersProviderIdPlans_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Plan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:model/WannabePlan} wannabePlan 
     * @param {module:api/OrganisationsApi~postOrganisationsIdAddonprovidersProviderIdPlans_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plan}
     */
    postOrganisationsIdAddonprovidersProviderIdPlans_0(id, providerId, wannabePlan, callback) {
      let postBody = wannabePlan;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdPlans_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdPlans_0");
      }
      // verify the required parameter 'wannabePlan' is set
      if (wannabePlan === undefined || wannabePlan === null) {
        throw new Error("Missing the required parameter 'wannabePlan' when calling postOrganisationsIdAddonprovidersProviderIdPlans_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Plan;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddonprovidersProviderIdTesters_0 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdAddonprovidersProviderIdTesters_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/OrganisationsApi~postOrganisationsIdAddonprovidersProviderIdTesters_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdAddonprovidersProviderIdTesters_0(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdTesters_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdTesters_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/testers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddonproviders_0 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdAddonproviders_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeAddonProvider} wannabeAddonProvider 
     * @param {module:api/OrganisationsApi~postOrganisationsIdAddonproviders_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    postOrganisationsIdAddonproviders_0(id, wannabeAddonProvider, callback) {
      let postBody = wannabeAddonProvider;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddonproviders_0");
      }
      // verify the required parameter 'wannabeAddonProvider' is set
      if (wannabeAddonProvider === undefined || wannabeAddonProvider === null) {
        throw new Error("Missing the required parameter 'wannabeAddonProvider' when calling postOrganisationsIdAddonproviders_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddons_1 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdAddons_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/OrganisationsApi~postOrganisationsIdAddons_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    postOrganisationsIdAddons_1(id, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddons_1");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling postOrganisationsIdAddons_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/organisations/{id}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdApplicationsAppIdAddons_2 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdApplicationsAppIdAddons_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/Body} body 
     * @param {module:api/OrganisationsApi~postOrganisationsIdApplicationsAppIdAddons_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdApplicationsAppIdAddons_2(id, appId, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdAddons_2");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdAddons_2");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postOrganisationsIdApplicationsAppIdAddons_2");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdApplicationsAppIdInstances_1 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdApplicationsAppIdInstances_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [commit] 
     * @param {module:api/OrganisationsApi~postOrganisationsIdApplicationsAppIdInstances_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdApplicationsAppIdInstances_1(id, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdInstances_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdInstances_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
        'commit': opts['commit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdApplications_1 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdApplications_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param {String} id 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/OrganisationsApi~postOrganisationsIdApplications_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    postOrganisationsIdApplications_1(id, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdApplications_1");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling postOrganisationsIdApplications_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/organisations/{id}/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdConsumers_0 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdConsumers_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeConsumer} wannabeConsumer 
     * @param {module:api/OrganisationsApi~postOrganisationsIdConsumers_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdConsumers_0(id, wannabeConsumer, callback) {
      let postBody = wannabeConsumer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdConsumers_0");
      }
      // verify the required parameter 'wannabeConsumer' is set
      if (wannabeConsumer === undefined || wannabeConsumer === null) {
        throw new Error("Missing the required parameter 'wannabeConsumer' when calling postOrganisationsIdConsumers_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/consumers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdMembers_0 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdMembers_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/Schema2} body 
     * @param {Object} opts Optional parameters
     * @param {String} [invitationKey] 
     * @param {module:api/OrganisationsApi~postOrganisationsIdMembers_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdMembers_0(id, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdMembers_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postOrganisationsIdMembers_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'invitationKey': opts['invitationKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdPaymentsBillings_0 operation.
     * @callback module:api/OrganisationsApi~postOrganisationsIdPaymentsBillings_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OrganisationsApi~postOrganisationsIdPaymentsBillings_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdPaymentsBillings_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdPaymentsBillings_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisations_0 operation.
     * @callback module:api/OrganisationsApi~postOrganisations_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeOrganisation} wannabeOrganisation 
     * @param {module:api/OrganisationsApi~postOrganisations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
    postOrganisations_0(wannabeOrganisation, callback) {
      let postBody = wannabeOrganisation;
      // verify the required parameter 'wannabeOrganisation' is set
      if (wannabeOrganisation === undefined || wannabeOrganisation === null) {
        throw new Error("Missing the required parameter 'wannabeOrganisation' when calling postOrganisations_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Organisation;
      return this.apiClient.callApi(
        '/organisations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} featureName 
     * @param {String} providerId 
     * @param {String} planId 
     * @param {module:model/WannabePlanFeature} wannabePlanFeature 
     * @param {module:api/OrganisationsApi~putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(id, featureName, providerId, planId, wannabePlanFeature, callback) {
      let postBody = wannabePlanFeature;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0");
      }
      // verify the required parameter 'wannabePlanFeature' is set
      if (wannabePlanFeature === undefined || wannabePlanFeature === null) {
        throw new Error("Missing the required parameter 'wannabePlanFeature' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0");
      }

      let pathParams = {
        'id': id,
        'featureName': featureName,
        'providerId': providerId,
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans/{planId}/features/{featureName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Plan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {String} planId 
     * @param {module:model/WannabePlan} wannabePlan 
     * @param {module:api/OrganisationsApi~putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plan}
     */
    putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(id, providerId, planId, wannabePlan, callback) {
      let postBody = wannabePlan;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0");
      }
      // verify the required parameter 'wannabePlan' is set
      if (wannabePlan === undefined || wannabePlan === null) {
        throw new Error("Missing the required parameter 'wannabePlan' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId,
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Plan;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans/{planId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonprovidersProviderId_0 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdAddonprovidersProviderId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:model/WannabeAddonProvider} wannabeAddonProvider 
     * @param {module:api/OrganisationsApi~putOrganisationsIdAddonprovidersProviderId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    putOrganisationsIdAddonprovidersProviderId_0(id, providerId, wannabeAddonProvider, callback) {
      let postBody = wannabeAddonProvider;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderId_0");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderId_0");
      }
      // verify the required parameter 'wannabeAddonProvider' is set
      if (wannabeAddonProvider === undefined || wannabeAddonProvider === null) {
        throw new Error("Missing the required parameter 'wannabeAddonProvider' when calling putOrganisationsIdAddonprovidersProviderId_0");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonsAddonIdTagsTag_1 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdAddonsAddonIdTagsTag_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:model/Body} body 
     * @param {module:api/OrganisationsApi~putOrganisationsIdAddonsAddonIdTagsTag_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdAddonsAddonIdTagsTag_1(id, tag, addonId, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonIdTagsTag_1");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putOrganisationsIdAddonsAddonIdTagsTag_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonIdTagsTag_1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdAddonsAddonIdTagsTag_1");
      }

      let pathParams = {
        'id': id,
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonsAddonId_1 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdAddonsAddonId_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/OrganisationsApi~putOrganisationsIdAddonsAddonId_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    putOrganisationsIdAddonsAddonId_1(id, addonId, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonId_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonId_1");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling putOrganisationsIdAddonsAddonId_1");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {String} id 
     * @param {module:model/Body} body 
     * @param {module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(dependencyId, appId, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies/{dependencyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdEnvEnvName_1 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdEnvEnvName_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEnv} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdEnvEnvName_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEnv}
     */
    putOrganisationsIdApplicationsAppIdEnvEnvName_1(id, appId, envName, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_1");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_1");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ListEnv;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env/{envName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdEnv_1 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdEnv_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEnv} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdEnv_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEnv}
     */
    putOrganisationsIdApplicationsAppIdEnv_1(id, appId, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnv_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnv_1");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnv_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ListEnv;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdTagsTag_1 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdTagsTag_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:model/Body} body 
     * @param {module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdTagsTag_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdTagsTag_1(id, appId, tag, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdTagsTag_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdTagsTag_1");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putOrganisationsIdApplicationsAppIdTagsTag_1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdTagsTag_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdVhostsDomain_1 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdVhostsDomain_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdVhostsDomain_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdVhostsDomain_1(id, appId, domain, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_1");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_1");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/{domain}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdVhostsFavourite_1 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdVhostsFavourite_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/OrganisationsApi~putOrganisationsIdApplicationsAppIdVhostsFavourite_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdVhostsFavourite_1(id, appId, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_1");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/favourite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppId_1 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdApplicationsAppId_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/OrganisationsApi~putOrganisationsIdApplicationsAppId_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    putOrganisationsIdApplicationsAppId_1(id, appId, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppId_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppId_1");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling putOrganisationsIdApplicationsAppId_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAvatar_0 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdAvatar_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If you want to upload an image from your computer, send the image in the body of the request without anything else.
     * @param {String} id 
     * @param {module:api/OrganisationsApi~putOrganisationsIdAvatar_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdAvatar_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAvatar_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/avatar', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdConsumersKey_0 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdConsumersKey_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} key 
     * @param {module:model/WannabeConsumer} wannabeConsumer 
     * @param {module:api/OrganisationsApi~putOrganisationsIdConsumersKey_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdConsumersKey_0(id, key, wannabeConsumer, callback) {
      let postBody = wannabeConsumer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdConsumersKey_0");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putOrganisationsIdConsumersKey_0");
      }
      // verify the required parameter 'wannabeConsumer' is set
      if (wannabeConsumer === undefined || wannabeConsumer === null) {
        throw new Error("Missing the required parameter 'wannabeConsumer' when calling putOrganisationsIdConsumersKey_0");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/consumers/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdMembersUserId_0 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdMembersUserId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} userId 
     * @param {module:model/Schema2} body 
     * @param {module:api/OrganisationsApi~putOrganisationsIdMembersUserId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdMembersUserId_0(id, userId, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdMembersUserId_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putOrganisationsIdMembersUserId_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdMembersUserId_0");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/members/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdPaymentsBillingsBid_0 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsIdPaymentsBillingsBid_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {module:api/OrganisationsApi~putOrganisationsIdPaymentsBillingsBid_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdPaymentsBillingsBid_0(id, bid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdPaymentsBillingsBid_0");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling putOrganisationsIdPaymentsBillingsBid_0");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsId_0 operation.
     * @callback module:api/OrganisationsApi~putOrganisationsId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeOrganisation} wannabeOrganisation 
     * @param {module:api/OrganisationsApi~putOrganisationsId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
    putOrganisationsId_0(id, wannabeOrganisation, callback) {
      let postBody = wannabeOrganisation;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsId_0");
      }
      // verify the required parameter 'wannabeOrganisation' is set
      if (wannabeOrganisation === undefined || wannabeOrganisation === null) {
        throw new Error("Missing the required parameter 'wannabeOrganisation' when calling putOrganisationsId_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Organisation;
      return this.apiClient.callApi(
        '/organisations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
