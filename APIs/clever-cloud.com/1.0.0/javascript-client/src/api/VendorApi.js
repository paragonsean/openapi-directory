/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Application from '../model/Application';
import WannabeAddonBilling from '../model/WannabeAddonBilling';

/**
* Vendor service.
* @module api/VendorApi
* @version 1.0.0
*/
export default class VendorApi {

    /**
    * Constructs a new VendorApi. 
    * @alias module:api/VendorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getVendorAppsAddonId_0 operation.
     * @callback module:api/VendorApi~getVendorAppsAddonId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/VendorApi~getVendorAppsAddonId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getVendorAppsAddonId_0(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getVendorAppsAddonId_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor/apps/{addonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVendorApps_0 operation.
     * @callback module:api/VendorApi~getVendorApps_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] 
     * @param {module:api/VendorApi~getVendorApps_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getVendorApps_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/vendor/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postVendorBillingOwnerId_0 operation.
     * @callback module:api/VendorApi~postVendorBillingOwnerId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:model/WannabeAddonBilling} wannabeAddonBilling 
     * @param {module:api/VendorApi~postVendorBillingOwnerId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postVendorBillingOwnerId_0(addonId, wannabeAddonBilling, callback) {
      let postBody = wannabeAddonBilling;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling postVendorBillingOwnerId_0");
      }
      // verify the required parameter 'wannabeAddonBilling' is set
      if (wannabeAddonBilling === undefined || wannabeAddonBilling === null) {
        throw new Error("Missing the required parameter 'wannabeAddonBilling' when calling postVendorBillingOwnerId_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor/apps/{addonId}/consumptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putVendorAppsAddonId_0 operation.
     * @callback module:api/VendorApi~putVendorAppsAddonId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/VendorApi~putVendorAppsAddonId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putVendorAppsAddonId_0(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putVendorAppsAddonId_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor/apps/{addonId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorAddonsPost_1 operation.
     * @callback module:api/VendorApi~vendorAddonsPost_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/VendorApi~vendorAddonsPost_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    vendorAddonsPost_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor//addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorAppsAddonIdLogscollectorGet_0 operation.
     * @callback module:api/VendorApi~vendorAppsAddonIdLogscollectorGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/VendorApi~vendorAppsAddonIdLogscollectorGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    vendorAppsAddonIdLogscollectorGet_0(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling vendorAppsAddonIdLogscollectorGet_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor//apps/{addonId}/logscollector', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorAppsAddonIdMigrationCallbackPut_0 operation.
     * @callback module:api/VendorApi~vendorAppsAddonIdMigrationCallbackPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {Object} opts Optional parameters
     * @param {String} [planId] 
     * @param {String} [region] 
     * @param {module:api/VendorApi~vendorAppsAddonIdMigrationCallbackPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    vendorAppsAddonIdMigrationCallbackPut_0(addonId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling vendorAppsAddonIdMigrationCallbackPut_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
        'plan_id': opts['planId'],
        'region': opts['region']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor/apps/{addonId}/migration_callback', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
