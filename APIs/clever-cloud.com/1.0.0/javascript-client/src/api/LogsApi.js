/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Logs service.
* @module api/LogsApi
* @version 1.0.0
*/
export default class LogsApi {

    /**
    * Constructs a new LogsApi. 
    * @alias module:api/LogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the logsAppIdDrainsGet_0 operation.
     * @callback module:api/LogsApi~logsAppIdDrainsGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs drains for a given application
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~logsAppIdDrainsGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdDrainsGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdDrainsGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}/drains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdDrainsIdOrUrlDelete_0 operation.
     * @callback module:api/LogsApi~logsAppIdDrainsIdOrUrlDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the logs drain by id or url for a given application
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~logsAppIdDrainsIdOrUrlDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdDrainsIdOrUrlDelete_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdDrainsIdOrUrlDelete_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}/drains/:idOrUrl', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdDrainsIdOrUrlGet_0 operation.
     * @callback module:api/LogsApi~logsAppIdDrainsIdOrUrlGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs drain by id or url for a given application
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~logsAppIdDrainsIdOrUrlGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdDrainsIdOrUrlGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdDrainsIdOrUrlGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}/drains/:idOrUrl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdDrainsPost_0 operation.
     * @callback module:api/LogsApi~logsAppIdDrainsPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a log drain for a given application
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~logsAppIdDrainsPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdDrainsPost_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdDrainsPost_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}/drains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdGet_0 operation.
     * @callback module:api/LogsApi~logsAppIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs for a given application
     * @param {String} appId Application Id
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of lines to return
     * @param {module:model/String} [order = 'desc')] Logs order
     * @param {Date} [after] Lowest bound for logs date, ISO 8601
     * @param {Date} [before] Highest bounds for logs date, ISO 8601
     * @param {String} [filter] A pattern to filter with
     * @param {String} [deploymentId] Only fetch logs emitted by this deployment
     * @param {module:api/LogsApi~logsAppIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdGet_0(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before'],
        'filter': opts['filter'],
        'deployment_id': opts['deploymentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdSseGet_0 operation.
     * @callback module:api/LogsApi~logsAppIdSseGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve logs as they come through a sse connection. To have authorization, you have to add `authorization=oAuthAuthorizationString` as query param.
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~logsAppIdSseGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdSseGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdSseGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}/sse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsDrainsDrainIdPut_0 operation.
     * @callback module:api/LogsApi~logsDrainsDrainIdPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param {String} drainId Automatically added
     * @param {module:api/LogsApi~logsDrainsDrainIdPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logsDrainsDrainIdPut_0(drainId, callback) {
      let postBody = null;
      // verify the required parameter 'drainId' is set
      if (drainId === undefined || drainId === null) {
        throw new Error("Missing the required parameter 'drainId' when calling logsDrainsDrainIdPut_0");
      }

      let pathParams = {
        'drainId': drainId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/drains/{drainId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsDrainsGet_0 operation.
     * @callback module:api/LogsApi~logsDrainsGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param {module:api/LogsApi~logsDrainsGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logsDrainsGet_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/drains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsLogsChunkedAppIdGet_0 operation.
     * @callback module:api/LogsApi~logsLogsChunkedAppIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve logs as they come through a chunked, never-ending response
     * @param {String} appId Application Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [download] Tell the user-agent to download the body as a file
     * @param {module:api/LogsApi~logsLogsChunkedAppIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logsLogsChunkedAppIdGet_0(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsLogsChunkedAppIdGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'download': opts['download']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/logs-chunked/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsLogsSocketAppIdGet_0 operation.
     * @callback module:api/LogsApi~logsLogsSocketAppIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a `{ \"message_type\": \"oauth\", \"authorization\": \"oauth authorization string\" }` message
     * @param {String} appId Application Id
     * @param {Object} opts Optional parameters
     * @param {Date} [since] Only fetch logs newer than this (ISO-8601 formatted) date
     * @param {String} [filter] A pattern to filter with
     * @param {String} [deploymentId] Only fetch logs emitted by this deployment
     * @param {module:api/LogsApi~logsLogsSocketAppIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logsLogsSocketAppIdGet_0(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsLogsSocketAppIdGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'since': opts['since'],
        'filter': opts['filter'],
        'deployment_id': opts['deploymentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/logs-socket/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdDrainsGet_0 operation.
     * @callback module:api/LogsApi~v3LogsAppIdDrainsGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs drains for a given application
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~v3LogsAppIdDrainsGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdDrainsGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/drains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdDrainsIdOrUrlDelete_0 operation.
     * @callback module:api/LogsApi~v3LogsAppIdDrainsIdOrUrlDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the logs drain by id or url for a given application
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~v3LogsAppIdDrainsIdOrUrlDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdDrainsIdOrUrlDelete_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsIdOrUrlDelete_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/drains/:idOrUrl', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdDrainsIdOrUrlGet_0 operation.
     * @callback module:api/LogsApi~v3LogsAppIdDrainsIdOrUrlGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs drain by id or url for a given application
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~v3LogsAppIdDrainsIdOrUrlGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdDrainsIdOrUrlGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsIdOrUrlGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/drains/:idOrUrl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdDrainsPost_0 operation.
     * @callback module:api/LogsApi~v3LogsAppIdDrainsPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a log drain for a given application
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~v3LogsAppIdDrainsPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdDrainsPost_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsPost_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/drains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdGet_0 operation.
     * @callback module:api/LogsApi~v3LogsAppIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs for a given application
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~v3LogsAppIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdLogsChunkedGet_0 operation.
     * @callback module:api/LogsApi~v3LogsAppIdLogsChunkedGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve logs as they come through a chunked, never-ending response
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~v3LogsAppIdLogsChunkedGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdLogsChunkedGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdLogsChunkedGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/logs-chunked', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdLogsSocketGet_0 operation.
     * @callback module:api/LogsApi~v3LogsAppIdLogsSocketGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a `{ \"message_type\": \"oauth\", \"authorization\": \"oauth authorization string\" }` message
     * @param {String} appId Automatically added
     * @param {module:api/LogsApi~v3LogsAppIdLogsSocketGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdLogsSocketGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdLogsSocketGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/logs-socket', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
