/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Addon from '../model/Addon';
import AddonMigration from '../model/AddonMigration';
import AddonProviderSso from '../model/AddonProviderSso';
import AppInstance from '../model/AppInstance';
import Application from '../model/Application';
import Avatar from '../model/Avatar';
import Body from '../model/Body';
import ChangePassword from '../model/ChangePassword';
import Conso from '../model/Conso';
import Consumer from '../model/Consumer';
import Country from '../model/Country';
import Credits from '../model/Credits';
import Deployment from '../model/Deployment';
import DeploymentSummary from '../model/DeploymentSummary';
import Env from '../model/Env';
import Error from '../model/Error';
import Feature from '../model/Feature';
import Instance from '../model/Instance';
import Key from '../model/Key';
import LinkedAppEnv from '../model/LinkedAppEnv';
import ListEnv from '../model/ListEnv';
import Organisation from '../model/Organisation';
import OrganisationsIdAddonsAddonIdMigrationsPostRequest from '../model/OrganisationsIdAddonsAddonIdMigrationsPostRequest';
import PaymentData from '../model/PaymentData';
import PaymentProvider from '../model/PaymentProvider';
import Plan from '../model/Plan';
import Provider from '../model/Provider';
import Rights from '../model/Rights';
import Schema1 from '../model/Schema1';
import Schema2 from '../model/Schema2';
import Secret from '../model/Secret';
import Sso from '../model/Sso';
import Summary from '../model/Summary';
import SupernovaInstanceView from '../model/SupernovaInstanceView';
import Token from '../model/Token';
import TransactionId from '../model/TransactionId';
import User from '../model/User';
import Vhost from '../model/Vhost';
import WannabeAddon from '../model/WannabeAddon';
import WannabeAddonBilling from '../model/WannabeAddonBilling';
import WannabeAddonProvider from '../model/WannabeAddonProvider';
import WannabeApplication from '../model/WannabeApplication';
import WannabeConsumer from '../model/WannabeConsumer';
import WannabeEnv from '../model/WannabeEnv';
import WannabeFeature from '../model/WannabeFeature';
import WannabeOrganisation from '../model/WannabeOrganisation';
import WannabePlan from '../model/WannabePlan';
import WannabePlanFeature from '../model/WannabePlanFeature';
import WannabeUser from '../model/WannabeUser';
import Zone from '../model/Zone';

/**
* All service.
* @module api/AllApi
* @version 1.0.0
*/
export default class AllApi {

    /**
    * Constructs a new AllApi. 
    * @alias module:api/AllApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applicationAppIdEnvironmentGet operation.
     * @callback module:api/AllApi~applicationAppIdEnvironmentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [token] 
     * @param {module:api/AllApi~applicationAppIdEnvironmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applicationAppIdEnvironmentGet(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling applicationAppIdEnvironmentGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/{appId}/environment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationAppIdEnvironmentPut operation.
     * @callback module:api/AllApi~applicationAppIdEnvironmentPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [token] 
     * @param {module:api/AllApi~applicationAppIdEnvironmentPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applicationAppIdEnvironmentPut(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling applicationAppIdEnvironmentPut");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/{appId}/environment', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMatomo operation.
     * @callback module:api/AllApi~createMatomoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Matomo addon
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~createMatomoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createMatomo(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/providers/addon-matomo/resources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroup operation.
     * @callback module:api/AllApi~createNetworkGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Network Group
     * Creates a Network Group.
     * @param {String} ownerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~createNetworkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkGroup(ownerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling createNetworkGroup");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain; charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroupExternalPeer operation.
     * @callback module:api/AllApi~createNetworkGroupExternalPeerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add external peer
     * Adds an external peer to a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~createNetworkGroupExternalPeerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkGroupExternalPeer(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling createNetworkGroupExternalPeer");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling createNetworkGroupExternalPeer");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain; charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroupMember operation.
     * @callback module:api/AllApi~createNetworkGroupMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add member
     * Adds a member to a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {module:model/Schema2} [schema2] 
     * @param {module:api/AllApi~createNetworkGroupMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createNetworkGroupMember(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['schema2'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling createNetworkGroupMember");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling createNetworkGroupMember");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGithubLink operation.
     * @callback module:api/AllApi~deleteGithubLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~deleteGithubLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGithubLink(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/link', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMatomo operation.
     * @callback module:api/AllApi~deleteMatomoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Matomo addon
     * @param {String} matomoId Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/AllApi~deleteMatomoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteMatomo(matomoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'matomoId' is set
      if (matomoId === undefined || matomoId === null) {
        throw new Error("Missing the required parameter 'matomoId' when calling deleteMatomo");
      }

      let pathParams = {
        'matomoId': matomoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/providers/addon-matomo/resources/{matomoId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroup operation.
     * @callback module:api/AllApi~deleteNetworkGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Network Group
     * Deletes a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~deleteNetworkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroup(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroup");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroup");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupExternalPeer operation.
     * @callback module:api/AllApi~deleteNetworkGroupExternalPeerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove external peer
     * Removes an external peer from a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~deleteNetworkGroupExternalPeerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupExternalPeer(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroupExternalPeer");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupExternalPeer");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling deleteNetworkGroupExternalPeer");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers/{peerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupMember operation.
     * @callback module:api/AllApi~deleteNetworkGroupMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove member
     * Removes a member from a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} memberId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~deleteNetworkGroupMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupMember(ownerId, networkGroupId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroupMember");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupMember");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling deleteNetworkGroupMember");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupPeer operation.
     * @callback module:api/AllApi~deleteNetworkGroupPeerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove peer
     * Removes a peer from a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~deleteNetworkGroupPeerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupPeer(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroupPeer");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupPeer");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling deleteNetworkGroupPeer");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsId operation.
     * @callback module:api/AllApi~deleteOrganisationsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~deleteOrganisationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId operation.
     * @callback module:api/AllApi~deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} featureId 
     * @param {String} providerId 
     * @param {module:api/AllApi~deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId(id, featureId, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId");
      }
      // verify the required parameter 'featureId' is set
      if (featureId === undefined || featureId === null) {
        throw new Error("Missing the required parameter 'featureId' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId");
      }

      let pathParams = {
        'id': id,
        'featureId': featureId,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/features/{featureId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId operation.
     * @callback module:api/AllApi~deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {String} planId 
     * @param {module:api/AllApi~deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId(id, providerId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId,
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans/{planId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName operation.
     * @callback module:api/AllApi~deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} featureName 
     * @param {String} providerId 
     * @param {String} planId 
     * @param {module:api/AllApi~deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(id, featureName, providerId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName");
      }

      let pathParams = {
        'id': id,
        'featureName': featureName,
        'providerId': providerId,
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans/{planId}/features/{featureName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonsAddonId operation.
     * @callback module:api/AllApi~deleteOrganisationsIdAddonsAddonIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AllApi~deleteOrganisationsIdAddonsAddonIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonsAddonId(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonId");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonId");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonsAddonIdTagsTag operation.
     * @callback module:api/AllApi~deleteOrganisationsIdAddonsAddonIdTagsTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:api/AllApi~deleteOrganisationsIdAddonsAddonIdTagsTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonsAddonIdTagsTag(id, tag, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonIdTagsTag");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteOrganisationsIdAddonsAddonIdTagsTag");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonIdTagsTag");
      }

      let pathParams = {
        'id': id,
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppId operation.
     * @callback module:api/AllApi~deleteOrganisationsIdApplicationsAppIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~deleteOrganisationsIdApplicationsAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppId(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppId");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppId");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdAddonsAddonId operation.
     * @callback module:api/AllApi~deleteOrganisationsIdApplicationsAppIdAddonsAddonIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} addonId 
     * @param {module:api/AllApi~deleteOrganisationsIdApplicationsAppIdAddonsAddonIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdAddonsAddonId(id, appId, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId operation.
     * @callback module:api/AllApi~deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/AllApi~deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId(dependencyId, appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies/{dependencyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances operation.
     * @callback module:api/AllApi~deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {module:api/AllApi~deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances(id, appId, deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/deployments/{deploymentId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdEnvEnvName operation.
     * @callback module:api/AllApi~deleteOrganisationsIdApplicationsAppIdEnvEnvNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:api/AllApi~deleteOrganisationsIdApplicationsAppIdEnvEnvNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdEnvEnvName(id, appId, envName, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env/{envName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdInstances operation.
     * @callback module:api/AllApi~deleteOrganisationsIdApplicationsAppIdInstancesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~deleteOrganisationsIdApplicationsAppIdInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdInstances(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdInstances");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdInstances");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdTagsTag operation.
     * @callback module:api/AllApi~deleteOrganisationsIdApplicationsAppIdTagsTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:api/AllApi~deleteOrganisationsIdApplicationsAppIdTagsTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdTagsTag(id, appId, tag, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdTagsTag");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdTagsTag");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteOrganisationsIdApplicationsAppIdTagsTag");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdVhostsDomain operation.
     * @callback module:api/AllApi~deleteOrganisationsIdApplicationsAppIdVhostsDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:api/AllApi~deleteOrganisationsIdApplicationsAppIdVhostsDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdVhostsDomain(id, appId, domain, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdVhostsFavourite operation.
     * @callback module:api/AllApi~deleteOrganisationsIdApplicationsAppIdVhostsFavouriteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~deleteOrganisationsIdApplicationsAppIdVhostsFavouriteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdVhostsFavourite(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/favourite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdConsumersKey operation.
     * @callback module:api/AllApi~deleteOrganisationsIdConsumersKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} key 
     * @param {module:api/AllApi~deleteOrganisationsIdConsumersKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdConsumersKey(id, key, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdConsumersKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteOrganisationsIdConsumersKey");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/consumers/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdMembersUserId operation.
     * @callback module:api/AllApi~deleteOrganisationsIdMembersUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} userId 
     * @param {module:api/AllApi~deleteOrganisationsIdMembersUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdMembersUserId(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdMembersUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteOrganisationsIdMembersUserId");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdPaymentsBillingsBid operation.
     * @callback module:api/AllApi~deleteOrganisationsIdPaymentsBillingsBidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {module:api/AllApi~deleteOrganisationsIdPaymentsBillingsBidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdPaymentsBillingsBid(id, bid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdPaymentsBillingsBid");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling deleteOrganisationsIdPaymentsBillingsBid");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdPaymentsRecurring operation.
     * @callback module:api/AllApi~deleteOrganisationsIdPaymentsRecurringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~deleteOrganisationsIdPaymentsRecurringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdPaymentsRecurring(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdPaymentsRecurring");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/recurring', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelf operation.
     * @callback module:api/AllApi~deleteSelfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~deleteSelfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelf(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfAddonsAddonId operation.
     * @callback module:api/AllApi~deleteSelfAddonsAddonIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AllApi~deleteSelfAddonsAddonIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfAddonsAddonId(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteSelfAddonsAddonId");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfAddonsAddonIdTagsTag operation.
     * @callback module:api/AllApi~deleteSelfAddonsAddonIdTagsTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:api/AllApi~deleteSelfAddonsAddonIdTagsTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfAddonsAddonIdTagsTag(tag, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteSelfAddonsAddonIdTagsTag");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteSelfAddonsAddonIdTagsTag");
      }

      let pathParams = {
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppId operation.
     * @callback module:api/AllApi~deleteSelfApplicationsAppIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~deleteSelfApplicationsAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppId(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppId");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdAddonsAddonId operation.
     * @callback module:api/AllApi~deleteSelfApplicationsAppIdAddonsAddonIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} addonId 
     * @param {module:api/AllApi~deleteSelfApplicationsAppIdAddonsAddonIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdAddonsAddonId(appId, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdAddonsAddonId");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteSelfApplicationsAppIdAddonsAddonId");
      }

      let pathParams = {
        'appId': appId,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdDependenciesDependencyId operation.
     * @callback module:api/AllApi~deleteSelfApplicationsAppIdDependenciesDependencyIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {module:api/AllApi~deleteSelfApplicationsAppIdDependenciesDependencyIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdDependenciesDependencyId(dependencyId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling deleteSelfApplicationsAppIdDependenciesDependencyId");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdDependenciesDependencyId");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies/{dependencyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances operation.
     * @callback module:api/AllApi~deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {module:api/AllApi~deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances(appId, deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances");
      }

      let pathParams = {
        'appId': appId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/deployments/{deploymentId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdEnvEnvName operation.
     * @callback module:api/AllApi~deleteSelfApplicationsAppIdEnvEnvNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:api/AllApi~deleteSelfApplicationsAppIdEnvEnvNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdEnvEnvName(appId, envName, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdEnvEnvName");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling deleteSelfApplicationsAppIdEnvEnvName");
      }

      let pathParams = {
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/env/{envName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdInstances operation.
     * @callback module:api/AllApi~deleteSelfApplicationsAppIdInstancesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~deleteSelfApplicationsAppIdInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdInstances(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdInstances");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdTagsTag operation.
     * @callback module:api/AllApi~deleteSelfApplicationsAppIdTagsTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:api/AllApi~deleteSelfApplicationsAppIdTagsTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdTagsTag(appId, tag, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdTagsTag");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteSelfApplicationsAppIdTagsTag");
      }

      let pathParams = {
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdVhostsDomain operation.
     * @callback module:api/AllApi~deleteSelfApplicationsAppIdVhostsDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:api/AllApi~deleteSelfApplicationsAppIdVhostsDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdVhostsDomain(appId, domain, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdVhostsDomain");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteSelfApplicationsAppIdVhostsDomain");
      }

      let pathParams = {
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdVhostsFavourite operation.
     * @callback module:api/AllApi~deleteSelfApplicationsAppIdVhostsFavouriteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~deleteSelfApplicationsAppIdVhostsFavouriteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdVhostsFavourite(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdVhostsFavourite");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/favourite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfConsumersKey operation.
     * @callback module:api/AllApi~deleteSelfConsumersKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/AllApi~deleteSelfConsumersKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfConsumersKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSelfConsumersKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/consumers/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfEmailsEmail operation.
     * @callback module:api/AllApi~deleteSelfEmailsEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} email 
     * @param {module:api/AllApi~deleteSelfEmailsEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfEmailsEmail(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling deleteSelfEmailsEmail");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/emails/{email}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfKeysKey operation.
     * @callback module:api/AllApi~deleteSelfKeysKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/AllApi~deleteSelfKeysKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfKeysKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSelfKeysKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/keys/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfPaymentsBillingsBid operation.
     * @callback module:api/AllApi~deleteSelfPaymentsBillingsBidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/AllApi~deleteSelfPaymentsBillingsBidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfPaymentsBillingsBid(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling deleteSelfPaymentsBillingsBid");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfPaymentsMethodsMId operation.
     * @callback module:api/AllApi~deleteSelfPaymentsMethodsMIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} mId 
     * @param {module:api/AllApi~deleteSelfPaymentsMethodsMIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfPaymentsMethodsMId(mId, callback) {
      let postBody = null;
      // verify the required parameter 'mId' is set
      if (mId === undefined || mId === null) {
        throw new Error("Missing the required parameter 'mId' when calling deleteSelfPaymentsMethodsMId");
      }

      let pathParams = {
        'mId': mId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods/{mId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfPaymentsRecurring operation.
     * @callback module:api/AllApi~deleteSelfPaymentsRecurringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~deleteSelfPaymentsRecurringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfPaymentsRecurring(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/recurring', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfTokens operation.
     * @callback module:api/AllApi~deleteSelfTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~deleteSelfTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfTokens(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/tokens', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfTokensToken operation.
     * @callback module:api/AllApi~deleteSelfTokensTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/AllApi~deleteSelfTokensTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfTokensToken(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteSelfTokensToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/tokens/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventSocketGet operation.
     * @callback module:api/AllApi~eventsEventSocketGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve events as they come through a websocket connection. To have authorization, you have to send a `{ \"message_type\": \"oauth\", \"authorization\": \"oauth authorization string\" }` message
     * @param {module:api/AllApi~eventsEventSocketGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventsEventSocketGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/events/event-socket', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigProvider operation.
     * @callback module:api/AllApi~getConfigProviderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Addon provider configuration
     * @param {String} configurationProviderId Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/AllApi~getConfigProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getConfigProvider(configurationProviderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'configurationProviderId' is set
      if (configurationProviderId === undefined || configurationProviderId === null) {
        throw new Error("Missing the required parameter 'configurationProviderId' when calling getConfigProvider");
      }

      let pathParams = {
        'configurationProviderId': configurationProviderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/addon-providers/config-provider/addons/{configurationProviderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigProviderEnv operation.
     * @callback module:api/AllApi~getConfigProviderEnvCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get provider's addon environment
     * @param {String} configurationProviderId Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/AllApi~getConfigProviderEnvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getConfigProviderEnv(configurationProviderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'configurationProviderId' is set
      if (configurationProviderId === undefined || configurationProviderId === null) {
        throw new Error("Missing the required parameter 'configurationProviderId' when calling getConfigProviderEnv");
      }

      let pathParams = {
        'configurationProviderId': configurationProviderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v4/addon-providers/config-provider/addons/{configurationProviderId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithub operation.
     * @callback module:api/AllApi~getGithubCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getGithubCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionId}
     */
    getGithub(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionId;
      return this.apiClient.callApi(
        '/github', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubApplications operation.
     * @callback module:api/AllApi~getGithubApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getGithubApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getGithubApplications(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/github/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubCallback operation.
     * @callback module:api/AllApi~getGithubCallbackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [code] 
     * @param {String} [state] 
     * @param {String} [error] 
     * @param {String} [errorDescription] 
     * @param {String} [errorUri] 
     * @param {String} [cookie] 
     * @param {module:api/AllApi~getGithubCallbackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGithubCallback(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'code': opts['code'],
        'state': opts['state'],
        'error': opts['error'],
        'error_description': opts['errorDescription'],
        'error_uri': opts['errorUri']
      };
      let headerParams = {
        'Cookie': opts['cookie']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/callback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubEmails operation.
     * @callback module:api/AllApi~getGithubEmailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getGithubEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getGithubEmails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/github/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubKeys operation.
     * @callback module:api/AllApi~getGithubKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Key>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getGithubKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Key>}
     */
    getGithubKeys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Key];
      return this.apiClient.callApi(
        '/github/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubLink operation.
     * @callback module:api/AllApi~getGithubLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [transactionId] From GET /github
     * @param {String} [redirectUrl] 
     * @param {module:api/AllApi~getGithubLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGithubLink(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'transactionId': opts['transactionId'],
        'redirectUrl': opts['redirectUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/link', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubLogin operation.
     * @callback module:api/AllApi~getGithubLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [redirectUrl] 
     * @param {String} [fromAuthorize] 
     * @param {module:api/AllApi~getGithubLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGithubLogin(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'redirectUrl': opts['redirectUrl'],
        'fromAuthorize': opts['fromAuthorize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubSignup operation.
     * @callback module:api/AllApi~getGithubSignupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [redirectUrl] 
     * @param {String} [fromAuthorize] 
     * @param {module:api/AllApi~getGithubSignupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGithubSignup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'redirectUrl': opts['redirectUrl'],
        'fromAuthorize': opts['fromAuthorize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/signup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubUsername operation.
     * @callback module:api/AllApi~getGithubUsernameCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getGithubUsernameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getGithubUsername(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/github/username', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMatomo operation.
     * @callback module:api/AllApi~getMatomoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Matomo addon
     * @param {String} matomoId Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/AllApi~getMatomoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getMatomo(matomoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'matomoId' is set
      if (matomoId === undefined || matomoId === null) {
        throw new Error("Missing the required parameter 'matomoId' when calling getMatomo");
      }

      let pathParams = {
        'matomoId': matomoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/addon-providers/addon-matomo/addons/{matomoId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMatomoKTokenValidation operation.
     * @callback module:api/AllApi~getMatomoKTokenValidationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate a keycloak token
     * @param {Object} opts Optional parameters
     * @param {String} [keycloakToken] Environment variable injected on the app with 'KEYCLOAK_TOKEN' name
     * @param {String} [body] 
     * @param {module:api/AllApi~getMatomoKTokenValidationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getMatomoKTokenValidation(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'keycloakToken': opts['keycloakToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/addon-providers/addon-matomo/token/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroup operation.
     * @callback module:api/AllApi~getNetworkGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Network Group
     * Gets details of a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~getNetworkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroup(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroup");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroup");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupMember operation.
     * @callback module:api/AllApi~getNetworkGroupMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get member
     * Gets details of a Network Group member.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} memberId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~getNetworkGroupMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema1}
     */
    getNetworkGroupMember(ownerId, networkGroupId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupMember");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupMember");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getNetworkGroupMember");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schema1;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupPeer operation.
     * @callback module:api/AllApi~getNetworkGroupPeerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get peer
     * Gets details of a Network Group peer.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~getNetworkGroupPeerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupPeer(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupPeer");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupPeer");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling getNetworkGroupPeer");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupStream operation.
     * @callback module:api/AllApi~getNetworkGroupStreamCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Network Group SSE
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~getNetworkGroupStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupStream(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupStream");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupStream");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupWireGuardConfiguration operation.
     * @callback module:api/AllApi~getNetworkGroupWireGuardConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~getNetworkGroupWireGuardConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupWireGuardConfiguration(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfiguration");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfiguration");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfiguration");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupWireGuardConfigurationStream operation.
     * @callback module:api/AllApi~getNetworkGroupWireGuardConfigurationStreamCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~getNetworkGroupWireGuardConfigurationStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupWireGuardConfigurationStream(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfigurationStream");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfigurationStream");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfigurationStream");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsfeedEngineering operation.
     * @callback module:api/AllApi~getNewsfeedEngineeringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getNewsfeedEngineeringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNewsfeedEngineering(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/newsfeeds/engineering', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsfeedsBlog operation.
     * @callback module:api/AllApi~getNewsfeedsBlogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getNewsfeedsBlogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNewsfeedsBlog(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/newsfeeds/blog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOauthAuthorize operation.
     * @callback module:api/AllApi~getOauthAuthorizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [oauthToken] 
     * @param {String} [cookie] 
     * @param {module:api/AllApi~getOauthAuthorizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOauthAuthorize(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'oauth_token': opts['oauthToken']
      };
      let headerParams = {
        'Cookie': opts['cookie']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/oauth/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOauthRights operation.
     * @callback module:api/AllApi~getOauthRightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getOauthRightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rights}
     */
    getOauthRights(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rights;
      return this.apiClient.callApi(
        '/oauth/rights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisations operation.
     * @callback module:api/AllApi~getOrganisationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organisation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [user] 
     * @param {module:api/AllApi~getOrganisationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organisation>}
     */
    getOrganisations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organisation];
      return this.apiClient.callApi(
        '/organisations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsId operation.
     * @callback module:api/AllApi~getOrganisationsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
    getOrganisationsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organisation;
      return this.apiClient.callApi(
        '/organisations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonproviders operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonprovidersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Provider>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdAddonprovidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Provider>}
     */
    getOrganisationsIdAddonproviders(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonproviders");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Provider];
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonprovidersProviderId operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonprovidersProviderIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/AllApi~getOrganisationsIdAddonprovidersProviderIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    getOrganisationsIdAddonprovidersProviderId(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderId");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderId");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonprovidersProviderIdFeatures operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonprovidersProviderIdFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Feature>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/AllApi~getOrganisationsIdAddonprovidersProviderIdFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Feature>}
     */
    getOrganisationsIdAddonprovidersProviderIdFeatures(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdFeatures");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdFeatures");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Feature];
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonprovidersProviderIdPlans operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonprovidersProviderIdPlansCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Plan>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/AllApi~getOrganisationsIdAddonprovidersProviderIdPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Plan>}
     */
    getOrganisationsIdAddonprovidersProviderIdPlans(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdPlans");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdPlans");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Plan];
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonprovidersProviderIdPlansPlanId operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {String} planId 
     * @param {module:api/AllApi~getOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plan}
     */
    getOrganisationsIdAddonprovidersProviderIdPlansPlanId(id, providerId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId,
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Plan;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans/{planId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonprovidersProviderIdTags operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonprovidersProviderIdTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/AllApi~getOrganisationsIdAddonprovidersProviderIdTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getOrganisationsIdAddonprovidersProviderIdTags(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdTags");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdTags");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddons operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdAddonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getOrganisationsIdAddons(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddons");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/organisations/{id}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonId operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonsAddonIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AllApi~getOrganisationsIdAddonsAddonIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    getOrganisationsIdAddonsAddonId(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonId");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonId");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdApplications operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonsAddonIdApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AllApi~getOrganisationsIdAddonsAddonIdApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdAddonsAddonIdApplications(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdApplications");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdApplications");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdEnv operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonsAddonIdEnvCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AllApi~getOrganisationsIdAddonsAddonIdEnvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getOrganisationsIdAddonsAddonIdEnv(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdEnv");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdEnv");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdSso operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonsAddonIdSsoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddonProviderSso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} providerId 
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdAddonsAddonIdSsoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddonProviderSso}
     */
    getOrganisationsIdAddonsAddonIdSso(providerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonsAddonIdSso");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdSso");
      }

      let pathParams = {
        'providerId': providerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddonProviderSso;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/sso', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdTags operation.
     * @callback module:api/AllApi~getOrganisationsIdAddonsAddonIdTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AllApi~getOrganisationsIdAddonsAddonIdTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getOrganisationsIdAddonsAddonIdTags(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdTags");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdTags");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplications operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdApplications(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplications");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppId operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    getOrganisationsIdApplicationsAppId(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppId");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppId");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdAddons operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdAddonsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdAddonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getOrganisationsIdApplicationsAppIdAddons(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddons");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddons");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdAddonsEnv operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdAddonsEnvCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Env>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdAddonsEnvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Env>}
     */
    getOrganisationsIdApplicationsAppIdAddonsEnv(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddonsEnv");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddonsEnv");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Env];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdDependencies operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdApplicationsAppIdDependencies(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependencies");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependencies");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdDependents operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdDependentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdDependentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdApplicationsAppIdDependents(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependents");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependents");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdDeployments operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [limit] 
     * @param {String} [offset] 
     * @param {String} [action] 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    getOrganisationsIdApplicationsAppIdDeployments(id, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDeployments");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDeployments");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deployment];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdEnv operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdEnvCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdEnvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getOrganisationsIdApplicationsAppIdEnv(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdEnv");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdEnv");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdInstances operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppInstance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppInstance>}
     */
    getOrganisationsIdApplicationsAppIdInstances(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdInstances");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdInstances");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppInstance];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdTags operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getOrganisationsIdApplicationsAppIdTags(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdTags");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdTags");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdVhosts operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdVhostsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vhost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdVhostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vhost>}
     */
    getOrganisationsIdApplicationsAppIdVhosts(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhosts");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhosts");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vhost];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdVhostsFavourite operation.
     * @callback module:api/AllApi~getOrganisationsIdApplicationsAppIdVhostsFavouriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vhost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AllApi~getOrganisationsIdApplicationsAppIdVhostsFavouriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vhost}
     */
    getOrganisationsIdApplicationsAppIdVhostsFavourite(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vhost;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/favourite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdConsumers operation.
     * @callback module:api/AllApi~getOrganisationsIdConsumersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Consumer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdConsumersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Consumer>}
     */
    getOrganisationsIdConsumers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdConsumers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Consumer];
      return this.apiClient.callApi(
        '/organisations/{id}/consumers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdConsumersKey operation.
     * @callback module:api/AllApi~getOrganisationsIdConsumersKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Consumer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} key 
     * @param {module:api/AllApi~getOrganisationsIdConsumersKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Consumer}
     */
    getOrganisationsIdConsumersKey(id, key, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdConsumersKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganisationsIdConsumersKey");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Consumer;
      return this.apiClient.callApi(
        '/organisations/{id}/consumers/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdConsumersKeySecret operation.
     * @callback module:api/AllApi~getOrganisationsIdConsumersKeySecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} key 
     * @param {module:api/AllApi~getOrganisationsIdConsumersKeySecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    getOrganisationsIdConsumersKeySecret(id, key, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdConsumersKeySecret");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganisationsIdConsumersKeySecret");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/organisations/{id}/consumers/{key}/secret', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdConsumptions operation.
     * @callback module:api/AllApi~getOrganisationsIdConsumptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [appId] 
     * @param {String} [from] 
     * @param {String} [to] 
     * @param {module:api/AllApi~getOrganisationsIdConsumptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conso}
     */
    getOrganisationsIdConsumptions(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdConsumptions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'appId': opts['appId'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Conso;
      return this.apiClient.callApi(
        '/organisations/{id}/consumptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdCredits operation.
     * @callback module:api/AllApi~getOrganisationsIdCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credits}
     */
    getOrganisationsIdCredits(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdCredits");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credits;
      return this.apiClient.callApi(
        '/organisations/{id}/credits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdDeployments operation.
     * @callback module:api/AllApi~getOrganisationsIdDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentSummary}
     */
    getOrganisationsIdDeployments(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdDeployments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentSummary;
      return this.apiClient.callApi(
        '/organisations/{id}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdInstances operation.
     * @callback module:api/AllApi~getOrganisationsIdInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganisationsIdInstances(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdInstances");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organisations/{id}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdMembers operation.
     * @callback module:api/AllApi~getOrganisationsIdMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema1>}
     */
    getOrganisationsIdMembers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdMembers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schema1];
      return this.apiClient.callApi(
        '/organisations/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentInfo operation.
     * @callback module:api/AllApi~getOrganisationsIdPaymentInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdPaymentInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentInfo(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentInfo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payment-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsBillings operation.
     * @callback module:api/AllApi~getOrganisationsIdPaymentsBillingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getOrganisationsIdPaymentsBillingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsBillings(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsBillingsBid operation.
     * @callback module:api/AllApi~getOrganisationsIdPaymentsBillingsBidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {module:api/AllApi~getOrganisationsIdPaymentsBillingsBidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsBillingsBid(id, bid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillingsBid");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getOrganisationsIdPaymentsBillingsBid");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsBillingsBidPdf operation.
     * @callback module:api/AllApi~getOrganisationsIdPaymentsBillingsBidPdfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {Object} opts Optional parameters
     * @param {String} [token] 
     * @param {module:api/AllApi~getOrganisationsIdPaymentsBillingsBidPdfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsBillingsBidPdf(id, bid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillingsBidPdf");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getOrganisationsIdPaymentsBillingsBidPdf");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}.pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsFullPricePrice operation.
     * @callback module:api/AllApi~getOrganisationsIdPaymentsFullPricePriceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} price 
     * @param {module:api/AllApi~getOrganisationsIdPaymentsFullPricePriceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsFullPricePrice(id, price, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsFullPricePrice");
      }
      // verify the required parameter 'price' is set
      if (price === undefined || price === null) {
        throw new Error("Missing the required parameter 'price' when calling getOrganisationsIdPaymentsFullPricePrice");
      }

      let pathParams = {
        'id': id,
        'price': price
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/fullprice/{price}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPasswordForgotten operation.
     * @callback module:api/AllApi~getPasswordForgottenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getPasswordForgottenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPasswordForgotten(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/password_forgotten', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPasswordForgottenKey operation.
     * @callback module:api/AllApi~getPasswordForgottenKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/AllApi~getPasswordForgottenKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPasswordForgottenKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPasswordForgottenKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/password_forgotten/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentsCouponsName operation.
     * @callback module:api/AllApi~getPaymentsCouponsNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name 
     * @param {module:api/AllApi~getPaymentsCouponsNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPaymentsCouponsName(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPaymentsCouponsName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments/coupons/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentsProviders operation.
     * @callback module:api/AllApi~getPaymentsProvidersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentProvider>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getPaymentsProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PaymentProvider>}
     */
    getPaymentsProviders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PaymentProvider];
      return this.apiClient.callApi(
        '/payments/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentsTokensStripe operation.
     * @callback module:api/AllApi~getPaymentsTokensStripeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getPaymentsTokensStripeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPaymentsTokensStripe(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments/tokens/stripe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsAddonProviders operation.
     * @callback module:api/AllApi~getProductsAddonProvidersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Provider>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getProductsAddonProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Provider>}
     */
    getProductsAddonProviders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Provider];
      return this.apiClient.callApi(
        '/products/addonproviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsAddonProvidersProviderId operation.
     * @callback module:api/AllApi~getProductsAddonProvidersProviderIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} providerId 
     * @param {module:api/AllApi~getProductsAddonProvidersProviderIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    getProductsAddonProvidersProviderId(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getProductsAddonProvidersProviderId");
      }

      let pathParams = {
        'provider_id': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/products/addonproviders/{provider_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsCountries operation.
     * @callback module:api/AllApi~getProductsCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Country} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getProductsCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Country}
     */
    getProductsCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Country;
      return this.apiClient.callApi(
        '/products/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsCountrycodes operation.
     * @callback module:api/AllApi~getProductsCountrycodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Country} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getProductsCountrycodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Country}
     */
    getProductsCountrycodes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Country;
      return this.apiClient.callApi(
        '/products/countrycodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsInstances operation.
     * @callback module:api/AllApi~getProductsInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [_for] 
     * @param {module:api/AllApi~getProductsInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instance>}
     */
    getProductsInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'for': opts['_for']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/products/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsInstancesTypeVersion operation.
     * @callback module:api/AllApi~getProductsInstancesTypeVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Instance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} type 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [_for] 
     * @param {String} [app] 
     * @param {module:api/AllApi~getProductsInstancesTypeVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Instance}
     */
    getProductsInstancesTypeVersion(type, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getProductsInstancesTypeVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getProductsInstancesTypeVersion");
      }

      let pathParams = {
        'type': type,
        'version': version
      };
      let queryParams = {
        'for': opts['_for'],
        'app': opts['app']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/products/instances/{type}-{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsPackages operation.
     * @callback module:api/AllApi~getProductsPackagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [coupon] 
     * @param {String} [orgaId] 
     * @param {String} [currency] 
     * @param {module:api/AllApi~getProductsPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductsPackages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'coupon': opts['coupon'],
        'orgaId': opts['orgaId'],
        'currency': opts['currency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsPrices operation.
     * @callback module:api/AllApi~getProductsPricesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getProductsPricesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductsPrices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsZones operation.
     * @callback module:api/AllApi~getProductsZonesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Zone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getProductsZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Zone>}
     */
    getProductsZones(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Zone];
      return this.apiClient.callApi(
        '/products/zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelf operation.
     * @callback module:api/AllApi~getSelfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Get information about yourself
     * @param {module:api/AllApi~getSelfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getSelf(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/self', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddons operation.
     * @callback module:api/AllApi~getSelfAddonsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Addon
     * Get all the addons
     * @param {module:api/AllApi~getSelfAddonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getSelfAddons(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/self/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonId operation.
     * @callback module:api/AllApi~getSelfAddonsAddonIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specific addon
     * Get a specific addon
     * @param {String} addonId 
     * @param {module:api/AllApi~getSelfAddonsAddonIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    getSelfAddonsAddonId(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonId");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/self/addons/{addonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdApplications operation.
     * @callback module:api/AllApi~getSelfAddonsAddonIdApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AllApi~getSelfAddonsAddonIdApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfAddonsAddonIdApplications(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdApplications");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/addons/{addonId}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdEnv operation.
     * @callback module:api/AllApi~getSelfAddonsAddonIdEnvCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AllApi~getSelfAddonsAddonIdEnvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getSelfAddonsAddonIdEnv(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdEnv");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/self/addons/{addonId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdSso operation.
     * @callback module:api/AllApi~getSelfAddonsAddonIdSsoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AllApi~getSelfAddonsAddonIdSsoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sso}
     */
    getSelfAddonsAddonIdSso(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdSso");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sso;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/sso', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdTags operation.
     * @callback module:api/AllApi~getSelfAddonsAddonIdTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AllApi~getSelfAddonsAddonIdTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getSelfAddonsAddonIdTags(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdTags");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/self/addons/{addonId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplications operation.
     * @callback module:api/AllApi~getSelfApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfApplications(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppId operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~getSelfApplicationsAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    getSelfApplicationsAppId(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppId");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/self/applications/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdAddons operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdAddonsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~getSelfApplicationsAppIdAddonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getSelfApplicationsAppIdAddons(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddons");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdAddonsEnv operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdAddonsEnvCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Env>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~getSelfApplicationsAppIdAddonsEnvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Env>}
     */
    getSelfApplicationsAppIdAddonsEnv(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddonsEnv");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Env];
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDependencies operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~getSelfApplicationsAppIdDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfApplicationsAppIdDependencies(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependencies");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDependenciesDependencyId operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdDependenciesDependencyIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/AllApi~getSelfApplicationsAppIdDependenciesDependencyIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfApplicationsAppIdDependenciesDependencyId(dependencyId, appId, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling getSelfApplicationsAppIdDependenciesDependencyId");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependenciesDependencyId");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling getSelfApplicationsAppIdDependenciesDependencyId");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies/{dependencyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDependents operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdDependentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~getSelfApplicationsAppIdDependentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfApplicationsAppIdDependents(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependents");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDeployments operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [limit] 
     * @param {String} [offset] 
     * @param {String} [action] 
     * @param {module:api/AllApi~getSelfApplicationsAppIdDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    getSelfApplicationsAppIdDeployments(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDeployments");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deployment];
      return this.apiClient.callApi(
        '/self/applications/{appId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdEnv operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdEnvCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~getSelfApplicationsAppIdEnvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getSelfApplicationsAppIdEnv(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdEnv");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/self/applications/{appId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdInstances operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~getSelfApplicationsAppIdInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instance>}
     */
    getSelfApplicationsAppIdInstances(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdInstances");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdTags operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~getSelfApplicationsAppIdTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getSelfApplicationsAppIdTags(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdTags");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/self/applications/{appId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdVhosts operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdVhostsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vhost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~getSelfApplicationsAppIdVhostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vhost>}
     */
    getSelfApplicationsAppIdVhosts(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdVhosts");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vhost];
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdVhostsFavourite operation.
     * @callback module:api/AllApi~getSelfApplicationsAppIdVhostsFavouriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vhost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~getSelfApplicationsAppIdVhostsFavouriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vhost}
     */
    getSelfApplicationsAppIdVhostsFavourite(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdVhostsFavourite");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vhost;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/favourite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfConfirmationEmail operation.
     * @callback module:api/AllApi~getSelfConfirmationEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfConfirmationEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfConfirmationEmail(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/confirmation_email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfConsumers operation.
     * @callback module:api/AllApi~getSelfConsumersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Consumer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfConsumersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Consumer>}
     */
    getSelfConsumers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Consumer];
      return this.apiClient.callApi(
        '/self/consumers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfConsumersKey operation.
     * @callback module:api/AllApi~getSelfConsumersKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Consumer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/AllApi~getSelfConsumersKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Consumer}
     */
    getSelfConsumersKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSelfConsumersKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Consumer;
      return this.apiClient.callApi(
        '/self/consumers/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfConsumersKeySecret operation.
     * @callback module:api/AllApi~getSelfConsumersKeySecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/AllApi~getSelfConsumersKeySecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    getSelfConsumersKeySecret(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSelfConsumersKeySecret");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/self/consumers/{key}/secret', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfConsumptions operation.
     * @callback module:api/AllApi~getSelfConsumptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [appId] 
     * @param {String} [from] 
     * @param {String} [to] 
     * @param {module:api/AllApi~getSelfConsumptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conso}
     */
    getSelfConsumptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'appId': opts['appId'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Conso;
      return this.apiClient.callApi(
        '/self/consumptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfCredits operation.
     * @callback module:api/AllApi~getSelfCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credits}
     */
    getSelfCredits(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credits;
      return this.apiClient.callApi(
        '/self/credits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfEmails operation.
     * @callback module:api/AllApi~getSelfEmailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getSelfEmails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/self/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfId operation.
     * @callback module:api/AllApi~getSelfIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getSelfId(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/self/id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfInstances operation.
     * @callback module:api/AllApi~getSelfInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instance>}
     */
    getSelfInstances(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/self/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfKeys operation.
     * @callback module:api/AllApi~getSelfKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Key>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Key>}
     */
    getSelfKeys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Key];
      return this.apiClient.callApi(
        '/self/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentInfo operation.
     * @callback module:api/AllApi~getSelfPaymentInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfPaymentInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payment-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsBillings operation.
     * @callback module:api/AllApi~getSelfPaymentsBillingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfPaymentsBillingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsBillings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsBillingsBid operation.
     * @callback module:api/AllApi~getSelfPaymentsBillingsBidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/AllApi~getSelfPaymentsBillingsBidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsBillingsBid(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getSelfPaymentsBillingsBid");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsBillingsBidPdf operation.
     * @callback module:api/AllApi~getSelfPaymentsBillingsBidPdfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {Object} opts Optional parameters
     * @param {String} [token] 
     * @param {module:api/AllApi~getSelfPaymentsBillingsBidPdfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsBillingsBidPdf(bid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getSelfPaymentsBillingsBidPdf");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}.pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsFullpricePrice operation.
     * @callback module:api/AllApi~getSelfPaymentsFullpricePriceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} price 
     * @param {module:api/AllApi~getSelfPaymentsFullpricePriceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsFullpricePrice(price, callback) {
      let postBody = null;
      // verify the required parameter 'price' is set
      if (price === undefined || price === null) {
        throw new Error("Missing the required parameter 'price' when calling getSelfPaymentsFullpricePrice");
      }

      let pathParams = {
        'price': price
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/fullprice/{price}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsMethods operation.
     * @callback module:api/AllApi~getSelfPaymentsMethodsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfPaymentsMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsMethods(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfTokens operation.
     * @callback module:api/AllApi~getSelfTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Token>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSelfTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Token>}
     */
    getSelfTokens(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Token];
      return this.apiClient.callApi(
        '/self/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfValidateEmail operation.
     * @callback module:api/AllApi~getSelfValidateEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [validationKey] 
     * @param {module:api/AllApi~getSelfValidateEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfValidateEmail(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'validationKey': opts['validationKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/validate_email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSummary operation.
     * @callback module:api/AllApi~getSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Summary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~getSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Summary}
     */
    getSummary(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Summary;
      return this.apiClient.callApi(
        '/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersId operation.
     * @callback module:api/AllApi~getUsersIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getUsersIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUsersId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUsersId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersIdApplications operation.
     * @callback module:api/AllApi~getUsersIdApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~getUsersIdApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getUsersIdApplications(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUsersIdApplications");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/users/{id}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersUserIdGitInfo operation.
     * @callback module:api/AllApi~getUsersUserIdGitInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/AllApi~getUsersUserIdGitInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUsersUserIdGitInfo(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUsersUserIdGitInfo");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/git-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVendorApps operation.
     * @callback module:api/AllApi~getVendorAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] 
     * @param {module:api/AllApi~getVendorAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getVendorApps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/vendor/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVendorAppsAddonId operation.
     * @callback module:api/AllApi~getVendorAppsAddonIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AllApi~getVendorAppsAddonIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVendorAppsAddonId(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getVendorAppsAddonId");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor/apps/{addonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkGroupMembers operation.
     * @callback module:api/AllApi~listNetworkGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List members
     * Lists members in a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~listNetworkGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema1>}
     */
    listNetworkGroupMembers(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling listNetworkGroupMembers");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling listNetworkGroupMembers");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schema1];
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkGroupPeers operation.
     * @callback module:api/AllApi~listNetworkGroupPeersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List peers
     * Lists peers in a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~listNetworkGroupPeersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    listNetworkGroupPeers(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling listNetworkGroupPeers");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling listNetworkGroupPeers");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkGroups operation.
     * @callback module:api/AllApi~listNetworkGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Network Groups
     * Lists Network Groups from an owner.
     * @param {String} ownerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/AllApi~listNetworkGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    listNetworkGroups(ownerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling listNetworkGroups");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdDrainsGet operation.
     * @callback module:api/AllApi~logsAppIdDrainsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs drains for a given application
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~logsAppIdDrainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdDrainsGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdDrainsGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}/drains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdDrainsIdOrUrlDelete operation.
     * @callback module:api/AllApi~logsAppIdDrainsIdOrUrlDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the logs drain by id or url for a given application
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~logsAppIdDrainsIdOrUrlDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdDrainsIdOrUrlDelete(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdDrainsIdOrUrlDelete");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}/drains/:idOrUrl', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdDrainsIdOrUrlGet operation.
     * @callback module:api/AllApi~logsAppIdDrainsIdOrUrlGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs drain by id or url for a given application
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~logsAppIdDrainsIdOrUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdDrainsIdOrUrlGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdDrainsIdOrUrlGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}/drains/:idOrUrl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdDrainsPost operation.
     * @callback module:api/AllApi~logsAppIdDrainsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a log drain for a given application
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~logsAppIdDrainsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdDrainsPost(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdDrainsPost");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}/drains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdGet operation.
     * @callback module:api/AllApi~logsAppIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs for a given application
     * @param {String} appId Application Id
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of lines to return
     * @param {module:model/String} [order = 'desc')] Logs order
     * @param {Date} [after] Lowest bound for logs date, ISO 8601
     * @param {Date} [before] Highest bounds for logs date, ISO 8601
     * @param {String} [filter] A pattern to filter with
     * @param {String} [deploymentId] Only fetch logs emitted by this deployment
     * @param {module:api/AllApi~logsAppIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdGet(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before'],
        'filter': opts['filter'],
        'deployment_id': opts['deploymentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsAppIdSseGet operation.
     * @callback module:api/AllApi~logsAppIdSseGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve logs as they come through a sse connection. To have authorization, you have to add `authorization=oAuthAuthorizationString` as query param.
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~logsAppIdSseGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsAppIdSseGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsAppIdSseGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/{appId}/sse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsDrainsDrainIdPut operation.
     * @callback module:api/AllApi~logsDrainsDrainIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param {String} drainId Automatically added
     * @param {module:api/AllApi~logsDrainsDrainIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsDrainsDrainIdPut(drainId, callback) {
      let postBody = null;
      // verify the required parameter 'drainId' is set
      if (drainId === undefined || drainId === null) {
        throw new Error("Missing the required parameter 'drainId' when calling logsDrainsDrainIdPut");
      }

      let pathParams = {
        'drainId': drainId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/drains/{drainId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsDrainsGet operation.
     * @callback module:api/AllApi~logsDrainsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param {module:api/AllApi~logsDrainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsDrainsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/drains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsLogsChunkedAppIdGet operation.
     * @callback module:api/AllApi~logsLogsChunkedAppIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve logs as they come through a chunked, never-ending response
     * @param {String} appId Application Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [download] Tell the user-agent to download the body as a file
     * @param {module:api/AllApi~logsLogsChunkedAppIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsLogsChunkedAppIdGet(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsLogsChunkedAppIdGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'download': opts['download']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/logs-chunked/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsLogsSocketAppIdGet operation.
     * @callback module:api/AllApi~logsLogsSocketAppIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a `{ \"message_type\": \"oauth\", \"authorization\": \"oauth authorization string\" }` message
     * @param {String} appId Application Id
     * @param {Object} opts Optional parameters
     * @param {Date} [since] Only fetch logs newer than this (ISO-8601 formatted) date
     * @param {String} [filter] A pattern to filter with
     * @param {String} [deploymentId] Only fetch logs emitted by this deployment
     * @param {module:api/AllApi~logsLogsSocketAppIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsLogsSocketAppIdGet(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsLogsSocketAppIdGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'since': opts['since'],
        'filter': opts['filter'],
        'deployment_id': opts['deploymentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/logs-socket/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsSocketAppIdGet operation.
     * @callback module:api/AllApi~logsSocketAppIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WebSocket to get logs for :appID. Optional queryString arg bind_to_es=true to bind WS on log storage and not real time AMQP broker
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~logsSocketAppIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsSocketAppIdGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling logsSocketAppIdGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs-socket/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsEmailhooksOwnerIdGet operation.
     * @callback module:api/AllApi~notificationsEmailhooksOwnerIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list created e-mail hooks
     * @param {String} ownerId Automatically added
     * @param {module:api/AllApi~notificationsEmailhooksOwnerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsEmailhooksOwnerIdGet(ownerId, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling notificationsEmailhooksOwnerIdGet");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/emailhooks/{ownerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsEmailhooksOwnerIdIdDelete operation.
     * @callback module:api/AllApi~notificationsEmailhooksOwnerIdIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an e-mail hook
     * @param {String} ownerId Automatically added
     * @param {module:api/AllApi~notificationsEmailhooksOwnerIdIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsEmailhooksOwnerIdIdDelete(ownerId, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling notificationsEmailhooksOwnerIdIdDelete");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/emailhooks/{ownerId}/:id', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsEmailhooksOwnerIdIdPut operation.
     * @callback module:api/AllApi~notificationsEmailhooksOwnerIdIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit an e-mail hook
     * @param {String} ownerId Automatically added
     * @param {module:api/AllApi~notificationsEmailhooksOwnerIdIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsEmailhooksOwnerIdIdPut(ownerId, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling notificationsEmailhooksOwnerIdIdPut");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/emailhooks/{ownerId}/:id', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsEmailhooksOwnerIdPost operation.
     * @callback module:api/AllApi~notificationsEmailhooksOwnerIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a hook for e-mail notifications
     * @param {String} ownerId Automatically added
     * @param {module:api/AllApi~notificationsEmailhooksOwnerIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsEmailhooksOwnerIdPost(ownerId, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling notificationsEmailhooksOwnerIdPost");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/emailhooks/{ownerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsInfoEventsGet operation.
     * @callback module:api/AllApi~notificationsInfoEventsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list available events
     * @param {module:api/AllApi~notificationsInfoEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsInfoEventsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/info/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsInfoWebhookformatsGet operation.
     * @callback module:api/AllApi~notificationsInfoWebhookformatsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list available webhook formats
     * @param {module:api/AllApi~notificationsInfoWebhookformatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsInfoWebhookformatsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/info/webhookformats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsWebhooksOwnerIdGet operation.
     * @callback module:api/AllApi~notificationsWebhooksOwnerIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list created hooks
     * @param {String} ownerId Automatically added
     * @param {module:api/AllApi~notificationsWebhooksOwnerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsWebhooksOwnerIdGet(ownerId, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling notificationsWebhooksOwnerIdGet");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/webhooks/{ownerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsWebhooksOwnerIdIdDelete operation.
     * @callback module:api/AllApi~notificationsWebhooksOwnerIdIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a hook
     * @param {String} ownerId Automatically added
     * @param {module:api/AllApi~notificationsWebhooksOwnerIdIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsWebhooksOwnerIdIdDelete(ownerId, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling notificationsWebhooksOwnerIdIdDelete");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/webhooks/{ownerId}/:id', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsWebhooksOwnerIdIdPut operation.
     * @callback module:api/AllApi~notificationsWebhooksOwnerIdIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit a hook
     * @param {String} ownerId Automatically added
     * @param {module:api/AllApi~notificationsWebhooksOwnerIdIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsWebhooksOwnerIdIdPut(ownerId, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling notificationsWebhooksOwnerIdIdPut");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/webhooks/{ownerId}/:id', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsWebhooksOwnerIdPost operation.
     * @callback module:api/AllApi~notificationsWebhooksOwnerIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a hook for notifications
     * @param {String} ownerId Automatically added
     * @param {module:api/AllApi~notificationsWebhooksOwnerIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsWebhooksOwnerIdPost(ownerId, callback) {
      let postBody = null;
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling notificationsWebhooksOwnerIdPost");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/webhooks/{ownerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthAccessTokenQueryPost operation.
     * @callback module:api/AllApi~oauthAccessTokenQueryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [oauthConsumerKey] 
     * @param {String} [oauthToken] 
     * @param {String} [oauthSignatureMethod] 
     * @param {String} [oauthSignature] 
     * @param {String} [oauthTimestamp] 
     * @param {String} [oauthNonce] 
     * @param {String} [oauthVersion] 
     * @param {String} [oauthVerifier] 
     * @param {String} [oauthCallback] 
     * @param {String} [oauthTokenSecret] 
     * @param {String} [oauthCallbackConfirmed] 
     * @param {module:api/AllApi~oauthAccessTokenQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    oauthAccessTokenQueryPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'oauth_consumer_key': opts['oauthConsumerKey'],
        'oauth_token': opts['oauthToken'],
        'oauth_signature_method': opts['oauthSignatureMethod'],
        'oauth_signature': opts['oauthSignature'],
        'oauth_timestamp': opts['oauthTimestamp'],
        'oauth_nonce': opts['oauthNonce'],
        'oauth_version': opts['oauthVersion'],
        'oauth_verifier': opts['oauthVerifier'],
        'oauth_callback': opts['oauthCallback'],
        'oauth_token_secret': opts['oauthTokenSecret'],
        'oauth_callback_confirmed': opts['oauthCallbackConfirmed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/oauth/access_token_query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthRequestTokenQueryPost operation.
     * @callback module:api/AllApi~oauthRequestTokenQueryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [oauthConsumerKey] 
     * @param {String} [oauthToken] 
     * @param {String} [oauthSignatureMethod] 
     * @param {String} [oauthSignature] 
     * @param {String} [oauthTimestamp] 
     * @param {String} [oauthNonce] 
     * @param {String} [oauthVersion] 
     * @param {String} [oauthVerifier] 
     * @param {String} [oauthCallback] 
     * @param {String} [oauthTokenSecret] 
     * @param {String} [oauthCallbackConfirmed] 
     * @param {module:api/AllApi~oauthRequestTokenQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    oauthRequestTokenQueryPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'oauth_consumer_key': opts['oauthConsumerKey'],
        'oauth_token': opts['oauthToken'],
        'oauth_signature_method': opts['oauthSignatureMethod'],
        'oauth_signature': opts['oauthSignature'],
        'oauth_timestamp': opts['oauthTimestamp'],
        'oauth_nonce': opts['oauthNonce'],
        'oauth_version': opts['oauthVersion'],
        'oauth_verifier': opts['oauthVerifier'],
        'oauth_callback': opts['oauthCallback'],
        'oauth_token_secret': opts['oauthTokenSecret'],
        'oauth_callback_confirmed': opts['oauthCallbackConfirmed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/oauth/request_token_query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the openapiGet operation.
     * @callback module:api/AllApi~openapiGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~openapiGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    openapiGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '//openapi', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the openapiTypeGet operation.
     * @callback module:api/AllApi~openapiTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the swagger for this API as {type}
     * Get the swagger for this API as {type}. Type can be either \"yml\" or \"json\".
     * @param {String} type 
     * @param {module:api/AllApi~openapiTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    openapiTypeGet(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling openapiTypeGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/openapi.{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonprovidersProviderIdDelete operation.
     * @callback module:api/AllApi~organisationsIdAddonprovidersProviderIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an add-on provider
     * Remove a given add-on provider. providerId must be owned by organisation {id}.
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/AllApi~organisationsIdAddonprovidersProviderIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdAddonprovidersProviderIdDelete(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonprovidersProviderIdDelete");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling organisationsIdAddonprovidersProviderIdDelete");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdInstancesGet operation.
     * @callback module:api/AllApi~organisationsIdAddonsAddonIdInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupernovaInstanceView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List instances for this add-on.
     * @param {String} id 
     * @param {String} addonId 
     * @param {Object} opts Optional parameters
     * @param {String} [deploymentId] 
     * @param {String} [withDeleted] 
     * @param {module:api/AllApi~organisationsIdAddonsAddonIdInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupernovaInstanceView>}
     */
    organisationsIdAddonsAddonIdInstancesGet(id, addonId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesGet");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesGet");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
        'deploymentId': opts['deploymentId'],
        'withDeleted': opts['withDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SupernovaInstanceView];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdInstancesInstanceIdGet operation.
     * @callback module:api/AllApi~organisationsIdAddonsAddonIdInstancesInstanceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupernovaInstanceView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific instance for {addonId}
     * @param {String} instanceId 
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AllApi~organisationsIdAddonsAddonIdInstancesInstanceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupernovaInstanceView}
     */
    organisationsIdAddonsAddonIdInstancesInstanceIdGet(instanceId, id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet");
      }

      let pathParams = {
        'instanceId': instanceId,
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupernovaInstanceView;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdMigrationsGet operation.
     * @callback module:api/AllApi~organisationsIdAddonsAddonIdMigrationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddonMigration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get past migrations from add-on.
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AllApi~organisationsIdAddonsAddonIdMigrationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddonMigration>}
     */
    organisationsIdAddonsAddonIdMigrationsGet(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsGet");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsGet");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AddonMigration];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/migrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdMigrationsMigrationIdGet operation.
     * @callback module:api/AllApi~organisationsIdAddonsAddonIdMigrationsMigrationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddonMigration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a given migration
     * @param {String} migrationId 
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AllApi~organisationsIdAddonsAddonIdMigrationsMigrationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddonMigration}
     */
    organisationsIdAddonsAddonIdMigrationsMigrationIdGet(migrationId, id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet");
      }

      let pathParams = {
        'migrationId': migrationId,
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddonMigration;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/migrations/{migrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdMigrationsPost operation.
     * @callback module:api/AllApi~organisationsIdAddonsAddonIdMigrationsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new add-on migration
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:model/OrganisationsIdAddonsAddonIdMigrationsPostRequest} organisationsIdAddonsAddonIdMigrationsPostRequest 
     * @param {module:api/AllApi~organisationsIdAddonsAddonIdMigrationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    organisationsIdAddonsAddonIdMigrationsPost(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, callback) {
      let postBody = organisationsIdAddonsAddonIdMigrationsPostRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsPost");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsPost");
      }
      // verify the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' is set
      if (organisationsIdAddonsAddonIdMigrationsPostRequest === undefined || organisationsIdAddonsAddonIdMigrationsPostRequest === null) {
        throw new Error("Missing the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' when calling organisationsIdAddonsAddonIdMigrationsPost");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/migrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdSsoGet operation.
     * @callback module:api/AllApi~organisationsIdAddonsAddonIdSsoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AllApi~organisationsIdAddonsAddonIdSsoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sso}
     */
    organisationsIdAddonsAddonIdSsoGet(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdSsoGet");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdSsoGet");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sso;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/sso', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsPreordersPost operation.
     * @callback module:api/AllApi~organisationsIdAddonsPreordersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AllApi~organisationsIdAddonsPreordersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdAddonsPreordersPost(id, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsPreordersPost");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling organisationsIdAddonsPreordersPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/preorders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdBranchPut operation.
     * @callback module:api/AllApi~organisationsIdApplicationsAppIdBranchPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdApplicationsAppIdBranchPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdBranchPut(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchPut");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/branch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdBranchesGet operation.
     * @callback module:api/AllApi~organisationsIdApplicationsAppIdBranchesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdApplicationsAppIdBranchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdBranchesGet(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchesGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchesGet");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdBuildflavorPut operation.
     * @callback module:api/AllApi~organisationsIdApplicationsAppIdBuildflavorPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdApplicationsAppIdBuildflavorPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdBuildflavorPut(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBuildflavorPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBuildflavorPut");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/buildflavor', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdDependenciesEnvGet operation.
     * @callback module:api/AllApi~organisationsIdApplicationsAppIdDependenciesEnvGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LinkedAppEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdApplicationsAppIdDependenciesEnvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LinkedAppEnv>}
     */
    organisationsIdApplicationsAppIdDependenciesEnvGet(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDependenciesEnvGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDependenciesEnvGet");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LinkedAppEnv];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet operation.
     * @callback module:api/AllApi~organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet(appId, deploymentId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet");
      }

      let pathParams = {
        'appId': appId,
        'deploymentId': deploymentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/deployments/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdExposedEnvGet operation.
     * @callback module:api/AllApi~organisationsIdApplicationsAppIdExposedEnvGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdApplicationsAppIdExposedEnvGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdExposedEnvGet(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvGet");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/exposed_env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdExposedEnvPut operation.
     * @callback module:api/AllApi~organisationsIdApplicationsAppIdExposedEnvPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdApplicationsAppIdExposedEnvPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdExposedEnvPut(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvPut");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/exposed_env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdInstancesInstanceIdGet operation.
     * @callback module:api/AllApi~organisationsIdApplicationsAppIdInstancesInstanceIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} instanceId 
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdApplicationsAppIdInstancesInstanceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdInstancesInstanceIdGet(instanceId, appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet");
      }

      let pathParams = {
        'instanceId': instanceId,
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsBillingsUnpaidGet operation.
     * @callback module:api/AllApi~organisationsIdPaymentsBillingsUnpaidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdPaymentsBillingsUnpaidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsBillingsUnpaidGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsBillingsUnpaidGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/unpaid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsDefaultGet operation.
     * @callback module:api/AllApi~organisationsIdPaymentsMethodsDefaultGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdPaymentsMethodsDefaultGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsDefaultGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsDefaultGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsDefaultPut operation.
     * @callback module:api/AllApi~organisationsIdPaymentsMethodsDefaultPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/PaymentData} paymentData 
     * @param {module:api/AllApi~organisationsIdPaymentsMethodsDefaultPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsDefaultPut(id, paymentData, callback) {
      let postBody = paymentData;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsDefaultPut");
      }
      // verify the required parameter 'paymentData' is set
      if (paymentData === undefined || paymentData === null) {
        throw new Error("Missing the required parameter 'paymentData' when calling organisationsIdPaymentsMethodsDefaultPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsGet operation.
     * @callback module:api/AllApi~organisationsIdPaymentsMethodsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdPaymentsMethodsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsMIdDelete operation.
     * @callback module:api/AllApi~organisationsIdPaymentsMethodsMIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} mId 
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdPaymentsMethodsMIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsMIdDelete(mId, id, callback) {
      let postBody = null;
      // verify the required parameter 'mId' is set
      if (mId === undefined || mId === null) {
        throw new Error("Missing the required parameter 'mId' when calling organisationsIdPaymentsMethodsMIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsMIdDelete");
      }

      let pathParams = {
        'mId': mId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods/{mId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsPost operation.
     * @callback module:api/AllApi~organisationsIdPaymentsMethodsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/Body} body 
     * @param {module:api/AllApi~organisationsIdPaymentsMethodsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsPost(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organisationsIdPaymentsMethodsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMonthlyinvoiceGet operation.
     * @callback module:api/AllApi~organisationsIdPaymentsMonthlyinvoiceGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdPaymentsMonthlyinvoiceGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMonthlyinvoiceGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMonthlyinvoiceGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/monthlyinvoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMonthlyinvoiceMaxcreditPut operation.
     * @callback module:api/AllApi~organisationsIdPaymentsMonthlyinvoiceMaxcreditPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdPaymentsMonthlyinvoiceMaxcreditPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMonthlyinvoiceMaxcreditPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMonthlyinvoiceMaxcreditPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/monthlyinvoice/maxcredit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsRecurringGet operation.
     * @callback module:api/AllApi~organisationsIdPaymentsRecurringGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~organisationsIdPaymentsRecurringGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsRecurringGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsRecurringGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/recurring', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsAssetsPayButtonTokenButtonPngGet operation.
     * @callback module:api/AllApi~paymentsAssetsPayButtonTokenButtonPngGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/AllApi~paymentsAssetsPayButtonTokenButtonPngGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    paymentsAssetsPayButtonTokenButtonPngGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling paymentsAssetsPayButtonTokenButtonPngGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments/assets/pay_button/{token}/button.png', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsBidEndStripePost operation.
     * @callback module:api/AllApi~paymentsBidEndStripePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/AllApi~paymentsBidEndStripePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    paymentsBidEndStripePost(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling paymentsBidEndStripePost");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments/{bid}/end/stripe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAuthorize operation.
     * @callback module:api/AllApi~postAuthorizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handled by our API.
     * @param {module:api/AllApi~postAuthorizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAuthorize(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/authorize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGithubRedeploy operation.
     * @callback module:api/AllApi~postGithubRedeployCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [userAgent] 
     * @param {String} [xGithubEvent] 
     * @param {String} [xHubSignature] 
     * @param {module:api/AllApi~postGithubRedeployCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postGithubRedeploy(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': opts['userAgent'],
        'X-Github-Event': opts['xGithubEvent'],
        'X-Hub-Signature': opts['xHubSignature']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/redeploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGithubSignup operation.
     * @callback module:api/AllApi~postGithubSignupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [transactionId] 
     * @param {String} [name] 
     * @param {String} [otherId] 
     * @param {String} [otherEmail] 
     * @param {String} [password] 
     * @param {String} [autoLink] 
     * @param {String} [terms] 
     * @param {module:api/AllApi~postGithubSignupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postGithubSignup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'transactionId': opts['transactionId'],
        'name': opts['name'],
        'otherId': opts['otherId'],
        'otherEmail': opts['otherEmail'],
        'password': opts['password'],
        'autoLink': opts['autoLink'],
        'terms': opts['terms']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/signup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOauthAccessToken operation.
     * @callback module:api/AllApi~postOauthAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [oauthConsumerKey] 
     * @param {String} [oauthToken] 
     * @param {String} [oauthSignatureMethod] 
     * @param {String} [oauthSignature] 
     * @param {String} [oauthTimestamp] 
     * @param {String} [oauthNonce] 
     * @param {String} [oauthVersion] 
     * @param {String} [oauthVerifier] 
     * @param {String} [oauthCallback] 
     * @param {String} [oauthTokenSecret] 
     * @param {String} [oauthCallbackConfirmed] 
     * @param {module:api/AllApi~postOauthAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postOauthAccessToken(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'oauth_consumer_key': opts['oauthConsumerKey'],
        'oauth_token': opts['oauthToken'],
        'oauth_signature_method': opts['oauthSignatureMethod'],
        'oauth_signature': opts['oauthSignature'],
        'oauth_timestamp': opts['oauthTimestamp'],
        'oauth_nonce': opts['oauthNonce'],
        'oauth_version': opts['oauthVersion'],
        'oauth_verifier': opts['oauthVerifier'],
        'oauth_callback': opts['oauthCallback'],
        'oauth_token_secret': opts['oauthTokenSecret'],
        'oauth_callback_confirmed': opts['oauthCallbackConfirmed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/oauth/access_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOauthAuthorize operation.
     * @callback module:api/AllApi~postOauthAuthorizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [almighty] 
     * @param {String} [accessOrganisations] 
     * @param {String} [manageOrganisations] 
     * @param {String} [manageOrganisationsServices] 
     * @param {String} [manageOrganisationsApplications] 
     * @param {String} [manageOrganisationsMembers] 
     * @param {String} [accessOrganisationsBills] 
     * @param {String} [accessOrganisationsCreditCount] 
     * @param {String} [accessOrganisationsConsumptionStatistics] 
     * @param {String} [accessPersonalInformation] 
     * @param {String} [managePersonalInformation] 
     * @param {String} [manageSshKeys] 
     * @param {String} [manageServices] 
     * @param {String} [manageApplications] 
     * @param {String} [accessBills] 
     * @param {String} [accessCreditCount] 
     * @param {String} [accessConsumptionStatistics] 
     * @param {String} [cookie] 
     * @param {module:api/AllApi~postOauthAuthorizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postOauthAuthorize(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'almighty': opts['almighty'],
        'access_organisations': opts['accessOrganisations'],
        'manage_organisations': opts['manageOrganisations'],
        'manage_organisations_services': opts['manageOrganisationsServices'],
        'manage_organisations_applications': opts['manageOrganisationsApplications'],
        'manage_organisations_members': opts['manageOrganisationsMembers'],
        'access_organisations_bills': opts['accessOrganisationsBills'],
        'access_organisations_credit_count': opts['accessOrganisationsCreditCount'],
        'access_organisations_consumption_statistics': opts['accessOrganisationsConsumptionStatistics'],
        'access_personal_information': opts['accessPersonalInformation'],
        'manage_personal_information': opts['managePersonalInformation'],
        'manage_ssh_keys': opts['manageSshKeys'],
        'manage_services': opts['manageServices'],
        'manage_applications': opts['manageApplications'],
        'access_bills': opts['accessBills'],
        'access_credit_count': opts['accessCreditCount'],
        'access_consumption_statistics': opts['accessConsumptionStatistics']
      };
      let headerParams = {
        'Cookie': opts['cookie']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/oauth/authorize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOauthRequestToken operation.
     * @callback module:api/AllApi~postOauthRequestTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [oauthConsumerKey] 
     * @param {String} [oauthToken] 
     * @param {String} [oauthSignatureMethod] 
     * @param {String} [oauthSignature] 
     * @param {String} [oauthTimestamp] 
     * @param {String} [oauthNonce] 
     * @param {String} [oauthVersion] 
     * @param {String} [oauthVerifier] 
     * @param {String} [oauthCallback] 
     * @param {String} [oauthTokenSecret] 
     * @param {String} [oauthCallbackConfirmed] 
     * @param {module:api/AllApi~postOauthRequestTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postOauthRequestToken(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'oauth_consumer_key': opts['oauthConsumerKey'],
        'oauth_token': opts['oauthToken'],
        'oauth_signature_method': opts['oauthSignatureMethod'],
        'oauth_signature': opts['oauthSignature'],
        'oauth_timestamp': opts['oauthTimestamp'],
        'oauth_nonce': opts['oauthNonce'],
        'oauth_version': opts['oauthVersion'],
        'oauth_verifier': opts['oauthVerifier'],
        'oauth_callback': opts['oauthCallback'],
        'oauth_token_secret': opts['oauthTokenSecret'],
        'oauth_callback_confirmed': opts['oauthCallbackConfirmed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/oauth/request_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisations operation.
     * @callback module:api/AllApi~postOrganisationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeOrganisation} wannabeOrganisation 
     * @param {module:api/AllApi~postOrganisationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
    postOrganisations(wannabeOrganisation, callback) {
      let postBody = wannabeOrganisation;
      // verify the required parameter 'wannabeOrganisation' is set
      if (wannabeOrganisation === undefined || wannabeOrganisation === null) {
        throw new Error("Missing the required parameter 'wannabeOrganisation' when calling postOrganisations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Organisation;
      return this.apiClient.callApi(
        '/organisations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddonproviders operation.
     * @callback module:api/AllApi~postOrganisationsIdAddonprovidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeAddonProvider} wannabeAddonProvider 
     * @param {module:api/AllApi~postOrganisationsIdAddonprovidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    postOrganisationsIdAddonproviders(id, wannabeAddonProvider, callback) {
      let postBody = wannabeAddonProvider;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddonproviders");
      }
      // verify the required parameter 'wannabeAddonProvider' is set
      if (wannabeAddonProvider === undefined || wannabeAddonProvider === null) {
        throw new Error("Missing the required parameter 'wannabeAddonProvider' when calling postOrganisationsIdAddonproviders");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddonprovidersProviderIdFeatures operation.
     * @callback module:api/AllApi~postOrganisationsIdAddonprovidersProviderIdFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:model/WannabeFeature} wannabeFeature 
     * @param {module:api/AllApi~postOrganisationsIdAddonprovidersProviderIdFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feature}
     */
    postOrganisationsIdAddonprovidersProviderIdFeatures(id, providerId, wannabeFeature, callback) {
      let postBody = wannabeFeature;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdFeatures");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdFeatures");
      }
      // verify the required parameter 'wannabeFeature' is set
      if (wannabeFeature === undefined || wannabeFeature === null) {
        throw new Error("Missing the required parameter 'wannabeFeature' when calling postOrganisationsIdAddonprovidersProviderIdFeatures");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Feature;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/features', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddonprovidersProviderIdPlans operation.
     * @callback module:api/AllApi~postOrganisationsIdAddonprovidersProviderIdPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:model/WannabePlan} wannabePlan 
     * @param {module:api/AllApi~postOrganisationsIdAddonprovidersProviderIdPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plan}
     */
    postOrganisationsIdAddonprovidersProviderIdPlans(id, providerId, wannabePlan, callback) {
      let postBody = wannabePlan;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdPlans");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdPlans");
      }
      // verify the required parameter 'wannabePlan' is set
      if (wannabePlan === undefined || wannabePlan === null) {
        throw new Error("Missing the required parameter 'wannabePlan' when calling postOrganisationsIdAddonprovidersProviderIdPlans");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Plan;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddonprovidersProviderIdTesters operation.
     * @callback module:api/AllApi~postOrganisationsIdAddonprovidersProviderIdTestersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:api/AllApi~postOrganisationsIdAddonprovidersProviderIdTestersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdAddonprovidersProviderIdTesters(id, providerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdTesters");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdTesters");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/testers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddons operation.
     * @callback module:api/AllApi~postOrganisationsIdAddonsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AllApi~postOrganisationsIdAddonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    postOrganisationsIdAddons(id, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddons");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling postOrganisationsIdAddons");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/organisations/{id}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdApplications operation.
     * @callback module:api/AllApi~postOrganisationsIdApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param {String} id 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/AllApi~postOrganisationsIdApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    postOrganisationsIdApplications(id, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdApplications");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling postOrganisationsIdApplications");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/organisations/{id}/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdApplicationsAppIdAddons operation.
     * @callback module:api/AllApi~postOrganisationsIdApplicationsAppIdAddonsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/Body} body 
     * @param {module:api/AllApi~postOrganisationsIdApplicationsAppIdAddonsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdApplicationsAppIdAddons(id, appId, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdAddons");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdAddons");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postOrganisationsIdApplicationsAppIdAddons");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdApplicationsAppIdInstances operation.
     * @callback module:api/AllApi~postOrganisationsIdApplicationsAppIdInstancesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [commit] 
     * @param {module:api/AllApi~postOrganisationsIdApplicationsAppIdInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdApplicationsAppIdInstances(id, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdInstances");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdInstances");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
        'commit': opts['commit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdConsumers operation.
     * @callback module:api/AllApi~postOrganisationsIdConsumersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeConsumer} wannabeConsumer 
     * @param {module:api/AllApi~postOrganisationsIdConsumersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdConsumers(id, wannabeConsumer, callback) {
      let postBody = wannabeConsumer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdConsumers");
      }
      // verify the required parameter 'wannabeConsumer' is set
      if (wannabeConsumer === undefined || wannabeConsumer === null) {
        throw new Error("Missing the required parameter 'wannabeConsumer' when calling postOrganisationsIdConsumers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/consumers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdMembers operation.
     * @callback module:api/AllApi~postOrganisationsIdMembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/Schema2} body 
     * @param {Object} opts Optional parameters
     * @param {String} [invitationKey] 
     * @param {module:api/AllApi~postOrganisationsIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdMembers(id, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdMembers");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postOrganisationsIdMembers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'invitationKey': opts['invitationKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdPaymentsBillings operation.
     * @callback module:api/AllApi~postOrganisationsIdPaymentsBillingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AllApi~postOrganisationsIdPaymentsBillingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdPaymentsBillings(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdPaymentsBillings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPasswordForgotten operation.
     * @callback module:api/AllApi~postPasswordForgottenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [login] 
     * @param {String} [dropTokens] 
     * @param {String} [testerPass] 
     * @param {module:api/AllApi~postPasswordForgottenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPasswordForgotten(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'login': opts['login'],
        'drop_tokens': opts['dropTokens']
      };
      let headerParams = {
        'TesterPass': opts['testerPass']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/password_forgotten', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPasswordForgottenKey operation.
     * @callback module:api/AllApi~postPasswordForgottenKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {Object} opts Optional parameters
     * @param {String} [pass] 
     * @param {String} [pass2] 
     * @param {module:api/AllApi~postPasswordForgottenKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPasswordForgottenKey(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling postPasswordForgottenKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'pass': opts['pass'],
        'pass2': opts['pass2']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/password_forgotten/{key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfAddons operation.
     * @callback module:api/AllApi~postSelfAddonsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AllApi~postSelfAddonsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfAddons(wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling postSelfAddons");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfApplications operation.
     * @callback module:api/AllApi~postSelfApplicationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/AllApi~postSelfApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfApplications(wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling postSelfApplications");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfApplicationsAppIdAddons operation.
     * @callback module:api/AllApi~postSelfApplicationsAppIdAddonsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/Body} body 
     * @param {module:api/AllApi~postSelfApplicationsAppIdAddonsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfApplicationsAppIdAddons(appId, body, callback) {
      let postBody = body;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdAddons");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSelfApplicationsAppIdAddons");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfApplicationsAppIdInstances operation.
     * @callback module:api/AllApi~postSelfApplicationsAppIdInstancesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [commit] 
     * @param {module:api/AllApi~postSelfApplicationsAppIdInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfApplicationsAppIdInstances(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdInstances");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'commit': opts['commit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfConsumers operation.
     * @callback module:api/AllApi~postSelfConsumersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeConsumer} wannabeConsumer 
     * @param {module:api/AllApi~postSelfConsumersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfConsumers(wannabeConsumer, callback) {
      let postBody = wannabeConsumer;
      // verify the required parameter 'wannabeConsumer' is set
      if (wannabeConsumer === undefined || wannabeConsumer === null) {
        throw new Error("Missing the required parameter 'wannabeConsumer' when calling postSelfConsumers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/consumers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfPaymentsBillings operation.
     * @callback module:api/AllApi~postSelfPaymentsBillingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~postSelfPaymentsBillingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfPaymentsBillings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfPaymentsMethods operation.
     * @callback module:api/AllApi~postSelfPaymentsMethodsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~postSelfPaymentsMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfPaymentsMethods(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUsers operation.
     * @callback module:api/AllApi~postUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeUser} wannabeUser 
     * @param {Object} opts Optional parameters
     * @param {String} [invitationKey] 
     * @param {String} [addonBetaInvitationKey] 
     * @param {String} [email] 
     * @param {String} [pass] 
     * @param {String} [urlNext] 
     * @param {String} [terms] 
     * @param {module:api/AllApi~postUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUsers(wannabeUser, opts, callback) {
      opts = opts || {};
      let postBody = wannabeUser;
      // verify the required parameter 'wannabeUser' is set
      if (wannabeUser === undefined || wannabeUser === null) {
        throw new Error("Missing the required parameter 'wannabeUser' when calling postUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'invitationKey': opts['invitationKey'],
        'addonBetaInvitationKey': opts['addonBetaInvitationKey'],
        'email': opts['email'],
        'pass': opts['pass'],
        'url_next': opts['urlNext'],
        'terms': opts['terms']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postVendorBillingOwnerId operation.
     * @callback module:api/AllApi~postVendorBillingOwnerIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:model/WannabeAddonBilling} wannabeAddonBilling 
     * @param {module:api/AllApi~postVendorBillingOwnerIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postVendorBillingOwnerId(addonId, wannabeAddonBilling, callback) {
      let postBody = wannabeAddonBilling;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling postVendorBillingOwnerId");
      }
      // verify the required parameter 'wannabeAddonBilling' is set
      if (wannabeAddonBilling === undefined || wannabeAddonBilling === null) {
        throw new Error("Missing the required parameter 'wannabeAddonBilling' when calling postVendorBillingOwnerId");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor/apps/{addonId}/consumptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsAddonprovidersProviderIdVersionsGet operation.
     * @callback module:api/AllApi~productsAddonprovidersProviderIdVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} providerId 
     * @param {module:api/AllApi~productsAddonprovidersProviderIdVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsAddonprovidersProviderIdVersionsGet(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling productsAddonprovidersProviderIdVersionsGet");
      }

      let pathParams = {
        'provider_id': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/addonproviders/{provider_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsMfaKindsGet operation.
     * @callback module:api/AllApi~productsMfaKindsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~productsMfaKindsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsMfaKindsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/mfa_kinds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsId operation.
     * @callback module:api/AllApi~putOrganisationsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeOrganisation} wannabeOrganisation 
     * @param {module:api/AllApi~putOrganisationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
    putOrganisationsId(id, wannabeOrganisation, callback) {
      let postBody = wannabeOrganisation;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsId");
      }
      // verify the required parameter 'wannabeOrganisation' is set
      if (wannabeOrganisation === undefined || wannabeOrganisation === null) {
        throw new Error("Missing the required parameter 'wannabeOrganisation' when calling putOrganisationsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Organisation;
      return this.apiClient.callApi(
        '/organisations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonprovidersProviderId operation.
     * @callback module:api/AllApi~putOrganisationsIdAddonprovidersProviderIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {module:model/WannabeAddonProvider} wannabeAddonProvider 
     * @param {module:api/AllApi~putOrganisationsIdAddonprovidersProviderIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    putOrganisationsIdAddonprovidersProviderId(id, providerId, wannabeAddonProvider, callback) {
      let postBody = wannabeAddonProvider;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderId");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderId");
      }
      // verify the required parameter 'wannabeAddonProvider' is set
      if (wannabeAddonProvider === undefined || wannabeAddonProvider === null) {
        throw new Error("Missing the required parameter 'wannabeAddonProvider' when calling putOrganisationsIdAddonprovidersProviderId");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonprovidersProviderIdPlansPlanId operation.
     * @callback module:api/AllApi~putOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} providerId 
     * @param {String} planId 
     * @param {module:model/WannabePlan} wannabePlan 
     * @param {module:api/AllApi~putOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plan}
     */
    putOrganisationsIdAddonprovidersProviderIdPlansPlanId(id, providerId, planId, wannabePlan, callback) {
      let postBody = wannabePlan;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId");
      }
      // verify the required parameter 'wannabePlan' is set
      if (wannabePlan === undefined || wannabePlan === null) {
        throw new Error("Missing the required parameter 'wannabePlan' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId");
      }

      let pathParams = {
        'id': id,
        'providerId': providerId,
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Plan;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans/{planId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName operation.
     * @callback module:api/AllApi~putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} featureName 
     * @param {String} providerId 
     * @param {String} planId 
     * @param {module:model/WannabePlanFeature} wannabePlanFeature 
     * @param {module:api/AllApi~putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(id, featureName, providerId, planId, wannabePlanFeature, callback) {
      let postBody = wannabePlanFeature;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName");
      }
      // verify the required parameter 'wannabePlanFeature' is set
      if (wannabePlanFeature === undefined || wannabePlanFeature === null) {
        throw new Error("Missing the required parameter 'wannabePlanFeature' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName");
      }

      let pathParams = {
        'id': id,
        'featureName': featureName,
        'providerId': providerId,
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addonproviders/{providerId}/plans/{planId}/features/{featureName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonsAddonId operation.
     * @callback module:api/AllApi~putOrganisationsIdAddonsAddonIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AllApi~putOrganisationsIdAddonsAddonIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    putOrganisationsIdAddonsAddonId(id, addonId, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonId");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonId");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling putOrganisationsIdAddonsAddonId");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonsAddonIdTagsTag operation.
     * @callback module:api/AllApi~putOrganisationsIdAddonsAddonIdTagsTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:model/Body} body 
     * @param {module:api/AllApi~putOrganisationsIdAddonsAddonIdTagsTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdAddonsAddonIdTagsTag(id, tag, addonId, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonIdTagsTag");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putOrganisationsIdAddonsAddonIdTagsTag");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonIdTagsTag");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdAddonsAddonIdTagsTag");
      }

      let pathParams = {
        'id': id,
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppId operation.
     * @callback module:api/AllApi~putOrganisationsIdApplicationsAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/AllApi~putOrganisationsIdApplicationsAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    putOrganisationsIdApplicationsAppId(id, appId, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppId");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppId");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling putOrganisationsIdApplicationsAppId");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdDependenciesDependencyId operation.
     * @callback module:api/AllApi~putOrganisationsIdApplicationsAppIdDependenciesDependencyIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {String} id 
     * @param {module:model/Body} body 
     * @param {module:api/AllApi~putOrganisationsIdApplicationsAppIdDependenciesDependencyIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdDependenciesDependencyId(dependencyId, appId, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies/{dependencyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdEnv operation.
     * @callback module:api/AllApi~putOrganisationsIdApplicationsAppIdEnvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEnv} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/AllApi~putOrganisationsIdApplicationsAppIdEnvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEnv}
     */
    putOrganisationsIdApplicationsAppIdEnv(id, appId, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnv");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnv");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnv");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ListEnv;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdEnvEnvName operation.
     * @callback module:api/AllApi~putOrganisationsIdApplicationsAppIdEnvEnvNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEnv} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/AllApi~putOrganisationsIdApplicationsAppIdEnvEnvNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEnv}
     */
    putOrganisationsIdApplicationsAppIdEnvEnvName(id, appId, envName, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnvEnvName");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnvEnvName");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling putOrganisationsIdApplicationsAppIdEnvEnvName");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnvEnvName");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ListEnv;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env/{envName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdTagsTag operation.
     * @callback module:api/AllApi~putOrganisationsIdApplicationsAppIdTagsTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:model/Body} body 
     * @param {module:api/AllApi~putOrganisationsIdApplicationsAppIdTagsTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdTagsTag(id, appId, tag, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdTagsTag");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdTagsTag");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putOrganisationsIdApplicationsAppIdTagsTag");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdTagsTag");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdVhostsDomain operation.
     * @callback module:api/AllApi~putOrganisationsIdApplicationsAppIdVhostsDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/AllApi~putOrganisationsIdApplicationsAppIdVhostsDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdVhostsDomain(id, appId, domain, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsDomain");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsDomain");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling putOrganisationsIdApplicationsAppIdVhostsDomain");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsDomain");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/{domain}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdVhostsFavourite operation.
     * @callback module:api/AllApi~putOrganisationsIdApplicationsAppIdVhostsFavouriteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/AllApi~putOrganisationsIdApplicationsAppIdVhostsFavouriteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdVhostsFavourite(id, appId, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/favourite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAvatar operation.
     * @callback module:api/AllApi~putOrganisationsIdAvatarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If you want to upload an image from your computer, send the image in the body of the request without anything else.
     * @param {String} id 
     * @param {module:api/AllApi~putOrganisationsIdAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdAvatar(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAvatar");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/avatar', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdConsumersKey operation.
     * @callback module:api/AllApi~putOrganisationsIdConsumersKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} key 
     * @param {module:model/WannabeConsumer} wannabeConsumer 
     * @param {module:api/AllApi~putOrganisationsIdConsumersKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdConsumersKey(id, key, wannabeConsumer, callback) {
      let postBody = wannabeConsumer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdConsumersKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putOrganisationsIdConsumersKey");
      }
      // verify the required parameter 'wannabeConsumer' is set
      if (wannabeConsumer === undefined || wannabeConsumer === null) {
        throw new Error("Missing the required parameter 'wannabeConsumer' when calling putOrganisationsIdConsumersKey");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/consumers/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdMembersUserId operation.
     * @callback module:api/AllApi~putOrganisationsIdMembersUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} userId 
     * @param {module:model/Schema2} body 
     * @param {module:api/AllApi~putOrganisationsIdMembersUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdMembersUserId(id, userId, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdMembersUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putOrganisationsIdMembersUserId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdMembersUserId");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/members/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdPaymentsBillingsBid operation.
     * @callback module:api/AllApi~putOrganisationsIdPaymentsBillingsBidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {module:api/AllApi~putOrganisationsIdPaymentsBillingsBidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdPaymentsBillingsBid(id, bid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdPaymentsBillingsBid");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling putOrganisationsIdPaymentsBillingsBid");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelf operation.
     * @callback module:api/AllApi~putSelfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeUser} wannabeUser 
     * @param {module:api/AllApi~putSelfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelf(wannabeUser, callback) {
      let postBody = wannabeUser;
      // verify the required parameter 'wannabeUser' is set
      if (wannabeUser === undefined || wannabeUser === null) {
        throw new Error("Missing the required parameter 'wannabeUser' when calling putSelf");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAddonsAddonId operation.
     * @callback module:api/AllApi~putSelfAddonsAddonIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AllApi~putSelfAddonsAddonIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAddonsAddonId(addonId, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putSelfAddonsAddonId");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling putSelfAddonsAddonId");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAddonsAddonIdPlan operation.
     * @callback module:api/AllApi~putSelfAddonsAddonIdPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:model/WannabePlan} wannabePlan 
     * @param {module:api/AllApi~putSelfAddonsAddonIdPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAddonsAddonIdPlan(addonId, wannabePlan, callback) {
      let postBody = wannabePlan;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putSelfAddonsAddonIdPlan");
      }
      // verify the required parameter 'wannabePlan' is set
      if (wannabePlan === undefined || wannabePlan === null) {
        throw new Error("Missing the required parameter 'wannabePlan' when calling putSelfAddonsAddonIdPlan");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/plan', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAddonsAddonIdTagsTag operation.
     * @callback module:api/AllApi~putSelfAddonsAddonIdTagsTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:model/Body} body 
     * @param {module:api/AllApi~putSelfAddonsAddonIdTagsTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAddonsAddonIdTagsTag(tag, addonId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putSelfAddonsAddonIdTagsTag");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putSelfAddonsAddonIdTagsTag");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelfAddonsAddonIdTagsTag");
      }

      let pathParams = {
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppId operation.
     * @callback module:api/AllApi~putSelfApplicationsAppIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/AllApi~putSelfApplicationsAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppId(appId, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppId");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling putSelfApplicationsAppId");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdEnv operation.
     * @callback module:api/AllApi~putSelfApplicationsAppIdEnvCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/AllApi~putSelfApplicationsAppIdEnvCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdEnv(appId, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdEnv");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putSelfApplicationsAppIdEnv");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdEnvEnvName operation.
     * @callback module:api/AllApi~putSelfApplicationsAppIdEnvEnvNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/AllApi~putSelfApplicationsAppIdEnvEnvNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdEnvEnvName(appId, envName, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdEnvEnvName");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling putSelfApplicationsAppIdEnvEnvName");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putSelfApplicationsAppIdEnvEnvName");
      }

      let pathParams = {
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/env/{envName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdTagsTag operation.
     * @callback module:api/AllApi~putSelfApplicationsAppIdTagsTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:model/Body} body 
     * @param {module:api/AllApi~putSelfApplicationsAppIdTagsTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdTagsTag(appId, tag, body, callback) {
      let postBody = body;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdTagsTag");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putSelfApplicationsAppIdTagsTag");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelfApplicationsAppIdTagsTag");
      }

      let pathParams = {
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdVhostsDomain operation.
     * @callback module:api/AllApi~putSelfApplicationsAppIdVhostsDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/AllApi~putSelfApplicationsAppIdVhostsDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdVhostsDomain(appId, domain, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdVhostsDomain");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling putSelfApplicationsAppIdVhostsDomain");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putSelfApplicationsAppIdVhostsDomain");
      }

      let pathParams = {
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/{domain}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdVhostsFavourite operation.
     * @callback module:api/AllApi~putSelfApplicationsAppIdVhostsFavouriteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/AllApi~putSelfApplicationsAppIdVhostsFavouriteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdVhostsFavourite(appId, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdVhostsFavourite");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putSelfApplicationsAppIdVhostsFavourite");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/favourite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAvatar operation.
     * @callback module:api/AllApi~putSelfAvatarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Avatar} avatar 
     * @param {module:api/AllApi~putSelfAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAvatar(avatar, callback) {
      let postBody = avatar;
      // verify the required parameter 'avatar' is set
      if (avatar === undefined || avatar === null) {
        throw new Error("Missing the required parameter 'avatar' when calling putSelfAvatar");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/avatar', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfChangePassword operation.
     * @callback module:api/AllApi~putSelfChangePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangePassword} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~putSelfChangePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangePassword}
     */
    putSelfChangePassword(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChangePassword;
      return this.apiClient.callApi(
        '/self/change_password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfConsumersKey operation.
     * @callback module:api/AllApi~putSelfConsumersKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:model/WannabeConsumer} wannabeConsumer 
     * @param {module:api/AllApi~putSelfConsumersKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfConsumersKey(key, wannabeConsumer, callback) {
      let postBody = wannabeConsumer;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSelfConsumersKey");
      }
      // verify the required parameter 'wannabeConsumer' is set
      if (wannabeConsumer === undefined || wannabeConsumer === null) {
        throw new Error("Missing the required parameter 'wannabeConsumer' when calling putSelfConsumersKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/consumers/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfEmailsEmail operation.
     * @callback module:api/AllApi~putSelfEmailsEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} email 
     * @param {module:model/Body} body 
     * @param {module:api/AllApi~putSelfEmailsEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfEmailsEmail(email, body, callback) {
      let postBody = body;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling putSelfEmailsEmail");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelfEmailsEmail");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/emails/{email}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfKeysKey operation.
     * @callback module:api/AllApi~putSelfKeysKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:model/Body} body 
     * @param {module:api/AllApi~putSelfKeysKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfKeysKey(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSelfKeysKey");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelfKeysKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/keys/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfPaymentsBillingsBid operation.
     * @callback module:api/AllApi~putSelfPaymentsBillingsBidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/AllApi~putSelfPaymentsBillingsBidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfPaymentsBillingsBid(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling putSelfPaymentsBillingsBid");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putVendorAppsAddonId operation.
     * @callback module:api/AllApi~putVendorAppsAddonIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AllApi~putVendorAppsAddonIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putVendorAppsAddonId(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putVendorAppsAddonId");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor/apps/{addonId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAddonsPreordersPost operation.
     * @callback module:api/AllApi~selfAddonsPreordersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AllApi~selfAddonsPreordersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfAddonsPreordersPost(wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling selfAddonsPreordersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/preorders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdBranchPut operation.
     * @callback module:api/AllApi~selfApplicationsAppIdBranchPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~selfApplicationsAppIdBranchPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdBranchPut(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdBranchPut");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/branch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdBranchesGet operation.
     * @callback module:api/AllApi~selfApplicationsAppIdBranchesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~selfApplicationsAppIdBranchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdBranchesGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdBranchesGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdBuildflavorPut operation.
     * @callback module:api/AllApi~selfApplicationsAppIdBuildflavorPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~selfApplicationsAppIdBuildflavorPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdBuildflavorPut(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdBuildflavorPut");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/buildflavor', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdDependenciesEnvGet operation.
     * @callback module:api/AllApi~selfApplicationsAppIdDependenciesEnvGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LinkedAppEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~selfApplicationsAppIdDependenciesEnvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LinkedAppEnv>}
     */
    selfApplicationsAppIdDependenciesEnvGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdDependenciesEnvGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LinkedAppEnv];
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdDeploymentsDeploymentIdGet operation.
     * @callback module:api/AllApi~selfApplicationsAppIdDeploymentsDeploymentIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {module:api/AllApi~selfApplicationsAppIdDeploymentsDeploymentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdDeploymentsDeploymentIdGet(appId, deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdDeploymentsDeploymentIdGet");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling selfApplicationsAppIdDeploymentsDeploymentIdGet");
      }

      let pathParams = {
        'appId': appId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/deployments/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdExposedEnvGet operation.
     * @callback module:api/AllApi~selfApplicationsAppIdExposedEnvGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~selfApplicationsAppIdExposedEnvGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdExposedEnvGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdExposedEnvGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/exposed_env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdExposedEnvPut operation.
     * @callback module:api/AllApi~selfApplicationsAppIdExposedEnvPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AllApi~selfApplicationsAppIdExposedEnvPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdExposedEnvPut(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdExposedEnvPut");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/exposed_env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdInstancesInstanceIdGet operation.
     * @callback module:api/AllApi~selfApplicationsAppIdInstancesInstanceIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} instanceId 
     * @param {String} appId 
     * @param {module:api/AllApi~selfApplicationsAppIdInstancesInstanceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdInstancesInstanceIdGet(instanceId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling selfApplicationsAppIdInstancesInstanceIdGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdInstancesInstanceIdGet");
      }

      let pathParams = {
        'instanceId': instanceId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfCliTokensGet operation.
     * @callback module:api/AllApi~selfCliTokensGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [cliToken] 
     * @param {module:api/AllApi~selfCliTokensGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfCliTokensGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cli_token': opts['cliToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/cli_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfMfaKindBackupcodesGet operation.
     * @callback module:api/AllApi~selfMfaKindBackupcodesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} kind 
     * @param {module:api/AllApi~selfMfaKindBackupcodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfMfaKindBackupcodesGet(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling selfMfaKindBackupcodesGet");
      }

      let pathParams = {
        'kind': kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/mfa/{kind}/backupcodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfMfaKindConfirmationPost operation.
     * @callback module:api/AllApi~selfMfaKindConfirmationPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} kind 
     * @param {module:api/AllApi~selfMfaKindConfirmationPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfMfaKindConfirmationPost(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling selfMfaKindConfirmationPost");
      }

      let pathParams = {
        'kind': kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/mfa/{kind}/confirmation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfMfaKindDelete operation.
     * @callback module:api/AllApi~selfMfaKindDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} kind 
     * @param {module:api/AllApi~selfMfaKindDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfMfaKindDelete(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling selfMfaKindDelete");
      }

      let pathParams = {
        'kind': kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/mfa/{kind}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfMfaKindPost operation.
     * @callback module:api/AllApi~selfMfaKindPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} kind 
     * @param {module:api/AllApi~selfMfaKindPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfMfaKindPost(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling selfMfaKindPost");
      }

      let pathParams = {
        'kind': kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/mfa/{kind}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfMfaKindPut operation.
     * @callback module:api/AllApi~selfMfaKindPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} kind 
     * @param {module:api/AllApi~selfMfaKindPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfMfaKindPut(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling selfMfaKindPut");
      }

      let pathParams = {
        'kind': kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/mfa/{kind}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMethodsDefaultGet operation.
     * @callback module:api/AllApi~selfPaymentsMethodsDefaultGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~selfPaymentsMethodsDefaultGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMethodsDefaultGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMethodsDefaultPut operation.
     * @callback module:api/AllApi~selfPaymentsMethodsDefaultPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~selfPaymentsMethodsDefaultPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMethodsDefaultPut(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMonthlyinvoiceGet operation.
     * @callback module:api/AllApi~selfPaymentsMonthlyinvoiceGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~selfPaymentsMonthlyinvoiceGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMonthlyinvoiceGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/monthlyinvoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMonthlyinvoiceMaxcreditPut operation.
     * @callback module:api/AllApi~selfPaymentsMonthlyinvoiceMaxcreditPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~selfPaymentsMonthlyinvoiceMaxcreditPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMonthlyinvoiceMaxcreditPut(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/monthlyinvoice/maxcredit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsRecurringGet operation.
     * @callback module:api/AllApi~selfPaymentsRecurringGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~selfPaymentsRecurringGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsRecurringGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/recurring', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsTokensStripeGet operation.
     * @callback module:api/AllApi~selfPaymentsTokensStripeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~selfPaymentsTokensStripeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsTokensStripeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/tokens/stripe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfigProviderEnv operation.
     * @callback module:api/AllApi~updateConfigProviderEnvCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provider's addon environment
     * @param {String} configurationProviderId Automatically added
     * @param {Array.<Object>} requestBody 
     * @param {module:api/AllApi~updateConfigProviderEnvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    updateConfigProviderEnv(configurationProviderId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'configurationProviderId' is set
      if (configurationProviderId === undefined || configurationProviderId === null) {
        throw new Error("Missing the required parameter 'configurationProviderId' when calling updateConfigProviderEnv");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateConfigProviderEnv");
      }

      let pathParams = {
        'configurationProviderId': configurationProviderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v4/addon-providers/config-provider/addons/{configurationProviderId}/env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdDrainsGet operation.
     * @callback module:api/AllApi~v3LogsAppIdDrainsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs drains for a given application
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~v3LogsAppIdDrainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdDrainsGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/drains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdDrainsIdOrUrlDelete operation.
     * @callback module:api/AllApi~v3LogsAppIdDrainsIdOrUrlDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the logs drain by id or url for a given application
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~v3LogsAppIdDrainsIdOrUrlDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdDrainsIdOrUrlDelete(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsIdOrUrlDelete");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/drains/:idOrUrl', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdDrainsIdOrUrlGet operation.
     * @callback module:api/AllApi~v3LogsAppIdDrainsIdOrUrlGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs drain by id or url for a given application
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~v3LogsAppIdDrainsIdOrUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdDrainsIdOrUrlGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsIdOrUrlGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/drains/:idOrUrl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdDrainsPost operation.
     * @callback module:api/AllApi~v3LogsAppIdDrainsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a log drain for a given application
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~v3LogsAppIdDrainsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdDrainsPost(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsPost");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/drains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdGet operation.
     * @callback module:api/AllApi~v3LogsAppIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the logs for a given application
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~v3LogsAppIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdLogsChunkedGet operation.
     * @callback module:api/AllApi~v3LogsAppIdLogsChunkedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve logs as they come through a chunked, never-ending response
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~v3LogsAppIdLogsChunkedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdLogsChunkedGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdLogsChunkedGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/logs-chunked', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v3LogsAppIdLogsSocketGet operation.
     * @callback module:api/AllApi~v3LogsAppIdLogsSocketGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a `{ \"message_type\": \"oauth\", \"authorization\": \"oauth authorization string\" }` message
     * @param {String} appId Automatically added
     * @param {module:api/AllApi~v3LogsAppIdLogsSocketGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v3LogsAppIdLogsSocketGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling v3LogsAppIdLogsSocketGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/logs/{appId}/logs-socket', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorAddonsPost operation.
     * @callback module:api/AllApi~vendorAddonsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AllApi~vendorAddonsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vendorAddonsPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor//addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorAppsAddonIdLogscollectorGet operation.
     * @callback module:api/AllApi~vendorAppsAddonIdLogscollectorGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AllApi~vendorAppsAddonIdLogscollectorGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vendorAppsAddonIdLogscollectorGet(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling vendorAppsAddonIdLogscollectorGet");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor//apps/{addonId}/logscollector', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorAppsAddonIdMigrationCallbackPut operation.
     * @callback module:api/AllApi~vendorAppsAddonIdMigrationCallbackPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {Object} opts Optional parameters
     * @param {String} [planId] 
     * @param {String} [region] 
     * @param {module:api/AllApi~vendorAppsAddonIdMigrationCallbackPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vendorAppsAddonIdMigrationCallbackPut(addonId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling vendorAppsAddonIdMigrationCallbackPut");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
        'plan_id': opts['planId'],
        'region': opts['region']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor/apps/{addonId}/migration_callback', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
