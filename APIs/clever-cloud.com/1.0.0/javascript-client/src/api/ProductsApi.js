/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Country from '../model/Country';
import Instance from '../model/Instance';
import Provider from '../model/Provider';
import Zone from '../model/Zone';

/**
* Products service.
* @module api/ProductsApi
* @version 1.0.0
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProductsAddonProvidersProviderId_0 operation.
     * @callback module:api/ProductsApi~getProductsAddonProvidersProviderId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} providerId 
     * @param {module:api/ProductsApi~getProductsAddonProvidersProviderId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    getProductsAddonProvidersProviderId_0(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getProductsAddonProvidersProviderId_0");
      }

      let pathParams = {
        'provider_id': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/products/addonproviders/{provider_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsAddonProviders_0 operation.
     * @callback module:api/ProductsApi~getProductsAddonProviders_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Provider>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ProductsApi~getProductsAddonProviders_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Provider>}
     */
    getProductsAddonProviders_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Provider];
      return this.apiClient.callApi(
        '/products/addonproviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsCountries_0 operation.
     * @callback module:api/ProductsApi~getProductsCountries_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Country} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ProductsApi~getProductsCountries_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Country}
     */
    getProductsCountries_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Country;
      return this.apiClient.callApi(
        '/products/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsCountrycodes_0 operation.
     * @callback module:api/ProductsApi~getProductsCountrycodes_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Country} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ProductsApi~getProductsCountrycodes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Country}
     */
    getProductsCountrycodes_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Country;
      return this.apiClient.callApi(
        '/products/countrycodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsInstancesTypeVersion_0 operation.
     * @callback module:api/ProductsApi~getProductsInstancesTypeVersion_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Instance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} type 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [_for] 
     * @param {String} [app] 
     * @param {module:api/ProductsApi~getProductsInstancesTypeVersion_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Instance}
     */
    getProductsInstancesTypeVersion_0(type, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getProductsInstancesTypeVersion_0");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getProductsInstancesTypeVersion_0");
      }

      let pathParams = {
        'type': type,
        'version': version
      };
      let queryParams = {
        'for': opts['_for'],
        'app': opts['app']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/products/instances/{type}-{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsInstances_0 operation.
     * @callback module:api/ProductsApi~getProductsInstances_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [_for] 
     * @param {module:api/ProductsApi~getProductsInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instance>}
     */
    getProductsInstances_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'for': opts['_for']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/products/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsPackages_0 operation.
     * @callback module:api/ProductsApi~getProductsPackages_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [coupon] 
     * @param {String} [orgaId] 
     * @param {String} [currency] 
     * @param {module:api/ProductsApi~getProductsPackages_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductsPackages_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'coupon': opts['coupon'],
        'orgaId': opts['orgaId'],
        'currency': opts['currency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsPrices_0 operation.
     * @callback module:api/ProductsApi~getProductsPrices_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ProductsApi~getProductsPrices_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductsPrices_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsZones_0 operation.
     * @callback module:api/ProductsApi~getProductsZones_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Zone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ProductsApi~getProductsZones_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Zone>}
     */
    getProductsZones_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Zone];
      return this.apiClient.callApi(
        '/products/zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsAddonprovidersProviderIdVersionsGet_0 operation.
     * @callback module:api/ProductsApi~productsAddonprovidersProviderIdVersionsGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} providerId 
     * @param {module:api/ProductsApi~productsAddonprovidersProviderIdVersionsGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    productsAddonprovidersProviderIdVersionsGet_0(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling productsAddonprovidersProviderIdVersionsGet_0");
      }

      let pathParams = {
        'provider_id': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/addonproviders/{provider_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsMfaKindsGet_0 operation.
     * @callback module:api/ProductsApi~productsMfaKindsGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ProductsApi~productsMfaKindsGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    productsMfaKindsGet_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/mfa_kinds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
