/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Body from '../model/Body';
import PaymentData from '../model/PaymentData';
import PaymentProvider from '../model/PaymentProvider';

/**
* Payments service.
* @module api/PaymentsApi
* @version 1.0.0
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteOrganisationsIdPaymentsBillingsBid_1 operation.
     * @callback module:api/PaymentsApi~deleteOrganisationsIdPaymentsBillingsBid_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {module:api/PaymentsApi~deleteOrganisationsIdPaymentsBillingsBid_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdPaymentsBillingsBid_1(id, bid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdPaymentsBillingsBid_1");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling deleteOrganisationsIdPaymentsBillingsBid_1");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdPaymentsRecurring_1 operation.
     * @callback module:api/PaymentsApi~deleteOrganisationsIdPaymentsRecurring_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PaymentsApi~deleteOrganisationsIdPaymentsRecurring_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdPaymentsRecurring_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdPaymentsRecurring_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/recurring', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfPaymentsBillingsBid_0 operation.
     * @callback module:api/PaymentsApi~deleteSelfPaymentsBillingsBid_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/PaymentsApi~deleteSelfPaymentsBillingsBid_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfPaymentsBillingsBid_0(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling deleteSelfPaymentsBillingsBid_0");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfPaymentsMethodsMId_0 operation.
     * @callback module:api/PaymentsApi~deleteSelfPaymentsMethodsMId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} mId 
     * @param {module:api/PaymentsApi~deleteSelfPaymentsMethodsMId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfPaymentsMethodsMId_0(mId, callback) {
      let postBody = null;
      // verify the required parameter 'mId' is set
      if (mId === undefined || mId === null) {
        throw new Error("Missing the required parameter 'mId' when calling deleteSelfPaymentsMethodsMId_0");
      }

      let pathParams = {
        'mId': mId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods/{mId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfPaymentsRecurring_0 operation.
     * @callback module:api/PaymentsApi~deleteSelfPaymentsRecurring_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~deleteSelfPaymentsRecurring_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfPaymentsRecurring_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/recurring', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsBillingsBidPdf_1 operation.
     * @callback module:api/PaymentsApi~getOrganisationsIdPaymentsBillingsBidPdf_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {Object} opts Optional parameters
     * @param {String} [token] 
     * @param {module:api/PaymentsApi~getOrganisationsIdPaymentsBillingsBidPdf_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsBillingsBidPdf_1(id, bid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillingsBidPdf_1");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getOrganisationsIdPaymentsBillingsBidPdf_1");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}.pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsBillingsBid_1 operation.
     * @callback module:api/PaymentsApi~getOrganisationsIdPaymentsBillingsBid_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {module:api/PaymentsApi~getOrganisationsIdPaymentsBillingsBid_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsBillingsBid_1(id, bid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillingsBid_1");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getOrganisationsIdPaymentsBillingsBid_1");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsBillings_1 operation.
     * @callback module:api/PaymentsApi~getOrganisationsIdPaymentsBillings_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PaymentsApi~getOrganisationsIdPaymentsBillings_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsBillings_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillings_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdPaymentsFullPricePrice_1 operation.
     * @callback module:api/PaymentsApi~getOrganisationsIdPaymentsFullPricePrice_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} price 
     * @param {module:api/PaymentsApi~getOrganisationsIdPaymentsFullPricePrice_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganisationsIdPaymentsFullPricePrice_1(id, price, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsFullPricePrice_1");
      }
      // verify the required parameter 'price' is set
      if (price === undefined || price === null) {
        throw new Error("Missing the required parameter 'price' when calling getOrganisationsIdPaymentsFullPricePrice_1");
      }

      let pathParams = {
        'id': id,
        'price': price
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/fullprice/{price}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentsCouponsName_0 operation.
     * @callback module:api/PaymentsApi~getPaymentsCouponsName_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name 
     * @param {module:api/PaymentsApi~getPaymentsCouponsName_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getPaymentsCouponsName_0(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPaymentsCouponsName_0");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments/coupons/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentsProviders_0 operation.
     * @callback module:api/PaymentsApi~getPaymentsProviders_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentProvider>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~getPaymentsProviders_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PaymentProvider>}
     */
    getPaymentsProviders_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PaymentProvider];
      return this.apiClient.callApi(
        '/payments/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentsTokensStripe_0 operation.
     * @callback module:api/PaymentsApi~getPaymentsTokensStripe_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~getPaymentsTokensStripe_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getPaymentsTokensStripe_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments/tokens/stripe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsBillingsBidPdf_0 operation.
     * @callback module:api/PaymentsApi~getSelfPaymentsBillingsBidPdf_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {Object} opts Optional parameters
     * @param {String} [token] 
     * @param {module:api/PaymentsApi~getSelfPaymentsBillingsBidPdf_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsBillingsBidPdf_0(bid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getSelfPaymentsBillingsBidPdf_0");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}.pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsBillingsBid_0 operation.
     * @callback module:api/PaymentsApi~getSelfPaymentsBillingsBid_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/PaymentsApi~getSelfPaymentsBillingsBid_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsBillingsBid_0(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getSelfPaymentsBillingsBid_0");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsBillings_0 operation.
     * @callback module:api/PaymentsApi~getSelfPaymentsBillings_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~getSelfPaymentsBillings_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsBillings_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsFullpricePrice_0 operation.
     * @callback module:api/PaymentsApi~getSelfPaymentsFullpricePrice_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} price 
     * @param {module:api/PaymentsApi~getSelfPaymentsFullpricePrice_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsFullpricePrice_0(price, callback) {
      let postBody = null;
      // verify the required parameter 'price' is set
      if (price === undefined || price === null) {
        throw new Error("Missing the required parameter 'price' when calling getSelfPaymentsFullpricePrice_0");
      }

      let pathParams = {
        'price': price
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/fullprice/{price}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsMethods_0 operation.
     * @callback module:api/PaymentsApi~getSelfPaymentsMethods_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~getSelfPaymentsMethods_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsMethods_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsBillingsUnpaidGet_1 operation.
     * @callback module:api/PaymentsApi~organisationsIdPaymentsBillingsUnpaidGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PaymentsApi~organisationsIdPaymentsBillingsUnpaidGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsBillingsUnpaidGet_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsBillingsUnpaidGet_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/unpaid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsDefaultGet_1 operation.
     * @callback module:api/PaymentsApi~organisationsIdPaymentsMethodsDefaultGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PaymentsApi~organisationsIdPaymentsMethodsDefaultGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsDefaultGet_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsDefaultGet_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsDefaultPut_1 operation.
     * @callback module:api/PaymentsApi~organisationsIdPaymentsMethodsDefaultPut_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/PaymentData} paymentData 
     * @param {module:api/PaymentsApi~organisationsIdPaymentsMethodsDefaultPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsDefaultPut_1(id, paymentData, callback) {
      let postBody = paymentData;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsDefaultPut_1");
      }
      // verify the required parameter 'paymentData' is set
      if (paymentData === undefined || paymentData === null) {
        throw new Error("Missing the required parameter 'paymentData' when calling organisationsIdPaymentsMethodsDefaultPut_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsGet_1 operation.
     * @callback module:api/PaymentsApi~organisationsIdPaymentsMethodsGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PaymentsApi~organisationsIdPaymentsMethodsGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsGet_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsGet_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsMIdDelete_1 operation.
     * @callback module:api/PaymentsApi~organisationsIdPaymentsMethodsMIdDelete_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} mId 
     * @param {String} id 
     * @param {module:api/PaymentsApi~organisationsIdPaymentsMethodsMIdDelete_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsMIdDelete_1(mId, id, callback) {
      let postBody = null;
      // verify the required parameter 'mId' is set
      if (mId === undefined || mId === null) {
        throw new Error("Missing the required parameter 'mId' when calling organisationsIdPaymentsMethodsMIdDelete_1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsMIdDelete_1");
      }

      let pathParams = {
        'mId': mId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods/{mId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMethodsPost_1 operation.
     * @callback module:api/PaymentsApi~organisationsIdPaymentsMethodsPost_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/Body} body 
     * @param {module:api/PaymentsApi~organisationsIdPaymentsMethodsPost_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMethodsPost_1(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsPost_1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organisationsIdPaymentsMethodsPost_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMonthlyinvoiceGet_1 operation.
     * @callback module:api/PaymentsApi~organisationsIdPaymentsMonthlyinvoiceGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PaymentsApi~organisationsIdPaymentsMonthlyinvoiceGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMonthlyinvoiceGet_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMonthlyinvoiceGet_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/monthlyinvoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_1 operation.
     * @callback module:api/PaymentsApi~organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PaymentsApi~organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/monthlyinvoice/maxcredit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdPaymentsRecurringGet_1 operation.
     * @callback module:api/PaymentsApi~organisationsIdPaymentsRecurringGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PaymentsApi~organisationsIdPaymentsRecurringGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdPaymentsRecurringGet_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdPaymentsRecurringGet_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/recurring', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsAssetsPayButtonTokenButtonPngGet_0 operation.
     * @callback module:api/PaymentsApi~paymentsAssetsPayButtonTokenButtonPngGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/PaymentsApi~paymentsAssetsPayButtonTokenButtonPngGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    paymentsAssetsPayButtonTokenButtonPngGet_0(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling paymentsAssetsPayButtonTokenButtonPngGet_0");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments/assets/pay_button/{token}/button.png', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsBidEndStripePost_0 operation.
     * @callback module:api/PaymentsApi~paymentsBidEndStripePost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/PaymentsApi~paymentsBidEndStripePost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    paymentsBidEndStripePost_0(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling paymentsBidEndStripePost_0");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments/{bid}/end/stripe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdPaymentsBillings_1 operation.
     * @callback module:api/PaymentsApi~postOrganisationsIdPaymentsBillings_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PaymentsApi~postOrganisationsIdPaymentsBillings_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdPaymentsBillings_1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdPaymentsBillings_1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfPaymentsBillings_0 operation.
     * @callback module:api/PaymentsApi~postSelfPaymentsBillings_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~postSelfPaymentsBillings_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfPaymentsBillings_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfPaymentsMethods_0 operation.
     * @callback module:api/PaymentsApi~postSelfPaymentsMethods_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~postSelfPaymentsMethods_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfPaymentsMethods_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdPaymentsBillingsBid_1 operation.
     * @callback module:api/PaymentsApi~putOrganisationsIdPaymentsBillingsBid_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} bid 
     * @param {module:api/PaymentsApi~putOrganisationsIdPaymentsBillingsBid_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdPaymentsBillingsBid_1(id, bid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdPaymentsBillingsBid_1");
      }
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling putOrganisationsIdPaymentsBillingsBid_1");
      }

      let pathParams = {
        'id': id,
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/payments/billings/{bid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfPaymentsBillingsBid_0 operation.
     * @callback module:api/PaymentsApi~putSelfPaymentsBillingsBid_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/PaymentsApi~putSelfPaymentsBillingsBid_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfPaymentsBillingsBid_0(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling putSelfPaymentsBillingsBid_0");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMethodsDefaultGet_0 operation.
     * @callback module:api/PaymentsApi~selfPaymentsMethodsDefaultGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~selfPaymentsMethodsDefaultGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMethodsDefaultGet_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMethodsDefaultPut_0 operation.
     * @callback module:api/PaymentsApi~selfPaymentsMethodsDefaultPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~selfPaymentsMethodsDefaultPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMethodsDefaultPut_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMonthlyinvoiceGet_0 operation.
     * @callback module:api/PaymentsApi~selfPaymentsMonthlyinvoiceGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~selfPaymentsMonthlyinvoiceGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMonthlyinvoiceGet_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/monthlyinvoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMonthlyinvoiceMaxcreditPut_0 operation.
     * @callback module:api/PaymentsApi~selfPaymentsMonthlyinvoiceMaxcreditPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~selfPaymentsMonthlyinvoiceMaxcreditPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMonthlyinvoiceMaxcreditPut_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/monthlyinvoice/maxcredit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsRecurringGet_0 operation.
     * @callback module:api/PaymentsApi~selfPaymentsRecurringGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~selfPaymentsRecurringGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsRecurringGet_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/recurring', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsTokensStripeGet_0 operation.
     * @callback module:api/PaymentsApi~selfPaymentsTokensStripeGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PaymentsApi~selfPaymentsTokensStripeGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsTokensStripeGet_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/tokens/stripe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
