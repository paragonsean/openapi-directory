/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Addon from '../model/Addon';
import AddonMigration from '../model/AddonMigration';
import Application from '../model/Application';
import Body from '../model/Body';
import Env from '../model/Env';
import ListEnv from '../model/ListEnv';
import OrganisationsIdAddonsAddonIdMigrationsPostRequest from '../model/OrganisationsIdAddonsAddonIdMigrationsPostRequest';
import Sso from '../model/Sso';
import SupernovaInstanceView from '../model/SupernovaInstanceView';
import WannabeAddon from '../model/WannabeAddon';
import WannabePlan from '../model/WannabePlan';

/**
* Addons service.
* @module api/AddonsApi
* @version 1.0.0
*/
export default class AddonsApi {

    /**
    * Constructs a new AddonsApi. 
    * @alias module:api/AddonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonsAddonIdTagsTag_0 operation.
     * @callback module:api/AddonsApi~deleteOrganisationsIdAddonsAddonIdTagsTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~deleteOrganisationsIdAddonsAddonIdTagsTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonsAddonIdTagsTag_0(id, tag, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_0");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_0");
      }

      let pathParams = {
        'id': id,
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdAddonsAddonId_0 operation.
     * @callback module:api/AddonsApi~deleteOrganisationsIdAddonsAddonId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~deleteOrganisationsIdAddonsAddonId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdAddonsAddonId_0(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonId_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonId_0");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0 operation.
     * @callback module:api/AddonsApi~deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0(id, appId, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfAddonsAddonIdTagsTag_0 operation.
     * @callback module:api/AddonsApi~deleteSelfAddonsAddonIdTagsTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~deleteSelfAddonsAddonIdTagsTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfAddonsAddonIdTagsTag_0(tag, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteSelfAddonsAddonIdTagsTag_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteSelfAddonsAddonIdTagsTag_0");
      }

      let pathParams = {
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfAddonsAddonId_0 operation.
     * @callback module:api/AddonsApi~deleteSelfAddonsAddonId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AddonsApi~deleteSelfAddonsAddonId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfAddonsAddonId_0(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteSelfAddonsAddonId_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdAddonsAddonId_0 operation.
     * @callback module:api/AddonsApi~deleteSelfApplicationsAppIdAddonsAddonId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~deleteSelfApplicationsAppIdAddonsAddonId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdAddonsAddonId_0(appId, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdAddonsAddonId_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteSelfApplicationsAppIdAddonsAddonId_0");
      }

      let pathParams = {
        'appId': appId,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigProviderEnv_0 operation.
     * @callback module:api/AddonsApi~getConfigProviderEnv_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get provider's addon environment
     * @param {String} configurationProviderId Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/AddonsApi~getConfigProviderEnv_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getConfigProviderEnv_0(configurationProviderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'configurationProviderId' is set
      if (configurationProviderId === undefined || configurationProviderId === null) {
        throw new Error("Missing the required parameter 'configurationProviderId' when calling getConfigProviderEnv_0");
      }

      let pathParams = {
        'configurationProviderId': configurationProviderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v4/addon-providers/config-provider/addons/{configurationProviderId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigProvider_0 operation.
     * @callback module:api/AddonsApi~getConfigProvider_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Addon provider configuration
     * @param {String} configurationProviderId Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/AddonsApi~getConfigProvider_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getConfigProvider_0(configurationProviderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'configurationProviderId' is set
      if (configurationProviderId === undefined || configurationProviderId === null) {
        throw new Error("Missing the required parameter 'configurationProviderId' when calling getConfigProvider_0");
      }

      let pathParams = {
        'configurationProviderId': configurationProviderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/addon-providers/config-provider/addons/{configurationProviderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMatomo_0 operation.
     * @callback module:api/AddonsApi~getMatomo_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Matomo addon
     * @param {String} matomoId Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/AddonsApi~getMatomo_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getMatomo_0(matomoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'matomoId' is set
      if (matomoId === undefined || matomoId === null) {
        throw new Error("Missing the required parameter 'matomoId' when calling getMatomo_0");
      }

      let pathParams = {
        'matomoId': matomoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/addon-providers/addon-matomo/addons/{matomoId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdApplications_0 operation.
     * @callback module:api/AddonsApi~getOrganisationsIdAddonsAddonIdApplications_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~getOrganisationsIdAddonsAddonIdApplications_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdAddonsAddonIdApplications_0(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdApplications_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdApplications_0");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdEnv_0 operation.
     * @callback module:api/AddonsApi~getOrganisationsIdAddonsAddonIdEnv_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~getOrganisationsIdAddonsAddonIdEnv_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getOrganisationsIdAddonsAddonIdEnv_0(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdEnv_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdEnv_0");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdTags_0 operation.
     * @callback module:api/AddonsApi~getOrganisationsIdAddonsAddonIdTags_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~getOrganisationsIdAddonsAddonIdTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getOrganisationsIdAddonsAddonIdTags_0(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdTags_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdTags_0");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonId_0 operation.
     * @callback module:api/AddonsApi~getOrganisationsIdAddonsAddonId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~getOrganisationsIdAddonsAddonId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    getOrganisationsIdAddonsAddonId_0(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonId_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonId_0");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddons_0 operation.
     * @callback module:api/AddonsApi~getOrganisationsIdAddons_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/AddonsApi~getOrganisationsIdAddons_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getOrganisationsIdAddons_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddons_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/organisations/{id}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdAddonsEnv_0 operation.
     * @callback module:api/AddonsApi~getOrganisationsIdApplicationsAppIdAddonsEnv_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Env>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AddonsApi~getOrganisationsIdApplicationsAppIdAddonsEnv_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Env>}
     */
    getOrganisationsIdApplicationsAppIdAddonsEnv_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Env];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdAddons_0 operation.
     * @callback module:api/AddonsApi~getOrganisationsIdApplicationsAppIdAddons_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/AddonsApi~getOrganisationsIdApplicationsAppIdAddons_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getOrganisationsIdApplicationsAppIdAddons_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddons_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddons_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdApplications_0 operation.
     * @callback module:api/AddonsApi~getSelfAddonsAddonIdApplications_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AddonsApi~getSelfAddonsAddonIdApplications_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfAddonsAddonIdApplications_0(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdApplications_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/addons/{addonId}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdEnv_0 operation.
     * @callback module:api/AddonsApi~getSelfAddonsAddonIdEnv_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AddonsApi~getSelfAddonsAddonIdEnv_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getSelfAddonsAddonIdEnv_0(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdEnv_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/self/addons/{addonId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdSso_0 operation.
     * @callback module:api/AddonsApi~getSelfAddonsAddonIdSso_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Sso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AddonsApi~getSelfAddonsAddonIdSso_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sso}
     */
    getSelfAddonsAddonIdSso_0(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdSso_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sso;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/sso', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdTags_0 operation.
     * @callback module:api/AddonsApi~getSelfAddonsAddonIdTags_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/AddonsApi~getSelfAddonsAddonIdTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getSelfAddonsAddonIdTags_0(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdTags_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/self/addons/{addonId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonId_0 operation.
     * @callback module:api/AddonsApi~getSelfAddonsAddonId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specific addon
     * Get a specific addon
     * @param {String} addonId 
     * @param {module:api/AddonsApi~getSelfAddonsAddonId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    getSelfAddonsAddonId_0(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonId_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/self/addons/{addonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddons_0 operation.
     * @callback module:api/AddonsApi~getSelfAddons_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Addon
     * Get all the addons
     * @param {module:api/AddonsApi~getSelfAddons_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getSelfAddons_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/self/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdAddonsEnv_0 operation.
     * @callback module:api/AddonsApi~getSelfApplicationsAppIdAddonsEnv_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Env>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AddonsApi~getSelfApplicationsAppIdAddonsEnv_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Env>}
     */
    getSelfApplicationsAppIdAddonsEnv_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddonsEnv_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Env];
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdAddons_0 operation.
     * @callback module:api/AddonsApi~getSelfApplicationsAppIdAddons_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AddonsApi~getSelfApplicationsAppIdAddons_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getSelfApplicationsAppIdAddons_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddons_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdInstancesGet_0 operation.
     * @callback module:api/AddonsApi~organisationsIdAddonsAddonIdInstancesGet_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupernovaInstanceView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List instances for this add-on.
     * @param {String} id 
     * @param {String} addonId 
     * @param {Object} opts Optional parameters
     * @param {String} [deploymentId] 
     * @param {String} [withDeleted] 
     * @param {module:api/AddonsApi~organisationsIdAddonsAddonIdInstancesGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupernovaInstanceView>}
     */
    organisationsIdAddonsAddonIdInstancesGet_0(id, addonId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesGet_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesGet_0");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
        'deploymentId': opts['deploymentId'],
        'withDeleted': opts['withDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SupernovaInstanceView];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdInstancesInstanceIdGet_0 operation.
     * @callback module:api/AddonsApi~organisationsIdAddonsAddonIdInstancesInstanceIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SupernovaInstanceView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific instance for {addonId}
     * @param {String} instanceId 
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~organisationsIdAddonsAddonIdInstancesInstanceIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupernovaInstanceView}
     */
    organisationsIdAddonsAddonIdInstancesInstanceIdGet_0(instanceId, id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_0");
      }

      let pathParams = {
        'instanceId': instanceId,
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupernovaInstanceView;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdMigrationsGet_0 operation.
     * @callback module:api/AddonsApi~organisationsIdAddonsAddonIdMigrationsGet_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddonMigration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get past migrations from add-on.
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~organisationsIdAddonsAddonIdMigrationsGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddonMigration>}
     */
    organisationsIdAddonsAddonIdMigrationsGet_0(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsGet_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsGet_0");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AddonMigration];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/migrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0 operation.
     * @callback module:api/AddonsApi~organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AddonMigration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a given migration
     * @param {String} migrationId 
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddonMigration}
     */
    organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0(migrationId, id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0");
      }

      let pathParams = {
        'migrationId': migrationId,
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddonMigration;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/migrations/{migrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdMigrationsPost_0 operation.
     * @callback module:api/AddonsApi~organisationsIdAddonsAddonIdMigrationsPost_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new add-on migration
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:model/OrganisationsIdAddonsAddonIdMigrationsPostRequest} organisationsIdAddonsAddonIdMigrationsPostRequest 
     * @param {module:api/AddonsApi~organisationsIdAddonsAddonIdMigrationsPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    organisationsIdAddonsAddonIdMigrationsPost_0(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, callback) {
      let postBody = organisationsIdAddonsAddonIdMigrationsPostRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsPost_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsPost_0");
      }
      // verify the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' is set
      if (organisationsIdAddonsAddonIdMigrationsPostRequest === undefined || organisationsIdAddonsAddonIdMigrationsPostRequest === null) {
        throw new Error("Missing the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' when calling organisationsIdAddonsAddonIdMigrationsPost_0");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/migrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsAddonIdSsoGet_0 operation.
     * @callback module:api/AddonsApi~organisationsIdAddonsAddonIdSsoGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Sso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/AddonsApi~organisationsIdAddonsAddonIdSsoGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sso}
     */
    organisationsIdAddonsAddonIdSsoGet_0(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdSsoGet_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdSsoGet_0");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sso;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/sso', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdAddonsPreordersPost_0 operation.
     * @callback module:api/AddonsApi~organisationsIdAddonsPreordersPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AddonsApi~organisationsIdAddonsPreordersPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdAddonsPreordersPost_0(id, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdAddonsPreordersPost_0");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling organisationsIdAddonsPreordersPost_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/preorders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdAddons_0 operation.
     * @callback module:api/AddonsApi~postOrganisationsIdAddons_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AddonsApi~postOrganisationsIdAddons_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    postOrganisationsIdAddons_0(id, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdAddons_0");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling postOrganisationsIdAddons_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/organisations/{id}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdApplicationsAppIdAddons_0 operation.
     * @callback module:api/AddonsApi~postOrganisationsIdApplicationsAppIdAddons_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/Body} body 
     * @param {module:api/AddonsApi~postOrganisationsIdApplicationsAppIdAddons_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdApplicationsAppIdAddons_0(id, appId, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdAddons_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdAddons_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postOrganisationsIdApplicationsAppIdAddons_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfAddons_0 operation.
     * @callback module:api/AddonsApi~postSelfAddons_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AddonsApi~postSelfAddons_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfAddons_0(wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling postSelfAddons_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfApplicationsAppIdAddons_0 operation.
     * @callback module:api/AddonsApi~postSelfApplicationsAppIdAddons_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/Body} body 
     * @param {module:api/AddonsApi~postSelfApplicationsAppIdAddons_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfApplicationsAppIdAddons_0(appId, body, callback) {
      let postBody = body;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdAddons_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSelfApplicationsAppIdAddons_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonsAddonIdTagsTag_0 operation.
     * @callback module:api/AddonsApi~putOrganisationsIdAddonsAddonIdTagsTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:model/Body} body 
     * @param {module:api/AddonsApi~putOrganisationsIdAddonsAddonIdTagsTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdAddonsAddonIdTagsTag_0(id, tag, addonId, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonIdTagsTag_0");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putOrganisationsIdAddonsAddonIdTagsTag_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonIdTagsTag_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdAddonsAddonIdTagsTag_0");
      }

      let pathParams = {
        'id': id,
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdAddonsAddonId_0 operation.
     * @callback module:api/AddonsApi~putOrganisationsIdAddonsAddonId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AddonsApi~putOrganisationsIdAddonsAddonId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    putOrganisationsIdAddonsAddonId_0(id, addonId, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonId_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonId_0");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling putOrganisationsIdAddonsAddonId_0");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAddonsAddonIdPlan_0 operation.
     * @callback module:api/AddonsApi~putSelfAddonsAddonIdPlan_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:model/WannabePlan} wannabePlan 
     * @param {module:api/AddonsApi~putSelfAddonsAddonIdPlan_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAddonsAddonIdPlan_0(addonId, wannabePlan, callback) {
      let postBody = wannabePlan;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putSelfAddonsAddonIdPlan_0");
      }
      // verify the required parameter 'wannabePlan' is set
      if (wannabePlan === undefined || wannabePlan === null) {
        throw new Error("Missing the required parameter 'wannabePlan' when calling putSelfAddonsAddonIdPlan_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/plan', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAddonsAddonIdTagsTag_0 operation.
     * @callback module:api/AddonsApi~putSelfAddonsAddonIdTagsTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:model/Body} body 
     * @param {module:api/AddonsApi~putSelfAddonsAddonIdTagsTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAddonsAddonIdTagsTag_0(tag, addonId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putSelfAddonsAddonIdTagsTag_0");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putSelfAddonsAddonIdTagsTag_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelfAddonsAddonIdTagsTag_0");
      }

      let pathParams = {
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAddonsAddonId_0 operation.
     * @callback module:api/AddonsApi~putSelfAddonsAddonId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AddonsApi~putSelfAddonsAddonId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAddonsAddonId_0(addonId, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putSelfAddonsAddonId_0");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling putSelfAddonsAddonId_0");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAddonsPreordersPost_0 operation.
     * @callback module:api/AddonsApi~selfAddonsPreordersPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/AddonsApi~selfAddonsPreordersPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfAddonsPreordersPost_0(wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling selfAddonsPreordersPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/preorders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfigProviderEnv_0 operation.
     * @callback module:api/AddonsApi~updateConfigProviderEnv_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provider's addon environment
     * @param {String} configurationProviderId Automatically added
     * @param {Array.<Object>} requestBody 
     * @param {module:api/AddonsApi~updateConfigProviderEnv_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    updateConfigProviderEnv_0(configurationProviderId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'configurationProviderId' is set
      if (configurationProviderId === undefined || configurationProviderId === null) {
        throw new Error("Missing the required parameter 'configurationProviderId' when calling updateConfigProviderEnv_0");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateConfigProviderEnv_0");
      }

      let pathParams = {
        'configurationProviderId': configurationProviderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v4/addon-providers/config-provider/addons/{configurationProviderId}/env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorAddonsPost_0 operation.
     * @callback module:api/AddonsApi~vendorAddonsPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AddonsApi~vendorAddonsPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    vendorAddonsPost_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vendor//addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
