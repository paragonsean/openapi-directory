/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Addon from '../model/Addon';
import AppInstance from '../model/AppInstance';
import Application from '../model/Application';
import Body from '../model/Body';
import Deployment from '../model/Deployment';
import Env from '../model/Env';
import Instance from '../model/Instance';
import LinkedAppEnv from '../model/LinkedAppEnv';
import ListEnv from '../model/ListEnv';
import Vhost from '../model/Vhost';
import WannabeApplication from '../model/WannabeApplication';
import WannabeEnv from '../model/WannabeEnv';

/**
* Applications service.
* @module api/ApplicationsApi
* @version 1.0.0
*/
export default class ApplicationsApi {

    /**
    * Constructs a new ApplicationsApi. 
    * @alias module:api/ApplicationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1 operation.
     * @callback module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} addonId 
     * @param {module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1(id, appId, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0 operation.
     * @callback module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(dependencyId, appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies/{dependencyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0 operation.
     * @callback module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0(id, appId, deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/deployments/{deploymentId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdEnvEnvName_0 operation.
     * @callback module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdEnvEnvName_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdEnvEnvName_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdEnvEnvName_0(id, appId, envName, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_0");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env/{envName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdInstances_0 operation.
     * @callback module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdInstances_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdInstances_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdInstances_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdInstances_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdTagsTag_0 operation.
     * @callback module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdTagsTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdTagsTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdTagsTag_0(id, appId, tag, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_0");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdVhostsDomain_0 operation.
     * @callback module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdVhostsDomain_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdVhostsDomain_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdVhostsDomain_0(id, appId, domain, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_0");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0 operation.
     * @callback module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/favourite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganisationsIdApplicationsAppId_0 operation.
     * @callback module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~deleteOrganisationsIdApplicationsAppId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganisationsIdApplicationsAppId_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppId_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppId_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdAddonsAddonId_1 operation.
     * @callback module:api/ApplicationsApi~deleteSelfApplicationsAppIdAddonsAddonId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} addonId 
     * @param {module:api/ApplicationsApi~deleteSelfApplicationsAppIdAddonsAddonId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdAddonsAddonId_1(appId, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdAddonsAddonId_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteSelfApplicationsAppIdAddonsAddonId_1");
      }

      let pathParams = {
        'appId': appId,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdDependenciesDependencyId_0 operation.
     * @callback module:api/ApplicationsApi~deleteSelfApplicationsAppIdDependenciesDependencyId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~deleteSelfApplicationsAppIdDependenciesDependencyId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdDependenciesDependencyId_0(dependencyId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling deleteSelfApplicationsAppIdDependenciesDependencyId_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdDependenciesDependencyId_0");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies/{dependencyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0 operation.
     * @callback module:api/ApplicationsApi~deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {module:api/ApplicationsApi~deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0(appId, deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0");
      }

      let pathParams = {
        'appId': appId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/deployments/{deploymentId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdEnvEnvName_0 operation.
     * @callback module:api/ApplicationsApi~deleteSelfApplicationsAppIdEnvEnvName_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:api/ApplicationsApi~deleteSelfApplicationsAppIdEnvEnvName_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdEnvEnvName_0(appId, envName, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdEnvEnvName_0");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling deleteSelfApplicationsAppIdEnvEnvName_0");
      }

      let pathParams = {
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/env/{envName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdInstances_0 operation.
     * @callback module:api/ApplicationsApi~deleteSelfApplicationsAppIdInstances_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~deleteSelfApplicationsAppIdInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdInstances_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdInstances_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdTagsTag_0 operation.
     * @callback module:api/ApplicationsApi~deleteSelfApplicationsAppIdTagsTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:api/ApplicationsApi~deleteSelfApplicationsAppIdTagsTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdTagsTag_0(appId, tag, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdTagsTag_0");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteSelfApplicationsAppIdTagsTag_0");
      }

      let pathParams = {
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdVhostsDomain_0 operation.
     * @callback module:api/ApplicationsApi~deleteSelfApplicationsAppIdVhostsDomain_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:api/ApplicationsApi~deleteSelfApplicationsAppIdVhostsDomain_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdVhostsDomain_0(appId, domain, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdVhostsDomain_0");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteSelfApplicationsAppIdVhostsDomain_0");
      }

      let pathParams = {
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdVhostsFavourite_0 operation.
     * @callback module:api/ApplicationsApi~deleteSelfApplicationsAppIdVhostsFavourite_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~deleteSelfApplicationsAppIdVhostsFavourite_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdVhostsFavourite_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdVhostsFavourite_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/favourite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppId_0 operation.
     * @callback module:api/ApplicationsApi~deleteSelfApplicationsAppId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~deleteSelfApplicationsAppId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppId_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppId_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubApplications_0 operation.
     * @callback module:api/ApplicationsApi~getGithubApplications_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ApplicationsApi~getGithubApplications_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getGithubApplications_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/github/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdAddonsAddonIdApplications_1 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdAddonsAddonIdApplications_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} addonId 
     * @param {module:api/ApplicationsApi~getOrganisationsIdAddonsAddonIdApplications_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdAddonsAddonIdApplications_1(id, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdApplications_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdApplications_1");
      }

      let pathParams = {
        'id': id,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/addons/{addonId}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdAddonsEnv_1 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdAddonsEnv_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Env>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdAddonsEnv_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Env>}
     */
    getOrganisationsIdApplicationsAppIdAddonsEnv_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Env];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdAddons_1 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdAddons_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdAddons_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getOrganisationsIdApplicationsAppIdAddons_1(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddons_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddons_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdDependencies_0 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdDependencies_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdDependencies_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdApplicationsAppIdDependencies_0(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependencies_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependencies_0");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdDependents_0 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdDependents_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdDependents_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdApplicationsAppIdDependents_0(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependents_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependents_0");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdDeployments_0 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdDeployments_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [limit] 
     * @param {String} [offset] 
     * @param {String} [action] 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdDeployments_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    getOrganisationsIdApplicationsAppIdDeployments_0(id, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDeployments_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDeployments_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deployment];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdEnv_0 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdEnv_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdEnv_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getOrganisationsIdApplicationsAppIdEnv_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdEnv_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdEnv_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdInstances_0 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdInstances_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppInstance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppInstance>}
     */
    getOrganisationsIdApplicationsAppIdInstances_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdInstances_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdInstances_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppInstance];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdTags_0 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdTags_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getOrganisationsIdApplicationsAppIdTags_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdTags_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdTags_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdVhostsFavourite_0 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdVhostsFavourite_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Vhost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdVhostsFavourite_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vhost}
     */
    getOrganisationsIdApplicationsAppIdVhostsFavourite_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vhost;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/favourite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppIdVhosts_0 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdVhosts_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vhost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppIdVhosts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vhost>}
     */
    getOrganisationsIdApplicationsAppIdVhosts_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhosts_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhosts_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vhost];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplicationsAppId_0 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplicationsAppId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplicationsAppId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    getOrganisationsIdApplicationsAppId_0(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppId_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppId_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationsIdApplications_0 operation.
     * @callback module:api/ApplicationsApi~getOrganisationsIdApplications_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/ApplicationsApi~getOrganisationsIdApplications_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getOrganisationsIdApplications_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganisationsIdApplications_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/organisations/{id}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdApplications_1 operation.
     * @callback module:api/ApplicationsApi~getSelfAddonsAddonIdApplications_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/ApplicationsApi~getSelfAddonsAddonIdApplications_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfAddonsAddonIdApplications_1(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdApplications_1");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/addons/{addonId}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdAddonsEnv_1 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdAddonsEnv_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Env>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdAddonsEnv_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Env>}
     */
    getSelfApplicationsAppIdAddonsEnv_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddonsEnv_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Env];
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdAddons_1 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdAddons_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdAddons_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getSelfApplicationsAppIdAddons_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddons_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDependenciesDependencyId_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdDependenciesDependencyId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdDependenciesDependencyId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfApplicationsAppIdDependenciesDependencyId_0(dependencyId, appId, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling getSelfApplicationsAppIdDependenciesDependencyId_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependenciesDependencyId_0");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling getSelfApplicationsAppIdDependenciesDependencyId_0");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies/{dependencyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDependencies_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdDependencies_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdDependencies_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfApplicationsAppIdDependencies_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependencies_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDependents_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdDependents_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdDependents_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfApplicationsAppIdDependents_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependents_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDeployments_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdDeployments_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [limit] 
     * @param {String} [offset] 
     * @param {String} [action] 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdDeployments_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    getSelfApplicationsAppIdDeployments_0(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDeployments_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deployment];
      return this.apiClient.callApi(
        '/self/applications/{appId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdEnv_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdEnv_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdEnv_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getSelfApplicationsAppIdEnv_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdEnv_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/self/applications/{appId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdInstances_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdInstances_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instance>}
     */
    getSelfApplicationsAppIdInstances_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdInstances_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdTags_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdTags_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdTags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getSelfApplicationsAppIdTags_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdTags_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/self/applications/{appId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdVhostsFavourite_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdVhostsFavourite_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Vhost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdVhostsFavourite_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vhost}
     */
    getSelfApplicationsAppIdVhostsFavourite_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdVhostsFavourite_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vhost;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/favourite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdVhosts_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppIdVhosts_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vhost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppIdVhosts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vhost>}
     */
    getSelfApplicationsAppIdVhosts_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdVhosts_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vhost];
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppId_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplicationsAppId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~getSelfApplicationsAppId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    getSelfApplicationsAppId_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppId_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/self/applications/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplications_0 operation.
     * @callback module:api/ApplicationsApi~getSelfApplications_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ApplicationsApi~getSelfApplications_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfApplications_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersIdApplications_0 operation.
     * @callback module:api/ApplicationsApi~getUsersIdApplications_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/ApplicationsApi~getUsersIdApplications_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getUsersIdApplications_0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUsersIdApplications_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/users/{id}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdBranchPut_0 operation.
     * @callback module:api/ApplicationsApi~organisationsIdApplicationsAppIdBranchPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~organisationsIdApplicationsAppIdBranchPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdBranchPut_0(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchPut_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchPut_0");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/branch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdBranchesGet_0 operation.
     * @callback module:api/ApplicationsApi~organisationsIdApplicationsAppIdBranchesGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~organisationsIdApplicationsAppIdBranchesGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdBranchesGet_0(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchesGet_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchesGet_0");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdBuildflavorPut_0 operation.
     * @callback module:api/ApplicationsApi~organisationsIdApplicationsAppIdBuildflavorPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~organisationsIdApplicationsAppIdBuildflavorPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdBuildflavorPut_0(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBuildflavorPut_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBuildflavorPut_0");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/buildflavor', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdDependenciesEnvGet_0 operation.
     * @callback module:api/ApplicationsApi~organisationsIdApplicationsAppIdDependenciesEnvGet_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LinkedAppEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~organisationsIdApplicationsAppIdDependenciesEnvGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LinkedAppEnv>}
     */
    organisationsIdApplicationsAppIdDependenciesEnvGet_0(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDependenciesEnvGet_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDependenciesEnvGet_0");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LinkedAppEnv];
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0 operation.
     * @callback module:api/ApplicationsApi~organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0(appId, deploymentId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0");
      }

      let pathParams = {
        'appId': appId,
        'deploymentId': deploymentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/deployments/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdExposedEnvGet_0 operation.
     * @callback module:api/ApplicationsApi~organisationsIdApplicationsAppIdExposedEnvGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~organisationsIdApplicationsAppIdExposedEnvGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdExposedEnvGet_0(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvGet_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvGet_0");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/exposed_env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdExposedEnvPut_0 operation.
     * @callback module:api/ApplicationsApi~organisationsIdApplicationsAppIdExposedEnvPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~organisationsIdApplicationsAppIdExposedEnvPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdExposedEnvPut_0(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvPut_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvPut_0");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/exposed_env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIdApplicationsAppIdInstancesInstanceIdGet_0 operation.
     * @callback module:api/ApplicationsApi~organisationsIdApplicationsAppIdInstancesInstanceIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} instanceId 
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/ApplicationsApi~organisationsIdApplicationsAppIdInstancesInstanceIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    organisationsIdApplicationsAppIdInstancesInstanceIdGet_0(instanceId, appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_0");
      }

      let pathParams = {
        'instanceId': instanceId,
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdApplicationsAppIdAddons_1 operation.
     * @callback module:api/ApplicationsApi~postOrganisationsIdApplicationsAppIdAddons_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/Body} body 
     * @param {module:api/ApplicationsApi~postOrganisationsIdApplicationsAppIdAddons_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdApplicationsAppIdAddons_1(id, appId, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdAddons_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdAddons_1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postOrganisationsIdApplicationsAppIdAddons_1");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdApplicationsAppIdInstances_0 operation.
     * @callback module:api/ApplicationsApi~postOrganisationsIdApplicationsAppIdInstances_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [commit] 
     * @param {module:api/ApplicationsApi~postOrganisationsIdApplicationsAppIdInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrganisationsIdApplicationsAppIdInstances_0(id, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdInstances_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdInstances_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
        'commit': opts['commit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrganisationsIdApplications_0 operation.
     * @callback module:api/ApplicationsApi~postOrganisationsIdApplications_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param {String} id 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/ApplicationsApi~postOrganisationsIdApplications_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    postOrganisationsIdApplications_0(id, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postOrganisationsIdApplications_0");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling postOrganisationsIdApplications_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/organisations/{id}/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfApplicationsAppIdAddons_1 operation.
     * @callback module:api/ApplicationsApi~postSelfApplicationsAppIdAddons_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/Body} body 
     * @param {module:api/ApplicationsApi~postSelfApplicationsAppIdAddons_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfApplicationsAppIdAddons_1(appId, body, callback) {
      let postBody = body;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdAddons_1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSelfApplicationsAppIdAddons_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfApplicationsAppIdInstances_0 operation.
     * @callback module:api/ApplicationsApi~postSelfApplicationsAppIdInstances_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [commit] 
     * @param {module:api/ApplicationsApi~postSelfApplicationsAppIdInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfApplicationsAppIdInstances_0(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdInstances_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'commit': opts['commit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfApplications_0 operation.
     * @callback module:api/ApplicationsApi~postSelfApplications_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/ApplicationsApi~postSelfApplications_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfApplications_0(wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling postSelfApplications_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0 operation.
     * @callback module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {String} id 
     * @param {module:model/Body} body 
     * @param {module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(dependencyId, appId, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/dependencies/{dependencyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdEnvEnvName_0 operation.
     * @callback module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdEnvEnvName_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEnv} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdEnvEnvName_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEnv}
     */
    putOrganisationsIdApplicationsAppIdEnvEnvName_0(id, appId, envName, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_0");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_0");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ListEnv;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env/{envName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdEnv_0 operation.
     * @callback module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdEnv_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEnv} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdEnv_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEnv}
     */
    putOrganisationsIdApplicationsAppIdEnv_0(id, appId, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnv_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnv_0");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnv_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ListEnv;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdTagsTag_0 operation.
     * @callback module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdTagsTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:model/Body} body 
     * @param {module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdTagsTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdTagsTag_0(id, appId, tag, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdTagsTag_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdTagsTag_0");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putOrganisationsIdApplicationsAppIdTagsTag_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdTagsTag_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdVhostsDomain_0 operation.
     * @callback module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdVhostsDomain_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdVhostsDomain_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdVhostsDomain_0(id, appId, domain, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_0");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_0");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/{domain}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppIdVhostsFavourite_0 operation.
     * @callback module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdVhostsFavourite_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/ApplicationsApi~putOrganisationsIdApplicationsAppIdVhostsFavourite_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putOrganisationsIdApplicationsAppIdVhostsFavourite_0(id, appId, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_0");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}/vhosts/favourite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOrganisationsIdApplicationsAppId_0 operation.
     * @callback module:api/ApplicationsApi~putOrganisationsIdApplicationsAppId_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} appId 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/ApplicationsApi~putOrganisationsIdApplicationsAppId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    putOrganisationsIdApplicationsAppId_0(id, appId, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppId_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppId_0");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling putOrganisationsIdApplicationsAppId_0");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/organisations/{id}/applications/{appId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdEnvEnvName_0 operation.
     * @callback module:api/ApplicationsApi~putSelfApplicationsAppIdEnvEnvName_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/ApplicationsApi~putSelfApplicationsAppIdEnvEnvName_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdEnvEnvName_0(appId, envName, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdEnvEnvName_0");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling putSelfApplicationsAppIdEnvEnvName_0");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putSelfApplicationsAppIdEnvEnvName_0");
      }

      let pathParams = {
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/env/{envName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdEnv_0 operation.
     * @callback module:api/ApplicationsApi~putSelfApplicationsAppIdEnv_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/ApplicationsApi~putSelfApplicationsAppIdEnv_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdEnv_0(appId, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdEnv_0");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putSelfApplicationsAppIdEnv_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdTagsTag_0 operation.
     * @callback module:api/ApplicationsApi~putSelfApplicationsAppIdTagsTag_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:model/Body} body 
     * @param {module:api/ApplicationsApi~putSelfApplicationsAppIdTagsTag_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdTagsTag_0(appId, tag, body, callback) {
      let postBody = body;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdTagsTag_0");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putSelfApplicationsAppIdTagsTag_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelfApplicationsAppIdTagsTag_0");
      }

      let pathParams = {
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdVhostsDomain_0 operation.
     * @callback module:api/ApplicationsApi~putSelfApplicationsAppIdVhostsDomain_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/ApplicationsApi~putSelfApplicationsAppIdVhostsDomain_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdVhostsDomain_0(appId, domain, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdVhostsDomain_0");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling putSelfApplicationsAppIdVhostsDomain_0");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putSelfApplicationsAppIdVhostsDomain_0");
      }

      let pathParams = {
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/{domain}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdVhostsFavourite_0 operation.
     * @callback module:api/ApplicationsApi~putSelfApplicationsAppIdVhostsFavourite_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/ApplicationsApi~putSelfApplicationsAppIdVhostsFavourite_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdVhostsFavourite_0(appId, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdVhostsFavourite_0");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putSelfApplicationsAppIdVhostsFavourite_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/favourite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppId_0 operation.
     * @callback module:api/ApplicationsApi~putSelfApplicationsAppId_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/ApplicationsApi~putSelfApplicationsAppId_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppId_0(appId, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppId_0");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling putSelfApplicationsAppId_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdBranchPut_0 operation.
     * @callback module:api/ApplicationsApi~selfApplicationsAppIdBranchPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~selfApplicationsAppIdBranchPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdBranchPut_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdBranchPut_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/branch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdBranchesGet_0 operation.
     * @callback module:api/ApplicationsApi~selfApplicationsAppIdBranchesGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~selfApplicationsAppIdBranchesGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdBranchesGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdBranchesGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdBuildflavorPut_0 operation.
     * @callback module:api/ApplicationsApi~selfApplicationsAppIdBuildflavorPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~selfApplicationsAppIdBuildflavorPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdBuildflavorPut_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdBuildflavorPut_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/buildflavor', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdDependenciesEnvGet_0 operation.
     * @callback module:api/ApplicationsApi~selfApplicationsAppIdDependenciesEnvGet_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LinkedAppEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~selfApplicationsAppIdDependenciesEnvGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LinkedAppEnv>}
     */
    selfApplicationsAppIdDependenciesEnvGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdDependenciesEnvGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LinkedAppEnv];
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdDeploymentsDeploymentIdGet_0 operation.
     * @callback module:api/ApplicationsApi~selfApplicationsAppIdDeploymentsDeploymentIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {module:api/ApplicationsApi~selfApplicationsAppIdDeploymentsDeploymentIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdDeploymentsDeploymentIdGet_0(appId, deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdDeploymentsDeploymentIdGet_0");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling selfApplicationsAppIdDeploymentsDeploymentIdGet_0");
      }

      let pathParams = {
        'appId': appId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/deployments/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdExposedEnvGet_0 operation.
     * @callback module:api/ApplicationsApi~selfApplicationsAppIdExposedEnvGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~selfApplicationsAppIdExposedEnvGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdExposedEnvGet_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdExposedEnvGet_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/exposed_env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdExposedEnvPut_0 operation.
     * @callback module:api/ApplicationsApi~selfApplicationsAppIdExposedEnvPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~selfApplicationsAppIdExposedEnvPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdExposedEnvPut_0(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdExposedEnvPut_0");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/exposed_env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdInstancesInstanceIdGet_0 operation.
     * @callback module:api/ApplicationsApi~selfApplicationsAppIdInstancesInstanceIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} instanceId 
     * @param {String} appId 
     * @param {module:api/ApplicationsApi~selfApplicationsAppIdInstancesInstanceIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdInstancesInstanceIdGet_0(instanceId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling selfApplicationsAppIdInstancesInstanceIdGet_0");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdInstancesInstanceIdGet_0");
      }

      let pathParams = {
        'instanceId': instanceId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
