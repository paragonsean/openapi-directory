/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Application from '../model/Application';
import Key from '../model/Key';
import TransactionId from '../model/TransactionId';

/**
* Github service.
* @module api/GithubApi
* @version 1.0.0
*/
export default class GithubApi {

    /**
    * Constructs a new GithubApi. 
    * @alias module:api/GithubApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteGithubLink_0 operation.
     * @callback module:api/GithubApi~deleteGithubLink_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/GithubApi~deleteGithubLink_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGithubLink_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/link', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubApplications_1 operation.
     * @callback module:api/GithubApi~getGithubApplications_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/GithubApi~getGithubApplications_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getGithubApplications_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/github/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubCallback_0 operation.
     * @callback module:api/GithubApi~getGithubCallback_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [code] 
     * @param {String} [state] 
     * @param {String} [error] 
     * @param {String} [errorDescription] 
     * @param {String} [errorUri] 
     * @param {String} [cookie] 
     * @param {module:api/GithubApi~getGithubCallback_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getGithubCallback_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'code': opts['code'],
        'state': opts['state'],
        'error': opts['error'],
        'error_description': opts['errorDescription'],
        'error_uri': opts['errorUri']
      };
      let headerParams = {
        'Cookie': opts['cookie']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/callback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubEmails_0 operation.
     * @callback module:api/GithubApi~getGithubEmails_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/GithubApi~getGithubEmails_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getGithubEmails_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/github/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubKeys_0 operation.
     * @callback module:api/GithubApi~getGithubKeys_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Key>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/GithubApi~getGithubKeys_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Key>}
     */
    getGithubKeys_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Key];
      return this.apiClient.callApi(
        '/github/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubLink_0 operation.
     * @callback module:api/GithubApi~getGithubLink_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [transactionId] From GET /github
     * @param {String} [redirectUrl] 
     * @param {module:api/GithubApi~getGithubLink_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getGithubLink_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'transactionId': opts['transactionId'],
        'redirectUrl': opts['redirectUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/link', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubLogin_0 operation.
     * @callback module:api/GithubApi~getGithubLogin_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [redirectUrl] 
     * @param {String} [fromAuthorize] 
     * @param {module:api/GithubApi~getGithubLogin_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getGithubLogin_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'redirectUrl': opts['redirectUrl'],
        'fromAuthorize': opts['fromAuthorize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubSignup_0 operation.
     * @callback module:api/GithubApi~getGithubSignup_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [redirectUrl] 
     * @param {String} [fromAuthorize] 
     * @param {module:api/GithubApi~getGithubSignup_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getGithubSignup_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'redirectUrl': opts['redirectUrl'],
        'fromAuthorize': opts['fromAuthorize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/signup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithubUsername_0 operation.
     * @callback module:api/GithubApi~getGithubUsername_0Callback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/GithubApi~getGithubUsername_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getGithubUsername_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/github/username', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGithub_0 operation.
     * @callback module:api/GithubApi~getGithub_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/GithubApi~getGithub_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionId}
     */
    getGithub_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionId;
      return this.apiClient.callApi(
        '/github', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGithubRedeploy_0 operation.
     * @callback module:api/GithubApi~postGithubRedeploy_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [userAgent] 
     * @param {String} [xGithubEvent] 
     * @param {String} [xHubSignature] 
     * @param {module:api/GithubApi~postGithubRedeploy_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postGithubRedeploy_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': opts['userAgent'],
        'X-Github-Event': opts['xGithubEvent'],
        'X-Hub-Signature': opts['xHubSignature']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/redeploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGithubSignup_0 operation.
     * @callback module:api/GithubApi~postGithubSignup_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [transactionId] 
     * @param {String} [name] 
     * @param {String} [otherId] 
     * @param {String} [otherEmail] 
     * @param {String} [password] 
     * @param {String} [autoLink] 
     * @param {String} [terms] 
     * @param {module:api/GithubApi~postGithubSignup_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postGithubSignup_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'transactionId': opts['transactionId'],
        'name': opts['name'],
        'otherId': opts['otherId'],
        'otherEmail': opts['otherEmail'],
        'password': opts['password'],
        'autoLink': opts['autoLink'],
        'terms': opts['terms']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/github/signup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
