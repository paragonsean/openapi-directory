/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Addon from '../model/Addon';
import Application from '../model/Application';
import Avatar from '../model/Avatar';
import Body from '../model/Body';
import ChangePassword from '../model/ChangePassword';
import Conso from '../model/Conso';
import Consumer from '../model/Consumer';
import Credits from '../model/Credits';
import Deployment from '../model/Deployment';
import Env from '../model/Env';
import Instance from '../model/Instance';
import Key from '../model/Key';
import LinkedAppEnv from '../model/LinkedAppEnv';
import ListEnv from '../model/ListEnv';
import Secret from '../model/Secret';
import Sso from '../model/Sso';
import Token from '../model/Token';
import User from '../model/User';
import Vhost from '../model/Vhost';
import WannabeAddon from '../model/WannabeAddon';
import WannabeApplication from '../model/WannabeApplication';
import WannabeConsumer from '../model/WannabeConsumer';
import WannabeEnv from '../model/WannabeEnv';
import WannabePlan from '../model/WannabePlan';
import WannabeUser from '../model/WannabeUser';

/**
* Self service.
* @module api/SelfApi
* @version 1.0.0
*/
export default class SelfApi {

    /**
    * Constructs a new SelfApi. 
    * @alias module:api/SelfApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSelfAddonsAddonIdTagsTag_1 operation.
     * @callback module:api/SelfApi~deleteSelfAddonsAddonIdTagsTag_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:api/SelfApi~deleteSelfAddonsAddonIdTagsTag_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfAddonsAddonIdTagsTag_1(tag, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteSelfAddonsAddonIdTagsTag_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteSelfAddonsAddonIdTagsTag_1");
      }

      let pathParams = {
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfAddonsAddonId_1 operation.
     * @callback module:api/SelfApi~deleteSelfAddonsAddonId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/SelfApi~deleteSelfAddonsAddonId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfAddonsAddonId_1(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteSelfAddonsAddonId_1");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdAddonsAddonId_2 operation.
     * @callback module:api/SelfApi~deleteSelfApplicationsAppIdAddonsAddonId_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} addonId 
     * @param {module:api/SelfApi~deleteSelfApplicationsAppIdAddonsAddonId_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdAddonsAddonId_2(appId, addonId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdAddonsAddonId_2");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling deleteSelfApplicationsAppIdAddonsAddonId_2");
      }

      let pathParams = {
        'appId': appId,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons/{addonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdDependenciesDependencyId_1 operation.
     * @callback module:api/SelfApi~deleteSelfApplicationsAppIdDependenciesDependencyId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {module:api/SelfApi~deleteSelfApplicationsAppIdDependenciesDependencyId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdDependenciesDependencyId_1(dependencyId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling deleteSelfApplicationsAppIdDependenciesDependencyId_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdDependenciesDependencyId_1");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies/{dependencyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_1 operation.
     * @callback module:api/SelfApi~deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {module:api/SelfApi~deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_1(appId, deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_1");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_1");
      }

      let pathParams = {
        'appId': appId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/deployments/{deploymentId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdEnvEnvName_1 operation.
     * @callback module:api/SelfApi~deleteSelfApplicationsAppIdEnvEnvName_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:api/SelfApi~deleteSelfApplicationsAppIdEnvEnvName_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdEnvEnvName_1(appId, envName, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdEnvEnvName_1");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling deleteSelfApplicationsAppIdEnvEnvName_1");
      }

      let pathParams = {
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/env/{envName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdInstances_1 operation.
     * @callback module:api/SelfApi~deleteSelfApplicationsAppIdInstances_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~deleteSelfApplicationsAppIdInstances_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdInstances_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdInstances_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdTagsTag_1 operation.
     * @callback module:api/SelfApi~deleteSelfApplicationsAppIdTagsTag_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:api/SelfApi~deleteSelfApplicationsAppIdTagsTag_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdTagsTag_1(appId, tag, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdTagsTag_1");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling deleteSelfApplicationsAppIdTagsTag_1");
      }

      let pathParams = {
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/tags/{tag}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdVhostsDomain_1 operation.
     * @callback module:api/SelfApi~deleteSelfApplicationsAppIdVhostsDomain_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:api/SelfApi~deleteSelfApplicationsAppIdVhostsDomain_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdVhostsDomain_1(appId, domain, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdVhostsDomain_1");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteSelfApplicationsAppIdVhostsDomain_1");
      }

      let pathParams = {
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppIdVhostsFavourite_1 operation.
     * @callback module:api/SelfApi~deleteSelfApplicationsAppIdVhostsFavourite_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~deleteSelfApplicationsAppIdVhostsFavourite_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppIdVhostsFavourite_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdVhostsFavourite_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/favourite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfApplicationsAppId_1 operation.
     * @callback module:api/SelfApi~deleteSelfApplicationsAppId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~deleteSelfApplicationsAppId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfApplicationsAppId_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppId_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfConsumersKey_0 operation.
     * @callback module:api/SelfApi~deleteSelfConsumersKey_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/SelfApi~deleteSelfConsumersKey_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfConsumersKey_0(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSelfConsumersKey_0");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/consumers/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfEmailsEmail_0 operation.
     * @callback module:api/SelfApi~deleteSelfEmailsEmail_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} email 
     * @param {module:api/SelfApi~deleteSelfEmailsEmail_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfEmailsEmail_0(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling deleteSelfEmailsEmail_0");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/emails/{email}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfKeysKey_0 operation.
     * @callback module:api/SelfApi~deleteSelfKeysKey_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/SelfApi~deleteSelfKeysKey_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfKeysKey_0(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSelfKeysKey_0");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/keys/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfPaymentsBillingsBid_1 operation.
     * @callback module:api/SelfApi~deleteSelfPaymentsBillingsBid_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/SelfApi~deleteSelfPaymentsBillingsBid_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfPaymentsBillingsBid_1(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling deleteSelfPaymentsBillingsBid_1");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfPaymentsMethodsMId_1 operation.
     * @callback module:api/SelfApi~deleteSelfPaymentsMethodsMId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} mId 
     * @param {module:api/SelfApi~deleteSelfPaymentsMethodsMId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfPaymentsMethodsMId_1(mId, callback) {
      let postBody = null;
      // verify the required parameter 'mId' is set
      if (mId === undefined || mId === null) {
        throw new Error("Missing the required parameter 'mId' when calling deleteSelfPaymentsMethodsMId_1");
      }

      let pathParams = {
        'mId': mId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods/{mId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfPaymentsRecurring_1 operation.
     * @callback module:api/SelfApi~deleteSelfPaymentsRecurring_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~deleteSelfPaymentsRecurring_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfPaymentsRecurring_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/recurring', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfTokensToken_0 operation.
     * @callback module:api/SelfApi~deleteSelfTokensToken_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/SelfApi~deleteSelfTokensToken_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfTokensToken_0(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteSelfTokensToken_0");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/tokens/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelfTokens_0 operation.
     * @callback module:api/SelfApi~deleteSelfTokens_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~deleteSelfTokens_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelfTokens_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/tokens', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelf_0 operation.
     * @callback module:api/SelfApi~deleteSelf_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~deleteSelf_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSelf_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdApplications_2 operation.
     * @callback module:api/SelfApi~getSelfAddonsAddonIdApplications_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/SelfApi~getSelfAddonsAddonIdApplications_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfAddonsAddonIdApplications_2(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdApplications_2");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/addons/{addonId}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdEnv_1 operation.
     * @callback module:api/SelfApi~getSelfAddonsAddonIdEnv_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/SelfApi~getSelfAddonsAddonIdEnv_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getSelfAddonsAddonIdEnv_1(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdEnv_1");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/self/addons/{addonId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdSso_1 operation.
     * @callback module:api/SelfApi~getSelfAddonsAddonIdSso_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Sso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/SelfApi~getSelfAddonsAddonIdSso_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sso}
     */
    getSelfAddonsAddonIdSso_1(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdSso_1");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sso;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/sso', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonIdTags_1 operation.
     * @callback module:api/SelfApi~getSelfAddonsAddonIdTags_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:api/SelfApi~getSelfAddonsAddonIdTags_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getSelfAddonsAddonIdTags_1(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdTags_1");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/self/addons/{addonId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddonsAddonId_1 operation.
     * @callback module:api/SelfApi~getSelfAddonsAddonId_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Addon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specific addon
     * Get a specific addon
     * @param {String} addonId 
     * @param {module:api/SelfApi~getSelfAddonsAddonId_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addon}
     */
    getSelfAddonsAddonId_1(addonId, callback) {
      let postBody = null;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling getSelfAddonsAddonId_1");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Addon;
      return this.apiClient.callApi(
        '/self/addons/{addonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfAddons_1 operation.
     * @callback module:api/SelfApi~getSelfAddons_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Addon
     * Get all the addons
     * @param {module:api/SelfApi~getSelfAddons_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getSelfAddons_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/self/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdAddonsEnv_2 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdAddonsEnv_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Env>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdAddonsEnv_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Env>}
     */
    getSelfApplicationsAppIdAddonsEnv_2(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddonsEnv_2");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Env];
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdAddons_2 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdAddons_2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Addon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdAddons_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Addon>}
     */
    getSelfApplicationsAppIdAddons_2(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddons_2");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Addon];
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDependenciesDependencyId_1 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdDependenciesDependencyId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dependencyId 
     * @param {String} appId 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdDependenciesDependencyId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfApplicationsAppIdDependenciesDependencyId_1(dependencyId, appId, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'dependencyId' is set
      if (dependencyId === undefined || dependencyId === null) {
        throw new Error("Missing the required parameter 'dependencyId' when calling getSelfApplicationsAppIdDependenciesDependencyId_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependenciesDependencyId_1");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling getSelfApplicationsAppIdDependenciesDependencyId_1");
      }

      let pathParams = {
        'dependencyId': dependencyId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies/{dependencyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDependencies_1 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdDependencies_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdDependencies_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfApplicationsAppIdDependencies_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependencies_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDependents_1 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdDependents_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdDependents_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfApplicationsAppIdDependents_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependents_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdDeployments_1 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdDeployments_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [limit] 
     * @param {String} [offset] 
     * @param {String} [action] 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdDeployments_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    getSelfApplicationsAppIdDeployments_1(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDeployments_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deployment];
      return this.apiClient.callApi(
        '/self/applications/{appId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdEnv_1 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdEnv_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdEnv_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListEnv>}
     */
    getSelfApplicationsAppIdEnv_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdEnv_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListEnv];
      return this.apiClient.callApi(
        '/self/applications/{appId}/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdInstances_1 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdInstances_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdInstances_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instance>}
     */
    getSelfApplicationsAppIdInstances_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdInstances_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdTags_1 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdTags_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdTags_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getSelfApplicationsAppIdTags_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdTags_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/self/applications/{appId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdVhostsFavourite_1 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdVhostsFavourite_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Vhost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdVhostsFavourite_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vhost}
     */
    getSelfApplicationsAppIdVhostsFavourite_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdVhostsFavourite_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vhost;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/favourite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppIdVhosts_1 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppIdVhosts_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vhost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~getSelfApplicationsAppIdVhosts_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vhost>}
     */
    getSelfApplicationsAppIdVhosts_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdVhosts_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vhost];
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplicationsAppId_1 operation.
     * @callback module:api/SelfApi~getSelfApplicationsAppId_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~getSelfApplicationsAppId_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    getSelfApplicationsAppId_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getSelfApplicationsAppId_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/self/applications/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfApplications_1 operation.
     * @callback module:api/SelfApi~getSelfApplications_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfApplications_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    getSelfApplications_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Application];
      return this.apiClient.callApi(
        '/self/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfConfirmationEmail_0 operation.
     * @callback module:api/SelfApi~getSelfConfirmationEmail_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfConfirmationEmail_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfConfirmationEmail_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/confirmation_email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfConsumersKeySecret_0 operation.
     * @callback module:api/SelfApi~getSelfConsumersKeySecret_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/SelfApi~getSelfConsumersKeySecret_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    getSelfConsumersKeySecret_0(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSelfConsumersKeySecret_0");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/self/consumers/{key}/secret', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfConsumersKey_0 operation.
     * @callback module:api/SelfApi~getSelfConsumersKey_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Consumer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/SelfApi~getSelfConsumersKey_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Consumer}
     */
    getSelfConsumersKey_0(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSelfConsumersKey_0");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Consumer;
      return this.apiClient.callApi(
        '/self/consumers/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfConsumers_0 operation.
     * @callback module:api/SelfApi~getSelfConsumers_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Consumer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfConsumers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Consumer>}
     */
    getSelfConsumers_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Consumer];
      return this.apiClient.callApi(
        '/self/consumers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfConsumptions_0 operation.
     * @callback module:api/SelfApi~getSelfConsumptions_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Conso} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [appId] 
     * @param {String} [from] 
     * @param {String} [to] 
     * @param {module:api/SelfApi~getSelfConsumptions_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conso}
     */
    getSelfConsumptions_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'appId': opts['appId'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Conso;
      return this.apiClient.callApi(
        '/self/consumptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfCredits_0 operation.
     * @callback module:api/SelfApi~getSelfCredits_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Credits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfCredits_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credits}
     */
    getSelfCredits_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credits;
      return this.apiClient.callApi(
        '/self/credits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfEmails_0 operation.
     * @callback module:api/SelfApi~getSelfEmails_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfEmails_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getSelfEmails_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/self/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfId_0 operation.
     * @callback module:api/SelfApi~getSelfId_0Callback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfId_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getSelfId_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/self/id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfInstances_0 operation.
     * @callback module:api/SelfApi~getSelfInstances_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfInstances_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instance>}
     */
    getSelfInstances_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/self/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfKeys_0 operation.
     * @callback module:api/SelfApi~getSelfKeys_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Key>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfKeys_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Key>}
     */
    getSelfKeys_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Key];
      return this.apiClient.callApi(
        '/self/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentInfo_0 operation.
     * @callback module:api/SelfApi~getSelfPaymentInfo_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfPaymentInfo_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentInfo_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payment-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsBillingsBidPdf_1 operation.
     * @callback module:api/SelfApi~getSelfPaymentsBillingsBidPdf_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {Object} opts Optional parameters
     * @param {String} [token] 
     * @param {module:api/SelfApi~getSelfPaymentsBillingsBidPdf_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsBillingsBidPdf_1(bid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getSelfPaymentsBillingsBidPdf_1");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}.pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsBillingsBid_1 operation.
     * @callback module:api/SelfApi~getSelfPaymentsBillingsBid_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/SelfApi~getSelfPaymentsBillingsBid_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsBillingsBid_1(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling getSelfPaymentsBillingsBid_1");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsBillings_1 operation.
     * @callback module:api/SelfApi~getSelfPaymentsBillings_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfPaymentsBillings_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsBillings_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsFullpricePrice_1 operation.
     * @callback module:api/SelfApi~getSelfPaymentsFullpricePrice_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} price 
     * @param {module:api/SelfApi~getSelfPaymentsFullpricePrice_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsFullpricePrice_1(price, callback) {
      let postBody = null;
      // verify the required parameter 'price' is set
      if (price === undefined || price === null) {
        throw new Error("Missing the required parameter 'price' when calling getSelfPaymentsFullpricePrice_1");
      }

      let pathParams = {
        'price': price
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/fullprice/{price}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfPaymentsMethods_1 operation.
     * @callback module:api/SelfApi~getSelfPaymentsMethods_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfPaymentsMethods_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfPaymentsMethods_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfTokens_0 operation.
     * @callback module:api/SelfApi~getSelfTokens_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Token>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~getSelfTokens_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Token>}
     */
    getSelfTokens_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Token];
      return this.apiClient.callApi(
        '/self/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfValidateEmail_0 operation.
     * @callback module:api/SelfApi~getSelfValidateEmail_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [validationKey] 
     * @param {module:api/SelfApi~getSelfValidateEmail_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getSelfValidateEmail_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'validationKey': opts['validationKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/validate_email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelf_0 operation.
     * @callback module:api/SelfApi~getSelf_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Get information about yourself
     * @param {module:api/SelfApi~getSelf_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getSelf_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/self', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfAddons_1 operation.
     * @callback module:api/SelfApi~postSelfAddons_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/SelfApi~postSelfAddons_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfAddons_1(wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling postSelfAddons_1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfApplicationsAppIdAddons_2 operation.
     * @callback module:api/SelfApi~postSelfApplicationsAppIdAddons_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/Body} body 
     * @param {module:api/SelfApi~postSelfApplicationsAppIdAddons_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfApplicationsAppIdAddons_2(appId, body, callback) {
      let postBody = body;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdAddons_2");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSelfApplicationsAppIdAddons_2");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/addons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfApplicationsAppIdInstances_1 operation.
     * @callback module:api/SelfApi~postSelfApplicationsAppIdInstances_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [commit] 
     * @param {module:api/SelfApi~postSelfApplicationsAppIdInstances_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfApplicationsAppIdInstances_1(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdInstances_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'commit': opts['commit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfApplications_1 operation.
     * @callback module:api/SelfApi~postSelfApplications_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/SelfApi~postSelfApplications_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfApplications_1(wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling postSelfApplications_1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfConsumers_0 operation.
     * @callback module:api/SelfApi~postSelfConsumers_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeConsumer} wannabeConsumer 
     * @param {module:api/SelfApi~postSelfConsumers_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfConsumers_0(wannabeConsumer, callback) {
      let postBody = wannabeConsumer;
      // verify the required parameter 'wannabeConsumer' is set
      if (wannabeConsumer === undefined || wannabeConsumer === null) {
        throw new Error("Missing the required parameter 'wannabeConsumer' when calling postSelfConsumers_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/consumers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfPaymentsBillings_1 operation.
     * @callback module:api/SelfApi~postSelfPaymentsBillings_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~postSelfPaymentsBillings_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfPaymentsBillings_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSelfPaymentsMethods_1 operation.
     * @callback module:api/SelfApi~postSelfPaymentsMethods_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~postSelfPaymentsMethods_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postSelfPaymentsMethods_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAddonsAddonIdPlan_1 operation.
     * @callback module:api/SelfApi~putSelfAddonsAddonIdPlan_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:model/WannabePlan} wannabePlan 
     * @param {module:api/SelfApi~putSelfAddonsAddonIdPlan_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAddonsAddonIdPlan_1(addonId, wannabePlan, callback) {
      let postBody = wannabePlan;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putSelfAddonsAddonIdPlan_1");
      }
      // verify the required parameter 'wannabePlan' is set
      if (wannabePlan === undefined || wannabePlan === null) {
        throw new Error("Missing the required parameter 'wannabePlan' when calling putSelfAddonsAddonIdPlan_1");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/plan', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAddonsAddonIdTagsTag_1 operation.
     * @callback module:api/SelfApi~putSelfAddonsAddonIdTagsTag_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} tag 
     * @param {String} addonId 
     * @param {module:model/Body} body 
     * @param {module:api/SelfApi~putSelfAddonsAddonIdTagsTag_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAddonsAddonIdTagsTag_1(tag, addonId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putSelfAddonsAddonIdTagsTag_1");
      }
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putSelfAddonsAddonIdTagsTag_1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelfAddonsAddonIdTagsTag_1");
      }

      let pathParams = {
        'tag': tag,
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAddonsAddonId_1 operation.
     * @callback module:api/SelfApi~putSelfAddonsAddonId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addonId 
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/SelfApi~putSelfAddonsAddonId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAddonsAddonId_1(addonId, wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'addonId' is set
      if (addonId === undefined || addonId === null) {
        throw new Error("Missing the required parameter 'addonId' when calling putSelfAddonsAddonId_1");
      }
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling putSelfAddonsAddonId_1");
      }

      let pathParams = {
        'addonId': addonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/{addonId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdEnvEnvName_1 operation.
     * @callback module:api/SelfApi~putSelfApplicationsAppIdEnvEnvName_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} envName 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/SelfApi~putSelfApplicationsAppIdEnvEnvName_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdEnvEnvName_1(appId, envName, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdEnvEnvName_1");
      }
      // verify the required parameter 'envName' is set
      if (envName === undefined || envName === null) {
        throw new Error("Missing the required parameter 'envName' when calling putSelfApplicationsAppIdEnvEnvName_1");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putSelfApplicationsAppIdEnvEnvName_1");
      }

      let pathParams = {
        'appId': appId,
        'envName': envName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/env/{envName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdEnv_1 operation.
     * @callback module:api/SelfApi~putSelfApplicationsAppIdEnv_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/WannabeEnv} wannabeEnv 
     * @param {module:api/SelfApi~putSelfApplicationsAppIdEnv_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdEnv_1(appId, wannabeEnv, callback) {
      let postBody = wannabeEnv;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdEnv_1");
      }
      // verify the required parameter 'wannabeEnv' is set
      if (wannabeEnv === undefined || wannabeEnv === null) {
        throw new Error("Missing the required parameter 'wannabeEnv' when calling putSelfApplicationsAppIdEnv_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdTagsTag_1 operation.
     * @callback module:api/SelfApi~putSelfApplicationsAppIdTagsTag_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} tag 
     * @param {module:model/Body} body 
     * @param {module:api/SelfApi~putSelfApplicationsAppIdTagsTag_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdTagsTag_1(appId, tag, body, callback) {
      let postBody = body;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdTagsTag_1");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putSelfApplicationsAppIdTagsTag_1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelfApplicationsAppIdTagsTag_1");
      }

      let pathParams = {
        'appId': appId,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/tags/{tag}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdVhostsDomain_1 operation.
     * @callback module:api/SelfApi~putSelfApplicationsAppIdVhostsDomain_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} domain 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/SelfApi~putSelfApplicationsAppIdVhostsDomain_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdVhostsDomain_1(appId, domain, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdVhostsDomain_1");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling putSelfApplicationsAppIdVhostsDomain_1");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putSelfApplicationsAppIdVhostsDomain_1");
      }

      let pathParams = {
        'appId': appId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/{domain}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppIdVhostsFavourite_1 operation.
     * @callback module:api/SelfApi~putSelfApplicationsAppIdVhostsFavourite_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/Vhost} vhost 
     * @param {module:api/SelfApi~putSelfApplicationsAppIdVhostsFavourite_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppIdVhostsFavourite_1(appId, vhost, callback) {
      let postBody = vhost;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdVhostsFavourite_1");
      }
      // verify the required parameter 'vhost' is set
      if (vhost === undefined || vhost === null) {
        throw new Error("Missing the required parameter 'vhost' when calling putSelfApplicationsAppIdVhostsFavourite_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/vhosts/favourite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfApplicationsAppId_1 operation.
     * @callback module:api/SelfApi~putSelfApplicationsAppId_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/WannabeApplication} wannabeApplication 
     * @param {module:api/SelfApi~putSelfApplicationsAppId_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfApplicationsAppId_1(appId, wannabeApplication, callback) {
      let postBody = wannabeApplication;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putSelfApplicationsAppId_1");
      }
      // verify the required parameter 'wannabeApplication' is set
      if (wannabeApplication === undefined || wannabeApplication === null) {
        throw new Error("Missing the required parameter 'wannabeApplication' when calling putSelfApplicationsAppId_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfAvatar_0 operation.
     * @callback module:api/SelfApi~putSelfAvatar_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Avatar} avatar 
     * @param {module:api/SelfApi~putSelfAvatar_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfAvatar_0(avatar, callback) {
      let postBody = avatar;
      // verify the required parameter 'avatar' is set
      if (avatar === undefined || avatar === null) {
        throw new Error("Missing the required parameter 'avatar' when calling putSelfAvatar_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/avatar', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfChangePassword_0 operation.
     * @callback module:api/SelfApi~putSelfChangePassword_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangePassword} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~putSelfChangePassword_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangePassword}
     */
    putSelfChangePassword_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChangePassword;
      return this.apiClient.callApi(
        '/self/change_password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfConsumersKey_0 operation.
     * @callback module:api/SelfApi~putSelfConsumersKey_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:model/WannabeConsumer} wannabeConsumer 
     * @param {module:api/SelfApi~putSelfConsumersKey_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfConsumersKey_0(key, wannabeConsumer, callback) {
      let postBody = wannabeConsumer;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSelfConsumersKey_0");
      }
      // verify the required parameter 'wannabeConsumer' is set
      if (wannabeConsumer === undefined || wannabeConsumer === null) {
        throw new Error("Missing the required parameter 'wannabeConsumer' when calling putSelfConsumersKey_0");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/consumers/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfEmailsEmail_0 operation.
     * @callback module:api/SelfApi~putSelfEmailsEmail_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} email 
     * @param {module:model/Body} body 
     * @param {module:api/SelfApi~putSelfEmailsEmail_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfEmailsEmail_0(email, body, callback) {
      let postBody = body;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling putSelfEmailsEmail_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelfEmailsEmail_0");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/emails/{email}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfKeysKey_0 operation.
     * @callback module:api/SelfApi~putSelfKeysKey_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:model/Body} body 
     * @param {module:api/SelfApi~putSelfKeysKey_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfKeysKey_0(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSelfKeysKey_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelfKeysKey_0");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/keys/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfPaymentsBillingsBid_1 operation.
     * @callback module:api/SelfApi~putSelfPaymentsBillingsBid_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bid 
     * @param {module:api/SelfApi~putSelfPaymentsBillingsBid_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelfPaymentsBillingsBid_1(bid, callback) {
      let postBody = null;
      // verify the required parameter 'bid' is set
      if (bid === undefined || bid === null) {
        throw new Error("Missing the required parameter 'bid' when calling putSelfPaymentsBillingsBid_1");
      }

      let pathParams = {
        'bid': bid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/billings/{bid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelf_0 operation.
     * @callback module:api/SelfApi~putSelf_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeUser} wannabeUser 
     * @param {module:api/SelfApi~putSelf_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    putSelf_0(wannabeUser, callback) {
      let postBody = wannabeUser;
      // verify the required parameter 'wannabeUser' is set
      if (wannabeUser === undefined || wannabeUser === null) {
        throw new Error("Missing the required parameter 'wannabeUser' when calling putSelf_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfAddonsPreordersPost_1 operation.
     * @callback module:api/SelfApi~selfAddonsPreordersPost_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WannabeAddon} wannabeAddon 
     * @param {module:api/SelfApi~selfAddonsPreordersPost_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfAddonsPreordersPost_1(wannabeAddon, callback) {
      let postBody = wannabeAddon;
      // verify the required parameter 'wannabeAddon' is set
      if (wannabeAddon === undefined || wannabeAddon === null) {
        throw new Error("Missing the required parameter 'wannabeAddon' when calling selfAddonsPreordersPost_1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/addons/preorders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdBranchPut_1 operation.
     * @callback module:api/SelfApi~selfApplicationsAppIdBranchPut_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~selfApplicationsAppIdBranchPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdBranchPut_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdBranchPut_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/branch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdBranchesGet_1 operation.
     * @callback module:api/SelfApi~selfApplicationsAppIdBranchesGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~selfApplicationsAppIdBranchesGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdBranchesGet_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdBranchesGet_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdBuildflavorPut_1 operation.
     * @callback module:api/SelfApi~selfApplicationsAppIdBuildflavorPut_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~selfApplicationsAppIdBuildflavorPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdBuildflavorPut_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdBuildflavorPut_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/buildflavor', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdDependenciesEnvGet_1 operation.
     * @callback module:api/SelfApi~selfApplicationsAppIdDependenciesEnvGet_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LinkedAppEnv>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~selfApplicationsAppIdDependenciesEnvGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LinkedAppEnv>}
     */
    selfApplicationsAppIdDependenciesEnvGet_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdDependenciesEnvGet_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LinkedAppEnv];
      return this.apiClient.callApi(
        '/self/applications/{appId}/dependencies/env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdDeploymentsDeploymentIdGet_1 operation.
     * @callback module:api/SelfApi~selfApplicationsAppIdDeploymentsDeploymentIdGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deploymentId 
     * @param {module:api/SelfApi~selfApplicationsAppIdDeploymentsDeploymentIdGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdDeploymentsDeploymentIdGet_1(appId, deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdDeploymentsDeploymentIdGet_1");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling selfApplicationsAppIdDeploymentsDeploymentIdGet_1");
      }

      let pathParams = {
        'appId': appId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/deployments/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdExposedEnvGet_1 operation.
     * @callback module:api/SelfApi~selfApplicationsAppIdExposedEnvGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~selfApplicationsAppIdExposedEnvGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdExposedEnvGet_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdExposedEnvGet_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/exposed_env', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdExposedEnvPut_1 operation.
     * @callback module:api/SelfApi~selfApplicationsAppIdExposedEnvPut_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/SelfApi~selfApplicationsAppIdExposedEnvPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdExposedEnvPut_1(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdExposedEnvPut_1");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/exposed_env', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfApplicationsAppIdInstancesInstanceIdGet_1 operation.
     * @callback module:api/SelfApi~selfApplicationsAppIdInstancesInstanceIdGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} instanceId 
     * @param {String} appId 
     * @param {module:api/SelfApi~selfApplicationsAppIdInstancesInstanceIdGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfApplicationsAppIdInstancesInstanceIdGet_1(instanceId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling selfApplicationsAppIdInstancesInstanceIdGet_1");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling selfApplicationsAppIdInstancesInstanceIdGet_1");
      }

      let pathParams = {
        'instanceId': instanceId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/applications/{appId}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfCliTokensGet_0 operation.
     * @callback module:api/SelfApi~selfCliTokensGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [cliToken] 
     * @param {module:api/SelfApi~selfCliTokensGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfCliTokensGet_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cli_token': opts['cliToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/cli_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfMfaKindBackupcodesGet_0 operation.
     * @callback module:api/SelfApi~selfMfaKindBackupcodesGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} kind 
     * @param {module:api/SelfApi~selfMfaKindBackupcodesGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfMfaKindBackupcodesGet_0(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling selfMfaKindBackupcodesGet_0");
      }

      let pathParams = {
        'kind': kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/mfa/{kind}/backupcodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfMfaKindConfirmationPost_0 operation.
     * @callback module:api/SelfApi~selfMfaKindConfirmationPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} kind 
     * @param {module:api/SelfApi~selfMfaKindConfirmationPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfMfaKindConfirmationPost_0(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling selfMfaKindConfirmationPost_0");
      }

      let pathParams = {
        'kind': kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/mfa/{kind}/confirmation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfMfaKindDelete_0 operation.
     * @callback module:api/SelfApi~selfMfaKindDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} kind 
     * @param {module:api/SelfApi~selfMfaKindDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfMfaKindDelete_0(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling selfMfaKindDelete_0");
      }

      let pathParams = {
        'kind': kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/mfa/{kind}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfMfaKindPost_0 operation.
     * @callback module:api/SelfApi~selfMfaKindPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} kind 
     * @param {module:api/SelfApi~selfMfaKindPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfMfaKindPost_0(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling selfMfaKindPost_0");
      }

      let pathParams = {
        'kind': kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/mfa/{kind}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfMfaKindPut_0 operation.
     * @callback module:api/SelfApi~selfMfaKindPut_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} kind 
     * @param {module:api/SelfApi~selfMfaKindPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfMfaKindPut_0(kind, callback) {
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling selfMfaKindPut_0");
      }

      let pathParams = {
        'kind': kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/mfa/{kind}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMethodsDefaultGet_1 operation.
     * @callback module:api/SelfApi~selfPaymentsMethodsDefaultGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~selfPaymentsMethodsDefaultGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMethodsDefaultGet_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMethodsDefaultPut_1 operation.
     * @callback module:api/SelfApi~selfPaymentsMethodsDefaultPut_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~selfPaymentsMethodsDefaultPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMethodsDefaultPut_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/methods/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMonthlyinvoiceGet_1 operation.
     * @callback module:api/SelfApi~selfPaymentsMonthlyinvoiceGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~selfPaymentsMonthlyinvoiceGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMonthlyinvoiceGet_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/monthlyinvoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsMonthlyinvoiceMaxcreditPut_1 operation.
     * @callback module:api/SelfApi~selfPaymentsMonthlyinvoiceMaxcreditPut_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~selfPaymentsMonthlyinvoiceMaxcreditPut_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsMonthlyinvoiceMaxcreditPut_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/monthlyinvoice/maxcredit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsRecurringGet_1 operation.
     * @callback module:api/SelfApi~selfPaymentsRecurringGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~selfPaymentsRecurringGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsRecurringGet_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/recurring', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfPaymentsTokensStripeGet_1 operation.
     * @callback module:api/SelfApi~selfPaymentsTokensStripeGet_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SelfApi~selfPaymentsTokensStripeGet_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    selfPaymentsTokensStripeGet_1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/payments/tokens/stripe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
