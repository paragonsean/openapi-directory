/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Schema1 from '../model/Schema1';
import Schema2 from '../model/Schema2';

/**
* Networkgroups service.
* @module api/NetworkgroupsApi
* @version 1.0.0
*/
export default class NetworkgroupsApi {

    /**
    * Constructs a new NetworkgroupsApi. 
    * @alias module:api/NetworkgroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkGroupExternalPeer_1 operation.
     * @callback module:api/NetworkgroupsApi~createNetworkGroupExternalPeer_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add external peer
     * Adds an external peer to a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~createNetworkGroupExternalPeer_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkGroupExternalPeer_1(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling createNetworkGroupExternalPeer_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling createNetworkGroupExternalPeer_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain; charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroupMember_1 operation.
     * @callback module:api/NetworkgroupsApi~createNetworkGroupMember_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add member
     * Adds a member to a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {module:model/Schema2} [schema2] 
     * @param {module:api/NetworkgroupsApi~createNetworkGroupMember_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    createNetworkGroupMember_1(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['schema2'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling createNetworkGroupMember_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling createNetworkGroupMember_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroup_1 operation.
     * @callback module:api/NetworkgroupsApi~createNetworkGroup_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Network Group
     * Creates a Network Group.
     * @param {String} ownerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~createNetworkGroup_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworkGroup_1(ownerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling createNetworkGroup_1");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain; charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupExternalPeer_1 operation.
     * @callback module:api/NetworkgroupsApi~deleteNetworkGroupExternalPeer_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove external peer
     * Removes an external peer from a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~deleteNetworkGroupExternalPeer_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupExternalPeer_1(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroupExternalPeer_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupExternalPeer_1");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling deleteNetworkGroupExternalPeer_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers/{peerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupMember_1 operation.
     * @callback module:api/NetworkgroupsApi~deleteNetworkGroupMember_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove member
     * Removes a member from a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} memberId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~deleteNetworkGroupMember_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupMember_1(ownerId, networkGroupId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroupMember_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupMember_1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling deleteNetworkGroupMember_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupPeer_1 operation.
     * @callback module:api/NetworkgroupsApi~deleteNetworkGroupPeer_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove peer
     * Removes a peer from a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~deleteNetworkGroupPeer_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroupPeer_1(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroupPeer_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupPeer_1");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling deleteNetworkGroupPeer_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroup_1 operation.
     * @callback module:api/NetworkgroupsApi~deleteNetworkGroup_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Network Group
     * Deletes a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~deleteNetworkGroup_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNetworkGroup_1(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling deleteNetworkGroup_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroup_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupMember_1 operation.
     * @callback module:api/NetworkgroupsApi~getNetworkGroupMember_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get member
     * Gets details of a Network Group member.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} memberId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~getNetworkGroupMember_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema1}
     */
    getNetworkGroupMember_1(ownerId, networkGroupId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupMember_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupMember_1");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getNetworkGroupMember_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schema1;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupPeer_1 operation.
     * @callback module:api/NetworkgroupsApi~getNetworkGroupPeer_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get peer
     * Gets details of a Network Group peer.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~getNetworkGroupPeer_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupPeer_1(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupPeer_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupPeer_1");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling getNetworkGroupPeer_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupStream_1 operation.
     * @callback module:api/NetworkgroupsApi~getNetworkGroupStream_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Network Group SSE
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~getNetworkGroupStream_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupStream_1(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupStream_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupStream_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupWireGuardConfigurationStream_1 operation.
     * @callback module:api/NetworkgroupsApi~getNetworkGroupWireGuardConfigurationStream_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~getNetworkGroupWireGuardConfigurationStream_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupWireGuardConfigurationStream_1(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfigurationStream_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfigurationStream_1");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfigurationStream_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupWireGuardConfiguration_1 operation.
     * @callback module:api/NetworkgroupsApi~getNetworkGroupWireGuardConfiguration_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {String} peerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~getNetworkGroupWireGuardConfiguration_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroupWireGuardConfiguration_1(ownerId, networkGroupId, peerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfiguration_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfiguration_1");
      }
      // verify the required parameter 'peerId' is set
      if (peerId === undefined || peerId === null) {
        throw new Error("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfiguration_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId,
        'peerId': peerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroup_1 operation.
     * @callback module:api/NetworkgroupsApi~getNetworkGroup_1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Network Group
     * Gets details of a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~getNetworkGroup_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkGroup_1(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling getNetworkGroup_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling getNetworkGroup_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkGroupMembers_1 operation.
     * @callback module:api/NetworkgroupsApi~listNetworkGroupMembers_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List members
     * Lists members in a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~listNetworkGroupMembers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema1>}
     */
    listNetworkGroupMembers_1(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling listNetworkGroupMembers_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling listNetworkGroupMembers_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schema1];
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkGroupPeers_1 operation.
     * @callback module:api/NetworkgroupsApi~listNetworkGroupPeers_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List peers
     * Lists peers in a Network Group.
     * @param {String} ownerId Automatically added
     * @param {String} networkGroupId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~listNetworkGroupPeers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    listNetworkGroupPeers_1(ownerId, networkGroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling listNetworkGroupPeers_1");
      }
      // verify the required parameter 'networkGroupId' is set
      if (networkGroupId === undefined || networkGroupId === null) {
        throw new Error("Missing the required parameter 'networkGroupId' when calling listNetworkGroupPeers_1");
      }

      let pathParams = {
        'ownerId': ownerId,
        'networkGroupId': networkGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkGroups_1 operation.
     * @callback module:api/NetworkgroupsApi~listNetworkGroups_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Network Groups
     * Lists Network Groups from an owner.
     * @param {String} ownerId Automatically added
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/NetworkgroupsApi~listNetworkGroups_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    listNetworkGroups_1(ownerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling listNetworkGroups_1");
      }

      let pathParams = {
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v4/networkgroups/organisations/{ownerId}/networkgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
