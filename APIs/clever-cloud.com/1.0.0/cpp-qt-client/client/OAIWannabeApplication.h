/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWannabeApplication.h
 *
 * 
 */

#ifndef OAIWannabeApplication_H
#define OAIWannabeApplication_H

#include <QJsonObject>

#include "OAIWannabeOauthApp.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWannabeOauthApp;

class OAIWannabeApplication : public OAIObject {
public:
    OAIWannabeApplication();
    OAIWannabeApplication(QString json);
    ~OAIWannabeApplication() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isArchived() const;
    void setArchived(const bool &archived);
    bool is_archived_Set() const;
    bool is_archived_Valid() const;

    bool isCancelOnPush() const;
    void setCancelOnPush(const bool &cancel_on_push);
    bool is_cancel_on_push_Set() const;
    bool is_cancel_on_push_Valid() const;

    QString getDeploy() const;
    void setDeploy(const QString &deploy);
    bool is_deploy_Set() const;
    bool is_deploy_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    bool isFavourite() const;
    void setFavourite(const bool &favourite);
    bool is_favourite_Set() const;
    bool is_favourite_Valid() const;

    bool isHomogeneous() const;
    void setHomogeneous(const bool &homogeneous);
    bool is_homogeneous_Set() const;
    bool is_homogeneous_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QString getInstanceVariant() const;
    void setInstanceVariant(const QString &instance_variant);
    bool is_instance_variant_Set() const;
    bool is_instance_variant_Valid() const;

    QString getInstanceVersion() const;
    void setInstanceVersion(const QString &instance_version);
    bool is_instance_version_Set() const;
    bool is_instance_version_Valid() const;

    QString getMaxFlavor() const;
    void setMaxFlavor(const QString &max_flavor);
    bool is_max_flavor_Set() const;
    bool is_max_flavor_Valid() const;

    qint32 getMaxInstances() const;
    void setMaxInstances(const qint32 &max_instances);
    bool is_max_instances_Set() const;
    bool is_max_instances_Valid() const;

    QString getMinFlavor() const;
    void setMinFlavor(const QString &min_flavor);
    bool is_min_flavor_Set() const;
    bool is_min_flavor_Valid() const;

    qint32 getMinInstances() const;
    void setMinInstances(const qint32 &min_instances);
    bool is_min_instances_Set() const;
    bool is_min_instances_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIWannabeOauthApp getOauthApp() const;
    void setOauthApp(const OAIWannabeOauthApp &oauth_app);
    bool is_oauth_app_Set() const;
    bool is_oauth_app_Valid() const;

    QString getOauthAppId() const;
    void setOauthAppId(const QString &oauth_app_id);
    bool is_oauth_app_id_Set() const;
    bool is_oauth_app_id_Valid() const;

    QString getOauthService() const;
    void setOauthService(const QString &oauth_service);
    bool is_oauth_service_Set() const;
    bool is_oauth_service_Valid() const;

    bool isSeparateBuild() const;
    void setSeparateBuild(const bool &separate_build);
    bool is_separate_build_Set() const;
    bool is_separate_build_Valid() const;

    bool isShutdownable() const;
    void setShutdownable(const bool &shutdownable);
    bool is_shutdownable_Set() const;
    bool is_shutdownable_Valid() const;

    bool isStickySessions() const;
    void setStickySessions(const bool &sticky_sessions);
    bool is_sticky_sessions_Set() const;
    bool is_sticky_sessions_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getZone() const;
    void setZone(const QString &zone);
    bool is_zone_Set() const;
    bool is_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_archived;
    bool m_archived_isSet;
    bool m_archived_isValid;

    bool m_cancel_on_push;
    bool m_cancel_on_push_isSet;
    bool m_cancel_on_push_isValid;

    QString m_deploy;
    bool m_deploy_isSet;
    bool m_deploy_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    bool m_favourite;
    bool m_favourite_isSet;
    bool m_favourite_isValid;

    bool m_homogeneous;
    bool m_homogeneous_isSet;
    bool m_homogeneous_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QString m_instance_variant;
    bool m_instance_variant_isSet;
    bool m_instance_variant_isValid;

    QString m_instance_version;
    bool m_instance_version_isSet;
    bool m_instance_version_isValid;

    QString m_max_flavor;
    bool m_max_flavor_isSet;
    bool m_max_flavor_isValid;

    qint32 m_max_instances;
    bool m_max_instances_isSet;
    bool m_max_instances_isValid;

    QString m_min_flavor;
    bool m_min_flavor_isSet;
    bool m_min_flavor_isValid;

    qint32 m_min_instances;
    bool m_min_instances_isSet;
    bool m_min_instances_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIWannabeOauthApp m_oauth_app;
    bool m_oauth_app_isSet;
    bool m_oauth_app_isValid;

    QString m_oauth_app_id;
    bool m_oauth_app_id_isSet;
    bool m_oauth_app_id_isValid;

    QString m_oauth_service;
    bool m_oauth_service_isSet;
    bool m_oauth_service_isValid;

    bool m_separate_build;
    bool m_separate_build_isSet;
    bool m_separate_build_isValid;

    bool m_shutdownable;
    bool m_shutdownable_isSet;
    bool m_shutdownable_isValid;

    bool m_sticky_sessions;
    bool m_sticky_sessions_isSet;
    bool m_sticky_sessions_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_zone;
    bool m_zone_isSet;
    bool m_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWannabeApplication)

#endif // OAIWannabeApplication_H
