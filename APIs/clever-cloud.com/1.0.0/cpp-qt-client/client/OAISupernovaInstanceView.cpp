/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupernovaInstanceView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupernovaInstanceView::OAISupernovaInstanceView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupernovaInstanceView::OAISupernovaInstanceView() {
    this->initializeModel();
}

OAISupernovaInstanceView::~OAISupernovaInstanceView() {}

void OAISupernovaInstanceView::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_port_isSet = false;
    m_app_port_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deploy_id_isSet = false;
    m_deploy_id_isValid = false;

    m_deploy_number_isSet = false;
    m_deploy_number_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_flavor_isSet = false;
    m_flavor_isValid = false;

    m_hv_isSet = false;
    m_hv_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_instance_number_isSet = false;
    m_instance_number_isValid = false;

    m_internal_ip_isSet = false;
    m_internal_ip_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_ssh_port_isSet = false;
    m_ssh_port_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_zabbix_port_isSet = false;
    m_zabbix_port_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAISupernovaInstanceView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupernovaInstanceView::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_app_port_isValid = ::OpenAPI::fromJsonValue(m_app_port, json[QString("appPort")]);
    m_app_port_isSet = !json[QString("appPort")].isNull() && m_app_port_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commitId")]);
    m_commit_id_isSet = !json[QString("commitId")].isNull() && m_commit_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_deploy_id_isValid = ::OpenAPI::fromJsonValue(m_deploy_id, json[QString("deployId")]);
    m_deploy_id_isSet = !json[QString("deployId")].isNull() && m_deploy_id_isValid;

    m_deploy_number_isValid = ::OpenAPI::fromJsonValue(m_deploy_number, json[QString("deployNumber")]);
    m_deploy_number_isSet = !json[QString("deployNumber")].isNull() && m_deploy_number_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_flavor_isValid = ::OpenAPI::fromJsonValue(m_flavor, json[QString("flavor")]);
    m_flavor_isSet = !json[QString("flavor")].isNull() && m_flavor_isValid;

    m_hv_isValid = ::OpenAPI::fromJsonValue(m_hv, json[QString("hv")]);
    m_hv_isSet = !json[QString("hv")].isNull() && m_hv_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_instance_number_isValid = ::OpenAPI::fromJsonValue(m_instance_number, json[QString("instanceNumber")]);
    m_instance_number_isSet = !json[QString("instanceNumber")].isNull() && m_instance_number_isValid;

    m_internal_ip_isValid = ::OpenAPI::fromJsonValue(m_internal_ip, json[QString("internalIP")]);
    m_internal_ip_isSet = !json[QString("internalIP")].isNull() && m_internal_ip_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("ownerId")]);
    m_owner_id_isSet = !json[QString("ownerId")].isNull() && m_owner_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_ssh_port_isValid = ::OpenAPI::fromJsonValue(m_ssh_port, json[QString("sshPort")]);
    m_ssh_port_isSet = !json[QString("sshPort")].isNull() && m_ssh_port_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_zabbix_port_isValid = ::OpenAPI::fromJsonValue(m_zabbix_port, json[QString("zabbixPort")]);
    m_zabbix_port_isSet = !json[QString("zabbixPort")].isNull() && m_zabbix_port_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAISupernovaInstanceView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupernovaInstanceView::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_port_isSet) {
        obj.insert(QString("appPort"), ::OpenAPI::toJsonValue(m_app_port));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commitId"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deploy_id_isSet) {
        obj.insert(QString("deployId"), ::OpenAPI::toJsonValue(m_deploy_id));
    }
    if (m_deploy_number_isSet) {
        obj.insert(QString("deployNumber"), ::OpenAPI::toJsonValue(m_deploy_number));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_flavor.isSet()) {
        obj.insert(QString("flavor"), ::OpenAPI::toJsonValue(m_flavor));
    }
    if (m_hv_isSet) {
        obj.insert(QString("hv"), ::OpenAPI::toJsonValue(m_hv));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_instance_number_isSet) {
        obj.insert(QString("instanceNumber"), ::OpenAPI::toJsonValue(m_instance_number));
    }
    if (m_internal_ip_isSet) {
        obj.insert(QString("internalIP"), ::OpenAPI::toJsonValue(m_internal_ip));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_ssh_port_isSet) {
        obj.insert(QString("sshPort"), ::OpenAPI::toJsonValue(m_ssh_port));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_zabbix_port_isSet) {
        obj.insert(QString("zabbixPort"), ::OpenAPI::toJsonValue(m_zabbix_port));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAISupernovaInstanceView::getAppId() const {
    return m_app_id;
}
void OAISupernovaInstanceView::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAISupernovaInstanceView::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAISupernovaInstanceView::is_app_id_Valid() const{
    return m_app_id_isValid;
}

double OAISupernovaInstanceView::getAppPort() const {
    return m_app_port;
}
void OAISupernovaInstanceView::setAppPort(const double &app_port) {
    m_app_port = app_port;
    m_app_port_isSet = true;
}

bool OAISupernovaInstanceView::is_app_port_Set() const{
    return m_app_port_isSet;
}

bool OAISupernovaInstanceView::is_app_port_Valid() const{
    return m_app_port_isValid;
}

QString OAISupernovaInstanceView::getCommitId() const {
    return m_commit_id;
}
void OAISupernovaInstanceView::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAISupernovaInstanceView::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAISupernovaInstanceView::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

double OAISupernovaInstanceView::getCreatedAt() const {
    return m_created_at;
}
void OAISupernovaInstanceView::setCreatedAt(const double &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISupernovaInstanceView::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISupernovaInstanceView::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISupernovaInstanceView::getDeployId() const {
    return m_deploy_id;
}
void OAISupernovaInstanceView::setDeployId(const QString &deploy_id) {
    m_deploy_id = deploy_id;
    m_deploy_id_isSet = true;
}

bool OAISupernovaInstanceView::is_deploy_id_Set() const{
    return m_deploy_id_isSet;
}

bool OAISupernovaInstanceView::is_deploy_id_Valid() const{
    return m_deploy_id_isValid;
}

double OAISupernovaInstanceView::getDeployNumber() const {
    return m_deploy_number;
}
void OAISupernovaInstanceView::setDeployNumber(const double &deploy_number) {
    m_deploy_number = deploy_number;
    m_deploy_number_isSet = true;
}

bool OAISupernovaInstanceView::is_deploy_number_Set() const{
    return m_deploy_number_isSet;
}

bool OAISupernovaInstanceView::is_deploy_number_Valid() const{
    return m_deploy_number_isValid;
}

QString OAISupernovaInstanceView::getDisplayName() const {
    return m_display_name;
}
void OAISupernovaInstanceView::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISupernovaInstanceView::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISupernovaInstanceView::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAISupernovaInstanceView_flavor OAISupernovaInstanceView::getFlavor() const {
    return m_flavor;
}
void OAISupernovaInstanceView::setFlavor(const OAISupernovaInstanceView_flavor &flavor) {
    m_flavor = flavor;
    m_flavor_isSet = true;
}

bool OAISupernovaInstanceView::is_flavor_Set() const{
    return m_flavor_isSet;
}

bool OAISupernovaInstanceView::is_flavor_Valid() const{
    return m_flavor_isValid;
}

QString OAISupernovaInstanceView::getHv() const {
    return m_hv;
}
void OAISupernovaInstanceView::setHv(const QString &hv) {
    m_hv = hv;
    m_hv_isSet = true;
}

bool OAISupernovaInstanceView::is_hv_Set() const{
    return m_hv_isSet;
}

bool OAISupernovaInstanceView::is_hv_Valid() const{
    return m_hv_isValid;
}

QString OAISupernovaInstanceView::getImage() const {
    return m_image;
}
void OAISupernovaInstanceView::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAISupernovaInstanceView::is_image_Set() const{
    return m_image_isSet;
}

bool OAISupernovaInstanceView::is_image_Valid() const{
    return m_image_isValid;
}

double OAISupernovaInstanceView::getInstanceNumber() const {
    return m_instance_number;
}
void OAISupernovaInstanceView::setInstanceNumber(const double &instance_number) {
    m_instance_number = instance_number;
    m_instance_number_isSet = true;
}

bool OAISupernovaInstanceView::is_instance_number_Set() const{
    return m_instance_number_isSet;
}

bool OAISupernovaInstanceView::is_instance_number_Valid() const{
    return m_instance_number_isValid;
}

QString OAISupernovaInstanceView::getInternalIp() const {
    return m_internal_ip;
}
void OAISupernovaInstanceView::setInternalIp(const QString &internal_ip) {
    m_internal_ip = internal_ip;
    m_internal_ip_isSet = true;
}

bool OAISupernovaInstanceView::is_internal_ip_Set() const{
    return m_internal_ip_isSet;
}

bool OAISupernovaInstanceView::is_internal_ip_Valid() const{
    return m_internal_ip_isValid;
}

QString OAISupernovaInstanceView::getIp() const {
    return m_ip;
}
void OAISupernovaInstanceView::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAISupernovaInstanceView::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAISupernovaInstanceView::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAISupernovaInstanceView::getOwnerId() const {
    return m_owner_id;
}
void OAISupernovaInstanceView::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAISupernovaInstanceView::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAISupernovaInstanceView::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAISupernovaInstanceView::getSource() const {
    return m_source;
}
void OAISupernovaInstanceView::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAISupernovaInstanceView::is_source_Set() const{
    return m_source_isSet;
}

bool OAISupernovaInstanceView::is_source_Valid() const{
    return m_source_isValid;
}

double OAISupernovaInstanceView::getSshPort() const {
    return m_ssh_port;
}
void OAISupernovaInstanceView::setSshPort(const double &ssh_port) {
    m_ssh_port = ssh_port;
    m_ssh_port_isSet = true;
}

bool OAISupernovaInstanceView::is_ssh_port_Set() const{
    return m_ssh_port_isSet;
}

bool OAISupernovaInstanceView::is_ssh_port_Valid() const{
    return m_ssh_port_isValid;
}

QString OAISupernovaInstanceView::getState() const {
    return m_state;
}
void OAISupernovaInstanceView::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISupernovaInstanceView::is_state_Set() const{
    return m_state_isSet;
}

bool OAISupernovaInstanceView::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISupernovaInstanceView::getUuid() const {
    return m_uuid;
}
void OAISupernovaInstanceView::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAISupernovaInstanceView::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAISupernovaInstanceView::is_uuid_Valid() const{
    return m_uuid_isValid;
}

double OAISupernovaInstanceView::getZabbixPort() const {
    return m_zabbix_port;
}
void OAISupernovaInstanceView::setZabbixPort(const double &zabbix_port) {
    m_zabbix_port = zabbix_port;
    m_zabbix_port_isSet = true;
}

bool OAISupernovaInstanceView::is_zabbix_port_Set() const{
    return m_zabbix_port_isSet;
}

bool OAISupernovaInstanceView::is_zabbix_port_Valid() const{
    return m_zabbix_port_isValid;
}

QString OAISupernovaInstanceView::getZone() const {
    return m_zone;
}
void OAISupernovaInstanceView::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAISupernovaInstanceView::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAISupernovaInstanceView::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAISupernovaInstanceView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flavor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zabbix_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupernovaInstanceView::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_port_isValid && m_flavor_isValid && m_hv_isValid && m_image_isValid && m_ip_isValid && m_source_isValid && m_uuid_isValid && m_zabbix_port_isValid && true;
}

} // namespace OpenAPI
