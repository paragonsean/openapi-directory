/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentView::OAIDeploymentView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentView::OAIDeploymentView() {
    this->initializeModel();
}

OAIDeploymentView::~OAIDeploymentView() {}

void OAIDeploymentView::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIDeploymentView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentView::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIDeploymentView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentView::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_cause_isSet) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_commit_isSet) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instances_isSet) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIDeploymentView::getAction() const {
    return m_action;
}
void OAIDeploymentView::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIDeploymentView::is_action_Set() const{
    return m_action_isSet;
}

bool OAIDeploymentView::is_action_Valid() const{
    return m_action_isValid;
}

OAIDeploymentView_author OAIDeploymentView::getAuthor() const {
    return m_author;
}
void OAIDeploymentView::setAuthor(const OAIDeploymentView_author &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIDeploymentView::is_author_Set() const{
    return m_author_isSet;
}

bool OAIDeploymentView::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIDeploymentView::getCause() const {
    return m_cause;
}
void OAIDeploymentView::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIDeploymentView::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIDeploymentView::is_cause_Valid() const{
    return m_cause_isValid;
}

QString OAIDeploymentView::getCommit() const {
    return m_commit;
}
void OAIDeploymentView::setCommit(const QString &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIDeploymentView::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIDeploymentView::is_commit_Valid() const{
    return m_commit_isValid;
}

QDate OAIDeploymentView::getDate() const {
    return m_date;
}
void OAIDeploymentView::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDeploymentView::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDeploymentView::is_date_Valid() const{
    return m_date_isValid;
}

qint64 OAIDeploymentView::getId() const {
    return m_id;
}
void OAIDeploymentView::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeploymentView::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeploymentView::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIDeploymentView::getInstances() const {
    return m_instances;
}
void OAIDeploymentView::setInstances(const qint64 &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIDeploymentView::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIDeploymentView::is_instances_Valid() const{
    return m_instances_isValid;
}

QString OAIDeploymentView::getState() const {
    return m_state;
}
void OAIDeploymentView::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDeploymentView::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDeploymentView::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDeploymentView::getUuid() const {
    return m_uuid;
}
void OAIDeploymentView::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIDeploymentView::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIDeploymentView::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIDeploymentView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentView::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_cause_isValid && m_commit_isValid && m_date_isValid && m_id_isValid && m_instances_isValid && m_state_isValid && m_uuid_isValid && true;
}

} // namespace OpenAPI
