/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGithubApi_H
#define OAI_OAIGithubApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplication.h"
#include "OAIKey.h"
#include "OAITransaction_Id.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGithubApi : public QObject {
    Q_OBJECT

public:
    OAIGithubApi(const int timeOut = 0);
    ~OAIGithubApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void deleteGithubLink();


    virtual void getGithubApplications();

    /**
    * @param[in]  code QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  error QString [optional]
    * @param[in]  error_description QString [optional]
    * @param[in]  error_uri QString [optional]
    * @param[in]  cookie QString [optional]
    */
    virtual void getGithubCallback(const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cookie = ::OpenAPI::OptionalParam<QString>());


    virtual void getGithubEmails();


    virtual void getGithubKeys();

    /**
    * @param[in]  transaction_id QString [optional]
    * @param[in]  redirect_url QString [optional]
    */
    virtual void getGithubLink(const ::OpenAPI::OptionalParam<QString> &transaction_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &redirect_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  redirect_url QString [optional]
    * @param[in]  from_authorize QString [optional]
    */
    virtual void getGithubLogin(const ::OpenAPI::OptionalParam<QString> &redirect_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_authorize = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  redirect_url QString [optional]
    * @param[in]  from_authorize QString [optional]
    */
    virtual void getGithubSignup(const ::OpenAPI::OptionalParam<QString> &redirect_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_authorize = ::OpenAPI::OptionalParam<QString>());


    virtual void getGithubUsername();


    virtual void getGithub();

    /**
    * @param[in]  user_agent QString [optional]
    * @param[in]  x_github_event QString [optional]
    * @param[in]  x_hub_signature QString [optional]
    */
    virtual void postGithubRedeploy(const ::OpenAPI::OptionalParam<QString> &user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_github_event = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_hub_signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  transaction_id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  other_id QString [optional]
    * @param[in]  other_email QString [optional]
    * @param[in]  password QString [optional]
    * @param[in]  auto_link QString [optional]
    * @param[in]  terms QString [optional]
    */
    virtual void postGithubSignup(const ::OpenAPI::OptionalParam<QString> &transaction_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &other_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &other_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auto_link = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &terms = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteGithubLinkCallback(OAIHttpRequestWorker *worker);
    void getGithubApplicationsCallback(OAIHttpRequestWorker *worker);
    void getGithubCallbackCallback(OAIHttpRequestWorker *worker);
    void getGithubEmailsCallback(OAIHttpRequestWorker *worker);
    void getGithubKeysCallback(OAIHttpRequestWorker *worker);
    void getGithubLinkCallback(OAIHttpRequestWorker *worker);
    void getGithubLoginCallback(OAIHttpRequestWorker *worker);
    void getGithubSignupCallback(OAIHttpRequestWorker *worker);
    void getGithubUsernameCallback(OAIHttpRequestWorker *worker);
    void getGithubCallback(OAIHttpRequestWorker *worker);
    void postGithubRedeployCallback(OAIHttpRequestWorker *worker);
    void postGithubSignupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteGithubLinkSignal();
    void getGithubApplicationsSignal(QList<OAIApplication> summary);
    void getGithubCallbackSignal();
    void getGithubEmailsSignal(QList<QString> summary);
    void getGithubKeysSignal(QList<OAIKey> summary);
    void getGithubLinkSignal();
    void getGithubLoginSignal();
    void getGithubSignupSignal();
    void getGithubUsernameSignal(QString summary);
    void getGithubSignal(OAITransaction_Id summary);
    void postGithubRedeploySignal();
    void postGithubSignupSignal();


    void deleteGithubLinkSignalFull(OAIHttpRequestWorker *worker);
    void getGithubApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getGithubCallbackSignalFull(OAIHttpRequestWorker *worker);
    void getGithubEmailsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getGithubKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIKey> summary);
    void getGithubLinkSignalFull(OAIHttpRequestWorker *worker);
    void getGithubLoginSignalFull(OAIHttpRequestWorker *worker);
    void getGithubSignupSignalFull(OAIHttpRequestWorker *worker);
    void getGithubUsernameSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getGithubSignalFull(OAIHttpRequestWorker *worker, OAITransaction_Id summary);
    void postGithubRedeploySignalFull(OAIHttpRequestWorker *worker);
    void postGithubSignupSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteGithubLinkSignalError() instead")
    void deleteGithubLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGithubLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubApplicationsSignalError() instead")
    void getGithubApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubCallbackSignalError() instead")
    void getGithubCallbackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubCallbackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubEmailsSignalError() instead")
    void getGithubEmailsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubEmailsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubKeysSignalError() instead")
    void getGithubKeysSignalE(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubKeysSignalError(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubLinkSignalError() instead")
    void getGithubLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubLoginSignalError() instead")
    void getGithubLoginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubLoginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubSignupSignalError() instead")
    void getGithubSignupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubSignupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubUsernameSignalError() instead")
    void getGithubUsernameSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubUsernameSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubSignalError() instead")
    void getGithubSignalE(OAITransaction_Id summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubSignalError(OAITransaction_Id summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGithubRedeploySignalError() instead")
    void postGithubRedeploySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postGithubRedeploySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGithubSignupSignalError() instead")
    void postGithubSignupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postGithubSignupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteGithubLinkSignalErrorFull() instead")
    void deleteGithubLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGithubLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubApplicationsSignalErrorFull() instead")
    void getGithubApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubCallbackSignalErrorFull() instead")
    void getGithubCallbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubCallbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubEmailsSignalErrorFull() instead")
    void getGithubEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubKeysSignalErrorFull() instead")
    void getGithubKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubLinkSignalErrorFull() instead")
    void getGithubLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubLoginSignalErrorFull() instead")
    void getGithubLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubSignupSignalErrorFull() instead")
    void getGithubSignupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubSignupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubUsernameSignalErrorFull() instead")
    void getGithubUsernameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubUsernameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubSignalErrorFull() instead")
    void getGithubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGithubRedeploySignalErrorFull() instead")
    void postGithubRedeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGithubRedeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGithubSignupSignalErrorFull() instead")
    void postGithubSignupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGithubSignupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
