/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_build_flavor_isSet = false;
    m_build_flavor_isValid = false;

    m_coming_soon_isSet = false;
    m_coming_soon_isValid = false;

    m_default_env_isSet = false;
    m_default_env_isValid = false;

    m_default_flavor_isSet = false;
    m_default_flavor_isValid = false;

    m_deployments_isSet = false;
    m_deployments_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_flavors_isSet = false;
    m_flavors_isValid = false;

    m_instance_and_version_isSet = false;
    m_instance_and_version_isValid = false;

    m_max_allowed_instances_isSet = false;
    m_max_allowed_instances_isValid = false;

    m_max_flavor_isSet = false;
    m_max_flavor_isValid = false;

    m_max_instances_isSet = false;
    m_max_instances_isValid = false;

    m_min_flavor_isSet = false;
    m_min_flavor_isValid = false;

    m_min_instances_isSet = false;
    m_min_instances_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_build_flavor_isValid = ::OpenAPI::fromJsonValue(m_build_flavor, json[QString("buildFlavor")]);
    m_build_flavor_isSet = !json[QString("buildFlavor")].isNull() && m_build_flavor_isValid;

    m_coming_soon_isValid = ::OpenAPI::fromJsonValue(m_coming_soon, json[QString("comingSoon")]);
    m_coming_soon_isSet = !json[QString("comingSoon")].isNull() && m_coming_soon_isValid;

    m_default_env_isValid = ::OpenAPI::fromJsonValue(m_default_env, json[QString("defaultEnv")]);
    m_default_env_isSet = !json[QString("defaultEnv")].isNull() && m_default_env_isValid;

    m_default_flavor_isValid = ::OpenAPI::fromJsonValue(m_default_flavor, json[QString("defaultFlavor")]);
    m_default_flavor_isSet = !json[QString("defaultFlavor")].isNull() && m_default_flavor_isValid;

    m_deployments_isValid = ::OpenAPI::fromJsonValue(m_deployments, json[QString("deployments")]);
    m_deployments_isSet = !json[QString("deployments")].isNull() && m_deployments_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_flavors_isValid = ::OpenAPI::fromJsonValue(m_flavors, json[QString("flavors")]);
    m_flavors_isSet = !json[QString("flavors")].isNull() && m_flavors_isValid;

    m_instance_and_version_isValid = ::OpenAPI::fromJsonValue(m_instance_and_version, json[QString("instanceAndVersion")]);
    m_instance_and_version_isSet = !json[QString("instanceAndVersion")].isNull() && m_instance_and_version_isValid;

    m_max_allowed_instances_isValid = ::OpenAPI::fromJsonValue(m_max_allowed_instances, json[QString("maxAllowedInstances")]);
    m_max_allowed_instances_isSet = !json[QString("maxAllowedInstances")].isNull() && m_max_allowed_instances_isValid;

    m_max_flavor_isValid = ::OpenAPI::fromJsonValue(m_max_flavor, json[QString("maxFlavor")]);
    m_max_flavor_isSet = !json[QString("maxFlavor")].isNull() && m_max_flavor_isValid;

    m_max_instances_isValid = ::OpenAPI::fromJsonValue(m_max_instances, json[QString("maxInstances")]);
    m_max_instances_isSet = !json[QString("maxInstances")].isNull() && m_max_instances_isValid;

    m_min_flavor_isValid = ::OpenAPI::fromJsonValue(m_min_flavor, json[QString("minFlavor")]);
    m_min_flavor_isSet = !json[QString("minFlavor")].isNull() && m_min_flavor_isValid;

    m_min_instances_isValid = ::OpenAPI::fromJsonValue(m_min_instances, json[QString("minInstances")]);
    m_min_instances_isSet = !json[QString("minInstances")].isNull() && m_min_instances_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_build_flavor.isSet()) {
        obj.insert(QString("buildFlavor"), ::OpenAPI::toJsonValue(m_build_flavor));
    }
    if (m_coming_soon_isSet) {
        obj.insert(QString("comingSoon"), ::OpenAPI::toJsonValue(m_coming_soon));
    }
    if (m_default_env_isSet) {
        obj.insert(QString("defaultEnv"), ::OpenAPI::toJsonValue(m_default_env));
    }
    if (m_default_flavor.isSet()) {
        obj.insert(QString("defaultFlavor"), ::OpenAPI::toJsonValue(m_default_flavor));
    }
    if (m_deployments.size() > 0) {
        obj.insert(QString("deployments"), ::OpenAPI::toJsonValue(m_deployments));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_flavors.size() > 0) {
        obj.insert(QString("flavors"), ::OpenAPI::toJsonValue(m_flavors));
    }
    if (m_instance_and_version_isSet) {
        obj.insert(QString("instanceAndVersion"), ::OpenAPI::toJsonValue(m_instance_and_version));
    }
    if (m_max_allowed_instances_isSet) {
        obj.insert(QString("maxAllowedInstances"), ::OpenAPI::toJsonValue(m_max_allowed_instances));
    }
    if (m_max_flavor.isSet()) {
        obj.insert(QString("maxFlavor"), ::OpenAPI::toJsonValue(m_max_flavor));
    }
    if (m_max_instances_isSet) {
        obj.insert(QString("maxInstances"), ::OpenAPI::toJsonValue(m_max_instances));
    }
    if (m_min_flavor.isSet()) {
        obj.insert(QString("minFlavor"), ::OpenAPI::toJsonValue(m_min_flavor));
    }
    if (m_min_instances_isSet) {
        obj.insert(QString("minInstances"), ::OpenAPI::toJsonValue(m_min_instances));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_variant.isSet()) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIFlavor OAIInstance::getBuildFlavor() const {
    return m_build_flavor;
}
void OAIInstance::setBuildFlavor(const OAIFlavor &build_flavor) {
    m_build_flavor = build_flavor;
    m_build_flavor_isSet = true;
}

bool OAIInstance::is_build_flavor_Set() const{
    return m_build_flavor_isSet;
}

bool OAIInstance::is_build_flavor_Valid() const{
    return m_build_flavor_isValid;
}

bool OAIInstance::isComingSoon() const {
    return m_coming_soon;
}
void OAIInstance::setComingSoon(const bool &coming_soon) {
    m_coming_soon = coming_soon;
    m_coming_soon_isSet = true;
}

bool OAIInstance::is_coming_soon_Set() const{
    return m_coming_soon_isSet;
}

bool OAIInstance::is_coming_soon_Valid() const{
    return m_coming_soon_isValid;
}

OAIObject OAIInstance::getDefaultEnv() const {
    return m_default_env;
}
void OAIInstance::setDefaultEnv(const OAIObject &default_env) {
    m_default_env = default_env;
    m_default_env_isSet = true;
}

bool OAIInstance::is_default_env_Set() const{
    return m_default_env_isSet;
}

bool OAIInstance::is_default_env_Valid() const{
    return m_default_env_isValid;
}

OAIFlavor OAIInstance::getDefaultFlavor() const {
    return m_default_flavor;
}
void OAIInstance::setDefaultFlavor(const OAIFlavor &default_flavor) {
    m_default_flavor = default_flavor;
    m_default_flavor_isSet = true;
}

bool OAIInstance::is_default_flavor_Set() const{
    return m_default_flavor_isSet;
}

bool OAIInstance::is_default_flavor_Valid() const{
    return m_default_flavor_isValid;
}

QList<QString> OAIInstance::getDeployments() const {
    return m_deployments;
}
void OAIInstance::setDeployments(const QList<QString> &deployments) {
    m_deployments = deployments;
    m_deployments_isSet = true;
}

bool OAIInstance::is_deployments_Set() const{
    return m_deployments_isSet;
}

bool OAIInstance::is_deployments_Valid() const{
    return m_deployments_isValid;
}

QString OAIInstance::getDescription() const {
    return m_description;
}
void OAIInstance::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInstance::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInstance::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIInstance::isEnabled() const {
    return m_enabled;
}
void OAIInstance::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIInstance::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIInstance::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAIFlavor> OAIInstance::getFlavors() const {
    return m_flavors;
}
void OAIInstance::setFlavors(const QList<OAIFlavor> &flavors) {
    m_flavors = flavors;
    m_flavors_isSet = true;
}

bool OAIInstance::is_flavors_Set() const{
    return m_flavors_isSet;
}

bool OAIInstance::is_flavors_Valid() const{
    return m_flavors_isValid;
}

QString OAIInstance::getInstanceAndVersion() const {
    return m_instance_and_version;
}
void OAIInstance::setInstanceAndVersion(const QString &instance_and_version) {
    m_instance_and_version = instance_and_version;
    m_instance_and_version_isSet = true;
}

bool OAIInstance::is_instance_and_version_Set() const{
    return m_instance_and_version_isSet;
}

bool OAIInstance::is_instance_and_version_Valid() const{
    return m_instance_and_version_isValid;
}

qint32 OAIInstance::getMaxAllowedInstances() const {
    return m_max_allowed_instances;
}
void OAIInstance::setMaxAllowedInstances(const qint32 &max_allowed_instances) {
    m_max_allowed_instances = max_allowed_instances;
    m_max_allowed_instances_isSet = true;
}

bool OAIInstance::is_max_allowed_instances_Set() const{
    return m_max_allowed_instances_isSet;
}

bool OAIInstance::is_max_allowed_instances_Valid() const{
    return m_max_allowed_instances_isValid;
}

OAIFlavor OAIInstance::getMaxFlavor() const {
    return m_max_flavor;
}
void OAIInstance::setMaxFlavor(const OAIFlavor &max_flavor) {
    m_max_flavor = max_flavor;
    m_max_flavor_isSet = true;
}

bool OAIInstance::is_max_flavor_Set() const{
    return m_max_flavor_isSet;
}

bool OAIInstance::is_max_flavor_Valid() const{
    return m_max_flavor_isValid;
}

qint32 OAIInstance::getMaxInstances() const {
    return m_max_instances;
}
void OAIInstance::setMaxInstances(const qint32 &max_instances) {
    m_max_instances = max_instances;
    m_max_instances_isSet = true;
}

bool OAIInstance::is_max_instances_Set() const{
    return m_max_instances_isSet;
}

bool OAIInstance::is_max_instances_Valid() const{
    return m_max_instances_isValid;
}

OAIFlavor OAIInstance::getMinFlavor() const {
    return m_min_flavor;
}
void OAIInstance::setMinFlavor(const OAIFlavor &min_flavor) {
    m_min_flavor = min_flavor;
    m_min_flavor_isSet = true;
}

bool OAIInstance::is_min_flavor_Set() const{
    return m_min_flavor_isSet;
}

bool OAIInstance::is_min_flavor_Valid() const{
    return m_min_flavor_isValid;
}

qint32 OAIInstance::getMinInstances() const {
    return m_min_instances;
}
void OAIInstance::setMinInstances(const qint32 &min_instances) {
    m_min_instances = min_instances;
    m_min_instances_isSet = true;
}

bool OAIInstance::is_min_instances_Set() const{
    return m_min_instances_isSet;
}

bool OAIInstance::is_min_instances_Valid() const{
    return m_min_instances_isValid;
}

QString OAIInstance::getName() const {
    return m_name;
}
void OAIInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstance::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIInstance::getTags() const {
    return m_tags;
}
void OAIInstance::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIInstance::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIInstance::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIInstance::getType() const {
    return m_type;
}
void OAIInstance::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInstance::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInstance::is_type_Valid() const{
    return m_type_isValid;
}

OAIVariant OAIInstance::getVariant() const {
    return m_variant;
}
void OAIInstance::setVariant(const OAIVariant &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAIInstance::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAIInstance::is_variant_Valid() const{
    return m_variant_isValid;
}

QString OAIInstance::getVersion() const {
    return m_version;
}
void OAIInstance::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIInstance::is_version_Set() const{
    return m_version_isSet;
}

bool OAIInstance::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_flavor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coming_soon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_env_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_flavor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flavors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_and_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_allowed_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_flavor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_flavor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_env_isValid && m_flavors_isValid && m_instance_and_version_isValid && m_max_allowed_instances_isValid && m_max_flavor_isValid && m_max_instances_isValid && m_min_flavor_isValid && m_min_instances_isValid && m_type_isValid && m_variant_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
