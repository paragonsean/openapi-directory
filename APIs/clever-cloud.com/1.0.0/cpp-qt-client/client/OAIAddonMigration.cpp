/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddonMigration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddonMigration::OAIAddonMigration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddonMigration::OAIAddonMigration() {
    this->initializeModel();
}

OAIAddonMigration::~OAIAddonMigration() {}

void OAIAddonMigration::initializeModel() {

    m_addon_id_isSet = false;
    m_addon_id_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_database_user_isSet = false;
    m_database_user_isValid = false;

    m_dump_restore_finished_date_isSet = false;
    m_dump_restore_finished_date_isValid = false;

    m_dump_restore_start_date_isSet = false;
    m_dump_restore_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_exit_message_isSet = false;
    m_exit_message_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_state_update_date_isSet = false;
    m_last_state_update_date_isValid = false;

    m_new_cluster_id_isSet = false;
    m_new_cluster_id_isValid = false;

    m_new_cluster_label_isSet = false;
    m_new_cluster_label_isValid = false;

    m_new_instance_id_isSet = false;
    m_new_instance_id_isValid = false;

    m_new_plan_isSet = false;
    m_new_plan_isValid = false;

    m_new_recipient_hostname_isSet = false;
    m_new_recipient_hostname_isValid = false;

    m_new_zone_isSet = false;
    m_new_zone_isValid = false;

    m_old_cluster_id_isSet = false;
    m_old_cluster_id_isValid = false;

    m_old_cluster_label_isSet = false;
    m_old_cluster_label_isValid = false;

    m_old_instance_id_isSet = false;
    m_old_instance_id_isValid = false;

    m_old_plan_isSet = false;
    m_old_plan_isValid = false;

    m_old_recipient_hostname_isSet = false;
    m_old_recipient_hostname_isValid = false;

    m_old_zone_isSet = false;
    m_old_zone_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_request_date_isSet = false;
    m_request_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAddonMigration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddonMigration::fromJsonObject(QJsonObject json) {

    m_addon_id_isValid = ::OpenAPI::fromJsonValue(m_addon_id, json[QString("addon_id")]);
    m_addon_id_isSet = !json[QString("addon_id")].isNull() && m_addon_id_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_database_user_isValid = ::OpenAPI::fromJsonValue(m_database_user, json[QString("database_user")]);
    m_database_user_isSet = !json[QString("database_user")].isNull() && m_database_user_isValid;

    m_dump_restore_finished_date_isValid = ::OpenAPI::fromJsonValue(m_dump_restore_finished_date, json[QString("dump_restore_finished_date")]);
    m_dump_restore_finished_date_isSet = !json[QString("dump_restore_finished_date")].isNull() && m_dump_restore_finished_date_isValid;

    m_dump_restore_start_date_isValid = ::OpenAPI::fromJsonValue(m_dump_restore_start_date, json[QString("dump_restore_start_date")]);
    m_dump_restore_start_date_isSet = !json[QString("dump_restore_start_date")].isNull() && m_dump_restore_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_exit_message_isValid = ::OpenAPI::fromJsonValue(m_exit_message, json[QString("exit_message")]);
    m_exit_message_isSet = !json[QString("exit_message")].isNull() && m_exit_message_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_state_update_date_isValid = ::OpenAPI::fromJsonValue(m_last_state_update_date, json[QString("last_state_update_date")]);
    m_last_state_update_date_isSet = !json[QString("last_state_update_date")].isNull() && m_last_state_update_date_isValid;

    m_new_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_new_cluster_id, json[QString("new_cluster_id")]);
    m_new_cluster_id_isSet = !json[QString("new_cluster_id")].isNull() && m_new_cluster_id_isValid;

    m_new_cluster_label_isValid = ::OpenAPI::fromJsonValue(m_new_cluster_label, json[QString("new_cluster_label")]);
    m_new_cluster_label_isSet = !json[QString("new_cluster_label")].isNull() && m_new_cluster_label_isValid;

    m_new_instance_id_isValid = ::OpenAPI::fromJsonValue(m_new_instance_id, json[QString("new_instance_id")]);
    m_new_instance_id_isSet = !json[QString("new_instance_id")].isNull() && m_new_instance_id_isValid;

    m_new_plan_isValid = ::OpenAPI::fromJsonValue(m_new_plan, json[QString("new_plan")]);
    m_new_plan_isSet = !json[QString("new_plan")].isNull() && m_new_plan_isValid;

    m_new_recipient_hostname_isValid = ::OpenAPI::fromJsonValue(m_new_recipient_hostname, json[QString("new_recipient_hostname")]);
    m_new_recipient_hostname_isSet = !json[QString("new_recipient_hostname")].isNull() && m_new_recipient_hostname_isValid;

    m_new_zone_isValid = ::OpenAPI::fromJsonValue(m_new_zone, json[QString("new_zone")]);
    m_new_zone_isSet = !json[QString("new_zone")].isNull() && m_new_zone_isValid;

    m_old_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_old_cluster_id, json[QString("old_cluster_id")]);
    m_old_cluster_id_isSet = !json[QString("old_cluster_id")].isNull() && m_old_cluster_id_isValid;

    m_old_cluster_label_isValid = ::OpenAPI::fromJsonValue(m_old_cluster_label, json[QString("old_cluster_label")]);
    m_old_cluster_label_isSet = !json[QString("old_cluster_label")].isNull() && m_old_cluster_label_isValid;

    m_old_instance_id_isValid = ::OpenAPI::fromJsonValue(m_old_instance_id, json[QString("old_instance_id")]);
    m_old_instance_id_isSet = !json[QString("old_instance_id")].isNull() && m_old_instance_id_isValid;

    m_old_plan_isValid = ::OpenAPI::fromJsonValue(m_old_plan, json[QString("old_plan")]);
    m_old_plan_isSet = !json[QString("old_plan")].isNull() && m_old_plan_isValid;

    m_old_recipient_hostname_isValid = ::OpenAPI::fromJsonValue(m_old_recipient_hostname, json[QString("old_recipient_hostname")]);
    m_old_recipient_hostname_isSet = !json[QString("old_recipient_hostname")].isNull() && m_old_recipient_hostname_isValid;

    m_old_zone_isValid = ::OpenAPI::fromJsonValue(m_old_zone, json[QString("old_zone")]);
    m_old_zone_isSet = !json[QString("old_zone")].isNull() && m_old_zone_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_request_date_isValid = ::OpenAPI::fromJsonValue(m_request_date, json[QString("request_date")]);
    m_request_date_isSet = !json[QString("request_date")].isNull() && m_request_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAddonMigration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddonMigration::asJsonObject() const {
    QJsonObject obj;
    if (m_addon_id_isSet) {
        obj.insert(QString("addon_id"), ::OpenAPI::toJsonValue(m_addon_id));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_database_user_isSet) {
        obj.insert(QString("database_user"), ::OpenAPI::toJsonValue(m_database_user));
    }
    if (m_dump_restore_finished_date_isSet) {
        obj.insert(QString("dump_restore_finished_date"), ::OpenAPI::toJsonValue(m_dump_restore_finished_date));
    }
    if (m_dump_restore_start_date_isSet) {
        obj.insert(QString("dump_restore_start_date"), ::OpenAPI::toJsonValue(m_dump_restore_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_exit_message_isSet) {
        obj.insert(QString("exit_message"), ::OpenAPI::toJsonValue(m_exit_message));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_state_update_date_isSet) {
        obj.insert(QString("last_state_update_date"), ::OpenAPI::toJsonValue(m_last_state_update_date));
    }
    if (m_new_cluster_id_isSet) {
        obj.insert(QString("new_cluster_id"), ::OpenAPI::toJsonValue(m_new_cluster_id));
    }
    if (m_new_cluster_label_isSet) {
        obj.insert(QString("new_cluster_label"), ::OpenAPI::toJsonValue(m_new_cluster_label));
    }
    if (m_new_instance_id_isSet) {
        obj.insert(QString("new_instance_id"), ::OpenAPI::toJsonValue(m_new_instance_id));
    }
    if (m_new_plan_isSet) {
        obj.insert(QString("new_plan"), ::OpenAPI::toJsonValue(m_new_plan));
    }
    if (m_new_recipient_hostname_isSet) {
        obj.insert(QString("new_recipient_hostname"), ::OpenAPI::toJsonValue(m_new_recipient_hostname));
    }
    if (m_new_zone_isSet) {
        obj.insert(QString("new_zone"), ::OpenAPI::toJsonValue(m_new_zone));
    }
    if (m_old_cluster_id_isSet) {
        obj.insert(QString("old_cluster_id"), ::OpenAPI::toJsonValue(m_old_cluster_id));
    }
    if (m_old_cluster_label_isSet) {
        obj.insert(QString("old_cluster_label"), ::OpenAPI::toJsonValue(m_old_cluster_label));
    }
    if (m_old_instance_id_isSet) {
        obj.insert(QString("old_instance_id"), ::OpenAPI::toJsonValue(m_old_instance_id));
    }
    if (m_old_plan_isSet) {
        obj.insert(QString("old_plan"), ::OpenAPI::toJsonValue(m_old_plan));
    }
    if (m_old_recipient_hostname_isSet) {
        obj.insert(QString("old_recipient_hostname"), ::OpenAPI::toJsonValue(m_old_recipient_hostname));
    }
    if (m_old_zone_isSet) {
        obj.insert(QString("old_zone"), ::OpenAPI::toJsonValue(m_old_zone));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_request_date_isSet) {
        obj.insert(QString("request_date"), ::OpenAPI::toJsonValue(m_request_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIAddonMigration::getAddonId() const {
    return m_addon_id;
}
void OAIAddonMigration::setAddonId(const QString &addon_id) {
    m_addon_id = addon_id;
    m_addon_id_isSet = true;
}

bool OAIAddonMigration::is_addon_id_Set() const{
    return m_addon_id_isSet;
}

bool OAIAddonMigration::is_addon_id_Valid() const{
    return m_addon_id_isValid;
}

QString OAIAddonMigration::getCallbackUrl() const {
    return m_callback_url;
}
void OAIAddonMigration::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIAddonMigration::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIAddonMigration::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QString OAIAddonMigration::getDatabase() const {
    return m_database;
}
void OAIAddonMigration::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIAddonMigration::is_database_Set() const{
    return m_database_isSet;
}

bool OAIAddonMigration::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIAddonMigration::getDatabaseUser() const {
    return m_database_user;
}
void OAIAddonMigration::setDatabaseUser(const QString &database_user) {
    m_database_user = database_user;
    m_database_user_isSet = true;
}

bool OAIAddonMigration::is_database_user_Set() const{
    return m_database_user_isSet;
}

bool OAIAddonMigration::is_database_user_Valid() const{
    return m_database_user_isValid;
}

QString OAIAddonMigration::getDumpRestoreFinishedDate() const {
    return m_dump_restore_finished_date;
}
void OAIAddonMigration::setDumpRestoreFinishedDate(const QString &dump_restore_finished_date) {
    m_dump_restore_finished_date = dump_restore_finished_date;
    m_dump_restore_finished_date_isSet = true;
}

bool OAIAddonMigration::is_dump_restore_finished_date_Set() const{
    return m_dump_restore_finished_date_isSet;
}

bool OAIAddonMigration::is_dump_restore_finished_date_Valid() const{
    return m_dump_restore_finished_date_isValid;
}

QString OAIAddonMigration::getDumpRestoreStartDate() const {
    return m_dump_restore_start_date;
}
void OAIAddonMigration::setDumpRestoreStartDate(const QString &dump_restore_start_date) {
    m_dump_restore_start_date = dump_restore_start_date;
    m_dump_restore_start_date_isSet = true;
}

bool OAIAddonMigration::is_dump_restore_start_date_Set() const{
    return m_dump_restore_start_date_isSet;
}

bool OAIAddonMigration::is_dump_restore_start_date_Valid() const{
    return m_dump_restore_start_date_isValid;
}

QString OAIAddonMigration::getEndDate() const {
    return m_end_date;
}
void OAIAddonMigration::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIAddonMigration::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIAddonMigration::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIAddonMigration::getExitMessage() const {
    return m_exit_message;
}
void OAIAddonMigration::setExitMessage(const QString &exit_message) {
    m_exit_message = exit_message;
    m_exit_message_isSet = true;
}

bool OAIAddonMigration::is_exit_message_Set() const{
    return m_exit_message_isSet;
}

bool OAIAddonMigration::is_exit_message_Valid() const{
    return m_exit_message_isValid;
}

QString OAIAddonMigration::getHostname() const {
    return m_hostname;
}
void OAIAddonMigration::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIAddonMigration::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIAddonMigration::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIAddonMigration::getId() const {
    return m_id;
}
void OAIAddonMigration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAddonMigration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAddonMigration::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAddonMigration::getKind() const {
    return m_kind;
}
void OAIAddonMigration::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAddonMigration::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAddonMigration::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIAddonMigration::getLastStateUpdateDate() const {
    return m_last_state_update_date;
}
void OAIAddonMigration::setLastStateUpdateDate(const QString &last_state_update_date) {
    m_last_state_update_date = last_state_update_date;
    m_last_state_update_date_isSet = true;
}

bool OAIAddonMigration::is_last_state_update_date_Set() const{
    return m_last_state_update_date_isSet;
}

bool OAIAddonMigration::is_last_state_update_date_Valid() const{
    return m_last_state_update_date_isValid;
}

QString OAIAddonMigration::getNewClusterId() const {
    return m_new_cluster_id;
}
void OAIAddonMigration::setNewClusterId(const QString &new_cluster_id) {
    m_new_cluster_id = new_cluster_id;
    m_new_cluster_id_isSet = true;
}

bool OAIAddonMigration::is_new_cluster_id_Set() const{
    return m_new_cluster_id_isSet;
}

bool OAIAddonMigration::is_new_cluster_id_Valid() const{
    return m_new_cluster_id_isValid;
}

QString OAIAddonMigration::getNewClusterLabel() const {
    return m_new_cluster_label;
}
void OAIAddonMigration::setNewClusterLabel(const QString &new_cluster_label) {
    m_new_cluster_label = new_cluster_label;
    m_new_cluster_label_isSet = true;
}

bool OAIAddonMigration::is_new_cluster_label_Set() const{
    return m_new_cluster_label_isSet;
}

bool OAIAddonMigration::is_new_cluster_label_Valid() const{
    return m_new_cluster_label_isValid;
}

QString OAIAddonMigration::getNewInstanceId() const {
    return m_new_instance_id;
}
void OAIAddonMigration::setNewInstanceId(const QString &new_instance_id) {
    m_new_instance_id = new_instance_id;
    m_new_instance_id_isSet = true;
}

bool OAIAddonMigration::is_new_instance_id_Set() const{
    return m_new_instance_id_isSet;
}

bool OAIAddonMigration::is_new_instance_id_Valid() const{
    return m_new_instance_id_isValid;
}

QString OAIAddonMigration::getNewPlan() const {
    return m_new_plan;
}
void OAIAddonMigration::setNewPlan(const QString &new_plan) {
    m_new_plan = new_plan;
    m_new_plan_isSet = true;
}

bool OAIAddonMigration::is_new_plan_Set() const{
    return m_new_plan_isSet;
}

bool OAIAddonMigration::is_new_plan_Valid() const{
    return m_new_plan_isValid;
}

QString OAIAddonMigration::getNewRecipientHostname() const {
    return m_new_recipient_hostname;
}
void OAIAddonMigration::setNewRecipientHostname(const QString &new_recipient_hostname) {
    m_new_recipient_hostname = new_recipient_hostname;
    m_new_recipient_hostname_isSet = true;
}

bool OAIAddonMigration::is_new_recipient_hostname_Set() const{
    return m_new_recipient_hostname_isSet;
}

bool OAIAddonMigration::is_new_recipient_hostname_Valid() const{
    return m_new_recipient_hostname_isValid;
}

QString OAIAddonMigration::getNewZone() const {
    return m_new_zone;
}
void OAIAddonMigration::setNewZone(const QString &new_zone) {
    m_new_zone = new_zone;
    m_new_zone_isSet = true;
}

bool OAIAddonMigration::is_new_zone_Set() const{
    return m_new_zone_isSet;
}

bool OAIAddonMigration::is_new_zone_Valid() const{
    return m_new_zone_isValid;
}

QString OAIAddonMigration::getOldClusterId() const {
    return m_old_cluster_id;
}
void OAIAddonMigration::setOldClusterId(const QString &old_cluster_id) {
    m_old_cluster_id = old_cluster_id;
    m_old_cluster_id_isSet = true;
}

bool OAIAddonMigration::is_old_cluster_id_Set() const{
    return m_old_cluster_id_isSet;
}

bool OAIAddonMigration::is_old_cluster_id_Valid() const{
    return m_old_cluster_id_isValid;
}

QString OAIAddonMigration::getOldClusterLabel() const {
    return m_old_cluster_label;
}
void OAIAddonMigration::setOldClusterLabel(const QString &old_cluster_label) {
    m_old_cluster_label = old_cluster_label;
    m_old_cluster_label_isSet = true;
}

bool OAIAddonMigration::is_old_cluster_label_Set() const{
    return m_old_cluster_label_isSet;
}

bool OAIAddonMigration::is_old_cluster_label_Valid() const{
    return m_old_cluster_label_isValid;
}

QString OAIAddonMigration::getOldInstanceId() const {
    return m_old_instance_id;
}
void OAIAddonMigration::setOldInstanceId(const QString &old_instance_id) {
    m_old_instance_id = old_instance_id;
    m_old_instance_id_isSet = true;
}

bool OAIAddonMigration::is_old_instance_id_Set() const{
    return m_old_instance_id_isSet;
}

bool OAIAddonMigration::is_old_instance_id_Valid() const{
    return m_old_instance_id_isValid;
}

QString OAIAddonMigration::getOldPlan() const {
    return m_old_plan;
}
void OAIAddonMigration::setOldPlan(const QString &old_plan) {
    m_old_plan = old_plan;
    m_old_plan_isSet = true;
}

bool OAIAddonMigration::is_old_plan_Set() const{
    return m_old_plan_isSet;
}

bool OAIAddonMigration::is_old_plan_Valid() const{
    return m_old_plan_isValid;
}

QString OAIAddonMigration::getOldRecipientHostname() const {
    return m_old_recipient_hostname;
}
void OAIAddonMigration::setOldRecipientHostname(const QString &old_recipient_hostname) {
    m_old_recipient_hostname = old_recipient_hostname;
    m_old_recipient_hostname_isSet = true;
}

bool OAIAddonMigration::is_old_recipient_hostname_Set() const{
    return m_old_recipient_hostname_isSet;
}

bool OAIAddonMigration::is_old_recipient_hostname_Valid() const{
    return m_old_recipient_hostname_isValid;
}

QString OAIAddonMigration::getOldZone() const {
    return m_old_zone;
}
void OAIAddonMigration::setOldZone(const QString &old_zone) {
    m_old_zone = old_zone;
    m_old_zone_isSet = true;
}

bool OAIAddonMigration::is_old_zone_Set() const{
    return m_old_zone_isSet;
}

bool OAIAddonMigration::is_old_zone_Valid() const{
    return m_old_zone_isValid;
}

double OAIAddonMigration::getPort() const {
    return m_port;
}
void OAIAddonMigration::setPort(const double &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIAddonMigration::is_port_Set() const{
    return m_port_isSet;
}

bool OAIAddonMigration::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIAddonMigration::getRequestDate() const {
    return m_request_date;
}
void OAIAddonMigration::setRequestDate(const QString &request_date) {
    m_request_date = request_date;
    m_request_date_isSet = true;
}

bool OAIAddonMigration::is_request_date_Set() const{
    return m_request_date_isSet;
}

bool OAIAddonMigration::is_request_date_Valid() const{
    return m_request_date_isValid;
}

QString OAIAddonMigration::getState() const {
    return m_state;
}
void OAIAddonMigration::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAddonMigration::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAddonMigration::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAddonMigration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dump_restore_finished_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dump_restore_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_state_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_cluster_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_recipient_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_cluster_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_recipient_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddonMigration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
