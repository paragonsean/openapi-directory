/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_can_pay_isSet = false;
    m_can_pay_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_validated_isSet = false;
    m_email_validated_isValid = false;

    m_has_password_isSet = false;
    m_has_password_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_oauth_apps_isSet = false;
    m_oauth_apps_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_preferred_mfa_isSet = false;
    m_preferred_mfa_isValid = false;

    m_zipcode_isSet = false;
    m_zipcode_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_can_pay_isValid = ::OpenAPI::fromJsonValue(m_can_pay, json[QString("canPay")]);
    m_can_pay_isSet = !json[QString("canPay")].isNull() && m_can_pay_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_validated_isValid = ::OpenAPI::fromJsonValue(m_email_validated, json[QString("emailValidated")]);
    m_email_validated_isSet = !json[QString("emailValidated")].isNull() && m_email_validated_isValid;

    m_has_password_isValid = ::OpenAPI::fromJsonValue(m_has_password, json[QString("hasPassword")]);
    m_has_password_isSet = !json[QString("hasPassword")].isNull() && m_has_password_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_oauth_apps_isValid = ::OpenAPI::fromJsonValue(m_oauth_apps, json[QString("oauthApps")]);
    m_oauth_apps_isSet = !json[QString("oauthApps")].isNull() && m_oauth_apps_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_preferred_mfa_isValid = ::OpenAPI::fromJsonValue(m_preferred_mfa, json[QString("preferredMFA")]);
    m_preferred_mfa_isSet = !json[QString("preferredMFA")].isNull() && m_preferred_mfa_isValid;

    m_zipcode_isValid = ::OpenAPI::fromJsonValue(m_zipcode, json[QString("zipcode")]);
    m_zipcode_isSet = !json[QString("zipcode")].isNull() && m_zipcode_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_can_pay_isSet) {
        obj.insert(QString("canPay"), ::OpenAPI::toJsonValue(m_can_pay));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_validated_isSet) {
        obj.insert(QString("emailValidated"), ::OpenAPI::toJsonValue(m_email_validated));
    }
    if (m_has_password_isSet) {
        obj.insert(QString("hasPassword"), ::OpenAPI::toJsonValue(m_has_password));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_oauth_apps.size() > 0) {
        obj.insert(QString("oauthApps"), ::OpenAPI::toJsonValue(m_oauth_apps));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_preferred_mfa_isSet) {
        obj.insert(QString("preferredMFA"), ::OpenAPI::toJsonValue(m_preferred_mfa));
    }
    if (m_zipcode_isSet) {
        obj.insert(QString("zipcode"), ::OpenAPI::toJsonValue(m_zipcode));
    }
    return obj;
}

QString OAIUser::getAddress() const {
    return m_address;
}
void OAIUser::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUser::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUser::is_address_Valid() const{
    return m_address_isValid;
}

bool OAIUser::isAdmin() const {
    return m_admin;
}
void OAIUser::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIUser::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIUser::is_admin_Valid() const{
    return m_admin_isValid;
}

QString OAIUser::getAvatar() const {
    return m_avatar;
}
void OAIUser::setAvatar(const QString &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIUser::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIUser::is_avatar_Valid() const{
    return m_avatar_isValid;
}

bool OAIUser::isCanPay() const {
    return m_can_pay;
}
void OAIUser::setCanPay(const bool &can_pay) {
    m_can_pay = can_pay;
    m_can_pay_isSet = true;
}

bool OAIUser::is_can_pay_Set() const{
    return m_can_pay_isSet;
}

bool OAIUser::is_can_pay_Valid() const{
    return m_can_pay_isValid;
}

QString OAIUser::getCity() const {
    return m_city;
}
void OAIUser::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIUser::is_city_Set() const{
    return m_city_isSet;
}

bool OAIUser::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIUser::getCountry() const {
    return m_country;
}
void OAIUser::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIUser::is_country_Set() const{
    return m_country_isSet;
}

bool OAIUser::is_country_Valid() const{
    return m_country_isValid;
}

qint64 OAIUser::getCreationDate() const {
    return m_creation_date;
}
void OAIUser::setCreationDate(const qint64 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIUser::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIUser::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIUser::isEmailValidated() const {
    return m_email_validated;
}
void OAIUser::setEmailValidated(const bool &email_validated) {
    m_email_validated = email_validated;
    m_email_validated_isSet = true;
}

bool OAIUser::is_email_validated_Set() const{
    return m_email_validated_isSet;
}

bool OAIUser::is_email_validated_Valid() const{
    return m_email_validated_isValid;
}

bool OAIUser::isHasPassword() const {
    return m_has_password;
}
void OAIUser::setHasPassword(const bool &has_password) {
    m_has_password = has_password;
    m_has_password_isSet = true;
}

bool OAIUser::is_has_password_Set() const{
    return m_has_password_isSet;
}

bool OAIUser::is_has_password_Valid() const{
    return m_has_password_isValid;
}

QString OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getLang() const {
    return m_lang;
}
void OAIUser::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAIUser::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAIUser::is_lang_Valid() const{
    return m_lang_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIUser::getOauthApps() const {
    return m_oauth_apps;
}
void OAIUser::setOauthApps(const QList<QString> &oauth_apps) {
    m_oauth_apps = oauth_apps;
    m_oauth_apps_isSet = true;
}

bool OAIUser::is_oauth_apps_Set() const{
    return m_oauth_apps_isSet;
}

bool OAIUser::is_oauth_apps_Valid() const{
    return m_oauth_apps_isValid;
}

QString OAIUser::getPhone() const {
    return m_phone;
}
void OAIUser::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIUser::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIUser::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIUser::getPreferredMfa() const {
    return m_preferred_mfa;
}
void OAIUser::setPreferredMfa(const QString &preferred_mfa) {
    m_preferred_mfa = preferred_mfa;
    m_preferred_mfa_isSet = true;
}

bool OAIUser::is_preferred_mfa_Set() const{
    return m_preferred_mfa_isSet;
}

bool OAIUser::is_preferred_mfa_Valid() const{
    return m_preferred_mfa_isValid;
}

QString OAIUser::getZipcode() const {
    return m_zipcode;
}
void OAIUser::setZipcode(const QString &zipcode) {
    m_zipcode = zipcode;
    m_zipcode_isSet = true;
}

bool OAIUser::is_zipcode_Set() const{
    return m_zipcode_isSet;
}

bool OAIUser::is_zipcode_Valid() const{
    return m_zipcode_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_validated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_apps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_mfa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipcode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_admin_isValid && m_avatar_isValid && m_can_pay_isValid && m_city_isValid && m_country_isValid && m_creation_date_isValid && m_email_isValid && m_email_validated_isValid && m_id_isValid && m_lang_isValid && m_name_isValid && m_oauth_apps_isValid && m_phone_isValid && m_zipcode_isValid && true;
}

} // namespace OpenAPI
