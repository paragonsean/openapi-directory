/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAddonsApi_H
#define OAI_OAIAddonsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddon.h"
#include "OAIAddonMigration.h"
#include "OAIApplication.h"
#include "OAIBody.h"
#include "OAIEnv.h"
#include "OAIListEnv.h"
#include "OAIObject.h"
#include "OAISso.h"
#include "OAISupernovaInstanceView.h"
#include "OAIWannabeAddon.h"
#include "OAIWannabePlan.h"
#include "OAI_organisations__id__addons__addonId__migrations_post_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAddonsApi : public QObject {
    Q_OBJECT

public:
    OAIAddonsApi(const int timeOut = 0);
    ~OAIAddonsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonsAddonIdTagsTag(const QString &id, const QString &tag, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonsAddonId(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdAddonsAddonId(const QString &id, const QString &app_id, const QString &addon_id);

    /**
    * @param[in]  tag QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteSelfAddonsAddonIdTagsTag(const QString &tag, const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteSelfAddonsAddonId(const QString &addon_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdAddonsAddonId(const QString &app_id, const QString &addon_id);

    /**
    * @param[in]  configuration_provider_id QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void getConfigProviderEnv(const QString &configuration_provider_id, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_provider_id QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void getConfigProvider(const QString &configuration_provider_id, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  matomo_id QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void getMatomo(const QString &matomo_id, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdApplications(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdEnv(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdTags(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonId(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdAddons(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdAddonsEnv(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdAddons(const QString &id, const QString &app_id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonIdApplications(const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonIdEnv(const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonIdSso(const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonIdTags(const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonId(const QString &addon_id);


    virtual void getSelfAddons();

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdAddonsEnv(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdAddons(const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  deployment_id QString [optional]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void organisationsIdAddonsAddonIdInstancesGet(const QString &id, const QString &addon_id, const ::OpenAPI::OptionalParam<QString> &deployment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdInstancesInstanceIdGet(const QString &instance_id, const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdMigrationsGet(const QString &id, const QString &addon_id);

    /**
    * @param[in]  migration_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdMigrationsMigrationIdGet(const QString &migration_id, const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_organisations__id__addons__addon_id__migrations_post_request OAI_organisations__id__addons__addonId__migrations_post_request [required]
    */
    virtual void organisationsIdAddonsAddonIdMigrationsPost(const QString &id, const QString &addon_id, const OAI_organisations__id__addons__addonId__migrations_post_request &oai_organisations__id__addons__addon_id__migrations_post_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdSsoGet(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void organisationsIdAddonsPreordersPost(const QString &id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void postOrganisationsIdAddons(const QString &id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void postOrganisationsIdApplicationsAppIdAddons(const QString &id, const QString &app_id, const OAIBody &oai_body);

    /**
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void postSelfAddons(const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void postSelfApplicationsAppIdAddons(const QString &app_id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putOrganisationsIdAddonsAddonIdTagsTag(const QString &id, const QString &tag, const QString &addon_id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void putOrganisationsIdAddonsAddonId(const QString &id, const QString &addon_id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_wannabe_plan OAIWannabePlan [required]
    */
    virtual void putSelfAddonsAddonIdPlan(const QString &addon_id, const OAIWannabePlan &oai_wannabe_plan);

    /**
    * @param[in]  tag QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putSelfAddonsAddonIdTagsTag(const QString &tag, const QString &addon_id, const OAIBody &oai_body);

    /**
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void putSelfAddonsAddonId(const QString &addon_id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void selfAddonsPreordersPost(const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  configuration_provider_id QString [required]
    * @param[in]  request_body QList<QJsonValue> [required]
    */
    virtual void updateConfigProviderEnv(const QString &configuration_provider_id, const QList<QJsonValue> &request_body);


    virtual void vendorAddonsPost();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteOrganisationsIdAddonsAddonIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfAddonsAddonIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void deleteSelfAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void getConfigProviderEnvCallback(OAIHttpRequestWorker *worker);
    void getConfigProviderCallback(OAIHttpRequestWorker *worker);
    void getMatomoCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdEnvCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdTagsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdAddonsEnvCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdEnvCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdSsoCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdTagsCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdAddonsEnvCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdInstancesGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdMigrationsGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdMigrationsPostCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdSsoGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsPreordersPostCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonsCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void postSelfAddonsCallback(OAIHttpRequestWorker *worker);
    void postSelfApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonsAddonIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdPlanCallback(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void selfAddonsPreordersPostCallback(OAIHttpRequestWorker *worker);
    void updateConfigProviderEnvCallback(OAIHttpRequestWorker *worker);
    void vendorAddonsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteOrganisationsIdAddonsAddonIdTagsTagSignal();
    void deleteOrganisationsIdAddonsAddonIdSignal();
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignal();
    void deleteSelfAddonsAddonIdTagsTagSignal();
    void deleteSelfAddonsAddonIdSignal();
    void deleteSelfApplicationsAppIdAddonsAddonIdSignal();
    void getConfigProviderEnvSignal(QList<QJsonValue> summary);
    void getConfigProviderSignal(QJsonValue summary);
    void getMatomoSignal(QJsonValue summary);
    void getOrganisationsIdAddonsAddonIdApplicationsSignal(QList<OAIApplication> summary);
    void getOrganisationsIdAddonsAddonIdEnvSignal(QList<OAIListEnv> summary);
    void getOrganisationsIdAddonsAddonIdTagsSignal(QList<QString> summary);
    void getOrganisationsIdAddonsAddonIdSignal(OAIAddon summary);
    void getOrganisationsIdAddonsSignal(QList<OAIAddon> summary);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignal(QList<OAIEnv> summary);
    void getOrganisationsIdApplicationsAppIdAddonsSignal(QList<OAIAddon> summary);
    void getSelfAddonsAddonIdApplicationsSignal(QList<OAIApplication> summary);
    void getSelfAddonsAddonIdEnvSignal(QList<OAIListEnv> summary);
    void getSelfAddonsAddonIdSsoSignal(OAISso summary);
    void getSelfAddonsAddonIdTagsSignal(QList<QString> summary);
    void getSelfAddonsAddonIdSignal(OAIAddon summary);
    void getSelfAddonsSignal(QList<OAIAddon> summary);
    void getSelfApplicationsAppIdAddonsEnvSignal(QList<OAIEnv> summary);
    void getSelfApplicationsAppIdAddonsSignal(QList<OAIAddon> summary);
    void organisationsIdAddonsAddonIdInstancesGetSignal(QList<OAISupernovaInstanceView> summary);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignal(OAISupernovaInstanceView summary);
    void organisationsIdAddonsAddonIdMigrationsGetSignal(QList<OAIAddonMigration> summary);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignal(OAIAddonMigration summary);
    void organisationsIdAddonsAddonIdMigrationsPostSignal(OAIObject summary);
    void organisationsIdAddonsAddonIdSsoGetSignal(OAISso summary);
    void organisationsIdAddonsPreordersPostSignal();
    void postOrganisationsIdAddonsSignal(OAIAddon summary);
    void postOrganisationsIdApplicationsAppIdAddonsSignal();
    void postSelfAddonsSignal();
    void postSelfApplicationsAppIdAddonsSignal();
    void putOrganisationsIdAddonsAddonIdTagsTagSignal();
    void putOrganisationsIdAddonsAddonIdSignal(OAIAddon summary);
    void putSelfAddonsAddonIdPlanSignal();
    void putSelfAddonsAddonIdTagsTagSignal();
    void putSelfAddonsAddonIdSignal();
    void selfAddonsPreordersPostSignal();
    void updateConfigProviderEnvSignal(QList<QJsonValue> summary);
    void vendorAddonsPostSignal();


    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfAddonsAddonIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void getConfigProviderEnvSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void getConfigProviderSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getMatomoSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdAddonsAddonIdEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIListEnv> summary);
    void getOrganisationsIdAddonsAddonIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getOrganisationsIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void getOrganisationsIdAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnv> summary);
    void getOrganisationsIdApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getSelfAddonsAddonIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getSelfAddonsAddonIdEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIListEnv> summary);
    void getSelfAddonsAddonIdSsoSignalFull(OAIHttpRequestWorker *worker, OAISso summary);
    void getSelfAddonsAddonIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getSelfAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void getSelfAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getSelfApplicationsAppIdAddonsEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnv> summary);
    void getSelfApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void organisationsIdAddonsAddonIdInstancesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISupernovaInstanceView> summary);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalFull(OAIHttpRequestWorker *worker, OAISupernovaInstanceView summary);
    void organisationsIdAddonsAddonIdMigrationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddonMigration> summary);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAddonMigration summary);
    void organisationsIdAddonsAddonIdMigrationsPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void organisationsIdAddonsAddonIdSsoGetSignalFull(OAIHttpRequestWorker *worker, OAISso summary);
    void organisationsIdAddonsPreordersPostSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonsSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void postOrganisationsIdApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker);
    void postSelfAddonsSignalFull(OAIHttpRequestWorker *worker);
    void postSelfApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonsAddonIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void putSelfAddonsAddonIdPlanSignalFull(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void selfAddonsPreordersPostSignalFull(OAIHttpRequestWorker *worker);
    void updateConfigProviderEnvSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void vendorAddonsPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdTagsTagSignalError() instead")
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdSignalError() instead")
    void deleteOrganisationsIdAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfAddonsAddonIdTagsTagSignalError() instead")
    void deleteSelfAddonsAddonIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfAddonsAddonIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfAddonsAddonIdSignalError() instead")
    void deleteSelfAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdAddonsAddonIdSignalError() instead")
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigProviderEnvSignalError() instead")
    void getConfigProviderEnvSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigProviderEnvSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigProviderSignalError() instead")
    void getConfigProviderSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigProviderSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatomoSignalError() instead")
    void getMatomoSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatomoSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdApplicationsSignalError() instead")
    void getOrganisationsIdAddonsAddonIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdEnvSignalError() instead")
    void getOrganisationsIdAddonsAddonIdEnvSignalE(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdEnvSignalError(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdTagsSignalError() instead")
    void getOrganisationsIdAddonsAddonIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdSignalError() instead")
    void getOrganisationsIdAddonsAddonIdSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsSignalError() instead")
    void getOrganisationsIdAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsEnvSignalError() instead")
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalE(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalError(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdApplicationsSignalError() instead")
    void getSelfAddonsAddonIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdEnvSignalError() instead")
    void getSelfAddonsAddonIdEnvSignalE(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdEnvSignalError(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdSsoSignalError() instead")
    void getSelfAddonsAddonIdSsoSignalE(OAISso summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdSsoSignalError(OAISso summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdTagsSignalError() instead")
    void getSelfAddonsAddonIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdSignalError() instead")
    void getSelfAddonsAddonIdSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsSignalError() instead")
    void getSelfAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsEnvSignalError() instead")
    void getSelfApplicationsAppIdAddonsEnvSignalE(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsEnvSignalError(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsSignalError() instead")
    void getSelfApplicationsAppIdAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesGetSignalError() instead")
    void organisationsIdAddonsAddonIdInstancesGetSignalE(QList<OAISupernovaInstanceView> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesGetSignalError(QList<OAISupernovaInstanceView> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalError() instead")
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalE(OAISupernovaInstanceView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalError(OAISupernovaInstanceView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsGetSignalError() instead")
    void organisationsIdAddonsAddonIdMigrationsGetSignalE(QList<OAIAddonMigration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsGetSignalError(QList<OAIAddonMigration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalError() instead")
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalE(OAIAddonMigration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalError(OAIAddonMigration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsPostSignalError() instead")
    void organisationsIdAddonsAddonIdMigrationsPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdSsoGetSignalError() instead")
    void organisationsIdAddonsAddonIdSsoGetSignalE(OAISso summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdSsoGetSignalError(OAISso summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsPreordersPostSignalError() instead")
    void organisationsIdAddonsPreordersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsPreordersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonsSignalError() instead")
    void postOrganisationsIdAddonsSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonsSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdAddonsSignalError() instead")
    void postOrganisationsIdApplicationsAppIdAddonsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdAddonsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfAddonsSignalError() instead")
    void postSelfAddonsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfAddonsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsAppIdAddonsSignalError() instead")
    void postSelfApplicationsAppIdAddonsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsAppIdAddonsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdTagsTagSignalError() instead")
    void putOrganisationsIdAddonsAddonIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdSignalError() instead")
    void putOrganisationsIdAddonsAddonIdSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdPlanSignalError() instead")
    void putSelfAddonsAddonIdPlanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdPlanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdTagsTagSignalError() instead")
    void putSelfAddonsAddonIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdSignalError() instead")
    void putSelfAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfAddonsPreordersPostSignalError() instead")
    void selfAddonsPreordersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfAddonsPreordersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigProviderEnvSignalError() instead")
    void updateConfigProviderEnvSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigProviderEnvSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAddonsPostSignalError() instead")
    void vendorAddonsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAddonsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull() instead")
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdSignalErrorFull() instead")
    void deleteOrganisationsIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfAddonsAddonIdTagsTagSignalErrorFull() instead")
    void deleteSelfAddonsAddonIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfAddonsAddonIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfAddonsAddonIdSignalErrorFull() instead")
    void deleteSelfAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdAddonsAddonIdSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigProviderEnvSignalErrorFull() instead")
    void getConfigProviderEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigProviderEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigProviderSignalErrorFull() instead")
    void getConfigProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatomoSignalErrorFull() instead")
    void getMatomoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatomoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdApplicationsSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdEnvSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdTagsSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsSignalErrorFull() instead")
    void getOrganisationsIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsEnvSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdApplicationsSignalErrorFull() instead")
    void getSelfAddonsAddonIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdEnvSignalErrorFull() instead")
    void getSelfAddonsAddonIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdSsoSignalErrorFull() instead")
    void getSelfAddonsAddonIdSsoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdSsoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdTagsSignalErrorFull() instead")
    void getSelfAddonsAddonIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdSignalErrorFull() instead")
    void getSelfAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsSignalErrorFull() instead")
    void getSelfAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsEnvSignalErrorFull() instead")
    void getSelfApplicationsAppIdAddonsEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsSignalErrorFull() instead")
    void getSelfApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdInstancesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdMigrationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsPostSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdMigrationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdSsoGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdSsoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdSsoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsPreordersPostSignalErrorFull() instead")
    void organisationsIdAddonsPreordersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsPreordersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonsSignalErrorFull() instead")
    void postOrganisationsIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdAddonsSignalErrorFull() instead")
    void postOrganisationsIdApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfAddonsSignalErrorFull() instead")
    void postSelfAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsAppIdAddonsSignalErrorFull() instead")
    void postSelfApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull() instead")
    void putOrganisationsIdAddonsAddonIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdSignalErrorFull() instead")
    void putOrganisationsIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdPlanSignalErrorFull() instead")
    void putSelfAddonsAddonIdPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdTagsTagSignalErrorFull() instead")
    void putSelfAddonsAddonIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdSignalErrorFull() instead")
    void putSelfAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfAddonsPreordersPostSignalErrorFull() instead")
    void selfAddonsPreordersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfAddonsPreordersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigProviderEnvSignalErrorFull() instead")
    void updateConfigProviderEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigProviderEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAddonsPostSignalErrorFull() instead")
    void vendorAddonsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAddonsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
