/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOauthApi_H
#define OAI_OAIOauthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRights.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOauthApi : public QObject {
    Q_OBJECT

public:
    OAIOauthApi(const int timeOut = 0);
    ~OAIOauthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oauth_token QString [optional]
    * @param[in]  cookie QString [optional]
    */
    virtual void getOauthAuthorize(const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cookie = ::OpenAPI::OptionalParam<QString>());


    virtual void getOauthRights();

    /**
    * @param[in]  oauth_consumer_key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  oauth_signature_method QString [optional]
    * @param[in]  oauth_signature QString [optional]
    * @param[in]  oauth_timestamp QString [optional]
    * @param[in]  oauth_nonce QString [optional]
    * @param[in]  oauth_version QString [optional]
    * @param[in]  oauth_verifier QString [optional]
    * @param[in]  oauth_callback QString [optional]
    * @param[in]  oauth_token_secret QString [optional]
    * @param[in]  oauth_callback_confirmed QString [optional]
    */
    virtual void oauthAccessTokenQueryPost(const ::OpenAPI::OptionalParam<QString> &oauth_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_nonce = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_verifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback_confirmed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oauth_consumer_key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  oauth_signature_method QString [optional]
    * @param[in]  oauth_signature QString [optional]
    * @param[in]  oauth_timestamp QString [optional]
    * @param[in]  oauth_nonce QString [optional]
    * @param[in]  oauth_version QString [optional]
    * @param[in]  oauth_verifier QString [optional]
    * @param[in]  oauth_callback QString [optional]
    * @param[in]  oauth_token_secret QString [optional]
    * @param[in]  oauth_callback_confirmed QString [optional]
    */
    virtual void oauthRequestTokenQueryPost(const ::OpenAPI::OptionalParam<QString> &oauth_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_nonce = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_verifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback_confirmed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oauth_consumer_key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  oauth_signature_method QString [optional]
    * @param[in]  oauth_signature QString [optional]
    * @param[in]  oauth_timestamp QString [optional]
    * @param[in]  oauth_nonce QString [optional]
    * @param[in]  oauth_version QString [optional]
    * @param[in]  oauth_verifier QString [optional]
    * @param[in]  oauth_callback QString [optional]
    * @param[in]  oauth_token_secret QString [optional]
    * @param[in]  oauth_callback_confirmed QString [optional]
    */
    virtual void postOauthAccessToken(const ::OpenAPI::OptionalParam<QString> &oauth_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_nonce = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_verifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback_confirmed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  almighty QString [optional]
    * @param[in]  access_organisations QString [optional]
    * @param[in]  manage_organisations QString [optional]
    * @param[in]  manage_organisations_services QString [optional]
    * @param[in]  manage_organisations_applications QString [optional]
    * @param[in]  manage_organisations_members QString [optional]
    * @param[in]  access_organisations_bills QString [optional]
    * @param[in]  access_organisations_credit_count QString [optional]
    * @param[in]  access_organisations_consumption_statistics QString [optional]
    * @param[in]  access_personal_information QString [optional]
    * @param[in]  manage_personal_information QString [optional]
    * @param[in]  manage_ssh_keys QString [optional]
    * @param[in]  manage_services QString [optional]
    * @param[in]  manage_applications QString [optional]
    * @param[in]  access_bills QString [optional]
    * @param[in]  access_credit_count QString [optional]
    * @param[in]  access_consumption_statistics QString [optional]
    * @param[in]  cookie QString [optional]
    */
    virtual void postOauthAuthorize(const ::OpenAPI::OptionalParam<QString> &almighty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_organisations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_organisations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_organisations_services = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_organisations_applications = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_organisations_members = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_organisations_bills = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_organisations_credit_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_organisations_consumption_statistics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_personal_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_personal_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_ssh_keys = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_services = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_applications = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_bills = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_credit_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_consumption_statistics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cookie = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oauth_consumer_key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  oauth_signature_method QString [optional]
    * @param[in]  oauth_signature QString [optional]
    * @param[in]  oauth_timestamp QString [optional]
    * @param[in]  oauth_nonce QString [optional]
    * @param[in]  oauth_version QString [optional]
    * @param[in]  oauth_verifier QString [optional]
    * @param[in]  oauth_callback QString [optional]
    * @param[in]  oauth_token_secret QString [optional]
    * @param[in]  oauth_callback_confirmed QString [optional]
    */
    virtual void postOauthRequestToken(const ::OpenAPI::OptionalParam<QString> &oauth_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_nonce = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_verifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback_confirmed = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getOauthAuthorizeCallback(OAIHttpRequestWorker *worker);
    void getOauthRightsCallback(OAIHttpRequestWorker *worker);
    void oauthAccessTokenQueryPostCallback(OAIHttpRequestWorker *worker);
    void oauthRequestTokenQueryPostCallback(OAIHttpRequestWorker *worker);
    void postOauthAccessTokenCallback(OAIHttpRequestWorker *worker);
    void postOauthAuthorizeCallback(OAIHttpRequestWorker *worker);
    void postOauthRequestTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getOauthAuthorizeSignal();
    void getOauthRightsSignal(OAIRights summary);
    void oauthAccessTokenQueryPostSignal();
    void oauthRequestTokenQueryPostSignal();
    void postOauthAccessTokenSignal();
    void postOauthAuthorizeSignal();
    void postOauthRequestTokenSignal();


    void getOauthAuthorizeSignalFull(OAIHttpRequestWorker *worker);
    void getOauthRightsSignalFull(OAIHttpRequestWorker *worker, OAIRights summary);
    void oauthAccessTokenQueryPostSignalFull(OAIHttpRequestWorker *worker);
    void oauthRequestTokenQueryPostSignalFull(OAIHttpRequestWorker *worker);
    void postOauthAccessTokenSignalFull(OAIHttpRequestWorker *worker);
    void postOauthAuthorizeSignalFull(OAIHttpRequestWorker *worker);
    void postOauthRequestTokenSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getOauthAuthorizeSignalError() instead")
    void getOauthAuthorizeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOauthAuthorizeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOauthRightsSignalError() instead")
    void getOauthRightsSignalE(OAIRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOauthRightsSignalError(OAIRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAccessTokenQueryPostSignalError() instead")
    void oauthAccessTokenQueryPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAccessTokenQueryPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthRequestTokenQueryPostSignalError() instead")
    void oauthRequestTokenQueryPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void oauthRequestTokenQueryPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthAccessTokenSignalError() instead")
    void postOauthAccessTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthAccessTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthAuthorizeSignalError() instead")
    void postOauthAuthorizeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthAuthorizeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthRequestTokenSignalError() instead")
    void postOauthRequestTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthRequestTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getOauthAuthorizeSignalErrorFull() instead")
    void getOauthAuthorizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOauthAuthorizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOauthRightsSignalErrorFull() instead")
    void getOauthRightsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOauthRightsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAccessTokenQueryPostSignalErrorFull() instead")
    void oauthAccessTokenQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAccessTokenQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthRequestTokenQueryPostSignalErrorFull() instead")
    void oauthRequestTokenQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthRequestTokenQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthAccessTokenSignalErrorFull() instead")
    void postOauthAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthAuthorizeSignalErrorFull() instead")
    void postOauthAuthorizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthAuthorizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthRequestTokenSignalErrorFull() instead")
    void postOauthRequestTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthRequestTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
