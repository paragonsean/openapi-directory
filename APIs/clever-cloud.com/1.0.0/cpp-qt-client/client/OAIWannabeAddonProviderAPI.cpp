/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWannabeAddonProviderAPI.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWannabeAddonProviderAPI::OAIWannabeAddonProviderAPI(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWannabeAddonProviderAPI::OAIWannabeAddonProviderAPI() {
    this->initializeModel();
}

OAIWannabeAddonProviderAPI::~OAIWannabeAddonProviderAPI() {}

void OAIWannabeAddonProviderAPI::initializeModel() {

    m_config_vars_isSet = false;
    m_config_vars_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_production_isSet = false;
    m_production_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_sso_salt_isSet = false;
    m_sso_salt_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;
}

void OAIWannabeAddonProviderAPI::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWannabeAddonProviderAPI::fromJsonObject(QJsonObject json) {

    m_config_vars_isValid = ::OpenAPI::fromJsonValue(m_config_vars, json[QString("config_vars")]);
    m_config_vars_isSet = !json[QString("config_vars")].isNull() && m_config_vars_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_production_isValid = ::OpenAPI::fromJsonValue(m_production, json[QString("production")]);
    m_production_isSet = !json[QString("production")].isNull() && m_production_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_sso_salt_isValid = ::OpenAPI::fromJsonValue(m_sso_salt, json[QString("sso_salt")]);
    m_sso_salt_isSet = !json[QString("sso_salt")].isNull() && m_sso_salt_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;
}

QString OAIWannabeAddonProviderAPI::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWannabeAddonProviderAPI::asJsonObject() const {
    QJsonObject obj;
    if (m_config_vars.size() > 0) {
        obj.insert(QString("config_vars"), ::OpenAPI::toJsonValue(m_config_vars));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_production.isSet()) {
        obj.insert(QString("production"), ::OpenAPI::toJsonValue(m_production));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_sso_salt_isSet) {
        obj.insert(QString("sso_salt"), ::OpenAPI::toJsonValue(m_sso_salt));
    }
    if (m_test.isSet()) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    return obj;
}

QList<QString> OAIWannabeAddonProviderAPI::getConfigVars() const {
    return m_config_vars;
}
void OAIWannabeAddonProviderAPI::setConfigVars(const QList<QString> &config_vars) {
    m_config_vars = config_vars;
    m_config_vars_isSet = true;
}

bool OAIWannabeAddonProviderAPI::is_config_vars_Set() const{
    return m_config_vars_isSet;
}

bool OAIWannabeAddonProviderAPI::is_config_vars_Valid() const{
    return m_config_vars_isValid;
}

QString OAIWannabeAddonProviderAPI::getPassword() const {
    return m_password;
}
void OAIWannabeAddonProviderAPI::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIWannabeAddonProviderAPI::is_password_Set() const{
    return m_password_isSet;
}

bool OAIWannabeAddonProviderAPI::is_password_Valid() const{
    return m_password_isValid;
}

OAIWannabeAddonProviderAPIUrl OAIWannabeAddonProviderAPI::getProduction() const {
    return m_production;
}
void OAIWannabeAddonProviderAPI::setProduction(const OAIWannabeAddonProviderAPIUrl &production) {
    m_production = production;
    m_production_isSet = true;
}

bool OAIWannabeAddonProviderAPI::is_production_Set() const{
    return m_production_isSet;
}

bool OAIWannabeAddonProviderAPI::is_production_Valid() const{
    return m_production_isValid;
}

QList<QString> OAIWannabeAddonProviderAPI::getRegions() const {
    return m_regions;
}
void OAIWannabeAddonProviderAPI::setRegions(const QList<QString> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIWannabeAddonProviderAPI::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIWannabeAddonProviderAPI::is_regions_Valid() const{
    return m_regions_isValid;
}

QString OAIWannabeAddonProviderAPI::getSsoSalt() const {
    return m_sso_salt;
}
void OAIWannabeAddonProviderAPI::setSsoSalt(const QString &sso_salt) {
    m_sso_salt = sso_salt;
    m_sso_salt_isSet = true;
}

bool OAIWannabeAddonProviderAPI::is_sso_salt_Set() const{
    return m_sso_salt_isSet;
}

bool OAIWannabeAddonProviderAPI::is_sso_salt_Valid() const{
    return m_sso_salt_isValid;
}

OAIWannabeAddonProviderAPIUrl OAIWannabeAddonProviderAPI::getTest() const {
    return m_test;
}
void OAIWannabeAddonProviderAPI::setTest(const OAIWannabeAddonProviderAPIUrl &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIWannabeAddonProviderAPI::is_test_Set() const{
    return m_test_isSet;
}

bool OAIWannabeAddonProviderAPI::is_test_Valid() const{
    return m_test_isValid;
}

bool OAIWannabeAddonProviderAPI::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_vars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_production.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWannabeAddonProviderAPI::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_config_vars_isValid && m_password_isValid && m_sso_salt_isValid && true;
}

} // namespace OpenAPI
