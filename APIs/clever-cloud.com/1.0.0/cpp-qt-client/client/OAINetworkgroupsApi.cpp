/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkgroupsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAINetworkgroupsApi::OAINetworkgroupsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAINetworkgroupsApi::~OAINetworkgroupsApi() {
}

void OAINetworkgroupsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.clever-cloud.com/v2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createNetworkGroupExternalPeer", defaultConf);
    _serverIndices.insert("createNetworkGroupExternalPeer", 0);
    _serverConfigs.insert("createNetworkGroupMember", defaultConf);
    _serverIndices.insert("createNetworkGroupMember", 0);
    _serverConfigs.insert("createNetworkGroup", defaultConf);
    _serverIndices.insert("createNetworkGroup", 0);
    _serverConfigs.insert("deleteNetworkGroupExternalPeer", defaultConf);
    _serverIndices.insert("deleteNetworkGroupExternalPeer", 0);
    _serverConfigs.insert("deleteNetworkGroupMember", defaultConf);
    _serverIndices.insert("deleteNetworkGroupMember", 0);
    _serverConfigs.insert("deleteNetworkGroupPeer", defaultConf);
    _serverIndices.insert("deleteNetworkGroupPeer", 0);
    _serverConfigs.insert("deleteNetworkGroup", defaultConf);
    _serverIndices.insert("deleteNetworkGroup", 0);
    _serverConfigs.insert("getNetworkGroupMember", defaultConf);
    _serverIndices.insert("getNetworkGroupMember", 0);
    _serverConfigs.insert("getNetworkGroupPeer", defaultConf);
    _serverIndices.insert("getNetworkGroupPeer", 0);
    _serverConfigs.insert("getNetworkGroupStream", defaultConf);
    _serverIndices.insert("getNetworkGroupStream", 0);
    _serverConfigs.insert("getNetworkGroupWireGuardConfigurationStream", defaultConf);
    _serverIndices.insert("getNetworkGroupWireGuardConfigurationStream", 0);
    _serverConfigs.insert("getNetworkGroupWireGuardConfiguration", defaultConf);
    _serverIndices.insert("getNetworkGroupWireGuardConfiguration", 0);
    _serverConfigs.insert("getNetworkGroup", defaultConf);
    _serverIndices.insert("getNetworkGroup", 0);
    _serverConfigs.insert("listNetworkGroupMembers", defaultConf);
    _serverIndices.insert("listNetworkGroupMembers", 0);
    _serverConfigs.insert("listNetworkGroupPeers", defaultConf);
    _serverIndices.insert("listNetworkGroupPeers", 0);
    _serverConfigs.insert("listNetworkGroups", defaultConf);
    _serverIndices.insert("listNetworkGroups", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAINetworkgroupsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAINetworkgroupsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAINetworkgroupsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAINetworkgroupsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAINetworkgroupsApi::setUsername(const QString &username) {
    _username = username;
}

void OAINetworkgroupsApi::setPassword(const QString &password) {
    _password = password;
}


void OAINetworkgroupsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAINetworkgroupsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAINetworkgroupsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAINetworkgroupsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAINetworkgroupsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAINetworkgroupsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAINetworkgroupsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAINetworkgroupsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAINetworkgroupsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAINetworkgroupsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAINetworkgroupsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAINetworkgroupsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAINetworkgroupsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAINetworkgroupsApi::createNetworkGroupExternalPeer(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["createNetworkGroupExternalPeer"][_serverIndices.value("createNetworkGroupExternalPeer")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::createNetworkGroupExternalPeerCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::createNetworkGroupExternalPeerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QJsonValue output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createNetworkGroupExternalPeerSignal(output);
        Q_EMIT createNetworkGroupExternalPeerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createNetworkGroupExternalPeerSignalE(output, error_type, error_str);
        Q_EMIT createNetworkGroupExternalPeerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createNetworkGroupExternalPeerSignalError(output, error_type, error_str);
        Q_EMIT createNetworkGroupExternalPeerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::createNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<OAISchema2> &oai_schema2) {
    QString fullPath = QString(_serverConfigs["createNetworkGroupMember"][_serverIndices.value("createNetworkGroupMember")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_schema2.hasValue()){

        
        QByteArray output = oai_schema2.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::createNetworkGroupMemberCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::createNetworkGroupMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createNetworkGroupMemberSignal();
        Q_EMIT createNetworkGroupMemberSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createNetworkGroupMemberSignalE(error_type, error_str);
        Q_EMIT createNetworkGroupMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createNetworkGroupMemberSignalError(error_type, error_str);
        Q_EMIT createNetworkGroupMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::createNetworkGroup(const QString &owner_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["createNetworkGroup"][_serverIndices.value("createNetworkGroup")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::createNetworkGroupCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::createNetworkGroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QJsonValue output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createNetworkGroupSignal(output);
        Q_EMIT createNetworkGroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createNetworkGroupSignalE(output, error_type, error_str);
        Q_EMIT createNetworkGroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createNetworkGroupSignalError(output, error_type, error_str);
        Q_EMIT createNetworkGroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::deleteNetworkGroupExternalPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["deleteNetworkGroupExternalPeer"][_serverIndices.value("deleteNetworkGroupExternalPeer")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers/{peerId}");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    
    {
        QString peer_idPathParam("{");
        peer_idPathParam.append("peerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "peerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"peerId"+pathSuffix : pathPrefix;
        fullPath.replace(peer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(peer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::deleteNetworkGroupExternalPeerCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::deleteNetworkGroupExternalPeerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteNetworkGroupExternalPeerSignal();
        Q_EMIT deleteNetworkGroupExternalPeerSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteNetworkGroupExternalPeerSignalE(error_type, error_str);
        Q_EMIT deleteNetworkGroupExternalPeerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteNetworkGroupExternalPeerSignalError(error_type, error_str);
        Q_EMIT deleteNetworkGroupExternalPeerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::deleteNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const QString &member_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["deleteNetworkGroupMember"][_serverIndices.value("deleteNetworkGroupMember")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    
    {
        QString member_idPathParam("{");
        member_idPathParam.append("memberId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "memberId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"memberId"+pathSuffix : pathPrefix;
        fullPath.replace(member_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(member_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::deleteNetworkGroupMemberCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::deleteNetworkGroupMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteNetworkGroupMemberSignal();
        Q_EMIT deleteNetworkGroupMemberSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteNetworkGroupMemberSignalE(error_type, error_str);
        Q_EMIT deleteNetworkGroupMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteNetworkGroupMemberSignalError(error_type, error_str);
        Q_EMIT deleteNetworkGroupMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::deleteNetworkGroupPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["deleteNetworkGroupPeer"][_serverIndices.value("deleteNetworkGroupPeer")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    
    {
        QString peer_idPathParam("{");
        peer_idPathParam.append("peerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "peerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"peerId"+pathSuffix : pathPrefix;
        fullPath.replace(peer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(peer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::deleteNetworkGroupPeerCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::deleteNetworkGroupPeerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteNetworkGroupPeerSignal();
        Q_EMIT deleteNetworkGroupPeerSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteNetworkGroupPeerSignalE(error_type, error_str);
        Q_EMIT deleteNetworkGroupPeerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteNetworkGroupPeerSignalError(error_type, error_str);
        Q_EMIT deleteNetworkGroupPeerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::deleteNetworkGroup(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["deleteNetworkGroup"][_serverIndices.value("deleteNetworkGroup")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::deleteNetworkGroupCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::deleteNetworkGroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteNetworkGroupSignal();
        Q_EMIT deleteNetworkGroupSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteNetworkGroupSignalE(error_type, error_str);
        Q_EMIT deleteNetworkGroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteNetworkGroupSignalError(error_type, error_str);
        Q_EMIT deleteNetworkGroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::getNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const QString &member_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["getNetworkGroupMember"][_serverIndices.value("getNetworkGroupMember")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    
    {
        QString member_idPathParam("{");
        member_idPathParam.append("memberId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "memberId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"memberId"+pathSuffix : pathPrefix;
        fullPath.replace(member_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(member_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::getNetworkGroupMemberCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::getNetworkGroupMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISchema1 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkGroupMemberSignal(output);
        Q_EMIT getNetworkGroupMemberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkGroupMemberSignalE(output, error_type, error_str);
        Q_EMIT getNetworkGroupMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkGroupMemberSignalError(output, error_type, error_str);
        Q_EMIT getNetworkGroupMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::getNetworkGroupPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["getNetworkGroupPeer"][_serverIndices.value("getNetworkGroupPeer")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    
    {
        QString peer_idPathParam("{");
        peer_idPathParam.append("peerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "peerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"peerId"+pathSuffix : pathPrefix;
        fullPath.replace(peer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(peer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::getNetworkGroupPeerCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::getNetworkGroupPeerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QJsonValue output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkGroupPeerSignal(output);
        Q_EMIT getNetworkGroupPeerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkGroupPeerSignalE(output, error_type, error_str);
        Q_EMIT getNetworkGroupPeerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkGroupPeerSignalError(output, error_type, error_str);
        Q_EMIT getNetworkGroupPeerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::getNetworkGroupStream(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["getNetworkGroupStream"][_serverIndices.value("getNetworkGroupStream")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/stream");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::getNetworkGroupStreamCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::getNetworkGroupStreamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QJsonValue output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkGroupStreamSignal(output);
        Q_EMIT getNetworkGroupStreamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkGroupStreamSignalE(output, error_type, error_str);
        Q_EMIT getNetworkGroupStreamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkGroupStreamSignalError(output, error_type, error_str);
        Q_EMIT getNetworkGroupStreamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::getNetworkGroupWireGuardConfigurationStream(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["getNetworkGroupWireGuardConfigurationStream"][_serverIndices.value("getNetworkGroupWireGuardConfigurationStream")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration/stream");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    
    {
        QString peer_idPathParam("{");
        peer_idPathParam.append("peerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "peerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"peerId"+pathSuffix : pathPrefix;
        fullPath.replace(peer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(peer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::getNetworkGroupWireGuardConfigurationStreamCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::getNetworkGroupWireGuardConfigurationStreamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QJsonValue output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkGroupWireGuardConfigurationStreamSignal(output);
        Q_EMIT getNetworkGroupWireGuardConfigurationStreamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkGroupWireGuardConfigurationStreamSignalE(output, error_type, error_str);
        Q_EMIT getNetworkGroupWireGuardConfigurationStreamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkGroupWireGuardConfigurationStreamSignalError(output, error_type, error_str);
        Q_EMIT getNetworkGroupWireGuardConfigurationStreamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::getNetworkGroupWireGuardConfiguration(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["getNetworkGroupWireGuardConfiguration"][_serverIndices.value("getNetworkGroupWireGuardConfiguration")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    
    {
        QString peer_idPathParam("{");
        peer_idPathParam.append("peerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "peerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"peerId"+pathSuffix : pathPrefix;
        fullPath.replace(peer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(peer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::getNetworkGroupWireGuardConfigurationCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::getNetworkGroupWireGuardConfigurationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QJsonValue output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkGroupWireGuardConfigurationSignal(output);
        Q_EMIT getNetworkGroupWireGuardConfigurationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkGroupWireGuardConfigurationSignalE(output, error_type, error_str);
        Q_EMIT getNetworkGroupWireGuardConfigurationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkGroupWireGuardConfigurationSignalError(output, error_type, error_str);
        Q_EMIT getNetworkGroupWireGuardConfigurationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::getNetworkGroup(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["getNetworkGroup"][_serverIndices.value("getNetworkGroup")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::getNetworkGroupCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::getNetworkGroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QJsonValue output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getNetworkGroupSignal(output);
        Q_EMIT getNetworkGroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getNetworkGroupSignalE(output, error_type, error_str);
        Q_EMIT getNetworkGroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getNetworkGroupSignalError(output, error_type, error_str);
        Q_EMIT getNetworkGroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::listNetworkGroupMembers(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["listNetworkGroupMembers"][_serverIndices.value("listNetworkGroupMembers")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::listNetworkGroupMembersCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::listNetworkGroupMembersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISchema1> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISchema1 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listNetworkGroupMembersSignal(output);
        Q_EMIT listNetworkGroupMembersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listNetworkGroupMembersSignalE(output, error_type, error_str);
        Q_EMIT listNetworkGroupMembersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listNetworkGroupMembersSignalError(output, error_type, error_str);
        Q_EMIT listNetworkGroupMembersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::listNetworkGroupPeers(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["listNetworkGroupPeers"][_serverIndices.value("listNetworkGroupPeers")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    
    {
        QString network_group_idPathParam("{");
        network_group_idPathParam.append("networkGroupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "networkGroupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"networkGroupId"+pathSuffix : pathPrefix;
        fullPath.replace(network_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(network_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::listNetworkGroupPeersCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::listNetworkGroupPeersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QJsonValue> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QJsonValue val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listNetworkGroupPeersSignal(output);
        Q_EMIT listNetworkGroupPeersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listNetworkGroupPeersSignalE(output, error_type, error_str);
        Q_EMIT listNetworkGroupPeersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listNetworkGroupPeersSignalError(output, error_type, error_str);
        Q_EMIT listNetworkGroupPeersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::listNetworkGroups(const QString &owner_id, const ::OpenAPI::OptionalParam<QJsonValue> &body) {
    QString fullPath = QString(_serverConfigs["listNetworkGroups"][_serverIndices.value("listNetworkGroups")].URL()+"/v4/networkgroups/organisations/{ownerId}/networkgroups");
    
    
    {
        QString owner_idPathParam("{");
        owner_idPathParam.append("ownerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ownerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ownerId"+pathSuffix : pathPrefix;
        fullPath.replace(owner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINetworkgroupsApi::listNetworkGroupsCallback);
    connect(this, &OAINetworkgroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINetworkgroupsApi::listNetworkGroupsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QJsonValue> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QJsonValue val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listNetworkGroupsSignal(output);
        Q_EMIT listNetworkGroupsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listNetworkGroupsSignalE(output, error_type, error_str);
        Q_EMIT listNetworkGroupsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listNetworkGroupsSignalError(output, error_type, error_str);
        Q_EMIT listNetworkGroupsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINetworkgroupsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
