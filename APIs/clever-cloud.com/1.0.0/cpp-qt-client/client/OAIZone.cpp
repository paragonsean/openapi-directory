/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZone::OAIZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZone::OAIZone() {
    this->initializeModel();
}

OAIZone::~OAIZone() {}

void OAIZone::initializeModel() {

    m_corresponding_region_isSet = false;
    m_corresponding_region_isValid = false;

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZone::fromJsonObject(QJsonObject json) {

    m_corresponding_region_isValid = ::OpenAPI::fromJsonValue(m_corresponding_region, json[QString("correspondingRegion")]);
    m_corresponding_region_isSet = !json[QString("correspondingRegion")].isNull() && m_corresponding_region_isValid;

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZone::asJsonObject() const {
    QJsonObject obj;
    if (m_corresponding_region_isSet) {
        obj.insert(QString("correspondingRegion"), ::OpenAPI::toJsonValue(m_corresponding_region));
    }
    if (m_internal_isSet) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIZone::getCorrespondingRegion() const {
    return m_corresponding_region;
}
void OAIZone::setCorrespondingRegion(const QString &corresponding_region) {
    m_corresponding_region = corresponding_region;
    m_corresponding_region_isSet = true;
}

bool OAIZone::is_corresponding_region_Set() const{
    return m_corresponding_region_isSet;
}

bool OAIZone::is_corresponding_region_Valid() const{
    return m_corresponding_region_isValid;
}

bool OAIZone::isInternal() const {
    return m_internal;
}
void OAIZone::setInternal(const bool &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAIZone::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAIZone::is_internal_Valid() const{
    return m_internal_isValid;
}

QString OAIZone::getName() const {
    return m_name;
}
void OAIZone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIZone::is_name_Set() const{
    return m_name_isSet;
}

bool OAIZone::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corresponding_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_corresponding_region_isValid && m_internal_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
