/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlavor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlavor::OAIFlavor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlavor::OAIFlavor() {
    this->initializeModel();
}

OAIFlavor::~OAIFlavor() {}

void OAIFlavor::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_cpus_isSet = false;
    m_cpus_isValid = false;

    m_disk_isSet = false;
    m_disk_isValid = false;

    m_mem_isSet = false;
    m_mem_isValid = false;

    m_microservice_isSet = false;
    m_microservice_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nice_isSet = false;
    m_nice_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAIFlavor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlavor::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_cpus_isValid = ::OpenAPI::fromJsonValue(m_cpus, json[QString("cpus")]);
    m_cpus_isSet = !json[QString("cpus")].isNull() && m_cpus_isValid;

    m_disk_isValid = ::OpenAPI::fromJsonValue(m_disk, json[QString("disk")]);
    m_disk_isSet = !json[QString("disk")].isNull() && m_disk_isValid;

    m_mem_isValid = ::OpenAPI::fromJsonValue(m_mem, json[QString("mem")]);
    m_mem_isSet = !json[QString("mem")].isNull() && m_mem_isValid;

    m_microservice_isValid = ::OpenAPI::fromJsonValue(m_microservice, json[QString("microservice")]);
    m_microservice_isSet = !json[QString("microservice")].isNull() && m_microservice_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nice_isValid = ::OpenAPI::fromJsonValue(m_nice, json[QString("nice")]);
    m_nice_isSet = !json[QString("nice")].isNull() && m_nice_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAIFlavor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlavor::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_cpus_isSet) {
        obj.insert(QString("cpus"), ::OpenAPI::toJsonValue(m_cpus));
    }
    if (m_disk_isSet) {
        obj.insert(QString("disk"), ::OpenAPI::toJsonValue(m_disk));
    }
    if (m_mem_isSet) {
        obj.insert(QString("mem"), ::OpenAPI::toJsonValue(m_mem));
    }
    if (m_microservice_isSet) {
        obj.insert(QString("microservice"), ::OpenAPI::toJsonValue(m_microservice));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nice_isSet) {
        obj.insert(QString("nice"), ::OpenAPI::toJsonValue(m_nice));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

bool OAIFlavor::isAvailable() const {
    return m_available;
}
void OAIFlavor::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIFlavor::is_available_Set() const{
    return m_available_isSet;
}

bool OAIFlavor::is_available_Valid() const{
    return m_available_isValid;
}

qint32 OAIFlavor::getCpus() const {
    return m_cpus;
}
void OAIFlavor::setCpus(const qint32 &cpus) {
    m_cpus = cpus;
    m_cpus_isSet = true;
}

bool OAIFlavor::is_cpus_Set() const{
    return m_cpus_isSet;
}

bool OAIFlavor::is_cpus_Valid() const{
    return m_cpus_isValid;
}

qint32 OAIFlavor::getDisk() const {
    return m_disk;
}
void OAIFlavor::setDisk(const qint32 &disk) {
    m_disk = disk;
    m_disk_isSet = true;
}

bool OAIFlavor::is_disk_Set() const{
    return m_disk_isSet;
}

bool OAIFlavor::is_disk_Valid() const{
    return m_disk_isValid;
}

qint32 OAIFlavor::getMem() const {
    return m_mem;
}
void OAIFlavor::setMem(const qint32 &mem) {
    m_mem = mem;
    m_mem_isSet = true;
}

bool OAIFlavor::is_mem_Set() const{
    return m_mem_isSet;
}

bool OAIFlavor::is_mem_Valid() const{
    return m_mem_isValid;
}

bool OAIFlavor::isMicroservice() const {
    return m_microservice;
}
void OAIFlavor::setMicroservice(const bool &microservice) {
    m_microservice = microservice;
    m_microservice_isSet = true;
}

bool OAIFlavor::is_microservice_Set() const{
    return m_microservice_isSet;
}

bool OAIFlavor::is_microservice_Valid() const{
    return m_microservice_isValid;
}

QString OAIFlavor::getName() const {
    return m_name;
}
void OAIFlavor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFlavor::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFlavor::is_name_Valid() const{
    return m_name_isValid;
}

double OAIFlavor::getNice() const {
    return m_nice;
}
void OAIFlavor::setNice(const double &nice) {
    m_nice = nice;
    m_nice_isSet = true;
}

bool OAIFlavor::is_nice_Set() const{
    return m_nice_isSet;
}

bool OAIFlavor::is_nice_Valid() const{
    return m_nice_isValid;
}

double OAIFlavor::getPrice() const {
    return m_price;
}
void OAIFlavor::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIFlavor::is_price_Set() const{
    return m_price_isSet;
}

bool OAIFlavor::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIFlavor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microservice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlavor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cpus_isValid && m_mem_isValid && m_name_isValid && m_price_isValid && true;
}

} // namespace OpenAPI
