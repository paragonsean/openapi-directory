/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentsApi_H
#define OAI_OAIPaymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBody.h"
#include "OAIPaymentData.h"
#include "OAIPayment_Provider.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentsApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentsApi(const int timeOut = 0);
    ~OAIPaymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    */
    virtual void deleteOrganisationsIdPaymentsBillingsBid(const QString &id, const QString &bid);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganisationsIdPaymentsRecurring(const QString &id);

    /**
    * @param[in]  bid QString [required]
    */
    virtual void deleteSelfPaymentsBillingsBid(const QString &bid);

    /**
    * @param[in]  m_id QString [required]
    */
    virtual void deleteSelfPaymentsMethodsMId(const QString &m_id);


    virtual void deleteSelfPaymentsRecurring();

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    * @param[in]  token QString [optional]
    */
    virtual void getOrganisationsIdPaymentsBillingsBidPdf(const QString &id, const QString &bid, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    */
    virtual void getOrganisationsIdPaymentsBillingsBid(const QString &id, const QString &bid);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdPaymentsBillings(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  price QString [required]
    */
    virtual void getOrganisationsIdPaymentsFullPricePrice(const QString &id, const QString &price);

    /**
    * @param[in]  name QString [required]
    */
    virtual void getPaymentsCouponsName(const QString &name);


    virtual void getPaymentsProviders();


    virtual void getPaymentsTokensStripe();

    /**
    * @param[in]  bid QString [required]
    * @param[in]  token QString [optional]
    */
    virtual void getSelfPaymentsBillingsBidPdf(const QString &bid, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bid QString [required]
    */
    virtual void getSelfPaymentsBillingsBid(const QString &bid);


    virtual void getSelfPaymentsBillings();

    /**
    * @param[in]  price QString [required]
    */
    virtual void getSelfPaymentsFullpricePrice(const QString &price);


    virtual void getSelfPaymentsMethods();

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsBillingsUnpaidGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMethodsDefaultGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_payment_data OAIPaymentData [required]
    */
    virtual void organisationsIdPaymentsMethodsDefaultPut(const QString &id, const OAIPaymentData &oai_payment_data);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMethodsGet(const QString &id);

    /**
    * @param[in]  m_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMethodsMIdDelete(const QString &m_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void organisationsIdPaymentsMethodsPost(const QString &id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMonthlyinvoiceGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMonthlyinvoiceMaxcreditPut(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsRecurringGet(const QString &id);

    /**
    * @param[in]  token QString [required]
    */
    virtual void paymentsAssetsPayButtonTokenButtonPngGet(const QString &token);

    /**
    * @param[in]  bid QString [required]
    */
    virtual void paymentsBidEndStripePost(const QString &bid);

    /**
    * @param[in]  id QString [required]
    */
    virtual void postOrganisationsIdPaymentsBillings(const QString &id);


    virtual void postSelfPaymentsBillings();


    virtual void postSelfPaymentsMethods();

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    */
    virtual void putOrganisationsIdPaymentsBillingsBid(const QString &id, const QString &bid);

    /**
    * @param[in]  bid QString [required]
    */
    virtual void putSelfPaymentsBillingsBid(const QString &bid);


    virtual void selfPaymentsMethodsDefaultGet();


    virtual void selfPaymentsMethodsDefaultPut();


    virtual void selfPaymentsMonthlyinvoiceGet();


    virtual void selfPaymentsMonthlyinvoiceMaxcreditPut();


    virtual void selfPaymentsRecurringGet();


    virtual void selfPaymentsTokensStripeGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteOrganisationsIdPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdPaymentsRecurringCallback(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsMethodsMIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsRecurringCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidPdfCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsFullPricePriceCallback(OAIHttpRequestWorker *worker);
    void getPaymentsCouponsNameCallback(OAIHttpRequestWorker *worker);
    void getPaymentsProvidersCallback(OAIHttpRequestWorker *worker);
    void getPaymentsTokensStripeCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsBidPdfCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentsFullpricePriceCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentsMethodsCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsBillingsUnpaidGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsMIdDeleteCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsPostCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsRecurringGetCallback(OAIHttpRequestWorker *worker);
    void paymentsAssetsPayButtonTokenButtonPngGetCallback(OAIHttpRequestWorker *worker);
    void paymentsBidEndStripePostCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdPaymentsBillingsCallback(OAIHttpRequestWorker *worker);
    void postSelfPaymentsBillingsCallback(OAIHttpRequestWorker *worker);
    void postSelfPaymentsMethodsCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void putSelfPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsMethodsDefaultGetCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsMethodsDefaultPutCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsMonthlyinvoiceGetCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsMonthlyinvoiceMaxcreditPutCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsRecurringGetCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsTokensStripeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteOrganisationsIdPaymentsBillingsBidSignal();
    void deleteOrganisationsIdPaymentsRecurringSignal();
    void deleteSelfPaymentsBillingsBidSignal();
    void deleteSelfPaymentsMethodsMIdSignal();
    void deleteSelfPaymentsRecurringSignal();
    void getOrganisationsIdPaymentsBillingsBidPdfSignal();
    void getOrganisationsIdPaymentsBillingsBidSignal();
    void getOrganisationsIdPaymentsBillingsSignal();
    void getOrganisationsIdPaymentsFullPricePriceSignal();
    void getPaymentsCouponsNameSignal();
    void getPaymentsProvidersSignal(QList<OAIPayment_Provider> summary);
    void getPaymentsTokensStripeSignal();
    void getSelfPaymentsBillingsBidPdfSignal();
    void getSelfPaymentsBillingsBidSignal();
    void getSelfPaymentsBillingsSignal();
    void getSelfPaymentsFullpricePriceSignal();
    void getSelfPaymentsMethodsSignal();
    void organisationsIdPaymentsBillingsUnpaidGetSignal();
    void organisationsIdPaymentsMethodsDefaultGetSignal();
    void organisationsIdPaymentsMethodsDefaultPutSignal();
    void organisationsIdPaymentsMethodsGetSignal();
    void organisationsIdPaymentsMethodsMIdDeleteSignal();
    void organisationsIdPaymentsMethodsPostSignal();
    void organisationsIdPaymentsMonthlyinvoiceGetSignal();
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignal();
    void organisationsIdPaymentsRecurringGetSignal();
    void paymentsAssetsPayButtonTokenButtonPngGetSignal();
    void paymentsBidEndStripePostSignal();
    void postOrganisationsIdPaymentsBillingsSignal();
    void postSelfPaymentsBillingsSignal();
    void postSelfPaymentsMethodsSignal();
    void putOrganisationsIdPaymentsBillingsBidSignal();
    void putSelfPaymentsBillingsBidSignal();
    void selfPaymentsMethodsDefaultGetSignal();
    void selfPaymentsMethodsDefaultPutSignal();
    void selfPaymentsMonthlyinvoiceGetSignal();
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignal();
    void selfPaymentsRecurringGetSignal();
    void selfPaymentsTokensStripeGetSignal();


    void deleteOrganisationsIdPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdPaymentsRecurringSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsMethodsMIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsRecurringSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidPdfSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsFullPricePriceSignalFull(OAIHttpRequestWorker *worker);
    void getPaymentsCouponsNameSignalFull(OAIHttpRequestWorker *worker);
    void getPaymentsProvidersSignalFull(OAIHttpRequestWorker *worker, QList<OAIPayment_Provider> summary);
    void getPaymentsTokensStripeSignalFull(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsBidPdfSignalFull(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsSignalFull(OAIHttpRequestWorker *worker);
    void getSelfPaymentsFullpricePriceSignalFull(OAIHttpRequestWorker *worker);
    void getSelfPaymentsMethodsSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsBillingsUnpaidGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsMIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsPostSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsRecurringGetSignalFull(OAIHttpRequestWorker *worker);
    void paymentsAssetsPayButtonTokenButtonPngGetSignalFull(OAIHttpRequestWorker *worker);
    void paymentsBidEndStripePostSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdPaymentsBillingsSignalFull(OAIHttpRequestWorker *worker);
    void postSelfPaymentsBillingsSignalFull(OAIHttpRequestWorker *worker);
    void postSelfPaymentsMethodsSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void putSelfPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsMethodsDefaultGetSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsMethodsDefaultPutSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsMonthlyinvoiceGetSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsRecurringGetSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsTokensStripeGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsBillingsBidSignalError() instead")
    void deleteOrganisationsIdPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsRecurringSignalError() instead")
    void deleteOrganisationsIdPaymentsRecurringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsRecurringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsBillingsBidSignalError() instead")
    void deleteSelfPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsMethodsMIdSignalError() instead")
    void deleteSelfPaymentsMethodsMIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsMethodsMIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsRecurringSignalError() instead")
    void deleteSelfPaymentsRecurringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsRecurringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidPdfSignalError() instead")
    void getOrganisationsIdPaymentsBillingsBidPdfSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidPdfSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidSignalError() instead")
    void getOrganisationsIdPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsSignalError() instead")
    void getOrganisationsIdPaymentsBillingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsFullPricePriceSignalError() instead")
    void getOrganisationsIdPaymentsFullPricePriceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsFullPricePriceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsCouponsNameSignalError() instead")
    void getPaymentsCouponsNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsCouponsNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsProvidersSignalError() instead")
    void getPaymentsProvidersSignalE(QList<OAIPayment_Provider> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsProvidersSignalError(QList<OAIPayment_Provider> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsTokensStripeSignalError() instead")
    void getPaymentsTokensStripeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsTokensStripeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsBidPdfSignalError() instead")
    void getSelfPaymentsBillingsBidPdfSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsBidPdfSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsBidSignalError() instead")
    void getSelfPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsSignalError() instead")
    void getSelfPaymentsBillingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsFullpricePriceSignalError() instead")
    void getSelfPaymentsFullpricePriceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsFullpricePriceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsMethodsSignalError() instead")
    void getSelfPaymentsMethodsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsMethodsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsBillingsUnpaidGetSignalError() instead")
    void organisationsIdPaymentsBillingsUnpaidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsBillingsUnpaidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultGetSignalError() instead")
    void organisationsIdPaymentsMethodsDefaultGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultPutSignalError() instead")
    void organisationsIdPaymentsMethodsDefaultPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsGetSignalError() instead")
    void organisationsIdPaymentsMethodsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsMIdDeleteSignalError() instead")
    void organisationsIdPaymentsMethodsMIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsMIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsPostSignalError() instead")
    void organisationsIdPaymentsMethodsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceGetSignalError() instead")
    void organisationsIdPaymentsMonthlyinvoiceGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalError() instead")
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsRecurringGetSignalError() instead")
    void organisationsIdPaymentsRecurringGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsRecurringGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsAssetsPayButtonTokenButtonPngGetSignalError() instead")
    void paymentsAssetsPayButtonTokenButtonPngGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsAssetsPayButtonTokenButtonPngGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsBidEndStripePostSignalError() instead")
    void paymentsBidEndStripePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsBidEndStripePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdPaymentsBillingsSignalError() instead")
    void postOrganisationsIdPaymentsBillingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdPaymentsBillingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfPaymentsBillingsSignalError() instead")
    void postSelfPaymentsBillingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfPaymentsBillingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfPaymentsMethodsSignalError() instead")
    void postSelfPaymentsMethodsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfPaymentsMethodsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdPaymentsBillingsBidSignalError() instead")
    void putOrganisationsIdPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfPaymentsBillingsBidSignalError() instead")
    void putSelfPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMethodsDefaultGetSignalError() instead")
    void selfPaymentsMethodsDefaultGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMethodsDefaultGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMethodsDefaultPutSignalError() instead")
    void selfPaymentsMethodsDefaultPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMethodsDefaultPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMonthlyinvoiceGetSignalError() instead")
    void selfPaymentsMonthlyinvoiceGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMonthlyinvoiceGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMonthlyinvoiceMaxcreditPutSignalError() instead")
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsRecurringGetSignalError() instead")
    void selfPaymentsRecurringGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsRecurringGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsTokensStripeGetSignalError() instead")
    void selfPaymentsTokensStripeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsTokensStripeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsBillingsBidSignalErrorFull() instead")
    void deleteOrganisationsIdPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsRecurringSignalErrorFull() instead")
    void deleteOrganisationsIdPaymentsRecurringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsRecurringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsBillingsBidSignalErrorFull() instead")
    void deleteSelfPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsMethodsMIdSignalErrorFull() instead")
    void deleteSelfPaymentsMethodsMIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsMethodsMIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsRecurringSignalErrorFull() instead")
    void deleteSelfPaymentsRecurringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsRecurringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidPdfSignalErrorFull() instead")
    void getOrganisationsIdPaymentsBillingsBidPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidSignalErrorFull() instead")
    void getOrganisationsIdPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsSignalErrorFull() instead")
    void getOrganisationsIdPaymentsBillingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsFullPricePriceSignalErrorFull() instead")
    void getOrganisationsIdPaymentsFullPricePriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsFullPricePriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsCouponsNameSignalErrorFull() instead")
    void getPaymentsCouponsNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsCouponsNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsProvidersSignalErrorFull() instead")
    void getPaymentsProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsTokensStripeSignalErrorFull() instead")
    void getPaymentsTokensStripeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsTokensStripeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsBidPdfSignalErrorFull() instead")
    void getSelfPaymentsBillingsBidPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsBidPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsBidSignalErrorFull() instead")
    void getSelfPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsSignalErrorFull() instead")
    void getSelfPaymentsBillingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsFullpricePriceSignalErrorFull() instead")
    void getSelfPaymentsFullpricePriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsFullpricePriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsMethodsSignalErrorFull() instead")
    void getSelfPaymentsMethodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsMethodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsBillingsUnpaidGetSignalErrorFull() instead")
    void organisationsIdPaymentsBillingsUnpaidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsBillingsUnpaidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultGetSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsDefaultGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultPutSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsDefaultPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsGetSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsMIdDeleteSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsMIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsMIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsPostSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceGetSignalErrorFull() instead")
    void organisationsIdPaymentsMonthlyinvoiceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalErrorFull() instead")
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsRecurringGetSignalErrorFull() instead")
    void organisationsIdPaymentsRecurringGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsRecurringGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsAssetsPayButtonTokenButtonPngGetSignalErrorFull() instead")
    void paymentsAssetsPayButtonTokenButtonPngGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsAssetsPayButtonTokenButtonPngGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsBidEndStripePostSignalErrorFull() instead")
    void paymentsBidEndStripePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsBidEndStripePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdPaymentsBillingsSignalErrorFull() instead")
    void postOrganisationsIdPaymentsBillingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdPaymentsBillingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfPaymentsBillingsSignalErrorFull() instead")
    void postSelfPaymentsBillingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfPaymentsBillingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfPaymentsMethodsSignalErrorFull() instead")
    void postSelfPaymentsMethodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfPaymentsMethodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdPaymentsBillingsBidSignalErrorFull() instead")
    void putOrganisationsIdPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfPaymentsBillingsBidSignalErrorFull() instead")
    void putSelfPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMethodsDefaultGetSignalErrorFull() instead")
    void selfPaymentsMethodsDefaultGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMethodsDefaultGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMethodsDefaultPutSignalErrorFull() instead")
    void selfPaymentsMethodsDefaultPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMethodsDefaultPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMonthlyinvoiceGetSignalErrorFull() instead")
    void selfPaymentsMonthlyinvoiceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMonthlyinvoiceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMonthlyinvoiceMaxcreditPutSignalErrorFull() instead")
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsRecurringGetSignalErrorFull() instead")
    void selfPaymentsRecurringGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsRecurringGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsTokensStripeGetSignalErrorFull() instead")
    void selfPaymentsTokensStripeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsTokensStripeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
