/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInstance::OAIAppInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInstance::OAIAppInstance() {
    this->initializeModel();
}

OAIAppInstance::~OAIAppInstance() {}

void OAIAppInstance::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_port_isSet = false;
    m_app_port_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_deploy_number_isSet = false;
    m_deploy_number_isValid = false;

    m_flavor_isSet = false;
    m_flavor_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAppInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppInstance::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_app_port_isValid = ::OpenAPI::fromJsonValue(m_app_port, json[QString("appPort")]);
    m_app_port_isSet = !json[QString("appPort")].isNull() && m_app_port_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_deploy_number_isValid = ::OpenAPI::fromJsonValue(m_deploy_number, json[QString("deployNumber")]);
    m_deploy_number_isSet = !json[QString("deployNumber")].isNull() && m_deploy_number_isValid;

    m_flavor_isValid = ::OpenAPI::fromJsonValue(m_flavor, json[QString("flavor")]);
    m_flavor_isSet = !json[QString("flavor")].isNull() && m_flavor_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAppInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_port_isSet) {
        obj.insert(QString("appPort"), ::OpenAPI::toJsonValue(m_app_port));
    }
    if (m_commit_isSet) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_deploy_number_isSet) {
        obj.insert(QString("deployNumber"), ::OpenAPI::toJsonValue(m_deploy_number));
    }
    if (m_flavor.isSet()) {
        obj.insert(QString("flavor"), ::OpenAPI::toJsonValue(m_flavor));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIAppInstance::getAppId() const {
    return m_app_id;
}
void OAIAppInstance::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAppInstance::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAppInstance::is_app_id_Valid() const{
    return m_app_id_isValid;
}

qint32 OAIAppInstance::getAppPort() const {
    return m_app_port;
}
void OAIAppInstance::setAppPort(const qint32 &app_port) {
    m_app_port = app_port;
    m_app_port_isSet = true;
}

bool OAIAppInstance::is_app_port_Set() const{
    return m_app_port_isSet;
}

bool OAIAppInstance::is_app_port_Valid() const{
    return m_app_port_isValid;
}

QString OAIAppInstance::getCommit() const {
    return m_commit;
}
void OAIAppInstance::setCommit(const QString &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIAppInstance::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIAppInstance::is_commit_Valid() const{
    return m_commit_isValid;
}

qint32 OAIAppInstance::getDeployNumber() const {
    return m_deploy_number;
}
void OAIAppInstance::setDeployNumber(const qint32 &deploy_number) {
    m_deploy_number = deploy_number;
    m_deploy_number_isSet = true;
}

bool OAIAppInstance::is_deploy_number_Set() const{
    return m_deploy_number_isSet;
}

bool OAIAppInstance::is_deploy_number_Valid() const{
    return m_deploy_number_isValid;
}

OAIFlavor OAIAppInstance::getFlavor() const {
    return m_flavor;
}
void OAIAppInstance::setFlavor(const OAIFlavor &flavor) {
    m_flavor = flavor;
    m_flavor_isSet = true;
}

bool OAIAppInstance::is_flavor_Set() const{
    return m_flavor_isSet;
}

bool OAIAppInstance::is_flavor_Valid() const{
    return m_flavor_isValid;
}

QString OAIAppInstance::getId() const {
    return m_id;
}
void OAIAppInstance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppInstance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppInstance::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAppInstance::getIp() const {
    return m_ip;
}
void OAIAppInstance::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIAppInstance::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIAppInstance::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIAppInstance::getState() const {
    return m_state;
}
void OAIAppInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAppInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAppInstance::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAppInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flavor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
