/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINetworkgroupsApi_H
#define OAI_OAINetworkgroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISchema1.h"
#include "OAISchema2.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINetworkgroupsApi : public QObject {
    Q_OBJECT

public:
    OAINetworkgroupsApi(const int timeOut = 0);
    ~OAINetworkgroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void createNetworkGroupExternalPeer(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  oai_schema2 OAISchema2 [optional]
    */
    virtual void createNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<OAISchema2> &oai_schema2 = ::OpenAPI::OptionalParam<OAISchema2>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void createNetworkGroup(const QString &owner_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroupExternalPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const QString &member_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroupPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroup(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const QString &member_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupStream(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupWireGuardConfigurationStream(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupWireGuardConfiguration(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroup(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void listNetworkGroupMembers(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void listNetworkGroupPeers(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void listNetworkGroups(const QString &owner_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkGroupExternalPeerCallback(OAIHttpRequestWorker *worker);
    void createNetworkGroupMemberCallback(OAIHttpRequestWorker *worker);
    void createNetworkGroupCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupExternalPeerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupMemberCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupPeerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupMemberCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupPeerCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupStreamCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupWireGuardConfigurationStreamCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupWireGuardConfigurationCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupCallback(OAIHttpRequestWorker *worker);
    void listNetworkGroupMembersCallback(OAIHttpRequestWorker *worker);
    void listNetworkGroupPeersCallback(OAIHttpRequestWorker *worker);
    void listNetworkGroupsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkGroupExternalPeerSignal(QJsonValue summary);
    void createNetworkGroupMemberSignal();
    void createNetworkGroupSignal(QJsonValue summary);
    void deleteNetworkGroupExternalPeerSignal();
    void deleteNetworkGroupMemberSignal();
    void deleteNetworkGroupPeerSignal();
    void deleteNetworkGroupSignal();
    void getNetworkGroupMemberSignal(OAISchema1 summary);
    void getNetworkGroupPeerSignal(QJsonValue summary);
    void getNetworkGroupStreamSignal(QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationStreamSignal(QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationSignal(QJsonValue summary);
    void getNetworkGroupSignal(QJsonValue summary);
    void listNetworkGroupMembersSignal(QList<OAISchema1> summary);
    void listNetworkGroupPeersSignal(QList<QJsonValue> summary);
    void listNetworkGroupsSignal(QList<QJsonValue> summary);


    void createNetworkGroupExternalPeerSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createNetworkGroupMemberSignalFull(OAIHttpRequestWorker *worker);
    void createNetworkGroupSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteNetworkGroupExternalPeerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupMemberSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupPeerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkGroupMemberSignalFull(OAIHttpRequestWorker *worker, OAISchema1 summary);
    void getNetworkGroupPeerSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupStreamSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationStreamSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void listNetworkGroupMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAISchema1> summary);
    void listNetworkGroupPeersSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void listNetworkGroupsSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);

    Q_DECL_DEPRECATED_X("Use createNetworkGroupExternalPeerSignalError() instead")
    void createNetworkGroupExternalPeerSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupExternalPeerSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupMemberSignalError() instead")
    void createNetworkGroupMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupSignalError() instead")
    void createNetworkGroupSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupExternalPeerSignalError() instead")
    void deleteNetworkGroupExternalPeerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupExternalPeerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupMemberSignalError() instead")
    void deleteNetworkGroupMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupPeerSignalError() instead")
    void deleteNetworkGroupPeerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupPeerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupSignalError() instead")
    void deleteNetworkGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupMemberSignalError() instead")
    void getNetworkGroupMemberSignalE(OAISchema1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupMemberSignalError(OAISchema1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPeerSignalError() instead")
    void getNetworkGroupPeerSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPeerSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupStreamSignalError() instead")
    void getNetworkGroupStreamSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupStreamSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationStreamSignalError() instead")
    void getNetworkGroupWireGuardConfigurationStreamSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationStreamSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationSignalError() instead")
    void getNetworkGroupWireGuardConfigurationSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupSignalError() instead")
    void getNetworkGroupSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupMembersSignalError() instead")
    void listNetworkGroupMembersSignalE(QList<OAISchema1> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupMembersSignalError(QList<OAISchema1> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupPeersSignalError() instead")
    void listNetworkGroupPeersSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupPeersSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupsSignalError() instead")
    void listNetworkGroupsSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupsSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkGroupExternalPeerSignalErrorFull() instead")
    void createNetworkGroupExternalPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupExternalPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupMemberSignalErrorFull() instead")
    void createNetworkGroupMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupSignalErrorFull() instead")
    void createNetworkGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupExternalPeerSignalErrorFull() instead")
    void deleteNetworkGroupExternalPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupExternalPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupMemberSignalErrorFull() instead")
    void deleteNetworkGroupMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupPeerSignalErrorFull() instead")
    void deleteNetworkGroupPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupSignalErrorFull() instead")
    void deleteNetworkGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupMemberSignalErrorFull() instead")
    void getNetworkGroupMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPeerSignalErrorFull() instead")
    void getNetworkGroupPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupStreamSignalErrorFull() instead")
    void getNetworkGroupStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationStreamSignalErrorFull() instead")
    void getNetworkGroupWireGuardConfigurationStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationSignalErrorFull() instead")
    void getNetworkGroupWireGuardConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupSignalErrorFull() instead")
    void getNetworkGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupMembersSignalErrorFull() instead")
    void listNetworkGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupPeersSignalErrorFull() instead")
    void listNetworkGroupPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupsSignalErrorFull() instead")
    void listNetworkGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
